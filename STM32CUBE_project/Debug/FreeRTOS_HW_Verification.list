
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021078  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ea8  08021248  08021248  00022248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080250f0  080250f0  000271cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080250f0  080250f0  000260f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080250f8  080250f8  000271cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080250f8  080250f8  000260f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080250fc  080250fc  000260fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08025100  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0802518c  0002708c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0802522c  0002712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000256f0  200001cc  080252cc  000271cc  2**2
                  ALLOC
 12 ._user_heap_stack 00005004  200258bc  080252cc  000278bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000271cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045ab8  00000000  00000000  000271fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ad7a  00000000  00000000  0006ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003050  00000000  00000000  00077a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025e5  00000000  00000000  0007aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ee57  00000000  00000000  0007d065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ee94  00000000  00000000  000bbebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012383e  00000000  00000000  0010ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022e58e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ccb0  00000000  00000000  0022e5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0023b284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08021230 	.word	0x08021230

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08021230 	.word	0x08021230

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 febf 	bl	80023c0 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fdce 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f85f 	bl	8002720 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fdbe 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001e8 	.word	0x200001e8
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fccb 	bl	8005080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fdb9 	bl	80032a4 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fd56 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000230 	.word	0x20000230
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fb7f 	bl	8002e90 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd26 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000290 	.word	0x20000290
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fb0a 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fb23 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fb02 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fb1b 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fafa 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fb13 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 faf2 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fb0b 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 faea 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fb03 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 fae2 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fafb 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 fada 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 faf3 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 fad2 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 faeb 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 faca 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 fae3 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fac2 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 fadb 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 faba 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 fad3 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fab2 	bl	8002e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 facb 	bl	8002e74 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01f fcd5 	bl	80202a8 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08021318 	.word	0x08021318

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000920:	4a43      	ldr	r2, [pc, #268]	@ (8000a30 <MX_FREERTOS_Init+0x114>)
 8000922:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000926:	2010      	movs	r0, #16
 8000928:	f00d f810 	bl	800d94c <osMessageQueueNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a41      	ldr	r2, [pc, #260]	@ (8000a34 <MX_FREERTOS_Init+0x118>)
 8000930:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000932:	4a41      	ldr	r2, [pc, #260]	@ (8000a38 <MX_FREERTOS_Init+0x11c>)
 8000934:	2110      	movs	r1, #16
 8000936:	2010      	movs	r0, #16
 8000938:	f00d f808 	bl	800d94c <osMessageQueueNew>
 800093c:	4603      	mov	r3, r0
 800093e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a3c <MX_FREERTOS_Init+0x120>)
 8000940:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000942:	4a3f      	ldr	r2, [pc, #252]	@ (8000a40 <MX_FREERTOS_Init+0x124>)
 8000944:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000948:	2008      	movs	r0, #8
 800094a:	f00c ffff 	bl	800d94c <osMessageQueueNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a3c      	ldr	r2, [pc, #240]	@ (8000a44 <MX_FREERTOS_Init+0x128>)
 8000952:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 8000954:	4a3c      	ldr	r2, [pc, #240]	@ (8000a48 <MX_FREERTOS_Init+0x12c>)
 8000956:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800095a:	2008      	movs	r0, #8
 800095c:	f00c fff6 	bl	800d94c <osMessageQueueNew>
 8000960:	4603      	mov	r3, r0
 8000962:	4a3a      	ldr	r2, [pc, #232]	@ (8000a4c <MX_FREERTOS_Init+0x130>)
 8000964:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 8000966:	4a3a      	ldr	r2, [pc, #232]	@ (8000a50 <MX_FREERTOS_Init+0x134>)
 8000968:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800096c:	2008      	movs	r0, #8
 800096e:	f00c ffed 	bl	800d94c <osMessageQueueNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a37      	ldr	r2, [pc, #220]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 8000976:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 8000978:	4a37      	ldr	r2, [pc, #220]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 800097a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800097e:	2008      	movs	r0, #8
 8000980:	f00c ffe4 	bl	800d94c <osMessageQueueNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a35      	ldr	r2, [pc, #212]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 800098a:	4a35      	ldr	r2, [pc, #212]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 800098c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000990:	2008      	movs	r0, #8
 8000992:	f00c ffdb 	bl	800d94c <osMessageQueueNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a32      	ldr	r2, [pc, #200]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 800099a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800099c:	4a32      	ldr	r2, [pc, #200]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800099e:	2100      	movs	r1, #0
 80009a0:	4832      	ldr	r0, [pc, #200]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 80009a2:	f00c fc1f 	bl	800d1e4 <osThreadNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a31      	ldr	r2, [pc, #196]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009ac:	4a31      	ldr	r2, [pc, #196]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4831      	ldr	r0, [pc, #196]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 80009b2:	f00c fc17 	bl	800d1e4 <osThreadNew>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a30      	ldr	r2, [pc, #192]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 80009ba:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009bc:	4a30      	ldr	r2, [pc, #192]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 80009be:	2100      	movs	r1, #0
 80009c0:	4830      	ldr	r0, [pc, #192]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 80009c2:	f00c fc0f 	bl	800d1e4 <osThreadNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 80009ca:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009cc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	482f      	ldr	r0, [pc, #188]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009d2:	f00c fc07 	bl	800d1e4 <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a2e      	ldr	r2, [pc, #184]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009da:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009de:	2100      	movs	r1, #0
 80009e0:	482e      	ldr	r0, [pc, #184]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009e2:	f00c fbff 	bl	800d1e4 <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009ec:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	482d      	ldr	r0, [pc, #180]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009f2:	f00c fbf7 	bl	800d1e4 <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a2c      	ldr	r2, [pc, #176]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009fa:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 80009fc:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	482c      	ldr	r0, [pc, #176]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 8000a02:	f00c fbef 	bl	800d1e4 <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	482b      	ldr	r0, [pc, #172]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 8000a12:	f00c fbe7 	bl	800d1e4 <osThreadNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 8000a1a:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	482a      	ldr	r0, [pc, #168]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 8000a22:	f00c fbdf 	bl	800d1e4 <osThreadNew>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a29      	ldr	r2, [pc, #164]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08024de0 	.word	0x08024de0
 8000a34:	200002d8 	.word	0x200002d8
 8000a38:	08024df8 	.word	0x08024df8
 8000a3c:	200002dc 	.word	0x200002dc
 8000a40:	08024e10 	.word	0x08024e10
 8000a44:	200002e0 	.word	0x200002e0
 8000a48:	08024e28 	.word	0x08024e28
 8000a4c:	200002e4 	.word	0x200002e4
 8000a50:	08024e40 	.word	0x08024e40
 8000a54:	200002e8 	.word	0x200002e8
 8000a58:	08024e58 	.word	0x08024e58
 8000a5c:	200002ec 	.word	0x200002ec
 8000a60:	08024e70 	.word	0x08024e70
 8000a64:	200002f0 	.word	0x200002f0
 8000a68:	08024c9c 	.word	0x08024c9c
 8000a6c:	08000ad5 	.word	0x08000ad5
 8000a70:	200002b4 	.word	0x200002b4
 8000a74:	08024cc0 	.word	0x08024cc0
 8000a78:	08000ae9 	.word	0x08000ae9
 8000a7c:	200002b8 	.word	0x200002b8
 8000a80:	08024ce4 	.word	0x08024ce4
 8000a84:	08000afd 	.word	0x08000afd
 8000a88:	200002bc 	.word	0x200002bc
 8000a8c:	08024d08 	.word	0x08024d08
 8000a90:	08000b11 	.word	0x08000b11
 8000a94:	200002c0 	.word	0x200002c0
 8000a98:	08024d2c 	.word	0x08024d2c
 8000a9c:	08000b25 	.word	0x08000b25
 8000aa0:	200002c4 	.word	0x200002c4
 8000aa4:	08024d50 	.word	0x08024d50
 8000aa8:	08000b39 	.word	0x08000b39
 8000aac:	200002c8 	.word	0x200002c8
 8000ab0:	08024d74 	.word	0x08024d74
 8000ab4:	08000b4d 	.word	0x08000b4d
 8000ab8:	200002cc 	.word	0x200002cc
 8000abc:	08024d98 	.word	0x08024d98
 8000ac0:	08000b61 	.word	0x08000b61
 8000ac4:	200002d0 	.word	0x200002d0
 8000ac8:	08024dbc 	.word	0x08024dbc
 8000acc:	08000b75 	.word	0x08000b75
 8000ad0:	200002d4 	.word	0x200002d4

08000ad4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000adc:	f00b fc90 	bl	800c400 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f00c fc2d 	bl	800d340 <osDelay>
 8000ae6:	e7fb      	b.n	8000ae0 <StartDefaultTask+0xc>

08000ae8 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  UDP_Listen(); // loops here
 8000af0:	f01e fb52 	bl	801f198 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b04:	f01e fa52 	bl	801efac <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b18:	f01f f94a 	bl	801fdb0 <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000b2c:	f01e fc4e 	bl	801f3cc <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000b40:	f01e fe34 	bl	801f7ac <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000b54:	f01e f93c 	bl	801edd0 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000b68:	f01f f808 	bl	801fb7c <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000b7c:	f01e fbd2 	bl	801f324 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8e:	4b27      	ldr	r3, [pc, #156]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000b94:	f043 0310 	orr.w	r3, r3, #16
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0310 	and.w	r3, r3, #16
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a20      	ldr	r2, [pc, #128]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_GPIO_Init+0xa4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

}
 8000c1e:	bf00      	nop
 8000c20:	371c      	adds	r7, #28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c36:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca8 <MX_I2C1_Init+0x78>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <MX_I2C1_Init+0x7c>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6a:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c6c:	f004 fbb4 	bl	80053d8 <HAL_I2C_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c76:	f000 fab7 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c7e:	f006 fd57 	bl	8007730 <HAL_I2CEx_ConfigAnalogFilter>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c88:	f000 faae 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_I2C1_Init+0x74>)
 8000c90:	f006 fd99 	bl	80077c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c9a:	f000 faa5 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200002f4 	.word	0x200002f4
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	20404768 	.word	0x20404768

08000cb0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <MX_I2C2_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d2c <MX_I2C2_Init+0x7c>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cc2:	2214      	movs	r2, #20
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cea:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cec:	f004 fb74 	bl	80053d8 <HAL_I2C_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cf6:	f000 fa77 	bl	80011e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000cfe:	f006 fd17 	bl	8007730 <HAL_I2CEx_ConfigAnalogFilter>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d08:	f000 fa6e 	bl	80011e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_I2C2_Init+0x74>)
 8000d10:	f006 fd59 	bl	80077c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fa65 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000348 	.word	0x20000348
 8000d28:	40005800 	.word	0x40005800
 8000d2c:	20404768 	.word	0x20404768

08000d30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ac      	sub	sp, #176	@ 0xb0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0318 	add.w	r3, r7, #24
 8000d4c:	2284      	movs	r2, #132	@ 0x84
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f01f fc01 	bl	8020558 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a57      	ldr	r2, [pc, #348]	@ (8000eb8 <HAL_I2C_MspInit+0x188>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	f040 80b9 	bne.w	8000ed4 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f007 fa81 	bl	8008278 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000d7c:	f000 fa34 	bl	80011e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b4e      	ldr	r3, [pc, #312]	@ (8000ebc <HAL_I2C_MspInit+0x18c>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d84:	4a4d      	ldr	r2, [pc, #308]	@ (8000ebc <HAL_I2C_MspInit+0x18c>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ebc <HAL_I2C_MspInit+0x18c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	2312      	movs	r3, #18
 8000da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db2:	2304      	movs	r3, #4
 8000db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4840      	ldr	r0, [pc, #256]	@ (8000ec0 <HAL_I2C_MspInit+0x190>)
 8000dc0:	f004 f95e 	bl	8005080 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ebc <HAL_I2C_MspInit+0x18c>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8000ebc <HAL_I2C_MspInit+0x18c>)
 8000dca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ebc <HAL_I2C_MspInit+0x18c>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000ddc:	4b39      	ldr	r3, [pc, #228]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000dde:	4a3a      	ldr	r2, [pc, #232]	@ (8000ec8 <HAL_I2C_MspInit+0x198>)
 8000de0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000de2:	4b38      	ldr	r3, [pc, #224]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000de4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000de8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b36      	ldr	r3, [pc, #216]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b33      	ldr	r3, [pc, #204]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000df8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dfc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e1c:	4829      	ldr	r0, [pc, #164]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000e1e:	f002 fa41 	bl	80032a4 <HAL_DMA_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000e28:	f000 f9de 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000e30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e32:	4a24      	ldr	r2, [pc, #144]	@ (8000ec4 <HAL_I2C_MspInit+0x194>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000e38:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e3a:	4a25      	ldr	r2, [pc, #148]	@ (8000ed0 <HAL_I2C_MspInit+0x1a0>)
 8000e3c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e44:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e48:	2240      	movs	r2, #64	@ 0x40
 8000e4a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e78:	4814      	ldr	r0, [pc, #80]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e7a:	f002 fa13 	bl	80032a4 <HAL_DMA_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000e84:	f000 f9b0 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <HAL_I2C_MspInit+0x19c>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2105      	movs	r1, #5
 8000e98:	201f      	movs	r0, #31
 8000e9a:	f001 ffcf 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e9e:	201f      	movs	r0, #31
 8000ea0:	f001 ffe8 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	f001 ffc7 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000eae:	2020      	movs	r0, #32
 8000eb0:	f001 ffe0 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000eb4:	e0be      	b.n	8001034 <HAL_I2C_MspInit+0x304>
 8000eb6:	bf00      	nop
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	2000039c 	.word	0x2000039c
 8000ec8:	40026088 	.word	0x40026088
 8000ecc:	200003fc 	.word	0x200003fc
 8000ed0:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a58      	ldr	r2, [pc, #352]	@ (800103c <HAL_I2C_MspInit+0x30c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	f040 80aa 	bne.w	8001034 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ee4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f007 f9c1 	bl	8008278 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000efc:	f000 f974 	bl	80011e8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b4f      	ldr	r3, [pc, #316]	@ (8001040 <HAL_I2C_MspInit+0x310>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	4a4e      	ldr	r2, [pc, #312]	@ (8001040 <HAL_I2C_MspInit+0x310>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001040 <HAL_I2C_MspInit+0x310>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f32:	2304      	movs	r3, #4
 8000f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4841      	ldr	r0, [pc, #260]	@ (8001044 <HAL_I2C_MspInit+0x314>)
 8000f40:	f004 f89e 	bl	8005080 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f44:	4b3e      	ldr	r3, [pc, #248]	@ (8001040 <HAL_I2C_MspInit+0x310>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	4a3d      	ldr	r2, [pc, #244]	@ (8001040 <HAL_I2C_MspInit+0x310>)
 8000f4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f50:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <HAL_I2C_MspInit+0x310>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800104c <HAL_I2C_MspInit+0x31c>)
 8000f60:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000f62:	4b39      	ldr	r3, [pc, #228]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f64:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000f68:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6a:	4b37      	ldr	r3, [pc, #220]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b35      	ldr	r3, [pc, #212]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b34      	ldr	r3, [pc, #208]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7e:	4b32      	ldr	r3, [pc, #200]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f84:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f96:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000f9c:	482a      	ldr	r0, [pc, #168]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000f9e:	f002 f981 	bl	80032a4 <HAL_DMA_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000fa8:	f000 f91e 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a26      	ldr	r2, [pc, #152]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fb2:	4a25      	ldr	r2, [pc, #148]	@ (8001048 <HAL_I2C_MspInit+0x318>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000fb8:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fba:	4a26      	ldr	r2, [pc, #152]	@ (8001054 <HAL_I2C_MspInit+0x324>)
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000fbe:	4b24      	ldr	r3, [pc, #144]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fc0:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000fc4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fc8:	2240      	movs	r2, #64	@ 0x40
 8000fca:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000ff8:	4815      	ldr	r0, [pc, #84]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8000ffa:	f002 f953 	bl	80032a4 <HAL_DMA_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001004:	f000 f8f0 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a11      	ldr	r2, [pc, #68]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 800100c:	639a      	str	r2, [r3, #56]	@ 0x38
 800100e:	4a10      	ldr	r2, [pc, #64]	@ (8001050 <HAL_I2C_MspInit+0x320>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2105      	movs	r1, #5
 8001018:	2021      	movs	r0, #33	@ 0x21
 800101a:	f001 ff0f 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800101e:	2021      	movs	r0, #33	@ 0x21
 8001020:	f001 ff28 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2105      	movs	r1, #5
 8001028:	2022      	movs	r0, #34	@ 0x22
 800102a:	f001 ff07 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800102e:	2022      	movs	r0, #34	@ 0x22
 8001030:	f001 ff20 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 8001034:	bf00      	nop
 8001036:	37b0      	adds	r7, #176	@ 0xb0
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40005800 	.word	0x40005800
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400
 8001048:	2000045c 	.word	0x2000045c
 800104c:	40026058 	.word	0x40026058
 8001050:	200004bc 	.word	0x200004bc
 8001054:	400260b8 	.word	0x400260b8

08001058 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <_write+0x3c>)
 8001066:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b29a      	uxth	r2, r3
 800106c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	4809      	ldr	r0, [pc, #36]	@ (8001098 <_write+0x40>)
 8001074:	f009 fd76 	bl	800ab64 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8001078:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107c:	2201      	movs	r2, #1
 800107e:	6979      	ldr	r1, [r7, #20]
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <_write+0x40>)
 8001082:	f009 fd6f 	bl	800ab64 <HAL_UART_Transmit>
	return len + 1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	08021338 	.word	0x08021338
 8001098:	200009bc 	.word	0x200009bc

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f001 f93d 	bl	800231e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f822 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff fd6e 	bl	8000b88 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ac:	f7ff fb9c 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80010b0:	f000 fe4c 	bl	8001d4c <MX_USART3_UART_Init>
  MX_CRC_Init();
 80010b4:	f7ff fb56 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 80010b8:	f000 fde8 	bl	8001c8c <MX_UART4_Init>
  MX_UART5_Init();
 80010bc:	f000 fe16 	bl	8001cec <MX_UART5_Init>
  MX_I2C1_Init();
 80010c0:	f7ff fdb6 	bl	8000c30 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010c4:	f7ff fdf4 	bl	8000cb0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80010c8:	f000 f894 	bl	80011f4 <MX_SPI1_Init>
  MX_SPI4_Init();
 80010cc:	f000 f8d0 	bl	8001270 <MX_SPI4_Init>
  MX_ADC1_Init();
 80010d0:	f7ff fa84 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 80010d4:	f000 fd38 	bl	8001b48 <MX_TIM6_Init>
  MX_TIM2_Init();
 80010d8:	f000 fce8 	bl	8001aac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010dc:	f00b fff0 	bl	800d0c0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010e0:	f7ff fc1c 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010e4:	f00c f820 	bl	800d128 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <main+0x4c>

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	@ 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	@ 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f01f fa2c 	bl	8020558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <SystemClock_Config+0xd0>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <SystemClock_Config+0xd0>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	@ 0x40
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <SystemClock_Config+0xd0>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <SystemClock_Config+0xd4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a24      	ldr	r2, [pc, #144]	@ (80011c0 <SystemClock_Config+0xd4>)
 800112e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <SystemClock_Config+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001144:	2301      	movs	r3, #1
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001148:	2310      	movs	r3, #16
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001154:	2308      	movs	r3, #8
 8001156:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001158:	23d8      	movs	r3, #216	@ 0xd8
 800115a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001164:	f107 0320 	add.w	r3, r7, #32
 8001168:	4618      	mov	r0, r3
 800116a:	f006 fbc9 	bl	8007900 <HAL_RCC_OscConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001174:	f000 f838 	bl	80011e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001178:	f006 fb72 	bl	8007860 <HAL_PWREx_EnableOverDrive>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001182:	f000 f831 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2302      	movs	r3, #2
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001192:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001196:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2107      	movs	r1, #7
 80011a4:	4618      	mov	r0, r3
 80011a6:	f006 fe4f 	bl	8007e48 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011b0:	f000 f81a 	bl	80011e8 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3750      	adds	r7, #80	@ 0x50
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40007000 	.word	0x40007000

080011c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011d6:	f001 f8af 	bl	8002338 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40001400 	.word	0x40001400

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <MX_SPI1_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <MX_SPI1_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001200:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_SPI1_Init+0x74>)
 800120e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001214:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <MX_SPI1_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001222:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001226:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_SPI1_Init+0x74>)
 800122a:	2218      	movs	r2, #24
 800122c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <MX_SPI1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001240:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001242:	2207      	movs	r2, #7
 8001244:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001246:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_SPI1_Init+0x74>)
 800124e:	2208      	movs	r2, #8
 8001250:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_SPI1_Init+0x74>)
 8001254:	f007 fc00 	bl	8008a58 <HAL_SPI_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f7ff ffc3 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000051c 	.word	0x2000051c
 800126c:	40013000 	.word	0x40013000

08001270 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <MX_SPI4_Init+0x68>)
 8001276:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <MX_SPI4_Init+0x6c>)
 8001278:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_SPI4_Init+0x68>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_SPI4_Init+0x68>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001286:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_SPI4_Init+0x68>)
 8001288:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800128c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800128e:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_SPI4_Init+0x68>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_SPI4_Init+0x68>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800129a:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_SPI4_Init+0x68>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <MX_SPI4_Init+0x68>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_SPI4_Init+0x68>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MX_SPI4_Init+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_SPI4_Init+0x68>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <MX_SPI4_Init+0x68>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_SPI4_Init+0x68>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_SPI4_Init+0x68>)
 80012c6:	f007 fbc7 	bl	8008a58 <HAL_SPI_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80012d0:	f7ff ff8a 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000580 	.word	0x20000580
 80012dc:	40013400 	.word	0x40013400

080012e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4aa1      	ldr	r2, [pc, #644]	@ (8001584 <HAL_SPI_MspInit+0x2a4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	f040 80a9 	bne.w	8001456 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001304:	4ba0      	ldr	r3, [pc, #640]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001308:	4a9f      	ldr	r2, [pc, #636]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 800130a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001310:	4b9d      	ldr	r3, [pc, #628]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b9a      	ldr	r3, [pc, #616]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4a99      	ldr	r2, [pc, #612]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6313      	str	r3, [r2, #48]	@ 0x30
 8001328:	4b97      	ldr	r3, [pc, #604]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b94      	ldr	r3, [pc, #592]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	4a93      	ldr	r2, [pc, #588]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001340:	4b91      	ldr	r3, [pc, #580]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800134c:	2370      	movs	r3, #112	@ 0x70
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135c:	2305      	movs	r3, #5
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4889      	ldr	r0, [pc, #548]	@ (800158c <HAL_SPI_MspInit+0x2ac>)
 8001368:	f003 fe8a 	bl	8005080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800136c:	2320      	movs	r3, #32
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137c:	2305      	movs	r3, #5
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4882      	ldr	r0, [pc, #520]	@ (8001590 <HAL_SPI_MspInit+0x2b0>)
 8001388:	f003 fe7a 	bl	8005080 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800138c:	4b81      	ldr	r3, [pc, #516]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 800138e:	4a82      	ldr	r2, [pc, #520]	@ (8001598 <HAL_SPI_MspInit+0x2b8>)
 8001390:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001392:	4b80      	ldr	r3, [pc, #512]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 8001394:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001398:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139a:	4b7e      	ldr	r3, [pc, #504]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ae:	4b79      	ldr	r3, [pc, #484]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b4:	4b77      	ldr	r3, [pc, #476]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013ba:	4b76      	ldr	r3, [pc, #472]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013c0:	4b74      	ldr	r3, [pc, #464]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c6:	4b73      	ldr	r3, [pc, #460]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013cc:	4871      	ldr	r0, [pc, #452]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013ce:	f001 ff69 	bl	80032a4 <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80013d8:	f7ff ff06 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a6d      	ldr	r2, [pc, #436]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80013e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001594 <HAL_SPI_MspInit+0x2b4>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013e8:	4b6c      	ldr	r3, [pc, #432]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 80013ea:	4a6d      	ldr	r2, [pc, #436]	@ (80015a0 <HAL_SPI_MspInit+0x2c0>)
 80013ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013ee:	4b6b      	ldr	r3, [pc, #428]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 80013f0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f6:	4b69      	ldr	r3, [pc, #420]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 80013f8:	2240      	movs	r2, #64	@ 0x40
 80013fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	4b67      	ldr	r3, [pc, #412]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001402:	4b66      	ldr	r3, [pc, #408]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 8001404:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001408:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140a:	4b64      	ldr	r3, [pc, #400]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001410:	4b62      	ldr	r3, [pc, #392]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001416:	4b61      	ldr	r3, [pc, #388]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800141c:	4b5f      	ldr	r3, [pc, #380]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001422:	4b5e      	ldr	r3, [pc, #376]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001428:	485c      	ldr	r0, [pc, #368]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 800142a:	f001 ff3b 	bl	80032a4 <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001434:	f7ff fed8 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a58      	ldr	r2, [pc, #352]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 800143c:	655a      	str	r2, [r3, #84]	@ 0x54
 800143e:	4a57      	ldr	r2, [pc, #348]	@ (800159c <HAL_SPI_MspInit+0x2bc>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2105      	movs	r1, #5
 8001448:	2023      	movs	r0, #35	@ 0x23
 800144a:	f001 fcf7 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800144e:	2023      	movs	r0, #35	@ 0x23
 8001450:	f001 fd10 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001454:	e091      	b.n	800157a <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a52      	ldr	r2, [pc, #328]	@ (80015a4 <HAL_SPI_MspInit+0x2c4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	f040 808c 	bne.w	800157a <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001462:	4b49      	ldr	r3, [pc, #292]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a48      	ldr	r2, [pc, #288]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001468:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b46      	ldr	r3, [pc, #280]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800147a:	4b43      	ldr	r3, [pc, #268]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a42      	ldr	r2, [pc, #264]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b40      	ldr	r3, [pc, #256]	@ (8001588 <HAL_SPI_MspInit+0x2a8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001492:	2374      	movs	r3, #116	@ 0x74
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014a2:	2305      	movs	r3, #5
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	483e      	ldr	r0, [pc, #248]	@ (80015a8 <HAL_SPI_MspInit+0x2c8>)
 80014ae:	f003 fde7 	bl	8005080 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80014b2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014b4:	4a3e      	ldr	r2, [pc, #248]	@ (80015b0 <HAL_SPI_MspInit+0x2d0>)
 80014b6:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80014b8:	4b3c      	ldr	r3, [pc, #240]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014be:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c0:	4b3a      	ldr	r3, [pc, #232]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c6:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014cc:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014d2:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d4:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014da:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80014e0:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ec:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80014f2:	482e      	ldr	r0, [pc, #184]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 80014f4:	f001 fed6 	bl	80032a4 <HAL_DMA_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80014fe:	f7ff fe73 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a29      	ldr	r2, [pc, #164]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 8001506:	659a      	str	r2, [r3, #88]	@ 0x58
 8001508:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <HAL_SPI_MspInit+0x2cc>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800150e:	4b29      	ldr	r3, [pc, #164]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001510:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <HAL_SPI_MspInit+0x2d8>)
 8001512:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001514:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001516:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800151a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 800151e:	2240      	movs	r2, #64	@ 0x40
 8001520:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 800152a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800152e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001530:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800153c:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800154e:	4819      	ldr	r0, [pc, #100]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001550:	f001 fea8 	bl	80032a4 <HAL_DMA_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 800155a:	f7ff fe45 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001562:	655a      	str	r2, [r3, #84]	@ 0x54
 8001564:	4a13      	ldr	r2, [pc, #76]	@ (80015b4 <HAL_SPI_MspInit+0x2d4>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2105      	movs	r1, #5
 800156e:	2054      	movs	r0, #84	@ 0x54
 8001570:	f001 fc64 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001574:	2054      	movs	r0, #84	@ 0x54
 8001576:	f001 fc7d 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	@ 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40013000 	.word	0x40013000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	200005e4 	.word	0x200005e4
 8001598:	40026440 	.word	0x40026440
 800159c:	20000644 	.word	0x20000644
 80015a0:	40026458 	.word	0x40026458
 80015a4:	40013400 	.word	0x40013400
 80015a8:	40021000 	.word	0x40021000
 80015ac:	200006a4 	.word	0x200006a4
 80015b0:	40026410 	.word	0x40026410
 80015b4:	20000704 	.word	0x20000704
 80015b8:	40026428 	.word	0x40026428

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <HAL_MspInit+0x4c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	210f      	movs	r1, #15
 80015f6:	f06f 0001 	mvn.w	r0, #1
 80015fa:	f001 fc1f 	bl	8002e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08e      	sub	sp, #56	@ 0x38
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800161c:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <HAL_InitTick+0xe0>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	4a32      	ldr	r2, [pc, #200]	@ (80016ec <HAL_InitTick+0xe0>)
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	6413      	str	r3, [r2, #64]	@ 0x40
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <HAL_InitTick+0xe0>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001634:	f107 0210 	add.w	r2, r7, #16
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f006 fde8 	bl	8008214 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164a:	2b00      	cmp	r3, #0
 800164c:	d103      	bne.n	8001656 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800164e:	f006 fdb9 	bl	80081c4 <HAL_RCC_GetPCLK1Freq>
 8001652:	6378      	str	r0, [r7, #52]	@ 0x34
 8001654:	e004      	b.n	8001660 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001656:	f006 fdb5 	bl	80081c4 <HAL_RCC_GetPCLK1Freq>
 800165a:	4603      	mov	r3, r0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001662:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <HAL_InitTick+0xe4>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	0c9b      	lsrs	r3, r3, #18
 800166a:	3b01      	subs	r3, #1
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <HAL_InitTick+0xe8>)
 8001670:	4a21      	ldr	r2, [pc, #132]	@ (80016f8 <HAL_InitTick+0xec>)
 8001672:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001674:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <HAL_InitTick+0xe8>)
 8001676:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800167a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800167c:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <HAL_InitTick+0xe8>)
 800167e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001680:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <HAL_InitTick+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <HAL_InitTick+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_InitTick+0xe8>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001694:	4817      	ldr	r0, [pc, #92]	@ (80016f4 <HAL_InitTick+0xe8>)
 8001696:	f008 fcc9 	bl	800a02c <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11b      	bne.n	80016e0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80016a8:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <HAL_InitTick+0xe8>)
 80016aa:	f008 fdaf 	bl	800a20c <HAL_TIM_Base_Start_IT>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016bc:	2037      	movs	r0, #55	@ 0x37
 80016be:	f001 fbd9 	bl	8002e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d808      	bhi.n	80016da <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	2037      	movs	r0, #55	@ 0x37
 80016ce:	f001 fbb5 	bl	8002e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <HAL_InitTick+0xf0>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e002      	b.n	80016e0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3738      	adds	r7, #56	@ 0x38
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	431bde83 	.word	0x431bde83
 80016f4:	20000764 	.word	0x20000764
 80016f8:	40001400 	.word	0x40001400
 80016fc:	20000004 	.word	0x20000004

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <NMI_Handler+0x4>

08001708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <MemManage_Handler+0x4>

08001718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <UsageFault_Handler+0x4>

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <DMA1_Stream0_IRQHandler+0x10>)
 800173e:	f001 ff51 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000aa4 	.word	0x20000aa4

0800174c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <DMA1_Stream1_IRQHandler+0x10>)
 8001752:	f001 ff47 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000084c 	.word	0x2000084c

08001760 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <DMA1_Stream2_IRQHandler+0x10>)
 8001766:	f001 ff3d 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000a44 	.word	0x20000a44

08001774 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <DMA1_Stream3_IRQHandler+0x10>)
 800177a:	f001 ff33 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000045c 	.word	0x2000045c

08001788 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA1_Stream5_IRQHandler+0x10>)
 800178e:	f001 ff29 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000039c 	.word	0x2000039c

0800179c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <DMA1_Stream6_IRQHandler+0x10>)
 80017a2:	f001 ff1f 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200003fc 	.word	0x200003fc

080017b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <I2C1_EV_IRQHandler+0x10>)
 80017b6:	f004 fa51 	bl	8005c5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200002f4 	.word	0x200002f4

080017c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <I2C1_ER_IRQHandler+0x10>)
 80017ca:	f004 fa61 	bl	8005c90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002f4 	.word	0x200002f4

080017d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <I2C2_EV_IRQHandler+0x10>)
 80017de:	f004 fa3d 	bl	8005c5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000348 	.word	0x20000348

080017ec <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <I2C2_ER_IRQHandler+0x10>)
 80017f2:	f004 fa4d 	bl	8005c90 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000348 	.word	0x20000348

08001800 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <SPI1_IRQHandler+0x10>)
 8001806:	f007 fe87 	bl	8009518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000051c 	.word	0x2000051c

08001814 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001818:	4802      	ldr	r0, [pc, #8]	@ (8001824 <USART3_IRQHandler+0x10>)
 800181a:	f009 fbc9 	bl	800afb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200009bc 	.word	0x200009bc

08001828 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <DMA1_Stream7_IRQHandler+0x10>)
 800182e:	f001 fed9 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200004bc 	.word	0x200004bc

0800183c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <UART4_IRQHandler+0x10>)
 8001842:	f009 fbb5 	bl	800afb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200008ac 	.word	0x200008ac

08001850 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <UART5_IRQHandler+0x10>)
 8001856:	f009 fbab 	bl	800afb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000934 	.word	0x20000934

08001864 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM6_DAC_IRQHandler+0x10>)
 800186a:	f008 fd47 	bl	800a2fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000800 	.word	0x20000800

08001878 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM7_IRQHandler+0x10>)
 800187e:	f008 fd3d 	bl	800a2fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000764 	.word	0x20000764

0800188c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <DMA2_Stream0_IRQHandler+0x10>)
 8001892:	f001 fea7 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200006a4 	.word	0x200006a4

080018a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <DMA2_Stream1_IRQHandler+0x10>)
 80018a6:	f001 fe9d 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000704 	.word	0x20000704

080018b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <DMA2_Stream2_IRQHandler+0x10>)
 80018ba:	f001 fe93 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200005e4 	.word	0x200005e4

080018c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <DMA2_Stream3_IRQHandler+0x10>)
 80018ce:	f001 fe89 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000644 	.word	0x20000644

080018dc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <DMA2_Stream4_IRQHandler+0x10>)
 80018e2:	f001 fe7f 	bl	80035e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000230 	.word	0x20000230

080018f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <ETH_IRQHandler+0x10>)
 80018f6:	f002 fcdb 	bl	80042b0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000cf98 	.word	0x2000cf98

08001904 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <ETH_WKUP_IRQHandler+0x10>)
 800190a:	f002 fcd1 	bl	80042b0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000cf98 	.word	0x2000cf98

08001918 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <SPI4_IRQHandler+0x10>)
 800191e:	f007 fdfb 	bl	8009518 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000580 	.word	0x20000580

0800192c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_kill>:

int _kill(int pid, int sig)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <_kill+0x20>)
 8001948:	2216      	movs	r2, #22
 800194a:	601a      	str	r2, [r3, #0]
  return -1;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	200258ac 	.word	0x200258ac

08001960 <_exit>:

void _exit (int status)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001968:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffe5 	bl	800193c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001972:	bf00      	nop
 8001974:	e7fd      	b.n	8001972 <_exit+0x12>

08001976 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e00a      	b.n	800199e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001988:	f3af 8000 	nop.w
 800198c:	4601      	mov	r1, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	60ba      	str	r2, [r7, #8]
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbf0      	blt.n	8001988 <_read+0x12>
  }

  return len;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d8:	605a      	str	r2, [r3, #4]
  return 0;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_isatty>:

int _isatty(int file)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f0:	2301      	movs	r3, #1
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	@ (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d205      	bcs.n	8001a54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <_sbrk+0x6c>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	20050000 	.word	0x20050000
 8001a78:	00002000 	.word	0x00002000
 8001a7c:	200007b0 	.word	0x200007b0
 8001a80:	200258c0 	.word	0x200258c0
 8001a84:	200258ac 	.word	0x200258ac

08001a88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <SystemInit+0x20>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <SystemInit+0x20>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001acc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ad0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af2:	4814      	ldr	r0, [pc, #80]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001af4:	f008 fa9a 	bl	800a02c <HAL_TIM_Base_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001afe:	f7ff fb73 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001b10:	f008 fcfc 	bl	800a50c <HAL_TIM_ConfigClockSource>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b1a:	f7ff fb65 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4806      	ldr	r0, [pc, #24]	@ (8001b44 <MX_TIM2_Init+0x98>)
 8001b2c:	f008 ff20 	bl	800a970 <HAL_TIMEx_MasterConfigSynchronization>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b36:	f7ff fb57 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200007b4 	.word	0x200007b4

08001b48 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b58:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MX_TIM6_Init+0x64>)
 8001b5a:	4a15      	ldr	r2, [pc, #84]	@ (8001bb0 <MX_TIM6_Init+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <MX_TIM6_Init+0x64>)
 8001b60:	f240 221b 	movw	r2, #539	@ 0x21b
 8001b64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_TIM6_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <MX_TIM6_Init+0x64>)
 8001b6e:	2263      	movs	r2, #99	@ 0x63
 8001b70:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_TIM6_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b78:	480c      	ldr	r0, [pc, #48]	@ (8001bac <MX_TIM6_Init+0x64>)
 8001b7a:	f008 fa57 	bl	800a02c <HAL_TIM_Base_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b84:	f7ff fb30 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b88:	2320      	movs	r3, #32
 8001b8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	@ (8001bac <MX_TIM6_Init+0x64>)
 8001b96:	f008 feeb 	bl	800a970 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ba0:	f7ff fb22 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000800 	.word	0x20000800
 8001bb0:	40001000 	.word	0x40001000

08001bb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c7c <HAL_TIM_Base_MspInit+0xc8>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	4a2c      	ldr	r2, [pc, #176]	@ (8001c7c <HAL_TIM_Base_MspInit+0xc8>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <HAL_TIM_Base_MspInit+0xc8>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001bde:	e049      	b.n	8001c74 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a26      	ldr	r2, [pc, #152]	@ (8001c80 <HAL_TIM_Base_MspInit+0xcc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d144      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_TIM_Base_MspInit+0xc8>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	4a23      	ldr	r2, [pc, #140]	@ (8001c7c <HAL_TIM_Base_MspInit+0xc8>)
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf6:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <HAL_TIM_Base_MspInit+0xc8>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c04:	4a20      	ldr	r2, [pc, #128]	@ (8001c88 <HAL_TIM_Base_MspInit+0xd4>)
 8001c06:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c0a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c0e:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c10:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c16:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c22:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c24:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c2a:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c32:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c40:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001c48:	480e      	ldr	r0, [pc, #56]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c4a:	f001 fb2b 	bl	80032a4 <HAL_DMA_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001c54:	f7ff fac8 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c5c:	621a      	str	r2, [r3, #32]
 8001c5e:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <HAL_TIM_Base_MspInit+0xd0>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2105      	movs	r1, #5
 8001c68:	2036      	movs	r0, #54	@ 0x36
 8001c6a:	f001 f8e7 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c6e:	2036      	movs	r0, #54	@ 0x36
 8001c70:	f001 f900 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40001000 	.word	0x40001000
 8001c84:	2000084c 	.word	0x2000084c
 8001c88:	40026028 	.word	0x40026028

08001c8c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001c92:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <MX_UART4_Init+0x5c>)
 8001c94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c96:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001c98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <MX_UART4_Init+0x58>)
 8001cd0:	f008 fefa 	bl	800aac8 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001cda:	f7ff fa85 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200008ac 	.word	0x200008ac
 8001ce8:	40004c00 	.word	0x40004c00

08001cec <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001cf2:	4a15      	ldr	r2, [pc, #84]	@ (8001d48 <MX_UART5_Init+0x5c>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_UART5_Init+0x58>)
 8001d30:	f008 feca 	bl	800aac8 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d3a:	f7ff fa55 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000934 	.word	0x20000934
 8001d48:	40005000 	.word	0x40005000

08001d4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d52:	4a15      	ldr	r2, [pc, #84]	@ (8001da8 <MX_USART3_UART_Init+0x5c>)
 8001d54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d72:	220c      	movs	r2, #12
 8001d74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_USART3_UART_Init+0x58>)
 8001d90:	f008 fe9a 	bl	800aac8 <HAL_UART_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d9a:	f7ff fa25 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200009bc 	.word	0x200009bc
 8001da8:	40004800 	.word	0x40004800

08001dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b0b0      	sub	sp, #192	@ 0xc0
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dc8:	2284      	movs	r2, #132	@ 0x84
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f01e fbc3 	bl	8020558 <memset>
  if(uartHandle->Instance==UART4)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4ab0      	ldr	r2, [pc, #704]	@ (8002098 <HAL_UART_MspInit+0x2ec>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d173      	bne.n	8001ec4 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dea:	4618      	mov	r0, r3
 8001dec:	f006 fa44 	bl	8008278 <HAL_RCCEx_PeriphCLKConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001df6:	f7ff f9f7 	bl	80011e8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001dfa:	4ba8      	ldr	r3, [pc, #672]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	4aa7      	ldr	r2, [pc, #668]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001e00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e06:	4ba5      	ldr	r3, [pc, #660]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	4ba2      	ldr	r3, [pc, #648]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4aa1      	ldr	r2, [pc, #644]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001e18:	f043 0304 	orr.w	r3, r3, #4
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b9f      	ldr	r3, [pc, #636]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e44:	2308      	movs	r3, #8
 8001e46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4893      	ldr	r0, [pc, #588]	@ (80020a0 <HAL_UART_MspInit+0x2f4>)
 8001e52:	f003 f915 	bl	8005080 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001e56:	4b93      	ldr	r3, [pc, #588]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e58:	4a93      	ldr	r2, [pc, #588]	@ (80020a8 <HAL_UART_MspInit+0x2fc>)
 8001e5a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001e5c:	4b91      	ldr	r3, [pc, #580]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e62:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e64:	4b8f      	ldr	r3, [pc, #572]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6a:	4b8e      	ldr	r3, [pc, #568]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e70:	4b8c      	ldr	r3, [pc, #560]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e76:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e78:	4b8a      	ldr	r3, [pc, #552]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e84:	4b87      	ldr	r3, [pc, #540]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e8a:	4b86      	ldr	r3, [pc, #536]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e90:	4b84      	ldr	r3, [pc, #528]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e96:	4883      	ldr	r0, [pc, #524]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001e98:	f001 fa04 	bl	80032a4 <HAL_DMA_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ea2:	f7ff f9a1 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a7e      	ldr	r2, [pc, #504]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001eaa:	675a      	str	r2, [r3, #116]	@ 0x74
 8001eac:	4a7d      	ldr	r2, [pc, #500]	@ (80020a4 <HAL_UART_MspInit+0x2f8>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	2034      	movs	r0, #52	@ 0x34
 8001eb8:	f000 ffc0 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ebc:	2034      	movs	r0, #52	@ 0x34
 8001ebe:	f000 ffd9 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ec2:	e0e4      	b.n	800208e <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a78      	ldr	r2, [pc, #480]	@ (80020ac <HAL_UART_MspInit+0x300>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f040 8095 	bne.w	8001ffa <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001ed0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f006 f9ca 	bl	8008278 <HAL_RCCEx_PeriphCLKConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001eea:	f7ff f97d 	bl	80011e8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001eee:	4b6b      	ldr	r3, [pc, #428]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a6a      	ldr	r2, [pc, #424]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001ef4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b68      	ldr	r3, [pc, #416]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	4b65      	ldr	r3, [pc, #404]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a64      	ldr	r2, [pc, #400]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b62      	ldr	r3, [pc, #392]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a5e      	ldr	r2, [pc, #376]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f50:	2308      	movs	r3, #8
 8001f52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f56:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4850      	ldr	r0, [pc, #320]	@ (80020a0 <HAL_UART_MspInit+0x2f4>)
 8001f5e:	f003 f88f 	bl	8005080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f62:	2304      	movs	r3, #4
 8001f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f7a:	2308      	movs	r3, #8
 8001f7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f80:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f84:	4619      	mov	r1, r3
 8001f86:	484a      	ldr	r0, [pc, #296]	@ (80020b0 <HAL_UART_MspInit+0x304>)
 8001f88:	f003 f87a 	bl	8005080 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001f8c:	4b49      	ldr	r3, [pc, #292]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80020b8 <HAL_UART_MspInit+0x30c>)
 8001f90:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001f92:	4b48      	ldr	r3, [pc, #288]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001f94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9a:	4b46      	ldr	r3, [pc, #280]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b44      	ldr	r3, [pc, #272]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b43      	ldr	r3, [pc, #268]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fac:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fae:	4b41      	ldr	r3, [pc, #260]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001fba:	4b3e      	ldr	r3, [pc, #248]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001fcc:	4839      	ldr	r0, [pc, #228]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fce:	f001 f969 	bl	80032a4 <HAL_DMA_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_MspInit+0x230>
      Error_Handler();
 8001fd8:	f7ff f906 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a35      	ldr	r2, [pc, #212]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fe0:	675a      	str	r2, [r3, #116]	@ 0x74
 8001fe2:	4a34      	ldr	r2, [pc, #208]	@ (80020b4 <HAL_UART_MspInit+0x308>)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2105      	movs	r1, #5
 8001fec:	2035      	movs	r0, #53	@ 0x35
 8001fee:	f000 ff25 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001ff2:	2035      	movs	r0, #53	@ 0x35
 8001ff4:	f000 ff3e 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 8001ff8:	e049      	b.n	800208e <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80020bc <HAL_UART_MspInit+0x310>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d144      	bne.n	800208e <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002004:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002008:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800200a:	2300      	movs	r3, #0
 800200c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002012:	4618      	mov	r0, r3
 8002014:	f006 f930 	bl	8008278 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_MspInit+0x276>
      Error_Handler();
 800201e:	f7ff f8e3 	bl	80011e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800202c:	6413      	str	r3, [r2, #64]	@ 0x40
 800202e:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800203a:	4b18      	ldr	r3, [pc, #96]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a17      	ldr	r2, [pc, #92]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <HAL_UART_MspInit+0x2f0>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002052:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800206c:	2307      	movs	r3, #7
 800206e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002072:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002076:	4619      	mov	r1, r3
 8002078:	480d      	ldr	r0, [pc, #52]	@ (80020b0 <HAL_UART_MspInit+0x304>)
 800207a:	f003 f801 	bl	8005080 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2105      	movs	r1, #5
 8002082:	2027      	movs	r0, #39	@ 0x27
 8002084:	f000 feda 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002088:	2027      	movs	r0, #39	@ 0x27
 800208a:	f000 fef3 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	37c0      	adds	r7, #192	@ 0xc0
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40004c00 	.word	0x40004c00
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020800 	.word	0x40020800
 80020a4:	20000a44 	.word	0x20000a44
 80020a8:	40026040 	.word	0x40026040
 80020ac:	40005000 	.word	0x40005000
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	20000aa4 	.word	0x20000aa4
 80020b8:	40026010 	.word	0x40026010
 80020bc:	40004800 	.word	0x40004800

080020c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020c4:	f7ff fce0 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ca:	490d      	ldr	r1, [pc, #52]	@ (8002100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e0:	4c0a      	ldr	r4, [pc, #40]	@ (800210c <LoopFillZerobss+0x22>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80020ee:	f01e fadf 	bl	80206b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f2:	f7fe ffd3 	bl	800109c <main>
  bx  lr    
 80020f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002104:	08025100 	.word	0x08025100
  ldr r2, =_sbss
 8002108:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800210c:	200258bc 	.word	0x200258bc

08002110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC_IRQHandler>

08002112 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <LAN8742_RegisterBusIO+0x28>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <LAN8742_RegisterBusIO+0x28>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <LAN8742_RegisterBusIO+0x28>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800213e:	e014      	b.n	800216a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d139      	bne.n	8002206 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e01c      	b.n	80021e6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f107 020c 	add.w	r2, r7, #12
 80021b4:	2112      	movs	r1, #18
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	4798      	blx	r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da03      	bge.n	80021c8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80021c0:	f06f 0304 	mvn.w	r3, #4
 80021c4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80021c6:	e00b      	b.n	80021e0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d105      	bne.n	80021e0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
         break;
 80021de:	e005      	b.n	80021ec <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b1f      	cmp	r3, #31
 80021ea:	d9df      	bls.n	80021ac <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b1f      	cmp	r3, #31
 80021f2:	d902      	bls.n	80021fa <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80021f4:	f06f 0302 	mvn.w	r3, #2
 80021f8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002206:	693b      	ldr	r3, [r7, #16]
 }
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6810      	ldr	r0, [r2, #0]
 8002224:	f107 020c 	add.w	r2, r7, #12
 8002228:	2101      	movs	r1, #1
 800222a:	4798      	blx	r3
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	da02      	bge.n	8002238 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002232:	f06f 0304 	mvn.w	r3, #4
 8002236:	e06e      	b.n	8002316 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6810      	ldr	r0, [r2, #0]
 8002240:	f107 020c 	add.w	r2, r7, #12
 8002244:	2101      	movs	r1, #1
 8002246:	4798      	blx	r3
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	da02      	bge.n	8002254 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800224e:	f06f 0304 	mvn.w	r3, #4
 8002252:	e060      	b.n	8002316 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800225e:	2301      	movs	r3, #1
 8002260:	e059      	b.n	8002316 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6810      	ldr	r0, [r2, #0]
 800226a:	f107 020c 	add.w	r2, r7, #12
 800226e:	2100      	movs	r1, #0
 8002270:	4798      	blx	r3
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	da02      	bge.n	800227e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002278:	f06f 0304 	mvn.w	r3, #4
 800227c:	e04b      	b.n	8002316 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11b      	bne.n	80022c0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <LAN8742_GetLinkState+0x90>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800229c:	2302      	movs	r3, #2
 800229e:	e03a      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e033      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022b8:	2304      	movs	r3, #4
 80022ba:	e02c      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022bc:	2305      	movs	r3, #5
 80022be:	e02a      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6810      	ldr	r0, [r2, #0]
 80022c8:	f107 020c 	add.w	r2, r7, #12
 80022cc:	211f      	movs	r1, #31
 80022ce:	4798      	blx	r3
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da02      	bge.n	80022dc <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80022d6:	f06f 0304 	mvn.w	r3, #4
 80022da:	e01c      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80022e6:	2306      	movs	r3, #6
 80022e8:	e015      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 031c 	and.w	r3, r3, #28
 80022f0:	2b18      	cmp	r3, #24
 80022f2:	d101      	bne.n	80022f8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022f4:	2302      	movs	r3, #2
 80022f6:	e00e      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 031c 	and.w	r3, r3, #28
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d101      	bne.n	8002306 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002302:	2303      	movs	r3, #3
 8002304:	e007      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 031c 	and.w	r3, r3, #28
 800230c:	2b14      	cmp	r3, #20
 800230e:	d101      	bne.n	8002314 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002310:	2304      	movs	r3, #4
 8002312:	e000      	b.n	8002316 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002314:	2305      	movs	r3, #5
    }
  }
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002322:	2003      	movs	r0, #3
 8002324:	f000 fd7f 	bl	8002e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002328:	200f      	movs	r0, #15
 800232a:	f7ff f96f 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232e:	f7ff f945 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008
 800235c:	20000b04 	.word	0x20000b04

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000b04 	.word	0x20000b04

08002378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff ffee 	bl	8002360 <HAL_GetTick>
 8002384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002390:	d005      	beq.n	800239e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_Delay+0x44>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239e:	bf00      	nop
 80023a0:	f7ff ffde 	bl	8002360 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8f7      	bhi.n	80023a0 <HAL_Delay+0x28>
  {
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000008 	.word	0x20000008

080023c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e031      	b.n	800243a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe f94e 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <HAL_ADC_Init+0x84>)
 8002404:	4013      	ands	r3, r2
 8002406:	f043 0202 	orr.w	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fae0 	bl	80029d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	@ 0x40
 800242a:	e001      	b.n	8002430 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	ffffeefd 	.word	0xffffeefd

08002448 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_ADC_Start_DMA+0x22>
 8002466:	2302      	movs	r3, #2
 8002468:	e0d6      	b.n	8002618 <HAL_ADC_Start_DMA+0x1d0>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d018      	beq.n	80024b2 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002490:	4b63      	ldr	r3, [pc, #396]	@ (8002620 <HAL_ADC_Start_DMA+0x1d8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a63      	ldr	r2, [pc, #396]	@ (8002624 <HAL_ADC_Start_DMA+0x1dc>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0c9a      	lsrs	r2, r3, #18
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024a4:	e002      	b.n	80024ac <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f9      	bne.n	80024a6 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	f040 809e 	bne.w	80025fe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024c6:	4b58      	ldr	r3, [pc, #352]	@ (8002628 <HAL_ADC_Start_DMA+0x1e0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024fc:	d106      	bne.n	800250c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	f023 0206 	bic.w	r2, r3, #6
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
 800250a:	e002      	b.n	8002512 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	4a43      	ldr	r2, [pc, #268]	@ (800262c <HAL_ADC_Start_DMA+0x1e4>)
 8002520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002526:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <HAL_ADC_Start_DMA+0x1e8>)
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252e:	4a41      	ldr	r2, [pc, #260]	@ (8002634 <HAL_ADC_Start_DMA+0x1ec>)
 8002530:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800253a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800254a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800255a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	334c      	adds	r3, #76	@ 0x4c
 8002566:	4619      	mov	r1, r3
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f000 ff48 	bl	8003400 <HAL_DMA_Start_IT>
 8002570:	4603      	mov	r3, r0
 8002572:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002574:	4b30      	ldr	r3, [pc, #192]	@ (8002638 <HAL_ADC_Start_DMA+0x1f0>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10f      	bne.n	80025a0 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d143      	bne.n	8002616 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	e03a      	b.n	8002616 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a25      	ldr	r2, [pc, #148]	@ (800263c <HAL_ADC_Start_DMA+0x1f4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10e      	bne.n	80025c8 <HAL_ADC_Start_DMA+0x180>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d107      	bne.n	80025c8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025c6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_ADC_Start_DMA+0x1f0>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d120      	bne.n	8002616 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a19      	ldr	r2, [pc, #100]	@ (8002640 <HAL_ADC_Start_DMA+0x1f8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d11b      	bne.n	8002616 <HAL_ADC_Start_DMA+0x1ce>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d114      	bne.n	8002616 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	e00b      	b.n	8002616 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000000 	.word	0x20000000
 8002624:	431bde83 	.word	0x431bde83
 8002628:	fffff8fe 	.word	0xfffff8fe
 800262c:	08002bc9 	.word	0x08002bc9
 8002630:	08002c83 	.word	0x08002c83
 8002634:	08002c9f 	.word	0x08002c9f
 8002638:	40012300 	.word	0x40012300
 800263c:	40012000 	.word	0x40012000
 8002640:	40012200 	.word	0x40012200

08002644 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_ADC_Stop_DMA+0x1a>
 800265a:	2302      	movs	r3, #2
 800265c:	e046      	b.n	80026ec <HAL_ADC_Stop_DMA+0xa8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d12e      	bne.n	80026e2 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002692:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d10f      	bne.n	80026c2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 ff0a 	bl	80034c0 <HAL_DMA_Abort>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80026d0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026d6:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <HAL_ADC_Stop_DMA+0xb0>)
 80026d8:	4013      	ands	r3, r2
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	ffffeefe 	.word	0xffffeefe

080026f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x1c>
 8002738:	2302      	movs	r3, #2
 800273a:	e13a      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x292>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b09      	cmp	r3, #9
 800274a:	d93a      	bls.n	80027c2 <HAL_ADC_ConfigChannel+0xa2>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002754:	d035      	beq.n	80027c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68d9      	ldr	r1, [r3, #12]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	3b1e      	subs	r3, #30
 800276c:	2207      	movs	r2, #7
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	400a      	ands	r2, r1
 800277a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a8f      	ldr	r2, [pc, #572]	@ (80029c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10a      	bne.n	800279c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68d9      	ldr	r1, [r3, #12]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	061a      	lsls	r2, r3, #24
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800279a:	e039      	b.n	8002810 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68d9      	ldr	r1, [r3, #12]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4403      	add	r3, r0
 80027b4:	3b1e      	subs	r3, #30
 80027b6:	409a      	lsls	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c0:	e026      	b.n	8002810 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6919      	ldr	r1, [r3, #16]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2207      	movs	r2, #7
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43da      	mvns	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	400a      	ands	r2, r1
 80027e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6919      	ldr	r1, [r3, #16]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	4603      	mov	r3, r0
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4403      	add	r3, r0
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	409a      	lsls	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d824      	bhi.n	8002862 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	3b05      	subs	r3, #5
 800282a:	221f      	movs	r2, #31
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43da      	mvns	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	400a      	ands	r2, r1
 8002838:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	4618      	mov	r0, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b05      	subs	r3, #5
 8002854:	fa00 f203 	lsl.w	r2, r0, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002860:	e04c      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d824      	bhi.n	80028b4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	3b23      	subs	r3, #35	@ 0x23
 800287c:	221f      	movs	r2, #31
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	400a      	ands	r2, r1
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b23      	subs	r3, #35	@ 0x23
 80028a6:	fa00 f203 	lsl.w	r2, r0, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b2:	e023      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3b41      	subs	r3, #65	@ 0x41
 80028c6:	221f      	movs	r2, #31
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43da      	mvns	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	400a      	ands	r2, r1
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b41      	subs	r3, #65	@ 0x41
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a30      	ldr	r2, [pc, #192]	@ (80029c4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1fc>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800290e:	d105      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002910:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a2c      	ldr	r2, [pc, #176]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002916:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800291a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a28      	ldr	r2, [pc, #160]	@ (80029c4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10f      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x226>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b12      	cmp	r3, #18
 800292c:	d10b      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800292e:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002934:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002938:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002944:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_ADC_ConfigChannel+0x2a4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d12b      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x288>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x242>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b11      	cmp	r3, #17
 8002960:	d122      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002962:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002968:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800296c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800296e:	4b16      	ldr	r3, [pc, #88]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002974:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002978:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a10      	ldr	r2, [pc, #64]	@ (80029c0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d111      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_ADC_ConfigChannel+0x2ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a11      	ldr	r2, [pc, #68]	@ (80029d0 <HAL_ADC_ConfigChannel+0x2b0>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0c9a      	lsrs	r2, r3, #18
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800299a:	e002      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3b01      	subs	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	10000012 	.word	0x10000012
 80029c4:	40012000 	.word	0x40012000
 80029c8:	40012300 	.word	0x40012300
 80029cc:	20000000 	.word	0x20000000
 80029d0:	431bde83 	.word	0x431bde83

080029d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029dc:	4b78      	ldr	r3, [pc, #480]	@ (8002bc0 <ADC_Init+0x1ec>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a77      	ldr	r2, [pc, #476]	@ (8002bc0 <ADC_Init+0x1ec>)
 80029e2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80029e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029e8:	4b75      	ldr	r3, [pc, #468]	@ (8002bc0 <ADC_Init+0x1ec>)
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4973      	ldr	r1, [pc, #460]	@ (8002bc0 <ADC_Init+0x1ec>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	021a      	lsls	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6899      	ldr	r1, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	4a58      	ldr	r2, [pc, #352]	@ (8002bc4 <ADC_Init+0x1f0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	e00f      	b.n	8002ace <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0202 	bic.w	r2, r2, #2
 8002adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	005a      	lsls	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	3b01      	subs	r3, #1
 8002b28:	035a      	lsls	r2, r3, #13
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e007      	b.n	8002b44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	051a      	lsls	r2, r3, #20
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b86:	025a      	lsls	r2, r3, #9
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	029a      	lsls	r2, r3, #10
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40012300 	.word	0x40012300
 8002bc4:	0f000001 	.word	0x0f000001

08002bc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d13c      	bne.n	8002c5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d12b      	bne.n	8002c54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d127      	bne.n	8002c54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d119      	bne.n	8002c54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0220 	bic.w	r2, r2, #32
 8002c2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	f043 0201 	orr.w	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f01c f98b 	bl	801ef70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c5a:	e00e      	b.n	8002c7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff fd4f 	bl	800270c <HAL_ADC_ErrorCallback>
}
 8002c6e:	e004      	b.n	8002c7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff fd31 	bl	80026f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2240      	movs	r2, #64	@ 0x40
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f043 0204 	orr.w	r2, r3, #4
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff fd24 	bl	800270c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <__NVIC_SetPriorityGrouping+0x40>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	@ (8002d0c <__NVIC_SetPriorityGrouping+0x40>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00
 8002d10:	05fa0000 	.word	0x05fa0000

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4907      	ldr	r1, [pc, #28]	@ (8002d68 <__NVIC_EnableIRQ+0x38>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db0a      	blt.n	8002d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	490c      	ldr	r1, [pc, #48]	@ (8002db8 <__NVIC_SetPriority+0x4c>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d94:	e00a      	b.n	8002dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4908      	ldr	r1, [pc, #32]	@ (8002dbc <__NVIC_SetPriority+0x50>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3b04      	subs	r3, #4
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	440b      	add	r3, r1
 8002daa:	761a      	strb	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	@ 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f1c3 0307 	rsb	r3, r3, #7
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf28      	it	cs
 8002dde:	2304      	movcs	r3, #4
 8002de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <NVIC_EncodePriority+0x30>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3b03      	subs	r3, #3
 8002dee:	e000      	b.n	8002df2 <NVIC_EncodePriority+0x32>
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	4313      	orrs	r3, r2
         );
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	@ 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ff4c 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e4e:	f7ff ff61 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	6978      	ldr	r0, [r7, #20]
 8002e5a:	f7ff ffb1 	bl	8002dc0 <NVIC_EncodePriority>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff80 	bl	8002d6c <__NVIC_SetPriority>
}
 8002e6c:	bf00      	nop
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff54 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e054      	b.n	8002f4c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7f5b      	ldrb	r3, [r3, #29]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fc78 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	791b      	ldrb	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a22      	ldr	r2, [pc, #136]	@ (8002f54 <HAL_CRC_Init+0xc4>)
 8002ecc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0218 	bic.w	r2, r2, #24
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	e00c      	b.n	8002efa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f94c 	bl	8003188 <HAL_CRCEx_Polynomial_Set>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e028      	b.n	8002f4c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	795b      	ldrb	r3, [r3, #5]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f0a:	611a      	str	r2, [r3, #16]
 8002f0c:	e004      	b.n	8002f18 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6912      	ldr	r2, [r2, #16]
 8002f16:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	04c11db7 	.word	0x04c11db7

08002f58 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d006      	beq.n	8002f94 <HAL_CRC_Calculate+0x3c>
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d829      	bhi.n	8002fde <HAL_CRC_Calculate+0x86>
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d019      	beq.n	8002fc2 <HAL_CRC_Calculate+0x6a>
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d01e      	beq.n	8002fd0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002f92:	e024      	b.n	8002fde <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e00a      	b.n	8002fb0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	441a      	add	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	3301      	adds	r3, #1
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d3f0      	bcc.n	8002f9a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	613b      	str	r3, [r7, #16]
      break;
 8002fc0:	e00e      	b.n	8002fe0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f812 	bl	8002ff0 <CRC_Handle_8>
 8002fcc:	6138      	str	r0, [r7, #16]
      break;
 8002fce:	e007      	b.n	8002fe0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f89d 	bl	8003114 <CRC_Handle_16>
 8002fda:	6138      	str	r0, [r7, #16]
      break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_CRC_Calculate+0x88>
      break;
 8002fde:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002fe6:	693b      	ldr	r3, [r7, #16]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	@ 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	e023      	b.n	800304a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	3301      	adds	r3, #1
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	440b      	add	r3, r1
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800301c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	3302      	adds	r3, #2
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	440b      	add	r3, r1
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800302c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	3303      	adds	r3, #3
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	440b      	add	r3, r1
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003040:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	3301      	adds	r3, #1
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	429a      	cmp	r2, r3
 8003052:	d3d6      	bcc.n	8003002 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d051      	beq.n	8003102 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d108      	bne.n	800307a <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	4413      	add	r3, r2
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	7013      	strb	r3, [r2, #0]
 8003078:	e043      	b.n	8003102 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d118      	bne.n	80030b6 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	4413      	add	r3, r2
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b21b      	sxth	r3, r3
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	b21a      	sxth	r2, r3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	3301      	adds	r3, #1
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	440b      	add	r3, r1
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	4313      	orrs	r3, r2
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	8b7a      	ldrh	r2, [r7, #26]
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	e025      	b.n	8003102 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d120      	bne.n	8003102 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	4413      	add	r3, r2
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b21b      	sxth	r3, r3
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	b21a      	sxth	r2, r3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3301      	adds	r3, #1
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	440b      	add	r3, r1
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b21b      	sxth	r3, r3
 80030de:	4313      	orrs	r3, r2
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	8b7a      	ldrh	r2, [r7, #26]
 80030ee:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4413      	add	r3, r2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3724      	adds	r7, #36	@ 0x24
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e013      	b.n	800314e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4413      	add	r3, r2
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	440b      	add	r3, r1
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d3e6      	bcc.n	8003126 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	4413      	add	r3, r2
 8003170:	881a      	ldrh	r2, [r3, #0]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003198:	231f      	movs	r3, #31
 800319a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
 80031aa:	e063      	b.n	8003274 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031ac:	bf00      	nop
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1e5a      	subs	r2, r3, #1
 80031b2:	613a      	str	r2, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <HAL_CRCEx_Polynomial_Set+0x44>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	d846      	bhi.n	8003260 <HAL_CRCEx_Polynomial_Set+0xd8>
 80031d2:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	08003267 	.word	0x08003267
 80031dc:	08003261 	.word	0x08003261
 80031e0:	08003261 	.word	0x08003261
 80031e4:	08003261 	.word	0x08003261
 80031e8:	08003261 	.word	0x08003261
 80031ec:	08003261 	.word	0x08003261
 80031f0:	08003261 	.word	0x08003261
 80031f4:	08003261 	.word	0x08003261
 80031f8:	08003255 	.word	0x08003255
 80031fc:	08003261 	.word	0x08003261
 8003200:	08003261 	.word	0x08003261
 8003204:	08003261 	.word	0x08003261
 8003208:	08003261 	.word	0x08003261
 800320c:	08003261 	.word	0x08003261
 8003210:	08003261 	.word	0x08003261
 8003214:	08003261 	.word	0x08003261
 8003218:	08003249 	.word	0x08003249
 800321c:	08003261 	.word	0x08003261
 8003220:	08003261 	.word	0x08003261
 8003224:	08003261 	.word	0x08003261
 8003228:	08003261 	.word	0x08003261
 800322c:	08003261 	.word	0x08003261
 8003230:	08003261 	.word	0x08003261
 8003234:	08003261 	.word	0x08003261
 8003238:	0800323d 	.word	0x0800323d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b06      	cmp	r3, #6
 8003240:	d913      	bls.n	800326a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003246:	e010      	b.n	800326a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b07      	cmp	r3, #7
 800324c:	d90f      	bls.n	800326e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003252:	e00c      	b.n	800326e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	d90b      	bls.n	8003272 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800325e:	e008      	b.n	8003272 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
        break;
 8003264:	e006      	b.n	8003274 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003266:	bf00      	nop
 8003268:	e004      	b.n	8003274 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800326a:	bf00      	nop
 800326c:	e002      	b.n	8003274 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800326e:	bf00      	nop
 8003270:	e000      	b.n	8003274 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003272:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 0118 	bic.w	r1, r3, #24
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	430a      	orrs	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003296:	7dfb      	ldrb	r3, [r7, #23]
}
 8003298:	4618      	mov	r0, r3
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7ff f856 	bl	8002360 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e099      	b.n	80033f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e0:	e00f      	b.n	8003302 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e2:	f7ff f83d 	bl	8002360 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	d908      	bls.n	8003302 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2203      	movs	r2, #3
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e078      	b.n	80033f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e8      	bne.n	80032e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <HAL_DMA_Init+0x158>)
 800331c:	4013      	ands	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	2b04      	cmp	r3, #4
 800335a:	d107      	bne.n	800336c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	4313      	orrs	r3, r2
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f023 0307 	bic.w	r3, r3, #7
 8003382:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	2b04      	cmp	r3, #4
 8003394:	d117      	bne.n	80033c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fb77 	bl	8003a9c <DMA_CheckFifoParam>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2240      	movs	r2, #64	@ 0x40
 80033b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033c2:	2301      	movs	r3, #1
 80033c4:	e016      	b.n	80033f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fb2e 	bl	8003a30 <DMA_CalcBaseAndBitshift>
 80033d4:	4603      	mov	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	223f      	movs	r2, #63	@ 0x3f
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	f010803f 	.word	0xf010803f

08003400 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_DMA_Start_IT+0x26>
 8003422:	2302      	movs	r3, #2
 8003424:	e048      	b.n	80034b8 <HAL_DMA_Start_IT+0xb8>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d137      	bne.n	80034aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fac0 	bl	80039d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	223f      	movs	r2, #63	@ 0x3f
 800345a:	409a      	lsls	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0216 	orr.w	r2, r2, #22
 800346e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800347e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0208 	orr.w	r2, r2, #8
 8003496:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e005      	b.n	80034b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
 80034b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034ce:	f7fe ff47 	bl	8002360 <HAL_GetTick>
 80034d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d008      	beq.n	80034f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2280      	movs	r2, #128	@ 0x80
 80034e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e052      	b.n	8003598 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0216 	bic.w	r2, r2, #22
 8003500:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003510:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <HAL_DMA_Abort+0x62>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0208 	bic.w	r2, r2, #8
 8003530:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003542:	e013      	b.n	800356c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003544:	f7fe ff0c 	bl	8002360 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b05      	cmp	r3, #5
 8003550:	d90c      	bls.n	800356c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2203      	movs	r2, #3
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e015      	b.n	8003598 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e4      	bne.n	8003544 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	223f      	movs	r2, #63	@ 0x3f
 8003580:	409a      	lsls	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d004      	beq.n	80035be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2280      	movs	r2, #128	@ 0x80
 80035b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e00c      	b.n	80035d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2205      	movs	r2, #5
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80035f0:	4b8e      	ldr	r3, [pc, #568]	@ (800382c <HAL_DMA_IRQHandler+0x248>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a8e      	ldr	r2, [pc, #568]	@ (8003830 <HAL_DMA_IRQHandler+0x24c>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0a9b      	lsrs	r3, r3, #10
 80035fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	2208      	movs	r2, #8
 8003610:	409a      	lsls	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01a      	beq.n	8003650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0204 	bic.w	r2, r2, #4
 8003636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	2208      	movs	r2, #8
 800363e:	409a      	lsls	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	f043 0201 	orr.w	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	2201      	movs	r2, #1
 8003656:	409a      	lsls	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003672:	2201      	movs	r2, #1
 8003674:	409a      	lsls	r2, r3
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368a:	2204      	movs	r2, #4
 800368c:	409a      	lsls	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d012      	beq.n	80036bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a8:	2204      	movs	r2, #4
 80036aa:	409a      	lsls	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b4:	f043 0204 	orr.w	r2, r3, #4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c0:	2210      	movs	r2, #16
 80036c2:	409a      	lsls	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d043      	beq.n	8003754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03c      	beq.n	8003754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036de:	2210      	movs	r2, #16
 80036e0:	409a      	lsls	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d018      	beq.n	8003726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d108      	bne.n	8003714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d024      	beq.n	8003754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4798      	blx	r3
 8003712:	e01f      	b.n	8003754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01b      	beq.n	8003754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
 8003724:	e016      	b.n	8003754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0208 	bic.w	r2, r2, #8
 8003742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	2220      	movs	r2, #32
 800375a:	409a      	lsls	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 808f 	beq.w	8003884 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8087 	beq.w	8003884 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	2220      	movs	r2, #32
 800377c:	409a      	lsls	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b05      	cmp	r3, #5
 800378c:	d136      	bne.n	80037fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0216 	bic.w	r2, r2, #22
 800379c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d103      	bne.n	80037be <HAL_DMA_IRQHandler+0x1da>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0208 	bic.w	r2, r2, #8
 80037cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	223f      	movs	r2, #63	@ 0x3f
 80037d4:	409a      	lsls	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d07e      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
        }
        return;
 80037fa:	e079      	b.n	80038f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01d      	beq.n	8003846 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381c:	2b00      	cmp	r3, #0
 800381e:	d031      	beq.n	8003884 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
 8003828:	e02c      	b.n	8003884 <HAL_DMA_IRQHandler+0x2a0>
 800382a:	bf00      	nop
 800382c:	20000000 	.word	0x20000000
 8003830:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	2b00      	cmp	r3, #0
 800383a:	d023      	beq.n	8003884 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
 8003844:	e01e      	b.n	8003884 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10f      	bne.n	8003874 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0210 	bic.w	r2, r2, #16
 8003862:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003888:	2b00      	cmp	r3, #0
 800388a:	d032      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2205      	movs	r2, #5
 800389c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0201 	bic.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3301      	adds	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d307      	bcc.n	80038cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f2      	bne.n	80038b0 <HAL_DMA_IRQHandler+0x2cc>
 80038ca:	e000      	b.n	80038ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	4798      	blx	r3
 80038ee:	e000      	b.n	80038f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038f0:	bf00      	nop
    }
  }
}
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	460b      	mov	r3, r1
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_DMA_RegisterCallback+0x20>
 8003914:	2302      	movs	r3, #2
 8003916:	e03d      	b.n	8003994 <HAL_DMA_RegisterCallback+0x9c>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d12c      	bne.n	8003986 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 800392c:	7afb      	ldrb	r3, [r7, #11]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d826      	bhi.n	8003980 <HAL_DMA_RegisterCallback+0x88>
 8003932:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <HAL_DMA_RegisterCallback+0x40>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003951 	.word	0x08003951
 800393c:	08003959 	.word	0x08003959
 8003940:	08003961 	.word	0x08003961
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8003956:	e018      	b.n	800398a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800395e:	e014      	b.n	800398a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8003966:	e010      	b.n	800398a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800396e:	e00c      	b.n	800398a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8003976:	e008      	b.n	800398a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800397e:	e004      	b.n	800398a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	75fb      	strb	r3, [r7, #23]
      break;
 8003984:	e001      	b.n	800398a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
}
 8003994:	4618      	mov	r0, r3
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039ae:	b2db      	uxtb	r3, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b40      	cmp	r3, #64	@ 0x40
 8003a00:	d108      	bne.n	8003a14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a12:	e007      	b.n	8003a24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	3b10      	subs	r3, #16
 8003a40:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <DMA_CalcBaseAndBitshift+0x60>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a4a:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <DMA_CalcBaseAndBitshift+0x64>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d908      	bls.n	8003a70 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <DMA_CalcBaseAndBitshift+0x68>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a6e:	e006      	b.n	8003a7e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <DMA_CalcBaseAndBitshift+0x68>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	aaaaaaab 	.word	0xaaaaaaab
 8003a94:	08024ea0 	.word	0x08024ea0
 8003a98:	fffffc00 	.word	0xfffffc00

08003a9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11f      	bne.n	8003af6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d856      	bhi.n	8003b6a <DMA_CheckFifoParam+0xce>
 8003abc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <DMA_CheckFifoParam+0x28>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003ae7 	.word	0x08003ae7
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003b6b 	.word	0x08003b6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d046      	beq.n	8003b6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae4:	e043      	b.n	8003b6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003aee:	d140      	bne.n	8003b72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af4:	e03d      	b.n	8003b72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afe:	d121      	bne.n	8003b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d837      	bhi.n	8003b76 <DMA_CheckFifoParam+0xda>
 8003b06:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <DMA_CheckFifoParam+0x70>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b23 	.word	0x08003b23
 8003b14:	08003b1d 	.word	0x08003b1d
 8003b18:	08003b35 	.word	0x08003b35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e030      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d025      	beq.n	8003b7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b32:	e022      	b.n	8003b7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b3c:	d11f      	bne.n	8003b7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b42:	e01c      	b.n	8003b7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d903      	bls.n	8003b52 <DMA_CheckFifoParam+0xb6>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d003      	beq.n	8003b58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b50:	e018      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
      break;
 8003b56:	e015      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      break;
 8003b68:	e00b      	b.n	8003b82 <DMA_CheckFifoParam+0xe6>
      break;
 8003b6a:	bf00      	nop
 8003b6c:	e00a      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e008      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e006      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e004      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e002      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <DMA_CheckFifoParam+0xe8>
      break;
 8003b82:	bf00      	nop
    }
  } 
  
  return status; 
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop

08003b94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e086      	b.n	8003cb4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f009 f859 	bl	800cc70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8003cbc <HAL_ETH_Init+0x128>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cbc <HAL_ETH_Init+0x128>)
 8003bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bca:	4b3c      	ldr	r3, [pc, #240]	@ (8003cbc <HAL_ETH_Init+0x128>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8003cc0 <HAL_ETH_Init+0x12c>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a39      	ldr	r2, [pc, #228]	@ (8003cc0 <HAL_ETH_Init+0x12c>)
 8003bdc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003be0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003be2:	4b37      	ldr	r3, [pc, #220]	@ (8003cc0 <HAL_ETH_Init+0x12c>)
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4935      	ldr	r1, [pc, #212]	@ (8003cc0 <HAL_ETH_Init+0x12c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003bf0:	4b33      	ldr	r3, [pc, #204]	@ (8003cc0 <HAL_ETH_Init+0x12c>)
 8003bf2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c0c:	f7fe fba8 	bl	8002360 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c12:	e011      	b.n	8003c38 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c14:	f7fe fba4 	bl	8002360 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c22:	d909      	bls.n	8003c38 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2204      	movs	r2, #4
 8003c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	22e0      	movs	r2, #224	@ 0xe0
 8003c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e03d      	b.n	8003cb4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e4      	bne.n	8003c14 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 ff5c 	bl	8004b08 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f001 f807 	bl	8004c64 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f001 f85d 	bl	8004d16 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	461a      	mov	r2, r3
 8003c62:	2100      	movs	r1, #0
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 ffc5 	bl	8004bf4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc4 <HAL_ETH_Init+0x130>)
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003c9e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2210      	movs	r2, #16
 8003cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	00020060 	.word	0x00020060

08003cc8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d15f      	bne.n	8003d9a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2204      	movs	r2, #4
 8003cec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9f6 	bl	80040e0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f7fe fb3b 	bl	8002378 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d20:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	f043 0302 	orr.w	r3, r3, #2
 8003d34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d38:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fd80 	bl	8004840 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0208 	orr.w	r2, r2, #8
 8003d4e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7fe fb0d 	bl	8002378 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0204 	orr.w	r2, r2, #4
 8003d74:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d7e:	69d9      	ldr	r1, [r3, #28]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b07      	ldr	r3, [pc, #28]	@ (8003da4 <HAL_ETH_Start_IT+0xdc>)
 8003d86:	430b      	orrs	r3, r1
 8003d88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d8c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2240      	movs	r2, #64	@ 0x40
 8003d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e000      	b.n	8003d9c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
  }
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	0001a0c1 	.word	0x0001a0c1

08003da8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003db6:	2b40      	cmp	r3, #64	@ 0x40
 8003db8:	d16e      	bne.n	8003e98 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dca:	69d9      	ldr	r1, [r3, #28]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b34      	ldr	r3, [pc, #208]	@ (8003ea4 <HAL_ETH_Stop_IT+0xfc>)
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dd8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003df0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	f023 0302 	bic.w	r3, r3, #2
 8003e04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e08:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0204 	bic.w	r2, r2, #4
 8003e18:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7fe faa8 	bl	8002378 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fd05 	bl	8004840 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0208 	bic.w	r2, r2, #8
 8003e44:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fe fa92 	bl	8002378 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e00e      	b.n	8003e80 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	3212      	adds	r2, #18
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d9ed      	bls.n	8003e62 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2210      	movs	r2, #16
 8003e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e000      	b.n	8003e9a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	fffe5f3e 	.word	0xfffe5f3e

08003ea8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e045      	b.n	8003f58 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d13f      	bne.n	8003f56 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	6839      	ldr	r1, [r7, #0]
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 ff86 	bl	8004df4 <ETH_Prepare_Tx_Descriptors>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef4:	f043 0202 	orr.w	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e02a      	b.n	8003f58 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f02:	f3bf 8f4f 	dsb	sy
}
 8003f06:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d904      	bls.n	8003f24 <HAL_ETH_Transmit_IT+0x7c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	1f1a      	subs	r2, r3, #4
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2304      	movs	r3, #4
 8003f42:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
  }
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f043 0201 	orr.w	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0a4      	b.n	80040d6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f92:	2b40      	cmp	r3, #64	@ 0x40
 8003f94:	d001      	beq.n	8003f9a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e09d      	b.n	80040d6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	3212      	adds	r2, #18
 8003fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003faa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb0:	f1c3 0304 	rsb	r3, r3, #4
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fb6:	e066      	b.n	8004086 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <HAL_ETH_ReadData+0x88>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d03c      	beq.n	8004062 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800400a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004020:	2301      	movs	r3, #1
 8004022:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800403c:	461a      	mov	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f008 ffe9 	bl	800d018 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	441a      	add	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2200      	movs	r2, #0
 8004060:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3301      	adds	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d902      	bls.n	8004074 <HAL_ETH_ReadData+0x114>
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3b04      	subs	r3, #4
 8004072:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	3212      	adds	r2, #18
 800407a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3301      	adds	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800408a:	2b00      	cmp	r3, #0
 800408c:	db06      	blt.n	800409c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	429a      	cmp	r2, r3
 8004094:	d202      	bcs.n	800409c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d08d      	beq.n	8003fb8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	441a      	add	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f815 	bl	80040e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d108      	bne.n	80040d4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	e000      	b.n	80040d6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80040ec:	2301      	movs	r3, #1
 80040ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	3212      	adds	r2, #18
 80040fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004100:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004106:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004108:	e042      	b.n	8004190 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d112      	bne.n	8004138 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	4618      	mov	r0, r3
 8004118:	f008 ff4e 	bl	800cfb8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	74fb      	strb	r3, [r7, #19]
 8004126:	e007      	b.n	8004138 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	461a      	mov	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	461a      	mov	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d028      	beq.n	8004190 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <ETH_UpdateDescriptor+0x104>)
 800414c:	4313      	orrs	r3, r2
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	6053      	str	r3, [r2, #4]
 8004152:	e005      	b.n	8004160 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	3301      	adds	r3, #1
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d902      	bls.n	800417e <ETH_UpdateDescriptor+0x9e>
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3b04      	subs	r3, #4
 800417c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	3212      	adds	r2, #18
 8004184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004188:	617b      	str	r3, [r7, #20]
      desccount--;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	3b01      	subs	r3, #1
 800418e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <ETH_UpdateDescriptor+0xbc>
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1b6      	bne.n	800410a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d01a      	beq.n	80041dc <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3303      	adds	r3, #3
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041b0:	f3bf 8f5f 	dmb	sy
}
 80041b4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6919      	ldr	r1, [r3, #16]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	18ca      	adds	r2, r1, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041ce:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80041dc:	bf00      	nop
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	80004000 	.word	0x80004000

080041e8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3318      	adds	r3, #24
 80041f4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004206:	e047      	b.n	8004298 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004208:	2301      	movs	r3, #1
 800420a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3b01      	subs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	3304      	adds	r3, #4
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3301      	adds	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b03      	cmp	r3, #3
 800422c:	d902      	bls.n	8004234 <HAL_ETH_ReleaseTxPacket+0x4c>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3b04      	subs	r3, #4
 8004232:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02c      	beq.n	8004298 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68d9      	ldr	r1, [r3, #12]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	440b      	add	r3, r1
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	db1f      	blt.n	8004294 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	3304      	adds	r3, #4
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	f008 ff1b 	bl	800d09c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	3304      	adds	r3, #4
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	2200      	movs	r2, #0
 8004272:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3301      	adds	r3, #1
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d902      	bls.n	8004286 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3b04      	subs	r3, #4
 8004284:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004292:	e001      	b.n	8004298 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_ETH_ReleaseTxPacket+0xbc>
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1b1      	bne.n	8004208 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042be:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80042d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004408 <HAL_ETH_IRQHandler+0x158>)
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <HAL_ETH_IRQHandler+0x56>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b43      	ldr	r3, [pc, #268]	@ (800440c <HAL_ETH_IRQHandler+0x15c>)
 80042fe:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f008 f9f5 	bl	800c6f0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00f      	beq.n	8004330 <HAL_ETH_IRQHandler+0x80>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004322:	461a      	mov	r2, r3
 8004324:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004328:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f008 f9f0 	bl	800c710 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d042      	beq.n	80043c0 <HAL_ETH_IRQHandler+0x110>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03d      	beq.n	80043c0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434a:	f043 0208 	orr.w	r2, r3, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01a      	beq.n	8004394 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	4b29      	ldr	r3, [pc, #164]	@ (8004410 <HAL_ETH_IRQHandler+0x160>)
 800436a:	4013      	ands	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004384:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004388:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	22e0      	movs	r2, #224	@ 0xe0
 800438e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004392:	e012      	b.n	80043ba <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043a2:	4013      	ands	r3, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043b2:	461a      	mov	r2, r3
 80043b4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f008 f9b8 	bl	800c730 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f81a 	bl	8004414 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80043f2:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <HAL_ETH_IRQHandler+0x158>)
 80043f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80043f8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f814 	bl	8004428 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004400:	bf00      	nop
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40013c00 	.word	0x40013c00
 800440c:	00010040 	.word	0x00010040
 8004410:	007e2000 	.word	0x007e2000

08004414 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 031c 	and.w	r3, r3, #28
 8004458:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	02db      	lsls	r3, r3, #11
 800445e:	b29b      	uxth	r3, r3
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f023 0302 	bic.w	r3, r3, #2
 800447a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800448c:	f7fd ff68 	bl	8002360 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004492:	e00d      	b.n	80044b0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004494:	f7fd ff64 	bl	8002360 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a2:	d301      	bcc.n	80044a8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e010      	b.n	80044ca <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1ec      	bne.n	8004494 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f003 031c 	and.w	r3, r3, #28
 80044ee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	02db      	lsls	r3, r3, #11
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	019b      	lsls	r3, r3, #6
 8004500:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f043 0302 	orr.w	r3, r3, #2
 8004510:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800452c:	f7fd ff18 	bl	8002360 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004532:	e00d      	b.n	8004550 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004534:	f7fd ff14 	bl	8002360 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004542:	d301      	bcc.n	8004548 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e009      	b.n	800455c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1ec      	bne.n	8004534 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0e6      	b.n	8004746 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b00      	cmp	r3, #0
 8004584:	bf14      	ite	ne
 8004586:	2301      	movne	r3, #1
 8004588:	2300      	moveq	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bf0c      	ite	eq
 80045b0:	2301      	moveq	r3, #1
 80045b2:	2300      	movne	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf0c      	ite	eq
 8004636:	2301      	moveq	r3, #1
 8004638:	2300      	movne	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	bf14      	ite	ne
 800466a:	2301      	movne	r3, #1
 800466c:	2300      	moveq	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	461a      	mov	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bf14      	ite	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	2300      	moveq	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	b29a      	uxth	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e00b      	b.n	800477e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800476c:	2b10      	cmp	r3, #16
 800476e:	d105      	bne.n	800477c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004770:	6839      	ldr	r1, [r7, #0]
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f88a 	bl	800488c <ETH_SetMACConfig>

    return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e000      	b.n	800477e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 031c 	bic.w	r3, r3, #28
 800479e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80047a0:	f003 fd04 	bl	80081ac <HAL_RCC_GetHCLKFreq>
 80047a4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a14      	ldr	r2, [pc, #80]	@ (80047fc <HAL_ETH_SetMDIOClockRange+0x74>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d804      	bhi.n	80047b8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e019      	b.n	80047ec <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4a11      	ldr	r2, [pc, #68]	@ (8004800 <HAL_ETH_SetMDIOClockRange+0x78>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d204      	bcs.n	80047ca <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f043 030c 	orr.w	r3, r3, #12
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e010      	b.n	80047ec <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004804 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d90c      	bls.n	80047ec <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004808 <HAL_ETH_SetMDIOClockRange+0x80>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d804      	bhi.n	80047e4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f043 0304 	orr.w	r3, r3, #4
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e003      	b.n	80047ec <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f043 0310 	orr.w	r3, r3, #16
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	611a      	str	r2, [r3, #16]
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	02160ebf 	.word	0x02160ebf
 8004800:	03938700 	.word	0x03938700
 8004804:	05f5e0ff 	.word	0x05f5e0ff
 8004808:	08f0d17f 	.word	0x08f0d17f

0800480c <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004862:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004870:	2001      	movs	r0, #1
 8004872:	f7fd fd81 	bl	8002378 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004880:	6193      	str	r3, [r2, #24]
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4b53      	ldr	r3, [pc, #332]	@ (80049f0 <ETH_SetMACConfig+0x164>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	7b9b      	ldrb	r3, [r3, #14]
 80048aa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	7c12      	ldrb	r2, [r2, #16]
 80048b0:	2a00      	cmp	r2, #0
 80048b2:	d102      	bne.n	80048ba <ETH_SetMACConfig+0x2e>
 80048b4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048b8:	e000      	b.n	80048bc <ETH_SetMACConfig+0x30>
 80048ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	7c52      	ldrb	r2, [r2, #17]
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	d102      	bne.n	80048cc <ETH_SetMACConfig+0x40>
 80048c6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80048ca:	e000      	b.n	80048ce <ETH_SetMACConfig+0x42>
 80048cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	7fdb      	ldrb	r3, [r3, #31]
 80048da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80048dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	7f92      	ldrb	r2, [r2, #30]
 80048e8:	2a00      	cmp	r2, #0
 80048ea:	d102      	bne.n	80048f2 <ETH_SetMACConfig+0x66>
 80048ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048f0:	e000      	b.n	80048f4 <ETH_SetMACConfig+0x68>
 80048f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80048f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	7f1b      	ldrb	r3, [r3, #28]
 80048fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004902:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	791b      	ldrb	r3, [r3, #4]
 8004908:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800490a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004912:	2a00      	cmp	r2, #0
 8004914:	d102      	bne.n	800491c <ETH_SetMACConfig+0x90>
 8004916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800491a:	e000      	b.n	800491e <ETH_SetMACConfig+0x92>
 800491c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800491e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	7bdb      	ldrb	r3, [r3, #15]
 8004924:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004926:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800492c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004934:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004936:	4313      	orrs	r3, r2
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800494e:	2001      	movs	r0, #1
 8004950:	f7fd fd12 	bl	8002378 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800496a:	4013      	ands	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004972:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800497a:	2a00      	cmp	r2, #0
 800497c:	d101      	bne.n	8004982 <ETH_SetMACConfig+0xf6>
 800497e:	2280      	movs	r2, #128	@ 0x80
 8004980:	e000      	b.n	8004984 <ETH_SetMACConfig+0xf8>
 8004982:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004984:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800498a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004992:	2a01      	cmp	r2, #1
 8004994:	d101      	bne.n	800499a <ETH_SetMACConfig+0x10e>
 8004996:	2208      	movs	r2, #8
 8004998:	e000      	b.n	800499c <ETH_SetMACConfig+0x110>
 800499a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800499c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80049a4:	2a01      	cmp	r2, #1
 80049a6:	d101      	bne.n	80049ac <ETH_SetMACConfig+0x120>
 80049a8:	2204      	movs	r2, #4
 80049aa:	e000      	b.n	80049ae <ETH_SetMACConfig+0x122>
 80049ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80049b6:	2a01      	cmp	r2, #1
 80049b8:	d101      	bne.n	80049be <ETH_SetMACConfig+0x132>
 80049ba:	2202      	movs	r2, #2
 80049bc:	e000      	b.n	80049c0 <ETH_SetMACConfig+0x134>
 80049be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049c0:	4313      	orrs	r3, r2
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049d8:	2001      	movs	r0, #1
 80049da:	f7fd fccd 	bl	8002378 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	fd20810f 	.word	0xfd20810f

080049f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b04 <ETH_SetDMAConfig+0x110>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	7b1b      	ldrb	r3, [r3, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <ETH_SetDMAConfig+0x2c>
 8004a1a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004a1e:	e000      	b.n	8004a22 <ETH_SetDMAConfig+0x2e>
 8004a20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	7b5b      	ldrb	r3, [r3, #13]
 8004a26:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a28:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	7f52      	ldrb	r2, [r2, #29]
 8004a2e:	2a00      	cmp	r2, #0
 8004a30:	d102      	bne.n	8004a38 <ETH_SetDMAConfig+0x44>
 8004a32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a36:	e000      	b.n	8004a3a <ETH_SetDMAConfig+0x46>
 8004a38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	7b9b      	ldrb	r3, [r3, #14]
 8004a40:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a42:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	7f1b      	ldrb	r3, [r3, #28]
 8004a4e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a50:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	7f9b      	ldrb	r3, [r3, #30]
 8004a56:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a58:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a5e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a66:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a78:	461a      	mov	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	f7fd fc74 	bl	8002378 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004aa8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004aae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ab4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004abc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004abe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ac6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004acc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ad6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ada:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f7fd fc45 	bl	8002378 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6013      	str	r3, [r2, #0]
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	f8de3f23 	.word	0xf8de3f23

08004b08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b0a6      	sub	sp, #152	@ 0x98
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b74:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff fe7f 	bl	800488c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004b92:	2301      	movs	r3, #1
 8004b94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004bbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bc2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bc4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bc8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bce:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004bde:	f107 0308 	add.w	r3, r7, #8
 8004be2:	4619      	mov	r1, r3
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ff05 	bl	80049f4 <ETH_SetDMAConfig>
}
 8004bea:	bf00      	nop
 8004bec:	3798      	adds	r7, #152	@ 0x98
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3305      	adds	r3, #5
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	3204      	adds	r2, #4
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <ETH_MACAddressConfig+0x68>)
 8004c16:	4413      	add	r3, r2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3303      	adds	r3, #3
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	061a      	lsls	r2, r3, #24
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3302      	adds	r3, #2
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	041b      	lsls	r3, r3, #16
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3301      	adds	r3, #1
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <ETH_MACAddressConfig+0x6c>)
 8004c46:	4413      	add	r3, r2
 8004c48:	461a      	mov	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	6013      	str	r3, [r2, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40028040 	.word	0x40028040
 8004c60:	40028044 	.word	0x40028044

08004c64 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e03e      	b.n	8004cf0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68d9      	ldr	r1, [r3, #12]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	440b      	add	r3, r1
 8004c82:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	3206      	adds	r2, #6
 8004ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d80c      	bhi.n	8004cd4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68d9      	ldr	r1, [r3, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	440b      	add	r3, r1
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	e004      	b.n	8004cde <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d9bd      	bls.n	8004c72 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d08:	611a      	str	r2, [r3, #16]
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e048      	b.n	8004db6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6919      	ldr	r1, [r3, #16]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	440b      	add	r3, r1
 8004d34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2200      	movs	r2, #0
 8004d52:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d60:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	3212      	adds	r2, #18
 8004d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d80c      	bhi.n	8004da6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6919      	ldr	r1, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	440b      	add	r3, r1
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	60da      	str	r2, [r3, #12]
 8004da4:	e004      	b.n	8004db0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	461a      	mov	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d9b3      	bls.n	8004d24 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004de6:	60da      	str	r2, [r3, #12]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b091      	sub	sp, #68	@ 0x44
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3318      	adds	r3, #24
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e36:	d007      	beq.n	8004e48 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e111      	b.n	8005070 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4e:	3301      	adds	r3, #1
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4b86      	ldr	r3, [pc, #536]	@ (800507c <ETH_Prepare_Tx_Descriptors+0x288>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e66:	6852      	ldr	r2, [r2, #4]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004ece:	e082      	b.n	8004fd6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d006      	beq.n	8004ef0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e005      	b.n	8004efc <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004efe:	3301      	adds	r3, #1
 8004f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d902      	bls.n	8004f0e <ETH_Prepare_Tx_Descriptors+0x11a>
 8004f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0a:	3b04      	subs	r3, #4
 8004f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f16:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f24:	d007      	beq.n	8004f36 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d029      	beq.n	8004f8a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004f44:	2300      	movs	r3, #0
 8004f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f48:	e019      	b.n	8004f7e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004f4a:	f3bf 8f5f 	dmb	sy
}
 8004f4e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5e:	3301      	adds	r3, #1
 8004f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d902      	bls.n	8004f6e <ETH_Prepare_Tx_Descriptors+0x17a>
 8004f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6a:	3b04      	subs	r3, #4
 8004f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f76:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3e1      	bcc.n	8004f4a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004f86:	2302      	movs	r3, #2
 8004f88:	e072      	b.n	8005070 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f98:	3301      	adds	r3, #1
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004faa:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	4b32      	ldr	r3, [pc, #200]	@ (800507c <ETH_Prepare_Tx_Descriptors+0x288>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb6:	6852      	ldr	r2, [r2, #4]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004fc4:	f3bf 8f5f 	dmb	sy
}
 8004fc8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f47f af78 	bne.w	8004ed0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d006      	beq.n	8004ff4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e005      	b.n	8005000 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005014:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005016:	f3bf 8f5f 	dmb	sy
}
 800501a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800501c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005026:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800502c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800502e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005030:	3304      	adds	r3, #4
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800503c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503e:	f3ef 8310 	mrs	r3, PRIMASK
 8005042:	613b      	str	r3, [r7, #16]
  return(result);
 8005044:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	2301      	movs	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f383 8810 	msr	PRIMASK, r3
}
 8005052:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505a:	4413      	add	r3, r2
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	629a      	str	r2, [r3, #40]	@ 0x28
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f383 8810 	msr	PRIMASK, r3
}
 800506c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3744      	adds	r7, #68	@ 0x44
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	ffffe000 	.word	0xffffe000

08005080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005080:	b480      	push	{r7}
 8005082:	b089      	sub	sp, #36	@ 0x24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005096:	2300      	movs	r3, #0
 8005098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e175      	b.n	800538c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050a0:	2201      	movs	r2, #1
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	f040 8164 	bne.w	8005386 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d005      	beq.n	80050d6 <HAL_GPIO_Init+0x56>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d130      	bne.n	8005138 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	2203      	movs	r2, #3
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800510c:	2201      	movs	r2, #1
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	f003 0201 	and.w	r2, r3, #1
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	2b03      	cmp	r3, #3
 8005142:	d017      	beq.n	8005174 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	2203      	movs	r2, #3
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43db      	mvns	r3, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4013      	ands	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4313      	orrs	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d123      	bne.n	80051c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	08da      	lsrs	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3208      	adds	r2, #8
 8005188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	220f      	movs	r2, #15
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	08da      	lsrs	r2, r3, #3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3208      	adds	r2, #8
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	2203      	movs	r2, #3
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4013      	ands	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 0203 	and.w	r2, r3, #3
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80be 	beq.w	8005386 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800520a:	4b66      	ldr	r3, [pc, #408]	@ (80053a4 <HAL_GPIO_Init+0x324>)
 800520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520e:	4a65      	ldr	r2, [pc, #404]	@ (80053a4 <HAL_GPIO_Init+0x324>)
 8005210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005214:	6453      	str	r3, [r2, #68]	@ 0x44
 8005216:	4b63      	ldr	r3, [pc, #396]	@ (80053a4 <HAL_GPIO_Init+0x324>)
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005222:	4a61      	ldr	r2, [pc, #388]	@ (80053a8 <HAL_GPIO_Init+0x328>)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	3302      	adds	r3, #2
 800522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	220f      	movs	r2, #15
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a58      	ldr	r2, [pc, #352]	@ (80053ac <HAL_GPIO_Init+0x32c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d037      	beq.n	80052be <HAL_GPIO_Init+0x23e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a57      	ldr	r2, [pc, #348]	@ (80053b0 <HAL_GPIO_Init+0x330>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d031      	beq.n	80052ba <HAL_GPIO_Init+0x23a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a56      	ldr	r2, [pc, #344]	@ (80053b4 <HAL_GPIO_Init+0x334>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d02b      	beq.n	80052b6 <HAL_GPIO_Init+0x236>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a55      	ldr	r2, [pc, #340]	@ (80053b8 <HAL_GPIO_Init+0x338>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d025      	beq.n	80052b2 <HAL_GPIO_Init+0x232>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a54      	ldr	r2, [pc, #336]	@ (80053bc <HAL_GPIO_Init+0x33c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01f      	beq.n	80052ae <HAL_GPIO_Init+0x22e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a53      	ldr	r2, [pc, #332]	@ (80053c0 <HAL_GPIO_Init+0x340>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d019      	beq.n	80052aa <HAL_GPIO_Init+0x22a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a52      	ldr	r2, [pc, #328]	@ (80053c4 <HAL_GPIO_Init+0x344>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_GPIO_Init+0x226>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a51      	ldr	r2, [pc, #324]	@ (80053c8 <HAL_GPIO_Init+0x348>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00d      	beq.n	80052a2 <HAL_GPIO_Init+0x222>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a50      	ldr	r2, [pc, #320]	@ (80053cc <HAL_GPIO_Init+0x34c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <HAL_GPIO_Init+0x21e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a4f      	ldr	r2, [pc, #316]	@ (80053d0 <HAL_GPIO_Init+0x350>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d101      	bne.n	800529a <HAL_GPIO_Init+0x21a>
 8005296:	2309      	movs	r3, #9
 8005298:	e012      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 800529a:	230a      	movs	r3, #10
 800529c:	e010      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 800529e:	2308      	movs	r3, #8
 80052a0:	e00e      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052a2:	2307      	movs	r3, #7
 80052a4:	e00c      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052a6:	2306      	movs	r3, #6
 80052a8:	e00a      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052aa:	2305      	movs	r3, #5
 80052ac:	e008      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052ae:	2304      	movs	r3, #4
 80052b0:	e006      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052b2:	2303      	movs	r3, #3
 80052b4:	e004      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e002      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052be:	2300      	movs	r3, #0
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	f002 0203 	and.w	r2, r2, #3
 80052c6:	0092      	lsls	r2, r2, #2
 80052c8:	4093      	lsls	r3, r2
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052d0:	4935      	ldr	r1, [pc, #212]	@ (80053a8 <HAL_GPIO_Init+0x328>)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	089b      	lsrs	r3, r3, #2
 80052d6:	3302      	adds	r3, #2
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052de:	4b3d      	ldr	r3, [pc, #244]	@ (80053d4 <HAL_GPIO_Init+0x354>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005302:	4a34      	ldr	r2, [pc, #208]	@ (80053d4 <HAL_GPIO_Init+0x354>)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005308:	4b32      	ldr	r3, [pc, #200]	@ (80053d4 <HAL_GPIO_Init+0x354>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800532c:	4a29      	ldr	r2, [pc, #164]	@ (80053d4 <HAL_GPIO_Init+0x354>)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005332:	4b28      	ldr	r3, [pc, #160]	@ (80053d4 <HAL_GPIO_Init+0x354>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005356:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <HAL_GPIO_Init+0x354>)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800535c:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <HAL_GPIO_Init+0x354>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	43db      	mvns	r3, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4013      	ands	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005380:	4a14      	ldr	r2, [pc, #80]	@ (80053d4 <HAL_GPIO_Init+0x354>)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	3301      	adds	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	f67f ae86 	bls.w	80050a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3724      	adds	r7, #36	@ 0x24
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40013800 	.word	0x40013800
 80053ac:	40020000 	.word	0x40020000
 80053b0:	40020400 	.word	0x40020400
 80053b4:	40020800 	.word	0x40020800
 80053b8:	40020c00 	.word	0x40020c00
 80053bc:	40021000 	.word	0x40021000
 80053c0:	40021400 	.word	0x40021400
 80053c4:	40021800 	.word	0x40021800
 80053c8:	40021c00 	.word	0x40021c00
 80053cc:	40022000 	.word	0x40022000
 80053d0:	40022400 	.word	0x40022400
 80053d4:	40013c00 	.word	0x40013c00

080053d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e08b      	b.n	8005502 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb fc96 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	@ 0x24
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d107      	bne.n	8005452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800544e:	609a      	str	r2, [r3, #8]
 8005450:	e006      	b.n	8005460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800545e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d108      	bne.n	800547a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005476:	605a      	str	r2, [r3, #4]
 8005478:	e007      	b.n	800548a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b1d      	ldr	r3, [pc, #116]	@ (800550c <HAL_I2C_Init+0x134>)
 8005496:	430b      	orrs	r3, r1
 8005498:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69d9      	ldr	r1, [r3, #28]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	02008000 	.word	0x02008000

08005510 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	461a      	mov	r2, r3
 800551c:	460b      	mov	r3, r1
 800551e:	817b      	strh	r3, [r7, #10]
 8005520:	4613      	mov	r3, r2
 8005522:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b20      	cmp	r3, #32
 8005532:	f040 80ef 	bne.w	8005714 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005544:	d101      	bne.n	800554a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005546:	2302      	movs	r3, #2
 8005548:	e0e5      	b.n	8005716 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005554:	2302      	movs	r3, #2
 8005556:	e0de      	b.n	8005716 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2221      	movs	r2, #33	@ 0x21
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2210      	movs	r2, #16
 800556c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	893a      	ldrh	r2, [r7, #8]
 8005580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a66      	ldr	r2, [pc, #408]	@ (8005720 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005586:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a66      	ldr	r2, [pc, #408]	@ (8005724 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800558c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005592:	b29b      	uxth	r3, r3
 8005594:	2bff      	cmp	r3, #255	@ 0xff
 8005596:	d906      	bls.n	80055a6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	22ff      	movs	r2, #255	@ 0xff
 800559c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800559e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	e007      	b.n	80055b6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055b4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01a      	beq.n	80055f4 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	781a      	ldrb	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d074      	beq.n	80056e6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	2b00      	cmp	r3, #0
 8005602:	d022      	beq.n	800564a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	4a47      	ldr	r2, [pc, #284]	@ (8005728 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800560a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	4a46      	ldr	r2, [pc, #280]	@ (800572c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005612:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	2200      	movs	r2, #0
 800561a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	2200      	movs	r2, #0
 8005622:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005634:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800563a:	f7fd fee1 	bl	8003400 <HAL_DMA_Start_IT>
 800563e:	4603      	mov	r3, r0
 8005640:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d13a      	bne.n	80056be <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005648:	e013      	b.n	8005672 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e051      	b.n	8005716 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005676:	b2db      	uxtb	r3, r3
 8005678:	3301      	adds	r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	8979      	ldrh	r1, [r7, #10]
 800567e:	4b2c      	ldr	r3, [pc, #176]	@ (8005730 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f001 ff3f 	bl	8007508 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056a4:	2110      	movs	r1, #16
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f001 ff60 	bl	800756c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e028      	b.n	8005710 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d2:	f043 0210 	orr.w	r2, r3, #16
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e017      	b.n	8005716 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a12      	ldr	r2, [pc, #72]	@ (8005734 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80056ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	8979      	ldrh	r1, [r7, #10]
 80056f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005730 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f001 ff04 	bl	8007508 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005708:	2101      	movs	r1, #1
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f001 ff2e 	bl	800756c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3720      	adds	r7, #32
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	ffff0000 	.word	0xffff0000
 8005724:	0800625f 	.word	0x0800625f
 8005728:	0800728b 	.word	0x0800728b
 800572c:	08007459 	.word	0x08007459
 8005730:	80002000 	.word	0x80002000
 8005734:	08005dd3 	.word	0x08005dd3

08005738 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	461a      	mov	r2, r3
 8005744:	460b      	mov	r3, r1
 8005746:	817b      	strh	r3, [r7, #10]
 8005748:	4613      	mov	r3, r2
 800574a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b20      	cmp	r3, #32
 8005756:	f040 80cd 	bne.w	80058f4 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005768:	d101      	bne.n	800576e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800576a:	2302      	movs	r3, #2
 800576c:	e0c3      	b.n	80058f6 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_I2C_Master_Receive_DMA+0x44>
 8005778:	2302      	movs	r3, #2
 800577a:	e0bc      	b.n	80058f6 <HAL_I2C_Master_Receive_DMA+0x1be>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2222      	movs	r2, #34	@ 0x22
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2210      	movs	r2, #16
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	893a      	ldrh	r2, [r7, #8]
 80057a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a55      	ldr	r2, [pc, #340]	@ (8005900 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80057aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a55      	ldr	r2, [pc, #340]	@ (8005904 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80057b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2bff      	cmp	r3, #255	@ 0xff
 80057ba:	d906      	bls.n	80057ca <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80057c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e007      	b.n	80057da <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80057d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d070      	beq.n	80058c4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d020      	beq.n	800582c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ee:	4a46      	ldr	r2, [pc, #280]	@ (8005908 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 80057f0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	4a45      	ldr	r2, [pc, #276]	@ (800590c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 80057f8:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	2200      	movs	r2, #0
 8005808:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3324      	adds	r3, #36	@ 0x24
 8005814:	4619      	mov	r1, r3
 8005816:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800581c:	f7fd fdf0 	bl	8003400 <HAL_DMA_Start_IT>
 8005820:	4603      	mov	r3, r0
 8005822:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d138      	bne.n	800589c <HAL_I2C_Master_Receive_DMA+0x164>
 800582a:	e013      	b.n	8005854 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005840:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e050      	b.n	80058f6 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005858:	b2da      	uxtb	r2, r3
 800585a:	8979      	ldrh	r1, [r7, #10]
 800585c:	4b2c      	ldr	r3, [pc, #176]	@ (8005910 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f001 fe50 	bl	8007508 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005882:	2110      	movs	r1, #16
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f001 fe71 	bl	800756c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e029      	b.n	80058f0 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b0:	f043 0210 	orr.w	r2, r3, #16
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e018      	b.n	80058f6 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4a13      	ldr	r2, [pc, #76]	@ (8005914 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80058c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	8979      	ldrh	r1, [r7, #10]
 80058d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005910 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f001 fe14 	bl	8007508 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058e8:	2102      	movs	r1, #2
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f001 fe3e 	bl	800756c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e000      	b.n	80058f6 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
  }
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	ffff0000 	.word	0xffff0000
 8005904:	0800625f 	.word	0x0800625f
 8005908:	08007361 	.word	0x08007361
 800590c:	08007459 	.word	0x08007459
 8005910:	80002400 	.word	0x80002400
 8005914:	08005dd3 	.word	0x08005dd3

08005918 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b20      	cmp	r3, #32
 8005930:	f040 80d1 	bne.w	8005ad6 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005946:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0c5      	b.n	8005ad8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005956:	2302      	movs	r3, #2
 8005958:	e0be      	b.n	8005ad8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2221      	movs	r2, #33	@ 0x21
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a53      	ldr	r2, [pc, #332]	@ (8005ae0 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 8005992:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a53      	ldr	r2, [pc, #332]	@ (8005ae4 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 8005998:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a2:	d117      	bne.n	80059d4 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d068      	beq.n	8005ab0 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d022      	beq.n	8005a2c <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	4a3f      	ldr	r2, [pc, #252]	@ (8005ae8 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 80059ec:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f2:	4a3e      	ldr	r2, [pc, #248]	@ (8005aec <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 80059f4:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	2200      	movs	r2, #0
 80059fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a02:	2200      	movs	r2, #0
 8005a04:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a0e:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a16:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a1c:	f7fd fcf0 	bl	8003400 <HAL_DMA_Start_IT>
 8005a20:	4603      	mov	r3, r0
 8005a22:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d12e      	bne.n	8005a88 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005a2a:	e013      	b.n	8005a54 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2228      	movs	r2, #40	@ 0x28
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e041      	b.n	8005ad8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a62:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f001 fd7b 	bl	800756c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e024      	b.n	8005ad2 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2228      	movs	r2, #40	@ 0x28
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9c:	f043 0210 	orr.w	r2, r3, #16
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e013      	b.n	8005ad8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005abe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ac8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f001 fd4d 	bl	800756c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e000      	b.n	8005ad8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005ad6:	2302      	movs	r3, #2
  }
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	ffff0000 	.word	0xffff0000
 8005ae4:	08006701 	.word	0x08006701
 8005ae8:	08007321 	.word	0x08007321
 8005aec:	08007459 	.word	0x08007459

08005af0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	f040 809b 	bne.w	8005c42 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b1e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e08f      	b.n	8005c44 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_I2C_Slave_Receive_DMA+0x42>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e088      	b.n	8005c44 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2222      	movs	r2, #34	@ 0x22
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a38      	ldr	r2, [pc, #224]	@ (8005c4c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a38      	ldr	r2, [pc, #224]	@ (8005c50 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005b70:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d020      	beq.n	8005bbc <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7e:	4a35      	ldr	r2, [pc, #212]	@ (8005c54 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005b80:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	4a34      	ldr	r2, [pc, #208]	@ (8005c58 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005b88:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b96:	2200      	movs	r2, #0
 8005b98:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3324      	adds	r3, #36	@ 0x24
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bac:	f7fd fc28 	bl	8003400 <HAL_DMA_Start_IT>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d12f      	bne.n	8005c1a <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005bba:	e013      	b.n	8005be4 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2228      	movs	r2, #40	@ 0x28
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e02f      	b.n	8005c44 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bf2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005bfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f001 fcb3 	bl	800756c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c14:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e014      	b.n	8005c44 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2228      	movs	r2, #40	@ 0x28
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2e:	f043 0210 	orr.w	r2, r3, #16
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
  }
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	ffff0000 	.word	0xffff0000
 8005c50:	08006701 	.word	0x08006701
 8005c54:	08007413 	.word	0x08007413
 8005c58:	08007459 	.word	0x08007459

08005c5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
  }
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	09db      	lsrs	r3, r3, #7
 8005cb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cd4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	0a9b      	lsrs	r3, r3, #10
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d010      	beq.n	8005d04 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	09db      	lsrs	r3, r3, #7
 8005ce6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	f043 0208 	orr.w	r2, r3, #8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d02:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	0a5b      	lsrs	r3, r3, #9
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d010      	beq.n	8005d32 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	09db      	lsrs	r3, r3, #7
 8005d14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d20:	f043 0202 	orr.w	r2, r3, #2
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d30:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 030b 	and.w	r3, r3, #11
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 f965 	bl	8007014 <I2C_ITError>
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b088      	sub	sp, #32
 8005dd6:	af02      	add	r7, sp, #8
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <I2C_Master_ISR_IT+0x1e>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e12e      	b.n	800604e <I2C_Master_ISR_IT+0x27c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	091b      	lsrs	r3, r3, #4
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d013      	beq.n	8005e2c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00d      	beq.n	8005e2c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2210      	movs	r2, #16
 8005e16:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1c:	f043 0204 	orr.w	r2, r3, #4
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f001 fa0c 	bl	8007242 <I2C_Flush_TXDR>
 8005e2a:	e0fb      	b.n	8006024 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	089b      	lsrs	r3, r3, #2
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d023      	beq.n	8005e80 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	089b      	lsrs	r3, r3, #2
 8005e3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01d      	beq.n	8005e80 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0304 	bic.w	r3, r3, #4
 8005e4a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e7e:	e0d1      	b.n	8006024 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	099b      	lsrs	r3, r3, #6
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d12a      	bne.n	8005ee2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d024      	beq.n	8005ee2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01e      	beq.n	8005ee2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80ba 	beq.w	8006024 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005ee0:	e0a0      	b.n	8006024 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	09db      	lsrs	r3, r3, #7
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d06b      	beq.n	8005fc6 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	099b      	lsrs	r3, r3, #6
 8005ef2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d065      	beq.n	8005fc6 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d04e      	beq.n	8005fa2 <I2C_Master_ISR_IT+0x1d0>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d14a      	bne.n	8005fa2 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f18:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2bff      	cmp	r3, #255	@ 0xff
 8005f22:	d91c      	bls.n	8005f5e <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d103      	bne.n	8005f40 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f3e:	e002      	b.n	8005f46 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	22ff      	movs	r2, #255	@ 0xff
 8005f44:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	8a79      	ldrh	r1, [r7, #18]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f001 fad6 	bl	8007508 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f5c:	e032      	b.n	8005fc4 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f70:	d00b      	beq.n	8005f8a <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f76:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f7c:	8a79      	ldrh	r1, [r7, #18]
 8005f7e:	2000      	movs	r0, #0
 8005f80:	9000      	str	r0, [sp, #0]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f001 fac0 	bl	8007508 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f88:	e01c      	b.n	8005fc4 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	8a79      	ldrh	r1, [r7, #18]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f001 fab4 	bl	8007508 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa0:	e010      	b.n	8005fc4 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fb0:	d003      	beq.n	8005fba <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fd09 	bl	80069ca <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fb8:	e034      	b.n	8006024 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fba:	2140      	movs	r1, #64	@ 0x40
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f001 f829 	bl	8007014 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fc2:	e02f      	b.n	8006024 <I2C_Master_ISR_IT+0x252>
 8005fc4:	e02e      	b.n	8006024 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	099b      	lsrs	r3, r3, #6
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d028      	beq.n	8006024 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	099b      	lsrs	r3, r3, #6
 8005fd6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d022      	beq.n	8006024 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d119      	bne.n	800601c <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ff6:	d015      	beq.n	8006024 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006000:	d108      	bne.n	8006014 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	e007      	b.n	8006024 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fcd8 	bl	80069ca <I2C_ITMasterSeqCplt>
 800601a:	e003      	b.n	8006024 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800601c:	2140      	movs	r1, #64	@ 0x40
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fff8 	bl	8007014 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d009      	beq.n	8006044 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fd5e 	bl	8006b00 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <I2C_Slave_ISR_IT+0x24>
 8006076:	2302      	movs	r3, #2
 8006078:	e0ed      	b.n	8006256 <I2C_Slave_ISR_IT+0x200>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006096:	2b00      	cmp	r3, #0
 8006098:	d004      	beq.n	80060a4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800609a:	6939      	ldr	r1, [r7, #16]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fdf9 	bl	8006c94 <I2C_ITSlaveCplt>
 80060a2:	e0d3      	b.n	800624c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d04d      	beq.n	800614c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	091b      	lsrs	r3, r3, #4
 80060b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d047      	beq.n	800614c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d128      	bne.n	8006118 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b28      	cmp	r3, #40	@ 0x28
 80060d0:	d108      	bne.n	80060e4 <I2C_Slave_ISR_IT+0x8e>
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060d8:	d104      	bne.n	80060e4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80060da:	6939      	ldr	r1, [r7, #16]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 ff43 	bl	8006f68 <I2C_ITListenCplt>
 80060e2:	e032      	b.n	800614a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b29      	cmp	r3, #41	@ 0x29
 80060ee:	d10e      	bne.n	800610e <I2C_Slave_ISR_IT+0xb8>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060f6:	d00a      	beq.n	800610e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2210      	movs	r2, #16
 80060fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f001 f89e 	bl	8007242 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fc9c 	bl	8006a44 <I2C_ITSlaveSeqCplt>
 800610c:	e01d      	b.n	800614a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2210      	movs	r2, #16
 8006114:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006116:	e096      	b.n	8006246 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2210      	movs	r2, #16
 800611e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006124:	f043 0204 	orr.w	r2, r3, #4
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <I2C_Slave_ISR_IT+0xe6>
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006138:	f040 8085 	bne.w	8006246 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006140:	4619      	mov	r1, r3
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 ff66 	bl	8007014 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006148:	e07d      	b.n	8006246 <I2C_Slave_ISR_IT+0x1f0>
 800614a:	e07c      	b.n	8006246 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d030      	beq.n	80061ba <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02a      	beq.n	80061ba <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d018      	beq.n	80061a0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d14f      	bne.n	800624a <I2C_Slave_ISR_IT+0x1f4>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061b0:	d04b      	beq.n	800624a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fc46 	bl	8006a44 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80061b8:	e047      	b.n	800624a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	08db      	lsrs	r3, r3, #3
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	08db      	lsrs	r3, r3, #3
 80061ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80061d2:	6939      	ldr	r1, [r7, #16]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fb74 	bl	80068c2 <I2C_ITAddrCplt>
 80061da:	e037      	b.n	800624c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d031      	beq.n	800624c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d02b      	beq.n	800624c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d018      	beq.n	8006230 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800622e:	e00d      	b.n	800624c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006236:	d002      	beq.n	800623e <I2C_Slave_ISR_IT+0x1e8>
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fc00 	bl	8006a44 <I2C_ITSlaveSeqCplt>
 8006244:	e002      	b.n	800624c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800624a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b088      	sub	sp, #32
 8006262:	af02      	add	r7, sp, #8
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <I2C_Master_ISR_DMA+0x1a>
 8006274:	2302      	movs	r3, #2
 8006276:	e0f0      	b.n	800645a <I2C_Master_ISR_DMA+0x1fc>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d017      	beq.n	80062bc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	091b      	lsrs	r3, r3, #4
 8006290:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006294:	2b00      	cmp	r3, #0
 8006296:	d011      	beq.n	80062bc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2210      	movs	r2, #16
 800629e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a4:	f043 0204 	orr.w	r2, r3, #4
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062ac:	2120      	movs	r1, #32
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f001 f95c 	bl	800756c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 ffc4 	bl	8007242 <I2C_Flush_TXDR>
 80062ba:	e0c9      	b.n	8006450 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	09db      	lsrs	r3, r3, #7
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8081 	beq.w	80063cc <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	099b      	lsrs	r3, r3, #6
 80062ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d07a      	beq.n	80063cc <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062e4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d05c      	beq.n	80063aa <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062fc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	2bff      	cmp	r3, #255	@ 0xff
 8006306:	d914      	bls.n	8006332 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	0c1b      	lsrs	r3, r3, #16
 8006310:	b2db      	uxtb	r3, r3
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d103      	bne.n	8006324 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006322:	e002      	b.n	800632a <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	22ff      	movs	r2, #255	@ 0xff
 8006328:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800632a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e010      	b.n	8006354 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006344:	d003      	beq.n	800634e <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e002      	b.n	8006354 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800634e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006352:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006358:	b2da      	uxtb	r2, r3
 800635a:	8a79      	ldrh	r1, [r7, #18]
 800635c:	2300      	movs	r3, #0
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f001 f8d0 	bl	8007508 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b22      	cmp	r3, #34	@ 0x22
 8006384:	d108      	bne.n	8006398 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006394:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006396:	e05b      	b.n	8006450 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063a8:	e052      	b.n	8006450 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063b8:	d003      	beq.n	80063c2 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fb05 	bl	80069ca <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80063c0:	e046      	b.n	8006450 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063c2:	2140      	movs	r1, #64	@ 0x40
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fe25 	bl	8007014 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80063ca:	e041      	b.n	8006450 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	099b      	lsrs	r3, r3, #6
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d029      	beq.n	800642c <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	099b      	lsrs	r3, r3, #6
 80063dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d023      	beq.n	800642c <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d119      	bne.n	8006422 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063fc:	d027      	beq.n	800644e <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006406:	d108      	bne.n	800641a <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006416:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006418:	e019      	b.n	800644e <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fad5 	bl	80069ca <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006420:	e015      	b.n	800644e <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006422:	2140      	movs	r1, #64	@ 0x40
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fdf5 	bl	8007014 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800642a:	e010      	b.n	800644e <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00b      	beq.n	8006450 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fb5a 	bl	8006b00 <I2C_ITMasterCplt>
 800644c:	e000      	b.n	8006450 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800644e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006470:	4b94      	ldr	r3, [pc, #592]	@ (80066c4 <I2C_Mem_ISR_DMA+0x260>)
 8006472:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <I2C_Mem_ISR_DMA+0x1e>
 800647e:	2302      	movs	r3, #2
 8006480:	e139      	b.n	80066f6 <I2C_Mem_ISR_DMA+0x292>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d017      	beq.n	80064c6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d011      	beq.n	80064c6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2210      	movs	r2, #16
 80064a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ae:	f043 0204 	orr.w	r2, r3, #4
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064b6:	2120      	movs	r1, #32
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f001 f857 	bl	800756c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 febf 	bl	8007242 <I2C_Flush_TXDR>
 80064c4:	e112      	b.n	80066ec <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	085b      	lsrs	r3, r3, #1
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00f      	beq.n	80064f2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80064f0:	e0fc      	b.n	80066ec <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	09db      	lsrs	r3, r3, #7
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d06e      	beq.n	80065dc <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	099b      	lsrs	r3, r3, #6
 8006502:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006506:	2b00      	cmp	r3, #0
 8006508:	d068      	beq.n	80065dc <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800650a:	2101      	movs	r1, #1
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 f8b1 	bl	8007674 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006512:	2110      	movs	r1, #16
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f001 f829 	bl	800756c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d056      	beq.n	80065d2 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2bff      	cmp	r3, #255	@ 0xff
 800652c:	d91e      	bls.n	800656c <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	b2db      	uxtb	r3, r3
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b01      	cmp	r3, #1
 8006540:	d103      	bne.n	800654a <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006548:	e002      	b.n	8006550 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	@ 0xff
 800654e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006554:	b299      	uxth	r1, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655a:	b2da      	uxtb	r2, r3
 800655c:	2300      	movs	r3, #0
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 ffcf 	bl	8007508 <I2C_TransferConfig>
 800656a:	e011      	b.n	8006590 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657a:	b299      	uxth	r1, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006580:	b2da      	uxtb	r2, r3
 8006582:	2300      	movs	r3, #0
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 ffbc 	bl	8007508 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b22      	cmp	r3, #34	@ 0x22
 80065ac:	d108      	bne.n	80065c0 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065be:	e095      	b.n	80066ec <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065d0:	e08c      	b.n	80066ec <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065d2:	2140      	movs	r1, #64	@ 0x40
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fd1d 	bl	8007014 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80065da:	e087      	b.n	80066ec <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	099b      	lsrs	r3, r3, #6
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d071      	beq.n	80066cc <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	099b      	lsrs	r3, r3, #6
 80065ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d06b      	beq.n	80066cc <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065f4:	2101      	movs	r1, #1
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f001 f83c 	bl	8007674 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80065fc:	2110      	movs	r1, #16
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 ffb4 	bl	800756c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b22      	cmp	r3, #34	@ 0x22
 800660e:	d101      	bne.n	8006614 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006610:	4b2d      	ldr	r3, [pc, #180]	@ (80066c8 <I2C_Mem_ISR_DMA+0x264>)
 8006612:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	2bff      	cmp	r3, #255	@ 0xff
 800661c:	d91e      	bls.n	800665c <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b01      	cmp	r3, #1
 8006630:	d103      	bne.n	800663a <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006638:	e002      	b.n	8006640 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	22ff      	movs	r2, #255	@ 0xff
 800663e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006644:	b299      	uxth	r1, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664a:	b2da      	uxtb	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 ff57 	bl	8007508 <I2C_TransferConfig>
 800665a:	e011      	b.n	8006680 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666a:	b299      	uxth	r1, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006670:	b2da      	uxtb	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 ff44 	bl	8007508 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b22      	cmp	r3, #34	@ 0x22
 800669c:	d108      	bne.n	80066b0 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066ac:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ae:	e01d      	b.n	80066ec <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066c0:	e014      	b.n	80066ec <I2C_Mem_ISR_DMA+0x288>
 80066c2:	bf00      	nop
 80066c4:	80002000 	.word	0x80002000
 80066c8:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fa0a 	bl	8006b00 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <I2C_Slave_ISR_DMA+0x24>
 8006720:	2302      	movs	r3, #2
 8006722:	e0ca      	b.n	80068ba <I2C_Slave_ISR_DMA+0x1ba>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 faa4 	bl	8006c94 <I2C_ITSlaveCplt>
 800674c:	e0b0      	b.n	80068b0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 809a 	beq.w	8006890 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	091b      	lsrs	r3, r3, #4
 8006760:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8093 	beq.w	8006890 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	0b9b      	lsrs	r3, r3, #14
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d105      	bne.n	8006782 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0bdb      	lsrs	r3, r3, #15
 800677a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800677e:	2b00      	cmp	r3, #0
 8006780:	d07f      	beq.n	8006882 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0bdb      	lsrs	r3, r3, #15
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80067a2:	2301      	movs	r3, #1
 80067a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00d      	beq.n	80067ca <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0b9b      	lsrs	r3, r3, #14
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80067c6:	2301      	movs	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d128      	bne.n	8006822 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b28      	cmp	r3, #40	@ 0x28
 80067da:	d108      	bne.n	80067ee <I2C_Slave_ISR_DMA+0xee>
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067e2:	d104      	bne.n	80067ee <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fbbe 	bl	8006f68 <I2C_ITListenCplt>
 80067ec:	e048      	b.n	8006880 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b29      	cmp	r3, #41	@ 0x29
 80067f8:	d10e      	bne.n	8006818 <I2C_Slave_ISR_DMA+0x118>
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006800:	d00a      	beq.n	8006818 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2210      	movs	r2, #16
 8006808:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fd19 	bl	8007242 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f917 	bl	8006a44 <I2C_ITSlaveSeqCplt>
 8006816:	e033      	b.n	8006880 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2210      	movs	r2, #16
 800681e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006820:	e034      	b.n	800688c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2210      	movs	r2, #16
 8006828:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f043 0204 	orr.w	r2, r3, #4
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <I2C_Slave_ISR_DMA+0x14c>
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800684a:	d11f      	bne.n	800688c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b21      	cmp	r3, #33	@ 0x21
 8006850:	d002      	beq.n	8006858 <I2C_Slave_ISR_DMA+0x158>
 8006852:	7dfb      	ldrb	r3, [r7, #23]
 8006854:	2b29      	cmp	r3, #41	@ 0x29
 8006856:	d103      	bne.n	8006860 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2221      	movs	r2, #33	@ 0x21
 800685c:	631a      	str	r2, [r3, #48]	@ 0x30
 800685e:	e008      	b.n	8006872 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	2b22      	cmp	r3, #34	@ 0x22
 8006864:	d002      	beq.n	800686c <I2C_Slave_ISR_DMA+0x16c>
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b2a      	cmp	r3, #42	@ 0x2a
 800686a:	d102      	bne.n	8006872 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2222      	movs	r2, #34	@ 0x22
 8006870:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006876:	4619      	mov	r1, r3
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fbcb 	bl	8007014 <I2C_ITError>
      if (treatdmanack == 1U)
 800687e:	e005      	b.n	800688c <I2C_Slave_ISR_DMA+0x18c>
 8006880:	e004      	b.n	800688c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2210      	movs	r2, #16
 8006888:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800688a:	e011      	b.n	80068b0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 800688c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800688e:	e00f      	b.n	80068b0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	08db      	lsrs	r3, r3, #3
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f809 	bl	80068c2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068d8:	2b28      	cmp	r3, #40	@ 0x28
 80068da:	d16a      	bne.n	80069b2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	0c1b      	lsrs	r3, r3, #16
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80068fa:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006908:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006916:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d138      	bne.n	8006992 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006920:	897b      	ldrh	r3, [r7, #10]
 8006922:	09db      	lsrs	r3, r3, #7
 8006924:	b29a      	uxth	r2, r3
 8006926:	89bb      	ldrh	r3, [r7, #12]
 8006928:	4053      	eors	r3, r2
 800692a:	b29b      	uxth	r3, r3
 800692c:	f003 0306 	and.w	r3, r3, #6
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11c      	bne.n	800696e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006934:	897b      	ldrh	r3, [r7, #10]
 8006936:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006946:	2b02      	cmp	r3, #2
 8006948:	d13b      	bne.n	80069c2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2208      	movs	r2, #8
 8006956:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006960:	89ba      	ldrh	r2, [r7, #12]
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff f9f3 	bl	8005d52 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800696c:	e029      	b.n	80069c2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800696e:	893b      	ldrh	r3, [r7, #8]
 8006970:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006972:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fe7c 	bl	8007674 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006984:	89ba      	ldrh	r2, [r7, #12]
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff f9e1 	bl	8005d52 <HAL_I2C_AddrCallback>
}
 8006990:	e017      	b.n	80069c2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006992:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fe6c 	bl	8007674 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069a4:	89ba      	ldrh	r2, [r7, #12]
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff f9d1 	bl	8005d52 <HAL_I2C_AddrCallback>
}
 80069b0:	e007      	b.n	80069c2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2208      	movs	r2, #8
 80069b8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b21      	cmp	r3, #33	@ 0x21
 80069e4:	d115      	bne.n	8006a12 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2211      	movs	r2, #17
 80069f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069fa:	2101      	movs	r1, #1
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fe39 	bl	8007674 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f018 fe76 	bl	801f6fc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a10:	e014      	b.n	8006a3c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2212      	movs	r2, #18
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a26:	2102      	movs	r1, #2
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fe23 	bl	8007674 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f018 fe76 	bl	801f728 <HAL_I2C_MasterRxCpltCallback>
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	0b9b      	lsrs	r3, r3, #14
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e00d      	b.n	8006a96 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	0bdb      	lsrs	r3, r3, #15
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b29      	cmp	r3, #41	@ 0x29
 8006aa0:	d112      	bne.n	8006ac8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2228      	movs	r2, #40	@ 0x28
 8006aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2221      	movs	r2, #33	@ 0x21
 8006aae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fdde 	bl	8007674 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f018 fe47 	bl	801f754 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ac6:	e017      	b.n	8006af8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad2:	d111      	bne.n	8006af8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2228      	movs	r2, #40	@ 0x28
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2222      	movs	r2, #34	@ 0x22
 8006ae0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ae2:	2102      	movs	r1, #2
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fdc5 	bl	8007674 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f018 fe44 	bl	801f780 <HAL_I2C_SlaveRxCpltCallback>
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2220      	movs	r2, #32
 8006b14:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b21      	cmp	r3, #33	@ 0x21
 8006b20:	d107      	bne.n	8006b32 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b22:	2101      	movs	r1, #1
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fda5 	bl	8007674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2211      	movs	r2, #17
 8006b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b30:	e00c      	b.n	8006b4c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b22      	cmp	r3, #34	@ 0x22
 8006b3c:	d106      	bne.n	8006b4c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b3e:	2102      	movs	r1, #2
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fd97 	bl	8007674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2212      	movs	r2, #18
 8006b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b4d      	ldr	r3, [pc, #308]	@ (8006c8c <I2C_ITMasterCplt+0x18c>)
 8006b58:	400b      	ands	r3, r1
 8006b5a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a4a      	ldr	r2, [pc, #296]	@ (8006c90 <I2C_ITMasterCplt+0x190>)
 8006b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2210      	movs	r2, #16
 8006b7a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b80:	f043 0204 	orr.w	r2, r3, #4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b60      	cmp	r3, #96	@ 0x60
 8006b92:	d10b      	bne.n	8006bac <I2C_ITMasterCplt+0xac>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	089b      	lsrs	r3, r3, #2
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006baa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fb48 	bl	8007242 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b60      	cmp	r3, #96	@ 0x60
 8006bc2:	d002      	beq.n	8006bca <I2C_ITMasterCplt+0xca>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fa1f 	bl	8007014 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bd6:	e054      	b.n	8006c82 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b21      	cmp	r3, #33	@ 0x21
 8006be2:	d124      	bne.n	8006c2e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b40      	cmp	r3, #64	@ 0x40
 8006bfc:	d10b      	bne.n	8006c16 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff f8b7 	bl	8005d82 <HAL_I2C_MemTxCpltCallback>
}
 8006c14:	e035      	b.n	8006c82 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f018 fd68 	bl	801f6fc <HAL_I2C_MasterTxCpltCallback>
}
 8006c2c:	e029      	b.n	8006c82 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b22      	cmp	r3, #34	@ 0x22
 8006c38:	d123      	bne.n	8006c82 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b40      	cmp	r3, #64	@ 0x40
 8006c52:	d10b      	bne.n	8006c6c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff f896 	bl	8005d96 <HAL_I2C_MemRxCpltCallback>
}
 8006c6a:	e00a      	b.n	8006c82 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f018 fd53 	bl	801f728 <HAL_I2C_MasterRxCpltCallback>
}
 8006c82:	bf00      	nop
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	fe00e800 	.word	0xfe00e800
 8006c90:	ffff0000 	.word	0xffff0000

08006c94 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cae:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cb6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	2b21      	cmp	r3, #33	@ 0x21
 8006cc4:	d002      	beq.n	8006ccc <I2C_ITSlaveCplt+0x38>
 8006cc6:	7afb      	ldrb	r3, [r7, #11]
 8006cc8:	2b29      	cmp	r3, #41	@ 0x29
 8006cca:	d108      	bne.n	8006cde <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ccc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fccf 	bl	8007674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2221      	movs	r2, #33	@ 0x21
 8006cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cdc:	e019      	b.n	8006d12 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cde:	7afb      	ldrb	r3, [r7, #11]
 8006ce0:	2b22      	cmp	r3, #34	@ 0x22
 8006ce2:	d002      	beq.n	8006cea <I2C_ITSlaveCplt+0x56>
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce8:	d108      	bne.n	8006cfc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006cea:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fcc0 	bl	8007674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2222      	movs	r2, #34	@ 0x22
 8006cf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cfa:	e00a      	b.n	8006d12 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	2b28      	cmp	r3, #40	@ 0x28
 8006d00:	d107      	bne.n	8006d12 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006d02:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fcb4 	bl	8007674 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d20:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6859      	ldr	r1, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8006f60 <I2C_ITSlaveCplt+0x2cc>)
 8006d2e:	400b      	ands	r3, r1
 8006d30:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa85 	bl	8007242 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	0b9b      	lsrs	r3, r3, #14
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d013      	beq.n	8006d6c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d020      	beq.n	8006d9e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d6a:	e018      	b.n	8006d9e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	0bdb      	lsrs	r3, r3, #15
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d012      	beq.n	8006d9e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d86:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d006      	beq.n	8006d9e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	089b      	lsrs	r3, r3, #2
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d020      	beq.n	8006dec <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f023 0304 	bic.w	r3, r3, #4
 8006db0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00c      	beq.n	8006dec <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfa:	f043 0204 	orr.w	r2, r3, #4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d04a      	beq.n	8006ea4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	091b      	lsrs	r3, r3, #4
 8006e12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d044      	beq.n	8006ea4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d128      	bne.n	8006e76 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b28      	cmp	r3, #40	@ 0x28
 8006e2e:	d108      	bne.n	8006e42 <I2C_ITSlaveCplt+0x1ae>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e36:	d104      	bne.n	8006e42 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e38:	6979      	ldr	r1, [r7, #20]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f894 	bl	8006f68 <I2C_ITListenCplt>
 8006e40:	e030      	b.n	8006ea4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b29      	cmp	r3, #41	@ 0x29
 8006e4c:	d10e      	bne.n	8006e6c <I2C_ITSlaveCplt+0x1d8>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e54:	d00a      	beq.n	8006e6c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2210      	movs	r2, #16
 8006e5c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9ef 	bl	8007242 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fded 	bl	8006a44 <I2C_ITSlaveSeqCplt>
 8006e6a:	e01b      	b.n	8006ea4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2210      	movs	r2, #16
 8006e72:	61da      	str	r2, [r3, #28]
 8006e74:	e016      	b.n	8006ea4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2210      	movs	r2, #16
 8006e7c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e82:	f043 0204 	orr.w	r2, r3, #4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <I2C_ITSlaveCplt+0x204>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e96:	d105      	bne.n	8006ea4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8b8 	bl	8007014 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d010      	beq.n	8006edc <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f8a7 	bl	8007014 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b28      	cmp	r3, #40	@ 0x28
 8006ed0:	d141      	bne.n	8006f56 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ed2:	6979      	ldr	r1, [r7, #20]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f847 	bl	8006f68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006eda:	e03c      	b.n	8006f56 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ee4:	d014      	beq.n	8006f10 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff fdac 	bl	8006a44 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a1d      	ldr	r2, [pc, #116]	@ (8006f64 <I2C_ITSlaveCplt+0x2d0>)
 8006ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fe ff30 	bl	8005d6e <HAL_I2C_ListenCpltCallback>
}
 8006f0e:	e022      	b.n	8006f56 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b22      	cmp	r3, #34	@ 0x22
 8006f1a:	d10e      	bne.n	8006f3a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f018 fc24 	bl	801f780 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f38:	e00d      	b.n	8006f56 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f018 fbff 	bl	801f754 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f56:	bf00      	nop
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	fe00e800 	.word	0xfe00e800
 8006f64:	ffff0000 	.word	0xffff0000

08006f68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a26      	ldr	r2, [pc, #152]	@ (8007010 <I2C_ITListenCplt+0xa8>)
 8006f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2220      	movs	r2, #32
 8006f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	089b      	lsrs	r3, r3, #2
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d022      	beq.n	8006fe6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d012      	beq.n	8006fe6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fde:	f043 0204 	orr.w	r2, r3, #4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fe6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fb42 	bl	8007674 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fe feb4 	bl	8005d6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	ffff0000 	.word	0xffff0000

08007014 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007024:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a6d      	ldr	r2, [pc, #436]	@ (80071e8 <I2C_ITError+0x1d4>)
 8007032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	2b28      	cmp	r3, #40	@ 0x28
 800704a:	d005      	beq.n	8007058 <I2C_ITError+0x44>
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b29      	cmp	r3, #41	@ 0x29
 8007050:	d002      	beq.n	8007058 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b2a      	cmp	r3, #42	@ 0x2a
 8007056:	d10b      	bne.n	8007070 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007058:	2103      	movs	r1, #3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb0a 	bl	8007674 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2228      	movs	r2, #40	@ 0x28
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a60      	ldr	r2, [pc, #384]	@ (80071ec <I2C_ITError+0x1d8>)
 800706c:	635a      	str	r2, [r3, #52]	@ 0x34
 800706e:	e030      	b.n	80070d2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007070:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fafd 	bl	8007674 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f8e1 	bl	8007242 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b60      	cmp	r3, #96	@ 0x60
 800708a:	d01f      	beq.n	80070cc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d114      	bne.n	80070cc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b10      	cmp	r3, #16
 80070ae:	d109      	bne.n	80070c4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2210      	movs	r2, #16
 80070b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070bc:	f043 0204 	orr.w	r2, r3, #4
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2220      	movs	r2, #32
 80070ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d039      	beq.n	8007154 <I2C_ITError+0x140>
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b11      	cmp	r3, #17
 80070e4:	d002      	beq.n	80070ec <I2C_ITError+0xd8>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b21      	cmp	r3, #33	@ 0x21
 80070ea:	d133      	bne.n	8007154 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070fa:	d107      	bne.n	800710c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800710a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007110:	4618      	mov	r0, r3
 8007112:	f7fc fc45 	bl	80039a0 <HAL_DMA_GetState>
 8007116:	4603      	mov	r3, r0
 8007118:	2b01      	cmp	r3, #1
 800711a:	d017      	beq.n	800714c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	4a33      	ldr	r2, [pc, #204]	@ (80071f0 <I2C_ITError+0x1dc>)
 8007122:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	4618      	mov	r0, r3
 8007132:	f7fc fa35 	bl	80035a0 <HAL_DMA_Abort_IT>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d04d      	beq.n	80071d8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007146:	4610      	mov	r0, r2
 8007148:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800714a:	e045      	b.n	80071d8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f851 	bl	80071f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007152:	e041      	b.n	80071d8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d039      	beq.n	80071d0 <I2C_ITError+0x1bc>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b12      	cmp	r3, #18
 8007160:	d002      	beq.n	8007168 <I2C_ITError+0x154>
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2b22      	cmp	r3, #34	@ 0x22
 8007166:	d133      	bne.n	80071d0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007172:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007176:	d107      	bne.n	8007188 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007186:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718c:	4618      	mov	r0, r3
 800718e:	f7fc fc07 	bl	80039a0 <HAL_DMA_GetState>
 8007192:	4603      	mov	r3, r0
 8007194:	2b01      	cmp	r3, #1
 8007196:	d017      	beq.n	80071c8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719c:	4a14      	ldr	r2, [pc, #80]	@ (80071f0 <I2C_ITError+0x1dc>)
 800719e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fc f9f7 	bl	80035a0 <HAL_DMA_Abort_IT>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d011      	beq.n	80071dc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071c2:	4610      	mov	r0, r2
 80071c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071c6:	e009      	b.n	80071dc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f813 	bl	80071f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071ce:	e005      	b.n	80071dc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f80f 	bl	80071f4 <I2C_TreatErrorCallback>
  }
}
 80071d6:	e002      	b.n	80071de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071d8:	bf00      	nop
 80071da:	e000      	b.n	80071de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071dc:	bf00      	nop
}
 80071de:	bf00      	nop
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	ffff0000 	.word	0xffff0000
 80071ec:	08006057 	.word	0x08006057
 80071f0:	080074cd 	.word	0x080074cd

080071f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b60      	cmp	r3, #96	@ 0x60
 8007206:	d10e      	bne.n	8007226 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fe fdcd 	bl	8005dbe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007224:	e009      	b.n	800723a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fe fdb8 	bl	8005daa <HAL_I2C_ErrorCallback>
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d103      	bne.n	8007260 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2200      	movs	r2, #0
 800725e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d007      	beq.n	800727e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699a      	ldr	r2, [r3, #24]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	619a      	str	r2, [r3, #24]
  }
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007296:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072a6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d104      	bne.n	80072bc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80072b2:	2120      	movs	r1, #32
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f959 	bl	800756c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80072ba:	e02d      	b.n	8007318 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80072c4:	441a      	add	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2bff      	cmp	r3, #255	@ 0xff
 80072d2:	d903      	bls.n	80072dc <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	22ff      	movs	r2, #255	@ 0xff
 80072d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80072da:	e004      	b.n	80072e6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ee:	4619      	mov	r1, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3328      	adds	r3, #40	@ 0x28
 80072f6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072fc:	f7fc f880 	bl	8003400 <HAL_DMA_Start_IT>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007306:	2110      	movs	r1, #16
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff fe83 	bl	8007014 <I2C_ITError>
}
 800730e:	e003      	b.n	8007318 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007310:	2140      	movs	r1, #64	@ 0x40
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f92a 	bl	800756c <I2C_Enable_IRQ>
}
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007332:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800733a:	d002      	beq.n	8007342 <I2C_DMASlaveTransmitCplt+0x22>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007350:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff fb76 	bl	8006a44 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800737c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d104      	bne.n	8007392 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007388:	2120      	movs	r1, #32
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f8ee 	bl	800756c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007390:	e03b      	b.n	800740a <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800739a:	441a      	add	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2bff      	cmp	r3, #255	@ 0xff
 80073a8:	d911      	bls.n	80073ce <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	0c1b      	lsrs	r3, r3, #16
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d103      	bne.n	80073c6 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073c4:	e008      	b.n	80073d8 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	22ff      	movs	r2, #255	@ 0xff
 80073ca:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073cc:	e004      	b.n	80073d8 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3324      	adds	r3, #36	@ 0x24
 80073e2:	4619      	mov	r1, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80073ee:	f7fc f807 	bl	8003400 <HAL_DMA_Start_IT>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d004      	beq.n	8007402 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80073f8:	2110      	movs	r1, #16
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff fe0a 	bl	8007014 <I2C_ITError>
}
 8007400:	e003      	b.n	800740a <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007402:	2140      	movs	r1, #64	@ 0x40
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f8b1 	bl	800756c <I2C_Enable_IRQ>
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b084      	sub	sp, #16
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10e      	bne.n	8007450 <I2C_DMASlaveReceiveCplt+0x3e>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007438:	d00a      	beq.n	8007450 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007448:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fafa 	bl	8006a44 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007468:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800747e:	2301      	movs	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d007      	beq.n	800749a <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007496:	2301      	movs	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fc fa8e 	bl	80039bc <HAL_DMA_GetError>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d00e      	beq.n	80074c4 <I2C_DMAError+0x6c>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ba:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074bc:	2110      	movs	r1, #16
 80074be:	68b8      	ldr	r0, [r7, #8]
 80074c0:	f7ff fda8 	bl	8007014 <I2C_ITError>
  }
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e6:	2200      	movs	r2, #0
 80074e8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f6:	2200      	movs	r2, #0
 80074f8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff fe7a 	bl	80071f4 <I2C_TreatErrorCallback>
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	607b      	str	r3, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	817b      	strh	r3, [r7, #10]
 8007516:	4613      	mov	r3, r2
 8007518:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800751a:	897b      	ldrh	r3, [r7, #10]
 800751c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007520:	7a7b      	ldrb	r3, [r7, #9]
 8007522:	041b      	lsls	r3, r3, #16
 8007524:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007528:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	4313      	orrs	r3, r2
 8007532:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007536:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	0d5b      	lsrs	r3, r3, #21
 8007542:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007546:	4b08      	ldr	r3, [pc, #32]	@ (8007568 <I2C_TransferConfig+0x60>)
 8007548:	430b      	orrs	r3, r1
 800754a:	43db      	mvns	r3, r3
 800754c:	ea02 0103 	and.w	r1, r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	03ff63ff 	.word	0x03ff63ff

0800756c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007580:	4a39      	ldr	r2, [pc, #228]	@ (8007668 <I2C_Enable_IRQ+0xfc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d032      	beq.n	80075ec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800758a:	4a38      	ldr	r2, [pc, #224]	@ (800766c <I2C_Enable_IRQ+0x100>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d02d      	beq.n	80075ec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007594:	4a36      	ldr	r2, [pc, #216]	@ (8007670 <I2C_Enable_IRQ+0x104>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d028      	beq.n	80075ec <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800759a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	da03      	bge.n	80075aa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075aa:	887b      	ldrh	r3, [r7, #2]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075ce:	887b      	ldrh	r3, [r7, #2]
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d103      	bne.n	80075dc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80075da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075dc:	887b      	ldrh	r3, [r7, #2]
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d133      	bne.n	800764a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f043 0320 	orr.w	r3, r3, #32
 80075e8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075ea:	e02e      	b.n	800764a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	da03      	bge.n	80075fc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075fc:	887b      	ldrh	r3, [r7, #2]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800760c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800760e:	887b      	ldrh	r3, [r7, #2]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800761e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007620:	887b      	ldrh	r3, [r7, #2]
 8007622:	2b10      	cmp	r3, #16
 8007624:	d103      	bne.n	800762e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800762c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800762e:	887b      	ldrh	r3, [r7, #2]
 8007630:	2b20      	cmp	r3, #32
 8007632:	d103      	bne.n	800763c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800763a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800763c:	887b      	ldrh	r3, [r7, #2]
 800763e:	2b40      	cmp	r3, #64	@ 0x40
 8007640:	d103      	bne.n	800764a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007648:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6819      	ldr	r1, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	430a      	orrs	r2, r1
 8007658:	601a      	str	r2, [r3, #0]
}
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	0800625f 	.word	0x0800625f
 800766c:	08006701 	.word	0x08006701
 8007670:	08006465 	.word	0x08006465

08007674 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007684:	887b      	ldrh	r3, [r7, #2]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00f      	beq.n	80076ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007694:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076a2:	2b28      	cmp	r3, #40	@ 0x28
 80076a4:	d003      	beq.n	80076ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076ae:	887b      	ldrh	r3, [r7, #2]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00f      	beq.n	80076d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80076be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076cc:	2b28      	cmp	r3, #40	@ 0x28
 80076ce:	d003      	beq.n	80076d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da03      	bge.n	80076e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80076e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076e8:	887b      	ldrh	r3, [r7, #2]
 80076ea:	2b10      	cmp	r3, #16
 80076ec:	d103      	bne.n	80076f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80076f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076f6:	887b      	ldrh	r3, [r7, #2]
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d103      	bne.n	8007704 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f043 0320 	orr.w	r3, r3, #32
 8007702:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007704:	887b      	ldrh	r3, [r7, #2]
 8007706:	2b40      	cmp	r3, #64	@ 0x40
 8007708:	d103      	bne.n	8007712 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007710:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6819      	ldr	r1, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	43da      	mvns	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	400a      	ands	r2, r1
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b20      	cmp	r3, #32
 8007744:	d138      	bne.n	80077b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007750:	2302      	movs	r3, #2
 8007752:	e032      	b.n	80077ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2224      	movs	r2, #36	@ 0x24
 8007760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0201 	bic.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6819      	ldr	r1, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	e000      	b.n	80077ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077b8:	2302      	movs	r3, #2
  }
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d139      	bne.n	8007850 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e033      	b.n	8007852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2224      	movs	r2, #36	@ 0x24
 80077f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0201 	bic.w	r2, r2, #1
 8007808:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007818:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800786a:	4b23      	ldr	r3, [pc, #140]	@ (80078f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786e:	4a22      	ldr	r2, [pc, #136]	@ (80078f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007874:	6413      	str	r3, [r2, #64]	@ 0x40
 8007876:	4b20      	ldr	r3, [pc, #128]	@ (80078f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007882:	4b1e      	ldr	r3, [pc, #120]	@ (80078fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1d      	ldr	r2, [pc, #116]	@ (80078fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800788c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800788e:	f7fa fd67 	bl	8002360 <HAL_GetTick>
 8007892:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007894:	e009      	b.n	80078aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007896:	f7fa fd63 	bl	8002360 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078a4:	d901      	bls.n	80078aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e022      	b.n	80078f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078aa:	4b14      	ldr	r3, [pc, #80]	@ (80078fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b6:	d1ee      	bne.n	8007896 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078b8:	4b10      	ldr	r3, [pc, #64]	@ (80078fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a0f      	ldr	r2, [pc, #60]	@ (80078fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80078be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078c4:	f7fa fd4c 	bl	8002360 <HAL_GetTick>
 80078c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078ca:	e009      	b.n	80078e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078cc:	f7fa fd48 	bl	8002360 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078da:	d901      	bls.n	80078e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e007      	b.n	80078f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078e0:	4b06      	ldr	r3, [pc, #24]	@ (80078fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078ec:	d1ee      	bne.n	80078cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	40023800 	.word	0x40023800
 80078fc:	40007000 	.word	0x40007000

08007900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007908:	2300      	movs	r3, #0
 800790a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e291      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8087 	beq.w	8007a32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007924:	4b96      	ldr	r3, [pc, #600]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 030c 	and.w	r3, r3, #12
 800792c:	2b04      	cmp	r3, #4
 800792e:	d00c      	beq.n	800794a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007930:	4b93      	ldr	r3, [pc, #588]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 030c 	and.w	r3, r3, #12
 8007938:	2b08      	cmp	r3, #8
 800793a:	d112      	bne.n	8007962 <HAL_RCC_OscConfig+0x62>
 800793c:	4b90      	ldr	r3, [pc, #576]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007948:	d10b      	bne.n	8007962 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800794a:	4b8d      	ldr	r3, [pc, #564]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d06c      	beq.n	8007a30 <HAL_RCC_OscConfig+0x130>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d168      	bne.n	8007a30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e26b      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800796a:	d106      	bne.n	800797a <HAL_RCC_OscConfig+0x7a>
 800796c:	4b84      	ldr	r3, [pc, #528]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a83      	ldr	r2, [pc, #524]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	e02e      	b.n	80079d8 <HAL_RCC_OscConfig+0xd8>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10c      	bne.n	800799c <HAL_RCC_OscConfig+0x9c>
 8007982:	4b7f      	ldr	r3, [pc, #508]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a7e      	ldr	r2, [pc, #504]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	4b7c      	ldr	r3, [pc, #496]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a7b      	ldr	r2, [pc, #492]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007994:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e01d      	b.n	80079d8 <HAL_RCC_OscConfig+0xd8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079a4:	d10c      	bne.n	80079c0 <HAL_RCC_OscConfig+0xc0>
 80079a6:	4b76      	ldr	r3, [pc, #472]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a75      	ldr	r2, [pc, #468]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	4b73      	ldr	r3, [pc, #460]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a72      	ldr	r2, [pc, #456]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	e00b      	b.n	80079d8 <HAL_RCC_OscConfig+0xd8>
 80079c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a6e      	ldr	r2, [pc, #440]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	4b6c      	ldr	r3, [pc, #432]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a6b      	ldr	r2, [pc, #428]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d013      	beq.n	8007a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e0:	f7fa fcbe 	bl	8002360 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079e8:	f7fa fcba 	bl	8002360 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b64      	cmp	r3, #100	@ 0x64
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e21f      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079fa:	4b61      	ldr	r3, [pc, #388]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f0      	beq.n	80079e8 <HAL_RCC_OscConfig+0xe8>
 8007a06:	e014      	b.n	8007a32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a08:	f7fa fcaa 	bl	8002360 <HAL_GetTick>
 8007a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a0e:	e008      	b.n	8007a22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a10:	f7fa fca6 	bl	8002360 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	2b64      	cmp	r3, #100	@ 0x64
 8007a1c:	d901      	bls.n	8007a22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e20b      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a22:	4b57      	ldr	r3, [pc, #348]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1f0      	bne.n	8007a10 <HAL_RCC_OscConfig+0x110>
 8007a2e:	e000      	b.n	8007a32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d069      	beq.n	8007b12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a3e:	4b50      	ldr	r3, [pc, #320]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 030c 	and.w	r3, r3, #12
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f003 030c 	and.w	r3, r3, #12
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d11c      	bne.n	8007a90 <HAL_RCC_OscConfig+0x190>
 8007a56:	4b4a      	ldr	r3, [pc, #296]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d116      	bne.n	8007a90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a62:	4b47      	ldr	r3, [pc, #284]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <HAL_RCC_OscConfig+0x17a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d001      	beq.n	8007a7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e1df      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a7a:	4b41      	ldr	r3, [pc, #260]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	493d      	ldr	r1, [pc, #244]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a8e:	e040      	b.n	8007b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d023      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a98:	4b39      	ldr	r3, [pc, #228]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a38      	ldr	r2, [pc, #224]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa4:	f7fa fc5c 	bl	8002360 <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aac:	f7fa fc58 	bl	8002360 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e1bd      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007abe:	4b30      	ldr	r3, [pc, #192]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0f0      	beq.n	8007aac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aca:	4b2d      	ldr	r3, [pc, #180]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	4929      	ldr	r1, [pc, #164]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	600b      	str	r3, [r1, #0]
 8007ade:	e018      	b.n	8007b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ae0:	4b27      	ldr	r3, [pc, #156]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a26      	ldr	r2, [pc, #152]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007ae6:	f023 0301 	bic.w	r3, r3, #1
 8007aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aec:	f7fa fc38 	bl	8002360 <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007af2:	e008      	b.n	8007b06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af4:	f7fa fc34 	bl	8002360 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e199      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b06:	4b1e      	ldr	r3, [pc, #120]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1f0      	bne.n	8007af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d038      	beq.n	8007b90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d019      	beq.n	8007b5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b26:	4b16      	ldr	r3, [pc, #88]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b2a:	4a15      	ldr	r2, [pc, #84]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007b2c:	f043 0301 	orr.w	r3, r3, #1
 8007b30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b32:	f7fa fc15 	bl	8002360 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b38:	e008      	b.n	8007b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b3a:	f7fa fc11 	bl	8002360 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d901      	bls.n	8007b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e176      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0f0      	beq.n	8007b3a <HAL_RCC_OscConfig+0x23a>
 8007b58:	e01a      	b.n	8007b90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b5a:	4b09      	ldr	r3, [pc, #36]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b5e:	4a08      	ldr	r2, [pc, #32]	@ (8007b80 <HAL_RCC_OscConfig+0x280>)
 8007b60:	f023 0301 	bic.w	r3, r3, #1
 8007b64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b66:	f7fa fbfb 	bl	8002360 <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b6c:	e00a      	b.n	8007b84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b6e:	f7fa fbf7 	bl	8002360 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d903      	bls.n	8007b84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e15c      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
 8007b80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b84:	4b91      	ldr	r3, [pc, #580]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1ee      	bne.n	8007b6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80a4 	beq.w	8007ce6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10d      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007baa:	4b88      	ldr	r3, [pc, #544]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bae:	4a87      	ldr	r2, [pc, #540]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bb6:	4b85      	ldr	r3, [pc, #532]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bbe:	60bb      	str	r3, [r7, #8]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bc6:	4b82      	ldr	r3, [pc, #520]	@ (8007dd0 <HAL_RCC_OscConfig+0x4d0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d118      	bne.n	8007c04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8007dd0 <HAL_RCC_OscConfig+0x4d0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8007dd0 <HAL_RCC_OscConfig+0x4d0>)
 8007bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bde:	f7fa fbbf 	bl	8002360 <HAL_GetTick>
 8007be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007be4:	e008      	b.n	8007bf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007be6:	f7fa fbbb 	bl	8002360 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b64      	cmp	r3, #100	@ 0x64
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e120      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bf8:	4b75      	ldr	r3, [pc, #468]	@ (8007dd0 <HAL_RCC_OscConfig+0x4d0>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0f0      	beq.n	8007be6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d106      	bne.n	8007c1a <HAL_RCC_OscConfig+0x31a>
 8007c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c10:	4a6e      	ldr	r2, [pc, #440]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c18:	e02d      	b.n	8007c76 <HAL_RCC_OscConfig+0x376>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10c      	bne.n	8007c3c <HAL_RCC_OscConfig+0x33c>
 8007c22:	4b6a      	ldr	r3, [pc, #424]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c26:	4a69      	ldr	r2, [pc, #420]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c2e:	4b67      	ldr	r3, [pc, #412]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c32:	4a66      	ldr	r2, [pc, #408]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c34:	f023 0304 	bic.w	r3, r3, #4
 8007c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c3a:	e01c      	b.n	8007c76 <HAL_RCC_OscConfig+0x376>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b05      	cmp	r3, #5
 8007c42:	d10c      	bne.n	8007c5e <HAL_RCC_OscConfig+0x35e>
 8007c44:	4b61      	ldr	r3, [pc, #388]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c48:	4a60      	ldr	r2, [pc, #384]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c4a:	f043 0304 	orr.w	r3, r3, #4
 8007c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c50:	4b5e      	ldr	r3, [pc, #376]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c54:	4a5d      	ldr	r2, [pc, #372]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c5c:	e00b      	b.n	8007c76 <HAL_RCC_OscConfig+0x376>
 8007c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c62:	4a5a      	ldr	r2, [pc, #360]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c64:	f023 0301 	bic.w	r3, r3, #1
 8007c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c6a:	4b58      	ldr	r3, [pc, #352]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c6e:	4a57      	ldr	r2, [pc, #348]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c70:	f023 0304 	bic.w	r3, r3, #4
 8007c74:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d015      	beq.n	8007caa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c7e:	f7fa fb6f 	bl	8002360 <HAL_GetTick>
 8007c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c84:	e00a      	b.n	8007c9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c86:	f7fa fb6b 	bl	8002360 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d901      	bls.n	8007c9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e0ce      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0ee      	beq.n	8007c86 <HAL_RCC_OscConfig+0x386>
 8007ca8:	e014      	b.n	8007cd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007caa:	f7fa fb59 	bl	8002360 <HAL_GetTick>
 8007cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cb0:	e00a      	b.n	8007cc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cb2:	f7fa fb55 	bl	8002360 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e0b8      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cc8:	4b40      	ldr	r3, [pc, #256]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1ee      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d105      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cda:	4b3c      	ldr	r3, [pc, #240]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cde:	4a3b      	ldr	r2, [pc, #236]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ce4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 80a4 	beq.w	8007e38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cf0:	4b36      	ldr	r3, [pc, #216]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f003 030c 	and.w	r3, r3, #12
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d06b      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d149      	bne.n	8007d98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d04:	4b31      	ldr	r3, [pc, #196]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a30      	ldr	r2, [pc, #192]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d10:	f7fa fb26 	bl	8002360 <HAL_GetTick>
 8007d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d16:	e008      	b.n	8007d2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d18:	f7fa fb22 	bl	8002360 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e087      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d2a:	4b28      	ldr	r3, [pc, #160]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1f0      	bne.n	8007d18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69da      	ldr	r2, [r3, #28]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d44:	019b      	lsls	r3, r3, #6
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4c:	085b      	lsrs	r3, r3, #1
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	041b      	lsls	r3, r3, #16
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	061b      	lsls	r3, r3, #24
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d64:	4b19      	ldr	r3, [pc, #100]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a18      	ldr	r2, [pc, #96]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d70:	f7fa faf6 	bl	8002360 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d78:	f7fa faf2 	bl	8002360 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e057      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d8a:	4b10      	ldr	r3, [pc, #64]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0x478>
 8007d96:	e04f      	b.n	8007e38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d98:	4b0c      	ldr	r3, [pc, #48]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da4:	f7fa fadc 	bl	8002360 <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dac:	f7fa fad8 	bl	8002360 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e03d      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dbe:	4b03      	ldr	r3, [pc, #12]	@ (8007dcc <HAL_RCC_OscConfig+0x4cc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1f0      	bne.n	8007dac <HAL_RCC_OscConfig+0x4ac>
 8007dca:	e035      	b.n	8007e38 <HAL_RCC_OscConfig+0x538>
 8007dcc:	40023800 	.word	0x40023800
 8007dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e44 <HAL_RCC_OscConfig+0x544>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d028      	beq.n	8007e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d121      	bne.n	8007e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d11a      	bne.n	8007e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e04:	4013      	ands	r3, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d111      	bne.n	8007e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1a:	085b      	lsrs	r3, r3, #1
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d107      	bne.n	8007e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d001      	beq.n	8007e38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	40023800 	.word	0x40023800

08007e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0d0      	b.n	8008002 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e60:	4b6a      	ldr	r3, [pc, #424]	@ (800800c <HAL_RCC_ClockConfig+0x1c4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d910      	bls.n	8007e90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6e:	4b67      	ldr	r3, [pc, #412]	@ (800800c <HAL_RCC_ClockConfig+0x1c4>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f023 020f 	bic.w	r2, r3, #15
 8007e76:	4965      	ldr	r1, [pc, #404]	@ (800800c <HAL_RCC_ClockConfig+0x1c4>)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7e:	4b63      	ldr	r3, [pc, #396]	@ (800800c <HAL_RCC_ClockConfig+0x1c4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d001      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e0b8      	b.n	8008002 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d020      	beq.n	8007ede <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ea8:	4b59      	ldr	r3, [pc, #356]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	4a58      	ldr	r2, [pc, #352]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007eae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007eb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0308 	and.w	r3, r3, #8
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d005      	beq.n	8007ecc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ec0:	4b53      	ldr	r3, [pc, #332]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	4a52      	ldr	r2, [pc, #328]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007ec6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007eca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ecc:	4b50      	ldr	r3, [pc, #320]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	494d      	ldr	r1, [pc, #308]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d040      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d107      	bne.n	8007f02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ef2:	4b47      	ldr	r3, [pc, #284]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d115      	bne.n	8007f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e07f      	b.n	8008002 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d107      	bne.n	8007f1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f0a:	4b41      	ldr	r3, [pc, #260]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d109      	bne.n	8007f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e073      	b.n	8008002 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e06b      	b.n	8008002 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f2a:	4b39      	ldr	r3, [pc, #228]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f023 0203 	bic.w	r2, r3, #3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	4936      	ldr	r1, [pc, #216]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f3c:	f7fa fa10 	bl	8002360 <HAL_GetTick>
 8007f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f42:	e00a      	b.n	8007f5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f44:	f7fa fa0c 	bl	8002360 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d901      	bls.n	8007f5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e053      	b.n	8008002 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 020c 	and.w	r2, r3, #12
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d1eb      	bne.n	8007f44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f6c:	4b27      	ldr	r3, [pc, #156]	@ (800800c <HAL_RCC_ClockConfig+0x1c4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d210      	bcs.n	8007f9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f7a:	4b24      	ldr	r3, [pc, #144]	@ (800800c <HAL_RCC_ClockConfig+0x1c4>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f023 020f 	bic.w	r2, r3, #15
 8007f82:	4922      	ldr	r1, [pc, #136]	@ (800800c <HAL_RCC_ClockConfig+0x1c4>)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f8a:	4b20      	ldr	r3, [pc, #128]	@ (800800c <HAL_RCC_ClockConfig+0x1c4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d001      	beq.n	8007f9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e032      	b.n	8008002 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d008      	beq.n	8007fba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fa8:	4b19      	ldr	r3, [pc, #100]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	4916      	ldr	r1, [pc, #88]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0308 	and.w	r3, r3, #8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007fc6:	4b12      	ldr	r3, [pc, #72]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	490e      	ldr	r1, [pc, #56]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fda:	f000 f821 	bl	8008020 <HAL_RCC_GetSysClockFreq>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8008010 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	091b      	lsrs	r3, r3, #4
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	490a      	ldr	r1, [pc, #40]	@ (8008014 <HAL_RCC_ClockConfig+0x1cc>)
 8007fec:	5ccb      	ldrb	r3, [r1, r3]
 8007fee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff2:	4a09      	ldr	r2, [pc, #36]	@ (8008018 <HAL_RCC_ClockConfig+0x1d0>)
 8007ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ff6:	4b09      	ldr	r3, [pc, #36]	@ (800801c <HAL_RCC_ClockConfig+0x1d4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7f9 fb06 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	40023c00 	.word	0x40023c00
 8008010:	40023800 	.word	0x40023800
 8008014:	08024e88 	.word	0x08024e88
 8008018:	20000000 	.word	0x20000000
 800801c:	20000004 	.word	0x20000004

08008020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008024:	b090      	sub	sp, #64	@ 0x40
 8008026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	637b      	str	r3, [r7, #52]	@ 0x34
 800802c:	2300      	movs	r3, #0
 800802e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008030:	2300      	movs	r3, #0
 8008032:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008038:	4b59      	ldr	r3, [pc, #356]	@ (80081a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 030c 	and.w	r3, r3, #12
 8008040:	2b08      	cmp	r3, #8
 8008042:	d00d      	beq.n	8008060 <HAL_RCC_GetSysClockFreq+0x40>
 8008044:	2b08      	cmp	r3, #8
 8008046:	f200 80a1 	bhi.w	800818c <HAL_RCC_GetSysClockFreq+0x16c>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <HAL_RCC_GetSysClockFreq+0x34>
 800804e:	2b04      	cmp	r3, #4
 8008050:	d003      	beq.n	800805a <HAL_RCC_GetSysClockFreq+0x3a>
 8008052:	e09b      	b.n	800818c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008054:	4b53      	ldr	r3, [pc, #332]	@ (80081a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008056:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008058:	e09b      	b.n	8008192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800805a:	4b53      	ldr	r3, [pc, #332]	@ (80081a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800805c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800805e:	e098      	b.n	8008192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008060:	4b4f      	ldr	r3, [pc, #316]	@ (80081a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800806a:	4b4d      	ldr	r3, [pc, #308]	@ (80081a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d028      	beq.n	80080c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008076:	4b4a      	ldr	r3, [pc, #296]	@ (80081a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	099b      	lsrs	r3, r3, #6
 800807c:	2200      	movs	r2, #0
 800807e:	623b      	str	r3, [r7, #32]
 8008080:	627a      	str	r2, [r7, #36]	@ 0x24
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008088:	2100      	movs	r1, #0
 800808a:	4b47      	ldr	r3, [pc, #284]	@ (80081a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800808c:	fb03 f201 	mul.w	r2, r3, r1
 8008090:	2300      	movs	r3, #0
 8008092:	fb00 f303 	mul.w	r3, r0, r3
 8008096:	4413      	add	r3, r2
 8008098:	4a43      	ldr	r2, [pc, #268]	@ (80081a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800809a:	fba0 1202 	umull	r1, r2, r0, r2
 800809e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080a0:	460a      	mov	r2, r1
 80080a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a6:	4413      	add	r3, r2
 80080a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ac:	2200      	movs	r2, #0
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	61fa      	str	r2, [r7, #28]
 80080b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080ba:	f7f8 f8f9 	bl	80002b0 <__aeabi_uldivmod>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4613      	mov	r3, r2
 80080c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080c6:	e053      	b.n	8008170 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080c8:	4b35      	ldr	r3, [pc, #212]	@ (80081a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	099b      	lsrs	r3, r3, #6
 80080ce:	2200      	movs	r2, #0
 80080d0:	613b      	str	r3, [r7, #16]
 80080d2:	617a      	str	r2, [r7, #20]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80080da:	f04f 0b00 	mov.w	fp, #0
 80080de:	4652      	mov	r2, sl
 80080e0:	465b      	mov	r3, fp
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f04f 0100 	mov.w	r1, #0
 80080ea:	0159      	lsls	r1, r3, #5
 80080ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080f0:	0150      	lsls	r0, r2, #5
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	ebb2 080a 	subs.w	r8, r2, sl
 80080fa:	eb63 090b 	sbc.w	r9, r3, fp
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800810a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800810e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008112:	ebb2 0408 	subs.w	r4, r2, r8
 8008116:	eb63 0509 	sbc.w	r5, r3, r9
 800811a:	f04f 0200 	mov.w	r2, #0
 800811e:	f04f 0300 	mov.w	r3, #0
 8008122:	00eb      	lsls	r3, r5, #3
 8008124:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008128:	00e2      	lsls	r2, r4, #3
 800812a:	4614      	mov	r4, r2
 800812c:	461d      	mov	r5, r3
 800812e:	eb14 030a 	adds.w	r3, r4, sl
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	eb45 030b 	adc.w	r3, r5, fp
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008146:	4629      	mov	r1, r5
 8008148:	028b      	lsls	r3, r1, #10
 800814a:	4621      	mov	r1, r4
 800814c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008150:	4621      	mov	r1, r4
 8008152:	028a      	lsls	r2, r1, #10
 8008154:	4610      	mov	r0, r2
 8008156:	4619      	mov	r1, r3
 8008158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800815a:	2200      	movs	r2, #0
 800815c:	60bb      	str	r3, [r7, #8]
 800815e:	60fa      	str	r2, [r7, #12]
 8008160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008164:	f7f8 f8a4 	bl	80002b0 <__aeabi_uldivmod>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4613      	mov	r3, r2
 800816e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	0c1b      	lsrs	r3, r3, #16
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	3301      	adds	r3, #1
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	fbb2 f3f3 	udiv	r3, r2, r3
 8008188:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800818a:	e002      	b.n	8008192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800818c:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800818e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008194:	4618      	mov	r0, r3
 8008196:	3740      	adds	r7, #64	@ 0x40
 8008198:	46bd      	mov	sp, r7
 800819a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800819e:	bf00      	nop
 80081a0:	40023800 	.word	0x40023800
 80081a4:	00f42400 	.word	0x00f42400
 80081a8:	017d7840 	.word	0x017d7840

080081ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081b0:	4b03      	ldr	r3, [pc, #12]	@ (80081c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80081b2:	681b      	ldr	r3, [r3, #0]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000000 	.word	0x20000000

080081c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081c8:	f7ff fff0 	bl	80081ac <HAL_RCC_GetHCLKFreq>
 80081cc:	4602      	mov	r2, r0
 80081ce:	4b05      	ldr	r3, [pc, #20]	@ (80081e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	0a9b      	lsrs	r3, r3, #10
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	4903      	ldr	r1, [pc, #12]	@ (80081e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081da:	5ccb      	ldrb	r3, [r1, r3]
 80081dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	40023800 	.word	0x40023800
 80081e8:	08024e98 	.word	0x08024e98

080081ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081f0:	f7ff ffdc 	bl	80081ac <HAL_RCC_GetHCLKFreq>
 80081f4:	4602      	mov	r2, r0
 80081f6:	4b05      	ldr	r3, [pc, #20]	@ (800820c <HAL_RCC_GetPCLK2Freq+0x20>)
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	0b5b      	lsrs	r3, r3, #13
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	4903      	ldr	r1, [pc, #12]	@ (8008210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008202:	5ccb      	ldrb	r3, [r1, r3]
 8008204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008208:	4618      	mov	r0, r3
 800820a:	bd80      	pop	{r7, pc}
 800820c:	40023800 	.word	0x40023800
 8008210:	08024e98 	.word	0x08024e98

08008214 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	220f      	movs	r2, #15
 8008222:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008224:	4b12      	ldr	r3, [pc, #72]	@ (8008270 <HAL_RCC_GetClockConfig+0x5c>)
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f003 0203 	and.w	r2, r3, #3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008230:	4b0f      	ldr	r3, [pc, #60]	@ (8008270 <HAL_RCC_GetClockConfig+0x5c>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800823c:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <HAL_RCC_GetClockConfig+0x5c>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008248:	4b09      	ldr	r3, [pc, #36]	@ (8008270 <HAL_RCC_GetClockConfig+0x5c>)
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	08db      	lsrs	r3, r3, #3
 800824e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008256:	4b07      	ldr	r3, [pc, #28]	@ (8008274 <HAL_RCC_GetClockConfig+0x60>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 020f 	and.w	r2, r3, #15
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	601a      	str	r2, [r3, #0]
}
 8008262:	bf00      	nop
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40023800 	.word	0x40023800
 8008274:	40023c00 	.word	0x40023c00

08008278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008284:	2300      	movs	r3, #0
 8008286:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d012      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082a0:	4b69      	ldr	r3, [pc, #420]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	4a68      	ldr	r2, [pc, #416]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082aa:	6093      	str	r3, [r2, #8]
 80082ac:	4b66      	ldr	r3, [pc, #408]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b4:	4964      	ldr	r1, [pc, #400]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d017      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082d2:	4b5d      	ldr	r3, [pc, #372]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e0:	4959      	ldr	r1, [pc, #356]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082f0:	d101      	bne.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80082fe:	2301      	movs	r3, #1
 8008300:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d017      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800830e:	4b4e      	ldr	r3, [pc, #312]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008310:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008314:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831c:	494a      	ldr	r1, [pc, #296]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800832c:	d101      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800832e:	2301      	movs	r3, #1
 8008330:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800833a:	2301      	movs	r3, #1
 800833c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800834a:	2301      	movs	r3, #1
 800834c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 808b 	beq.w	8008472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800835c:	4b3a      	ldr	r3, [pc, #232]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	4a39      	ldr	r2, [pc, #228]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008366:	6413      	str	r3, [r2, #64]	@ 0x40
 8008368:	4b37      	ldr	r3, [pc, #220]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008370:	60bb      	str	r3, [r7, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008374:	4b35      	ldr	r3, [pc, #212]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a34      	ldr	r2, [pc, #208]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800837a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800837e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008380:	f7f9 ffee 	bl	8002360 <HAL_GetTick>
 8008384:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008386:	e008      	b.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008388:	f7f9 ffea 	bl	8002360 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b64      	cmp	r3, #100	@ 0x64
 8008394:	d901      	bls.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e357      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800839a:	4b2c      	ldr	r3, [pc, #176]	@ (800844c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0f0      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083a6:	4b28      	ldr	r3, [pc, #160]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d035      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d02e      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083c4:	4b20      	ldr	r3, [pc, #128]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083d8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083da:	4b1b      	ldr	r3, [pc, #108]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083de:	4a1a      	ldr	r2, [pc, #104]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80083e6:	4a18      	ldr	r2, [pc, #96]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083ec:	4b16      	ldr	r3, [pc, #88]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d114      	bne.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f8:	f7f9 ffb2 	bl	8002360 <HAL_GetTick>
 80083fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fe:	e00a      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008400:	f7f9 ffae 	bl	8002360 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e319      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008416:	4b0c      	ldr	r3, [pc, #48]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0ee      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800842a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800842e:	d111      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008430:	4b05      	ldr	r3, [pc, #20]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800843c:	4b04      	ldr	r3, [pc, #16]	@ (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800843e:	400b      	ands	r3, r1
 8008440:	4901      	ldr	r1, [pc, #4]	@ (8008448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008442:	4313      	orrs	r3, r2
 8008444:	608b      	str	r3, [r1, #8]
 8008446:	e00b      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008448:	40023800 	.word	0x40023800
 800844c:	40007000 	.word	0x40007000
 8008450:	0ffffcff 	.word	0x0ffffcff
 8008454:	4baa      	ldr	r3, [pc, #680]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	4aa9      	ldr	r2, [pc, #676]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800845a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800845e:	6093      	str	r3, [r2, #8]
 8008460:	4ba7      	ldr	r3, [pc, #668]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008462:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800846c:	49a4      	ldr	r1, [pc, #656]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846e:	4313      	orrs	r3, r2
 8008470:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0310 	and.w	r3, r3, #16
 800847a:	2b00      	cmp	r3, #0
 800847c:	d010      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800847e:	4ba0      	ldr	r3, [pc, #640]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008484:	4a9e      	ldr	r2, [pc, #632]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800848a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800848e:	4b9c      	ldr	r3, [pc, #624]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008490:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008498:	4999      	ldr	r1, [pc, #612]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084ac:	4b94      	ldr	r3, [pc, #592]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ba:	4991      	ldr	r1, [pc, #580]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084ce:	4b8c      	ldr	r3, [pc, #560]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084dc:	4988      	ldr	r1, [pc, #544]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084f0:	4b83      	ldr	r3, [pc, #524]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084fe:	4980      	ldr	r1, [pc, #512]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008500:	4313      	orrs	r3, r2
 8008502:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008512:	4b7b      	ldr	r3, [pc, #492]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008518:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008520:	4977      	ldr	r1, [pc, #476]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008522:	4313      	orrs	r3, r2
 8008524:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008534:	4b72      	ldr	r3, [pc, #456]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800853a:	f023 0203 	bic.w	r2, r3, #3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008542:	496f      	ldr	r1, [pc, #444]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008544:	4313      	orrs	r3, r2
 8008546:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008556:	4b6a      	ldr	r3, [pc, #424]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800855c:	f023 020c 	bic.w	r2, r3, #12
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008564:	4966      	ldr	r1, [pc, #408]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008566:	4313      	orrs	r3, r2
 8008568:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008578:	4b61      	ldr	r3, [pc, #388]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800857e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008586:	495e      	ldr	r1, [pc, #376]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008588:	4313      	orrs	r3, r2
 800858a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800859a:	4b59      	ldr	r3, [pc, #356]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a8:	4955      	ldr	r1, [pc, #340]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085bc:	4b50      	ldr	r3, [pc, #320]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ca:	494d      	ldr	r1, [pc, #308]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80085de:	4b48      	ldr	r3, [pc, #288]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ec:	4944      	ldr	r1, [pc, #272]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008600:	4b3f      	ldr	r3, [pc, #252]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008606:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800860e:	493c      	ldr	r1, [pc, #240]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008622:	4b37      	ldr	r3, [pc, #220]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008628:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008630:	4933      	ldr	r1, [pc, #204]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008632:	4313      	orrs	r3, r2
 8008634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008644:	4b2e      	ldr	r3, [pc, #184]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800864a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008652:	492b      	ldr	r1, [pc, #172]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008654:	4313      	orrs	r3, r2
 8008656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d011      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008666:	4b26      	ldr	r3, [pc, #152]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008674:	4922      	ldr	r1, [pc, #136]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008684:	d101      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008686:	2301      	movs	r3, #1
 8008688:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008696:	2301      	movs	r3, #1
 8008698:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086a6:	4b16      	ldr	r3, [pc, #88]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086b4:	4912      	ldr	r1, [pc, #72]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d8:	4909      	ldr	r1, [pc, #36]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d006      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 80d9 	beq.w	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086f4:	4b02      	ldr	r3, [pc, #8]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a01      	ldr	r2, [pc, #4]	@ (8008700 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086fe:	e001      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008700:	40023800 	.word	0x40023800
 8008704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008706:	f7f9 fe2b 	bl	8002360 <HAL_GetTick>
 800870a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800870c:	e008      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800870e:	f7f9 fe27 	bl	8002360 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b64      	cmp	r3, #100	@ 0x64
 800871a:	d901      	bls.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e194      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008720:	4b6c      	ldr	r3, [pc, #432]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f0      	bne.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	d021      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800873c:	2b00      	cmp	r3, #0
 800873e:	d11d      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008740:	4b64      	ldr	r3, [pc, #400]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008746:	0c1b      	lsrs	r3, r3, #16
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800874e:	4b61      	ldr	r3, [pc, #388]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008754:	0e1b      	lsrs	r3, r3, #24
 8008756:	f003 030f 	and.w	r3, r3, #15
 800875a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	019a      	lsls	r2, r3, #6
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	041b      	lsls	r3, r3, #16
 8008766:	431a      	orrs	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	061b      	lsls	r3, r3, #24
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	071b      	lsls	r3, r3, #28
 8008774:	4957      	ldr	r1, [pc, #348]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008776:	4313      	orrs	r3, r2
 8008778:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800878c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008790:	d00a      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800879a:	2b00      	cmp	r3, #0
 800879c:	d02e      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a6:	d129      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087a8:	4b4a      	ldr	r3, [pc, #296]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087ae:	0c1b      	lsrs	r3, r3, #16
 80087b0:	f003 0303 	and.w	r3, r3, #3
 80087b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087b6:	4b47      	ldr	r3, [pc, #284]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087bc:	0f1b      	lsrs	r3, r3, #28
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	019a      	lsls	r2, r3, #6
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	061b      	lsls	r3, r3, #24
 80087d6:	431a      	orrs	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	071b      	lsls	r3, r3, #28
 80087dc:	493d      	ldr	r1, [pc, #244]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80087e4:	4b3b      	ldr	r3, [pc, #236]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ea:	f023 021f 	bic.w	r2, r3, #31
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f2:	3b01      	subs	r3, #1
 80087f4:	4937      	ldr	r1, [pc, #220]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01d      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008808:	4b32      	ldr	r3, [pc, #200]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800880a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800880e:	0e1b      	lsrs	r3, r3, #24
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008816:	4b2f      	ldr	r3, [pc, #188]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800881c:	0f1b      	lsrs	r3, r3, #28
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	019a      	lsls	r2, r3, #6
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	041b      	lsls	r3, r3, #16
 8008830:	431a      	orrs	r2, r3
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	061b      	lsls	r3, r3, #24
 8008836:	431a      	orrs	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	071b      	lsls	r3, r3, #28
 800883c:	4925      	ldr	r1, [pc, #148]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d011      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	019a      	lsls	r2, r3, #6
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	041b      	lsls	r3, r3, #16
 800885c:	431a      	orrs	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	061b      	lsls	r3, r3, #24
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	071b      	lsls	r3, r3, #28
 800886c:	4919      	ldr	r1, [pc, #100]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800886e:	4313      	orrs	r3, r2
 8008870:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008874:	4b17      	ldr	r3, [pc, #92]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800887a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800887e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008880:	f7f9 fd6e 	bl	8002360 <HAL_GetTick>
 8008884:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008886:	e008      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008888:	f7f9 fd6a 	bl	8002360 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	@ 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e0d7      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800889a:	4b0e      	ldr	r3, [pc, #56]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	f040 80cd 	bne.w	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088ae:	4b09      	ldr	r3, [pc, #36]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a08      	ldr	r2, [pc, #32]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ba:	f7f9 fd51 	bl	8002360 <HAL_GetTick>
 80088be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088c0:	e00a      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088c2:	f7f9 fd4d 	bl	8002360 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b64      	cmp	r3, #100	@ 0x64
 80088ce:	d903      	bls.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e0ba      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80088d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088d8:	4b5e      	ldr	r3, [pc, #376]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e4:	d0ed      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d009      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008902:	2b00      	cmp	r3, #0
 8008904:	d02e      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d12a      	bne.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800890e:	4b51      	ldr	r3, [pc, #324]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008914:	0c1b      	lsrs	r3, r3, #16
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800891c:	4b4d      	ldr	r3, [pc, #308]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008922:	0f1b      	lsrs	r3, r3, #28
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	019a      	lsls	r2, r3, #6
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	041b      	lsls	r3, r3, #16
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	061b      	lsls	r3, r3, #24
 800893c:	431a      	orrs	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	071b      	lsls	r3, r3, #28
 8008942:	4944      	ldr	r1, [pc, #272]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008944:	4313      	orrs	r3, r2
 8008946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800894a:	4b42      	ldr	r3, [pc, #264]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008950:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008958:	3b01      	subs	r3, #1
 800895a:	021b      	lsls	r3, r3, #8
 800895c:	493d      	ldr	r1, [pc, #244]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800895e:	4313      	orrs	r3, r2
 8008960:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d022      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008978:	d11d      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800897a:	4b36      	ldr	r3, [pc, #216]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800897c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008980:	0e1b      	lsrs	r3, r3, #24
 8008982:	f003 030f 	and.w	r3, r3, #15
 8008986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008988:	4b32      	ldr	r3, [pc, #200]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800898a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800898e:	0f1b      	lsrs	r3, r3, #28
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	019a      	lsls	r2, r3, #6
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	041b      	lsls	r3, r3, #16
 80089a2:	431a      	orrs	r2, r3
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	061b      	lsls	r3, r3, #24
 80089a8:	431a      	orrs	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	071b      	lsls	r3, r3, #28
 80089ae:	4929      	ldr	r1, [pc, #164]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d028      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089c2:	4b24      	ldr	r3, [pc, #144]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c8:	0e1b      	lsrs	r3, r3, #24
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089d0:	4b20      	ldr	r3, [pc, #128]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d6:	0c1b      	lsrs	r3, r3, #16
 80089d8:	f003 0303 	and.w	r3, r3, #3
 80089dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	019a      	lsls	r2, r3, #6
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	041b      	lsls	r3, r3, #16
 80089e8:	431a      	orrs	r2, r3
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	061b      	lsls	r3, r3, #24
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	071b      	lsls	r3, r3, #28
 80089f6:	4917      	ldr	r1, [pc, #92]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80089fe:	4b15      	ldr	r3, [pc, #84]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0c:	4911      	ldr	r1, [pc, #68]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a14:	4b0f      	ldr	r3, [pc, #60]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a0e      	ldr	r2, [pc, #56]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a20:	f7f9 fc9e 	bl	8002360 <HAL_GetTick>
 8008a24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a26:	e008      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a28:	f7f9 fc9a 	bl	8002360 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b64      	cmp	r3, #100	@ 0x64
 8008a34:	d901      	bls.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e007      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a3a:	4b06      	ldr	r3, [pc, #24]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a46:	d1ef      	bne.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3720      	adds	r7, #32
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	40023800 	.word	0x40023800

08008a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e09d      	b.n	8008ba6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d108      	bne.n	8008a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a7a:	d009      	beq.n	8008a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	61da      	str	r2, [r3, #28]
 8008a82:	e005      	b.n	8008a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d106      	bne.n	8008ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7f8 fc18 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ad0:	d902      	bls.n	8008ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	e002      	b.n	8008ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008ae6:	d007      	beq.n	8008af8 <HAL_SPI_Init+0xa0>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008af0:	d002      	beq.n	8008af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0302 	and.w	r3, r3, #2
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b30:	431a      	orrs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b3a:	ea42 0103 	orr.w	r1, r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	0c1b      	lsrs	r3, r3, #16
 8008b54:	f003 0204 	and.w	r2, r3, #4
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b66:	f003 0308 	and.w	r3, r3, #8
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b74:	ea42 0103 	orr.w	r1, r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d001      	beq.n	8008bce <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e0d4      	b.n	8008d78 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <HAL_SPI_Transmit_DMA+0x2a>
 8008bd4:	88fb      	ldrh	r3, [r7, #6]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e0cc      	b.n	8008d78 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_SPI_Transmit_DMA+0x3c>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e0c5      	b.n	8008d78 <HAL_SPI_Transmit_DMA+0x1c8>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	88fa      	ldrh	r2, [r7, #6]
 8008c0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	88fa      	ldrh	r2, [r7, #6]
 8008c12:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c3e:	d10f      	bne.n	8008c60 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c64:	4a46      	ldr	r2, [pc, #280]	@ (8008d80 <HAL_SPI_Transmit_DMA+0x1d0>)
 8008c66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c6c:	4a45      	ldr	r2, [pc, #276]	@ (8008d84 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008c6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c74:	4a44      	ldr	r2, [pc, #272]	@ (8008d88 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008c76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c8e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c98:	d82d      	bhi.n	8008cf6 <HAL_SPI_Transmit_DMA+0x146>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ca4:	d127      	bne.n	8008cf6 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10f      	bne.n	8008cd4 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cc2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cd2:	e010      	b.n	8008cf6 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ce2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	085b      	lsrs	r3, r3, #1
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3301      	adds	r3, #1
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	330c      	adds	r3, #12
 8008d06:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d0c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d0e:	f7fa fb77 	bl	8003400 <HAL_DMA_Start_IT>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d1c:	f043 0210 	orr.w	r2, r3, #16
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e023      	b.n	8008d78 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3a:	2b40      	cmp	r3, #64	@ 0x40
 8008d3c:	d007      	beq.n	8008d4e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d4c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0220 	orr.w	r2, r2, #32
 8008d64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0202 	orr.w	r2, r2, #2
 8008d74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	08009961 	.word	0x08009961
 8008d84:	0800977d 	.word	0x0800977d
 8008d88:	080099b5 	.word	0x080099b5

08008d8c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	4613      	mov	r3, r2
 8008d98:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d001      	beq.n	8008daa <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008da6:	2302      	movs	r3, #2
 8008da8:	e105      	b.n	8008fb6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <HAL_SPI_Receive_DMA+0x2a>
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e0fd      	b.n	8008fb6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d110      	bne.n	8008de4 <HAL_SPI_Receive_DMA+0x58>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dca:	d10b      	bne.n	8008de4 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2204      	movs	r2, #4
 8008dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008dd4:	88fb      	ldrh	r3, [r7, #6]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 f8f6 	bl	8008fcc <HAL_SPI_TransmitReceive_DMA>
 8008de0:	4603      	mov	r3, r0
 8008de2:	e0e8      	b.n	8008fb6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d101      	bne.n	8008df2 <HAL_SPI_Receive_DMA+0x66>
 8008dee:	2302      	movs	r3, #2
 8008df0:	e0e1      	b.n	8008fb6 <HAL_SPI_Receive_DMA+0x22a>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	88fa      	ldrh	r2, [r7, #6]
 8008e12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	88fa      	ldrh	r2, [r7, #6]
 8008e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e3e:	d10f      	bne.n	8008e60 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e6e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e78:	d908      	bls.n	8008e8c <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	e042      	b.n	8008f12 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e9a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ea6:	d134      	bne.n	8008f12 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008eb6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d111      	bne.n	8008eec <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ed6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	085b      	lsrs	r3, r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008eea:	e012      	b.n	8008f12 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008efa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	085b      	lsrs	r3, r3, #1
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	3301      	adds	r3, #1
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f16:	4a2a      	ldr	r2, [pc, #168]	@ (8008fc0 <HAL_SPI_Receive_DMA+0x234>)
 8008f18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1e:	4a29      	ldr	r2, [pc, #164]	@ (8008fc4 <HAL_SPI_Receive_DMA+0x238>)
 8008f20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f26:	4a28      	ldr	r2, [pc, #160]	@ (8008fc8 <HAL_SPI_Receive_DMA+0x23c>)
 8008f28:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f2e:	2200      	movs	r2, #0
 8008f30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	330c      	adds	r3, #12
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f42:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f4c:	f7fa fa58 	bl	8003400 <HAL_DMA_Start_IT>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00b      	beq.n	8008f6e <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f5a:	f043 0210 	orr.w	r2, r3, #16
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e023      	b.n	8008fb6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f78:	2b40      	cmp	r3, #64	@ 0x40
 8008f7a:	d007      	beq.n	8008f8c <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f8a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0220 	orr.w	r2, r2, #32
 8008fa2:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0201 	orr.w	r2, r2, #1
 8008fb2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0800997d 	.word	0x0800997d
 8008fc4:	08009825 	.word	0x08009825
 8008fc8:	080099b5 	.word	0x080099b5

08008fcc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fe0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d00c      	beq.n	8009008 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ff4:	d106      	bne.n	8009004 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <HAL_SPI_TransmitReceive_DMA+0x38>
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	2b04      	cmp	r3, #4
 8009002:	d001      	beq.n	8009008 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009004:	2302      	movs	r3, #2
 8009006:	e158      	b.n	80092ba <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009014:	887b      	ldrh	r3, [r7, #2]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e14d      	b.n	80092ba <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_SPI_TransmitReceive_DMA+0x60>
 8009028:	2302      	movs	r3, #2
 800902a:	e146      	b.n	80092ba <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b04      	cmp	r3, #4
 800903e:	d003      	beq.n	8009048 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2205      	movs	r2, #5
 8009044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	887a      	ldrh	r2, [r7, #2]
 8009058:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	887a      	ldrh	r2, [r7, #2]
 800905e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	887a      	ldrh	r2, [r7, #2]
 800906a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	887a      	ldrh	r2, [r7, #2]
 8009072:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009090:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800909a:	d908      	bls.n	80090ae <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090aa:	605a      	str	r2, [r3, #4]
 80090ac:	e06f      	b.n	800918e <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090bc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090c8:	d126      	bne.n	8009118 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10f      	bne.n	80090f6 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80090e4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80090f4:	e010      	b.n	8009118 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009104:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800910a:	b29b      	uxth	r3, r3
 800910c:	085b      	lsrs	r3, r3, #1
 800910e:	b29b      	uxth	r3, r3
 8009110:	3301      	adds	r3, #1
 8009112:	b29a      	uxth	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009122:	d134      	bne.n	800918e <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009132:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800913a:	b29b      	uxth	r3, r3
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b00      	cmp	r3, #0
 8009142:	d111      	bne.n	8009168 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009152:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800915a:	b29b      	uxth	r3, r3
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	b29a      	uxth	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009166:	e012      	b.n	800918e <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009176:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800917e:	b29b      	uxth	r3, r3
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	b29b      	uxth	r3, r3
 8009184:	3301      	adds	r3, #1
 8009186:	b29a      	uxth	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b04      	cmp	r3, #4
 8009198:	d108      	bne.n	80091ac <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800919e:	4a49      	ldr	r2, [pc, #292]	@ (80092c4 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80091a0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a6:	4a48      	ldr	r2, [pc, #288]	@ (80092c8 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80091a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80091aa:	e007      	b.n	80091bc <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b0:	4a46      	ldr	r2, [pc, #280]	@ (80092cc <HAL_SPI_TransmitReceive_DMA+0x300>)
 80091b2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b8:	4a45      	ldr	r2, [pc, #276]	@ (80092d0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80091ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c0:	4a44      	ldr	r2, [pc, #272]	@ (80092d4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80091c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c8:	2200      	movs	r2, #0
 80091ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	4619      	mov	r1, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091dc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091e6:	f7fa f90b 	bl	8003400 <HAL_DMA_Start_IT>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091f4:	f043 0210 	orr.w	r2, r3, #16
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e058      	b.n	80092ba <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800921c:	2200      	movs	r2, #0
 800921e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009224:	2200      	movs	r2, #0
 8009226:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800922c:	2200      	movs	r2, #0
 800922e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009234:	2200      	movs	r2, #0
 8009236:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009240:	4619      	mov	r1, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	330c      	adds	r3, #12
 8009248:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800924e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009250:	f7fa f8d6 	bl	8003400 <HAL_DMA_Start_IT>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00b      	beq.n	8009272 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800925e:	f043 0210 	orr.w	r2, r3, #16
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e023      	b.n	80092ba <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800927c:	2b40      	cmp	r3, #64	@ 0x40
 800927e:	d007      	beq.n	8009290 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800928e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0220 	orr.w	r2, r2, #32
 80092a6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0202 	orr.w	r2, r2, #2
 80092b6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	0800997d 	.word	0x0800997d
 80092c8:	08009825 	.word	0x08009825
 80092cc:	08009999 	.word	0x08009999
 80092d0:	080098cf 	.word	0x080098cf
 80092d4:	080099b5 	.word	0x080099b5

080092d8 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	@ 0x28
 80092dc:	af02      	add	r7, sp, #8
 80092de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80092e4:	4b88      	ldr	r3, [pc, #544]	@ (8009508 <HAL_SPI_Abort+0x230>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a88      	ldr	r2, [pc, #544]	@ (800950c <HAL_SPI_Abort+0x234>)
 80092ea:	fba2 2303 	umull	r2, r3, r2, r3
 80092ee:	0a5b      	lsrs	r3, r3, #9
 80092f0:	2264      	movs	r2, #100	@ 0x64
 80092f2:	fb02 f303 	mul.w	r3, r2, r3
 80092f6:	617b      	str	r3, [r7, #20]
  count = resetcount;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0220 	bic.w	r2, r2, #32
 800930a:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009316:	2b80      	cmp	r3, #128	@ 0x80
 8009318:	d117      	bne.n	800934a <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a7c      	ldr	r2, [pc, #496]	@ (8009510 <HAL_SPI_Abort+0x238>)
 800931e:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800932a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009332:	e008      	b.n	8009346 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	3b01      	subs	r3, #1
 8009338:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b07      	cmp	r3, #7
 8009344:	d1ec      	bne.n	8009320 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009354:	2b40      	cmp	r3, #64	@ 0x40
 8009356:	d117      	bne.n	8009388 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a6e      	ldr	r2, [pc, #440]	@ (8009514 <HAL_SPI_Abort+0x23c>)
 800935c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d106      	bne.n	8009372 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009368:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009370:	e008      	b.n	8009384 <HAL_SPI_Abort+0xac>
      }
      count--;
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	3b01      	subs	r3, #1
 8009376:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b07      	cmp	r3, #7
 8009382:	d1ec      	bne.n	800935e <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b02      	cmp	r3, #2
 8009394:	d141      	bne.n	800941a <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800939a:	2b00      	cmp	r3, #0
 800939c:	d03d      	beq.n	800941a <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a2:	2200      	movs	r2, #0
 80093a4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fa f888 	bl	80034c0 <HAL_DMA_Abort>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2240      	movs	r2, #64	@ 0x40
 80093ba:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0202 	bic.w	r2, r2, #2
 80093ca:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80093cc:	f7f8 ffc8 	bl	8002360 <HAL_GetTick>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	2164      	movs	r1, #100	@ 0x64
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fcbc 	bl	8009d54 <SPI_EndRxTxTransaction>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2240      	movs	r2, #64	@ 0x40
 80093e6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093f6:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80093f8:	f7f8 ffb2 	bl	8002360 <HAL_GetTick>
 80093fc:	4603      	mov	r3, r0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	2364      	movs	r3, #100	@ 0x64
 8009402:	2200      	movs	r2, #0
 8009404:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fb91 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2240      	movs	r2, #64	@ 0x40
 8009418:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b01      	cmp	r3, #1
 8009426:	d143      	bne.n	80094b0 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800942c:	2b00      	cmp	r3, #0
 800942e:	d03f      	beq.n	80094b0 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009434:	2200      	movs	r2, #0
 8009436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800943c:	4618      	mov	r0, r3
 800943e:	f7fa f83f 	bl	80034c0 <HAL_DMA_Abort>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2240      	movs	r2, #64	@ 0x40
 800944c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800945c:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800945e:	f7f8 ff7f 	bl	8002360 <HAL_GetTick>
 8009462:	4603      	mov	r3, r0
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	2364      	movs	r3, #100	@ 0x64
 8009468:	2200      	movs	r2, #0
 800946a:	2180      	movs	r1, #128	@ 0x80
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fad7 	bl	8009a20 <SPI_WaitFlagStateUntilTimeout>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2240      	movs	r2, #64	@ 0x40
 800947c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800947e:	f7f8 ff6f 	bl	8002360 <HAL_GetTick>
 8009482:	4603      	mov	r3, r0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	2364      	movs	r3, #100	@ 0x64
 8009488:	2200      	movs	r2, #0
 800948a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fb4e 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2240      	movs	r2, #64	@ 0x40
 800949e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0201 	bic.w	r2, r2, #1
 80094ae:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c2:	2b40      	cmp	r3, #64	@ 0x40
 80094c4:	d102      	bne.n	80094cc <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	77fb      	strb	r3, [r7, #31]
 80094ca:	e002      	b.n	80094d2 <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094d2:	2300      	movs	r3, #0
 80094d4:	613b      	str	r3, [r7, #16]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	613b      	str	r3, [r7, #16]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	613b      	str	r3, [r7, #16]
 80094e6:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	60fb      	str	r3, [r7, #12]
 80094f4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 80094fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20000000 	.word	0x20000000
 800950c:	057619f1 	.word	0x057619f1
 8009510:	08009ee9 	.word	0x08009ee9
 8009514:	08009e29 	.word	0x08009e29

08009518 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	099b      	lsrs	r3, r3, #6
 8009534:	f003 0301 	and.w	r3, r3, #1
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10f      	bne.n	800955c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	099b      	lsrs	r3, r3, #6
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d004      	beq.n	800955c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
    return;
 800955a:	e0d7      	b.n	800970c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	085b      	lsrs	r3, r3, #1
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <HAL_SPI_IRQHandler+0x66>
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	09db      	lsrs	r3, r3, #7
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d004      	beq.n	800957e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4798      	blx	r3
    return;
 800957c:	e0c6      	b.n	800970c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	095b      	lsrs	r3, r3, #5
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10c      	bne.n	80095a4 <HAL_SPI_IRQHandler+0x8c>
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	099b      	lsrs	r3, r3, #6
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	0a1b      	lsrs	r3, r3, #8
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 80b4 	beq.w	800970c <HAL_SPI_IRQHandler+0x1f4>
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	095b      	lsrs	r3, r3, #5
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 80ad 	beq.w	800970c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	099b      	lsrs	r3, r3, #6
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d023      	beq.n	8009606 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d011      	beq.n	80095ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ce:	f043 0204 	orr.w	r2, r3, #4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	e00b      	b.n	8009606 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095ee:	2300      	movs	r3, #0
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	613b      	str	r3, [r7, #16]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	693b      	ldr	r3, [r7, #16]
        return;
 8009604:	e082      	b.n	800970c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	095b      	lsrs	r3, r3, #5
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d014      	beq.n	800963c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009616:	f043 0201 	orr.w	r2, r3, #1
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	60fb      	str	r3, [r7, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00c      	beq.n	8009662 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800964c:	f043 0208 	orr.w	r2, r3, #8
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009654:	2300      	movs	r3, #0
 8009656:	60bb      	str	r3, [r7, #8]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	60bb      	str	r3, [r7, #8]
 8009660:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009666:	2b00      	cmp	r3, #0
 8009668:	d04f      	beq.n	800970a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009678:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <HAL_SPI_IRQHandler+0x17e>
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	d034      	beq.n	8009700 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0203 	bic.w	r2, r2, #3
 80096a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d011      	beq.n	80096d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096b2:	4a18      	ldr	r2, [pc, #96]	@ (8009714 <HAL_SPI_IRQHandler+0x1fc>)
 80096b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7f9 ff70 	bl	80035a0 <HAL_DMA_Abort_IT>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d016      	beq.n	8009708 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096de:	4a0d      	ldr	r2, [pc, #52]	@ (8009714 <HAL_SPI_IRQHandler+0x1fc>)
 80096e0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7f9 ff5a 	bl	80035a0 <HAL_DMA_Abort_IT>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80096fe:	e003      	b.n	8009708 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f831 	bl	8009768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009706:	e000      	b.n	800970a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009708:	bf00      	nop
    return;
 800970a:	bf00      	nop
  }
}
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	080099f5 	.word	0x080099f5

08009718 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009788:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800978a:	f7f8 fde9 	bl	8002360 <HAL_GetTick>
 800978e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800979a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800979e:	d03b      	beq.n	8009818 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 0220 	bic.w	r2, r2, #32
 80097ae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0202 	bic.w	r2, r2, #2
 80097be:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	2164      	movs	r1, #100	@ 0x64
 80097c4:	6978      	ldr	r0, [r7, #20]
 80097c6:	f000 fac5 	bl	8009d54 <SPI_EndRxTxTransaction>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d005      	beq.n	80097dc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097d4:	f043 0220 	orr.w	r2, r3, #32
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097e4:	2300      	movs	r3, #0
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	60fb      	str	r3, [r7, #12]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2200      	movs	r2, #0
 80097fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009810:	6978      	ldr	r0, [r7, #20]
 8009812:	f7ff ffa9 	bl	8009768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009816:	e002      	b.n	800981e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009818:	6978      	ldr	r0, [r7, #20]
 800981a:	f016 f96b 	bl	801faf4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009830:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009832:	f7f8 fd95 	bl	8002360 <HAL_GetTick>
 8009836:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009846:	d03c      	beq.n	80098c2 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 0220 	bic.w	r2, r2, #32
 8009856:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10d      	bne.n	800987c <SPI_DMAReceiveCplt+0x58>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009868:	d108      	bne.n	800987c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0203 	bic.w	r2, r2, #3
 8009878:	605a      	str	r2, [r3, #4]
 800987a:	e007      	b.n	800988c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0201 	bic.w	r2, r2, #1
 800988a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	2164      	movs	r1, #100	@ 0x64
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f9e3 	bl	8009c5c <SPI_EndRxTransaction>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2220      	movs	r2, #32
 80098a0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f7ff ff54 	bl	8009768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80098c0:	e002      	b.n	80098c8 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f016 f938 	bl	801fb38 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098da:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098dc:	f7f8 fd40 	bl	8002360 <HAL_GetTick>
 80098e0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f0:	d030      	beq.n	8009954 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0220 	bic.w	r2, r2, #32
 8009900:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	2164      	movs	r1, #100	@ 0x64
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fa24 	bl	8009d54 <SPI_EndRxTxTransaction>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009916:	f043 0220 	orr.w	r2, r3, #32
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0203 	bic.w	r2, r2, #3
 800992c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7ff ff0b 	bl	8009768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009952:	e002      	b.n	800995a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7ff fedf 	bl	8009718 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7ff fedc 	bl	800972c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009988:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff fed8 	bl	8009740 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009990:	bf00      	nop
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f7ff fed4 	bl	8009754 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0203 	bic.w	r2, r2, #3
 80099d0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099d6:	f043 0210 	orr.w	r2, r3, #16
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff febe 	bl	8009768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099ec:	bf00      	nop
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff fea9 	bl	8009768 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a16:	bf00      	nop
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a30:	f7f8 fc96 	bl	8002360 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a40:	f7f8 fc8e 	bl	8002360 <HAL_GetTick>
 8009a44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a46:	4b39      	ldr	r3, [pc, #228]	@ (8009b2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	015b      	lsls	r3, r3, #5
 8009a4c:	0d1b      	lsrs	r3, r3, #20
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	fb02 f303 	mul.w	r3, r2, r3
 8009a54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a56:	e055      	b.n	8009b04 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a5e:	d051      	beq.n	8009b04 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a60:	f7f8 fc7e 	bl	8002360 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	69fa      	ldr	r2, [r7, #28]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d902      	bls.n	8009a76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d13d      	bne.n	8009af2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a8e:	d111      	bne.n	8009ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a98:	d004      	beq.n	8009aa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa2:	d107      	bne.n	8009ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009abc:	d10f      	bne.n	8009ade <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009adc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e018      	b.n	8009b24 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	61fb      	str	r3, [r7, #28]
 8009afc:	e002      	b.n	8009b04 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	689a      	ldr	r2, [r3, #8]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	bf0c      	ite	eq
 8009b14:	2301      	moveq	r3, #1
 8009b16:	2300      	movne	r3, #0
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d19a      	bne.n	8009a58 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3720      	adds	r7, #32
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20000000 	.word	0x20000000

08009b30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08a      	sub	sp, #40	@ 0x28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009b42:	f7f8 fc0d 	bl	8002360 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	683a      	ldr	r2, [r7, #0]
 8009b4e:	4413      	add	r3, r2
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009b52:	f7f8 fc05 	bl	8002360 <HAL_GetTick>
 8009b56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	330c      	adds	r3, #12
 8009b5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009b60:	4b3d      	ldr	r3, [pc, #244]	@ (8009c58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	00da      	lsls	r2, r3, #3
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	0d1b      	lsrs	r3, r3, #20
 8009b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b72:	fb02 f303 	mul.w	r3, r2, r3
 8009b76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009b78:	e061      	b.n	8009c3e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009b80:	d107      	bne.n	8009b92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d104      	bne.n	8009b92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b98:	d051      	beq.n	8009c3e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b9a:	f7f8 fbe1 	bl	8002360 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d902      	bls.n	8009bb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d13d      	bne.n	8009c2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009bbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bc8:	d111      	bne.n	8009bee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bd2:	d004      	beq.n	8009bde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bdc:	d107      	bne.n	8009bee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bf6:	d10f      	bne.n	8009c18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e011      	b.n	8009c50 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c36:	e002      	b.n	8009c3e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689a      	ldr	r2, [r3, #8]
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	4013      	ands	r3, r2
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d195      	bne.n	8009b7a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3728      	adds	r7, #40	@ 0x28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20000000 	.word	0x20000000

08009c5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c70:	d111      	bne.n	8009c96 <SPI_EndRxTransaction+0x3a>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c7a:	d004      	beq.n	8009c86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c84:	d107      	bne.n	8009c96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c9e:	d112      	bne.n	8009cc6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2180      	movs	r1, #128	@ 0x80
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7ff feb8 	bl	8009a20 <SPI_WaitFlagStateUntilTimeout>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d021      	beq.n	8009cfa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cba:	f043 0220 	orr.w	r2, r3, #32
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e03d      	b.n	8009d42 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009cc6:	4b21      	ldr	r3, [pc, #132]	@ (8009d4c <SPI_EndRxTransaction+0xf0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a21      	ldr	r2, [pc, #132]	@ (8009d50 <SPI_EndRxTransaction+0xf4>)
 8009ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd0:	0d5b      	lsrs	r3, r3, #21
 8009cd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009cd6:	fb02 f303 	mul.w	r3, r2, r3
 8009cda:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cf2:	2b80      	cmp	r3, #128	@ 0x80
 8009cf4:	d0f2      	beq.n	8009cdc <SPI_EndRxTransaction+0x80>
 8009cf6:	e000      	b.n	8009cfa <SPI_EndRxTransaction+0x9e>
        break;
 8009cf8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d02:	d11d      	bne.n	8009d40 <SPI_EndRxTransaction+0xe4>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d0c:	d004      	beq.n	8009d18 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d16:	d113      	bne.n	8009d40 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f7ff ff03 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d007      	beq.n	8009d40 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d34:	f043 0220 	orr.w	r2, r3, #32
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e000      	b.n	8009d42 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000000 	.word	0x20000000
 8009d50:	165e9f81 	.word	0x165e9f81

08009d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b088      	sub	sp, #32
 8009d58:	af02      	add	r7, sp, #8
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff fedf 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d007      	beq.n	8009d88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d7c:	f043 0220 	orr.w	r2, r3, #32
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e046      	b.n	8009e16 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d88:	4b25      	ldr	r3, [pc, #148]	@ (8009e20 <SPI_EndRxTxTransaction+0xcc>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a25      	ldr	r2, [pc, #148]	@ (8009e24 <SPI_EndRxTxTransaction+0xd0>)
 8009d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d92:	0d5b      	lsrs	r3, r3, #21
 8009d94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d98:	fb02 f303 	mul.w	r3, r2, r3
 8009d9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009da6:	d112      	bne.n	8009dce <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2200      	movs	r2, #0
 8009db0:	2180      	movs	r1, #128	@ 0x80
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7ff fe34 	bl	8009a20 <SPI_WaitFlagStateUntilTimeout>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d016      	beq.n	8009dec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dc2:	f043 0220 	orr.w	r2, r3, #32
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e023      	b.n	8009e16 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00a      	beq.n	8009dea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009de4:	2b80      	cmp	r3, #128	@ 0x80
 8009de6:	d0f2      	beq.n	8009dce <SPI_EndRxTxTransaction+0x7a>
 8009de8:	e000      	b.n	8009dec <SPI_EndRxTxTransaction+0x98>
        break;
 8009dea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7ff fe99 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d007      	beq.n	8009e14 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e08:	f043 0220 	orr.w	r2, r3, #32
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e000      	b.n	8009e16 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000000 	.word	0x20000000
 8009e24:	165e9f81 	.word	0x165e9f81

08009e28 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e3e:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009e40:	4b27      	ldr	r3, [pc, #156]	@ (8009ee0 <SPI_AbortRx_ISR+0xb8>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a27      	ldr	r2, [pc, #156]	@ (8009ee4 <SPI_AbortRx_ISR+0xbc>)
 8009e46:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4a:	0a5b      	lsrs	r3, r3, #9
 8009e4c:	2264      	movs	r2, #100	@ 0x64
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e62:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d106      	bne.n	8009e78 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009e76:	e009      	b.n	8009e8c <SPI_AbortRx_ISR+0x64>
    }
    count--;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e88:	2b40      	cmp	r3, #64	@ 0x40
 8009e8a:	d0eb      	beq.n	8009e64 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009e8c:	f7f8 fa68 	bl	8002360 <HAL_GetTick>
 8009e90:	4603      	mov	r3, r0
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	2364      	movs	r3, #100	@ 0x64
 8009e96:	2200      	movs	r2, #0
 8009e98:	2180      	movs	r1, #128	@ 0x80
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff fdc0 	bl	8009a20 <SPI_WaitFlagStateUntilTimeout>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2240      	movs	r2, #64	@ 0x40
 8009eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009eac:	f7f8 fa58 	bl	8002360 <HAL_GetTick>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	2364      	movs	r3, #100	@ 0x64
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff fe37 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2240      	movs	r2, #64	@ 0x40
 8009ecc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2207      	movs	r2, #7
 8009ed2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000000 	.word	0x20000000
 8009ee4:	057619f1 	.word	0x057619f1

08009ee8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af02      	add	r7, sp, #8
 8009eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009ef0:	4b4c      	ldr	r3, [pc, #304]	@ (800a024 <SPI_AbortTx_ISR+0x13c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a4c      	ldr	r2, [pc, #304]	@ (800a028 <SPI_AbortTx_ISR+0x140>)
 8009ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8009efa:	0a5b      	lsrs	r3, r3, #9
 8009efc:	2264      	movs	r2, #100	@ 0x64
 8009efe:	fb02 f303 	mul.w	r3, r2, r3
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f12:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009f26:	e009      	b.n	8009f3c <SPI_AbortTx_ISR+0x54>
    }
    count--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f38:	2b80      	cmp	r3, #128	@ 0x80
 8009f3a:	d0eb      	beq.n	8009f14 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009f3c:	f7f8 fa10 	bl	8002360 <HAL_GetTick>
 8009f40:	4603      	mov	r3, r0
 8009f42:	461a      	mov	r2, r3
 8009f44:	2164      	movs	r1, #100	@ 0x64
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff ff04 	bl	8009d54 <SPI_EndRxTxTransaction>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d002      	beq.n	8009f58 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2240      	movs	r2, #64	@ 0x40
 8009f56:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f66:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009f68:	f7f8 f9fa 	bl	8002360 <HAL_GetTick>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	2364      	movs	r3, #100	@ 0x64
 8009f72:	2200      	movs	r2, #0
 8009f74:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff fdd9 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2240      	movs	r2, #64	@ 0x40
 8009f88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f94:	2b40      	cmp	r3, #64	@ 0x40
 8009f96:	d13c      	bne.n	800a012 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fa6:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009fba:	e009      	b.n	8009fd0 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fcc:	2b40      	cmp	r3, #64	@ 0x40
 8009fce:	d0eb      	beq.n	8009fa8 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009fd0:	f7f8 f9c6 	bl	8002360 <HAL_GetTick>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	2364      	movs	r3, #100	@ 0x64
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2180      	movs	r1, #128	@ 0x80
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff fd1e 	bl	8009a20 <SPI_WaitFlagStateUntilTimeout>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2240      	movs	r2, #64	@ 0x40
 8009fee:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009ff0:	f7f8 f9b6 	bl	8002360 <HAL_GetTick>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	2364      	movs	r3, #100	@ 0x64
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff fd95 	bl	8009b30 <SPI_WaitFifoStateUntilTimeout>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2240      	movs	r2, #64	@ 0x40
 800a010:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2207      	movs	r2, #7
 800a016:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800a01a:	bf00      	nop
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	20000000 	.word	0x20000000
 800a028:	057619f1 	.word	0x057619f1

0800a02c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e049      	b.n	800a0d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d106      	bne.n	800a058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7f7 fdae 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3304      	adds	r3, #4
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f000 fb40 	bl	800a6f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d001      	beq.n	800a0f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e04c      	b.n	800a18e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a26      	ldr	r2, [pc, #152]	@ (800a19c <HAL_TIM_Base_Start+0xc0>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d022      	beq.n	800a14c <HAL_TIM_Base_Start+0x70>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a10e:	d01d      	beq.n	800a14c <HAL_TIM_Base_Start+0x70>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a22      	ldr	r2, [pc, #136]	@ (800a1a0 <HAL_TIM_Base_Start+0xc4>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d018      	beq.n	800a14c <HAL_TIM_Base_Start+0x70>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a21      	ldr	r2, [pc, #132]	@ (800a1a4 <HAL_TIM_Base_Start+0xc8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d013      	beq.n	800a14c <HAL_TIM_Base_Start+0x70>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a1f      	ldr	r2, [pc, #124]	@ (800a1a8 <HAL_TIM_Base_Start+0xcc>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00e      	beq.n	800a14c <HAL_TIM_Base_Start+0x70>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a1e      	ldr	r2, [pc, #120]	@ (800a1ac <HAL_TIM_Base_Start+0xd0>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d009      	beq.n	800a14c <HAL_TIM_Base_Start+0x70>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a1c      	ldr	r2, [pc, #112]	@ (800a1b0 <HAL_TIM_Base_Start+0xd4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d004      	beq.n	800a14c <HAL_TIM_Base_Start+0x70>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a1b      	ldr	r2, [pc, #108]	@ (800a1b4 <HAL_TIM_Base_Start+0xd8>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d115      	bne.n	800a178 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	4b19      	ldr	r3, [pc, #100]	@ (800a1b8 <HAL_TIM_Base_Start+0xdc>)
 800a154:	4013      	ands	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b06      	cmp	r3, #6
 800a15c:	d015      	beq.n	800a18a <HAL_TIM_Base_Start+0xae>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a164:	d011      	beq.n	800a18a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f042 0201 	orr.w	r2, r2, #1
 800a174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a176:	e008      	b.n	800a18a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	e000      	b.n	800a18c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	40010000 	.word	0x40010000
 800a1a0:	40000400 	.word	0x40000400
 800a1a4:	40000800 	.word	0x40000800
 800a1a8:	40000c00 	.word	0x40000c00
 800a1ac:	40010400 	.word	0x40010400
 800a1b0:	40014000 	.word	0x40014000
 800a1b4:	40001800 	.word	0x40001800
 800a1b8:	00010007 	.word	0x00010007

0800a1bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6a1a      	ldr	r2, [r3, #32]
 800a1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a208 <HAL_TIM_Base_Stop+0x4c>)
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10f      	bne.n	800a1f2 <HAL_TIM_Base_Stop+0x36>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6a1a      	ldr	r2, [r3, #32]
 800a1d8:	f240 4344 	movw	r3, #1092	@ 0x444
 800a1dc:	4013      	ands	r3, r2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d107      	bne.n	800a1f2 <HAL_TIM_Base_Stop+0x36>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 0201 	bic.w	r2, r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	00111111 	.word	0x00111111

0800a20c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d001      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e054      	b.n	800a2ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68da      	ldr	r2, [r3, #12]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0201 	orr.w	r2, r2, #1
 800a23a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a26      	ldr	r2, [pc, #152]	@ (800a2dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d022      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0x80>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a24e:	d01d      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0x80>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a22      	ldr	r2, [pc, #136]	@ (800a2e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d018      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0x80>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a21      	ldr	r2, [pc, #132]	@ (800a2e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d013      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0x80>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a1f      	ldr	r2, [pc, #124]	@ (800a2e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d00e      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0x80>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a1e      	ldr	r2, [pc, #120]	@ (800a2ec <HAL_TIM_Base_Start_IT+0xe0>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d009      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0x80>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a1c      	ldr	r2, [pc, #112]	@ (800a2f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d004      	beq.n	800a28c <HAL_TIM_Base_Start_IT+0x80>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a1b      	ldr	r2, [pc, #108]	@ (800a2f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d115      	bne.n	800a2b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	4b19      	ldr	r3, [pc, #100]	@ (800a2f8 <HAL_TIM_Base_Start_IT+0xec>)
 800a294:	4013      	ands	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b06      	cmp	r3, #6
 800a29c:	d015      	beq.n	800a2ca <HAL_TIM_Base_Start_IT+0xbe>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2a4:	d011      	beq.n	800a2ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f042 0201 	orr.w	r2, r2, #1
 800a2b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2b6:	e008      	b.n	800a2ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0201 	orr.w	r2, r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]
 800a2c8:	e000      	b.n	800a2cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	40010000 	.word	0x40010000
 800a2e0:	40000400 	.word	0x40000400
 800a2e4:	40000800 	.word	0x40000800
 800a2e8:	40000c00 	.word	0x40000c00
 800a2ec:	40010400 	.word	0x40010400
 800a2f0:	40014000 	.word	0x40014000
 800a2f4:	40001800 	.word	0x40001800
 800a2f8:	00010007 	.word	0x00010007

0800a2fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d020      	beq.n	800a360 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f003 0302 	and.w	r3, r3, #2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01b      	beq.n	800a360 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f06f 0202 	mvn.w	r2, #2
 800a330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	f003 0303 	and.w	r3, r3, #3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d003      	beq.n	800a34e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f9b4 	bl	800a6b4 <HAL_TIM_IC_CaptureCallback>
 800a34c:	e005      	b.n	800a35a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f9a6 	bl	800a6a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f9b7 	bl	800a6c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	2b00      	cmp	r3, #0
 800a368:	d020      	beq.n	800a3ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f003 0304 	and.w	r3, r3, #4
 800a370:	2b00      	cmp	r3, #0
 800a372:	d01b      	beq.n	800a3ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f06f 0204 	mvn.w	r2, #4
 800a37c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2202      	movs	r2, #2
 800a382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f98e 	bl	800a6b4 <HAL_TIM_IC_CaptureCallback>
 800a398:	e005      	b.n	800a3a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f980 	bl	800a6a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f991 	bl	800a6c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	f003 0308 	and.w	r3, r3, #8
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d020      	beq.n	800a3f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d01b      	beq.n	800a3f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f06f 0208 	mvn.w	r2, #8
 800a3c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2204      	movs	r2, #4
 800a3ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	f003 0303 	and.w	r3, r3, #3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f968 	bl	800a6b4 <HAL_TIM_IC_CaptureCallback>
 800a3e4:	e005      	b.n	800a3f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f95a 	bl	800a6a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f96b 	bl	800a6c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d020      	beq.n	800a444 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01b      	beq.n	800a444 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f06f 0210 	mvn.w	r2, #16
 800a414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2208      	movs	r2, #8
 800a41a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f942 	bl	800a6b4 <HAL_TIM_IC_CaptureCallback>
 800a430:	e005      	b.n	800a43e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f934 	bl	800a6a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f945 	bl	800a6c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00c      	beq.n	800a468 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	d007      	beq.n	800a468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f06f 0201 	mvn.w	r2, #1
 800a460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7f6 feae 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d104      	bne.n	800a47c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00c      	beq.n	800a496 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a482:	2b00      	cmp	r3, #0
 800a484:	d007      	beq.n	800a496 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fb05 	bl	800aaa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00c      	beq.n	800a4ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d007      	beq.n	800a4ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fafd 	bl	800aab4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00c      	beq.n	800a4de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d007      	beq.n	800a4de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f8ff 	bl	800a6dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	f003 0320 	and.w	r3, r3, #32
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00c      	beq.n	800a502 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f06f 0220 	mvn.w	r2, #32
 800a4fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fac5 	bl	800aa8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a520:	2b01      	cmp	r3, #1
 800a522:	d101      	bne.n	800a528 <HAL_TIM_ConfigClockSource+0x1c>
 800a524:	2302      	movs	r3, #2
 800a526:	e0b4      	b.n	800a692 <HAL_TIM_ConfigClockSource+0x186>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2202      	movs	r2, #2
 800a534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	4b56      	ldr	r3, [pc, #344]	@ (800a69c <HAL_TIM_ConfigClockSource+0x190>)
 800a544:	4013      	ands	r3, r2
 800a546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a54e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a560:	d03e      	beq.n	800a5e0 <HAL_TIM_ConfigClockSource+0xd4>
 800a562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a566:	f200 8087 	bhi.w	800a678 <HAL_TIM_ConfigClockSource+0x16c>
 800a56a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a56e:	f000 8086 	beq.w	800a67e <HAL_TIM_ConfigClockSource+0x172>
 800a572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a576:	d87f      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x16c>
 800a578:	2b70      	cmp	r3, #112	@ 0x70
 800a57a:	d01a      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0xa6>
 800a57c:	2b70      	cmp	r3, #112	@ 0x70
 800a57e:	d87b      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x16c>
 800a580:	2b60      	cmp	r3, #96	@ 0x60
 800a582:	d050      	beq.n	800a626 <HAL_TIM_ConfigClockSource+0x11a>
 800a584:	2b60      	cmp	r3, #96	@ 0x60
 800a586:	d877      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x16c>
 800a588:	2b50      	cmp	r3, #80	@ 0x50
 800a58a:	d03c      	beq.n	800a606 <HAL_TIM_ConfigClockSource+0xfa>
 800a58c:	2b50      	cmp	r3, #80	@ 0x50
 800a58e:	d873      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x16c>
 800a590:	2b40      	cmp	r3, #64	@ 0x40
 800a592:	d058      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x13a>
 800a594:	2b40      	cmp	r3, #64	@ 0x40
 800a596:	d86f      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x16c>
 800a598:	2b30      	cmp	r3, #48	@ 0x30
 800a59a:	d064      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x15a>
 800a59c:	2b30      	cmp	r3, #48	@ 0x30
 800a59e:	d86b      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x16c>
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	d060      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x15a>
 800a5a4:	2b20      	cmp	r3, #32
 800a5a6:	d867      	bhi.n	800a678 <HAL_TIM_ConfigClockSource+0x16c>
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d05c      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x15a>
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d05a      	beq.n	800a666 <HAL_TIM_ConfigClockSource+0x15a>
 800a5b0:	e062      	b.n	800a678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5c2:	f000 f9b5 	bl	800a930 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a5d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	609a      	str	r2, [r3, #8]
      break;
 800a5de:	e04f      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5f0:	f000 f99e 	bl	800a930 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689a      	ldr	r2, [r3, #8]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a602:	609a      	str	r2, [r3, #8]
      break;
 800a604:	e03c      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a612:	461a      	mov	r2, r3
 800a614:	f000 f912 	bl	800a83c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2150      	movs	r1, #80	@ 0x50
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 f96b 	bl	800a8fa <TIM_ITRx_SetConfig>
      break;
 800a624:	e02c      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a632:	461a      	mov	r2, r3
 800a634:	f000 f931 	bl	800a89a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2160      	movs	r1, #96	@ 0x60
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f95b 	bl	800a8fa <TIM_ITRx_SetConfig>
      break;
 800a644:	e01c      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a652:	461a      	mov	r2, r3
 800a654:	f000 f8f2 	bl	800a83c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2140      	movs	r1, #64	@ 0x40
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 f94b 	bl	800a8fa <TIM_ITRx_SetConfig>
      break;
 800a664:	e00c      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4619      	mov	r1, r3
 800a670:	4610      	mov	r0, r2
 800a672:	f000 f942 	bl	800a8fa <TIM_ITRx_SetConfig>
      break;
 800a676:	e003      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
      break;
 800a67c:	e000      	b.n	800a680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a67e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	fffeff88 	.word	0xfffeff88

0800a6a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a43      	ldr	r2, [pc, #268]	@ (800a810 <TIM_Base_SetConfig+0x120>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d013      	beq.n	800a730 <TIM_Base_SetConfig+0x40>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a70e:	d00f      	beq.n	800a730 <TIM_Base_SetConfig+0x40>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a40      	ldr	r2, [pc, #256]	@ (800a814 <TIM_Base_SetConfig+0x124>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d00b      	beq.n	800a730 <TIM_Base_SetConfig+0x40>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a3f      	ldr	r2, [pc, #252]	@ (800a818 <TIM_Base_SetConfig+0x128>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d007      	beq.n	800a730 <TIM_Base_SetConfig+0x40>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a3e      	ldr	r2, [pc, #248]	@ (800a81c <TIM_Base_SetConfig+0x12c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d003      	beq.n	800a730 <TIM_Base_SetConfig+0x40>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a3d      	ldr	r2, [pc, #244]	@ (800a820 <TIM_Base_SetConfig+0x130>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d108      	bne.n	800a742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4313      	orrs	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4a32      	ldr	r2, [pc, #200]	@ (800a810 <TIM_Base_SetConfig+0x120>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d02b      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a750:	d027      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a2f      	ldr	r2, [pc, #188]	@ (800a814 <TIM_Base_SetConfig+0x124>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d023      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a2e      	ldr	r2, [pc, #184]	@ (800a818 <TIM_Base_SetConfig+0x128>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d01f      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a2d      	ldr	r2, [pc, #180]	@ (800a81c <TIM_Base_SetConfig+0x12c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d01b      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a2c      	ldr	r2, [pc, #176]	@ (800a820 <TIM_Base_SetConfig+0x130>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d017      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a2b      	ldr	r2, [pc, #172]	@ (800a824 <TIM_Base_SetConfig+0x134>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d013      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a2a      	ldr	r2, [pc, #168]	@ (800a828 <TIM_Base_SetConfig+0x138>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00f      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a29      	ldr	r2, [pc, #164]	@ (800a82c <TIM_Base_SetConfig+0x13c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00b      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a28      	ldr	r2, [pc, #160]	@ (800a830 <TIM_Base_SetConfig+0x140>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d007      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a27      	ldr	r2, [pc, #156]	@ (800a834 <TIM_Base_SetConfig+0x144>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d003      	beq.n	800a7a2 <TIM_Base_SetConfig+0xb2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a26      	ldr	r2, [pc, #152]	@ (800a838 <TIM_Base_SetConfig+0x148>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d108      	bne.n	800a7b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	689a      	ldr	r2, [r3, #8]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a0e      	ldr	r2, [pc, #56]	@ (800a810 <TIM_Base_SetConfig+0x120>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d003      	beq.n	800a7e2 <TIM_Base_SetConfig+0xf2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a10      	ldr	r2, [pc, #64]	@ (800a820 <TIM_Base_SetConfig+0x130>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d103      	bne.n	800a7ea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	691a      	ldr	r2, [r3, #16]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f043 0204 	orr.w	r2, r3, #4
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	601a      	str	r2, [r3, #0]
}
 800a802:	bf00      	nop
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	40010000 	.word	0x40010000
 800a814:	40000400 	.word	0x40000400
 800a818:	40000800 	.word	0x40000800
 800a81c:	40000c00 	.word	0x40000c00
 800a820:	40010400 	.word	0x40010400
 800a824:	40014000 	.word	0x40014000
 800a828:	40014400 	.word	0x40014400
 800a82c:	40014800 	.word	0x40014800
 800a830:	40001800 	.word	0x40001800
 800a834:	40001c00 	.word	0x40001c00
 800a838:	40002000 	.word	0x40002000

0800a83c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	f023 0201 	bic.w	r2, r3, #1
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	011b      	lsls	r3, r3, #4
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	4313      	orrs	r3, r2
 800a870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f023 030a 	bic.w	r3, r3, #10
 800a878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	4313      	orrs	r3, r2
 800a880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	621a      	str	r2, [r3, #32]
}
 800a88e:	bf00      	nop
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b087      	sub	sp, #28
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6a1b      	ldr	r3, [r3, #32]
 800a8b0:	f023 0210 	bic.w	r2, r3, #16
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	031b      	lsls	r3, r3, #12
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a8d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	621a      	str	r2, [r3, #32]
}
 800a8ee:	bf00      	nop
 800a8f0:	371c      	adds	r7, #28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4313      	orrs	r3, r2
 800a918:	f043 0307 	orr.w	r3, r3, #7
 800a91c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	609a      	str	r2, [r3, #8]
}
 800a924:	bf00      	nop
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a94a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	021a      	lsls	r2, r3, #8
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	431a      	orrs	r2, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	4313      	orrs	r3, r2
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	609a      	str	r2, [r3, #8]
}
 800a964:	bf00      	nop
 800a966:	371c      	adds	r7, #28
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a980:	2b01      	cmp	r3, #1
 800a982:	d101      	bne.n	800a988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a984:	2302      	movs	r3, #2
 800a986:	e06d      	b.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a30      	ldr	r2, [pc, #192]	@ (800aa70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d004      	beq.n	800a9bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a2f      	ldr	r2, [pc, #188]	@ (800aa74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d108      	bne.n	800a9ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a9c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a20      	ldr	r2, [pc, #128]	@ (800aa70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d022      	beq.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9fa:	d01d      	beq.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a1d      	ldr	r2, [pc, #116]	@ (800aa78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d018      	beq.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a1c      	ldr	r2, [pc, #112]	@ (800aa7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d013      	beq.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a1a      	ldr	r2, [pc, #104]	@ (800aa80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d00e      	beq.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a15      	ldr	r2, [pc, #84]	@ (800aa74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d009      	beq.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a16      	ldr	r2, [pc, #88]	@ (800aa84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d004      	beq.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a15      	ldr	r2, [pc, #84]	@ (800aa88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d10c      	bne.n	800aa52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	68ba      	ldr	r2, [r7, #8]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	40010000 	.word	0x40010000
 800aa74:	40010400 	.word	0x40010400
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	40000800 	.word	0x40000800
 800aa80:	40000c00 	.word	0x40000c00
 800aa84:	40014000 	.word	0x40014000
 800aa88:	40001800 	.word	0x40001800

0800aa8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e040      	b.n	800ab5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7f7 f95e 	bl	8001dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2224      	movs	r2, #36	@ 0x24
 800aaf4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 0201 	bic.w	r2, r2, #1
 800ab04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 ffc8 	bl	800baa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fd61 	bl	800b5dc <UART_SetConfig>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d101      	bne.n	800ab24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	e01b      	b.n	800ab5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0201 	orr.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f001 f847 	bl	800bbe8 <UART_CheckIdleState>
 800ab5a:	4603      	mov	r3, r0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08a      	sub	sp, #40	@ 0x28
 800ab68:	af02      	add	r7, sp, #8
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	4613      	mov	r3, r2
 800ab72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab78:	2b20      	cmp	r3, #32
 800ab7a:	d177      	bne.n	800ac6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <HAL_UART_Transmit+0x24>
 800ab82:	88fb      	ldrh	r3, [r7, #6]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e070      	b.n	800ac6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2221      	movs	r2, #33	@ 0x21
 800ab98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab9a:	f7f7 fbe1 	bl	8002360 <HAL_GetTick>
 800ab9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	88fa      	ldrh	r2, [r7, #6]
 800aba4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	88fa      	ldrh	r2, [r7, #6]
 800abac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abb8:	d108      	bne.n	800abcc <HAL_UART_Transmit+0x68>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d104      	bne.n	800abcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	61bb      	str	r3, [r7, #24]
 800abca:	e003      	b.n	800abd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abd0:	2300      	movs	r3, #0
 800abd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800abd4:	e02f      	b.n	800ac36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2200      	movs	r2, #0
 800abde:	2180      	movs	r1, #128	@ 0x80
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f001 f858 	bl	800bc96 <UART_WaitOnFlagUntilTimeout>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d004      	beq.n	800abf6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2220      	movs	r2, #32
 800abf0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e03b      	b.n	800ac6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10b      	bne.n	800ac14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	3302      	adds	r3, #2
 800ac10:	61bb      	str	r3, [r7, #24]
 800ac12:	e007      	b.n	800ac24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	781a      	ldrb	r2, [r3, #0]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	3301      	adds	r3, #1
 800ac22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1c9      	bne.n	800abd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2140      	movs	r1, #64	@ 0x40
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f001 f822 	bl	800bc96 <UART_WaitOnFlagUntilTimeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d004      	beq.n	800ac62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2220      	movs	r2, #32
 800ac5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e005      	b.n	800ac6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2220      	movs	r2, #32
 800ac66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	e000      	b.n	800ac6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ac6c:	2302      	movs	r3, #2
  }
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3720      	adds	r7, #32
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b08b      	sub	sp, #44	@ 0x2c
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	4613      	mov	r3, r2
 800ac84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac8a:	2b20      	cmp	r3, #32
 800ac8c:	d147      	bne.n	800ad1e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <HAL_UART_Transmit_IT+0x22>
 800ac94:	88fb      	ldrh	r3, [r7, #6]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e040      	b.n	800ad20 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	88fa      	ldrh	r2, [r7, #6]
 800aca8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	88fa      	ldrh	r2, [r7, #6]
 800acb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2221      	movs	r2, #33	@ 0x21
 800acc6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acd0:	d107      	bne.n	800ace2 <HAL_UART_Transmit_IT+0x6a>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d103      	bne.n	800ace2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4a13      	ldr	r2, [pc, #76]	@ (800ad2c <HAL_UART_Transmit_IT+0xb4>)
 800acde:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ace0:	e002      	b.n	800ace8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	4a12      	ldr	r2, [pc, #72]	@ (800ad30 <HAL_UART_Transmit_IT+0xb8>)
 800ace6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	613b      	str	r3, [r7, #16]
   return(result);
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acfc:	627b      	str	r3, [r7, #36]	@ 0x24
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	461a      	mov	r2, r3
 800ad04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad06:	623b      	str	r3, [r7, #32]
 800ad08:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	69f9      	ldr	r1, [r7, #28]
 800ad0c:	6a3a      	ldr	r2, [r7, #32]
 800ad0e:	e841 2300 	strex	r3, r2, [r1]
 800ad12:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1e6      	bne.n	800ace8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e000      	b.n	800ad20 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800ad1e:	2302      	movs	r3, #2
  }
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	372c      	adds	r7, #44	@ 0x2c
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	0800c2ed 	.word	0x0800c2ed
 800ad30:	0800c237 	.word	0x0800c237

0800ad34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08a      	sub	sp, #40	@ 0x28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad48:	2b20      	cmp	r3, #32
 800ad4a:	d132      	bne.n	800adb2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <HAL_UART_Receive_DMA+0x24>
 800ad52:	88fb      	ldrh	r3, [r7, #6]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d101      	bne.n	800ad5c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e02b      	b.n	800adb4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d018      	beq.n	800ada2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8e:	623b      	str	r3, [r7, #32]
 800ad90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	69f9      	ldr	r1, [r7, #28]
 800ad94:	6a3a      	ldr	r2, [r7, #32]
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e6      	bne.n	800ad70 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ada2:	88fb      	ldrh	r3, [r7, #6]
 800ada4:	461a      	mov	r2, r3
 800ada6:	68b9      	ldr	r1, [r7, #8]
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 ffe1 	bl	800bd70 <UART_Start_Receive_DMA>
 800adae:	4603      	mov	r3, r0
 800adb0:	e000      	b.n	800adb4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800adb2:	2302      	movs	r3, #2
  }
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3728      	adds	r7, #40	@ 0x28
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b0a0      	sub	sp, #128	@ 0x80
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adcc:	e853 3f00 	ldrex	r3, [r3]
 800add0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800add2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800add4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800add8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ade2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ade4:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ade8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800adea:	e841 2300 	strex	r3, r2, [r1]
 800adee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800adf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e6      	bne.n	800adc4 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3308      	adds	r3, #8
 800adfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ae06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae08:	f023 0301 	bic.w	r3, r3, #1
 800ae0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ae16:	657a      	str	r2, [r7, #84]	@ 0x54
 800ae18:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ae24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e5      	bne.n	800adf6 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d118      	bne.n	800ae64 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3a:	e853 3f00 	ldrex	r3, [r3]
 800ae3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae42:	f023 0310 	bic.w	r3, r3, #16
 800ae46:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae50:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae58:	e841 2300 	strex	r3, r2, [r1]
 800ae5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1e6      	bne.n	800ae32 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae6e:	2b80      	cmp	r3, #128	@ 0x80
 800ae70:	d137      	bne.n	800aee2 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3308      	adds	r3, #8
 800ae78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	e853 3f00 	ldrex	r3, [r3]
 800ae80:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae88:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3308      	adds	r3, #8
 800ae90:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ae92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e5      	bne.n	800ae72 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d019      	beq.n	800aee2 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7f8 fb00 	bl	80034c0 <HAL_DMA_Abort>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00d      	beq.n	800aee2 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f8 fd76 	bl	80039bc <HAL_DMA_GetError>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	d105      	bne.n	800aee2 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2210      	movs	r2, #16
 800aeda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aede:	2303      	movs	r3, #3
 800aee0:	e061      	b.n	800afa6 <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeec:	2b40      	cmp	r3, #64	@ 0x40
 800aeee:	d137      	bne.n	800af60 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	3308      	adds	r3, #8
 800aef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	e853 3f00 	ldrex	r3, [r3]
 800aefe:	60bb      	str	r3, [r7, #8]
   return(result);
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3308      	adds	r3, #8
 800af0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af10:	61ba      	str	r2, [r7, #24]
 800af12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af14:	6979      	ldr	r1, [r7, #20]
 800af16:	69ba      	ldr	r2, [r7, #24]
 800af18:	e841 2300 	strex	r3, r2, [r1]
 800af1c:	613b      	str	r3, [r7, #16]
   return(result);
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1e5      	bne.n	800aef0 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d019      	beq.n	800af60 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af30:	2200      	movs	r2, #0
 800af32:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f8 fac1 	bl	80034c0 <HAL_DMA_Abort>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00d      	beq.n	800af60 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af48:	4618      	mov	r0, r3
 800af4a:	f7f8 fd37 	bl	80039bc <HAL_DMA_GetError>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b20      	cmp	r3, #32
 800af52:	d105      	bne.n	800af60 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2210      	movs	r2, #16
 800af58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e022      	b.n	800afa6 <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	220f      	movs	r2, #15
 800af76:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699a      	ldr	r2, [r3, #24]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f042 0208 	orr.w	r2, r2, #8
 800af86:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2220      	movs	r2, #32
 800af8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2220      	movs	r2, #32
 800af92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3780      	adds	r7, #128	@ 0x80
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b0ba      	sub	sp, #232	@ 0xe8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800afda:	f640 030f 	movw	r3, #2063	@ 0x80f
 800afde:	4013      	ands	r3, r2
 800afe0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800afe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d115      	bne.n	800b018 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff0:	f003 0320 	and.w	r3, r3, #32
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00f      	beq.n	800b018 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800affc:	f003 0320 	and.w	r3, r3, #32
 800b000:	2b00      	cmp	r3, #0
 800b002:	d009      	beq.n	800b018 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 82b1 	beq.w	800b570 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	4798      	blx	r3
      }
      return;
 800b016:	e2ab      	b.n	800b570 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 8117 	beq.w	800b250 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b026:	f003 0301 	and.w	r3, r3, #1
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b02e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b032:	4b85      	ldr	r3, [pc, #532]	@ (800b248 <HAL_UART_IRQHandler+0x298>)
 800b034:	4013      	ands	r3, r2
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 810a 	beq.w	800b250 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	d011      	beq.n	800b06c <HAL_UART_IRQHandler+0xbc>
 800b048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b04c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00b      	beq.n	800b06c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2201      	movs	r2, #1
 800b05a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b062:	f043 0201 	orr.w	r2, r3, #1
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b070:	f003 0302 	and.w	r3, r3, #2
 800b074:	2b00      	cmp	r3, #0
 800b076:	d011      	beq.n	800b09c <HAL_UART_IRQHandler+0xec>
 800b078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00b      	beq.n	800b09c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2202      	movs	r2, #2
 800b08a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b092:	f043 0204 	orr.w	r2, r3, #4
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d011      	beq.n	800b0cc <HAL_UART_IRQHandler+0x11c>
 800b0a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00b      	beq.n	800b0cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2204      	movs	r2, #4
 800b0ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0c2:	f043 0202 	orr.w	r2, r3, #2
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0d0:	f003 0308 	and.w	r3, r3, #8
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d017      	beq.n	800b108 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0dc:	f003 0320 	and.w	r3, r3, #32
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d105      	bne.n	800b0f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00b      	beq.n	800b108 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2208      	movs	r2, #8
 800b0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0fe:	f043 0208 	orr.w	r2, r3, #8
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b10c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b110:	2b00      	cmp	r3, #0
 800b112:	d012      	beq.n	800b13a <HAL_UART_IRQHandler+0x18a>
 800b114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b118:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00c      	beq.n	800b13a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b130:	f043 0220 	orr.w	r2, r3, #32
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 8217 	beq.w	800b574 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b14a:	f003 0320 	and.w	r3, r3, #32
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00d      	beq.n	800b16e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b156:	f003 0320 	and.w	r3, r3, #32
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d007      	beq.n	800b16e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b174:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b182:	2b40      	cmp	r3, #64	@ 0x40
 800b184:	d005      	beq.n	800b192 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b18a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d04f      	beq.n	800b232 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 feb2 	bl	800befc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a2:	2b40      	cmp	r3, #64	@ 0x40
 800b1a4:	d141      	bne.n	800b22a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b1bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b1c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b1d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b1d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b1de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b1e2:	e841 2300 	strex	r3, r2, [r1]
 800b1e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b1ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1d9      	bne.n	800b1a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d013      	beq.n	800b222 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1fe:	4a13      	ldr	r2, [pc, #76]	@ (800b24c <HAL_UART_IRQHandler+0x29c>)
 800b200:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b206:	4618      	mov	r0, r3
 800b208:	f7f8 f9ca 	bl	80035a0 <HAL_DMA_Abort_IT>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d017      	beq.n	800b242 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b220:	e00f      	b.n	800b242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f9c4 	bl	800b5b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b228:	e00b      	b.n	800b242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f9c0 	bl	800b5b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b230:	e007      	b.n	800b242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f9bc 	bl	800b5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b240:	e198      	b.n	800b574 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b242:	bf00      	nop
    return;
 800b244:	e196      	b.n	800b574 <HAL_UART_IRQHandler+0x5c4>
 800b246:	bf00      	nop
 800b248:	04000120 	.word	0x04000120
 800b24c:	0800c213 	.word	0x0800c213

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b254:	2b01      	cmp	r3, #1
 800b256:	f040 8166 	bne.w	800b526 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b25e:	f003 0310 	and.w	r3, r3, #16
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 815f 	beq.w	800b526 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b26c:	f003 0310 	and.w	r3, r3, #16
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 8158 	beq.w	800b526 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2210      	movs	r2, #16
 800b27c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b288:	2b40      	cmp	r3, #64	@ 0x40
 800b28a:	f040 80d0 	bne.w	800b42e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b29a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 80ab 	beq.w	800b3fa <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b2aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	f080 80a3 	bcs.w	800b3fa <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2c8:	f000 8086 	beq.w	800b3d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b2e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b2f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b2fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b302:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b30e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1da      	bne.n	800b2cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	3308      	adds	r3, #8
 800b31c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b320:	e853 3f00 	ldrex	r3, [r3]
 800b324:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b328:	f023 0301 	bic.w	r3, r3, #1
 800b32c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3308      	adds	r3, #8
 800b336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b33a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b33e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b340:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b342:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b346:	e841 2300 	strex	r3, r2, [r1]
 800b34a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b34c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1e1      	bne.n	800b316 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3308      	adds	r3, #8
 800b358:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3308      	adds	r3, #8
 800b372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b376:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b378:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b37c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b37e:	e841 2300 	strex	r3, r2, [r1]
 800b382:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1e3      	bne.n	800b352 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2220      	movs	r2, #32
 800b38e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b3a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3a8:	f023 0310 	bic.w	r3, r3, #16
 800b3ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e4      	bne.n	800b398 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7f8 f874 	bl	80034c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2202      	movs	r2, #2
 800b3dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f8e6 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b3f8:	e0be      	b.n	800b578 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b400:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b404:	429a      	cmp	r2, r3
 800b406:	f040 80b7 	bne.w	800b578 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b414:	f040 80b0 	bne.w	800b578 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f8cc 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
      return;
 800b42c:	e0a4      	b.n	800b578 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b448:	b29b      	uxth	r3, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 8096 	beq.w	800b57c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800b450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 8091 	beq.w	800b57c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b46e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	461a      	mov	r2, r3
 800b478:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b47c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b47e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b484:	e841 2300 	strex	r3, r2, [r1]
 800b488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1e4      	bne.n	800b45a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3308      	adds	r3, #8
 800b496:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49a:	e853 3f00 	ldrex	r3, [r3]
 800b49e:	623b      	str	r3, [r7, #32]
   return(result);
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	f023 0301 	bic.w	r3, r3, #1
 800b4a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3308      	adds	r3, #8
 800b4b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b4b4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4bc:	e841 2300 	strex	r3, r2, [r1]
 800b4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1e3      	bne.n	800b490 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2220      	movs	r2, #32
 800b4cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f023 0310 	bic.w	r3, r3, #16
 800b4f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b4fe:	61fb      	str	r3, [r7, #28]
 800b500:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	69b9      	ldr	r1, [r7, #24]
 800b504:	69fa      	ldr	r2, [r7, #28]
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	617b      	str	r3, [r7, #20]
   return(result);
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e4      	bne.n	800b4dc <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2202      	movs	r2, #2
 800b516:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f850 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b524:	e02a      	b.n	800b57c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b52a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00e      	beq.n	800b550 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d008      	beq.n	800b550 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d01c      	beq.n	800b580 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	4798      	blx	r3
    }
    return;
 800b54e:	e017      	b.n	800b580 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d012      	beq.n	800b582 <HAL_UART_IRQHandler+0x5d2>
 800b55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00c      	beq.n	800b582 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 ff1f 	bl	800c3ac <UART_EndTransmit_IT>
    return;
 800b56e:	e008      	b.n	800b582 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b570:	bf00      	nop
 800b572:	e006      	b.n	800b582 <HAL_UART_IRQHandler+0x5d2>
    return;
 800b574:	bf00      	nop
 800b576:	e004      	b.n	800b582 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b578:	bf00      	nop
 800b57a:	e002      	b.n	800b582 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b57c:	bf00      	nop
 800b57e:	e000      	b.n	800b582 <HAL_UART_IRQHandler+0x5d2>
    return;
 800b580:	bf00      	nop
  }

}
 800b582:	37e8      	adds	r7, #232	@ 0xe8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b088      	sub	sp, #32
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	689a      	ldr	r2, [r3, #8]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	431a      	orrs	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	4ba6      	ldr	r3, [pc, #664]	@ (800b8a0 <UART_SetConfig+0x2c4>)
 800b608:	4013      	ands	r3, r2
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	6812      	ldr	r2, [r2, #0]
 800b60e:	6979      	ldr	r1, [r7, #20]
 800b610:	430b      	orrs	r3, r1
 800b612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	430a      	orrs	r2, r1
 800b628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a1b      	ldr	r3, [r3, #32]
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	4313      	orrs	r3, r2
 800b638:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	430a      	orrs	r2, r1
 800b64c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a94      	ldr	r2, [pc, #592]	@ (800b8a4 <UART_SetConfig+0x2c8>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d120      	bne.n	800b69a <UART_SetConfig+0xbe>
 800b658:	4b93      	ldr	r3, [pc, #588]	@ (800b8a8 <UART_SetConfig+0x2cc>)
 800b65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b65e:	f003 0303 	and.w	r3, r3, #3
 800b662:	2b03      	cmp	r3, #3
 800b664:	d816      	bhi.n	800b694 <UART_SetConfig+0xb8>
 800b666:	a201      	add	r2, pc, #4	@ (adr r2, 800b66c <UART_SetConfig+0x90>)
 800b668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66c:	0800b67d 	.word	0x0800b67d
 800b670:	0800b689 	.word	0x0800b689
 800b674:	0800b683 	.word	0x0800b683
 800b678:	0800b68f 	.word	0x0800b68f
 800b67c:	2301      	movs	r3, #1
 800b67e:	77fb      	strb	r3, [r7, #31]
 800b680:	e150      	b.n	800b924 <UART_SetConfig+0x348>
 800b682:	2302      	movs	r3, #2
 800b684:	77fb      	strb	r3, [r7, #31]
 800b686:	e14d      	b.n	800b924 <UART_SetConfig+0x348>
 800b688:	2304      	movs	r3, #4
 800b68a:	77fb      	strb	r3, [r7, #31]
 800b68c:	e14a      	b.n	800b924 <UART_SetConfig+0x348>
 800b68e:	2308      	movs	r3, #8
 800b690:	77fb      	strb	r3, [r7, #31]
 800b692:	e147      	b.n	800b924 <UART_SetConfig+0x348>
 800b694:	2310      	movs	r3, #16
 800b696:	77fb      	strb	r3, [r7, #31]
 800b698:	e144      	b.n	800b924 <UART_SetConfig+0x348>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a83      	ldr	r2, [pc, #524]	@ (800b8ac <UART_SetConfig+0x2d0>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d132      	bne.n	800b70a <UART_SetConfig+0x12e>
 800b6a4:	4b80      	ldr	r3, [pc, #512]	@ (800b8a8 <UART_SetConfig+0x2cc>)
 800b6a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6aa:	f003 030c 	and.w	r3, r3, #12
 800b6ae:	2b0c      	cmp	r3, #12
 800b6b0:	d828      	bhi.n	800b704 <UART_SetConfig+0x128>
 800b6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b8 <UART_SetConfig+0xdc>)
 800b6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b8:	0800b6ed 	.word	0x0800b6ed
 800b6bc:	0800b705 	.word	0x0800b705
 800b6c0:	0800b705 	.word	0x0800b705
 800b6c4:	0800b705 	.word	0x0800b705
 800b6c8:	0800b6f9 	.word	0x0800b6f9
 800b6cc:	0800b705 	.word	0x0800b705
 800b6d0:	0800b705 	.word	0x0800b705
 800b6d4:	0800b705 	.word	0x0800b705
 800b6d8:	0800b6f3 	.word	0x0800b6f3
 800b6dc:	0800b705 	.word	0x0800b705
 800b6e0:	0800b705 	.word	0x0800b705
 800b6e4:	0800b705 	.word	0x0800b705
 800b6e8:	0800b6ff 	.word	0x0800b6ff
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	77fb      	strb	r3, [r7, #31]
 800b6f0:	e118      	b.n	800b924 <UART_SetConfig+0x348>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	77fb      	strb	r3, [r7, #31]
 800b6f6:	e115      	b.n	800b924 <UART_SetConfig+0x348>
 800b6f8:	2304      	movs	r3, #4
 800b6fa:	77fb      	strb	r3, [r7, #31]
 800b6fc:	e112      	b.n	800b924 <UART_SetConfig+0x348>
 800b6fe:	2308      	movs	r3, #8
 800b700:	77fb      	strb	r3, [r7, #31]
 800b702:	e10f      	b.n	800b924 <UART_SetConfig+0x348>
 800b704:	2310      	movs	r3, #16
 800b706:	77fb      	strb	r3, [r7, #31]
 800b708:	e10c      	b.n	800b924 <UART_SetConfig+0x348>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a68      	ldr	r2, [pc, #416]	@ (800b8b0 <UART_SetConfig+0x2d4>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d120      	bne.n	800b756 <UART_SetConfig+0x17a>
 800b714:	4b64      	ldr	r3, [pc, #400]	@ (800b8a8 <UART_SetConfig+0x2cc>)
 800b716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b71a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b71e:	2b30      	cmp	r3, #48	@ 0x30
 800b720:	d013      	beq.n	800b74a <UART_SetConfig+0x16e>
 800b722:	2b30      	cmp	r3, #48	@ 0x30
 800b724:	d814      	bhi.n	800b750 <UART_SetConfig+0x174>
 800b726:	2b20      	cmp	r3, #32
 800b728:	d009      	beq.n	800b73e <UART_SetConfig+0x162>
 800b72a:	2b20      	cmp	r3, #32
 800b72c:	d810      	bhi.n	800b750 <UART_SetConfig+0x174>
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <UART_SetConfig+0x15c>
 800b732:	2b10      	cmp	r3, #16
 800b734:	d006      	beq.n	800b744 <UART_SetConfig+0x168>
 800b736:	e00b      	b.n	800b750 <UART_SetConfig+0x174>
 800b738:	2300      	movs	r3, #0
 800b73a:	77fb      	strb	r3, [r7, #31]
 800b73c:	e0f2      	b.n	800b924 <UART_SetConfig+0x348>
 800b73e:	2302      	movs	r3, #2
 800b740:	77fb      	strb	r3, [r7, #31]
 800b742:	e0ef      	b.n	800b924 <UART_SetConfig+0x348>
 800b744:	2304      	movs	r3, #4
 800b746:	77fb      	strb	r3, [r7, #31]
 800b748:	e0ec      	b.n	800b924 <UART_SetConfig+0x348>
 800b74a:	2308      	movs	r3, #8
 800b74c:	77fb      	strb	r3, [r7, #31]
 800b74e:	e0e9      	b.n	800b924 <UART_SetConfig+0x348>
 800b750:	2310      	movs	r3, #16
 800b752:	77fb      	strb	r3, [r7, #31]
 800b754:	e0e6      	b.n	800b924 <UART_SetConfig+0x348>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a56      	ldr	r2, [pc, #344]	@ (800b8b4 <UART_SetConfig+0x2d8>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d120      	bne.n	800b7a2 <UART_SetConfig+0x1c6>
 800b760:	4b51      	ldr	r3, [pc, #324]	@ (800b8a8 <UART_SetConfig+0x2cc>)
 800b762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b766:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b76a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b76c:	d013      	beq.n	800b796 <UART_SetConfig+0x1ba>
 800b76e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b770:	d814      	bhi.n	800b79c <UART_SetConfig+0x1c0>
 800b772:	2b80      	cmp	r3, #128	@ 0x80
 800b774:	d009      	beq.n	800b78a <UART_SetConfig+0x1ae>
 800b776:	2b80      	cmp	r3, #128	@ 0x80
 800b778:	d810      	bhi.n	800b79c <UART_SetConfig+0x1c0>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <UART_SetConfig+0x1a8>
 800b77e:	2b40      	cmp	r3, #64	@ 0x40
 800b780:	d006      	beq.n	800b790 <UART_SetConfig+0x1b4>
 800b782:	e00b      	b.n	800b79c <UART_SetConfig+0x1c0>
 800b784:	2300      	movs	r3, #0
 800b786:	77fb      	strb	r3, [r7, #31]
 800b788:	e0cc      	b.n	800b924 <UART_SetConfig+0x348>
 800b78a:	2302      	movs	r3, #2
 800b78c:	77fb      	strb	r3, [r7, #31]
 800b78e:	e0c9      	b.n	800b924 <UART_SetConfig+0x348>
 800b790:	2304      	movs	r3, #4
 800b792:	77fb      	strb	r3, [r7, #31]
 800b794:	e0c6      	b.n	800b924 <UART_SetConfig+0x348>
 800b796:	2308      	movs	r3, #8
 800b798:	77fb      	strb	r3, [r7, #31]
 800b79a:	e0c3      	b.n	800b924 <UART_SetConfig+0x348>
 800b79c:	2310      	movs	r3, #16
 800b79e:	77fb      	strb	r3, [r7, #31]
 800b7a0:	e0c0      	b.n	800b924 <UART_SetConfig+0x348>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a44      	ldr	r2, [pc, #272]	@ (800b8b8 <UART_SetConfig+0x2dc>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d125      	bne.n	800b7f8 <UART_SetConfig+0x21c>
 800b7ac:	4b3e      	ldr	r3, [pc, #248]	@ (800b8a8 <UART_SetConfig+0x2cc>)
 800b7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7ba:	d017      	beq.n	800b7ec <UART_SetConfig+0x210>
 800b7bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7c0:	d817      	bhi.n	800b7f2 <UART_SetConfig+0x216>
 800b7c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7c6:	d00b      	beq.n	800b7e0 <UART_SetConfig+0x204>
 800b7c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7cc:	d811      	bhi.n	800b7f2 <UART_SetConfig+0x216>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <UART_SetConfig+0x1fe>
 800b7d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7d6:	d006      	beq.n	800b7e6 <UART_SetConfig+0x20a>
 800b7d8:	e00b      	b.n	800b7f2 <UART_SetConfig+0x216>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	77fb      	strb	r3, [r7, #31]
 800b7de:	e0a1      	b.n	800b924 <UART_SetConfig+0x348>
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	77fb      	strb	r3, [r7, #31]
 800b7e4:	e09e      	b.n	800b924 <UART_SetConfig+0x348>
 800b7e6:	2304      	movs	r3, #4
 800b7e8:	77fb      	strb	r3, [r7, #31]
 800b7ea:	e09b      	b.n	800b924 <UART_SetConfig+0x348>
 800b7ec:	2308      	movs	r3, #8
 800b7ee:	77fb      	strb	r3, [r7, #31]
 800b7f0:	e098      	b.n	800b924 <UART_SetConfig+0x348>
 800b7f2:	2310      	movs	r3, #16
 800b7f4:	77fb      	strb	r3, [r7, #31]
 800b7f6:	e095      	b.n	800b924 <UART_SetConfig+0x348>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a2f      	ldr	r2, [pc, #188]	@ (800b8bc <UART_SetConfig+0x2e0>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d125      	bne.n	800b84e <UART_SetConfig+0x272>
 800b802:	4b29      	ldr	r3, [pc, #164]	@ (800b8a8 <UART_SetConfig+0x2cc>)
 800b804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b808:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b80c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b810:	d017      	beq.n	800b842 <UART_SetConfig+0x266>
 800b812:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b816:	d817      	bhi.n	800b848 <UART_SetConfig+0x26c>
 800b818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b81c:	d00b      	beq.n	800b836 <UART_SetConfig+0x25a>
 800b81e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b822:	d811      	bhi.n	800b848 <UART_SetConfig+0x26c>
 800b824:	2b00      	cmp	r3, #0
 800b826:	d003      	beq.n	800b830 <UART_SetConfig+0x254>
 800b828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b82c:	d006      	beq.n	800b83c <UART_SetConfig+0x260>
 800b82e:	e00b      	b.n	800b848 <UART_SetConfig+0x26c>
 800b830:	2301      	movs	r3, #1
 800b832:	77fb      	strb	r3, [r7, #31]
 800b834:	e076      	b.n	800b924 <UART_SetConfig+0x348>
 800b836:	2302      	movs	r3, #2
 800b838:	77fb      	strb	r3, [r7, #31]
 800b83a:	e073      	b.n	800b924 <UART_SetConfig+0x348>
 800b83c:	2304      	movs	r3, #4
 800b83e:	77fb      	strb	r3, [r7, #31]
 800b840:	e070      	b.n	800b924 <UART_SetConfig+0x348>
 800b842:	2308      	movs	r3, #8
 800b844:	77fb      	strb	r3, [r7, #31]
 800b846:	e06d      	b.n	800b924 <UART_SetConfig+0x348>
 800b848:	2310      	movs	r3, #16
 800b84a:	77fb      	strb	r3, [r7, #31]
 800b84c:	e06a      	b.n	800b924 <UART_SetConfig+0x348>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a1b      	ldr	r2, [pc, #108]	@ (800b8c0 <UART_SetConfig+0x2e4>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d138      	bne.n	800b8ca <UART_SetConfig+0x2ee>
 800b858:	4b13      	ldr	r3, [pc, #76]	@ (800b8a8 <UART_SetConfig+0x2cc>)
 800b85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b85e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b862:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b866:	d017      	beq.n	800b898 <UART_SetConfig+0x2bc>
 800b868:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b86c:	d82a      	bhi.n	800b8c4 <UART_SetConfig+0x2e8>
 800b86e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b872:	d00b      	beq.n	800b88c <UART_SetConfig+0x2b0>
 800b874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b878:	d824      	bhi.n	800b8c4 <UART_SetConfig+0x2e8>
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d003      	beq.n	800b886 <UART_SetConfig+0x2aa>
 800b87e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b882:	d006      	beq.n	800b892 <UART_SetConfig+0x2b6>
 800b884:	e01e      	b.n	800b8c4 <UART_SetConfig+0x2e8>
 800b886:	2300      	movs	r3, #0
 800b888:	77fb      	strb	r3, [r7, #31]
 800b88a:	e04b      	b.n	800b924 <UART_SetConfig+0x348>
 800b88c:	2302      	movs	r3, #2
 800b88e:	77fb      	strb	r3, [r7, #31]
 800b890:	e048      	b.n	800b924 <UART_SetConfig+0x348>
 800b892:	2304      	movs	r3, #4
 800b894:	77fb      	strb	r3, [r7, #31]
 800b896:	e045      	b.n	800b924 <UART_SetConfig+0x348>
 800b898:	2308      	movs	r3, #8
 800b89a:	77fb      	strb	r3, [r7, #31]
 800b89c:	e042      	b.n	800b924 <UART_SetConfig+0x348>
 800b89e:	bf00      	nop
 800b8a0:	efff69f3 	.word	0xefff69f3
 800b8a4:	40011000 	.word	0x40011000
 800b8a8:	40023800 	.word	0x40023800
 800b8ac:	40004400 	.word	0x40004400
 800b8b0:	40004800 	.word	0x40004800
 800b8b4:	40004c00 	.word	0x40004c00
 800b8b8:	40005000 	.word	0x40005000
 800b8bc:	40011400 	.word	0x40011400
 800b8c0:	40007800 	.word	0x40007800
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	77fb      	strb	r3, [r7, #31]
 800b8c8:	e02c      	b.n	800b924 <UART_SetConfig+0x348>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a72      	ldr	r2, [pc, #456]	@ (800ba98 <UART_SetConfig+0x4bc>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d125      	bne.n	800b920 <UART_SetConfig+0x344>
 800b8d4:	4b71      	ldr	r3, [pc, #452]	@ (800ba9c <UART_SetConfig+0x4c0>)
 800b8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b8de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8e2:	d017      	beq.n	800b914 <UART_SetConfig+0x338>
 800b8e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8e8:	d817      	bhi.n	800b91a <UART_SetConfig+0x33e>
 800b8ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8ee:	d00b      	beq.n	800b908 <UART_SetConfig+0x32c>
 800b8f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8f4:	d811      	bhi.n	800b91a <UART_SetConfig+0x33e>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d003      	beq.n	800b902 <UART_SetConfig+0x326>
 800b8fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8fe:	d006      	beq.n	800b90e <UART_SetConfig+0x332>
 800b900:	e00b      	b.n	800b91a <UART_SetConfig+0x33e>
 800b902:	2300      	movs	r3, #0
 800b904:	77fb      	strb	r3, [r7, #31]
 800b906:	e00d      	b.n	800b924 <UART_SetConfig+0x348>
 800b908:	2302      	movs	r3, #2
 800b90a:	77fb      	strb	r3, [r7, #31]
 800b90c:	e00a      	b.n	800b924 <UART_SetConfig+0x348>
 800b90e:	2304      	movs	r3, #4
 800b910:	77fb      	strb	r3, [r7, #31]
 800b912:	e007      	b.n	800b924 <UART_SetConfig+0x348>
 800b914:	2308      	movs	r3, #8
 800b916:	77fb      	strb	r3, [r7, #31]
 800b918:	e004      	b.n	800b924 <UART_SetConfig+0x348>
 800b91a:	2310      	movs	r3, #16
 800b91c:	77fb      	strb	r3, [r7, #31]
 800b91e:	e001      	b.n	800b924 <UART_SetConfig+0x348>
 800b920:	2310      	movs	r3, #16
 800b922:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	69db      	ldr	r3, [r3, #28]
 800b928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b92c:	d15b      	bne.n	800b9e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b92e:	7ffb      	ldrb	r3, [r7, #31]
 800b930:	2b08      	cmp	r3, #8
 800b932:	d828      	bhi.n	800b986 <UART_SetConfig+0x3aa>
 800b934:	a201      	add	r2, pc, #4	@ (adr r2, 800b93c <UART_SetConfig+0x360>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b961 	.word	0x0800b961
 800b940:	0800b969 	.word	0x0800b969
 800b944:	0800b971 	.word	0x0800b971
 800b948:	0800b987 	.word	0x0800b987
 800b94c:	0800b977 	.word	0x0800b977
 800b950:	0800b987 	.word	0x0800b987
 800b954:	0800b987 	.word	0x0800b987
 800b958:	0800b987 	.word	0x0800b987
 800b95c:	0800b97f 	.word	0x0800b97f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b960:	f7fc fc30 	bl	80081c4 <HAL_RCC_GetPCLK1Freq>
 800b964:	61b8      	str	r0, [r7, #24]
        break;
 800b966:	e013      	b.n	800b990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b968:	f7fc fc40 	bl	80081ec <HAL_RCC_GetPCLK2Freq>
 800b96c:	61b8      	str	r0, [r7, #24]
        break;
 800b96e:	e00f      	b.n	800b990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b970:	4b4b      	ldr	r3, [pc, #300]	@ (800baa0 <UART_SetConfig+0x4c4>)
 800b972:	61bb      	str	r3, [r7, #24]
        break;
 800b974:	e00c      	b.n	800b990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b976:	f7fc fb53 	bl	8008020 <HAL_RCC_GetSysClockFreq>
 800b97a:	61b8      	str	r0, [r7, #24]
        break;
 800b97c:	e008      	b.n	800b990 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b97e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b982:	61bb      	str	r3, [r7, #24]
        break;
 800b984:	e004      	b.n	800b990 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	77bb      	strb	r3, [r7, #30]
        break;
 800b98e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d074      	beq.n	800ba80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	005a      	lsls	r2, r3, #1
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	085b      	lsrs	r3, r3, #1
 800b9a0:	441a      	add	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	2b0f      	cmp	r3, #15
 800b9b0:	d916      	bls.n	800b9e0 <UART_SetConfig+0x404>
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9b8:	d212      	bcs.n	800b9e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	f023 030f 	bic.w	r3, r3, #15
 800b9c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	085b      	lsrs	r3, r3, #1
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	f003 0307 	and.w	r3, r3, #7
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	89fb      	ldrh	r3, [r7, #14]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	89fa      	ldrh	r2, [r7, #14]
 800b9dc:	60da      	str	r2, [r3, #12]
 800b9de:	e04f      	b.n	800ba80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	77bb      	strb	r3, [r7, #30]
 800b9e4:	e04c      	b.n	800ba80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9e6:	7ffb      	ldrb	r3, [r7, #31]
 800b9e8:	2b08      	cmp	r3, #8
 800b9ea:	d828      	bhi.n	800ba3e <UART_SetConfig+0x462>
 800b9ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b9f4 <UART_SetConfig+0x418>)
 800b9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f2:	bf00      	nop
 800b9f4:	0800ba19 	.word	0x0800ba19
 800b9f8:	0800ba21 	.word	0x0800ba21
 800b9fc:	0800ba29 	.word	0x0800ba29
 800ba00:	0800ba3f 	.word	0x0800ba3f
 800ba04:	0800ba2f 	.word	0x0800ba2f
 800ba08:	0800ba3f 	.word	0x0800ba3f
 800ba0c:	0800ba3f 	.word	0x0800ba3f
 800ba10:	0800ba3f 	.word	0x0800ba3f
 800ba14:	0800ba37 	.word	0x0800ba37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba18:	f7fc fbd4 	bl	80081c4 <HAL_RCC_GetPCLK1Freq>
 800ba1c:	61b8      	str	r0, [r7, #24]
        break;
 800ba1e:	e013      	b.n	800ba48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba20:	f7fc fbe4 	bl	80081ec <HAL_RCC_GetPCLK2Freq>
 800ba24:	61b8      	str	r0, [r7, #24]
        break;
 800ba26:	e00f      	b.n	800ba48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba28:	4b1d      	ldr	r3, [pc, #116]	@ (800baa0 <UART_SetConfig+0x4c4>)
 800ba2a:	61bb      	str	r3, [r7, #24]
        break;
 800ba2c:	e00c      	b.n	800ba48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba2e:	f7fc faf7 	bl	8008020 <HAL_RCC_GetSysClockFreq>
 800ba32:	61b8      	str	r0, [r7, #24]
        break;
 800ba34:	e008      	b.n	800ba48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba3a:	61bb      	str	r3, [r7, #24]
        break;
 800ba3c:	e004      	b.n	800ba48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	77bb      	strb	r3, [r7, #30]
        break;
 800ba46:	bf00      	nop
    }

    if (pclk != 0U)
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d018      	beq.n	800ba80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	085a      	lsrs	r2, r3, #1
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	441a      	add	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2b0f      	cmp	r3, #15
 800ba66:	d909      	bls.n	800ba7c <UART_SetConfig+0x4a0>
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba6e:	d205      	bcs.n	800ba7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	60da      	str	r2, [r3, #12]
 800ba7a:	e001      	b.n	800ba80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ba8c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3720      	adds	r7, #32
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	40007c00 	.word	0x40007c00
 800ba9c:	40023800 	.word	0x40023800
 800baa0:	00f42400 	.word	0x00f42400

0800baa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab0:	f003 0308 	and.w	r3, r3, #8
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00a      	beq.n	800bace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	430a      	orrs	r2, r1
 800bacc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00a      	beq.n	800baf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	430a      	orrs	r2, r1
 800baee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb16:	f003 0304 	and.w	r3, r3, #4
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	430a      	orrs	r2, r1
 800bb32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb38:	f003 0310 	and.w	r3, r3, #16
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00a      	beq.n	800bb56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	430a      	orrs	r2, r1
 800bb54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00a      	beq.n	800bb78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	430a      	orrs	r2, r1
 800bb76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d01a      	beq.n	800bbba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	430a      	orrs	r2, r1
 800bb98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bba2:	d10a      	bne.n	800bbba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	430a      	orrs	r2, r1
 800bbb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00a      	beq.n	800bbdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	605a      	str	r2, [r3, #4]
  }
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08c      	sub	sp, #48	@ 0x30
 800bbec:	af02      	add	r7, sp, #8
 800bbee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbf8:	f7f6 fbb2 	bl	8002360 <HAL_GetTick>
 800bbfc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0308 	and.w	r3, r3, #8
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d12e      	bne.n	800bc6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	2200      	movs	r2, #0
 800bc16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f83b 	bl	800bc96 <UART_WaitOnFlagUntilTimeout>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d021      	beq.n	800bc6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc3a:	623b      	str	r3, [r7, #32]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	461a      	mov	r2, r3
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	61fb      	str	r3, [r7, #28]
 800bc46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	69b9      	ldr	r1, [r7, #24]
 800bc4a:	69fa      	ldr	r2, [r7, #28]
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	617b      	str	r3, [r7, #20]
   return(result);
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e6      	bne.n	800bc26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc66:	2303      	movs	r3, #3
 800bc68:	e011      	b.n	800bc8e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2220      	movs	r2, #32
 800bc74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3728      	adds	r7, #40	@ 0x28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	603b      	str	r3, [r7, #0]
 800bca2:	4613      	mov	r3, r2
 800bca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bca6:	e04f      	b.n	800bd48 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcae:	d04b      	beq.n	800bd48 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcb0:	f7f6 fb56 	bl	8002360 <HAL_GetTick>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d302      	bcc.n	800bcc6 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	e04e      	b.n	800bd68 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d037      	beq.n	800bd48 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b80      	cmp	r3, #128	@ 0x80
 800bcdc:	d034      	beq.n	800bd48 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b40      	cmp	r3, #64	@ 0x40
 800bce2:	d031      	beq.n	800bd48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	f003 0308 	and.w	r3, r3, #8
 800bcee:	2b08      	cmp	r3, #8
 800bcf0:	d110      	bne.n	800bd14 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2208      	movs	r2, #8
 800bcf8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f000 f8fe 	bl	800befc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2208      	movs	r2, #8
 800bd04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e029      	b.n	800bd68 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd22:	d111      	bne.n	800bd48 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f000 f8e4 	bl	800befc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2220      	movs	r2, #32
 800bd38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bd44:	2303      	movs	r3, #3
 800bd46:	e00f      	b.n	800bd68 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	69da      	ldr	r2, [r3, #28]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	4013      	ands	r3, r2
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	bf0c      	ite	eq
 800bd58:	2301      	moveq	r3, #1
 800bd5a:	2300      	movne	r3, #0
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	461a      	mov	r2, r3
 800bd60:	79fb      	ldrb	r3, [r7, #7]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d0a0      	beq.n	800bca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b096      	sub	sp, #88	@ 0x58
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	88fa      	ldrh	r2, [r7, #6]
 800bd88:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2222      	movs	r2, #34	@ 0x22
 800bd98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d028      	beq.n	800bdf6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bda8:	4a3e      	ldr	r2, [pc, #248]	@ (800bea4 <UART_Start_Receive_DMA+0x134>)
 800bdaa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdb0:	4a3d      	ldr	r2, [pc, #244]	@ (800bea8 <UART_Start_Receive_DMA+0x138>)
 800bdb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdb8:	4a3c      	ldr	r2, [pc, #240]	@ (800beac <UART_Start_Receive_DMA+0x13c>)
 800bdba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3324      	adds	r3, #36	@ 0x24
 800bdce:	4619      	mov	r1, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	f7f7 fb12 	bl	8003400 <HAL_DMA_Start_IT>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d009      	beq.n	800bdf6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2210      	movs	r2, #16
 800bde6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2220      	movs	r2, #32
 800bdee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e051      	b.n	800be9a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d018      	beq.n	800be30 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be06:	e853 3f00 	ldrex	r3, [r3]
 800be0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be12:	657b      	str	r3, [r7, #84]	@ 0x54
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be1e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be24:	e841 2300 	strex	r3, r2, [r1]
 800be28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e6      	bne.n	800bdfe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3308      	adds	r3, #8
 800be36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3a:	e853 3f00 	ldrex	r3, [r3]
 800be3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be42:	f043 0301 	orr.w	r3, r3, #1
 800be46:	653b      	str	r3, [r7, #80]	@ 0x50
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3308      	adds	r3, #8
 800be4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be50:	637a      	str	r2, [r7, #52]	@ 0x34
 800be52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be58:	e841 2300 	strex	r3, r2, [r1]
 800be5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1e5      	bne.n	800be30 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3308      	adds	r3, #8
 800be6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	613b      	str	r3, [r7, #16]
   return(result);
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3308      	adds	r3, #8
 800be82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be84:	623a      	str	r2, [r7, #32]
 800be86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	69f9      	ldr	r1, [r7, #28]
 800be8a:	6a3a      	ldr	r2, [r7, #32]
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	61bb      	str	r3, [r7, #24]
   return(result);
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e5      	bne.n	800be64 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3758      	adds	r7, #88	@ 0x58
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	0800bfc5 	.word	0x0800bfc5
 800bea8:	0800c123 	.word	0x0800c123
 800beac:	0800c195 	.word	0x0800c195

0800beb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b089      	sub	sp, #36	@ 0x24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	e853 3f00 	ldrex	r3, [r3]
 800bec4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800becc:	61fb      	str	r3, [r7, #28]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	461a      	mov	r2, r3
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	61bb      	str	r3, [r7, #24]
 800bed8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beda:	6979      	ldr	r1, [r7, #20]
 800bedc:	69ba      	ldr	r2, [r7, #24]
 800bede:	e841 2300 	strex	r3, r2, [r1]
 800bee2:	613b      	str	r3, [r7, #16]
   return(result);
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1e6      	bne.n	800beb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2220      	movs	r2, #32
 800beee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800bef0:	bf00      	nop
 800bef2:	3724      	adds	r7, #36	@ 0x24
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800befc:	b480      	push	{r7}
 800befe:	b095      	sub	sp, #84	@ 0x54
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0c:	e853 3f00 	ldrex	r3, [r3]
 800bf10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf22:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf2a:	e841 2300 	strex	r3, r2, [r1]
 800bf2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1e6      	bne.n	800bf04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3e:	6a3b      	ldr	r3, [r7, #32]
 800bf40:	e853 3f00 	ldrex	r3, [r3]
 800bf44:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	f023 0301 	bic.w	r3, r3, #1
 800bf4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3308      	adds	r3, #8
 800bf54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf5e:	e841 2300 	strex	r3, r2, [r1]
 800bf62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1e5      	bne.n	800bf36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d118      	bne.n	800bfa4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	f023 0310 	bic.w	r3, r3, #16
 800bf86:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf90:	61bb      	str	r3, [r7, #24]
 800bf92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6979      	ldr	r1, [r7, #20]
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e6      	bne.n	800bf72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2220      	movs	r2, #32
 800bfa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bfb8:	bf00      	nop
 800bfba:	3754      	adds	r7, #84	@ 0x54
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b09c      	sub	sp, #112	@ 0x70
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	69db      	ldr	r3, [r3, #28]
 800bfd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfda:	d071      	beq.n	800c0c0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bfdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfec:	e853 3f00 	ldrex	r3, [r3]
 800bff0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bff2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	461a      	mov	r2, r3
 800c000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c002:	657b      	str	r3, [r7, #84]	@ 0x54
 800c004:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c006:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c008:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c00a:	e841 2300 	strex	r3, r2, [r1]
 800c00e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1e6      	bne.n	800bfe4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3308      	adds	r3, #8
 800c01c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c020:	e853 3f00 	ldrex	r3, [r3]
 800c024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c028:	f023 0301 	bic.w	r3, r3, #1
 800c02c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c02e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3308      	adds	r3, #8
 800c034:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c036:	643a      	str	r2, [r7, #64]	@ 0x40
 800c038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c03c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e5      	bne.n	800c016 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c04a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3308      	adds	r3, #8
 800c050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	e853 3f00 	ldrex	r3, [r3]
 800c058:	61fb      	str	r3, [r7, #28]
   return(result);
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c060:	663b      	str	r3, [r7, #96]	@ 0x60
 800c062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3308      	adds	r3, #8
 800c068:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c06a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c06c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e5      	bne.n	800c04a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c07e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d118      	bne.n	800c0c0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c08e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	e853 3f00 	ldrex	r3, [r3]
 800c09a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	f023 0310 	bic.w	r3, r3, #16
 800c0a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0ac:	61bb      	str	r3, [r7, #24]
 800c0ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b0:	6979      	ldr	r1, [r7, #20]
 800c0b2:	69ba      	ldr	r2, [r7, #24]
 800c0b4:	e841 2300 	strex	r3, r2, [r1]
 800c0b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e6      	bne.n	800c08e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d122      	bne.n	800c114 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800c0ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800c0e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c0e6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d204      	bcs.n	800c0f8 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800c0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0f0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800c0f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c0fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c100:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c104:	b29b      	uxth	r3, r3
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	b29b      	uxth	r3, r3
 800c10a:	4619      	mov	r1, r3
 800c10c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c10e:	f7ff fa59 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c112:	e002      	b.n	800c11a <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800c114:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c116:	f013 ffa5 	bl	8020064 <HAL_UART_RxCpltCallback>
}
 800c11a:	bf00      	nop
 800c11c:	3770      	adds	r7, #112	@ 0x70
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c12e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d123      	bne.n	800c186 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c144:	085b      	lsrs	r3, r3, #1
 800c146:	b29a      	uxth	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c15c:	897a      	ldrh	r2, [r7, #10]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d803      	bhi.n	800c16a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	897a      	ldrh	r2, [r7, #10]
 800c166:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c176:	b29b      	uxth	r3, r3
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	4619      	mov	r1, r3
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f7ff fa20 	bl	800b5c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c184:	e002      	b.n	800c18c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800c186:	68f8      	ldr	r0, [r7, #12]
 800c188:	f7ff fa08 	bl	800b59c <HAL_UART_RxHalfCpltCallback>
}
 800c18c:	bf00      	nop
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c1a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1ba:	2b80      	cmp	r3, #128	@ 0x80
 800c1bc:	d109      	bne.n	800c1d2 <UART_DMAError+0x3e>
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	2b21      	cmp	r3, #33	@ 0x21
 800c1c2:	d106      	bne.n	800c1d2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800c1cc:	6978      	ldr	r0, [r7, #20]
 800c1ce:	f7ff fe6f 	bl	800beb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1dc:	2b40      	cmp	r3, #64	@ 0x40
 800c1de:	d109      	bne.n	800c1f4 <UART_DMAError+0x60>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2b22      	cmp	r3, #34	@ 0x22
 800c1e4:	d106      	bne.n	800c1f4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800c1ee:	6978      	ldr	r0, [r7, #20]
 800c1f0:	f7ff fe84 	bl	800befc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1fa:	f043 0210 	orr.w	r2, r3, #16
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c204:	6978      	ldr	r0, [r7, #20]
 800c206:	f7ff f9d3 	bl	800b5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c20a:	bf00      	nop
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c21e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f7ff f9c1 	bl	800b5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c22e:	bf00      	nop
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c236:	b480      	push	{r7}
 800c238:	b08f      	sub	sp, #60	@ 0x3c
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c242:	2b21      	cmp	r3, #33	@ 0x21
 800c244:	d14c      	bne.n	800c2e0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d132      	bne.n	800c2b8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	e853 3f00 	ldrex	r3, [r3]
 800c25e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c266:	637b      	str	r3, [r7, #52]	@ 0x34
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	461a      	mov	r2, r3
 800c26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c272:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c278:	e841 2300 	strex	r3, r2, [r1]
 800c27c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e6      	bne.n	800c252 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	e853 3f00 	ldrex	r3, [r3]
 800c290:	60bb      	str	r3, [r7, #8]
   return(result);
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c298:	633b      	str	r3, [r7, #48]	@ 0x30
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a2:	61bb      	str	r3, [r7, #24]
 800c2a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a6:	6979      	ldr	r1, [r7, #20]
 800c2a8:	69ba      	ldr	r2, [r7, #24]
 800c2aa:	e841 2300 	strex	r3, r2, [r1]
 800c2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1e6      	bne.n	800c284 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c2b6:	e013      	b.n	800c2e0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2bc:	781a      	ldrb	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c2e0:	bf00      	nop
 800c2e2:	373c      	adds	r7, #60	@ 0x3c
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b091      	sub	sp, #68	@ 0x44
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c2f8:	2b21      	cmp	r3, #33	@ 0x21
 800c2fa:	d151      	bne.n	800c3a0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c302:	b29b      	uxth	r3, r3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d132      	bne.n	800c36e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c310:	e853 3f00 	ldrex	r3, [r3]
 800c314:	623b      	str	r3, [r7, #32]
   return(result);
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c31c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	633b      	str	r3, [r7, #48]	@ 0x30
 800c328:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c32c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c32e:	e841 2300 	strex	r3, r2, [r1]
 800c332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1e6      	bne.n	800c308 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	e853 3f00 	ldrex	r3, [r3]
 800c346:	60fb      	str	r3, [r7, #12]
   return(result);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c34e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	461a      	mov	r2, r3
 800c356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c358:	61fb      	str	r3, [r7, #28]
 800c35a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	69b9      	ldr	r1, [r7, #24]
 800c35e:	69fa      	ldr	r2, [r7, #28]
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	617b      	str	r3, [r7, #20]
   return(result);
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e6      	bne.n	800c33a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c36c:	e018      	b.n	800c3a0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c372:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	461a      	mov	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c382:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c388:	1c9a      	adds	r2, r3, #2
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c394:	b29b      	uxth	r3, r3
 800c396:	3b01      	subs	r3, #1
 800c398:	b29a      	uxth	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c3a0:	bf00      	nop
 800c3a2:	3744      	adds	r7, #68	@ 0x44
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	e853 3f00 	ldrex	r3, [r3]
 800c3c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3c8:	61fb      	str	r3, [r7, #28]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	61bb      	str	r3, [r7, #24]
 800c3d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	6979      	ldr	r1, [r7, #20]
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	e841 2300 	strex	r3, r2, [r1]
 800c3de:	613b      	str	r3, [r7, #16]
   return(result);
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e6      	bne.n	800c3b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2220      	movs	r2, #32
 800c3ea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff f8c8 	bl	800b588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3f8:	bf00      	nop
 800c3fa:	3720      	adds	r7, #32
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800c406:	4b92      	ldr	r3, [pc, #584]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c408:	220a      	movs	r2, #10
 800c40a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800c40c:	4b90      	ldr	r3, [pc, #576]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c40e:	2200      	movs	r2, #0
 800c410:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800c412:	4b8f      	ldr	r3, [pc, #572]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c414:	2201      	movs	r2, #1
 800c416:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800c418:	4b8d      	ldr	r3, [pc, #564]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c41a:	2264      	movs	r2, #100	@ 0x64
 800c41c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c41e:	4b8d      	ldr	r3, [pc, #564]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c420:	22ff      	movs	r2, #255	@ 0xff
 800c422:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c424:	4b8b      	ldr	r3, [pc, #556]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c426:	22ff      	movs	r2, #255	@ 0xff
 800c428:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c42a:	4b8a      	ldr	r3, [pc, #552]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c42c:	22ff      	movs	r2, #255	@ 0xff
 800c42e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c430:	4b88      	ldr	r3, [pc, #544]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c432:	2200      	movs	r2, #0
 800c434:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800c436:	4b88      	ldr	r3, [pc, #544]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c438:	220a      	movs	r2, #10
 800c43a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800c43c:	4b86      	ldr	r3, [pc, #536]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c43e:	2200      	movs	r2, #0
 800c440:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800c442:	4b85      	ldr	r3, [pc, #532]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c444:	2201      	movs	r2, #1
 800c446:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800c448:	4b83      	ldr	r3, [pc, #524]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c44a:	2265      	movs	r2, #101	@ 0x65
 800c44c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c44e:	2100      	movs	r1, #0
 800c450:	2000      	movs	r0, #0
 800c452:	f006 ff71 	bl	8013338 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c456:	4b7e      	ldr	r3, [pc, #504]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	061a      	lsls	r2, r3, #24
 800c45c:	4b7c      	ldr	r3, [pc, #496]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c45e:	785b      	ldrb	r3, [r3, #1]
 800c460:	041b      	lsls	r3, r3, #16
 800c462:	431a      	orrs	r2, r3
 800c464:	4b7a      	ldr	r3, [pc, #488]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c466:	789b      	ldrb	r3, [r3, #2]
 800c468:	021b      	lsls	r3, r3, #8
 800c46a:	4313      	orrs	r3, r2
 800c46c:	4a78      	ldr	r2, [pc, #480]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c46e:	78d2      	ldrb	r2, [r2, #3]
 800c470:	4313      	orrs	r3, r2
 800c472:	061a      	lsls	r2, r3, #24
 800c474:	4b76      	ldr	r3, [pc, #472]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	0619      	lsls	r1, r3, #24
 800c47a:	4b75      	ldr	r3, [pc, #468]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c47c:	785b      	ldrb	r3, [r3, #1]
 800c47e:	041b      	lsls	r3, r3, #16
 800c480:	4319      	orrs	r1, r3
 800c482:	4b73      	ldr	r3, [pc, #460]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c484:	789b      	ldrb	r3, [r3, #2]
 800c486:	021b      	lsls	r3, r3, #8
 800c488:	430b      	orrs	r3, r1
 800c48a:	4971      	ldr	r1, [pc, #452]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c48c:	78c9      	ldrb	r1, [r1, #3]
 800c48e:	430b      	orrs	r3, r1
 800c490:	021b      	lsls	r3, r3, #8
 800c492:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c496:	431a      	orrs	r2, r3
 800c498:	4b6d      	ldr	r3, [pc, #436]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	0619      	lsls	r1, r3, #24
 800c49e:	4b6c      	ldr	r3, [pc, #432]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c4a0:	785b      	ldrb	r3, [r3, #1]
 800c4a2:	041b      	lsls	r3, r3, #16
 800c4a4:	4319      	orrs	r1, r3
 800c4a6:	4b6a      	ldr	r3, [pc, #424]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c4a8:	789b      	ldrb	r3, [r3, #2]
 800c4aa:	021b      	lsls	r3, r3, #8
 800c4ac:	430b      	orrs	r3, r1
 800c4ae:	4968      	ldr	r1, [pc, #416]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c4b0:	78c9      	ldrb	r1, [r1, #3]
 800c4b2:	430b      	orrs	r3, r1
 800c4b4:	0a1b      	lsrs	r3, r3, #8
 800c4b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c4ba:	431a      	orrs	r2, r3
 800c4bc:	4b64      	ldr	r3, [pc, #400]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	0619      	lsls	r1, r3, #24
 800c4c2:	4b63      	ldr	r3, [pc, #396]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c4c4:	785b      	ldrb	r3, [r3, #1]
 800c4c6:	041b      	lsls	r3, r3, #16
 800c4c8:	4319      	orrs	r1, r3
 800c4ca:	4b61      	ldr	r3, [pc, #388]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c4cc:	789b      	ldrb	r3, [r3, #2]
 800c4ce:	021b      	lsls	r3, r3, #8
 800c4d0:	430b      	orrs	r3, r1
 800c4d2:	495f      	ldr	r1, [pc, #380]	@ (800c650 <MX_LWIP_Init+0x250>)
 800c4d4:	78c9      	ldrb	r1, [r1, #3]
 800c4d6:	430b      	orrs	r3, r1
 800c4d8:	0e1b      	lsrs	r3, r3, #24
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	4a5f      	ldr	r2, [pc, #380]	@ (800c65c <MX_LWIP_Init+0x25c>)
 800c4de:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c4e0:	4b5c      	ldr	r3, [pc, #368]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	061a      	lsls	r2, r3, #24
 800c4e6:	4b5b      	ldr	r3, [pc, #364]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c4e8:	785b      	ldrb	r3, [r3, #1]
 800c4ea:	041b      	lsls	r3, r3, #16
 800c4ec:	431a      	orrs	r2, r3
 800c4ee:	4b59      	ldr	r3, [pc, #356]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c4f0:	789b      	ldrb	r3, [r3, #2]
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	4a57      	ldr	r2, [pc, #348]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c4f8:	78d2      	ldrb	r2, [r2, #3]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	061a      	lsls	r2, r3, #24
 800c4fe:	4b55      	ldr	r3, [pc, #340]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	0619      	lsls	r1, r3, #24
 800c504:	4b53      	ldr	r3, [pc, #332]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c506:	785b      	ldrb	r3, [r3, #1]
 800c508:	041b      	lsls	r3, r3, #16
 800c50a:	4319      	orrs	r1, r3
 800c50c:	4b51      	ldr	r3, [pc, #324]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c50e:	789b      	ldrb	r3, [r3, #2]
 800c510:	021b      	lsls	r3, r3, #8
 800c512:	430b      	orrs	r3, r1
 800c514:	494f      	ldr	r1, [pc, #316]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c516:	78c9      	ldrb	r1, [r1, #3]
 800c518:	430b      	orrs	r3, r1
 800c51a:	021b      	lsls	r3, r3, #8
 800c51c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c520:	431a      	orrs	r2, r3
 800c522:	4b4c      	ldr	r3, [pc, #304]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	0619      	lsls	r1, r3, #24
 800c528:	4b4a      	ldr	r3, [pc, #296]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c52a:	785b      	ldrb	r3, [r3, #1]
 800c52c:	041b      	lsls	r3, r3, #16
 800c52e:	4319      	orrs	r1, r3
 800c530:	4b48      	ldr	r3, [pc, #288]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c532:	789b      	ldrb	r3, [r3, #2]
 800c534:	021b      	lsls	r3, r3, #8
 800c536:	430b      	orrs	r3, r1
 800c538:	4946      	ldr	r1, [pc, #280]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c53a:	78c9      	ldrb	r1, [r1, #3]
 800c53c:	430b      	orrs	r3, r1
 800c53e:	0a1b      	lsrs	r3, r3, #8
 800c540:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c544:	431a      	orrs	r2, r3
 800c546:	4b43      	ldr	r3, [pc, #268]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	0619      	lsls	r1, r3, #24
 800c54c:	4b41      	ldr	r3, [pc, #260]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c54e:	785b      	ldrb	r3, [r3, #1]
 800c550:	041b      	lsls	r3, r3, #16
 800c552:	4319      	orrs	r1, r3
 800c554:	4b3f      	ldr	r3, [pc, #252]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c556:	789b      	ldrb	r3, [r3, #2]
 800c558:	021b      	lsls	r3, r3, #8
 800c55a:	430b      	orrs	r3, r1
 800c55c:	493d      	ldr	r1, [pc, #244]	@ (800c654 <MX_LWIP_Init+0x254>)
 800c55e:	78c9      	ldrb	r1, [r1, #3]
 800c560:	430b      	orrs	r3, r1
 800c562:	0e1b      	lsrs	r3, r3, #24
 800c564:	4313      	orrs	r3, r2
 800c566:	4a3e      	ldr	r2, [pc, #248]	@ (800c660 <MX_LWIP_Init+0x260>)
 800c568:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c56a:	4b3b      	ldr	r3, [pc, #236]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	061a      	lsls	r2, r3, #24
 800c570:	4b39      	ldr	r3, [pc, #228]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c572:	785b      	ldrb	r3, [r3, #1]
 800c574:	041b      	lsls	r3, r3, #16
 800c576:	431a      	orrs	r2, r3
 800c578:	4b37      	ldr	r3, [pc, #220]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c57a:	789b      	ldrb	r3, [r3, #2]
 800c57c:	021b      	lsls	r3, r3, #8
 800c57e:	4313      	orrs	r3, r2
 800c580:	4a35      	ldr	r2, [pc, #212]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c582:	78d2      	ldrb	r2, [r2, #3]
 800c584:	4313      	orrs	r3, r2
 800c586:	061a      	lsls	r2, r3, #24
 800c588:	4b33      	ldr	r3, [pc, #204]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	0619      	lsls	r1, r3, #24
 800c58e:	4b32      	ldr	r3, [pc, #200]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c590:	785b      	ldrb	r3, [r3, #1]
 800c592:	041b      	lsls	r3, r3, #16
 800c594:	4319      	orrs	r1, r3
 800c596:	4b30      	ldr	r3, [pc, #192]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c598:	789b      	ldrb	r3, [r3, #2]
 800c59a:	021b      	lsls	r3, r3, #8
 800c59c:	430b      	orrs	r3, r1
 800c59e:	492e      	ldr	r1, [pc, #184]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5a0:	78c9      	ldrb	r1, [r1, #3]
 800c5a2:	430b      	orrs	r3, r1
 800c5a4:	021b      	lsls	r3, r3, #8
 800c5a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	4b2a      	ldr	r3, [pc, #168]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	0619      	lsls	r1, r3, #24
 800c5b2:	4b29      	ldr	r3, [pc, #164]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5b4:	785b      	ldrb	r3, [r3, #1]
 800c5b6:	041b      	lsls	r3, r3, #16
 800c5b8:	4319      	orrs	r1, r3
 800c5ba:	4b27      	ldr	r3, [pc, #156]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5bc:	789b      	ldrb	r3, [r3, #2]
 800c5be:	021b      	lsls	r3, r3, #8
 800c5c0:	430b      	orrs	r3, r1
 800c5c2:	4925      	ldr	r1, [pc, #148]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5c4:	78c9      	ldrb	r1, [r1, #3]
 800c5c6:	430b      	orrs	r3, r1
 800c5c8:	0a1b      	lsrs	r3, r3, #8
 800c5ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c5ce:	431a      	orrs	r2, r3
 800c5d0:	4b21      	ldr	r3, [pc, #132]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	0619      	lsls	r1, r3, #24
 800c5d6:	4b20      	ldr	r3, [pc, #128]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5d8:	785b      	ldrb	r3, [r3, #1]
 800c5da:	041b      	lsls	r3, r3, #16
 800c5dc:	4319      	orrs	r1, r3
 800c5de:	4b1e      	ldr	r3, [pc, #120]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5e0:	789b      	ldrb	r3, [r3, #2]
 800c5e2:	021b      	lsls	r3, r3, #8
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	491c      	ldr	r1, [pc, #112]	@ (800c658 <MX_LWIP_Init+0x258>)
 800c5e8:	78c9      	ldrb	r1, [r1, #3]
 800c5ea:	430b      	orrs	r3, r1
 800c5ec:	0e1b      	lsrs	r3, r3, #24
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	4a1c      	ldr	r2, [pc, #112]	@ (800c664 <MX_LWIP_Init+0x264>)
 800c5f2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800c668 <MX_LWIP_Init+0x268>)
 800c5f6:	9302      	str	r3, [sp, #8]
 800c5f8:	4b1c      	ldr	r3, [pc, #112]	@ (800c66c <MX_LWIP_Init+0x26c>)
 800c5fa:	9301      	str	r3, [sp, #4]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	4b18      	ldr	r3, [pc, #96]	@ (800c664 <MX_LWIP_Init+0x264>)
 800c602:	4a17      	ldr	r2, [pc, #92]	@ (800c660 <MX_LWIP_Init+0x260>)
 800c604:	4915      	ldr	r1, [pc, #84]	@ (800c65c <MX_LWIP_Init+0x25c>)
 800c606:	481a      	ldr	r0, [pc, #104]	@ (800c670 <MX_LWIP_Init+0x270>)
 800c608:	f007 fd2c 	bl	8014064 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c60c:	4818      	ldr	r0, [pc, #96]	@ (800c670 <MX_LWIP_Init+0x270>)
 800c60e:	f007 fedb 	bl	80143c8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c612:	4817      	ldr	r0, [pc, #92]	@ (800c670 <MX_LWIP_Init+0x270>)
 800c614:	f007 fee8 	bl	80143e8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c618:	4916      	ldr	r1, [pc, #88]	@ (800c674 <MX_LWIP_Init+0x274>)
 800c61a:	4815      	ldr	r0, [pc, #84]	@ (800c670 <MX_LWIP_Init+0x270>)
 800c61c:	f007 ffe6 	bl	80145ec <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c620:	2224      	movs	r2, #36	@ 0x24
 800c622:	2100      	movs	r1, #0
 800c624:	4814      	ldr	r0, [pc, #80]	@ (800c678 <MX_LWIP_Init+0x278>)
 800c626:	f013 ff97 	bl	8020558 <memset>
  attributes.name = "EthLink";
 800c62a:	4b13      	ldr	r3, [pc, #76]	@ (800c678 <MX_LWIP_Init+0x278>)
 800c62c:	4a13      	ldr	r2, [pc, #76]	@ (800c67c <MX_LWIP_Init+0x27c>)
 800c62e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c630:	4b11      	ldr	r3, [pc, #68]	@ (800c678 <MX_LWIP_Init+0x278>)
 800c632:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c636:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800c638:	4b0f      	ldr	r3, [pc, #60]	@ (800c678 <MX_LWIP_Init+0x278>)
 800c63a:	2210      	movs	r2, #16
 800c63c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800c63e:	4a0e      	ldr	r2, [pc, #56]	@ (800c678 <MX_LWIP_Init+0x278>)
 800c640:	490b      	ldr	r1, [pc, #44]	@ (800c670 <MX_LWIP_Init+0x270>)
 800c642:	480f      	ldr	r0, [pc, #60]	@ (800c680 <MX_LWIP_Init+0x280>)
 800c644:	f000 fdce 	bl	800d1e4 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c648:	bf00      	nop
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20000b48 	.word	0x20000b48
 800c654:	20000b4c 	.word	0x20000b4c
 800c658:	20000b50 	.word	0x20000b50
 800c65c:	20000b3c 	.word	0x20000b3c
 800c660:	20000b40 	.word	0x20000b40
 800c664:	20000b44 	.word	0x20000b44
 800c668:	08013249 	.word	0x08013249
 800c66c:	0800cbc5 	.word	0x0800cbc5
 800c670:	20000b08 	.word	0x20000b08
 800c674:	0800c685 	.word	0x0800c685
 800c678:	20000b54 	.word	0x20000b54
 800c67c:	0802133c 	.word	0x0802133c
 800c680:	0800ce9d 	.word	0x0800ce9d

0800c684 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c68c:	bf00      	nop
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c698:	b480      	push	{r7}
 800c69a:	b087      	sub	sp, #28
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c6aa:	2320      	movs	r3, #32
 800c6ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c6ae:	f3bf 8f4f 	dsb	sy
}
 800c6b2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c6b4:	e00b      	b.n	800c6ce <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c6b6:	4a0d      	ldr	r2, [pc, #52]	@ (800c6ec <SCB_InvalidateDCache_by_Addr+0x54>)
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dcf0      	bgt.n	800c6b6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c6d4:	f3bf 8f4f 	dsb	sy
}
 800c6d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c6da:	f3bf 8f6f 	isb	sy
}
 800c6de:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c6e0:	bf00      	nop
 800c6e2:	371c      	adds	r7, #28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr
 800c6ec:	e000ed00 	.word	0xe000ed00

0800c6f0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c6f8:	4b04      	ldr	r3, [pc, #16]	@ (800c70c <HAL_ETH_RxCpltCallback+0x1c>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f001 f897 	bl	800d830 <osSemaphoreRelease>
}
 800c702:	bf00      	nop
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	2000cf90 	.word	0x2000cf90

0800c710 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c718:	4b04      	ldr	r3, [pc, #16]	@ (800c72c <HAL_ETH_TxCpltCallback+0x1c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f001 f887 	bl	800d830 <osSemaphoreRelease>
}
 800c722:	bf00      	nop
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	2000cf94 	.word	0x2000cf94

0800c730 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f7f8 f874 	bl	8004826 <HAL_ETH_GetDMAError>
 800c73e:	4603      	mov	r3, r0
 800c740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c744:	2b80      	cmp	r3, #128	@ 0x80
 800c746:	d104      	bne.n	800c752 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c748:	4b04      	ldr	r3, [pc, #16]	@ (800c75c <HAL_ETH_ErrorCallback+0x2c>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4618      	mov	r0, r3
 800c74e:	f001 f86f 	bl	800d830 <osSemaphoreRelease>
  }
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	2000cf90 	.word	0x2000cf90

0800c760 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b0aa      	sub	sp, #168	@ 0xa8
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c77a:	f107 0310 	add.w	r3, r7, #16
 800c77e:	2264      	movs	r2, #100	@ 0x64
 800c780:	2100      	movs	r1, #0
 800c782:	4618      	mov	r0, r3
 800c784:	f013 fee8 	bl	8020558 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c788:	4b89      	ldr	r3, [pc, #548]	@ (800c9b0 <low_level_init+0x250>)
 800c78a:	4a8a      	ldr	r2, [pc, #552]	@ (800c9b4 <low_level_init+0x254>)
 800c78c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c78e:	2300      	movs	r3, #0
 800c790:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c792:	2380      	movs	r3, #128	@ 0x80
 800c794:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c796:	23e1      	movs	r3, #225	@ 0xe1
 800c798:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c79a:	2300      	movs	r3, #0
 800c79c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c7a6:	4a82      	ldr	r2, [pc, #520]	@ (800c9b0 <low_level_init+0x250>)
 800c7a8:	f107 0308 	add.w	r3, r7, #8
 800c7ac:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c7ae:	4b80      	ldr	r3, [pc, #512]	@ (800c9b0 <low_level_init+0x250>)
 800c7b0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c7b4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c7b6:	4b7e      	ldr	r3, [pc, #504]	@ (800c9b0 <low_level_init+0x250>)
 800c7b8:	4a7f      	ldr	r2, [pc, #508]	@ (800c9b8 <low_level_init+0x258>)
 800c7ba:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c7bc:	4b7c      	ldr	r3, [pc, #496]	@ (800c9b0 <low_level_init+0x250>)
 800c7be:	4a7f      	ldr	r2, [pc, #508]	@ (800c9bc <low_level_init+0x25c>)
 800c7c0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c7c2:	4b7b      	ldr	r3, [pc, #492]	@ (800c9b0 <low_level_init+0x250>)
 800c7c4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c7c8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c7ca:	4879      	ldr	r0, [pc, #484]	@ (800c9b0 <low_level_init+0x250>)
 800c7cc:	f7f7 f9e2 	bl	8003b94 <HAL_ETH_Init>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c7d6:	2238      	movs	r2, #56	@ 0x38
 800c7d8:	2100      	movs	r1, #0
 800c7da:	4879      	ldr	r0, [pc, #484]	@ (800c9c0 <low_level_init+0x260>)
 800c7dc:	f013 febc 	bl	8020558 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c7e0:	4b77      	ldr	r3, [pc, #476]	@ (800c9c0 <low_level_init+0x260>)
 800c7e2:	2221      	movs	r2, #33	@ 0x21
 800c7e4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c7e6:	4b76      	ldr	r3, [pc, #472]	@ (800c9c0 <low_level_init+0x260>)
 800c7e8:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c7ec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c7ee:	4b74      	ldr	r3, [pc, #464]	@ (800c9c0 <low_level_init+0x260>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c7f4:	4873      	ldr	r0, [pc, #460]	@ (800c9c4 <low_level_init+0x264>)
 800c7f6:	f007 fabd 	bl	8013d74 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2206      	movs	r2, #6
 800c7fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c802:	4b6b      	ldr	r3, [pc, #428]	@ (800c9b0 <low_level_init+0x250>)
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	781a      	ldrb	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c80e:	4b68      	ldr	r3, [pc, #416]	@ (800c9b0 <low_level_init+0x250>)
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	785a      	ldrb	r2, [r3, #1]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c81a:	4b65      	ldr	r3, [pc, #404]	@ (800c9b0 <low_level_init+0x250>)
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	789a      	ldrb	r2, [r3, #2]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c826:	4b62      	ldr	r3, [pc, #392]	@ (800c9b0 <low_level_init+0x250>)
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	78da      	ldrb	r2, [r3, #3]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c832:	4b5f      	ldr	r3, [pc, #380]	@ (800c9b0 <low_level_init+0x250>)
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	791a      	ldrb	r2, [r3, #4]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c83e:	4b5c      	ldr	r3, [pc, #368]	@ (800c9b0 <low_level_init+0x250>)
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	795a      	ldrb	r2, [r3, #5]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c850:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c858:	f043 030a 	orr.w	r3, r3, #10
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c864:	2200      	movs	r2, #0
 800c866:	2100      	movs	r1, #0
 800c868:	2001      	movs	r0, #1
 800c86a:	f000 fedf 	bl	800d62c <osSemaphoreNew>
 800c86e:	4603      	mov	r3, r0
 800c870:	4a55      	ldr	r2, [pc, #340]	@ (800c9c8 <low_level_init+0x268>)
 800c872:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c874:	2200      	movs	r2, #0
 800c876:	2100      	movs	r1, #0
 800c878:	2001      	movs	r0, #1
 800c87a:	f000 fed7 	bl	800d62c <osSemaphoreNew>
 800c87e:	4603      	mov	r3, r0
 800c880:	4a52      	ldr	r2, [pc, #328]	@ (800c9cc <low_level_init+0x26c>)
 800c882:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c884:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c888:	2224      	movs	r2, #36	@ 0x24
 800c88a:	2100      	movs	r1, #0
 800c88c:	4618      	mov	r0, r3
 800c88e:	f013 fe63 	bl	8020558 <memset>
  attributes.name = "EthIf";
 800c892:	4b4f      	ldr	r3, [pc, #316]	@ (800c9d0 <low_level_init+0x270>)
 800c894:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c896:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c89a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c89e:	2330      	movs	r3, #48	@ 0x30
 800c8a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c8a4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	6879      	ldr	r1, [r7, #4]
 800c8ac:	4849      	ldr	r0, [pc, #292]	@ (800c9d4 <low_level_init+0x274>)
 800c8ae:	f000 fc99 	bl	800d1e4 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c8b2:	4949      	ldr	r1, [pc, #292]	@ (800c9d8 <low_level_init+0x278>)
 800c8b4:	4849      	ldr	r0, [pc, #292]	@ (800c9dc <low_level_init+0x27c>)
 800c8b6:	f7f5 fc2c 	bl	8002112 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c8ba:	4848      	ldr	r0, [pc, #288]	@ (800c9dc <low_level_init+0x27c>)
 800c8bc:	f7f5 fc5b 	bl	8002176 <LAN8742_Init>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d006      	beq.n	800c8d4 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f007 fe60 	bl	801458c <netif_set_link_down>
    netif_set_down(netif);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f007 fdf7 	bl	80144c0 <netif_set_down>
 800c8d2:	e06a      	b.n	800c9aa <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c8d4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d164      	bne.n	800c9a6 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c8dc:	483f      	ldr	r0, [pc, #252]	@ (800c9dc <low_level_init+0x27c>)
 800c8de:	f7f5 fc97 	bl	8002210 <LAN8742_GetLinkState>
 800c8e2:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c8e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	dc06      	bgt.n	800c8fc <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f007 fe4c 	bl	801458c <netif_set_link_down>
      netif_set_down(netif);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f007 fde3 	bl	80144c0 <netif_set_down>
 800c8fa:	e056      	b.n	800c9aa <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c8fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c900:	3b02      	subs	r3, #2
 800c902:	2b03      	cmp	r3, #3
 800c904:	d82a      	bhi.n	800c95c <low_level_init+0x1fc>
 800c906:	a201      	add	r2, pc, #4	@ (adr r2, 800c90c <low_level_init+0x1ac>)
 800c908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90c:	0800c91d 	.word	0x0800c91d
 800c910:	0800c92f 	.word	0x0800c92f
 800c914:	0800c93f 	.word	0x0800c93f
 800c918:	0800c94f 	.word	0x0800c94f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c91c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c924:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c928:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c92c:	e01f      	b.n	800c96e <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c92e:	2300      	movs	r3, #0
 800c930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c934:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c93c:	e017      	b.n	800c96e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c93e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c946:	2300      	movs	r3, #0
 800c948:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c94c:	e00f      	b.n	800c96e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c94e:	2300      	movs	r3, #0
 800c950:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c954:	2300      	movs	r3, #0
 800c956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c95a:	e008      	b.n	800c96e <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c95c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c964:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c968:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c96c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c96e:	f107 0310 	add.w	r3, r7, #16
 800c972:	4619      	mov	r1, r3
 800c974:	480e      	ldr	r0, [pc, #56]	@ (800c9b0 <low_level_init+0x250>)
 800c976:	f7f7 fdf5 	bl	8004564 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c97a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c97e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c986:	f107 0310 	add.w	r3, r7, #16
 800c98a:	4619      	mov	r1, r3
 800c98c:	4808      	ldr	r0, [pc, #32]	@ (800c9b0 <low_level_init+0x250>)
 800c98e:	f7f7 fee0 	bl	8004752 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c992:	4807      	ldr	r0, [pc, #28]	@ (800c9b0 <low_level_init+0x250>)
 800c994:	f7f7 f998 	bl	8003cc8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f007 fd25 	bl	80143e8 <netif_set_up>
    netif_set_link_up(netif);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f007 fdc0 	bl	8014524 <netif_set_link_up>
 800c9a4:	e001      	b.n	800c9aa <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c9a6:	f7f4 fc1f 	bl	80011e8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c9aa:	37a8      	adds	r7, #168	@ 0xa8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	2000cf98 	.word	0x2000cf98
 800c9b4:	40028000 	.word	0x40028000
 800c9b8:	2000012c 	.word	0x2000012c
 800c9bc:	2000008c 	.word	0x2000008c
 800c9c0:	2000d048 	.word	0x2000d048
 800c9c4:	08024ea8 	.word	0x08024ea8
 800c9c8:	2000cf90 	.word	0x2000cf90
 800c9cc:	2000cf94 	.word	0x2000cf94
 800c9d0:	08021344 	.word	0x08021344
 800c9d4:	0800cb71 	.word	0x0800cb71
 800c9d8:	2000000c 	.word	0x2000000c
 800c9dc:	2000d080 	.word	0x2000d080

0800c9e0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b092      	sub	sp, #72	@ 0x48
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c9f8:	f107 030c 	add.w	r3, r7, #12
 800c9fc:	2230      	movs	r2, #48	@ 0x30
 800c9fe:	2100      	movs	r1, #0
 800ca00:	4618      	mov	r0, r3
 800ca02:	f013 fda9 	bl	8020558 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ca06:	f107 030c 	add.w	r3, r7, #12
 800ca0a:	2230      	movs	r2, #48	@ 0x30
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f013 fda2 	bl	8020558 <memset>

  for(q = p; q != NULL; q = q->next)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca18:	e045      	b.n	800caa6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ca1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca1c:	2b03      	cmp	r3, #3
 800ca1e:	d902      	bls.n	800ca26 <low_level_output+0x46>
      return ERR_IF;
 800ca20:	f06f 030b 	mvn.w	r3, #11
 800ca24:	e07f      	b.n	800cb26 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800ca26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca28:	6859      	ldr	r1, [r3, #4]
 800ca2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	4413      	add	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	3348      	adds	r3, #72	@ 0x48
 800ca36:	443b      	add	r3, r7
 800ca38:	3b3c      	subs	r3, #60	@ 0x3c
 800ca3a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ca3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca3e:	895b      	ldrh	r3, [r3, #10]
 800ca40:	4619      	mov	r1, r3
 800ca42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca44:	4613      	mov	r3, r2
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	4413      	add	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	3348      	adds	r3, #72	@ 0x48
 800ca4e:	443b      	add	r3, r7
 800ca50:	3b38      	subs	r3, #56	@ 0x38
 800ca52:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ca54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d011      	beq.n	800ca7e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ca5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca5c:	1e5a      	subs	r2, r3, #1
 800ca5e:	f107 000c 	add.w	r0, r7, #12
 800ca62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca64:	460b      	mov	r3, r1
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	440b      	add	r3, r1
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	18c1      	adds	r1, r0, r3
 800ca6e:	4613      	mov	r3, r2
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	3348      	adds	r3, #72	@ 0x48
 800ca78:	443b      	add	r3, r7
 800ca7a:	3b34      	subs	r3, #52	@ 0x34
 800ca7c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ca7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d109      	bne.n	800ca9a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ca86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca88:	4613      	mov	r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	4413      	add	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	3348      	adds	r3, #72	@ 0x48
 800ca92:	443b      	add	r3, r7
 800ca94:	3b34      	subs	r3, #52	@ 0x34
 800ca96:	2200      	movs	r2, #0
 800ca98:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ca9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800caa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	643b      	str	r3, [r7, #64]	@ 0x40
 800caa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1b6      	bne.n	800ca1a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	891b      	ldrh	r3, [r3, #8]
 800cab0:	461a      	mov	r2, r3
 800cab2:	4b1f      	ldr	r3, [pc, #124]	@ (800cb30 <low_level_output+0x150>)
 800cab4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800cab6:	4a1e      	ldr	r2, [pc, #120]	@ (800cb30 <low_level_output+0x150>)
 800cab8:	f107 030c 	add.w	r3, r7, #12
 800cabc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800cabe:	4a1c      	ldr	r2, [pc, #112]	@ (800cb30 <low_level_output+0x150>)
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800cac4:	6838      	ldr	r0, [r7, #0]
 800cac6:	f008 f9e5 	bl	8014e94 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800caca:	4919      	ldr	r1, [pc, #100]	@ (800cb30 <low_level_output+0x150>)
 800cacc:	4819      	ldr	r0, [pc, #100]	@ (800cb34 <low_level_output+0x154>)
 800cace:	f7f7 f9eb 	bl	8003ea8 <HAL_ETH_Transmit_IT>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d103      	bne.n	800cae0 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cade:	e01b      	b.n	800cb18 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800cae0:	4814      	ldr	r0, [pc, #80]	@ (800cb34 <low_level_output+0x154>)
 800cae2:	f7f7 fe93 	bl	800480c <HAL_ETH_GetError>
 800cae6:	4603      	mov	r3, r0
 800cae8:	f003 0302 	and.w	r3, r3, #2
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00d      	beq.n	800cb0c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800caf0:	4b11      	ldr	r3, [pc, #68]	@ (800cb38 <low_level_output+0x158>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fe33 	bl	800d764 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800cafe:	480d      	ldr	r0, [pc, #52]	@ (800cb34 <low_level_output+0x154>)
 800cb00:	f7f7 fb72 	bl	80041e8 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800cb04:	23fe      	movs	r3, #254	@ 0xfe
 800cb06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb0a:	e005      	b.n	800cb18 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800cb0c:	6838      	ldr	r0, [r7, #0]
 800cb0e:	f008 f91b 	bl	8014d48 <pbuf_free>
        errval =  ERR_IF;
 800cb12:	23f4      	movs	r3, #244	@ 0xf4
 800cb14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800cb18:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cb1c:	f113 0f02 	cmn.w	r3, #2
 800cb20:	d0d3      	beq.n	800caca <low_level_output+0xea>

  return errval;
 800cb22:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3748      	adds	r7, #72	@ 0x48
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	2000d048 	.word	0x2000d048
 800cb34:	2000cf98 	.word	0x2000cf98
 800cb38:	2000cf94 	.word	0x2000cf94

0800cb3c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cb44:	2300      	movs	r3, #0
 800cb46:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800cb48:	4b07      	ldr	r3, [pc, #28]	@ (800cb68 <low_level_input+0x2c>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d105      	bne.n	800cb5c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800cb50:	f107 030c 	add.w	r3, r7, #12
 800cb54:	4619      	mov	r1, r3
 800cb56:	4805      	ldr	r0, [pc, #20]	@ (800cb6c <low_level_input+0x30>)
 800cb58:	f7f7 fa02 	bl	8003f60 <HAL_ETH_ReadData>
  }

  return p;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	2000cf8c 	.word	0x2000cf8c
 800cb6c:	2000cf98 	.word	0x2000cf98

0800cb70 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cb80:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc0 <ethernetif_input+0x50>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 fdeb 	bl	800d764 <osSemaphoreAcquire>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1f5      	bne.n	800cb80 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800cb94:	68b8      	ldr	r0, [r7, #8]
 800cb96:	f7ff ffd1 	bl	800cb3c <low_level_input>
 800cb9a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00a      	beq.n	800cbb8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	68b9      	ldr	r1, [r7, #8]
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	4798      	blx	r3
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d002      	beq.n	800cbb8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f008 f8c8 	bl	8014d48 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1ea      	bne.n	800cb94 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cbbe:	e7df      	b.n	800cb80 <ethernetif_input+0x10>
 800cbc0:	2000cf90 	.word	0x2000cf90

0800cbc4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d106      	bne.n	800cbe0 <ethernetif_init+0x1c>
 800cbd2:	4b0e      	ldr	r3, [pc, #56]	@ (800cc0c <ethernetif_init+0x48>)
 800cbd4:	f240 220d 	movw	r2, #525	@ 0x20d
 800cbd8:	490d      	ldr	r1, [pc, #52]	@ (800cc10 <ethernetif_init+0x4c>)
 800cbda:	480e      	ldr	r0, [pc, #56]	@ (800cc14 <ethernetif_init+0x50>)
 800cbdc:	f013 fb64 	bl	80202a8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2273      	movs	r2, #115	@ 0x73
 800cbe4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2274      	movs	r2, #116	@ 0x74
 800cbec:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a09      	ldr	r2, [pc, #36]	@ (800cc18 <ethernetif_init+0x54>)
 800cbf4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a08      	ldr	r2, [pc, #32]	@ (800cc1c <ethernetif_init+0x58>)
 800cbfa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7ff fdaf 	bl	800c760 <low_level_init>

  return ERR_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	0802134c 	.word	0x0802134c
 800cc10:	08021368 	.word	0x08021368
 800cc14:	08021378 	.word	0x08021378
 800cc18:	0801ca09 	.word	0x0801ca09
 800cc1c:	0800c9e1 	.word	0x0800c9e1

0800cc20 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800cc2c:	68f9      	ldr	r1, [r7, #12]
 800cc2e:	4809      	ldr	r0, [pc, #36]	@ (800cc54 <pbuf_free_custom+0x34>)
 800cc30:	f007 f9c2 	bl	8013fb8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800cc34:	4b08      	ldr	r3, [pc, #32]	@ (800cc58 <pbuf_free_custom+0x38>)
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d107      	bne.n	800cc4c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800cc3c:	4b06      	ldr	r3, [pc, #24]	@ (800cc58 <pbuf_free_custom+0x38>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800cc42:	4b06      	ldr	r3, [pc, #24]	@ (800cc5c <pbuf_free_custom+0x3c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fdf2 	bl	800d830 <osSemaphoreRelease>
  }
}
 800cc4c:	bf00      	nop
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	08024ea8 	.word	0x08024ea8
 800cc58:	2000cf8c 	.word	0x2000cf8c
 800cc5c:	2000cf90 	.word	0x2000cf90

0800cc60 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cc64:	f7f5 fb7c 	bl	8002360 <HAL_GetTick>
 800cc68:	4603      	mov	r3, r0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08e      	sub	sp, #56	@ 0x38
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	601a      	str	r2, [r3, #0]
 800cc80:	605a      	str	r2, [r3, #4]
 800cc82:	609a      	str	r2, [r3, #8]
 800cc84:	60da      	str	r2, [r3, #12]
 800cc86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a56      	ldr	r2, [pc, #344]	@ (800cde8 <HAL_ETH_MspInit+0x178>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	f040 80a6 	bne.w	800cde0 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800cc94:	4b55      	ldr	r3, [pc, #340]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cc96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc98:	4a54      	ldr	r2, [pc, #336]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cc9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cc9e:	6313      	str	r3, [r2, #48]	@ 0x30
 800cca0:	4b52      	ldr	r3, [pc, #328]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cca8:	623b      	str	r3, [r7, #32]
 800ccaa:	6a3b      	ldr	r3, [r7, #32]
 800ccac:	4b4f      	ldr	r3, [pc, #316]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccb0:	4a4e      	ldr	r2, [pc, #312]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ccb6:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccb8:	4b4c      	ldr	r3, [pc, #304]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ccc0:	61fb      	str	r3, [r7, #28]
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	4b49      	ldr	r3, [pc, #292]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccc8:	4a48      	ldr	r2, [pc, #288]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ccce:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccd0:	4b46      	ldr	r3, [pc, #280]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ccd8:	61bb      	str	r3, [r7, #24]
 800ccda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccdc:	4b43      	ldr	r3, [pc, #268]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cce0:	4a42      	ldr	r2, [pc, #264]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cce2:	f043 0304 	orr.w	r3, r3, #4
 800cce6:	6313      	str	r3, [r2, #48]	@ 0x30
 800cce8:	4b40      	ldr	r3, [pc, #256]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	617b      	str	r3, [r7, #20]
 800ccf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ccf4:	4b3d      	ldr	r3, [pc, #244]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccf8:	4a3c      	ldr	r2, [pc, #240]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800ccfa:	f043 0301 	orr.w	r3, r3, #1
 800ccfe:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd00:	4b3a      	ldr	r3, [pc, #232]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cd02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	613b      	str	r3, [r7, #16]
 800cd0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd0c:	4b37      	ldr	r3, [pc, #220]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cd0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd10:	4a36      	ldr	r2, [pc, #216]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cd12:	f043 0302 	orr.w	r3, r3, #2
 800cd16:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd18:	4b34      	ldr	r3, [pc, #208]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cd1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd1c:	f003 0302 	and.w	r3, r3, #2
 800cd20:	60fb      	str	r3, [r7, #12]
 800cd22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cd24:	4b31      	ldr	r3, [pc, #196]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cd26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd28:	4a30      	ldr	r2, [pc, #192]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cd2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd2e:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd30:	4b2e      	ldr	r3, [pc, #184]	@ (800cdec <HAL_ETH_MspInit+0x17c>)
 800cd32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd38:	60bb      	str	r3, [r7, #8]
 800cd3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800cd3c:	2332      	movs	r3, #50	@ 0x32
 800cd3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd40:	2302      	movs	r3, #2
 800cd42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd44:	2300      	movs	r3, #0
 800cd46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd4c:	230b      	movs	r3, #11
 800cd4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd54:	4619      	mov	r1, r3
 800cd56:	4826      	ldr	r0, [pc, #152]	@ (800cdf0 <HAL_ETH_MspInit+0x180>)
 800cd58:	f7f8 f992 	bl	8005080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800cd5c:	2386      	movs	r3, #134	@ 0x86
 800cd5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd60:	2302      	movs	r3, #2
 800cd62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd64:	2300      	movs	r3, #0
 800cd66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd6c:	230b      	movs	r3, #11
 800cd6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd74:	4619      	mov	r1, r3
 800cd76:	481f      	ldr	r0, [pc, #124]	@ (800cdf4 <HAL_ETH_MspInit+0x184>)
 800cd78:	f7f8 f982 	bl	8005080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cd7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd82:	2302      	movs	r3, #2
 800cd84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd8e:	230b      	movs	r3, #11
 800cd90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd96:	4619      	mov	r1, r3
 800cd98:	4817      	ldr	r0, [pc, #92]	@ (800cdf8 <HAL_ETH_MspInit+0x188>)
 800cd9a:	f7f8 f971 	bl	8005080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800cd9e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800cda2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cda4:	2302      	movs	r3, #2
 800cda6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdac:	2303      	movs	r3, #3
 800cdae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cdb0:	230b      	movs	r3, #11
 800cdb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cdb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdb8:	4619      	mov	r1, r3
 800cdba:	4810      	ldr	r0, [pc, #64]	@ (800cdfc <HAL_ETH_MspInit+0x18c>)
 800cdbc:	f7f8 f960 	bl	8005080 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2105      	movs	r1, #5
 800cdc4:	203d      	movs	r0, #61	@ 0x3d
 800cdc6:	f7f6 f839 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800cdca:	203d      	movs	r0, #61	@ 0x3d
 800cdcc:	f7f6 f852 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	2105      	movs	r1, #5
 800cdd4:	203e      	movs	r0, #62	@ 0x3e
 800cdd6:	f7f6 f831 	bl	8002e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800cdda:	203e      	movs	r0, #62	@ 0x3e
 800cddc:	f7f6 f84a 	bl	8002e74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800cde0:	bf00      	nop
 800cde2:	3738      	adds	r7, #56	@ 0x38
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	40028000 	.word	0x40028000
 800cdec:	40023800 	.word	0x40023800
 800cdf0:	40020800 	.word	0x40020800
 800cdf4:	40020000 	.word	0x40020000
 800cdf8:	40020400 	.word	0x40020400
 800cdfc:	40021800 	.word	0x40021800

0800ce00 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ce04:	4802      	ldr	r0, [pc, #8]	@ (800ce10 <ETH_PHY_IO_Init+0x10>)
 800ce06:	f7f7 fcbf 	bl	8004788 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	2000cf98 	.word	0x2000cf98

0800ce14 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ce14:	b480      	push	{r7}
 800ce16:	af00      	add	r7, sp, #0
  return 0;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	68f9      	ldr	r1, [r7, #12]
 800ce36:	4807      	ldr	r0, [pc, #28]	@ (800ce54 <ETH_PHY_IO_ReadReg+0x30>)
 800ce38:	f7f7 fb00 	bl	800443c <HAL_ETH_ReadPHYRegister>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d002      	beq.n	800ce48 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ce42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce46:	e000      	b.n	800ce4a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	2000cf98 	.word	0x2000cf98

0800ce58 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	68f9      	ldr	r1, [r7, #12]
 800ce6a:	4807      	ldr	r0, [pc, #28]	@ (800ce88 <ETH_PHY_IO_WriteReg+0x30>)
 800ce6c:	f7f7 fb31 	bl	80044d2 <HAL_ETH_WritePHYRegister>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce7a:	e000      	b.n	800ce7e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	2000cf98 	.word	0x2000cf98

0800ce8c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ce90:	f7f5 fa66 	bl	8002360 <HAL_GetTick>
 800ce94:	4603      	mov	r3, r0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	bd80      	pop	{r7, pc}
	...

0800ce9c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b0a0      	sub	sp, #128	@ 0x80
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800cea4:	f107 0308 	add.w	r3, r7, #8
 800cea8:	2264      	movs	r2, #100	@ 0x64
 800ceaa:	2100      	movs	r1, #0
 800ceac:	4618      	mov	r0, r3
 800ceae:	f013 fb53 	bl	8020558 <memset>
  int32_t PHYLinkState = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ceba:	2300      	movs	r3, #0
 800cebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cebe:	2300      	movs	r3, #0
 800cec0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cec6:	483a      	ldr	r0, [pc, #232]	@ (800cfb0 <ethernet_link_thread+0x114>)
 800cec8:	f7f5 f9a2 	bl	8002210 <LAN8742_GetLinkState>
 800cecc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800cece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ced0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ced4:	089b      	lsrs	r3, r3, #2
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00c      	beq.n	800cefa <ethernet_link_thread+0x5e>
 800cee0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	dc09      	bgt.n	800cefa <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800cee6:	4833      	ldr	r0, [pc, #204]	@ (800cfb4 <ethernet_link_thread+0x118>)
 800cee8:	f7f6 ff5e 	bl	8003da8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ceec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ceee:	f007 fae7 	bl	80144c0 <netif_set_down>
    netif_set_link_down(netif);
 800cef2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cef4:	f007 fb4a 	bl	801458c <netif_set_link_down>
 800cef8:	e055      	b.n	800cfa6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800cefa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cefc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cf00:	f003 0304 	and.w	r3, r3, #4
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d14e      	bne.n	800cfa6 <ethernet_link_thread+0x10a>
 800cf08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	dd4b      	ble.n	800cfa6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800cf0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf10:	3b02      	subs	r3, #2
 800cf12:	2b03      	cmp	r3, #3
 800cf14:	d82a      	bhi.n	800cf6c <ethernet_link_thread+0xd0>
 800cf16:	a201      	add	r2, pc, #4	@ (adr r2, 800cf1c <ethernet_link_thread+0x80>)
 800cf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1c:	0800cf2d 	.word	0x0800cf2d
 800cf20:	0800cf3f 	.word	0x0800cf3f
 800cf24:	0800cf4f 	.word	0x0800cf4f
 800cf28:	0800cf5f 	.word	0x0800cf5f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800cf2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf30:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800cf32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cf36:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf3c:	e017      	b.n	800cf6e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800cf42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cf46:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf4c:	e00f      	b.n	800cf6e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800cf4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf52:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800cf54:	2300      	movs	r3, #0
 800cf56:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf5c:	e007      	b.n	800cf6e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800cf62:	2300      	movs	r3, #0
 800cf64:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf66:	2301      	movs	r3, #1
 800cf68:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf6a:	e000      	b.n	800cf6e <ethernet_link_thread+0xd2>
    default:
      break;
 800cf6c:	bf00      	nop
    }

    if(linkchanged)
 800cf6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d018      	beq.n	800cfa6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800cf74:	f107 0308 	add.w	r3, r7, #8
 800cf78:	4619      	mov	r1, r3
 800cf7a:	480e      	ldr	r0, [pc, #56]	@ (800cfb4 <ethernet_link_thread+0x118>)
 800cf7c:	f7f7 faf2 	bl	8004564 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800cf80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf82:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800cf84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf86:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800cf88:	f107 0308 	add.w	r3, r7, #8
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	4809      	ldr	r0, [pc, #36]	@ (800cfb4 <ethernet_link_thread+0x118>)
 800cf90:	f7f7 fbdf 	bl	8004752 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800cf94:	4807      	ldr	r0, [pc, #28]	@ (800cfb4 <ethernet_link_thread+0x118>)
 800cf96:	f7f6 fe97 	bl	8003cc8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800cf9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf9c:	f007 fa24 	bl	80143e8 <netif_set_up>
      netif_set_link_up(netif);
 800cfa0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cfa2:	f007 fabf 	bl	8014524 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800cfa6:	2064      	movs	r0, #100	@ 0x64
 800cfa8:	f000 f9ca 	bl	800d340 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cfac:	e78b      	b.n	800cec6 <ethernet_link_thread+0x2a>
 800cfae:	bf00      	nop
 800cfb0:	2000d080 	.word	0x2000d080
 800cfb4:	2000cf98 	.word	0x2000cf98

0800cfb8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800cfc0:	4812      	ldr	r0, [pc, #72]	@ (800d00c <HAL_ETH_RxAllocateCallback+0x54>)
 800cfc2:	f006 ff7f 	bl	8013ec4 <memp_malloc_pool>
 800cfc6:	60f8      	str	r0, [r7, #12]
  if (p)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d014      	beq.n	800cff8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f103 0220 	add.w	r2, r3, #32
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4a0d      	ldr	r2, [pc, #52]	@ (800d010 <HAL_ETH_RxAllocateCallback+0x58>)
 800cfdc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800cfe6:	9201      	str	r2, [sp, #4]
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2241      	movs	r2, #65	@ 0x41
 800cfee:	2100      	movs	r1, #0
 800cff0:	2000      	movs	r0, #0
 800cff2:	f007 fcef 	bl	80149d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800cff6:	e005      	b.n	800d004 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800cff8:	4b06      	ldr	r3, [pc, #24]	@ (800d014 <HAL_ETH_RxAllocateCallback+0x5c>)
 800cffa:	2201      	movs	r2, #1
 800cffc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
}
 800d004:	bf00      	nop
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	08024ea8 	.word	0x08024ea8
 800d010:	0800cc21 	.word	0x0800cc21
 800d014:	2000cf8c 	.word	0x2000cf8c

0800d018 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b088      	sub	sp, #32
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
 800d024:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3b20      	subs	r3, #32
 800d036:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	2200      	movs	r2, #0
 800d03c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	2200      	movs	r2, #0
 800d042:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	887a      	ldrh	r2, [r7, #2]
 800d048:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d103      	bne.n	800d05a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	69fa      	ldr	r2, [r7, #28]
 800d056:	601a      	str	r2, [r3, #0]
 800d058:	e003      	b.n	800d062 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	69fa      	ldr	r2, [r7, #28]
 800d060:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	69fa      	ldr	r2, [r7, #28]
 800d066:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	61fb      	str	r3, [r7, #28]
 800d06e:	e009      	b.n	800d084 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	891a      	ldrh	r2, [r3, #8]
 800d074:	887b      	ldrh	r3, [r7, #2]
 800d076:	4413      	add	r3, r2
 800d078:	b29a      	uxth	r2, r3
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	61fb      	str	r3, [r7, #28]
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1f2      	bne.n	800d070 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800d08a:	887b      	ldrh	r3, [r7, #2]
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7ff fb02 	bl	800c698 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d094:	bf00      	nop
 800d096:	3720      	adds	r7, #32
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f007 fe4f 	bl	8014d48 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d0b2:	b480      	push	{r7}
 800d0b4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d0b6:	bf00      	nop
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0c6:	f3ef 8305 	mrs	r3, IPSR
 800d0ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10f      	bne.n	800d0f2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d0d6:	607b      	str	r3, [r7, #4]
  return(result);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d105      	bne.n	800d0ea <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0de:	f3ef 8311 	mrs	r3, BASEPRI
 800d0e2:	603b      	str	r3, [r7, #0]
  return(result);
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d007      	beq.n	800d0fa <osKernelInitialize+0x3a>
 800d0ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d124 <osKernelInitialize+0x64>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b02      	cmp	r3, #2
 800d0f0:	d103      	bne.n	800d0fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d0f2:	f06f 0305 	mvn.w	r3, #5
 800d0f6:	60fb      	str	r3, [r7, #12]
 800d0f8:	e00c      	b.n	800d114 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d0fa:	4b0a      	ldr	r3, [pc, #40]	@ (800d124 <osKernelInitialize+0x64>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d105      	bne.n	800d10e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d102:	4b08      	ldr	r3, [pc, #32]	@ (800d124 <osKernelInitialize+0x64>)
 800d104:	2201      	movs	r2, #1
 800d106:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d108:	2300      	movs	r3, #0
 800d10a:	60fb      	str	r3, [r7, #12]
 800d10c:	e002      	b.n	800d114 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d10e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d112:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d114:	68fb      	ldr	r3, [r7, #12]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	2000d0a0 	.word	0x2000d0a0

0800d128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d12e:	f3ef 8305 	mrs	r3, IPSR
 800d132:	60bb      	str	r3, [r7, #8]
  return(result);
 800d134:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10f      	bne.n	800d15a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d13a:	f3ef 8310 	mrs	r3, PRIMASK
 800d13e:	607b      	str	r3, [r7, #4]
  return(result);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d105      	bne.n	800d152 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d146:	f3ef 8311 	mrs	r3, BASEPRI
 800d14a:	603b      	str	r3, [r7, #0]
  return(result);
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d007      	beq.n	800d162 <osKernelStart+0x3a>
 800d152:	4b0f      	ldr	r3, [pc, #60]	@ (800d190 <osKernelStart+0x68>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b02      	cmp	r3, #2
 800d158:	d103      	bne.n	800d162 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d15a:	f06f 0305 	mvn.w	r3, #5
 800d15e:	60fb      	str	r3, [r7, #12]
 800d160:	e010      	b.n	800d184 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d162:	4b0b      	ldr	r3, [pc, #44]	@ (800d190 <osKernelStart+0x68>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b01      	cmp	r3, #1
 800d168:	d109      	bne.n	800d17e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d16a:	f7ff ffa2 	bl	800d0b2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d16e:	4b08      	ldr	r3, [pc, #32]	@ (800d190 <osKernelStart+0x68>)
 800d170:	2202      	movs	r2, #2
 800d172:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d174:	f002 fa8c 	bl	800f690 <vTaskStartScheduler>
      stat = osOK;
 800d178:	2300      	movs	r3, #0
 800d17a:	60fb      	str	r3, [r7, #12]
 800d17c:	e002      	b.n	800d184 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d17e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d182:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d184:	68fb      	ldr	r3, [r7, #12]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	2000d0a0 	.word	0x2000d0a0

0800d194 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d19a:	f3ef 8305 	mrs	r3, IPSR
 800d19e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1a0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10f      	bne.n	800d1c6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d1aa:	607b      	str	r3, [r7, #4]
  return(result);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d105      	bne.n	800d1be <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1b2:	f3ef 8311 	mrs	r3, BASEPRI
 800d1b6:	603b      	str	r3, [r7, #0]
  return(result);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d007      	beq.n	800d1ce <osKernelGetTickCount+0x3a>
 800d1be:	4b08      	ldr	r3, [pc, #32]	@ (800d1e0 <osKernelGetTickCount+0x4c>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d103      	bne.n	800d1ce <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800d1c6:	f002 fb95 	bl	800f8f4 <xTaskGetTickCountFromISR>
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	e002      	b.n	800d1d4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800d1ce:	f002 fb81 	bl	800f8d4 <xTaskGetTickCount>
 800d1d2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	2000d0a0 	.word	0x2000d0a0

0800d1e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b090      	sub	sp, #64	@ 0x40
 800d1e8:	af04      	add	r7, sp, #16
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1f4:	f3ef 8305 	mrs	r3, IPSR
 800d1f8:	61fb      	str	r3, [r7, #28]
  return(result);
 800d1fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f040 8090 	bne.w	800d322 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d202:	f3ef 8310 	mrs	r3, PRIMASK
 800d206:	61bb      	str	r3, [r7, #24]
  return(result);
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d105      	bne.n	800d21a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d20e:	f3ef 8311 	mrs	r3, BASEPRI
 800d212:	617b      	str	r3, [r7, #20]
  return(result);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d003      	beq.n	800d222 <osThreadNew+0x3e>
 800d21a:	4b44      	ldr	r3, [pc, #272]	@ (800d32c <osThreadNew+0x148>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d07f      	beq.n	800d322 <osThreadNew+0x13e>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d07c      	beq.n	800d322 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800d228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d22c:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d22e:	2318      	movs	r3, #24
 800d230:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800d232:	2300      	movs	r3, #0
 800d234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800d236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d23a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d045      	beq.n	800d2ce <osThreadNew+0xea>
      if (attr->name != NULL) {
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d002      	beq.n	800d250 <osThreadNew+0x6c>
        name = attr->name;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d260:	2b00      	cmp	r3, #0
 800d262:	d008      	beq.n	800d276 <osThreadNew+0x92>
 800d264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d266:	2b38      	cmp	r3, #56	@ 0x38
 800d268:	d805      	bhi.n	800d276 <osThreadNew+0x92>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	f003 0301 	and.w	r3, r3, #1
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <osThreadNew+0x96>
        return (NULL);
 800d276:	2300      	movs	r3, #0
 800d278:	e054      	b.n	800d324 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	695b      	ldr	r3, [r3, #20]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d003      	beq.n	800d28a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	695b      	ldr	r3, [r3, #20]
 800d286:	089b      	lsrs	r3, r3, #2
 800d288:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00e      	beq.n	800d2b0 <osThreadNew+0xcc>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	2ba7      	cmp	r3, #167	@ 0xa7
 800d298:	d90a      	bls.n	800d2b0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d006      	beq.n	800d2b0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	695b      	ldr	r3, [r3, #20]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d002      	beq.n	800d2b0 <osThreadNew+0xcc>
        mem = 1;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	623b      	str	r3, [r7, #32]
 800d2ae:	e010      	b.n	800d2d2 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10c      	bne.n	800d2d2 <osThreadNew+0xee>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d108      	bne.n	800d2d2 <osThreadNew+0xee>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d104      	bne.n	800d2d2 <osThreadNew+0xee>
          mem = 0;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	623b      	str	r3, [r7, #32]
 800d2cc:	e001      	b.n	800d2d2 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d110      	bne.n	800d2fa <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d2e0:	9202      	str	r2, [sp, #8]
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f001 ff5a 	bl	800f1a8 <xTaskCreateStatic>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	613b      	str	r3, [r7, #16]
 800d2f8:	e013      	b.n	800d322 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d110      	bne.n	800d322 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d302:	b29a      	uxth	r2, r3
 800d304:	f107 0310 	add.w	r3, r7, #16
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d312:	68f8      	ldr	r0, [r7, #12]
 800d314:	f001 ffae 	bl	800f274 <xTaskCreate>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d001      	beq.n	800d322 <osThreadNew+0x13e>
          hTask = NULL;
 800d31e:	2300      	movs	r3, #0
 800d320:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d322:	693b      	ldr	r3, [r7, #16]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3730      	adds	r7, #48	@ 0x30
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	2000d0a0 	.word	0x2000d0a0

0800d330 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800d330:	b580      	push	{r7, lr}
 800d332:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800d334:	2000      	movs	r0, #0
 800d336:	f002 f8fd 	bl	800f534 <vTaskDelete>
#endif
  for (;;);
 800d33a:	bf00      	nop
 800d33c:	e7fd      	b.n	800d33a <osThreadExit+0xa>
	...

0800d340 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d348:	f3ef 8305 	mrs	r3, IPSR
 800d34c:	613b      	str	r3, [r7, #16]
  return(result);
 800d34e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10f      	bne.n	800d374 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d354:	f3ef 8310 	mrs	r3, PRIMASK
 800d358:	60fb      	str	r3, [r7, #12]
  return(result);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d105      	bne.n	800d36c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d360:	f3ef 8311 	mrs	r3, BASEPRI
 800d364:	60bb      	str	r3, [r7, #8]
  return(result);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d007      	beq.n	800d37c <osDelay+0x3c>
 800d36c:	4b0a      	ldr	r3, [pc, #40]	@ (800d398 <osDelay+0x58>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b02      	cmp	r3, #2
 800d372:	d103      	bne.n	800d37c <osDelay+0x3c>
    stat = osErrorISR;
 800d374:	f06f 0305 	mvn.w	r3, #5
 800d378:	617b      	str	r3, [r7, #20]
 800d37a:	e007      	b.n	800d38c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d37c:	2300      	movs	r3, #0
 800d37e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <osDelay+0x4c>
      vTaskDelay(ticks);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f002 f94a 	bl	800f620 <vTaskDelay>
    }
  }

  return (stat);
 800d38c:	697b      	ldr	r3, [r7, #20]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	2000d0a0 	.word	0x2000d0a0

0800d39c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b08a      	sub	sp, #40	@ 0x28
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3a8:	f3ef 8305 	mrs	r3, IPSR
 800d3ac:	613b      	str	r3, [r7, #16]
  return(result);
 800d3ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f040 8085 	bne.w	800d4c0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d3ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d105      	bne.n	800d3ce <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3c2:	f3ef 8311 	mrs	r3, BASEPRI
 800d3c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d003      	beq.n	800d3d6 <osMutexNew+0x3a>
 800d3ce:	4b3f      	ldr	r3, [pc, #252]	@ (800d4cc <osMutexNew+0x130>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d074      	beq.n	800d4c0 <osMutexNew+0x124>
    if (attr != NULL) {
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d003      	beq.n	800d3e4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	623b      	str	r3, [r7, #32]
 800d3e2:	e001      	b.n	800d3e8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d3e8:	6a3b      	ldr	r3, [r7, #32]
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d002      	beq.n	800d3f8 <osMutexNew+0x5c>
      rmtx = 1U;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	61fb      	str	r3, [r7, #28]
 800d3f6:	e001      	b.n	800d3fc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	f003 0308 	and.w	r3, r3, #8
 800d402:	2b00      	cmp	r3, #0
 800d404:	d15c      	bne.n	800d4c0 <osMutexNew+0x124>
      mem = -1;
 800d406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d40a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d015      	beq.n	800d43e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d006      	beq.n	800d428 <osMutexNew+0x8c>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	2b4f      	cmp	r3, #79	@ 0x4f
 800d420:	d902      	bls.n	800d428 <osMutexNew+0x8c>
          mem = 1;
 800d422:	2301      	movs	r3, #1
 800d424:	61bb      	str	r3, [r7, #24]
 800d426:	e00c      	b.n	800d442 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d108      	bne.n	800d442 <osMutexNew+0xa6>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d104      	bne.n	800d442 <osMutexNew+0xa6>
            mem = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	61bb      	str	r3, [r7, #24]
 800d43c:	e001      	b.n	800d442 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d112      	bne.n	800d46e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d007      	beq.n	800d45e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	4619      	mov	r1, r3
 800d454:	2004      	movs	r0, #4
 800d456:	f000 fec0 	bl	800e1da <xQueueCreateMutexStatic>
 800d45a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d45c:	e016      	b.n	800d48c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	4619      	mov	r1, r3
 800d464:	2001      	movs	r0, #1
 800d466:	f000 feb8 	bl	800e1da <xQueueCreateMutexStatic>
 800d46a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d46c:	e00e      	b.n	800d48c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10b      	bne.n	800d48c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d004      	beq.n	800d484 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d47a:	2004      	movs	r0, #4
 800d47c:	f000 fe95 	bl	800e1aa <xQueueCreateMutex>
 800d480:	6278      	str	r0, [r7, #36]	@ 0x24
 800d482:	e003      	b.n	800d48c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d484:	2001      	movs	r0, #1
 800d486:	f000 fe90 	bl	800e1aa <xQueueCreateMutex>
 800d48a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00c      	beq.n	800d4ac <osMutexNew+0x110>
        if (attr != NULL) {
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d003      	beq.n	800d4a0 <osMutexNew+0x104>
          name = attr->name;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	617b      	str	r3, [r7, #20]
 800d49e:	e001      	b.n	800d4a4 <osMutexNew+0x108>
        } else {
          name = NULL;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d4a4:	6979      	ldr	r1, [r7, #20]
 800d4a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4a8:	f001 fdf6 	bl	800f098 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d006      	beq.n	800d4c0 <osMutexNew+0x124>
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ba:	f043 0301 	orr.w	r3, r3, #1
 800d4be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3728      	adds	r7, #40	@ 0x28
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	2000d0a0 	.word	0x2000d0a0

0800d4d0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b088      	sub	sp, #32
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f023 0301 	bic.w	r3, r3, #1
 800d4e0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f003 0301 	and.w	r3, r3, #1
 800d4e8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4ee:	f3ef 8305 	mrs	r3, IPSR
 800d4f2:	613b      	str	r3, [r7, #16]
  return(result);
 800d4f4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10f      	bne.n	800d51a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d4fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d105      	bne.n	800d512 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d506:	f3ef 8311 	mrs	r3, BASEPRI
 800d50a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d007      	beq.n	800d522 <osMutexAcquire+0x52>
 800d512:	4b1d      	ldr	r3, [pc, #116]	@ (800d588 <osMutexAcquire+0xb8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b02      	cmp	r3, #2
 800d518:	d103      	bne.n	800d522 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d51a:	f06f 0305 	mvn.w	r3, #5
 800d51e:	61fb      	str	r3, [r7, #28]
 800d520:	e02c      	b.n	800d57c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d103      	bne.n	800d530 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800d528:	f06f 0303 	mvn.w	r3, #3
 800d52c:	61fb      	str	r3, [r7, #28]
 800d52e:	e025      	b.n	800d57c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d011      	beq.n	800d55a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	69b8      	ldr	r0, [r7, #24]
 800d53a:	f000 fea0 	bl	800e27e <xQueueTakeMutexRecursive>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b01      	cmp	r3, #1
 800d542:	d01b      	beq.n	800d57c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d003      	beq.n	800d552 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800d54a:	f06f 0301 	mvn.w	r3, #1
 800d54e:	61fb      	str	r3, [r7, #28]
 800d550:	e014      	b.n	800d57c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d552:	f06f 0302 	mvn.w	r3, #2
 800d556:	61fb      	str	r3, [r7, #28]
 800d558:	e010      	b.n	800d57c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	69b8      	ldr	r0, [r7, #24]
 800d55e:	f001 fa6b 	bl	800ea38 <xQueueSemaphoreTake>
 800d562:	4603      	mov	r3, r0
 800d564:	2b01      	cmp	r3, #1
 800d566:	d009      	beq.n	800d57c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d003      	beq.n	800d576 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800d56e:	f06f 0301 	mvn.w	r3, #1
 800d572:	61fb      	str	r3, [r7, #28]
 800d574:	e002      	b.n	800d57c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d576:	f06f 0302 	mvn.w	r3, #2
 800d57a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d57c:	69fb      	ldr	r3, [r7, #28]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3720      	adds	r7, #32
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	2000d0a0 	.word	0x2000d0a0

0800d58c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b088      	sub	sp, #32
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f023 0301 	bic.w	r3, r3, #1
 800d59a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f003 0301 	and.w	r3, r3, #1
 800d5a2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5a8:	f3ef 8305 	mrs	r3, IPSR
 800d5ac:	613b      	str	r3, [r7, #16]
  return(result);
 800d5ae:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10f      	bne.n	800d5d4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d5b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d105      	bne.n	800d5cc <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5c0:	f3ef 8311 	mrs	r3, BASEPRI
 800d5c4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d007      	beq.n	800d5dc <osMutexRelease+0x50>
 800d5cc:	4b16      	ldr	r3, [pc, #88]	@ (800d628 <osMutexRelease+0x9c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d103      	bne.n	800d5dc <osMutexRelease+0x50>
    stat = osErrorISR;
 800d5d4:	f06f 0305 	mvn.w	r3, #5
 800d5d8:	61fb      	str	r3, [r7, #28]
 800d5da:	e01f      	b.n	800d61c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d103      	bne.n	800d5ea <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d5e2:	f06f 0303 	mvn.w	r3, #3
 800d5e6:	61fb      	str	r3, [r7, #28]
 800d5e8:	e018      	b.n	800d61c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d009      	beq.n	800d604 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d5f0:	69b8      	ldr	r0, [r7, #24]
 800d5f2:	f000 fe0d 	bl	800e210 <xQueueGiveMutexRecursive>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d00f      	beq.n	800d61c <osMutexRelease+0x90>
        stat = osErrorResource;
 800d5fc:	f06f 0302 	mvn.w	r3, #2
 800d600:	61fb      	str	r3, [r7, #28]
 800d602:	e00b      	b.n	800d61c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d604:	2300      	movs	r3, #0
 800d606:	2200      	movs	r2, #0
 800d608:	2100      	movs	r1, #0
 800d60a:	69b8      	ldr	r0, [r7, #24]
 800d60c:	f000 fee6 	bl	800e3dc <xQueueGenericSend>
 800d610:	4603      	mov	r3, r0
 800d612:	2b01      	cmp	r3, #1
 800d614:	d002      	beq.n	800d61c <osMutexRelease+0x90>
        stat = osErrorResource;
 800d616:	f06f 0302 	mvn.w	r3, #2
 800d61a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d61c:	69fb      	ldr	r3, [r7, #28]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3720      	adds	r7, #32
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	2000d0a0 	.word	0x2000d0a0

0800d62c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b08c      	sub	sp, #48	@ 0x30
 800d630:	af02      	add	r7, sp, #8
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d638:	2300      	movs	r3, #0
 800d63a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d63c:	f3ef 8305 	mrs	r3, IPSR
 800d640:	61bb      	str	r3, [r7, #24]
  return(result);
 800d642:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d644:	2b00      	cmp	r3, #0
 800d646:	f040 8086 	bne.w	800d756 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d64a:	f3ef 8310 	mrs	r3, PRIMASK
 800d64e:	617b      	str	r3, [r7, #20]
  return(result);
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d105      	bne.n	800d662 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d656:	f3ef 8311 	mrs	r3, BASEPRI
 800d65a:	613b      	str	r3, [r7, #16]
  return(result);
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d003      	beq.n	800d66a <osSemaphoreNew+0x3e>
 800d662:	4b3f      	ldr	r3, [pc, #252]	@ (800d760 <osSemaphoreNew+0x134>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b02      	cmp	r3, #2
 800d668:	d075      	beq.n	800d756 <osSemaphoreNew+0x12a>
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d072      	beq.n	800d756 <osSemaphoreNew+0x12a>
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	429a      	cmp	r2, r3
 800d676:	d86e      	bhi.n	800d756 <osSemaphoreNew+0x12a>
    mem = -1;
 800d678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d67c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d015      	beq.n	800d6b0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d006      	beq.n	800d69a <osSemaphoreNew+0x6e>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	2b4f      	cmp	r3, #79	@ 0x4f
 800d692:	d902      	bls.n	800d69a <osSemaphoreNew+0x6e>
        mem = 1;
 800d694:	2301      	movs	r3, #1
 800d696:	623b      	str	r3, [r7, #32]
 800d698:	e00c      	b.n	800d6b4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d108      	bne.n	800d6b4 <osSemaphoreNew+0x88>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d104      	bne.n	800d6b4 <osSemaphoreNew+0x88>
          mem = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	623b      	str	r3, [r7, #32]
 800d6ae:	e001      	b.n	800d6b4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6ba:	d04c      	beq.n	800d756 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d128      	bne.n	800d714 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d10a      	bne.n	800d6de <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	689b      	ldr	r3, [r3, #8]
 800d6cc:	2203      	movs	r2, #3
 800d6ce:	9200      	str	r2, [sp, #0]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	f000 fc61 	bl	800df9c <xQueueGenericCreateStatic>
 800d6da:	6278      	str	r0, [r7, #36]	@ 0x24
 800d6dc:	e005      	b.n	800d6ea <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d6de:	2203      	movs	r2, #3
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	2001      	movs	r0, #1
 800d6e4:	f000 fce1 	bl	800e0aa <xQueueGenericCreate>
 800d6e8:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d022      	beq.n	800d736 <osSemaphoreNew+0x10a>
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d01f      	beq.n	800d736 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6fe:	f000 fe6d 	bl	800e3dc <xQueueGenericSend>
 800d702:	4603      	mov	r3, r0
 800d704:	2b01      	cmp	r3, #1
 800d706:	d016      	beq.n	800d736 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d708:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d70a:	f001 fb77 	bl	800edfc <vQueueDelete>
            hSemaphore = NULL;
 800d70e:	2300      	movs	r3, #0
 800d710:	627b      	str	r3, [r7, #36]	@ 0x24
 800d712:	e010      	b.n	800d736 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d714:	6a3b      	ldr	r3, [r7, #32]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d108      	bne.n	800d72c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	461a      	mov	r2, r3
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f000 fde4 	bl	800e2f0 <xQueueCreateCountingSemaphoreStatic>
 800d728:	6278      	str	r0, [r7, #36]	@ 0x24
 800d72a:	e004      	b.n	800d736 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d72c:	68b9      	ldr	r1, [r7, #8]
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f000 fe1b 	bl	800e36a <xQueueCreateCountingSemaphore>
 800d734:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00c      	beq.n	800d756 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d003      	beq.n	800d74a <osSemaphoreNew+0x11e>
          name = attr->name;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	61fb      	str	r3, [r7, #28]
 800d748:	e001      	b.n	800d74e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d74a:	2300      	movs	r3, #0
 800d74c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d74e:	69f9      	ldr	r1, [r7, #28]
 800d750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d752:	f001 fca1 	bl	800f098 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3728      	adds	r7, #40	@ 0x28
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	2000d0a0 	.word	0x2000d0a0

0800d764 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d772:	2300      	movs	r3, #0
 800d774:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d103      	bne.n	800d784 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d77c:	f06f 0303 	mvn.w	r3, #3
 800d780:	61fb      	str	r3, [r7, #28]
 800d782:	e04b      	b.n	800d81c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d784:	f3ef 8305 	mrs	r3, IPSR
 800d788:	617b      	str	r3, [r7, #20]
  return(result);
 800d78a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d10f      	bne.n	800d7b0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d790:	f3ef 8310 	mrs	r3, PRIMASK
 800d794:	613b      	str	r3, [r7, #16]
  return(result);
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d105      	bne.n	800d7a8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d79c:	f3ef 8311 	mrs	r3, BASEPRI
 800d7a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d026      	beq.n	800d7f6 <osSemaphoreAcquire+0x92>
 800d7a8:	4b1f      	ldr	r3, [pc, #124]	@ (800d828 <osSemaphoreAcquire+0xc4>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d122      	bne.n	800d7f6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d7b6:	f06f 0303 	mvn.w	r3, #3
 800d7ba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d7bc:	e02d      	b.n	800d81a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d7c2:	f107 0308 	add.w	r3, r7, #8
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	69b8      	ldr	r0, [r7, #24]
 800d7cc:	f001 fa4c 	bl	800ec68 <xQueueReceiveFromISR>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d003      	beq.n	800d7de <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d7d6:	f06f 0302 	mvn.w	r3, #2
 800d7da:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d7dc:	e01d      	b.n	800d81a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d01a      	beq.n	800d81a <osSemaphoreAcquire+0xb6>
 800d7e4:	4b11      	ldr	r3, [pc, #68]	@ (800d82c <osSemaphoreAcquire+0xc8>)
 800d7e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d7f4:	e011      	b.n	800d81a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	69b8      	ldr	r0, [r7, #24]
 800d7fa:	f001 f91d 	bl	800ea38 <xQueueSemaphoreTake>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b01      	cmp	r3, #1
 800d802:	d00b      	beq.n	800d81c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d003      	beq.n	800d812 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d80a:	f06f 0301 	mvn.w	r3, #1
 800d80e:	61fb      	str	r3, [r7, #28]
 800d810:	e004      	b.n	800d81c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d812:	f06f 0302 	mvn.w	r3, #2
 800d816:	61fb      	str	r3, [r7, #28]
 800d818:	e000      	b.n	800d81c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d81a:	bf00      	nop
      }
    }
  }

  return (stat);
 800d81c:	69fb      	ldr	r3, [r7, #28]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3720      	adds	r7, #32
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	2000d0a0 	.word	0x2000d0a0
 800d82c:	e000ed04 	.word	0xe000ed04

0800d830 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d103      	bne.n	800d84e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d846:	f06f 0303 	mvn.w	r3, #3
 800d84a:	61fb      	str	r3, [r7, #28]
 800d84c:	e03e      	b.n	800d8cc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d84e:	f3ef 8305 	mrs	r3, IPSR
 800d852:	617b      	str	r3, [r7, #20]
  return(result);
 800d854:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10f      	bne.n	800d87a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d85a:	f3ef 8310 	mrs	r3, PRIMASK
 800d85e:	613b      	str	r3, [r7, #16]
  return(result);
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d105      	bne.n	800d872 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d866:	f3ef 8311 	mrs	r3, BASEPRI
 800d86a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d01e      	beq.n	800d8b0 <osSemaphoreRelease+0x80>
 800d872:	4b19      	ldr	r3, [pc, #100]	@ (800d8d8 <osSemaphoreRelease+0xa8>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b02      	cmp	r3, #2
 800d878:	d11a      	bne.n	800d8b0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d87a:	2300      	movs	r3, #0
 800d87c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d87e:	f107 0308 	add.w	r3, r7, #8
 800d882:	4619      	mov	r1, r3
 800d884:	69b8      	ldr	r0, [r7, #24]
 800d886:	f000 ff56 	bl	800e736 <xQueueGiveFromISR>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d003      	beq.n	800d898 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d890:	f06f 0302 	mvn.w	r3, #2
 800d894:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d896:	e018      	b.n	800d8ca <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d015      	beq.n	800d8ca <osSemaphoreRelease+0x9a>
 800d89e:	4b0f      	ldr	r3, [pc, #60]	@ (800d8dc <osSemaphoreRelease+0xac>)
 800d8a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	f3bf 8f4f 	dsb	sy
 800d8aa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d8ae:	e00c      	b.n	800d8ca <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	69b8      	ldr	r0, [r7, #24]
 800d8b8:	f000 fd90 	bl	800e3dc <xQueueGenericSend>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d004      	beq.n	800d8cc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d8c2:	f06f 0302 	mvn.w	r3, #2
 800d8c6:	61fb      	str	r3, [r7, #28]
 800d8c8:	e000      	b.n	800d8cc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d8ca:	bf00      	nop
    }
  }

  return (stat);
 800d8cc:	69fb      	ldr	r3, [r7, #28]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3720      	adds	r7, #32
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	2000d0a0 	.word	0x2000d0a0
 800d8dc:	e000ed04 	.word	0xe000ed04

0800d8e0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8ec:	f3ef 8305 	mrs	r3, IPSR
 800d8f0:	617b      	str	r3, [r7, #20]
  return(result);
 800d8f2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10f      	bne.n	800d918 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d8fc:	613b      	str	r3, [r7, #16]
  return(result);
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d105      	bne.n	800d910 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d904:	f3ef 8311 	mrs	r3, BASEPRI
 800d908:	60fb      	str	r3, [r7, #12]
  return(result);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d007      	beq.n	800d920 <osSemaphoreDelete+0x40>
 800d910:	4b0d      	ldr	r3, [pc, #52]	@ (800d948 <osSemaphoreDelete+0x68>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b02      	cmp	r3, #2
 800d916:	d103      	bne.n	800d920 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d918:	f06f 0305 	mvn.w	r3, #5
 800d91c:	61fb      	str	r3, [r7, #28]
 800d91e:	e00e      	b.n	800d93e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d103      	bne.n	800d92e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d926:	f06f 0303 	mvn.w	r3, #3
 800d92a:	61fb      	str	r3, [r7, #28]
 800d92c:	e007      	b.n	800d93e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d92e:	69b8      	ldr	r0, [r7, #24]
 800d930:	f001 fbdc 	bl	800f0ec <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d934:	2300      	movs	r3, #0
 800d936:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d938:	69b8      	ldr	r0, [r7, #24]
 800d93a:	f001 fa5f 	bl	800edfc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d93e:	69fb      	ldr	r3, [r7, #28]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	2000d0a0 	.word	0x2000d0a0

0800d94c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b08c      	sub	sp, #48	@ 0x30
 800d950:	af02      	add	r7, sp, #8
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d958:	2300      	movs	r3, #0
 800d95a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d95c:	f3ef 8305 	mrs	r3, IPSR
 800d960:	61bb      	str	r3, [r7, #24]
  return(result);
 800d962:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d964:	2b00      	cmp	r3, #0
 800d966:	d16f      	bne.n	800da48 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d968:	f3ef 8310 	mrs	r3, PRIMASK
 800d96c:	617b      	str	r3, [r7, #20]
  return(result);
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d105      	bne.n	800d980 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d974:	f3ef 8311 	mrs	r3, BASEPRI
 800d978:	613b      	str	r3, [r7, #16]
  return(result);
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d003      	beq.n	800d988 <osMessageQueueNew+0x3c>
 800d980:	4b34      	ldr	r3, [pc, #208]	@ (800da54 <osMessageQueueNew+0x108>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b02      	cmp	r3, #2
 800d986:	d05f      	beq.n	800da48 <osMessageQueueNew+0xfc>
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d05c      	beq.n	800da48 <osMessageQueueNew+0xfc>
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d059      	beq.n	800da48 <osMessageQueueNew+0xfc>
    mem = -1;
 800d994:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d998:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d029      	beq.n	800d9f4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d012      	beq.n	800d9ce <osMessageQueueNew+0x82>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2b4f      	cmp	r3, #79	@ 0x4f
 800d9ae:	d90e      	bls.n	800d9ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d00a      	beq.n	800d9ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	695a      	ldr	r2, [r3, #20]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68b9      	ldr	r1, [r7, #8]
 800d9c0:	fb01 f303 	mul.w	r3, r1, r3
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d302      	bcc.n	800d9ce <osMessageQueueNew+0x82>
        mem = 1;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	623b      	str	r3, [r7, #32]
 800d9cc:	e014      	b.n	800d9f8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d110      	bne.n	800d9f8 <osMessageQueueNew+0xac>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10c      	bne.n	800d9f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d108      	bne.n	800d9f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	695b      	ldr	r3, [r3, #20]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d104      	bne.n	800d9f8 <osMessageQueueNew+0xac>
          mem = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	623b      	str	r3, [r7, #32]
 800d9f2:	e001      	b.n	800d9f8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d9f8:	6a3b      	ldr	r3, [r7, #32]
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d10b      	bne.n	800da16 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	691a      	ldr	r2, [r3, #16]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	2100      	movs	r1, #0
 800da08:	9100      	str	r1, [sp, #0]
 800da0a:	68b9      	ldr	r1, [r7, #8]
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f000 fac5 	bl	800df9c <xQueueGenericCreateStatic>
 800da12:	6278      	str	r0, [r7, #36]	@ 0x24
 800da14:	e008      	b.n	800da28 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800da16:	6a3b      	ldr	r3, [r7, #32]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d105      	bne.n	800da28 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800da1c:	2200      	movs	r2, #0
 800da1e:	68b9      	ldr	r1, [r7, #8]
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f000 fb42 	bl	800e0aa <xQueueGenericCreate>
 800da26:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800da28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00c      	beq.n	800da48 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d003      	beq.n	800da3c <osMessageQueueNew+0xf0>
        name = attr->name;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	61fb      	str	r3, [r7, #28]
 800da3a:	e001      	b.n	800da40 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800da3c:	2300      	movs	r3, #0
 800da3e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800da40:	69f9      	ldr	r1, [r7, #28]
 800da42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da44:	f001 fb28 	bl	800f098 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800da48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3728      	adds	r7, #40	@ 0x28
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	2000d0a0 	.word	0x2000d0a0

0800da58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800da58:	b580      	push	{r7, lr}
 800da5a:	b08a      	sub	sp, #40	@ 0x28
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	603b      	str	r3, [r7, #0]
 800da64:	4613      	mov	r3, r2
 800da66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da70:	f3ef 8305 	mrs	r3, IPSR
 800da74:	61fb      	str	r3, [r7, #28]
  return(result);
 800da76:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10f      	bne.n	800da9c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da7c:	f3ef 8310 	mrs	r3, PRIMASK
 800da80:	61bb      	str	r3, [r7, #24]
  return(result);
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d105      	bne.n	800da94 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da88:	f3ef 8311 	mrs	r3, BASEPRI
 800da8c:	617b      	str	r3, [r7, #20]
  return(result);
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d02c      	beq.n	800daee <osMessageQueuePut+0x96>
 800da94:	4b28      	ldr	r3, [pc, #160]	@ (800db38 <osMessageQueuePut+0xe0>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d128      	bne.n	800daee <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d005      	beq.n	800daae <osMessageQueuePut+0x56>
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d002      	beq.n	800daae <osMessageQueuePut+0x56>
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d003      	beq.n	800dab6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800daae:	f06f 0303 	mvn.w	r3, #3
 800dab2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dab4:	e039      	b.n	800db2a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800daba:	f107 0210 	add.w	r2, r7, #16
 800dabe:	2300      	movs	r3, #0
 800dac0:	68b9      	ldr	r1, [r7, #8]
 800dac2:	6a38      	ldr	r0, [r7, #32]
 800dac4:	f000 fd94 	bl	800e5f0 <xQueueGenericSendFromISR>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d003      	beq.n	800dad6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dace:	f06f 0302 	mvn.w	r3, #2
 800dad2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dad4:	e029      	b.n	800db2a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d026      	beq.n	800db2a <osMessageQueuePut+0xd2>
 800dadc:	4b17      	ldr	r3, [pc, #92]	@ (800db3c <osMessageQueuePut+0xe4>)
 800dade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dae2:	601a      	str	r2, [r3, #0]
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800daec:	e01d      	b.n	800db2a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <osMessageQueuePut+0xa2>
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d103      	bne.n	800db02 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800dafa:	f06f 0303 	mvn.w	r3, #3
 800dafe:	627b      	str	r3, [r7, #36]	@ 0x24
 800db00:	e014      	b.n	800db2c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db02:	2300      	movs	r3, #0
 800db04:	683a      	ldr	r2, [r7, #0]
 800db06:	68b9      	ldr	r1, [r7, #8]
 800db08:	6a38      	ldr	r0, [r7, #32]
 800db0a:	f000 fc67 	bl	800e3dc <xQueueGenericSend>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b01      	cmp	r3, #1
 800db12:	d00b      	beq.n	800db2c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d003      	beq.n	800db22 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800db1a:	f06f 0301 	mvn.w	r3, #1
 800db1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db20:	e004      	b.n	800db2c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800db22:	f06f 0302 	mvn.w	r3, #2
 800db26:	627b      	str	r3, [r7, #36]	@ 0x24
 800db28:	e000      	b.n	800db2c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db2a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800db2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3728      	adds	r7, #40	@ 0x28
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	2000d0a0 	.word	0x2000d0a0
 800db3c:	e000ed04 	.word	0xe000ed04

0800db40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800db40:	b580      	push	{r7, lr}
 800db42:	b08a      	sub	sp, #40	@ 0x28
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800db52:	2300      	movs	r3, #0
 800db54:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db56:	f3ef 8305 	mrs	r3, IPSR
 800db5a:	61fb      	str	r3, [r7, #28]
  return(result);
 800db5c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d10f      	bne.n	800db82 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db62:	f3ef 8310 	mrs	r3, PRIMASK
 800db66:	61bb      	str	r3, [r7, #24]
  return(result);
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d105      	bne.n	800db7a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db6e:	f3ef 8311 	mrs	r3, BASEPRI
 800db72:	617b      	str	r3, [r7, #20]
  return(result);
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d02c      	beq.n	800dbd4 <osMessageQueueGet+0x94>
 800db7a:	4b28      	ldr	r3, [pc, #160]	@ (800dc1c <osMessageQueueGet+0xdc>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d128      	bne.n	800dbd4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db82:	6a3b      	ldr	r3, [r7, #32]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d005      	beq.n	800db94 <osMessageQueueGet+0x54>
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <osMessageQueueGet+0x54>
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d003      	beq.n	800db9c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800db94:	f06f 0303 	mvn.w	r3, #3
 800db98:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db9a:	e038      	b.n	800dc0e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800db9c:	2300      	movs	r3, #0
 800db9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dba0:	f107 0310 	add.w	r3, r7, #16
 800dba4:	461a      	mov	r2, r3
 800dba6:	68b9      	ldr	r1, [r7, #8]
 800dba8:	6a38      	ldr	r0, [r7, #32]
 800dbaa:	f001 f85d 	bl	800ec68 <xQueueReceiveFromISR>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d003      	beq.n	800dbbc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800dbb4:	f06f 0302 	mvn.w	r3, #2
 800dbb8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbba:	e028      	b.n	800dc0e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d025      	beq.n	800dc0e <osMessageQueueGet+0xce>
 800dbc2:	4b17      	ldr	r3, [pc, #92]	@ (800dc20 <osMessageQueueGet+0xe0>)
 800dbc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbc8:	601a      	str	r2, [r3, #0]
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbd2:	e01c      	b.n	800dc0e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dbd4:	6a3b      	ldr	r3, [r7, #32]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d002      	beq.n	800dbe0 <osMessageQueueGet+0xa0>
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d103      	bne.n	800dbe8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800dbe0:	f06f 0303 	mvn.w	r3, #3
 800dbe4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbe6:	e013      	b.n	800dc10 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	68b9      	ldr	r1, [r7, #8]
 800dbec:	6a38      	ldr	r0, [r7, #32]
 800dbee:	f000 fe3b 	bl	800e868 <xQueueReceive>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d00b      	beq.n	800dc10 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d003      	beq.n	800dc06 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800dbfe:	f06f 0301 	mvn.w	r3, #1
 800dc02:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc04:	e004      	b.n	800dc10 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800dc06:	f06f 0302 	mvn.w	r3, #2
 800dc0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc0c:	e000      	b.n	800dc10 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3728      	adds	r7, #40	@ 0x28
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	2000d0a0 	.word	0x2000d0a0
 800dc20:	e000ed04 	.word	0xe000ed04

0800dc24 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <osMessageQueueGetCount+0x18>
    count = 0U;
 800dc36:	2300      	movs	r3, #0
 800dc38:	61fb      	str	r3, [r7, #28]
 800dc3a:	e01e      	b.n	800dc7a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc3c:	f3ef 8305 	mrs	r3, IPSR
 800dc40:	617b      	str	r3, [r7, #20]
  return(result);
 800dc42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10f      	bne.n	800dc68 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc48:	f3ef 8310 	mrs	r3, PRIMASK
 800dc4c:	613b      	str	r3, [r7, #16]
  return(result);
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d105      	bne.n	800dc60 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc54:	f3ef 8311 	mrs	r3, BASEPRI
 800dc58:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d008      	beq.n	800dc72 <osMessageQueueGetCount+0x4e>
 800dc60:	4b08      	ldr	r3, [pc, #32]	@ (800dc84 <osMessageQueueGetCount+0x60>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d104      	bne.n	800dc72 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800dc68:	69b8      	ldr	r0, [r7, #24]
 800dc6a:	f001 f8a6 	bl	800edba <uxQueueMessagesWaitingFromISR>
 800dc6e:	61f8      	str	r0, [r7, #28]
 800dc70:	e003      	b.n	800dc7a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800dc72:	69b8      	ldr	r0, [r7, #24]
 800dc74:	f001 f880 	bl	800ed78 <uxQueueMessagesWaiting>
 800dc78:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800dc7a:	69fb      	ldr	r3, [r7, #28]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3720      	adds	r7, #32
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	2000d0a0 	.word	0x2000d0a0

0800dc88 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc94:	f3ef 8305 	mrs	r3, IPSR
 800dc98:	617b      	str	r3, [r7, #20]
  return(result);
 800dc9a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10f      	bne.n	800dcc0 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dca0:	f3ef 8310 	mrs	r3, PRIMASK
 800dca4:	613b      	str	r3, [r7, #16]
  return(result);
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d105      	bne.n	800dcb8 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dcac:	f3ef 8311 	mrs	r3, BASEPRI
 800dcb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d007      	beq.n	800dcc8 <osMessageQueueDelete+0x40>
 800dcb8:	4b0d      	ldr	r3, [pc, #52]	@ (800dcf0 <osMessageQueueDelete+0x68>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d103      	bne.n	800dcc8 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800dcc0:	f06f 0305 	mvn.w	r3, #5
 800dcc4:	61fb      	str	r3, [r7, #28]
 800dcc6:	e00e      	b.n	800dce6 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d103      	bne.n	800dcd6 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800dcce:	f06f 0303 	mvn.w	r3, #3
 800dcd2:	61fb      	str	r3, [r7, #28]
 800dcd4:	e007      	b.n	800dce6 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800dcd6:	69b8      	ldr	r0, [r7, #24]
 800dcd8:	f001 fa08 	bl	800f0ec <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800dce0:	69b8      	ldr	r0, [r7, #24]
 800dce2:	f001 f88b 	bl	800edfc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800dce6:	69fb      	ldr	r3, [r7, #28]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3720      	adds	r7, #32
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	2000d0a0 	.word	0x2000d0a0

0800dcf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dcf4:	b480      	push	{r7}
 800dcf6:	b085      	sub	sp, #20
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	4a07      	ldr	r2, [pc, #28]	@ (800dd20 <vApplicationGetIdleTaskMemory+0x2c>)
 800dd04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	4a06      	ldr	r2, [pc, #24]	@ (800dd24 <vApplicationGetIdleTaskMemory+0x30>)
 800dd0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd12:	601a      	str	r2, [r3, #0]
}
 800dd14:	bf00      	nop
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	2000d0a4 	.word	0x2000d0a4
 800dd24:	2000d14c 	.word	0x2000d14c

0800dd28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4a07      	ldr	r2, [pc, #28]	@ (800dd54 <vApplicationGetTimerTaskMemory+0x2c>)
 800dd38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	4a06      	ldr	r2, [pc, #24]	@ (800dd58 <vApplicationGetTimerTaskMemory+0x30>)
 800dd3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dd46:	601a      	str	r2, [r3, #0]
}
 800dd48:	bf00      	nop
 800dd4a:	3714      	adds	r7, #20
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr
 800dd54:	2000d94c 	.word	0x2000d94c
 800dd58:	2000d9f4 	.word	0x2000d9f4

0800dd5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f103 0208 	add.w	r2, r3, #8
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f103 0208 	add.w	r2, r3, #8
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f103 0208 	add.w	r2, r3, #8
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ddaa:	bf00      	nop
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddb6:	b480      	push	{r7}
 800ddb8:	b085      	sub	sp, #20
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	689a      	ldr	r2, [r3, #8]
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	1c5a      	adds	r2, r3, #1
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	601a      	str	r2, [r3, #0]
}
 800ddf2:	bf00      	nop
 800ddf4:	3714      	adds	r7, #20
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddfe:	b480      	push	{r7}
 800de00:	b085      	sub	sp, #20
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de14:	d103      	bne.n	800de1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	e00c      	b.n	800de38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3308      	adds	r3, #8
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	e002      	b.n	800de2c <vListInsert+0x2e>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	685b      	ldr	r3, [r3, #4]
 800de2a:	60fb      	str	r3, [r7, #12]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68ba      	ldr	r2, [r7, #8]
 800de34:	429a      	cmp	r2, r3
 800de36:	d2f6      	bcs.n	800de26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	685a      	ldr	r2, [r3, #4]
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	683a      	ldr	r2, [r7, #0]
 800de46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	601a      	str	r2, [r3, #0]
}
 800de64:	bf00      	nop
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	6892      	ldr	r2, [r2, #8]
 800de86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	6852      	ldr	r2, [r2, #4]
 800de90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d103      	bne.n	800dea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689a      	ldr	r2, [r3, #8]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	1e5a      	subs	r2, r3, #1
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3714      	adds	r7, #20
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d10d      	bne.n	800def4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ded8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dedc:	b672      	cpsid	i
 800dede:	f383 8811 	msr	BASEPRI, r3
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	f3bf 8f4f 	dsb	sy
 800deea:	b662      	cpsie	i
 800deec:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800deee:	bf00      	nop
 800def0:	bf00      	nop
 800def2:	e7fd      	b.n	800def0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800def4:	f002 feea 	bl	8010ccc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df00:	68f9      	ldr	r1, [r7, #12]
 800df02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df04:	fb01 f303 	mul.w	r3, r1, r3
 800df08:	441a      	add	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2200      	movs	r2, #0
 800df12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df24:	3b01      	subs	r3, #1
 800df26:	68f9      	ldr	r1, [r7, #12]
 800df28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df2a:	fb01 f303 	mul.w	r3, r1, r3
 800df2e:	441a      	add	r2, r3
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	22ff      	movs	r2, #255	@ 0xff
 800df38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	22ff      	movs	r2, #255	@ 0xff
 800df40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d114      	bne.n	800df74 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d01a      	beq.n	800df88 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	3310      	adds	r3, #16
 800df56:	4618      	mov	r0, r3
 800df58:	f001 fe7c 	bl	800fc54 <xTaskRemoveFromEventList>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d012      	beq.n	800df88 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df62:	4b0d      	ldr	r3, [pc, #52]	@ (800df98 <xQueueGenericReset+0xd4>)
 800df64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df68:	601a      	str	r2, [r3, #0]
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	e009      	b.n	800df88 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	3310      	adds	r3, #16
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff feef 	bl	800dd5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3324      	adds	r3, #36	@ 0x24
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff feea 	bl	800dd5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df88:	f002 fed6 	bl	8010d38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df8c:	2301      	movs	r3, #1
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	e000ed04 	.word	0xe000ed04

0800df9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b08e      	sub	sp, #56	@ 0x38
 800dfa0:	af02      	add	r7, sp, #8
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10d      	bne.n	800dfcc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb4:	b672      	cpsid	i
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	b662      	cpsie	i
 800dfc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dfc6:	bf00      	nop
 800dfc8:	bf00      	nop
 800dfca:	e7fd      	b.n	800dfc8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d10d      	bne.n	800dfee <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800dfd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd6:	b672      	cpsid	i
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	b662      	cpsie	i
 800dfe6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dfe8:	bf00      	nop
 800dfea:	bf00      	nop
 800dfec:	e7fd      	b.n	800dfea <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <xQueueGenericCreateStatic+0x5e>
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <xQueueGenericCreateStatic+0x62>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e000      	b.n	800e000 <xQueueGenericCreateStatic+0x64>
 800dffe:	2300      	movs	r3, #0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10d      	bne.n	800e020 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800e004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e008:	b672      	cpsid	i
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	b662      	cpsie	i
 800e018:	623b      	str	r3, [r7, #32]
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	e7fd      	b.n	800e01c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <xQueueGenericCreateStatic+0x90>
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d101      	bne.n	800e030 <xQueueGenericCreateStatic+0x94>
 800e02c:	2301      	movs	r3, #1
 800e02e:	e000      	b.n	800e032 <xQueueGenericCreateStatic+0x96>
 800e030:	2300      	movs	r3, #0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10d      	bne.n	800e052 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03a:	b672      	cpsid	i
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	b662      	cpsie	i
 800e04a:	61fb      	str	r3, [r7, #28]
}
 800e04c:	bf00      	nop
 800e04e:	bf00      	nop
 800e050:	e7fd      	b.n	800e04e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e052:	2350      	movs	r3, #80	@ 0x50
 800e054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	2b50      	cmp	r3, #80	@ 0x50
 800e05a:	d00d      	beq.n	800e078 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e060:	b672      	cpsid	i
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	b662      	cpsie	i
 800e070:	61bb      	str	r3, [r7, #24]
}
 800e072:	bf00      	nop
 800e074:	bf00      	nop
 800e076:	e7fd      	b.n	800e074 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e078:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00d      	beq.n	800e0a0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e08c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e092:	9300      	str	r3, [sp, #0]
 800e094:	4613      	mov	r3, r2
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	68b9      	ldr	r1, [r7, #8]
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f000 f848 	bl	800e130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3730      	adds	r7, #48	@ 0x30
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b08a      	sub	sp, #40	@ 0x28
 800e0ae:	af02      	add	r7, sp, #8
 800e0b0:	60f8      	str	r0, [r7, #12]
 800e0b2:	60b9      	str	r1, [r7, #8]
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10d      	bne.n	800e0da <xQueueGenericCreate+0x30>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c2:	b672      	cpsid	i
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	b662      	cpsie	i
 800e0d2:	613b      	str	r3, [r7, #16]
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	e7fd      	b.n	800e0d6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d102      	bne.n	800e0e6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	61fb      	str	r3, [r7, #28]
 800e0e4:	e004      	b.n	800e0f0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	fb02 f303 	mul.w	r3, r2, r3
 800e0ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	3350      	adds	r3, #80	@ 0x50
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f002 ff17 	bl	8010f28 <pvPortMalloc>
 800e0fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d011      	beq.n	800e126 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	3350      	adds	r3, #80	@ 0x50
 800e10a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e114:	79fa      	ldrb	r2, [r7, #7]
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	4613      	mov	r3, r2
 800e11c:	697a      	ldr	r2, [r7, #20]
 800e11e:	68b9      	ldr	r1, [r7, #8]
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f000 f805 	bl	800e130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e126:	69bb      	ldr	r3, [r7, #24]
	}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
 800e13c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d103      	bne.n	800e14c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	69ba      	ldr	r2, [r7, #24]
 800e148:	601a      	str	r2, [r3, #0]
 800e14a:	e002      	b.n	800e152 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e15e:	2101      	movs	r1, #1
 800e160:	69b8      	ldr	r0, [r7, #24]
 800e162:	f7ff feaf 	bl	800dec4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	78fa      	ldrb	r2, [r7, #3]
 800e16a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e176:	b580      	push	{r7, lr}
 800e178:	b082      	sub	sp, #8
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00e      	beq.n	800e1a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e196:	2300      	movs	r3, #0
 800e198:	2200      	movs	r2, #0
 800e19a:	2100      	movs	r1, #0
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 f91d 	bl	800e3dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e1a2:	bf00      	nop
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b086      	sub	sp, #24
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	617b      	str	r3, [r7, #20]
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	6939      	ldr	r1, [r7, #16]
 800e1c2:	6978      	ldr	r0, [r7, #20]
 800e1c4:	f7ff ff71 	bl	800e0aa <xQueueGenericCreate>
 800e1c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f7ff ffd3 	bl	800e176 <prvInitialiseMutex>

		return xNewQueue;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
	}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b088      	sub	sp, #32
 800e1de:	af02      	add	r7, sp, #8
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	6039      	str	r1, [r7, #0]
 800e1e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	617b      	str	r3, [r7, #20]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e1ee:	79fb      	ldrb	r3, [r7, #7]
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	6939      	ldr	r1, [r7, #16]
 800e1f8:	6978      	ldr	r0, [r7, #20]
 800e1fa:	f7ff fecf 	bl	800df9c <xQueueGenericCreateStatic>
 800e1fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7ff ffb8 	bl	800e176 <prvInitialiseMutex>

		return xNewQueue;
 800e206:	68fb      	ldr	r3, [r7, #12]
	}
 800e208:	4618      	mov	r0, r3
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10d      	bne.n	800e23e <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800e222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e226:	b672      	cpsid	i
 800e228:	f383 8811 	msr	BASEPRI, r3
 800e22c:	f3bf 8f6f 	isb	sy
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	b662      	cpsie	i
 800e236:	60fb      	str	r3, [r7, #12]
}
 800e238:	bf00      	nop
 800e23a:	bf00      	nop
 800e23c:	e7fd      	b.n	800e23a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	689c      	ldr	r4, [r3, #8]
 800e242:	f001 fed5 	bl	800fff0 <xTaskGetCurrentTaskHandle>
 800e246:	4603      	mov	r3, r0
 800e248:	429c      	cmp	r4, r3
 800e24a:	d111      	bne.n	800e270 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	1e5a      	subs	r2, r3, #1
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d105      	bne.n	800e26a <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e25e:	2300      	movs	r3, #0
 800e260:	2200      	movs	r2, #0
 800e262:	2100      	movs	r1, #0
 800e264:	6938      	ldr	r0, [r7, #16]
 800e266:	f000 f8b9 	bl	800e3dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e26a:	2301      	movs	r3, #1
 800e26c:	617b      	str	r3, [r7, #20]
 800e26e:	e001      	b.n	800e274 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e270:	2300      	movs	r3, #0
 800e272:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e274:	697b      	ldr	r3, [r7, #20]
	}
 800e276:	4618      	mov	r0, r3
 800e278:	371c      	adds	r7, #28
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd90      	pop	{r4, r7, pc}

0800e27e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e27e:	b590      	push	{r4, r7, lr}
 800e280:	b087      	sub	sp, #28
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
 800e286:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10d      	bne.n	800e2ae <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	b672      	cpsid	i
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	b662      	cpsie	i
 800e2a6:	60fb      	str	r3, [r7, #12]
}
 800e2a8:	bf00      	nop
 800e2aa:	bf00      	nop
 800e2ac:	e7fd      	b.n	800e2aa <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	689c      	ldr	r4, [r3, #8]
 800e2b2:	f001 fe9d 	bl	800fff0 <xTaskGetCurrentTaskHandle>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	429c      	cmp	r4, r3
 800e2ba:	d107      	bne.n	800e2cc <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	617b      	str	r3, [r7, #20]
 800e2ca:	e00c      	b.n	800e2e6 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6938      	ldr	r0, [r7, #16]
 800e2d0:	f000 fbb2 	bl	800ea38 <xQueueSemaphoreTake>
 800e2d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d004      	beq.n	800e2e6 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	1c5a      	adds	r2, r3, #1
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e2e6:	697b      	ldr	r3, [r7, #20]
	}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	371c      	adds	r7, #28
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd90      	pop	{r4, r7, pc}

0800e2f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b08a      	sub	sp, #40	@ 0x28
 800e2f4:	af02      	add	r7, sp, #8
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10d      	bne.n	800e31e <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e306:	b672      	cpsid	i
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	b662      	cpsie	i
 800e316:	61bb      	str	r3, [r7, #24]
}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	e7fd      	b.n	800e31a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	429a      	cmp	r2, r3
 800e324:	d90d      	bls.n	800e342 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32a:	b672      	cpsid	i
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	b662      	cpsie	i
 800e33a:	617b      	str	r3, [r7, #20]
}
 800e33c:	bf00      	nop
 800e33e:	bf00      	nop
 800e340:	e7fd      	b.n	800e33e <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e342:	2302      	movs	r3, #2
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	2100      	movs	r1, #0
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f7ff fe25 	bl	800df9c <xQueueGenericCreateStatic>
 800e352:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d002      	beq.n	800e360 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e360:	69fb      	ldr	r3, [r7, #28]
	}
 800e362:	4618      	mov	r0, r3
 800e364:	3720      	adds	r7, #32
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b086      	sub	sp, #24
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10d      	bne.n	800e396 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e37e:	b672      	cpsid	i
 800e380:	f383 8811 	msr	BASEPRI, r3
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	b662      	cpsie	i
 800e38e:	613b      	str	r3, [r7, #16]
}
 800e390:	bf00      	nop
 800e392:	bf00      	nop
 800e394:	e7fd      	b.n	800e392 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e396:	683a      	ldr	r2, [r7, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d90d      	bls.n	800e3ba <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a2:	b672      	cpsid	i
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	b662      	cpsie	i
 800e3b2:	60fb      	str	r3, [r7, #12]
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop
 800e3b8:	e7fd      	b.n	800e3b6 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3ba:	2202      	movs	r2, #2
 800e3bc:	2100      	movs	r1, #0
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7ff fe73 	bl	800e0aa <xQueueGenericCreate>
 800e3c4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d002      	beq.n	800e3d2 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	683a      	ldr	r2, [r7, #0]
 800e3d0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e3d2:	697b      	ldr	r3, [r7, #20]
	}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3718      	adds	r7, #24
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08e      	sub	sp, #56	@ 0x38
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
 800e3e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10d      	bne.n	800e414 <xQueueGenericSend+0x38>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fc:	b672      	cpsid	i
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	b662      	cpsie	i
 800e40c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e40e:	bf00      	nop
 800e410:	bf00      	nop
 800e412:	e7fd      	b.n	800e410 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d103      	bne.n	800e422 <xQueueGenericSend+0x46>
 800e41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d101      	bne.n	800e426 <xQueueGenericSend+0x4a>
 800e422:	2301      	movs	r3, #1
 800e424:	e000      	b.n	800e428 <xQueueGenericSend+0x4c>
 800e426:	2300      	movs	r3, #0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d10d      	bne.n	800e448 <xQueueGenericSend+0x6c>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	b672      	cpsid	i
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	b662      	cpsie	i
 800e440:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e442:	bf00      	nop
 800e444:	bf00      	nop
 800e446:	e7fd      	b.n	800e444 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	2b02      	cmp	r3, #2
 800e44c:	d103      	bne.n	800e456 <xQueueGenericSend+0x7a>
 800e44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e452:	2b01      	cmp	r3, #1
 800e454:	d101      	bne.n	800e45a <xQueueGenericSend+0x7e>
 800e456:	2301      	movs	r3, #1
 800e458:	e000      	b.n	800e45c <xQueueGenericSend+0x80>
 800e45a:	2300      	movs	r3, #0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10d      	bne.n	800e47c <xQueueGenericSend+0xa0>
	__asm volatile
 800e460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e464:	b672      	cpsid	i
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	b662      	cpsie	i
 800e474:	623b      	str	r3, [r7, #32]
}
 800e476:	bf00      	nop
 800e478:	bf00      	nop
 800e47a:	e7fd      	b.n	800e478 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e47c:	f001 fdc8 	bl	8010010 <xTaskGetSchedulerState>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d102      	bne.n	800e48c <xQueueGenericSend+0xb0>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <xQueueGenericSend+0xb4>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e000      	b.n	800e492 <xQueueGenericSend+0xb6>
 800e490:	2300      	movs	r3, #0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10d      	bne.n	800e4b2 <xQueueGenericSend+0xd6>
	__asm volatile
 800e496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e49a:	b672      	cpsid	i
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	b662      	cpsie	i
 800e4aa:	61fb      	str	r3, [r7, #28]
}
 800e4ac:	bf00      	nop
 800e4ae:	bf00      	nop
 800e4b0:	e7fd      	b.n	800e4ae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4b2:	f002 fc0b 	bl	8010ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d302      	bcc.n	800e4c8 <xQueueGenericSend+0xec>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d129      	bne.n	800e51c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4c8:	683a      	ldr	r2, [r7, #0]
 800e4ca:	68b9      	ldr	r1, [r7, #8]
 800e4cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4ce:	f000 fcd3 	bl	800ee78 <prvCopyDataToQueue>
 800e4d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d010      	beq.n	800e4fe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4de:	3324      	adds	r3, #36	@ 0x24
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f001 fbb7 	bl	800fc54 <xTaskRemoveFromEventList>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d013      	beq.n	800e514 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4ec:	4b3f      	ldr	r3, [pc, #252]	@ (800e5ec <xQueueGenericSend+0x210>)
 800e4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	e00a      	b.n	800e514 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e500:	2b00      	cmp	r3, #0
 800e502:	d007      	beq.n	800e514 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e504:	4b39      	ldr	r3, [pc, #228]	@ (800e5ec <xQueueGenericSend+0x210>)
 800e506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	f3bf 8f4f 	dsb	sy
 800e510:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e514:	f002 fc10 	bl	8010d38 <vPortExitCritical>
				return pdPASS;
 800e518:	2301      	movs	r3, #1
 800e51a:	e063      	b.n	800e5e4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d103      	bne.n	800e52a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e522:	f002 fc09 	bl	8010d38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e526:	2300      	movs	r3, #0
 800e528:	e05c      	b.n	800e5e4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d106      	bne.n	800e53e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e530:	f107 0314 	add.w	r3, r7, #20
 800e534:	4618      	mov	r0, r3
 800e536:	f001 fbf3 	bl	800fd20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e53a:	2301      	movs	r3, #1
 800e53c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e53e:	f002 fbfb 	bl	8010d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e542:	f001 f919 	bl	800f778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e546:	f002 fbc1 	bl	8010ccc <vPortEnterCritical>
 800e54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e54c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e550:	b25b      	sxtb	r3, r3
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e556:	d103      	bne.n	800e560 <xQueueGenericSend+0x184>
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e566:	b25b      	sxtb	r3, r3
 800e568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e56c:	d103      	bne.n	800e576 <xQueueGenericSend+0x19a>
 800e56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e570:	2200      	movs	r2, #0
 800e572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e576:	f002 fbdf 	bl	8010d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e57a:	1d3a      	adds	r2, r7, #4
 800e57c:	f107 0314 	add.w	r3, r7, #20
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f001 fbe2 	bl	800fd4c <xTaskCheckForTimeOut>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d124      	bne.n	800e5d8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e58e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e590:	f000 fd6a 	bl	800f068 <prvIsQueueFull>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d018      	beq.n	800e5cc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59c:	3310      	adds	r3, #16
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f001 fb00 	bl	800fba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5aa:	f000 fcf5 	bl	800ef98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e5ae:	f001 f8f1 	bl	800f794 <xTaskResumeAll>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f47f af7c 	bne.w	800e4b2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e5ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e5ec <xQueueGenericSend+0x210>)
 800e5bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5c0:	601a      	str	r2, [r3, #0]
 800e5c2:	f3bf 8f4f 	dsb	sy
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	e772      	b.n	800e4b2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5ce:	f000 fce3 	bl	800ef98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5d2:	f001 f8df 	bl	800f794 <xTaskResumeAll>
 800e5d6:	e76c      	b.n	800e4b2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5da:	f000 fcdd 	bl	800ef98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5de:	f001 f8d9 	bl	800f794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3738      	adds	r7, #56	@ 0x38
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	e000ed04 	.word	0xe000ed04

0800e5f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b08e      	sub	sp, #56	@ 0x38
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
 800e5fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	2b00      	cmp	r3, #0
 800e606:	d10d      	bne.n	800e624 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60c:	b672      	cpsid	i
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	b662      	cpsie	i
 800e61c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e61e:	bf00      	nop
 800e620:	bf00      	nop
 800e622:	e7fd      	b.n	800e620 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d103      	bne.n	800e632 <xQueueGenericSendFromISR+0x42>
 800e62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d101      	bne.n	800e636 <xQueueGenericSendFromISR+0x46>
 800e632:	2301      	movs	r3, #1
 800e634:	e000      	b.n	800e638 <xQueueGenericSendFromISR+0x48>
 800e636:	2300      	movs	r3, #0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10d      	bne.n	800e658 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e640:	b672      	cpsid	i
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	b662      	cpsie	i
 800e650:	623b      	str	r3, [r7, #32]
}
 800e652:	bf00      	nop
 800e654:	bf00      	nop
 800e656:	e7fd      	b.n	800e654 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d103      	bne.n	800e666 <xQueueGenericSendFromISR+0x76>
 800e65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e662:	2b01      	cmp	r3, #1
 800e664:	d101      	bne.n	800e66a <xQueueGenericSendFromISR+0x7a>
 800e666:	2301      	movs	r3, #1
 800e668:	e000      	b.n	800e66c <xQueueGenericSendFromISR+0x7c>
 800e66a:	2300      	movs	r3, #0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10d      	bne.n	800e68c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e674:	b672      	cpsid	i
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	b662      	cpsie	i
 800e684:	61fb      	str	r3, [r7, #28]
}
 800e686:	bf00      	nop
 800e688:	bf00      	nop
 800e68a:	e7fd      	b.n	800e688 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e68c:	f002 fc06 	bl	8010e9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e690:	f3ef 8211 	mrs	r2, BASEPRI
 800e694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e698:	b672      	cpsid	i
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	b662      	cpsie	i
 800e6a8:	61ba      	str	r2, [r7, #24]
 800e6aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e6ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d302      	bcc.n	800e6c2 <xQueueGenericSendFromISR+0xd2>
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d12c      	bne.n	800e71c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6d2:	f000 fbd1 	bl	800ee78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e6da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6de:	d112      	bne.n	800e706 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d016      	beq.n	800e716 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ea:	3324      	adds	r3, #36	@ 0x24
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f001 fab1 	bl	800fc54 <xTaskRemoveFromEventList>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d00e      	beq.n	800e716 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00b      	beq.n	800e716 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2201      	movs	r2, #1
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	e007      	b.n	800e716 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e706:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e70a:	3301      	adds	r3, #1
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	b25a      	sxtb	r2, r3
 800e710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e712:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e716:	2301      	movs	r3, #1
 800e718:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e71a:	e001      	b.n	800e720 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e71c:	2300      	movs	r3, #0
 800e71e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e722:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e72a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e72c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3738      	adds	r7, #56	@ 0x38
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b08e      	sub	sp, #56	@ 0x38
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e746:	2b00      	cmp	r3, #0
 800e748:	d10d      	bne.n	800e766 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e74e:	b672      	cpsid	i
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	b662      	cpsie	i
 800e75e:	623b      	str	r3, [r7, #32]
}
 800e760:	bf00      	nop
 800e762:	bf00      	nop
 800e764:	e7fd      	b.n	800e762 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00d      	beq.n	800e78a <xQueueGiveFromISR+0x54>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	b672      	cpsid	i
 800e774:	f383 8811 	msr	BASEPRI, r3
 800e778:	f3bf 8f6f 	isb	sy
 800e77c:	f3bf 8f4f 	dsb	sy
 800e780:	b662      	cpsie	i
 800e782:	61fb      	str	r3, [r7, #28]
}
 800e784:	bf00      	nop
 800e786:	bf00      	nop
 800e788:	e7fd      	b.n	800e786 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d103      	bne.n	800e79a <xQueueGiveFromISR+0x64>
 800e792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <xQueueGiveFromISR+0x68>
 800e79a:	2301      	movs	r3, #1
 800e79c:	e000      	b.n	800e7a0 <xQueueGiveFromISR+0x6a>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10d      	bne.n	800e7c0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a8:	b672      	cpsid	i
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	b662      	cpsie	i
 800e7b8:	61bb      	str	r3, [r7, #24]
}
 800e7ba:	bf00      	nop
 800e7bc:	bf00      	nop
 800e7be:	e7fd      	b.n	800e7bc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7c0:	f002 fb6c 	bl	8010e9c <vPortValidateInterruptPriority>
	__asm volatile
 800e7c4:	f3ef 8211 	mrs	r2, BASEPRI
 800e7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7cc:	b672      	cpsid	i
 800e7ce:	f383 8811 	msr	BASEPRI, r3
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	b662      	cpsie	i
 800e7dc:	617a      	str	r2, [r7, #20]
 800e7de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e7e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7e8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d22b      	bcs.n	800e84c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e804:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e806:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e80a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e80e:	d112      	bne.n	800e836 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e814:	2b00      	cmp	r3, #0
 800e816:	d016      	beq.n	800e846 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e81a:	3324      	adds	r3, #36	@ 0x24
 800e81c:	4618      	mov	r0, r3
 800e81e:	f001 fa19 	bl	800fc54 <xTaskRemoveFromEventList>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00e      	beq.n	800e846 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00b      	beq.n	800e846 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2201      	movs	r2, #1
 800e832:	601a      	str	r2, [r3, #0]
 800e834:	e007      	b.n	800e846 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e836:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e83a:	3301      	adds	r3, #1
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	b25a      	sxtb	r2, r3
 800e840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e846:	2301      	movs	r3, #1
 800e848:	637b      	str	r3, [r7, #52]	@ 0x34
 800e84a:	e001      	b.n	800e850 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e84c:	2300      	movs	r3, #0
 800e84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e852:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f383 8811 	msr	BASEPRI, r3
}
 800e85a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3738      	adds	r7, #56	@ 0x38
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
	...

0800e868 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08c      	sub	sp, #48	@ 0x30
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e874:	2300      	movs	r3, #0
 800e876:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10d      	bne.n	800e89e <xQueueReceive+0x36>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e886:	b672      	cpsid	i
 800e888:	f383 8811 	msr	BASEPRI, r3
 800e88c:	f3bf 8f6f 	isb	sy
 800e890:	f3bf 8f4f 	dsb	sy
 800e894:	b662      	cpsie	i
 800e896:	623b      	str	r3, [r7, #32]
}
 800e898:	bf00      	nop
 800e89a:	bf00      	nop
 800e89c:	e7fd      	b.n	800e89a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d103      	bne.n	800e8ac <xQueueReceive+0x44>
 800e8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d101      	bne.n	800e8b0 <xQueueReceive+0x48>
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e000      	b.n	800e8b2 <xQueueReceive+0x4a>
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10d      	bne.n	800e8d2 <xQueueReceive+0x6a>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ba:	b672      	cpsid	i
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	b662      	cpsie	i
 800e8ca:	61fb      	str	r3, [r7, #28]
}
 800e8cc:	bf00      	nop
 800e8ce:	bf00      	nop
 800e8d0:	e7fd      	b.n	800e8ce <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8d2:	f001 fb9d 	bl	8010010 <xTaskGetSchedulerState>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <xQueueReceive+0x7a>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <xQueueReceive+0x7e>
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e000      	b.n	800e8e8 <xQueueReceive+0x80>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10d      	bne.n	800e908 <xQueueReceive+0xa0>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8f0:	b672      	cpsid	i
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	b662      	cpsie	i
 800e900:	61bb      	str	r3, [r7, #24]
}
 800e902:	bf00      	nop
 800e904:	bf00      	nop
 800e906:	e7fd      	b.n	800e904 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e908:	f002 f9e0 	bl	8010ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e910:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e914:	2b00      	cmp	r3, #0
 800e916:	d01f      	beq.n	800e958 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e918:	68b9      	ldr	r1, [r7, #8]
 800e91a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e91c:	f000 fb16 	bl	800ef4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e922:	1e5a      	subs	r2, r3, #1
 800e924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e926:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92a:	691b      	ldr	r3, [r3, #16]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00f      	beq.n	800e950 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e932:	3310      	adds	r3, #16
 800e934:	4618      	mov	r0, r3
 800e936:	f001 f98d 	bl	800fc54 <xTaskRemoveFromEventList>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d007      	beq.n	800e950 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e940:	4b3c      	ldr	r3, [pc, #240]	@ (800ea34 <xQueueReceive+0x1cc>)
 800e942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e950:	f002 f9f2 	bl	8010d38 <vPortExitCritical>
				return pdPASS;
 800e954:	2301      	movs	r3, #1
 800e956:	e069      	b.n	800ea2c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d103      	bne.n	800e966 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e95e:	f002 f9eb 	bl	8010d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e962:	2300      	movs	r3, #0
 800e964:	e062      	b.n	800ea2c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d106      	bne.n	800e97a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e96c:	f107 0310 	add.w	r3, r7, #16
 800e970:	4618      	mov	r0, r3
 800e972:	f001 f9d5 	bl	800fd20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e976:	2301      	movs	r3, #1
 800e978:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e97a:	f002 f9dd 	bl	8010d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e97e:	f000 fefb 	bl	800f778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e982:	f002 f9a3 	bl	8010ccc <vPortEnterCritical>
 800e986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e98c:	b25b      	sxtb	r3, r3
 800e98e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e992:	d103      	bne.n	800e99c <xQueueReceive+0x134>
 800e994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e996:	2200      	movs	r2, #0
 800e998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9a2:	b25b      	sxtb	r3, r3
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9a8:	d103      	bne.n	800e9b2 <xQueueReceive+0x14a>
 800e9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9b2:	f002 f9c1 	bl	8010d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9b6:	1d3a      	adds	r2, r7, #4
 800e9b8:	f107 0310 	add.w	r3, r7, #16
 800e9bc:	4611      	mov	r1, r2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f001 f9c4 	bl	800fd4c <xTaskCheckForTimeOut>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d123      	bne.n	800ea12 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9cc:	f000 fb36 	bl	800f03c <prvIsQueueEmpty>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d017      	beq.n	800ea06 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9d8:	3324      	adds	r3, #36	@ 0x24
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	4611      	mov	r1, r2
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f001 f8e2 	bl	800fba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9e6:	f000 fad7 	bl	800ef98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9ea:	f000 fed3 	bl	800f794 <xTaskResumeAll>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d189      	bne.n	800e908 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea34 <xQueueReceive+0x1cc>)
 800e9f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9fa:	601a      	str	r2, [r3, #0]
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	f3bf 8f6f 	isb	sy
 800ea04:	e780      	b.n	800e908 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea08:	f000 fac6 	bl	800ef98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea0c:	f000 fec2 	bl	800f794 <xTaskResumeAll>
 800ea10:	e77a      	b.n	800e908 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea14:	f000 fac0 	bl	800ef98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea18:	f000 febc 	bl	800f794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea1e:	f000 fb0d 	bl	800f03c <prvIsQueueEmpty>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f43f af6f 	beq.w	800e908 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3730      	adds	r7, #48	@ 0x30
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	e000ed04 	.word	0xe000ed04

0800ea38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08e      	sub	sp, #56	@ 0x38
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea42:	2300      	movs	r3, #0
 800ea44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d10d      	bne.n	800ea70 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ea54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea58:	b672      	cpsid	i
 800ea5a:	f383 8811 	msr	BASEPRI, r3
 800ea5e:	f3bf 8f6f 	isb	sy
 800ea62:	f3bf 8f4f 	dsb	sy
 800ea66:	b662      	cpsie	i
 800ea68:	623b      	str	r3, [r7, #32]
}
 800ea6a:	bf00      	nop
 800ea6c:	bf00      	nop
 800ea6e:	e7fd      	b.n	800ea6c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00d      	beq.n	800ea94 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ea78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7c:	b672      	cpsid	i
 800ea7e:	f383 8811 	msr	BASEPRI, r3
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	f3bf 8f4f 	dsb	sy
 800ea8a:	b662      	cpsie	i
 800ea8c:	61fb      	str	r3, [r7, #28]
}
 800ea8e:	bf00      	nop
 800ea90:	bf00      	nop
 800ea92:	e7fd      	b.n	800ea90 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea94:	f001 fabc 	bl	8010010 <xTaskGetSchedulerState>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d102      	bne.n	800eaa4 <xQueueSemaphoreTake+0x6c>
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <xQueueSemaphoreTake+0x70>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e000      	b.n	800eaaa <xQueueSemaphoreTake+0x72>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d10d      	bne.n	800eaca <xQueueSemaphoreTake+0x92>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab2:	b672      	cpsid	i
 800eab4:	f383 8811 	msr	BASEPRI, r3
 800eab8:	f3bf 8f6f 	isb	sy
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	b662      	cpsie	i
 800eac2:	61bb      	str	r3, [r7, #24]
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop
 800eac8:	e7fd      	b.n	800eac6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eaca:	f002 f8ff 	bl	8010ccc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ead2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ead4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d024      	beq.n	800eb24 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eadc:	1e5a      	subs	r2, r3, #1
 800eade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d104      	bne.n	800eaf4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eaea:	f001 fc13 	bl	8010314 <pvTaskIncrementMutexHeldCount>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00f      	beq.n	800eb1c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafe:	3310      	adds	r3, #16
 800eb00:	4618      	mov	r0, r3
 800eb02:	f001 f8a7 	bl	800fc54 <xTaskRemoveFromEventList>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d007      	beq.n	800eb1c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb0c:	4b55      	ldr	r3, [pc, #340]	@ (800ec64 <xQueueSemaphoreTake+0x22c>)
 800eb0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb12:	601a      	str	r2, [r3, #0]
 800eb14:	f3bf 8f4f 	dsb	sy
 800eb18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb1c:	f002 f90c 	bl	8010d38 <vPortExitCritical>
				return pdPASS;
 800eb20:	2301      	movs	r3, #1
 800eb22:	e09a      	b.n	800ec5a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d114      	bne.n	800eb54 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00d      	beq.n	800eb4c <xQueueSemaphoreTake+0x114>
	__asm volatile
 800eb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb34:	b672      	cpsid	i
 800eb36:	f383 8811 	msr	BASEPRI, r3
 800eb3a:	f3bf 8f6f 	isb	sy
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	b662      	cpsie	i
 800eb44:	617b      	str	r3, [r7, #20]
}
 800eb46:	bf00      	nop
 800eb48:	bf00      	nop
 800eb4a:	e7fd      	b.n	800eb48 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb4c:	f002 f8f4 	bl	8010d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb50:	2300      	movs	r3, #0
 800eb52:	e082      	b.n	800ec5a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d106      	bne.n	800eb68 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb5a:	f107 030c 	add.w	r3, r7, #12
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f001 f8de 	bl	800fd20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb64:	2301      	movs	r3, #1
 800eb66:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb68:	f002 f8e6 	bl	8010d38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb6c:	f000 fe04 	bl	800f778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb70:	f002 f8ac 	bl	8010ccc <vPortEnterCritical>
 800eb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb7a:	b25b      	sxtb	r3, r3
 800eb7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb80:	d103      	bne.n	800eb8a <xQueueSemaphoreTake+0x152>
 800eb82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb90:	b25b      	sxtb	r3, r3
 800eb92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb96:	d103      	bne.n	800eba0 <xQueueSemaphoreTake+0x168>
 800eb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eba0:	f002 f8ca 	bl	8010d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eba4:	463a      	mov	r2, r7
 800eba6:	f107 030c 	add.w	r3, r7, #12
 800ebaa:	4611      	mov	r1, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f001 f8cd 	bl	800fd4c <xTaskCheckForTimeOut>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d132      	bne.n	800ec1e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebba:	f000 fa3f 	bl	800f03c <prvIsQueueEmpty>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d026      	beq.n	800ec12 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d109      	bne.n	800ebe0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ebcc:	f002 f87e 	bl	8010ccc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f001 fa39 	bl	801004c <xTaskPriorityInherit>
 800ebda:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ebdc:	f002 f8ac 	bl	8010d38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe2:	3324      	adds	r3, #36	@ 0x24
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 ffdd 	bl	800fba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebf0:	f000 f9d2 	bl	800ef98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebf4:	f000 fdce 	bl	800f794 <xTaskResumeAll>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f47f af65 	bne.w	800eaca <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ec00:	4b18      	ldr	r3, [pc, #96]	@ (800ec64 <xQueueSemaphoreTake+0x22c>)
 800ec02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec06:	601a      	str	r2, [r3, #0]
 800ec08:	f3bf 8f4f 	dsb	sy
 800ec0c:	f3bf 8f6f 	isb	sy
 800ec10:	e75b      	b.n	800eaca <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec14:	f000 f9c0 	bl	800ef98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec18:	f000 fdbc 	bl	800f794 <xTaskResumeAll>
 800ec1c:	e755      	b.n	800eaca <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec20:	f000 f9ba 	bl	800ef98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec24:	f000 fdb6 	bl	800f794 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec2a:	f000 fa07 	bl	800f03c <prvIsQueueEmpty>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f43f af4a 	beq.w	800eaca <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00d      	beq.n	800ec58 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ec3c:	f002 f846 	bl	8010ccc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec42:	f000 f901 	bl	800ee48 <prvGetDisinheritPriorityAfterTimeout>
 800ec46:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f001 fad8 	bl	8010204 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec54:	f002 f870 	bl	8010d38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3738      	adds	r7, #56	@ 0x38
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	e000ed04 	.word	0xe000ed04

0800ec68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08e      	sub	sp, #56	@ 0x38
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ec78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10d      	bne.n	800ec9a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec82:	b672      	cpsid	i
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	b662      	cpsie	i
 800ec92:	623b      	str	r3, [r7, #32]
}
 800ec94:	bf00      	nop
 800ec96:	bf00      	nop
 800ec98:	e7fd      	b.n	800ec96 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d103      	bne.n	800eca8 <xQueueReceiveFromISR+0x40>
 800eca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <xQueueReceiveFromISR+0x44>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e000      	b.n	800ecae <xQueueReceiveFromISR+0x46>
 800ecac:	2300      	movs	r3, #0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10d      	bne.n	800ecce <xQueueReceiveFromISR+0x66>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecb6:	b672      	cpsid	i
 800ecb8:	f383 8811 	msr	BASEPRI, r3
 800ecbc:	f3bf 8f6f 	isb	sy
 800ecc0:	f3bf 8f4f 	dsb	sy
 800ecc4:	b662      	cpsie	i
 800ecc6:	61fb      	str	r3, [r7, #28]
}
 800ecc8:	bf00      	nop
 800ecca:	bf00      	nop
 800eccc:	e7fd      	b.n	800ecca <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecce:	f002 f8e5 	bl	8010e9c <vPortValidateInterruptPriority>
	__asm volatile
 800ecd2:	f3ef 8211 	mrs	r2, BASEPRI
 800ecd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecda:	b672      	cpsid	i
 800ecdc:	f383 8811 	msr	BASEPRI, r3
 800ece0:	f3bf 8f6f 	isb	sy
 800ece4:	f3bf 8f4f 	dsb	sy
 800ece8:	b662      	cpsie	i
 800ecea:	61ba      	str	r2, [r7, #24]
 800ecec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ecee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ecf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d02f      	beq.n	800ed5e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed08:	68b9      	ldr	r1, [r7, #8]
 800ed0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed0c:	f000 f91e 	bl	800ef4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed12:	1e5a      	subs	r2, r3, #1
 800ed14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ed1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed20:	d112      	bne.n	800ed48 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed24:	691b      	ldr	r3, [r3, #16]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d016      	beq.n	800ed58 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed2c:	3310      	adds	r3, #16
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f000 ff90 	bl	800fc54 <xTaskRemoveFromEventList>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00e      	beq.n	800ed58 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d00b      	beq.n	800ed58 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2201      	movs	r2, #1
 800ed44:	601a      	str	r2, [r3, #0]
 800ed46:	e007      	b.n	800ed58 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed4c:	3301      	adds	r3, #1
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	b25a      	sxtb	r2, r3
 800ed52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed5c:	e001      	b.n	800ed62 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	f383 8811 	msr	BASEPRI, r3
}
 800ed6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3738      	adds	r7, #56	@ 0x38
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10d      	bne.n	800eda2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800ed86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed8a:	b672      	cpsid	i
 800ed8c:	f383 8811 	msr	BASEPRI, r3
 800ed90:	f3bf 8f6f 	isb	sy
 800ed94:	f3bf 8f4f 	dsb	sy
 800ed98:	b662      	cpsie	i
 800ed9a:	60bb      	str	r3, [r7, #8]
}
 800ed9c:	bf00      	nop
 800ed9e:	bf00      	nop
 800eda0:	e7fd      	b.n	800ed9e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800eda2:	f001 ff93 	bl	8010ccc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edaa:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800edac:	f001 ffc4 	bl	8010d38 <vPortExitCritical>

	return uxReturn;
 800edb0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800edba:	b480      	push	{r7}
 800edbc:	b087      	sub	sp, #28
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d10d      	bne.n	800ede8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800edcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edd0:	b672      	cpsid	i
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	b662      	cpsie	i
 800ede0:	60fb      	str	r3, [r7, #12]
}
 800ede2:	bf00      	nop
 800ede4:	bf00      	nop
 800ede6:	e7fd      	b.n	800ede4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800edee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800edf0:	4618      	mov	r0, r3
 800edf2:	371c      	adds	r7, #28
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d10d      	bne.n	800ee2a <vQueueDelete+0x2e>
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee12:	b672      	cpsid	i
 800ee14:	f383 8811 	msr	BASEPRI, r3
 800ee18:	f3bf 8f6f 	isb	sy
 800ee1c:	f3bf 8f4f 	dsb	sy
 800ee20:	b662      	cpsie	i
 800ee22:	60bb      	str	r3, [r7, #8]
}
 800ee24:	bf00      	nop
 800ee26:	bf00      	nop
 800ee28:	e7fd      	b.n	800ee26 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f000 f95e 	bl	800f0ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f002 f946 	bl	80110cc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ee40:	bf00      	nop
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d006      	beq.n	800ee66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	e001      	b.n	800ee6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee66:	2300      	movs	r3, #0
 800ee68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
	}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3714      	adds	r7, #20
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b086      	sub	sp, #24
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee84:	2300      	movs	r3, #0
 800ee86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10d      	bne.n	800eeb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d14d      	bne.n	800ef3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f001 f93a 	bl	801011c <xTaskPriorityDisinherit>
 800eea8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2200      	movs	r2, #0
 800eeae:	609a      	str	r2, [r3, #8]
 800eeb0:	e043      	b.n	800ef3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d119      	bne.n	800eeec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6858      	ldr	r0, [r3, #4]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eec0:	461a      	mov	r2, r3
 800eec2:	68b9      	ldr	r1, [r7, #8]
 800eec4:	f011 fc1b 	bl	80206fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	685a      	ldr	r2, [r3, #4]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eed0:	441a      	add	r2, r3
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	685a      	ldr	r2, [r3, #4]
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d32b      	bcc.n	800ef3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	605a      	str	r2, [r3, #4]
 800eeea:	e026      	b.n	800ef3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	68d8      	ldr	r0, [r3, #12]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eef4:	461a      	mov	r2, r3
 800eef6:	68b9      	ldr	r1, [r7, #8]
 800eef8:	f011 fc01 	bl	80206fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef04:	425b      	negs	r3, r3
 800ef06:	441a      	add	r2, r3
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d207      	bcs.n	800ef28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	689a      	ldr	r2, [r3, #8]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef20:	425b      	negs	r3, r3
 800ef22:	441a      	add	r2, r3
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d105      	bne.n	800ef3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	3b01      	subs	r3, #1
 800ef38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	1c5a      	adds	r2, r3, #1
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ef42:	697b      	ldr	r3, [r7, #20]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3718      	adds	r7, #24
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d018      	beq.n	800ef90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef66:	441a      	add	r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68da      	ldr	r2, [r3, #12]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d303      	bcc.n	800ef80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68d9      	ldr	r1, [r3, #12]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef88:	461a      	mov	r2, r3
 800ef8a:	6838      	ldr	r0, [r7, #0]
 800ef8c:	f011 fbb7 	bl	80206fe <memcpy>
	}
}
 800ef90:	bf00      	nop
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800efa0:	f001 fe94 	bl	8010ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efac:	e011      	b.n	800efd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d012      	beq.n	800efdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	3324      	adds	r3, #36	@ 0x24
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 fe4a 	bl	800fc54 <xTaskRemoveFromEventList>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800efc6:	f000 ff29 	bl	800fe1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800efca:	7bfb      	ldrb	r3, [r7, #15]
 800efcc:	3b01      	subs	r3, #1
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	dce9      	bgt.n	800efae <prvUnlockQueue+0x16>
 800efda:	e000      	b.n	800efde <prvUnlockQueue+0x46>
					break;
 800efdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	22ff      	movs	r2, #255	@ 0xff
 800efe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800efe6:	f001 fea7 	bl	8010d38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800efea:	f001 fe6f 	bl	8010ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eff4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eff6:	e011      	b.n	800f01c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d012      	beq.n	800f026 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3310      	adds	r3, #16
 800f004:	4618      	mov	r0, r3
 800f006:	f000 fe25 	bl	800fc54 <xTaskRemoveFromEventList>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f010:	f000 ff04 	bl	800fe1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	3b01      	subs	r3, #1
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f01c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f020:	2b00      	cmp	r3, #0
 800f022:	dce9      	bgt.n	800eff8 <prvUnlockQueue+0x60>
 800f024:	e000      	b.n	800f028 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f026:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	22ff      	movs	r2, #255	@ 0xff
 800f02c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f030:	f001 fe82 	bl	8010d38 <vPortExitCritical>
}
 800f034:	bf00      	nop
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f044:	f001 fe42 	bl	8010ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d102      	bne.n	800f056 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f050:	2301      	movs	r3, #1
 800f052:	60fb      	str	r3, [r7, #12]
 800f054:	e001      	b.n	800f05a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f056:	2300      	movs	r3, #0
 800f058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f05a:	f001 fe6d 	bl	8010d38 <vPortExitCritical>

	return xReturn;
 800f05e:	68fb      	ldr	r3, [r7, #12]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f070:	f001 fe2c 	bl	8010ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d102      	bne.n	800f086 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f080:	2301      	movs	r3, #1
 800f082:	60fb      	str	r3, [r7, #12]
 800f084:	e001      	b.n	800f08a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f086:	2300      	movs	r3, #0
 800f088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f08a:	f001 fe55 	bl	8010d38 <vPortExitCritical>

	return xReturn;
 800f08e:	68fb      	ldr	r3, [r7, #12]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f098:	b480      	push	{r7}
 800f09a:	b085      	sub	sp, #20
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	60fb      	str	r3, [r7, #12]
 800f0a6:	e014      	b.n	800f0d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f0a8:	4a0f      	ldr	r2, [pc, #60]	@ (800f0e8 <vQueueAddToRegistry+0x50>)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d10b      	bne.n	800f0cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f0b4:	490c      	ldr	r1, [pc, #48]	@ (800f0e8 <vQueueAddToRegistry+0x50>)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	683a      	ldr	r2, [r7, #0]
 800f0ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f0be:	4a0a      	ldr	r2, [pc, #40]	@ (800f0e8 <vQueueAddToRegistry+0x50>)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	4413      	add	r3, r2
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f0ca:	e006      	b.n	800f0da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	2b0b      	cmp	r3, #11
 800f0d6:	d9e7      	bls.n	800f0a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f0d8:	bf00      	nop
 800f0da:	bf00      	nop
 800f0dc:	3714      	adds	r7, #20
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	2000e9f4 	.word	0x2000e9f4

0800f0ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	60fb      	str	r3, [r7, #12]
 800f0f8:	e016      	b.n	800f128 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f0fa:	4a10      	ldr	r2, [pc, #64]	@ (800f13c <vQueueUnregisterQueue+0x50>)
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	4413      	add	r3, r2
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	429a      	cmp	r2, r3
 800f108:	d10b      	bne.n	800f122 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f10a:	4a0c      	ldr	r2, [pc, #48]	@ (800f13c <vQueueUnregisterQueue+0x50>)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2100      	movs	r1, #0
 800f110:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f114:	4a09      	ldr	r2, [pc, #36]	@ (800f13c <vQueueUnregisterQueue+0x50>)
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	00db      	lsls	r3, r3, #3
 800f11a:	4413      	add	r3, r2
 800f11c:	2200      	movs	r2, #0
 800f11e:	605a      	str	r2, [r3, #4]
				break;
 800f120:	e006      	b.n	800f130 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	3301      	adds	r3, #1
 800f126:	60fb      	str	r3, [r7, #12]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b0b      	cmp	r3, #11
 800f12c:	d9e5      	bls.n	800f0fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f12e:	bf00      	nop
 800f130:	bf00      	nop
 800f132:	3714      	adds	r7, #20
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	2000e9f4 	.word	0x2000e9f4

0800f140 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f150:	f001 fdbc 	bl	8010ccc <vPortEnterCritical>
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f15a:	b25b      	sxtb	r3, r3
 800f15c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f160:	d103      	bne.n	800f16a <vQueueWaitForMessageRestricted+0x2a>
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2200      	movs	r2, #0
 800f166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f170:	b25b      	sxtb	r3, r3
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f176:	d103      	bne.n	800f180 <vQueueWaitForMessageRestricted+0x40>
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f180:	f001 fdda 	bl	8010d38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d106      	bne.n	800f19a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	3324      	adds	r3, #36	@ 0x24
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	68b9      	ldr	r1, [r7, #8]
 800f194:	4618      	mov	r0, r3
 800f196:	f000 fd2f 	bl	800fbf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f19a:	6978      	ldr	r0, [r7, #20]
 800f19c:	f7ff fefc 	bl	800ef98 <prvUnlockQueue>
	}
 800f1a0:	bf00      	nop
 800f1a2:	3718      	adds	r7, #24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08e      	sub	sp, #56	@ 0x38
 800f1ac:	af04      	add	r7, sp, #16
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
 800f1b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d10d      	bne.n	800f1d8 <xTaskCreateStatic+0x30>
	__asm volatile
 800f1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c0:	b672      	cpsid	i
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	b662      	cpsie	i
 800f1d0:	623b      	str	r3, [r7, #32]
}
 800f1d2:	bf00      	nop
 800f1d4:	bf00      	nop
 800f1d6:	e7fd      	b.n	800f1d4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10d      	bne.n	800f1fa <xTaskCreateStatic+0x52>
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e2:	b672      	cpsid	i
 800f1e4:	f383 8811 	msr	BASEPRI, r3
 800f1e8:	f3bf 8f6f 	isb	sy
 800f1ec:	f3bf 8f4f 	dsb	sy
 800f1f0:	b662      	cpsie	i
 800f1f2:	61fb      	str	r3, [r7, #28]
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop
 800f1f8:	e7fd      	b.n	800f1f6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1fa:	23a8      	movs	r3, #168	@ 0xa8
 800f1fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	2ba8      	cmp	r3, #168	@ 0xa8
 800f202:	d00d      	beq.n	800f220 <xTaskCreateStatic+0x78>
	__asm volatile
 800f204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f208:	b672      	cpsid	i
 800f20a:	f383 8811 	msr	BASEPRI, r3
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	b662      	cpsie	i
 800f218:	61bb      	str	r3, [r7, #24]
}
 800f21a:	bf00      	nop
 800f21c:	bf00      	nop
 800f21e:	e7fd      	b.n	800f21c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f220:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01e      	beq.n	800f266 <xTaskCreateStatic+0xbe>
 800f228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d01b      	beq.n	800f266 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f230:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f236:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23a:	2202      	movs	r2, #2
 800f23c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f240:	2300      	movs	r3, #0
 800f242:	9303      	str	r3, [sp, #12]
 800f244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f246:	9302      	str	r3, [sp, #8]
 800f248:	f107 0314 	add.w	r3, r7, #20
 800f24c:	9301      	str	r3, [sp, #4]
 800f24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	68b9      	ldr	r1, [r7, #8]
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f000 f851 	bl	800f300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f25e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f260:	f000 f8f8 	bl	800f454 <prvAddNewTaskToReadyList>
 800f264:	e001      	b.n	800f26a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f266:	2300      	movs	r3, #0
 800f268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f26a:	697b      	ldr	r3, [r7, #20]
	}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3728      	adds	r7, #40	@ 0x28
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f274:	b580      	push	{r7, lr}
 800f276:	b08c      	sub	sp, #48	@ 0x30
 800f278:	af04      	add	r7, sp, #16
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	4613      	mov	r3, r2
 800f282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f284:	88fb      	ldrh	r3, [r7, #6]
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4618      	mov	r0, r3
 800f28a:	f001 fe4d 	bl	8010f28 <pvPortMalloc>
 800f28e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00e      	beq.n	800f2b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f296:	20a8      	movs	r0, #168	@ 0xa8
 800f298:	f001 fe46 	bl	8010f28 <pvPortMalloc>
 800f29c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d003      	beq.n	800f2ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	697a      	ldr	r2, [r7, #20]
 800f2a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f2aa:	e005      	b.n	800f2b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f2ac:	6978      	ldr	r0, [r7, #20]
 800f2ae:	f001 ff0d 	bl	80110cc <vPortFree>
 800f2b2:	e001      	b.n	800f2b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d017      	beq.n	800f2ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f2c6:	88fa      	ldrh	r2, [r7, #6]
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	9303      	str	r3, [sp, #12]
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	9302      	str	r3, [sp, #8]
 800f2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d2:	9301      	str	r3, [sp, #4]
 800f2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	68b9      	ldr	r1, [r7, #8]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f000 f80f 	bl	800f300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2e2:	69f8      	ldr	r0, [r7, #28]
 800f2e4:	f000 f8b6 	bl	800f454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	61bb      	str	r3, [r7, #24]
 800f2ec:	e002      	b.n	800f2f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2f4:	69bb      	ldr	r3, [r7, #24]
	}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3720      	adds	r7, #32
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
	...

0800f300 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b088      	sub	sp, #32
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f310:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	461a      	mov	r2, r3
 800f318:	21a5      	movs	r1, #165	@ 0xa5
 800f31a:	f011 f91d 	bl	8020558 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f322:	6879      	ldr	r1, [r7, #4]
 800f324:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f328:	440b      	add	r3, r1
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	f023 0307 	bic.w	r3, r3, #7
 800f336:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f338:	69bb      	ldr	r3, [r7, #24]
 800f33a:	f003 0307 	and.w	r3, r3, #7
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00d      	beq.n	800f35e <prvInitialiseNewTask+0x5e>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f346:	b672      	cpsid	i
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	b662      	cpsie	i
 800f356:	617b      	str	r3, [r7, #20]
}
 800f358:	bf00      	nop
 800f35a:	bf00      	nop
 800f35c:	e7fd      	b.n	800f35a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d01f      	beq.n	800f3a4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f364:	2300      	movs	r3, #0
 800f366:	61fb      	str	r3, [r7, #28]
 800f368:	e012      	b.n	800f390 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	4413      	add	r3, r2
 800f370:	7819      	ldrb	r1, [r3, #0]
 800f372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	4413      	add	r3, r2
 800f378:	3334      	adds	r3, #52	@ 0x34
 800f37a:	460a      	mov	r2, r1
 800f37c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f37e:	68ba      	ldr	r2, [r7, #8]
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	4413      	add	r3, r2
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d006      	beq.n	800f398 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	3301      	adds	r3, #1
 800f38e:	61fb      	str	r3, [r7, #28]
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	2b0f      	cmp	r3, #15
 800f394:	d9e9      	bls.n	800f36a <prvInitialiseNewTask+0x6a>
 800f396:	e000      	b.n	800f39a <prvInitialiseNewTask+0x9a>
			{
				break;
 800f398:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f3a2:	e003      	b.n	800f3ac <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ae:	2b37      	cmp	r3, #55	@ 0x37
 800f3b0:	d901      	bls.n	800f3b6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f3b2:	2337      	movs	r3, #55	@ 0x37
 800f3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ca:	3304      	adds	r3, #4
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7fe fce5 	bl	800dd9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d4:	3318      	adds	r3, #24
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fe fce0 	bl	800dd9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f404:	3354      	adds	r3, #84	@ 0x54
 800f406:	224c      	movs	r2, #76	@ 0x4c
 800f408:	2100      	movs	r1, #0
 800f40a:	4618      	mov	r0, r3
 800f40c:	f011 f8a4 	bl	8020558 <memset>
 800f410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f412:	4a0d      	ldr	r2, [pc, #52]	@ (800f448 <prvInitialiseNewTask+0x148>)
 800f414:	659a      	str	r2, [r3, #88]	@ 0x58
 800f416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f418:	4a0c      	ldr	r2, [pc, #48]	@ (800f44c <prvInitialiseNewTask+0x14c>)
 800f41a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f41e:	4a0c      	ldr	r2, [pc, #48]	@ (800f450 <prvInitialiseNewTask+0x150>)
 800f420:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	68f9      	ldr	r1, [r7, #12]
 800f426:	69b8      	ldr	r0, [r7, #24]
 800f428:	f001 fb44 	bl	8010ab4 <pxPortInitialiseStack>
 800f42c:	4602      	mov	r2, r0
 800f42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f430:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f43c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f43e:	bf00      	nop
 800f440:	3720      	adds	r7, #32
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	20025770 	.word	0x20025770
 800f44c:	200257d8 	.word	0x200257d8
 800f450:	20025840 	.word	0x20025840

0800f454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f45c:	f001 fc36 	bl	8010ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f460:	4b2d      	ldr	r3, [pc, #180]	@ (800f518 <prvAddNewTaskToReadyList+0xc4>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	3301      	adds	r3, #1
 800f466:	4a2c      	ldr	r2, [pc, #176]	@ (800f518 <prvAddNewTaskToReadyList+0xc4>)
 800f468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f46a:	4b2c      	ldr	r3, [pc, #176]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d109      	bne.n	800f486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f472:	4a2a      	ldr	r2, [pc, #168]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f478:	4b27      	ldr	r3, [pc, #156]	@ (800f518 <prvAddNewTaskToReadyList+0xc4>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d110      	bne.n	800f4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f480:	f000 fcf0 	bl	800fe64 <prvInitialiseTaskLists>
 800f484:	e00d      	b.n	800f4a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f486:	4b26      	ldr	r3, [pc, #152]	@ (800f520 <prvAddNewTaskToReadyList+0xcc>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d109      	bne.n	800f4a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f48e:	4b23      	ldr	r3, [pc, #140]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f498:	429a      	cmp	r2, r3
 800f49a:	d802      	bhi.n	800f4a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f49c:	4a1f      	ldr	r2, [pc, #124]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f4a2:	4b20      	ldr	r3, [pc, #128]	@ (800f524 <prvAddNewTaskToReadyList+0xd0>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	4a1e      	ldr	r2, [pc, #120]	@ (800f524 <prvAddNewTaskToReadyList+0xd0>)
 800f4aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f4ac:	4b1d      	ldr	r3, [pc, #116]	@ (800f524 <prvAddNewTaskToReadyList+0xd0>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4b8:	4b1b      	ldr	r3, [pc, #108]	@ (800f528 <prvAddNewTaskToReadyList+0xd4>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d903      	bls.n	800f4c8 <prvAddNewTaskToReadyList+0x74>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c4:	4a18      	ldr	r2, [pc, #96]	@ (800f528 <prvAddNewTaskToReadyList+0xd4>)
 800f4c6:	6013      	str	r3, [r2, #0]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4a15      	ldr	r2, [pc, #84]	@ (800f52c <prvAddNewTaskToReadyList+0xd8>)
 800f4d6:	441a      	add	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	3304      	adds	r3, #4
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4610      	mov	r0, r2
 800f4e0:	f7fe fc69 	bl	800ddb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4e4:	f001 fc28 	bl	8010d38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f520 <prvAddNewTaskToReadyList+0xcc>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00e      	beq.n	800f50e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f51c <prvAddNewTaskToReadyList+0xc8>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d207      	bcs.n	800f50e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f530 <prvAddNewTaskToReadyList+0xdc>)
 800f500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	2000ef28 	.word	0x2000ef28
 800f51c:	2000ea54 	.word	0x2000ea54
 800f520:	2000ef34 	.word	0x2000ef34
 800f524:	2000ef44 	.word	0x2000ef44
 800f528:	2000ef30 	.word	0x2000ef30
 800f52c:	2000ea58 	.word	0x2000ea58
 800f530:	e000ed04 	.word	0xe000ed04

0800f534 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f53c:	f001 fbc6 	bl	8010ccc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d102      	bne.n	800f54c <vTaskDelete+0x18>
 800f546:	4b2e      	ldr	r3, [pc, #184]	@ (800f600 <vTaskDelete+0xcc>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	e000      	b.n	800f54e <vTaskDelete+0x1a>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3304      	adds	r3, #4
 800f554:	4618      	mov	r0, r3
 800f556:	f7fe fc8b 	bl	800de70 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d004      	beq.n	800f56c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	3318      	adds	r3, #24
 800f566:	4618      	mov	r0, r3
 800f568:	f7fe fc82 	bl	800de70 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800f56c:	4b25      	ldr	r3, [pc, #148]	@ (800f604 <vTaskDelete+0xd0>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	3301      	adds	r3, #1
 800f572:	4a24      	ldr	r2, [pc, #144]	@ (800f604 <vTaskDelete+0xd0>)
 800f574:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800f576:	4b22      	ldr	r3, [pc, #136]	@ (800f600 <vTaskDelete+0xcc>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d10b      	bne.n	800f598 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	3304      	adds	r3, #4
 800f584:	4619      	mov	r1, r3
 800f586:	4820      	ldr	r0, [pc, #128]	@ (800f608 <vTaskDelete+0xd4>)
 800f588:	f7fe fc15 	bl	800ddb6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800f58c:	4b1f      	ldr	r3, [pc, #124]	@ (800f60c <vTaskDelete+0xd8>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3301      	adds	r3, #1
 800f592:	4a1e      	ldr	r2, [pc, #120]	@ (800f60c <vTaskDelete+0xd8>)
 800f594:	6013      	str	r3, [r2, #0]
 800f596:	e009      	b.n	800f5ac <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f598:	4b1d      	ldr	r3, [pc, #116]	@ (800f610 <vTaskDelete+0xdc>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	3b01      	subs	r3, #1
 800f59e:	4a1c      	ldr	r2, [pc, #112]	@ (800f610 <vTaskDelete+0xdc>)
 800f5a0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f000 fccc 	bl	800ff40 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f5a8:	f000 fd02 	bl	800ffb0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800f5ac:	f001 fbc4 	bl	8010d38 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f5b0:	4b18      	ldr	r3, [pc, #96]	@ (800f614 <vTaskDelete+0xe0>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d01e      	beq.n	800f5f6 <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 800f5b8:	4b11      	ldr	r3, [pc, #68]	@ (800f600 <vTaskDelete+0xcc>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d119      	bne.n	800f5f6 <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f5c2:	4b15      	ldr	r3, [pc, #84]	@ (800f618 <vTaskDelete+0xe4>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00d      	beq.n	800f5e6 <vTaskDelete+0xb2>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ce:	b672      	cpsid	i
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	b662      	cpsie	i
 800f5de:	60bb      	str	r3, [r7, #8]
}
 800f5e0:	bf00      	nop
 800f5e2:	bf00      	nop
 800f5e4:	e7fd      	b.n	800f5e2 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800f5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f61c <vTaskDelete+0xe8>)
 800f5e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5ec:	601a      	str	r2, [r3, #0]
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f5f6:	bf00      	nop
 800f5f8:	3710      	adds	r7, #16
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	2000ea54 	.word	0x2000ea54
 800f604:	2000ef44 	.word	0x2000ef44
 800f608:	2000eefc 	.word	0x2000eefc
 800f60c:	2000ef10 	.word	0x2000ef10
 800f610:	2000ef28 	.word	0x2000ef28
 800f614:	2000ef34 	.word	0x2000ef34
 800f618:	2000ef50 	.word	0x2000ef50
 800f61c:	e000ed04 	.word	0xe000ed04

0800f620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f628:	2300      	movs	r3, #0
 800f62a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d01a      	beq.n	800f668 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f632:	4b15      	ldr	r3, [pc, #84]	@ (800f688 <vTaskDelay+0x68>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00d      	beq.n	800f656 <vTaskDelay+0x36>
	__asm volatile
 800f63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f63e:	b672      	cpsid	i
 800f640:	f383 8811 	msr	BASEPRI, r3
 800f644:	f3bf 8f6f 	isb	sy
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	b662      	cpsie	i
 800f64e:	60bb      	str	r3, [r7, #8]
}
 800f650:	bf00      	nop
 800f652:	bf00      	nop
 800f654:	e7fd      	b.n	800f652 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f656:	f000 f88f 	bl	800f778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f65a:	2100      	movs	r1, #0
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 fe6d 	bl	801033c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f662:	f000 f897 	bl	800f794 <xTaskResumeAll>
 800f666:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d107      	bne.n	800f67e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f66e:	4b07      	ldr	r3, [pc, #28]	@ (800f68c <vTaskDelay+0x6c>)
 800f670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f67e:	bf00      	nop
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	2000ef50 	.word	0x2000ef50
 800f68c:	e000ed04 	.word	0xe000ed04

0800f690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08a      	sub	sp, #40	@ 0x28
 800f694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f696:	2300      	movs	r3, #0
 800f698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f69a:	2300      	movs	r3, #0
 800f69c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f69e:	463a      	mov	r2, r7
 800f6a0:	1d39      	adds	r1, r7, #4
 800f6a2:	f107 0308 	add.w	r3, r7, #8
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fe fb24 	bl	800dcf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f6ac:	6839      	ldr	r1, [r7, #0]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	9202      	str	r2, [sp, #8]
 800f6b4:	9301      	str	r3, [sp, #4]
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	460a      	mov	r2, r1
 800f6be:	4926      	ldr	r1, [pc, #152]	@ (800f758 <vTaskStartScheduler+0xc8>)
 800f6c0:	4826      	ldr	r0, [pc, #152]	@ (800f75c <vTaskStartScheduler+0xcc>)
 800f6c2:	f7ff fd71 	bl	800f1a8 <xTaskCreateStatic>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	4a25      	ldr	r2, [pc, #148]	@ (800f760 <vTaskStartScheduler+0xd0>)
 800f6ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f6cc:	4b24      	ldr	r3, [pc, #144]	@ (800f760 <vTaskStartScheduler+0xd0>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d002      	beq.n	800f6da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	617b      	str	r3, [r7, #20]
 800f6d8:	e001      	b.n	800f6de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d102      	bne.n	800f6ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f6e4:	f000 fe7e 	bl	80103e4 <xTimerCreateTimerTask>
 800f6e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	d11d      	bne.n	800f72c <vTaskStartScheduler+0x9c>
	__asm volatile
 800f6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f4:	b672      	cpsid	i
 800f6f6:	f383 8811 	msr	BASEPRI, r3
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	f3bf 8f4f 	dsb	sy
 800f702:	b662      	cpsie	i
 800f704:	613b      	str	r3, [r7, #16]
}
 800f706:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f708:	4b16      	ldr	r3, [pc, #88]	@ (800f764 <vTaskStartScheduler+0xd4>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	3354      	adds	r3, #84	@ 0x54
 800f70e:	4a16      	ldr	r2, [pc, #88]	@ (800f768 <vTaskStartScheduler+0xd8>)
 800f710:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f712:	4b16      	ldr	r3, [pc, #88]	@ (800f76c <vTaskStartScheduler+0xdc>)
 800f714:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f718:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f71a:	4b15      	ldr	r3, [pc, #84]	@ (800f770 <vTaskStartScheduler+0xe0>)
 800f71c:	2201      	movs	r2, #1
 800f71e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f720:	4b14      	ldr	r3, [pc, #80]	@ (800f774 <vTaskStartScheduler+0xe4>)
 800f722:	2200      	movs	r2, #0
 800f724:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f726:	f001 fa53 	bl	8010bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f72a:	e011      	b.n	800f750 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f732:	d10d      	bne.n	800f750 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f738:	b672      	cpsid	i
 800f73a:	f383 8811 	msr	BASEPRI, r3
 800f73e:	f3bf 8f6f 	isb	sy
 800f742:	f3bf 8f4f 	dsb	sy
 800f746:	b662      	cpsie	i
 800f748:	60fb      	str	r3, [r7, #12]
}
 800f74a:	bf00      	nop
 800f74c:	bf00      	nop
 800f74e:	e7fd      	b.n	800f74c <vTaskStartScheduler+0xbc>
}
 800f750:	bf00      	nop
 800f752:	3718      	adds	r7, #24
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	080213a0 	.word	0x080213a0
 800f75c:	0800fe35 	.word	0x0800fe35
 800f760:	2000ef4c 	.word	0x2000ef4c
 800f764:	2000ea54 	.word	0x2000ea54
 800f768:	2000003c 	.word	0x2000003c
 800f76c:	2000ef48 	.word	0x2000ef48
 800f770:	2000ef34 	.word	0x2000ef34
 800f774:	2000ef2c 	.word	0x2000ef2c

0800f778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f778:	b480      	push	{r7}
 800f77a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f77c:	4b04      	ldr	r3, [pc, #16]	@ (800f790 <vTaskSuspendAll+0x18>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	3301      	adds	r3, #1
 800f782:	4a03      	ldr	r2, [pc, #12]	@ (800f790 <vTaskSuspendAll+0x18>)
 800f784:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f786:	bf00      	nop
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	2000ef50 	.word	0x2000ef50

0800f794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f79a:	2300      	movs	r3, #0
 800f79c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7a2:	4b43      	ldr	r3, [pc, #268]	@ (800f8b0 <xTaskResumeAll+0x11c>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d10d      	bne.n	800f7c6 <xTaskResumeAll+0x32>
	__asm volatile
 800f7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ae:	b672      	cpsid	i
 800f7b0:	f383 8811 	msr	BASEPRI, r3
 800f7b4:	f3bf 8f6f 	isb	sy
 800f7b8:	f3bf 8f4f 	dsb	sy
 800f7bc:	b662      	cpsie	i
 800f7be:	603b      	str	r3, [r7, #0]
}
 800f7c0:	bf00      	nop
 800f7c2:	bf00      	nop
 800f7c4:	e7fd      	b.n	800f7c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7c6:	f001 fa81 	bl	8010ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f7ca:	4b39      	ldr	r3, [pc, #228]	@ (800f8b0 <xTaskResumeAll+0x11c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	4a37      	ldr	r2, [pc, #220]	@ (800f8b0 <xTaskResumeAll+0x11c>)
 800f7d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7d4:	4b36      	ldr	r3, [pc, #216]	@ (800f8b0 <xTaskResumeAll+0x11c>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d162      	bne.n	800f8a2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f7dc:	4b35      	ldr	r3, [pc, #212]	@ (800f8b4 <xTaskResumeAll+0x120>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d05e      	beq.n	800f8a2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7e4:	e02f      	b.n	800f846 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7e6:	4b34      	ldr	r3, [pc, #208]	@ (800f8b8 <xTaskResumeAll+0x124>)
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	68db      	ldr	r3, [r3, #12]
 800f7ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	3318      	adds	r3, #24
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fe fb3c 	bl	800de70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fe fb37 	bl	800de70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f806:	4b2d      	ldr	r3, [pc, #180]	@ (800f8bc <xTaskResumeAll+0x128>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d903      	bls.n	800f816 <xTaskResumeAll+0x82>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f812:	4a2a      	ldr	r2, [pc, #168]	@ (800f8bc <xTaskResumeAll+0x128>)
 800f814:	6013      	str	r3, [r2, #0]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f81a:	4613      	mov	r3, r2
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	4413      	add	r3, r2
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	4a27      	ldr	r2, [pc, #156]	@ (800f8c0 <xTaskResumeAll+0x12c>)
 800f824:	441a      	add	r2, r3
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	3304      	adds	r3, #4
 800f82a:	4619      	mov	r1, r3
 800f82c:	4610      	mov	r0, r2
 800f82e:	f7fe fac2 	bl	800ddb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f836:	4b23      	ldr	r3, [pc, #140]	@ (800f8c4 <xTaskResumeAll+0x130>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d302      	bcc.n	800f846 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f840:	4b21      	ldr	r3, [pc, #132]	@ (800f8c8 <xTaskResumeAll+0x134>)
 800f842:	2201      	movs	r2, #1
 800f844:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f846:	4b1c      	ldr	r3, [pc, #112]	@ (800f8b8 <xTaskResumeAll+0x124>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d1cb      	bne.n	800f7e6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d001      	beq.n	800f858 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f854:	f000 fbac 	bl	800ffb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f858:	4b1c      	ldr	r3, [pc, #112]	@ (800f8cc <xTaskResumeAll+0x138>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d010      	beq.n	800f886 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f864:	f000 f858 	bl	800f918 <xTaskIncrementTick>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d002      	beq.n	800f874 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f86e:	4b16      	ldr	r3, [pc, #88]	@ (800f8c8 <xTaskResumeAll+0x134>)
 800f870:	2201      	movs	r2, #1
 800f872:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	3b01      	subs	r3, #1
 800f878:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d1f1      	bne.n	800f864 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f880:	4b12      	ldr	r3, [pc, #72]	@ (800f8cc <xTaskResumeAll+0x138>)
 800f882:	2200      	movs	r2, #0
 800f884:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f886:	4b10      	ldr	r3, [pc, #64]	@ (800f8c8 <xTaskResumeAll+0x134>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d009      	beq.n	800f8a2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f88e:	2301      	movs	r3, #1
 800f890:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f892:	4b0f      	ldr	r3, [pc, #60]	@ (800f8d0 <xTaskResumeAll+0x13c>)
 800f894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f898:	601a      	str	r2, [r3, #0]
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8a2:	f001 fa49 	bl	8010d38 <vPortExitCritical>

	return xAlreadyYielded;
 800f8a6:	68bb      	ldr	r3, [r7, #8]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	2000ef50 	.word	0x2000ef50
 800f8b4:	2000ef28 	.word	0x2000ef28
 800f8b8:	2000eee8 	.word	0x2000eee8
 800f8bc:	2000ef30 	.word	0x2000ef30
 800f8c0:	2000ea58 	.word	0x2000ea58
 800f8c4:	2000ea54 	.word	0x2000ea54
 800f8c8:	2000ef3c 	.word	0x2000ef3c
 800f8cc:	2000ef38 	.word	0x2000ef38
 800f8d0:	e000ed04 	.word	0xe000ed04

0800f8d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f8da:	4b05      	ldr	r3, [pc, #20]	@ (800f8f0 <xTaskGetTickCount+0x1c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f8e0:	687b      	ldr	r3, [r7, #4]
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	370c      	adds	r7, #12
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	2000ef2c 	.word	0x2000ef2c

0800f8f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8fa:	f001 facf 	bl	8010e9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f8fe:	2300      	movs	r3, #0
 800f900:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f902:	4b04      	ldr	r3, [pc, #16]	@ (800f914 <xTaskGetTickCountFromISR+0x20>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f908:	683b      	ldr	r3, [r7, #0]
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3708      	adds	r7, #8
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	2000ef2c 	.word	0x2000ef2c

0800f918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b086      	sub	sp, #24
 800f91c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f91e:	2300      	movs	r3, #0
 800f920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f922:	4b50      	ldr	r3, [pc, #320]	@ (800fa64 <xTaskIncrementTick+0x14c>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	f040 808c 	bne.w	800fa44 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f92c:	4b4e      	ldr	r3, [pc, #312]	@ (800fa68 <xTaskIncrementTick+0x150>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	3301      	adds	r3, #1
 800f932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f934:	4a4c      	ldr	r2, [pc, #304]	@ (800fa68 <xTaskIncrementTick+0x150>)
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d123      	bne.n	800f988 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f940:	4b4a      	ldr	r3, [pc, #296]	@ (800fa6c <xTaskIncrementTick+0x154>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00d      	beq.n	800f966 <xTaskIncrementTick+0x4e>
	__asm volatile
 800f94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f94e:	b672      	cpsid	i
 800f950:	f383 8811 	msr	BASEPRI, r3
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	f3bf 8f4f 	dsb	sy
 800f95c:	b662      	cpsie	i
 800f95e:	603b      	str	r3, [r7, #0]
}
 800f960:	bf00      	nop
 800f962:	bf00      	nop
 800f964:	e7fd      	b.n	800f962 <xTaskIncrementTick+0x4a>
 800f966:	4b41      	ldr	r3, [pc, #260]	@ (800fa6c <xTaskIncrementTick+0x154>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	60fb      	str	r3, [r7, #12]
 800f96c:	4b40      	ldr	r3, [pc, #256]	@ (800fa70 <xTaskIncrementTick+0x158>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a3e      	ldr	r2, [pc, #248]	@ (800fa6c <xTaskIncrementTick+0x154>)
 800f972:	6013      	str	r3, [r2, #0]
 800f974:	4a3e      	ldr	r2, [pc, #248]	@ (800fa70 <xTaskIncrementTick+0x158>)
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	6013      	str	r3, [r2, #0]
 800f97a:	4b3e      	ldr	r3, [pc, #248]	@ (800fa74 <xTaskIncrementTick+0x15c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3301      	adds	r3, #1
 800f980:	4a3c      	ldr	r2, [pc, #240]	@ (800fa74 <xTaskIncrementTick+0x15c>)
 800f982:	6013      	str	r3, [r2, #0]
 800f984:	f000 fb14 	bl	800ffb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f988:	4b3b      	ldr	r3, [pc, #236]	@ (800fa78 <xTaskIncrementTick+0x160>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	693a      	ldr	r2, [r7, #16]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d349      	bcc.n	800fa26 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f992:	4b36      	ldr	r3, [pc, #216]	@ (800fa6c <xTaskIncrementTick+0x154>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d104      	bne.n	800f9a6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f99c:	4b36      	ldr	r3, [pc, #216]	@ (800fa78 <xTaskIncrementTick+0x160>)
 800f99e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9a2:	601a      	str	r2, [r3, #0]
					break;
 800f9a4:	e03f      	b.n	800fa26 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9a6:	4b31      	ldr	r3, [pc, #196]	@ (800fa6c <xTaskIncrementTick+0x154>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9b6:	693a      	ldr	r2, [r7, #16]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d203      	bcs.n	800f9c6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9be:	4a2e      	ldr	r2, [pc, #184]	@ (800fa78 <xTaskIncrementTick+0x160>)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9c4:	e02f      	b.n	800fa26 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	3304      	adds	r3, #4
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fe fa50 	bl	800de70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d004      	beq.n	800f9e2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	3318      	adds	r3, #24
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fe fa47 	bl	800de70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9e6:	4b25      	ldr	r3, [pc, #148]	@ (800fa7c <xTaskIncrementTick+0x164>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d903      	bls.n	800f9f6 <xTaskIncrementTick+0xde>
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9f2:	4a22      	ldr	r2, [pc, #136]	@ (800fa7c <xTaskIncrementTick+0x164>)
 800f9f4:	6013      	str	r3, [r2, #0]
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	4413      	add	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4a1f      	ldr	r2, [pc, #124]	@ (800fa80 <xTaskIncrementTick+0x168>)
 800fa04:	441a      	add	r2, r3
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f7fe f9d2 	bl	800ddb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa16:	4b1b      	ldr	r3, [pc, #108]	@ (800fa84 <xTaskIncrementTick+0x16c>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d3b8      	bcc.n	800f992 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800fa20:	2301      	movs	r3, #1
 800fa22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa24:	e7b5      	b.n	800f992 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa26:	4b17      	ldr	r3, [pc, #92]	@ (800fa84 <xTaskIncrementTick+0x16c>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa2c:	4914      	ldr	r1, [pc, #80]	@ (800fa80 <xTaskIncrementTick+0x168>)
 800fa2e:	4613      	mov	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4413      	add	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	440b      	add	r3, r1
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d907      	bls.n	800fa4e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	617b      	str	r3, [r7, #20]
 800fa42:	e004      	b.n	800fa4e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fa44:	4b10      	ldr	r3, [pc, #64]	@ (800fa88 <xTaskIncrementTick+0x170>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	4a0f      	ldr	r2, [pc, #60]	@ (800fa88 <xTaskIncrementTick+0x170>)
 800fa4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fa4e:	4b0f      	ldr	r3, [pc, #60]	@ (800fa8c <xTaskIncrementTick+0x174>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800fa56:	2301      	movs	r3, #1
 800fa58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fa5a:	697b      	ldr	r3, [r7, #20]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3718      	adds	r7, #24
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	2000ef50 	.word	0x2000ef50
 800fa68:	2000ef2c 	.word	0x2000ef2c
 800fa6c:	2000eee0 	.word	0x2000eee0
 800fa70:	2000eee4 	.word	0x2000eee4
 800fa74:	2000ef40 	.word	0x2000ef40
 800fa78:	2000ef48 	.word	0x2000ef48
 800fa7c:	2000ef30 	.word	0x2000ef30
 800fa80:	2000ea58 	.word	0x2000ea58
 800fa84:	2000ea54 	.word	0x2000ea54
 800fa88:	2000ef38 	.word	0x2000ef38
 800fa8c:	2000ef3c 	.word	0x2000ef3c

0800fa90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b086      	sub	sp, #24
 800fa94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa96:	4b3e      	ldr	r3, [pc, #248]	@ (800fb90 <vTaskSwitchContext+0x100>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa9e:	4b3d      	ldr	r3, [pc, #244]	@ (800fb94 <vTaskSwitchContext+0x104>)
 800faa0:	2201      	movs	r2, #1
 800faa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800faa4:	e070      	b.n	800fb88 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800faa6:	4b3b      	ldr	r3, [pc, #236]	@ (800fb94 <vTaskSwitchContext+0x104>)
 800faa8:	2200      	movs	r2, #0
 800faaa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800faac:	4b3a      	ldr	r3, [pc, #232]	@ (800fb98 <vTaskSwitchContext+0x108>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fab2:	613b      	str	r3, [r7, #16]
 800fab4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d111      	bne.n	800fae8 <vTaskSwitchContext+0x58>
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	3304      	adds	r3, #4
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	68fa      	ldr	r2, [r7, #12]
 800facc:	429a      	cmp	r2, r3
 800face:	d10b      	bne.n	800fae8 <vTaskSwitchContext+0x58>
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	3308      	adds	r3, #8
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	68fa      	ldr	r2, [r7, #12]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d105      	bne.n	800fae8 <vTaskSwitchContext+0x58>
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	330c      	adds	r3, #12
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d008      	beq.n	800fafa <vTaskSwitchContext+0x6a>
 800fae8:	4b2b      	ldr	r3, [pc, #172]	@ (800fb98 <vTaskSwitchContext+0x108>)
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	4b2a      	ldr	r3, [pc, #168]	@ (800fb98 <vTaskSwitchContext+0x108>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3334      	adds	r3, #52	@ 0x34
 800faf2:	4619      	mov	r1, r3
 800faf4:	4610      	mov	r0, r2
 800faf6:	f7f0 fef9 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fafa:	4b28      	ldr	r3, [pc, #160]	@ (800fb9c <vTaskSwitchContext+0x10c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	617b      	str	r3, [r7, #20]
 800fb00:	e013      	b.n	800fb2a <vTaskSwitchContext+0x9a>
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d10d      	bne.n	800fb24 <vTaskSwitchContext+0x94>
	__asm volatile
 800fb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb0c:	b672      	cpsid	i
 800fb0e:	f383 8811 	msr	BASEPRI, r3
 800fb12:	f3bf 8f6f 	isb	sy
 800fb16:	f3bf 8f4f 	dsb	sy
 800fb1a:	b662      	cpsie	i
 800fb1c:	607b      	str	r3, [r7, #4]
}
 800fb1e:	bf00      	nop
 800fb20:	bf00      	nop
 800fb22:	e7fd      	b.n	800fb20 <vTaskSwitchContext+0x90>
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	3b01      	subs	r3, #1
 800fb28:	617b      	str	r3, [r7, #20]
 800fb2a:	491d      	ldr	r1, [pc, #116]	@ (800fba0 <vTaskSwitchContext+0x110>)
 800fb2c:	697a      	ldr	r2, [r7, #20]
 800fb2e:	4613      	mov	r3, r2
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	4413      	add	r3, r2
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	440b      	add	r3, r1
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d0e1      	beq.n	800fb02 <vTaskSwitchContext+0x72>
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	4613      	mov	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4a15      	ldr	r2, [pc, #84]	@ (800fba0 <vTaskSwitchContext+0x110>)
 800fb4a:	4413      	add	r3, r2
 800fb4c:	60bb      	str	r3, [r7, #8]
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	685a      	ldr	r2, [r3, #4]
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	605a      	str	r2, [r3, #4]
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	685a      	ldr	r2, [r3, #4]
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	3308      	adds	r3, #8
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d104      	bne.n	800fb6e <vTaskSwitchContext+0xde>
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	685a      	ldr	r2, [r3, #4]
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	605a      	str	r2, [r3, #4]
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	68db      	ldr	r3, [r3, #12]
 800fb74:	4a08      	ldr	r2, [pc, #32]	@ (800fb98 <vTaskSwitchContext+0x108>)
 800fb76:	6013      	str	r3, [r2, #0]
 800fb78:	4a08      	ldr	r2, [pc, #32]	@ (800fb9c <vTaskSwitchContext+0x10c>)
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb7e:	4b06      	ldr	r3, [pc, #24]	@ (800fb98 <vTaskSwitchContext+0x108>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	3354      	adds	r3, #84	@ 0x54
 800fb84:	4a07      	ldr	r2, [pc, #28]	@ (800fba4 <vTaskSwitchContext+0x114>)
 800fb86:	6013      	str	r3, [r2, #0]
}
 800fb88:	bf00      	nop
 800fb8a:	3718      	adds	r7, #24
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	2000ef50 	.word	0x2000ef50
 800fb94:	2000ef3c 	.word	0x2000ef3c
 800fb98:	2000ea54 	.word	0x2000ea54
 800fb9c:	2000ef30 	.word	0x2000ef30
 800fba0:	2000ea58 	.word	0x2000ea58
 800fba4:	2000003c 	.word	0x2000003c

0800fba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d10d      	bne.n	800fbd4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800fbb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbbc:	b672      	cpsid	i
 800fbbe:	f383 8811 	msr	BASEPRI, r3
 800fbc2:	f3bf 8f6f 	isb	sy
 800fbc6:	f3bf 8f4f 	dsb	sy
 800fbca:	b662      	cpsie	i
 800fbcc:	60fb      	str	r3, [r7, #12]
}
 800fbce:	bf00      	nop
 800fbd0:	bf00      	nop
 800fbd2:	e7fd      	b.n	800fbd0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbd4:	4b07      	ldr	r3, [pc, #28]	@ (800fbf4 <vTaskPlaceOnEventList+0x4c>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3318      	adds	r3, #24
 800fbda:	4619      	mov	r1, r3
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7fe f90e 	bl	800ddfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fbe2:	2101      	movs	r1, #1
 800fbe4:	6838      	ldr	r0, [r7, #0]
 800fbe6:	f000 fba9 	bl	801033c <prvAddCurrentTaskToDelayedList>
}
 800fbea:	bf00      	nop
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	2000ea54 	.word	0x2000ea54

0800fbf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d10d      	bne.n	800fc26 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800fc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc0e:	b672      	cpsid	i
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	b662      	cpsie	i
 800fc1e:	617b      	str	r3, [r7, #20]
}
 800fc20:	bf00      	nop
 800fc22:	bf00      	nop
 800fc24:	e7fd      	b.n	800fc22 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc26:	4b0a      	ldr	r3, [pc, #40]	@ (800fc50 <vTaskPlaceOnEventListRestricted+0x58>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	3318      	adds	r3, #24
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	68f8      	ldr	r0, [r7, #12]
 800fc30:	f7fe f8c1 	bl	800ddb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800fc3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fc40:	6879      	ldr	r1, [r7, #4]
 800fc42:	68b8      	ldr	r0, [r7, #8]
 800fc44:	f000 fb7a 	bl	801033c <prvAddCurrentTaskToDelayedList>
	}
 800fc48:	bf00      	nop
 800fc4a:	3718      	adds	r7, #24
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	2000ea54 	.word	0x2000ea54

0800fc54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b086      	sub	sp, #24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d10d      	bne.n	800fc86 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800fc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc6e:	b672      	cpsid	i
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	b662      	cpsie	i
 800fc7e:	60fb      	str	r3, [r7, #12]
}
 800fc80:	bf00      	nop
 800fc82:	bf00      	nop
 800fc84:	e7fd      	b.n	800fc82 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	3318      	adds	r3, #24
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fe f8f0 	bl	800de70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc90:	4b1d      	ldr	r3, [pc, #116]	@ (800fd08 <xTaskRemoveFromEventList+0xb4>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d11d      	bne.n	800fcd4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	3304      	adds	r3, #4
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fe f8e7 	bl	800de70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fca6:	4b19      	ldr	r3, [pc, #100]	@ (800fd0c <xTaskRemoveFromEventList+0xb8>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d903      	bls.n	800fcb6 <xTaskRemoveFromEventList+0x62>
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcb2:	4a16      	ldr	r2, [pc, #88]	@ (800fd0c <xTaskRemoveFromEventList+0xb8>)
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcba:	4613      	mov	r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	4413      	add	r3, r2
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	4a13      	ldr	r2, [pc, #76]	@ (800fd10 <xTaskRemoveFromEventList+0xbc>)
 800fcc4:	441a      	add	r2, r3
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	3304      	adds	r3, #4
 800fcca:	4619      	mov	r1, r3
 800fccc:	4610      	mov	r0, r2
 800fcce:	f7fe f872 	bl	800ddb6 <vListInsertEnd>
 800fcd2:	e005      	b.n	800fce0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	3318      	adds	r3, #24
 800fcd8:	4619      	mov	r1, r3
 800fcda:	480e      	ldr	r0, [pc, #56]	@ (800fd14 <xTaskRemoveFromEventList+0xc0>)
 800fcdc:	f7fe f86b 	bl	800ddb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fce4:	4b0c      	ldr	r3, [pc, #48]	@ (800fd18 <xTaskRemoveFromEventList+0xc4>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d905      	bls.n	800fcfa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fcf2:	4b0a      	ldr	r3, [pc, #40]	@ (800fd1c <xTaskRemoveFromEventList+0xc8>)
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	601a      	str	r2, [r3, #0]
 800fcf8:	e001      	b.n	800fcfe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fcfe:	697b      	ldr	r3, [r7, #20]
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3718      	adds	r7, #24
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	2000ef50 	.word	0x2000ef50
 800fd0c:	2000ef30 	.word	0x2000ef30
 800fd10:	2000ea58 	.word	0x2000ea58
 800fd14:	2000eee8 	.word	0x2000eee8
 800fd18:	2000ea54 	.word	0x2000ea54
 800fd1c:	2000ef3c 	.word	0x2000ef3c

0800fd20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd28:	4b06      	ldr	r3, [pc, #24]	@ (800fd44 <vTaskInternalSetTimeOutState+0x24>)
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd30:	4b05      	ldr	r3, [pc, #20]	@ (800fd48 <vTaskInternalSetTimeOutState+0x28>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	605a      	str	r2, [r3, #4]
}
 800fd38:	bf00      	nop
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	2000ef40 	.word	0x2000ef40
 800fd48:	2000ef2c 	.word	0x2000ef2c

0800fd4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b088      	sub	sp, #32
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10d      	bne.n	800fd78 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800fd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd60:	b672      	cpsid	i
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	b662      	cpsie	i
 800fd70:	613b      	str	r3, [r7, #16]
}
 800fd72:	bf00      	nop
 800fd74:	bf00      	nop
 800fd76:	e7fd      	b.n	800fd74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d10d      	bne.n	800fd9a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd82:	b672      	cpsid	i
 800fd84:	f383 8811 	msr	BASEPRI, r3
 800fd88:	f3bf 8f6f 	isb	sy
 800fd8c:	f3bf 8f4f 	dsb	sy
 800fd90:	b662      	cpsie	i
 800fd92:	60fb      	str	r3, [r7, #12]
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop
 800fd98:	e7fd      	b.n	800fd96 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800fd9a:	f000 ff97 	bl	8010ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fd9e:	4b1d      	ldr	r3, [pc, #116]	@ (800fe14 <xTaskCheckForTimeOut+0xc8>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	685b      	ldr	r3, [r3, #4]
 800fda8:	69ba      	ldr	r2, [r7, #24]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdb6:	d102      	bne.n	800fdbe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	61fb      	str	r3, [r7, #28]
 800fdbc:	e023      	b.n	800fe06 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	4b15      	ldr	r3, [pc, #84]	@ (800fe18 <xTaskCheckForTimeOut+0xcc>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d007      	beq.n	800fdda <xTaskCheckForTimeOut+0x8e>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	69ba      	ldr	r2, [r7, #24]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d302      	bcc.n	800fdda <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	61fb      	str	r3, [r7, #28]
 800fdd8:	e015      	b.n	800fe06 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	697a      	ldr	r2, [r7, #20]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d20b      	bcs.n	800fdfc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	1ad2      	subs	r2, r2, r3
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f7ff ff95 	bl	800fd20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	61fb      	str	r3, [r7, #28]
 800fdfa:	e004      	b.n	800fe06 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fe02:	2301      	movs	r3, #1
 800fe04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fe06:	f000 ff97 	bl	8010d38 <vPortExitCritical>

	return xReturn;
 800fe0a:	69fb      	ldr	r3, [r7, #28]
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3720      	adds	r7, #32
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	2000ef2c 	.word	0x2000ef2c
 800fe18:	2000ef40 	.word	0x2000ef40

0800fe1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe20:	4b03      	ldr	r3, [pc, #12]	@ (800fe30 <vTaskMissedYield+0x14>)
 800fe22:	2201      	movs	r2, #1
 800fe24:	601a      	str	r2, [r3, #0]
}
 800fe26:	bf00      	nop
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	2000ef3c 	.word	0x2000ef3c

0800fe34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fe3c:	f000 f852 	bl	800fee4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fe40:	4b06      	ldr	r3, [pc, #24]	@ (800fe5c <prvIdleTask+0x28>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d9f9      	bls.n	800fe3c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fe48:	4b05      	ldr	r3, [pc, #20]	@ (800fe60 <prvIdleTask+0x2c>)
 800fe4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe4e:	601a      	str	r2, [r3, #0]
 800fe50:	f3bf 8f4f 	dsb	sy
 800fe54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fe58:	e7f0      	b.n	800fe3c <prvIdleTask+0x8>
 800fe5a:	bf00      	nop
 800fe5c:	2000ea58 	.word	0x2000ea58
 800fe60:	e000ed04 	.word	0xe000ed04

0800fe64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	607b      	str	r3, [r7, #4]
 800fe6e:	e00c      	b.n	800fe8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	4613      	mov	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4413      	add	r3, r2
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	4a12      	ldr	r2, [pc, #72]	@ (800fec4 <prvInitialiseTaskLists+0x60>)
 800fe7c:	4413      	add	r3, r2
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fd ff6c 	bl	800dd5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	3301      	adds	r3, #1
 800fe88:	607b      	str	r3, [r7, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b37      	cmp	r3, #55	@ 0x37
 800fe8e:	d9ef      	bls.n	800fe70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fe90:	480d      	ldr	r0, [pc, #52]	@ (800fec8 <prvInitialiseTaskLists+0x64>)
 800fe92:	f7fd ff63 	bl	800dd5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fe96:	480d      	ldr	r0, [pc, #52]	@ (800fecc <prvInitialiseTaskLists+0x68>)
 800fe98:	f7fd ff60 	bl	800dd5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fe9c:	480c      	ldr	r0, [pc, #48]	@ (800fed0 <prvInitialiseTaskLists+0x6c>)
 800fe9e:	f7fd ff5d 	bl	800dd5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fea2:	480c      	ldr	r0, [pc, #48]	@ (800fed4 <prvInitialiseTaskLists+0x70>)
 800fea4:	f7fd ff5a 	bl	800dd5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fea8:	480b      	ldr	r0, [pc, #44]	@ (800fed8 <prvInitialiseTaskLists+0x74>)
 800feaa:	f7fd ff57 	bl	800dd5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800feae:	4b0b      	ldr	r3, [pc, #44]	@ (800fedc <prvInitialiseTaskLists+0x78>)
 800feb0:	4a05      	ldr	r2, [pc, #20]	@ (800fec8 <prvInitialiseTaskLists+0x64>)
 800feb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800feb4:	4b0a      	ldr	r3, [pc, #40]	@ (800fee0 <prvInitialiseTaskLists+0x7c>)
 800feb6:	4a05      	ldr	r2, [pc, #20]	@ (800fecc <prvInitialiseTaskLists+0x68>)
 800feb8:	601a      	str	r2, [r3, #0]
}
 800feba:	bf00      	nop
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	2000ea58 	.word	0x2000ea58
 800fec8:	2000eeb8 	.word	0x2000eeb8
 800fecc:	2000eecc 	.word	0x2000eecc
 800fed0:	2000eee8 	.word	0x2000eee8
 800fed4:	2000eefc 	.word	0x2000eefc
 800fed8:	2000ef14 	.word	0x2000ef14
 800fedc:	2000eee0 	.word	0x2000eee0
 800fee0:	2000eee4 	.word	0x2000eee4

0800fee4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800feea:	e019      	b.n	800ff20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800feec:	f000 feee 	bl	8010ccc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fef0:	4b10      	ldr	r3, [pc, #64]	@ (800ff34 <prvCheckTasksWaitingTermination+0x50>)
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	3304      	adds	r3, #4
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7fd ffb7 	bl	800de70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ff02:	4b0d      	ldr	r3, [pc, #52]	@ (800ff38 <prvCheckTasksWaitingTermination+0x54>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3b01      	subs	r3, #1
 800ff08:	4a0b      	ldr	r2, [pc, #44]	@ (800ff38 <prvCheckTasksWaitingTermination+0x54>)
 800ff0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ff0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ff3c <prvCheckTasksWaitingTermination+0x58>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	4a0a      	ldr	r2, [pc, #40]	@ (800ff3c <prvCheckTasksWaitingTermination+0x58>)
 800ff14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ff16:	f000 ff0f 	bl	8010d38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 f810 	bl	800ff40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff20:	4b06      	ldr	r3, [pc, #24]	@ (800ff3c <prvCheckTasksWaitingTermination+0x58>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d1e1      	bne.n	800feec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff28:	bf00      	nop
 800ff2a:	bf00      	nop
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	2000eefc 	.word	0x2000eefc
 800ff38:	2000ef28 	.word	0x2000ef28
 800ff3c:	2000ef10 	.word	0x2000ef10

0800ff40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b084      	sub	sp, #16
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	3354      	adds	r3, #84	@ 0x54
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f010 fb1b 	bl	8020588 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d108      	bne.n	800ff6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff60:	4618      	mov	r0, r3
 800ff62:	f001 f8b3 	bl	80110cc <vPortFree>
				vPortFree( pxTCB );
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f001 f8b0 	bl	80110cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ff6c:	e01b      	b.n	800ffa6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d103      	bne.n	800ff80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f001 f8a7 	bl	80110cc <vPortFree>
	}
 800ff7e:	e012      	b.n	800ffa6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ff86:	2b02      	cmp	r3, #2
 800ff88:	d00d      	beq.n	800ffa6 <prvDeleteTCB+0x66>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8e:	b672      	cpsid	i
 800ff90:	f383 8811 	msr	BASEPRI, r3
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	b662      	cpsie	i
 800ff9e:	60fb      	str	r3, [r7, #12]
}
 800ffa0:	bf00      	nop
 800ffa2:	bf00      	nop
 800ffa4:	e7fd      	b.n	800ffa2 <prvDeleteTCB+0x62>
	}
 800ffa6:	bf00      	nop
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
	...

0800ffb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffb6:	4b0c      	ldr	r3, [pc, #48]	@ (800ffe8 <prvResetNextTaskUnblockTime+0x38>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d104      	bne.n	800ffca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ffc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ffec <prvResetNextTaskUnblockTime+0x3c>)
 800ffc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ffc8:	e008      	b.n	800ffdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffca:	4b07      	ldr	r3, [pc, #28]	@ (800ffe8 <prvResetNextTaskUnblockTime+0x38>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	4a04      	ldr	r2, [pc, #16]	@ (800ffec <prvResetNextTaskUnblockTime+0x3c>)
 800ffda:	6013      	str	r3, [r2, #0]
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	2000eee0 	.word	0x2000eee0
 800ffec:	2000ef48 	.word	0x2000ef48

0800fff0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fff6:	4b05      	ldr	r3, [pc, #20]	@ (801000c <xTaskGetCurrentTaskHandle+0x1c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fffc:	687b      	ldr	r3, [r7, #4]
	}
 800fffe:	4618      	mov	r0, r3
 8010000:	370c      	adds	r7, #12
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	2000ea54 	.word	0x2000ea54

08010010 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010016:	4b0b      	ldr	r3, [pc, #44]	@ (8010044 <xTaskGetSchedulerState+0x34>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d102      	bne.n	8010024 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801001e:	2301      	movs	r3, #1
 8010020:	607b      	str	r3, [r7, #4]
 8010022:	e008      	b.n	8010036 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010024:	4b08      	ldr	r3, [pc, #32]	@ (8010048 <xTaskGetSchedulerState+0x38>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d102      	bne.n	8010032 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801002c:	2302      	movs	r3, #2
 801002e:	607b      	str	r3, [r7, #4]
 8010030:	e001      	b.n	8010036 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010032:	2300      	movs	r3, #0
 8010034:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010036:	687b      	ldr	r3, [r7, #4]
	}
 8010038:	4618      	mov	r0, r3
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	2000ef34 	.word	0x2000ef34
 8010048:	2000ef50 	.word	0x2000ef50

0801004c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010058:	2300      	movs	r3, #0
 801005a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d051      	beq.n	8010106 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010066:	4b2a      	ldr	r3, [pc, #168]	@ (8010110 <xTaskPriorityInherit+0xc4>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801006c:	429a      	cmp	r2, r3
 801006e:	d241      	bcs.n	80100f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	699b      	ldr	r3, [r3, #24]
 8010074:	2b00      	cmp	r3, #0
 8010076:	db06      	blt.n	8010086 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010078:	4b25      	ldr	r3, [pc, #148]	@ (8010110 <xTaskPriorityInherit+0xc4>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801007e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	6959      	ldr	r1, [r3, #20]
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801008e:	4613      	mov	r3, r2
 8010090:	009b      	lsls	r3, r3, #2
 8010092:	4413      	add	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	4a1f      	ldr	r2, [pc, #124]	@ (8010114 <xTaskPriorityInherit+0xc8>)
 8010098:	4413      	add	r3, r2
 801009a:	4299      	cmp	r1, r3
 801009c:	d122      	bne.n	80100e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	3304      	adds	r3, #4
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fd fee4 	bl	800de70 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100a8:	4b19      	ldr	r3, [pc, #100]	@ (8010110 <xTaskPriorityInherit+0xc4>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100b6:	4b18      	ldr	r3, [pc, #96]	@ (8010118 <xTaskPriorityInherit+0xcc>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d903      	bls.n	80100c6 <xTaskPriorityInherit+0x7a>
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c2:	4a15      	ldr	r2, [pc, #84]	@ (8010118 <xTaskPriorityInherit+0xcc>)
 80100c4:	6013      	str	r3, [r2, #0]
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100ca:	4613      	mov	r3, r2
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	4413      	add	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	4a10      	ldr	r2, [pc, #64]	@ (8010114 <xTaskPriorityInherit+0xc8>)
 80100d4:	441a      	add	r2, r3
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	3304      	adds	r3, #4
 80100da:	4619      	mov	r1, r3
 80100dc:	4610      	mov	r0, r2
 80100de:	f7fd fe6a 	bl	800ddb6 <vListInsertEnd>
 80100e2:	e004      	b.n	80100ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010110 <xTaskPriorityInherit+0xc4>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80100ee:	2301      	movs	r3, #1
 80100f0:	60fb      	str	r3, [r7, #12]
 80100f2:	e008      	b.n	8010106 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80100f8:	4b05      	ldr	r3, [pc, #20]	@ (8010110 <xTaskPriorityInherit+0xc4>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100fe:	429a      	cmp	r2, r3
 8010100:	d201      	bcs.n	8010106 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010102:	2301      	movs	r3, #1
 8010104:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010106:	68fb      	ldr	r3, [r7, #12]
	}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	2000ea54 	.word	0x2000ea54
 8010114:	2000ea58 	.word	0x2000ea58
 8010118:	2000ef30 	.word	0x2000ef30

0801011c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010128:	2300      	movs	r3, #0
 801012a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d05c      	beq.n	80101ec <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010132:	4b31      	ldr	r3, [pc, #196]	@ (80101f8 <xTaskPriorityDisinherit+0xdc>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	693a      	ldr	r2, [r7, #16]
 8010138:	429a      	cmp	r2, r3
 801013a:	d00d      	beq.n	8010158 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801013c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010140:	b672      	cpsid	i
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	b662      	cpsie	i
 8010150:	60fb      	str	r3, [r7, #12]
}
 8010152:	bf00      	nop
 8010154:	bf00      	nop
 8010156:	e7fd      	b.n	8010154 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10d      	bne.n	801017c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8010160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010164:	b672      	cpsid	i
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	b662      	cpsie	i
 8010174:	60bb      	str	r3, [r7, #8]
}
 8010176:	bf00      	nop
 8010178:	bf00      	nop
 801017a:	e7fd      	b.n	8010178 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010180:	1e5a      	subs	r2, r3, #1
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801018e:	429a      	cmp	r2, r3
 8010190:	d02c      	beq.n	80101ec <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010196:	2b00      	cmp	r3, #0
 8010198:	d128      	bne.n	80101ec <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	3304      	adds	r3, #4
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fd fe66 	bl	800de70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101bc:	4b0f      	ldr	r3, [pc, #60]	@ (80101fc <xTaskPriorityDisinherit+0xe0>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d903      	bls.n	80101cc <xTaskPriorityDisinherit+0xb0>
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101c8:	4a0c      	ldr	r2, [pc, #48]	@ (80101fc <xTaskPriorityDisinherit+0xe0>)
 80101ca:	6013      	str	r3, [r2, #0]
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101d0:	4613      	mov	r3, r2
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	4413      	add	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	4a09      	ldr	r2, [pc, #36]	@ (8010200 <xTaskPriorityDisinherit+0xe4>)
 80101da:	441a      	add	r2, r3
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	3304      	adds	r3, #4
 80101e0:	4619      	mov	r1, r3
 80101e2:	4610      	mov	r0, r2
 80101e4:	f7fd fde7 	bl	800ddb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80101e8:	2301      	movs	r3, #1
 80101ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80101ec:	697b      	ldr	r3, [r7, #20]
	}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3718      	adds	r7, #24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	2000ea54 	.word	0x2000ea54
 80101fc:	2000ef30 	.word	0x2000ef30
 8010200:	2000ea58 	.word	0x2000ea58

08010204 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010204:	b580      	push	{r7, lr}
 8010206:	b088      	sub	sp, #32
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010212:	2301      	movs	r3, #1
 8010214:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d070      	beq.n	80102fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010220:	2b00      	cmp	r3, #0
 8010222:	d10d      	bne.n	8010240 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8010224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010228:	b672      	cpsid	i
 801022a:	f383 8811 	msr	BASEPRI, r3
 801022e:	f3bf 8f6f 	isb	sy
 8010232:	f3bf 8f4f 	dsb	sy
 8010236:	b662      	cpsie	i
 8010238:	60fb      	str	r3, [r7, #12]
}
 801023a:	bf00      	nop
 801023c:	bf00      	nop
 801023e:	e7fd      	b.n	801023c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010244:	683a      	ldr	r2, [r7, #0]
 8010246:	429a      	cmp	r2, r3
 8010248:	d902      	bls.n	8010250 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	61fb      	str	r3, [r7, #28]
 801024e:	e002      	b.n	8010256 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010254:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025a:	69fa      	ldr	r2, [r7, #28]
 801025c:	429a      	cmp	r2, r3
 801025e:	d04e      	beq.n	80102fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010264:	697a      	ldr	r2, [r7, #20]
 8010266:	429a      	cmp	r2, r3
 8010268:	d149      	bne.n	80102fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801026a:	4b27      	ldr	r3, [pc, #156]	@ (8010308 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	69ba      	ldr	r2, [r7, #24]
 8010270:	429a      	cmp	r2, r3
 8010272:	d10d      	bne.n	8010290 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8010274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010278:	b672      	cpsid	i
 801027a:	f383 8811 	msr	BASEPRI, r3
 801027e:	f3bf 8f6f 	isb	sy
 8010282:	f3bf 8f4f 	dsb	sy
 8010286:	b662      	cpsie	i
 8010288:	60bb      	str	r3, [r7, #8]
}
 801028a:	bf00      	nop
 801028c:	bf00      	nop
 801028e:	e7fd      	b.n	801028c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010290:	69bb      	ldr	r3, [r7, #24]
 8010292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010294:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	69fa      	ldr	r2, [r7, #28]
 801029a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801029c:	69bb      	ldr	r3, [r7, #24]
 801029e:	699b      	ldr	r3, [r3, #24]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	db04      	blt.n	80102ae <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	6959      	ldr	r1, [r3, #20]
 80102b2:	693a      	ldr	r2, [r7, #16]
 80102b4:	4613      	mov	r3, r2
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	4413      	add	r3, r2
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	4a13      	ldr	r2, [pc, #76]	@ (801030c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80102be:	4413      	add	r3, r2
 80102c0:	4299      	cmp	r1, r3
 80102c2:	d11c      	bne.n	80102fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	3304      	adds	r3, #4
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fd fdd1 	bl	800de70 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102d2:	4b0f      	ldr	r3, [pc, #60]	@ (8010310 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d903      	bls.n	80102e2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102de:	4a0c      	ldr	r2, [pc, #48]	@ (8010310 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80102e0:	6013      	str	r3, [r2, #0]
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102e6:	4613      	mov	r3, r2
 80102e8:	009b      	lsls	r3, r3, #2
 80102ea:	4413      	add	r3, r2
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	4a07      	ldr	r2, [pc, #28]	@ (801030c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80102f0:	441a      	add	r2, r3
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	3304      	adds	r3, #4
 80102f6:	4619      	mov	r1, r3
 80102f8:	4610      	mov	r0, r2
 80102fa:	f7fd fd5c 	bl	800ddb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80102fe:	bf00      	nop
 8010300:	3720      	adds	r7, #32
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	2000ea54 	.word	0x2000ea54
 801030c:	2000ea58 	.word	0x2000ea58
 8010310:	2000ef30 	.word	0x2000ef30

08010314 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010314:	b480      	push	{r7}
 8010316:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010318:	4b07      	ldr	r3, [pc, #28]	@ (8010338 <pvTaskIncrementMutexHeldCount+0x24>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d004      	beq.n	801032a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010320:	4b05      	ldr	r3, [pc, #20]	@ (8010338 <pvTaskIncrementMutexHeldCount+0x24>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010326:	3201      	adds	r2, #1
 8010328:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801032a:	4b03      	ldr	r3, [pc, #12]	@ (8010338 <pvTaskIncrementMutexHeldCount+0x24>)
 801032c:	681b      	ldr	r3, [r3, #0]
	}
 801032e:	4618      	mov	r0, r3
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr
 8010338:	2000ea54 	.word	0x2000ea54

0801033c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010346:	4b21      	ldr	r3, [pc, #132]	@ (80103cc <prvAddCurrentTaskToDelayedList+0x90>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801034c:	4b20      	ldr	r3, [pc, #128]	@ (80103d0 <prvAddCurrentTaskToDelayedList+0x94>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	3304      	adds	r3, #4
 8010352:	4618      	mov	r0, r3
 8010354:	f7fd fd8c 	bl	800de70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801035e:	d10a      	bne.n	8010376 <prvAddCurrentTaskToDelayedList+0x3a>
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d007      	beq.n	8010376 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010366:	4b1a      	ldr	r3, [pc, #104]	@ (80103d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	3304      	adds	r3, #4
 801036c:	4619      	mov	r1, r3
 801036e:	4819      	ldr	r0, [pc, #100]	@ (80103d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010370:	f7fd fd21 	bl	800ddb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010374:	e026      	b.n	80103c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	4413      	add	r3, r2
 801037c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801037e:	4b14      	ldr	r3, [pc, #80]	@ (80103d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	68ba      	ldr	r2, [r7, #8]
 8010384:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	429a      	cmp	r2, r3
 801038c:	d209      	bcs.n	80103a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801038e:	4b12      	ldr	r3, [pc, #72]	@ (80103d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	4b0f      	ldr	r3, [pc, #60]	@ (80103d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	3304      	adds	r3, #4
 8010398:	4619      	mov	r1, r3
 801039a:	4610      	mov	r0, r2
 801039c:	f7fd fd2f 	bl	800ddfe <vListInsert>
}
 80103a0:	e010      	b.n	80103c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103a2:	4b0e      	ldr	r3, [pc, #56]	@ (80103dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	4b0a      	ldr	r3, [pc, #40]	@ (80103d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3304      	adds	r3, #4
 80103ac:	4619      	mov	r1, r3
 80103ae:	4610      	mov	r0, r2
 80103b0:	f7fd fd25 	bl	800ddfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80103b4:	4b0a      	ldr	r3, [pc, #40]	@ (80103e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	68ba      	ldr	r2, [r7, #8]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d202      	bcs.n	80103c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80103be:	4a08      	ldr	r2, [pc, #32]	@ (80103e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	6013      	str	r3, [r2, #0]
}
 80103c4:	bf00      	nop
 80103c6:	3710      	adds	r7, #16
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	2000ef2c 	.word	0x2000ef2c
 80103d0:	2000ea54 	.word	0x2000ea54
 80103d4:	2000ef14 	.word	0x2000ef14
 80103d8:	2000eee4 	.word	0x2000eee4
 80103dc:	2000eee0 	.word	0x2000eee0
 80103e0:	2000ef48 	.word	0x2000ef48

080103e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b08a      	sub	sp, #40	@ 0x28
 80103e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80103ea:	2300      	movs	r3, #0
 80103ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80103ee:	f000 fb21 	bl	8010a34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80103f2:	4b1e      	ldr	r3, [pc, #120]	@ (801046c <xTimerCreateTimerTask+0x88>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d021      	beq.n	801043e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80103fa:	2300      	movs	r3, #0
 80103fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80103fe:	2300      	movs	r3, #0
 8010400:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010402:	1d3a      	adds	r2, r7, #4
 8010404:	f107 0108 	add.w	r1, r7, #8
 8010408:	f107 030c 	add.w	r3, r7, #12
 801040c:	4618      	mov	r0, r3
 801040e:	f7fd fc8b 	bl	800dd28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010412:	6879      	ldr	r1, [r7, #4]
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	9202      	str	r2, [sp, #8]
 801041a:	9301      	str	r3, [sp, #4]
 801041c:	2302      	movs	r3, #2
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	2300      	movs	r3, #0
 8010422:	460a      	mov	r2, r1
 8010424:	4912      	ldr	r1, [pc, #72]	@ (8010470 <xTimerCreateTimerTask+0x8c>)
 8010426:	4813      	ldr	r0, [pc, #76]	@ (8010474 <xTimerCreateTimerTask+0x90>)
 8010428:	f7fe febe 	bl	800f1a8 <xTaskCreateStatic>
 801042c:	4603      	mov	r3, r0
 801042e:	4a12      	ldr	r2, [pc, #72]	@ (8010478 <xTimerCreateTimerTask+0x94>)
 8010430:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010432:	4b11      	ldr	r3, [pc, #68]	@ (8010478 <xTimerCreateTimerTask+0x94>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d001      	beq.n	801043e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801043a:	2301      	movs	r3, #1
 801043c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d10d      	bne.n	8010460 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8010444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010448:	b672      	cpsid	i
 801044a:	f383 8811 	msr	BASEPRI, r3
 801044e:	f3bf 8f6f 	isb	sy
 8010452:	f3bf 8f4f 	dsb	sy
 8010456:	b662      	cpsie	i
 8010458:	613b      	str	r3, [r7, #16]
}
 801045a:	bf00      	nop
 801045c:	bf00      	nop
 801045e:	e7fd      	b.n	801045c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010460:	697b      	ldr	r3, [r7, #20]
}
 8010462:	4618      	mov	r0, r3
 8010464:	3718      	adds	r7, #24
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	2000ef84 	.word	0x2000ef84
 8010470:	080213a8 	.word	0x080213a8
 8010474:	080105bd 	.word	0x080105bd
 8010478:	2000ef88 	.word	0x2000ef88

0801047c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b08a      	sub	sp, #40	@ 0x28
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	607a      	str	r2, [r7, #4]
 8010488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801048a:	2300      	movs	r3, #0
 801048c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d10d      	bne.n	80104b0 <xTimerGenericCommand+0x34>
	__asm volatile
 8010494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010498:	b672      	cpsid	i
 801049a:	f383 8811 	msr	BASEPRI, r3
 801049e:	f3bf 8f6f 	isb	sy
 80104a2:	f3bf 8f4f 	dsb	sy
 80104a6:	b662      	cpsie	i
 80104a8:	623b      	str	r3, [r7, #32]
}
 80104aa:	bf00      	nop
 80104ac:	bf00      	nop
 80104ae:	e7fd      	b.n	80104ac <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80104b0:	4b19      	ldr	r3, [pc, #100]	@ (8010518 <xTimerGenericCommand+0x9c>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d02a      	beq.n	801050e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	2b05      	cmp	r3, #5
 80104c8:	dc18      	bgt.n	80104fc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80104ca:	f7ff fda1 	bl	8010010 <xTaskGetSchedulerState>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b02      	cmp	r3, #2
 80104d2:	d109      	bne.n	80104e8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80104d4:	4b10      	ldr	r3, [pc, #64]	@ (8010518 <xTimerGenericCommand+0x9c>)
 80104d6:	6818      	ldr	r0, [r3, #0]
 80104d8:	f107 0110 	add.w	r1, r7, #16
 80104dc:	2300      	movs	r3, #0
 80104de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104e0:	f7fd ff7c 	bl	800e3dc <xQueueGenericSend>
 80104e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80104e6:	e012      	b.n	801050e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80104e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010518 <xTimerGenericCommand+0x9c>)
 80104ea:	6818      	ldr	r0, [r3, #0]
 80104ec:	f107 0110 	add.w	r1, r7, #16
 80104f0:	2300      	movs	r3, #0
 80104f2:	2200      	movs	r2, #0
 80104f4:	f7fd ff72 	bl	800e3dc <xQueueGenericSend>
 80104f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80104fa:	e008      	b.n	801050e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80104fc:	4b06      	ldr	r3, [pc, #24]	@ (8010518 <xTimerGenericCommand+0x9c>)
 80104fe:	6818      	ldr	r0, [r3, #0]
 8010500:	f107 0110 	add.w	r1, r7, #16
 8010504:	2300      	movs	r3, #0
 8010506:	683a      	ldr	r2, [r7, #0]
 8010508:	f7fe f872 	bl	800e5f0 <xQueueGenericSendFromISR>
 801050c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010510:	4618      	mov	r0, r3
 8010512:	3728      	adds	r7, #40	@ 0x28
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	2000ef84 	.word	0x2000ef84

0801051c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b088      	sub	sp, #32
 8010520:	af02      	add	r7, sp, #8
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010526:	4b24      	ldr	r3, [pc, #144]	@ (80105b8 <prvProcessExpiredTimer+0x9c>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	68db      	ldr	r3, [r3, #12]
 801052e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	3304      	adds	r3, #4
 8010534:	4618      	mov	r0, r3
 8010536:	f7fd fc9b 	bl	800de70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010540:	f003 0304 	and.w	r3, r3, #4
 8010544:	2b00      	cmp	r3, #0
 8010546:	d025      	beq.n	8010594 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	699a      	ldr	r2, [r3, #24]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	18d1      	adds	r1, r2, r3
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	683a      	ldr	r2, [r7, #0]
 8010554:	6978      	ldr	r0, [r7, #20]
 8010556:	f000 f8d7 	bl	8010708 <prvInsertTimerInActiveList>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d022      	beq.n	80105a6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010560:	2300      	movs	r3, #0
 8010562:	9300      	str	r3, [sp, #0]
 8010564:	2300      	movs	r3, #0
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	2100      	movs	r1, #0
 801056a:	6978      	ldr	r0, [r7, #20]
 801056c:	f7ff ff86 	bl	801047c <xTimerGenericCommand>
 8010570:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d116      	bne.n	80105a6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8010578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801057c:	b672      	cpsid	i
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	b662      	cpsie	i
 801058c:	60fb      	str	r3, [r7, #12]
}
 801058e:	bf00      	nop
 8010590:	bf00      	nop
 8010592:	e7fd      	b.n	8010590 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801059a:	f023 0301 	bic.w	r3, r3, #1
 801059e:	b2da      	uxtb	r2, r3
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	6978      	ldr	r0, [r7, #20]
 80105ac:	4798      	blx	r3
}
 80105ae:	bf00      	nop
 80105b0:	3718      	adds	r7, #24
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	2000ef7c 	.word	0x2000ef7c

080105bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80105c4:	f107 0308 	add.w	r3, r7, #8
 80105c8:	4618      	mov	r0, r3
 80105ca:	f000 f859 	bl	8010680 <prvGetNextExpireTime>
 80105ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	4619      	mov	r1, r3
 80105d4:	68f8      	ldr	r0, [r7, #12]
 80105d6:	f000 f805 	bl	80105e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80105da:	f000 f8d7 	bl	801078c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80105de:	bf00      	nop
 80105e0:	e7f0      	b.n	80105c4 <prvTimerTask+0x8>
	...

080105e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80105ee:	f7ff f8c3 	bl	800f778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80105f2:	f107 0308 	add.w	r3, r7, #8
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 f866 	bl	80106c8 <prvSampleTimeNow>
 80105fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d130      	bne.n	8010666 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d10a      	bne.n	8010620 <prvProcessTimerOrBlockTask+0x3c>
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	429a      	cmp	r2, r3
 8010610:	d806      	bhi.n	8010620 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010612:	f7ff f8bf 	bl	800f794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010616:	68f9      	ldr	r1, [r7, #12]
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7ff ff7f 	bl	801051c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801061e:	e024      	b.n	801066a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d008      	beq.n	8010638 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010626:	4b13      	ldr	r3, [pc, #76]	@ (8010674 <prvProcessTimerOrBlockTask+0x90>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d101      	bne.n	8010634 <prvProcessTimerOrBlockTask+0x50>
 8010630:	2301      	movs	r3, #1
 8010632:	e000      	b.n	8010636 <prvProcessTimerOrBlockTask+0x52>
 8010634:	2300      	movs	r3, #0
 8010636:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010638:	4b0f      	ldr	r3, [pc, #60]	@ (8010678 <prvProcessTimerOrBlockTask+0x94>)
 801063a:	6818      	ldr	r0, [r3, #0]
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	683a      	ldr	r2, [r7, #0]
 8010644:	4619      	mov	r1, r3
 8010646:	f7fe fd7b 	bl	800f140 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801064a:	f7ff f8a3 	bl	800f794 <xTaskResumeAll>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10a      	bne.n	801066a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010654:	4b09      	ldr	r3, [pc, #36]	@ (801067c <prvProcessTimerOrBlockTask+0x98>)
 8010656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801065a:	601a      	str	r2, [r3, #0]
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	f3bf 8f6f 	isb	sy
}
 8010664:	e001      	b.n	801066a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010666:	f7ff f895 	bl	800f794 <xTaskResumeAll>
}
 801066a:	bf00      	nop
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}
 8010672:	bf00      	nop
 8010674:	2000ef80 	.word	0x2000ef80
 8010678:	2000ef84 	.word	0x2000ef84
 801067c:	e000ed04 	.word	0xe000ed04

08010680 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010680:	b480      	push	{r7}
 8010682:	b085      	sub	sp, #20
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010688:	4b0e      	ldr	r3, [pc, #56]	@ (80106c4 <prvGetNextExpireTime+0x44>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d101      	bne.n	8010696 <prvGetNextExpireTime+0x16>
 8010692:	2201      	movs	r2, #1
 8010694:	e000      	b.n	8010698 <prvGetNextExpireTime+0x18>
 8010696:	2200      	movs	r2, #0
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d105      	bne.n	80106b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106a4:	4b07      	ldr	r3, [pc, #28]	@ (80106c4 <prvGetNextExpireTime+0x44>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	60fb      	str	r3, [r7, #12]
 80106ae:	e001      	b.n	80106b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80106b0:	2300      	movs	r3, #0
 80106b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80106b4:	68fb      	ldr	r3, [r7, #12]
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3714      	adds	r7, #20
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop
 80106c4:	2000ef7c 	.word	0x2000ef7c

080106c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80106d0:	f7ff f900 	bl	800f8d4 <xTaskGetTickCount>
 80106d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80106d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010704 <prvSampleTimeNow+0x3c>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d205      	bcs.n	80106ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80106e0:	f000 f940 	bl	8010964 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2201      	movs	r2, #1
 80106e8:	601a      	str	r2, [r3, #0]
 80106ea:	e002      	b.n	80106f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2200      	movs	r2, #0
 80106f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80106f2:	4a04      	ldr	r2, [pc, #16]	@ (8010704 <prvSampleTimeNow+0x3c>)
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80106f8:	68fb      	ldr	r3, [r7, #12]
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}
 8010702:	bf00      	nop
 8010704:	2000ef8c 	.word	0x2000ef8c

08010708 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b086      	sub	sp, #24
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
 8010714:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010716:	2300      	movs	r3, #0
 8010718:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	68ba      	ldr	r2, [r7, #8]
 801071e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010726:	68ba      	ldr	r2, [r7, #8]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	429a      	cmp	r2, r3
 801072c:	d812      	bhi.n	8010754 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	1ad2      	subs	r2, r2, r3
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	699b      	ldr	r3, [r3, #24]
 8010738:	429a      	cmp	r2, r3
 801073a:	d302      	bcc.n	8010742 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801073c:	2301      	movs	r3, #1
 801073e:	617b      	str	r3, [r7, #20]
 8010740:	e01b      	b.n	801077a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010742:	4b10      	ldr	r3, [pc, #64]	@ (8010784 <prvInsertTimerInActiveList+0x7c>)
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	3304      	adds	r3, #4
 801074a:	4619      	mov	r1, r3
 801074c:	4610      	mov	r0, r2
 801074e:	f7fd fb56 	bl	800ddfe <vListInsert>
 8010752:	e012      	b.n	801077a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	429a      	cmp	r2, r3
 801075a:	d206      	bcs.n	801076a <prvInsertTimerInActiveList+0x62>
 801075c:	68ba      	ldr	r2, [r7, #8]
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	429a      	cmp	r2, r3
 8010762:	d302      	bcc.n	801076a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010764:	2301      	movs	r3, #1
 8010766:	617b      	str	r3, [r7, #20]
 8010768:	e007      	b.n	801077a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801076a:	4b07      	ldr	r3, [pc, #28]	@ (8010788 <prvInsertTimerInActiveList+0x80>)
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	3304      	adds	r3, #4
 8010772:	4619      	mov	r1, r3
 8010774:	4610      	mov	r0, r2
 8010776:	f7fd fb42 	bl	800ddfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 801077a:	697b      	ldr	r3, [r7, #20]
}
 801077c:	4618      	mov	r0, r3
 801077e:	3718      	adds	r7, #24
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	2000ef80 	.word	0x2000ef80
 8010788:	2000ef7c 	.word	0x2000ef7c

0801078c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b08e      	sub	sp, #56	@ 0x38
 8010790:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010792:	e0d4      	b.n	801093e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	da1b      	bge.n	80107d2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801079a:	1d3b      	adds	r3, r7, #4
 801079c:	3304      	adds	r3, #4
 801079e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80107a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d10d      	bne.n	80107c2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80107a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107aa:	b672      	cpsid	i
 80107ac:	f383 8811 	msr	BASEPRI, r3
 80107b0:	f3bf 8f6f 	isb	sy
 80107b4:	f3bf 8f4f 	dsb	sy
 80107b8:	b662      	cpsie	i
 80107ba:	61fb      	str	r3, [r7, #28]
}
 80107bc:	bf00      	nop
 80107be:	bf00      	nop
 80107c0:	e7fd      	b.n	80107be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80107c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107c8:	6850      	ldr	r0, [r2, #4]
 80107ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107cc:	6892      	ldr	r2, [r2, #8]
 80107ce:	4611      	mov	r1, r2
 80107d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f2c0 80b2 	blt.w	801093e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80107de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e0:	695b      	ldr	r3, [r3, #20]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d004      	beq.n	80107f0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e8:	3304      	adds	r3, #4
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fd fb40 	bl	800de70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80107f0:	463b      	mov	r3, r7
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7ff ff68 	bl	80106c8 <prvSampleTimeNow>
 80107f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2b09      	cmp	r3, #9
 80107fe:	f200 809b 	bhi.w	8010938 <prvProcessReceivedCommands+0x1ac>
 8010802:	a201      	add	r2, pc, #4	@ (adr r2, 8010808 <prvProcessReceivedCommands+0x7c>)
 8010804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010808:	08010831 	.word	0x08010831
 801080c:	08010831 	.word	0x08010831
 8010810:	08010831 	.word	0x08010831
 8010814:	080108ab 	.word	0x080108ab
 8010818:	080108bf 	.word	0x080108bf
 801081c:	0801090f 	.word	0x0801090f
 8010820:	08010831 	.word	0x08010831
 8010824:	08010831 	.word	0x08010831
 8010828:	080108ab 	.word	0x080108ab
 801082c:	080108bf 	.word	0x080108bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010836:	f043 0301 	orr.w	r3, r3, #1
 801083a:	b2da      	uxtb	r2, r3
 801083c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801083e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010846:	699b      	ldr	r3, [r3, #24]
 8010848:	18d1      	adds	r1, r2, r3
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801084e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010850:	f7ff ff5a 	bl	8010708 <prvInsertTimerInActiveList>
 8010854:	4603      	mov	r3, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d070      	beq.n	801093c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085c:	6a1b      	ldr	r3, [r3, #32]
 801085e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010860:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010868:	f003 0304 	and.w	r3, r3, #4
 801086c:	2b00      	cmp	r3, #0
 801086e:	d065      	beq.n	801093c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010870:	68ba      	ldr	r2, [r7, #8]
 8010872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010874:	699b      	ldr	r3, [r3, #24]
 8010876:	441a      	add	r2, r3
 8010878:	2300      	movs	r3, #0
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	2300      	movs	r3, #0
 801087e:	2100      	movs	r1, #0
 8010880:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010882:	f7ff fdfb 	bl	801047c <xTimerGenericCommand>
 8010886:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010888:	6a3b      	ldr	r3, [r7, #32]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d156      	bne.n	801093c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801088e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010892:	b672      	cpsid	i
 8010894:	f383 8811 	msr	BASEPRI, r3
 8010898:	f3bf 8f6f 	isb	sy
 801089c:	f3bf 8f4f 	dsb	sy
 80108a0:	b662      	cpsie	i
 80108a2:	61bb      	str	r3, [r7, #24]
}
 80108a4:	bf00      	nop
 80108a6:	bf00      	nop
 80108a8:	e7fd      	b.n	80108a6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108b0:	f023 0301 	bic.w	r3, r3, #1
 80108b4:	b2da      	uxtb	r2, r3
 80108b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80108bc:	e03f      	b.n	801093e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108c4:	f043 0301 	orr.w	r3, r3, #1
 80108c8:	b2da      	uxtb	r2, r3
 80108ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80108d0:	68ba      	ldr	r2, [r7, #8]
 80108d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80108d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d10d      	bne.n	80108fa <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80108de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e2:	b672      	cpsid	i
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	b662      	cpsie	i
 80108f2:	617b      	str	r3, [r7, #20]
}
 80108f4:	bf00      	nop
 80108f6:	bf00      	nop
 80108f8:	e7fd      	b.n	80108f6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80108fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108fc:	699a      	ldr	r2, [r3, #24]
 80108fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010900:	18d1      	adds	r1, r2, r3
 8010902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010908:	f7ff fefe 	bl	8010708 <prvInsertTimerInActiveList>
					break;
 801090c:	e017      	b.n	801093e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010914:	f003 0302 	and.w	r3, r3, #2
 8010918:	2b00      	cmp	r3, #0
 801091a:	d103      	bne.n	8010924 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 801091c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801091e:	f000 fbd5 	bl	80110cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010922:	e00c      	b.n	801093e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010926:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801092a:	f023 0301 	bic.w	r3, r3, #1
 801092e:	b2da      	uxtb	r2, r3
 8010930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010932:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010936:	e002      	b.n	801093e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010938:	bf00      	nop
 801093a:	e000      	b.n	801093e <prvProcessReceivedCommands+0x1b2>
					break;
 801093c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801093e:	4b08      	ldr	r3, [pc, #32]	@ (8010960 <prvProcessReceivedCommands+0x1d4>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	1d39      	adds	r1, r7, #4
 8010944:	2200      	movs	r2, #0
 8010946:	4618      	mov	r0, r3
 8010948:	f7fd ff8e 	bl	800e868 <xQueueReceive>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	f47f af20 	bne.w	8010794 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010954:	bf00      	nop
 8010956:	bf00      	nop
 8010958:	3730      	adds	r7, #48	@ 0x30
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	2000ef84 	.word	0x2000ef84

08010964 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b088      	sub	sp, #32
 8010968:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801096a:	e04b      	b.n	8010a04 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801096c:	4b2f      	ldr	r3, [pc, #188]	@ (8010a2c <prvSwitchTimerLists+0xc8>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010976:	4b2d      	ldr	r3, [pc, #180]	@ (8010a2c <prvSwitchTimerLists+0xc8>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	3304      	adds	r3, #4
 8010984:	4618      	mov	r0, r3
 8010986:	f7fd fa73 	bl	800de70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6a1b      	ldr	r3, [r3, #32]
 801098e:	68f8      	ldr	r0, [r7, #12]
 8010990:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010998:	f003 0304 	and.w	r3, r3, #4
 801099c:	2b00      	cmp	r3, #0
 801099e:	d031      	beq.n	8010a04 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	699b      	ldr	r3, [r3, #24]
 80109a4:	693a      	ldr	r2, [r7, #16]
 80109a6:	4413      	add	r3, r2
 80109a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80109aa:	68ba      	ldr	r2, [r7, #8]
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d90e      	bls.n	80109d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	68fa      	ldr	r2, [r7, #12]
 80109bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109be:	4b1b      	ldr	r3, [pc, #108]	@ (8010a2c <prvSwitchTimerLists+0xc8>)
 80109c0:	681a      	ldr	r2, [r3, #0]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	3304      	adds	r3, #4
 80109c6:	4619      	mov	r1, r3
 80109c8:	4610      	mov	r0, r2
 80109ca:	f7fd fa18 	bl	800ddfe <vListInsert>
 80109ce:	e019      	b.n	8010a04 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109d0:	2300      	movs	r3, #0
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	2300      	movs	r3, #0
 80109d6:	693a      	ldr	r2, [r7, #16]
 80109d8:	2100      	movs	r1, #0
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	f7ff fd4e 	bl	801047c <xTimerGenericCommand>
 80109e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d10d      	bne.n	8010a04 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80109e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ec:	b672      	cpsid	i
 80109ee:	f383 8811 	msr	BASEPRI, r3
 80109f2:	f3bf 8f6f 	isb	sy
 80109f6:	f3bf 8f4f 	dsb	sy
 80109fa:	b662      	cpsie	i
 80109fc:	603b      	str	r3, [r7, #0]
}
 80109fe:	bf00      	nop
 8010a00:	bf00      	nop
 8010a02:	e7fd      	b.n	8010a00 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a04:	4b09      	ldr	r3, [pc, #36]	@ (8010a2c <prvSwitchTimerLists+0xc8>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d1ae      	bne.n	801096c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a0e:	4b07      	ldr	r3, [pc, #28]	@ (8010a2c <prvSwitchTimerLists+0xc8>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a14:	4b06      	ldr	r3, [pc, #24]	@ (8010a30 <prvSwitchTimerLists+0xcc>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a04      	ldr	r2, [pc, #16]	@ (8010a2c <prvSwitchTimerLists+0xc8>)
 8010a1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a1c:	4a04      	ldr	r2, [pc, #16]	@ (8010a30 <prvSwitchTimerLists+0xcc>)
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	6013      	str	r3, [r2, #0]
}
 8010a22:	bf00      	nop
 8010a24:	3718      	adds	r7, #24
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	2000ef7c 	.word	0x2000ef7c
 8010a30:	2000ef80 	.word	0x2000ef80

08010a34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a3a:	f000 f947 	bl	8010ccc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a3e:	4b15      	ldr	r3, [pc, #84]	@ (8010a94 <prvCheckForValidListAndQueue+0x60>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d120      	bne.n	8010a88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a46:	4814      	ldr	r0, [pc, #80]	@ (8010a98 <prvCheckForValidListAndQueue+0x64>)
 8010a48:	f7fd f988 	bl	800dd5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a4c:	4813      	ldr	r0, [pc, #76]	@ (8010a9c <prvCheckForValidListAndQueue+0x68>)
 8010a4e:	f7fd f985 	bl	800dd5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a52:	4b13      	ldr	r3, [pc, #76]	@ (8010aa0 <prvCheckForValidListAndQueue+0x6c>)
 8010a54:	4a10      	ldr	r2, [pc, #64]	@ (8010a98 <prvCheckForValidListAndQueue+0x64>)
 8010a56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a58:	4b12      	ldr	r3, [pc, #72]	@ (8010aa4 <prvCheckForValidListAndQueue+0x70>)
 8010a5a:	4a10      	ldr	r2, [pc, #64]	@ (8010a9c <prvCheckForValidListAndQueue+0x68>)
 8010a5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a5e:	2300      	movs	r3, #0
 8010a60:	9300      	str	r3, [sp, #0]
 8010a62:	4b11      	ldr	r3, [pc, #68]	@ (8010aa8 <prvCheckForValidListAndQueue+0x74>)
 8010a64:	4a11      	ldr	r2, [pc, #68]	@ (8010aac <prvCheckForValidListAndQueue+0x78>)
 8010a66:	2110      	movs	r1, #16
 8010a68:	200a      	movs	r0, #10
 8010a6a:	f7fd fa97 	bl	800df9c <xQueueGenericCreateStatic>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	4a08      	ldr	r2, [pc, #32]	@ (8010a94 <prvCheckForValidListAndQueue+0x60>)
 8010a72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010a74:	4b07      	ldr	r3, [pc, #28]	@ (8010a94 <prvCheckForValidListAndQueue+0x60>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d005      	beq.n	8010a88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a7c:	4b05      	ldr	r3, [pc, #20]	@ (8010a94 <prvCheckForValidListAndQueue+0x60>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	490b      	ldr	r1, [pc, #44]	@ (8010ab0 <prvCheckForValidListAndQueue+0x7c>)
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fe fb08 	bl	800f098 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a88:	f000 f956 	bl	8010d38 <vPortExitCritical>
}
 8010a8c:	bf00      	nop
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	2000ef84 	.word	0x2000ef84
 8010a98:	2000ef54 	.word	0x2000ef54
 8010a9c:	2000ef68 	.word	0x2000ef68
 8010aa0:	2000ef7c 	.word	0x2000ef7c
 8010aa4:	2000ef80 	.word	0x2000ef80
 8010aa8:	2000f030 	.word	0x2000f030
 8010aac:	2000ef90 	.word	0x2000ef90
 8010ab0:	080213b0 	.word	0x080213b0

08010ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b085      	sub	sp, #20
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	3b04      	subs	r3, #4
 8010ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	3b04      	subs	r3, #4
 8010ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	f023 0201 	bic.w	r2, r3, #1
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	3b04      	subs	r3, #4
 8010ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8010b18 <pxPortInitialiseStack+0x64>)
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3b14      	subs	r3, #20
 8010aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	3b04      	subs	r3, #4
 8010afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	f06f 0202 	mvn.w	r2, #2
 8010b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	3b20      	subs	r3, #32
 8010b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3714      	adds	r7, #20
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr
 8010b18:	08010b1d 	.word	0x08010b1d

08010b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b085      	sub	sp, #20
 8010b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b22:	2300      	movs	r3, #0
 8010b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b26:	4b15      	ldr	r3, [pc, #84]	@ (8010b7c <prvTaskExitError+0x60>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b2e:	d00d      	beq.n	8010b4c <prvTaskExitError+0x30>
	__asm volatile
 8010b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b34:	b672      	cpsid	i
 8010b36:	f383 8811 	msr	BASEPRI, r3
 8010b3a:	f3bf 8f6f 	isb	sy
 8010b3e:	f3bf 8f4f 	dsb	sy
 8010b42:	b662      	cpsie	i
 8010b44:	60fb      	str	r3, [r7, #12]
}
 8010b46:	bf00      	nop
 8010b48:	bf00      	nop
 8010b4a:	e7fd      	b.n	8010b48 <prvTaskExitError+0x2c>
	__asm volatile
 8010b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b50:	b672      	cpsid	i
 8010b52:	f383 8811 	msr	BASEPRI, r3
 8010b56:	f3bf 8f6f 	isb	sy
 8010b5a:	f3bf 8f4f 	dsb	sy
 8010b5e:	b662      	cpsie	i
 8010b60:	60bb      	str	r3, [r7, #8]
}
 8010b62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b64:	bf00      	nop
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d0fc      	beq.n	8010b66 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b6c:	bf00      	nop
 8010b6e:	bf00      	nop
 8010b70:	3714      	adds	r7, #20
 8010b72:	46bd      	mov	sp, r7
 8010b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b78:	4770      	bx	lr
 8010b7a:	bf00      	nop
 8010b7c:	20000020 	.word	0x20000020

08010b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b80:	4b07      	ldr	r3, [pc, #28]	@ (8010ba0 <pxCurrentTCBConst2>)
 8010b82:	6819      	ldr	r1, [r3, #0]
 8010b84:	6808      	ldr	r0, [r1, #0]
 8010b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8a:	f380 8809 	msr	PSP, r0
 8010b8e:	f3bf 8f6f 	isb	sy
 8010b92:	f04f 0000 	mov.w	r0, #0
 8010b96:	f380 8811 	msr	BASEPRI, r0
 8010b9a:	4770      	bx	lr
 8010b9c:	f3af 8000 	nop.w

08010ba0 <pxCurrentTCBConst2>:
 8010ba0:	2000ea54 	.word	0x2000ea54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop

08010ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010ba8:	4808      	ldr	r0, [pc, #32]	@ (8010bcc <prvPortStartFirstTask+0x24>)
 8010baa:	6800      	ldr	r0, [r0, #0]
 8010bac:	6800      	ldr	r0, [r0, #0]
 8010bae:	f380 8808 	msr	MSP, r0
 8010bb2:	f04f 0000 	mov.w	r0, #0
 8010bb6:	f380 8814 	msr	CONTROL, r0
 8010bba:	b662      	cpsie	i
 8010bbc:	b661      	cpsie	f
 8010bbe:	f3bf 8f4f 	dsb	sy
 8010bc2:	f3bf 8f6f 	isb	sy
 8010bc6:	df00      	svc	0
 8010bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010bca:	bf00      	nop
 8010bcc:	e000ed08 	.word	0xe000ed08

08010bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010bd6:	4b37      	ldr	r3, [pc, #220]	@ (8010cb4 <xPortStartScheduler+0xe4>)
 8010bd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	22ff      	movs	r2, #255	@ 0xff
 8010be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8010cb8 <xPortStartScheduler+0xe8>)
 8010bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c00:	2207      	movs	r2, #7
 8010c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c04:	e009      	b.n	8010c1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010c06:	4b2d      	ldr	r3, [pc, #180]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c10:	78fb      	ldrb	r3, [r7, #3]
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c1a:	78fb      	ldrb	r3, [r7, #3]
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c22:	2b80      	cmp	r3, #128	@ 0x80
 8010c24:	d0ef      	beq.n	8010c06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c26:	4b25      	ldr	r3, [pc, #148]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f1c3 0307 	rsb	r3, r3, #7
 8010c2e:	2b04      	cmp	r3, #4
 8010c30:	d00d      	beq.n	8010c4e <xPortStartScheduler+0x7e>
	__asm volatile
 8010c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c36:	b672      	cpsid	i
 8010c38:	f383 8811 	msr	BASEPRI, r3
 8010c3c:	f3bf 8f6f 	isb	sy
 8010c40:	f3bf 8f4f 	dsb	sy
 8010c44:	b662      	cpsie	i
 8010c46:	60bb      	str	r3, [r7, #8]
}
 8010c48:	bf00      	nop
 8010c4a:	bf00      	nop
 8010c4c:	e7fd      	b.n	8010c4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	021b      	lsls	r3, r3, #8
 8010c54:	4a19      	ldr	r2, [pc, #100]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c58:	4b18      	ldr	r3, [pc, #96]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010c60:	4a16      	ldr	r2, [pc, #88]	@ (8010cbc <xPortStartScheduler+0xec>)
 8010c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	b2da      	uxtb	r2, r3
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c6c:	4b14      	ldr	r3, [pc, #80]	@ (8010cc0 <xPortStartScheduler+0xf0>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a13      	ldr	r2, [pc, #76]	@ (8010cc0 <xPortStartScheduler+0xf0>)
 8010c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c78:	4b11      	ldr	r3, [pc, #68]	@ (8010cc0 <xPortStartScheduler+0xf0>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4a10      	ldr	r2, [pc, #64]	@ (8010cc0 <xPortStartScheduler+0xf0>)
 8010c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c84:	f000 f8dc 	bl	8010e40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c88:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc4 <xPortStartScheduler+0xf4>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010c8e:	f000 f8fb 	bl	8010e88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010c92:	4b0d      	ldr	r3, [pc, #52]	@ (8010cc8 <xPortStartScheduler+0xf8>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a0c      	ldr	r2, [pc, #48]	@ (8010cc8 <xPortStartScheduler+0xf8>)
 8010c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010c9e:	f7ff ff83 	bl	8010ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010ca2:	f7fe fef5 	bl	800fa90 <vTaskSwitchContext>
	prvTaskExitError();
 8010ca6:	f7ff ff39 	bl	8010b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010caa:	2300      	movs	r3, #0
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3710      	adds	r7, #16
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	e000e400 	.word	0xe000e400
 8010cb8:	2000f080 	.word	0x2000f080
 8010cbc:	2000f084 	.word	0x2000f084
 8010cc0:	e000ed20 	.word	0xe000ed20
 8010cc4:	20000020 	.word	0x20000020
 8010cc8:	e000ef34 	.word	0xe000ef34

08010ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
	__asm volatile
 8010cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cd6:	b672      	cpsid	i
 8010cd8:	f383 8811 	msr	BASEPRI, r3
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	f3bf 8f4f 	dsb	sy
 8010ce4:	b662      	cpsie	i
 8010ce6:	607b      	str	r3, [r7, #4]
}
 8010ce8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010cea:	4b11      	ldr	r3, [pc, #68]	@ (8010d30 <vPortEnterCritical+0x64>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8010d30 <vPortEnterCritical+0x64>)
 8010cf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8010d30 <vPortEnterCritical+0x64>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d112      	bne.n	8010d22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8010d34 <vPortEnterCritical+0x68>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d00d      	beq.n	8010d22 <vPortEnterCritical+0x56>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d0a:	b672      	cpsid	i
 8010d0c:	f383 8811 	msr	BASEPRI, r3
 8010d10:	f3bf 8f6f 	isb	sy
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	b662      	cpsie	i
 8010d1a:	603b      	str	r3, [r7, #0]
}
 8010d1c:	bf00      	nop
 8010d1e:	bf00      	nop
 8010d20:	e7fd      	b.n	8010d1e <vPortEnterCritical+0x52>
	}
}
 8010d22:	bf00      	nop
 8010d24:	370c      	adds	r7, #12
 8010d26:	46bd      	mov	sp, r7
 8010d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	20000020 	.word	0x20000020
 8010d34:	e000ed04 	.word	0xe000ed04

08010d38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d3e:	4b13      	ldr	r3, [pc, #76]	@ (8010d8c <vPortExitCritical+0x54>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d10d      	bne.n	8010d62 <vPortExitCritical+0x2a>
	__asm volatile
 8010d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d4a:	b672      	cpsid	i
 8010d4c:	f383 8811 	msr	BASEPRI, r3
 8010d50:	f3bf 8f6f 	isb	sy
 8010d54:	f3bf 8f4f 	dsb	sy
 8010d58:	b662      	cpsie	i
 8010d5a:	607b      	str	r3, [r7, #4]
}
 8010d5c:	bf00      	nop
 8010d5e:	bf00      	nop
 8010d60:	e7fd      	b.n	8010d5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010d62:	4b0a      	ldr	r3, [pc, #40]	@ (8010d8c <vPortExitCritical+0x54>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	3b01      	subs	r3, #1
 8010d68:	4a08      	ldr	r2, [pc, #32]	@ (8010d8c <vPortExitCritical+0x54>)
 8010d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d6c:	4b07      	ldr	r3, [pc, #28]	@ (8010d8c <vPortExitCritical+0x54>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d105      	bne.n	8010d80 <vPortExitCritical+0x48>
 8010d74:	2300      	movs	r3, #0
 8010d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	f383 8811 	msr	BASEPRI, r3
}
 8010d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010d80:	bf00      	nop
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	20000020 	.word	0x20000020

08010d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010d90:	f3ef 8009 	mrs	r0, PSP
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	4b15      	ldr	r3, [pc, #84]	@ (8010df0 <pxCurrentTCBConst>)
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	f01e 0f10 	tst.w	lr, #16
 8010da0:	bf08      	it	eq
 8010da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010daa:	6010      	str	r0, [r2, #0]
 8010dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010db4:	b672      	cpsid	i
 8010db6:	f380 8811 	msr	BASEPRI, r0
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	b662      	cpsie	i
 8010dc4:	f7fe fe64 	bl	800fa90 <vTaskSwitchContext>
 8010dc8:	f04f 0000 	mov.w	r0, #0
 8010dcc:	f380 8811 	msr	BASEPRI, r0
 8010dd0:	bc09      	pop	{r0, r3}
 8010dd2:	6819      	ldr	r1, [r3, #0]
 8010dd4:	6808      	ldr	r0, [r1, #0]
 8010dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dda:	f01e 0f10 	tst.w	lr, #16
 8010dde:	bf08      	it	eq
 8010de0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010de4:	f380 8809 	msr	PSP, r0
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop

08010df0 <pxCurrentTCBConst>:
 8010df0:	2000ea54 	.word	0x2000ea54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010df4:	bf00      	nop
 8010df6:	bf00      	nop

08010df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8010dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e02:	b672      	cpsid	i
 8010e04:	f383 8811 	msr	BASEPRI, r3
 8010e08:	f3bf 8f6f 	isb	sy
 8010e0c:	f3bf 8f4f 	dsb	sy
 8010e10:	b662      	cpsie	i
 8010e12:	607b      	str	r3, [r7, #4]
}
 8010e14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e16:	f7fe fd7f 	bl	800f918 <xTaskIncrementTick>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d003      	beq.n	8010e28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e20:	4b06      	ldr	r3, [pc, #24]	@ (8010e3c <SysTick_Handler+0x44>)
 8010e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	2300      	movs	r3, #0
 8010e2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	f383 8811 	msr	BASEPRI, r3
}
 8010e32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e34:	bf00      	nop
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	e000ed04 	.word	0xe000ed04

08010e40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e40:	b480      	push	{r7}
 8010e42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e44:	4b0b      	ldr	r3, [pc, #44]	@ (8010e74 <vPortSetupTimerInterrupt+0x34>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e78 <vPortSetupTimerInterrupt+0x38>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e50:	4b0a      	ldr	r3, [pc, #40]	@ (8010e7c <vPortSetupTimerInterrupt+0x3c>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4a0a      	ldr	r2, [pc, #40]	@ (8010e80 <vPortSetupTimerInterrupt+0x40>)
 8010e56:	fba2 2303 	umull	r2, r3, r2, r3
 8010e5a:	099b      	lsrs	r3, r3, #6
 8010e5c:	4a09      	ldr	r2, [pc, #36]	@ (8010e84 <vPortSetupTimerInterrupt+0x44>)
 8010e5e:	3b01      	subs	r3, #1
 8010e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e62:	4b04      	ldr	r3, [pc, #16]	@ (8010e74 <vPortSetupTimerInterrupt+0x34>)
 8010e64:	2207      	movs	r2, #7
 8010e66:	601a      	str	r2, [r3, #0]
}
 8010e68:	bf00      	nop
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	e000e010 	.word	0xe000e010
 8010e78:	e000e018 	.word	0xe000e018
 8010e7c:	20000000 	.word	0x20000000
 8010e80:	10624dd3 	.word	0x10624dd3
 8010e84:	e000e014 	.word	0xe000e014

08010e88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010e88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010e98 <vPortEnableVFP+0x10>
 8010e8c:	6801      	ldr	r1, [r0, #0]
 8010e8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010e92:	6001      	str	r1, [r0, #0]
 8010e94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010e96:	bf00      	nop
 8010e98:	e000ed88 	.word	0xe000ed88

08010e9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b085      	sub	sp, #20
 8010ea0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010ea2:	f3ef 8305 	mrs	r3, IPSR
 8010ea6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2b0f      	cmp	r3, #15
 8010eac:	d917      	bls.n	8010ede <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010eae:	4a1a      	ldr	r2, [pc, #104]	@ (8010f18 <vPortValidateInterruptPriority+0x7c>)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010eb8:	4b18      	ldr	r3, [pc, #96]	@ (8010f1c <vPortValidateInterruptPriority+0x80>)
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	7afa      	ldrb	r2, [r7, #11]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d20d      	bcs.n	8010ede <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ec6:	b672      	cpsid	i
 8010ec8:	f383 8811 	msr	BASEPRI, r3
 8010ecc:	f3bf 8f6f 	isb	sy
 8010ed0:	f3bf 8f4f 	dsb	sy
 8010ed4:	b662      	cpsie	i
 8010ed6:	607b      	str	r3, [r7, #4]
}
 8010ed8:	bf00      	nop
 8010eda:	bf00      	nop
 8010edc:	e7fd      	b.n	8010eda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ede:	4b10      	ldr	r3, [pc, #64]	@ (8010f20 <vPortValidateInterruptPriority+0x84>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8010f24 <vPortValidateInterruptPriority+0x88>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d90d      	bls.n	8010f0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8010eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ef2:	b672      	cpsid	i
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	b662      	cpsie	i
 8010f02:	603b      	str	r3, [r7, #0]
}
 8010f04:	bf00      	nop
 8010f06:	bf00      	nop
 8010f08:	e7fd      	b.n	8010f06 <vPortValidateInterruptPriority+0x6a>
	}
 8010f0a:	bf00      	nop
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	e000e3f0 	.word	0xe000e3f0
 8010f1c:	2000f080 	.word	0x2000f080
 8010f20:	e000ed0c 	.word	0xe000ed0c
 8010f24:	2000f084 	.word	0x2000f084

08010f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b08a      	sub	sp, #40	@ 0x28
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f30:	2300      	movs	r3, #0
 8010f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f34:	f7fe fc20 	bl	800f778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f38:	4b5f      	ldr	r3, [pc, #380]	@ (80110b8 <pvPortMalloc+0x190>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f40:	f000 f924 	bl	801118c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f44:	4b5d      	ldr	r3, [pc, #372]	@ (80110bc <pvPortMalloc+0x194>)
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4013      	ands	r3, r2
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f040 8094 	bne.w	801107a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d020      	beq.n	8010f9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010f58:	2208      	movs	r2, #8
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f003 0307 	and.w	r3, r3, #7
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d017      	beq.n	8010f9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f023 0307 	bic.w	r3, r3, #7
 8010f70:	3308      	adds	r3, #8
 8010f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f003 0307 	and.w	r3, r3, #7
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d00d      	beq.n	8010f9a <pvPortMalloc+0x72>
	__asm volatile
 8010f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f82:	b672      	cpsid	i
 8010f84:	f383 8811 	msr	BASEPRI, r3
 8010f88:	f3bf 8f6f 	isb	sy
 8010f8c:	f3bf 8f4f 	dsb	sy
 8010f90:	b662      	cpsie	i
 8010f92:	617b      	str	r3, [r7, #20]
}
 8010f94:	bf00      	nop
 8010f96:	bf00      	nop
 8010f98:	e7fd      	b.n	8010f96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d06c      	beq.n	801107a <pvPortMalloc+0x152>
 8010fa0:	4b47      	ldr	r3, [pc, #284]	@ (80110c0 <pvPortMalloc+0x198>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	687a      	ldr	r2, [r7, #4]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d867      	bhi.n	801107a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010faa:	4b46      	ldr	r3, [pc, #280]	@ (80110c4 <pvPortMalloc+0x19c>)
 8010fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010fae:	4b45      	ldr	r3, [pc, #276]	@ (80110c4 <pvPortMalloc+0x19c>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fb4:	e004      	b.n	8010fc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d903      	bls.n	8010fd2 <pvPortMalloc+0xaa>
 8010fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d1f1      	bne.n	8010fb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010fd2:	4b39      	ldr	r3, [pc, #228]	@ (80110b8 <pvPortMalloc+0x190>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d04e      	beq.n	801107a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010fdc:	6a3b      	ldr	r3, [r7, #32]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2208      	movs	r2, #8
 8010fe2:	4413      	add	r3, r2
 8010fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	6a3b      	ldr	r3, [r7, #32]
 8010fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff0:	685a      	ldr	r2, [r3, #4]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	1ad2      	subs	r2, r2, r3
 8010ff6:	2308      	movs	r3, #8
 8010ff8:	005b      	lsls	r3, r3, #1
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d922      	bls.n	8011044 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4413      	add	r3, r2
 8011004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	f003 0307 	and.w	r3, r3, #7
 801100c:	2b00      	cmp	r3, #0
 801100e:	d00d      	beq.n	801102c <pvPortMalloc+0x104>
	__asm volatile
 8011010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011014:	b672      	cpsid	i
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	b662      	cpsie	i
 8011024:	613b      	str	r3, [r7, #16]
}
 8011026:	bf00      	nop
 8011028:	bf00      	nop
 801102a:	e7fd      	b.n	8011028 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	1ad2      	subs	r2, r2, r3
 8011034:	69bb      	ldr	r3, [r7, #24]
 8011036:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801103e:	69b8      	ldr	r0, [r7, #24]
 8011040:	f000 f906 	bl	8011250 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011044:	4b1e      	ldr	r3, [pc, #120]	@ (80110c0 <pvPortMalloc+0x198>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	1ad3      	subs	r3, r2, r3
 801104e:	4a1c      	ldr	r2, [pc, #112]	@ (80110c0 <pvPortMalloc+0x198>)
 8011050:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011052:	4b1b      	ldr	r3, [pc, #108]	@ (80110c0 <pvPortMalloc+0x198>)
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	4b1c      	ldr	r3, [pc, #112]	@ (80110c8 <pvPortMalloc+0x1a0>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	429a      	cmp	r2, r3
 801105c:	d203      	bcs.n	8011066 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801105e:	4b18      	ldr	r3, [pc, #96]	@ (80110c0 <pvPortMalloc+0x198>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4a19      	ldr	r2, [pc, #100]	@ (80110c8 <pvPortMalloc+0x1a0>)
 8011064:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011068:	685a      	ldr	r2, [r3, #4]
 801106a:	4b14      	ldr	r3, [pc, #80]	@ (80110bc <pvPortMalloc+0x194>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	431a      	orrs	r2, r3
 8011070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011072:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011076:	2200      	movs	r2, #0
 8011078:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801107a:	f7fe fb8b 	bl	800f794 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d101      	bne.n	8011088 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011084:	f7ef fc42 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	f003 0307 	and.w	r3, r3, #7
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00d      	beq.n	80110ae <pvPortMalloc+0x186>
	__asm volatile
 8011092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011096:	b672      	cpsid	i
 8011098:	f383 8811 	msr	BASEPRI, r3
 801109c:	f3bf 8f6f 	isb	sy
 80110a0:	f3bf 8f4f 	dsb	sy
 80110a4:	b662      	cpsie	i
 80110a6:	60fb      	str	r3, [r7, #12]
}
 80110a8:	bf00      	nop
 80110aa:	bf00      	nop
 80110ac:	e7fd      	b.n	80110aa <pvPortMalloc+0x182>
	return pvReturn;
 80110ae:	69fb      	ldr	r3, [r7, #28]
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3728      	adds	r7, #40	@ 0x28
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	2001f090 	.word	0x2001f090
 80110bc:	2001f09c 	.word	0x2001f09c
 80110c0:	2001f094 	.word	0x2001f094
 80110c4:	2001f088 	.word	0x2001f088
 80110c8:	2001f098 	.word	0x2001f098

080110cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d04e      	beq.n	801117c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80110de:	2308      	movs	r3, #8
 80110e0:	425b      	negs	r3, r3
 80110e2:	697a      	ldr	r2, [r7, #20]
 80110e4:	4413      	add	r3, r2
 80110e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	685a      	ldr	r2, [r3, #4]
 80110f0:	4b24      	ldr	r3, [pc, #144]	@ (8011184 <vPortFree+0xb8>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4013      	ands	r3, r2
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d10d      	bne.n	8011116 <vPortFree+0x4a>
	__asm volatile
 80110fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110fe:	b672      	cpsid	i
 8011100:	f383 8811 	msr	BASEPRI, r3
 8011104:	f3bf 8f6f 	isb	sy
 8011108:	f3bf 8f4f 	dsb	sy
 801110c:	b662      	cpsie	i
 801110e:	60fb      	str	r3, [r7, #12]
}
 8011110:	bf00      	nop
 8011112:	bf00      	nop
 8011114:	e7fd      	b.n	8011112 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00d      	beq.n	801113a <vPortFree+0x6e>
	__asm volatile
 801111e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011122:	b672      	cpsid	i
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	b662      	cpsie	i
 8011132:	60bb      	str	r3, [r7, #8]
}
 8011134:	bf00      	nop
 8011136:	bf00      	nop
 8011138:	e7fd      	b.n	8011136 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	685a      	ldr	r2, [r3, #4]
 801113e:	4b11      	ldr	r3, [pc, #68]	@ (8011184 <vPortFree+0xb8>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	4013      	ands	r3, r2
 8011144:	2b00      	cmp	r3, #0
 8011146:	d019      	beq.n	801117c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d115      	bne.n	801117c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	685a      	ldr	r2, [r3, #4]
 8011154:	4b0b      	ldr	r3, [pc, #44]	@ (8011184 <vPortFree+0xb8>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	43db      	mvns	r3, r3
 801115a:	401a      	ands	r2, r3
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011160:	f7fe fb0a 	bl	800f778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	685a      	ldr	r2, [r3, #4]
 8011168:	4b07      	ldr	r3, [pc, #28]	@ (8011188 <vPortFree+0xbc>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4413      	add	r3, r2
 801116e:	4a06      	ldr	r2, [pc, #24]	@ (8011188 <vPortFree+0xbc>)
 8011170:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011172:	6938      	ldr	r0, [r7, #16]
 8011174:	f000 f86c 	bl	8011250 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011178:	f7fe fb0c 	bl	800f794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801117c:	bf00      	nop
 801117e:	3718      	adds	r7, #24
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	2001f09c 	.word	0x2001f09c
 8011188:	2001f094 	.word	0x2001f094

0801118c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801118c:	b480      	push	{r7}
 801118e:	b085      	sub	sp, #20
 8011190:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011192:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011196:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011198:	4b27      	ldr	r3, [pc, #156]	@ (8011238 <prvHeapInit+0xac>)
 801119a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f003 0307 	and.w	r3, r3, #7
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d00c      	beq.n	80111c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	3307      	adds	r3, #7
 80111aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f023 0307 	bic.w	r3, r3, #7
 80111b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80111b4:	68ba      	ldr	r2, [r7, #8]
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	4a1f      	ldr	r2, [pc, #124]	@ (8011238 <prvHeapInit+0xac>)
 80111bc:	4413      	add	r3, r2
 80111be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111c4:	4a1d      	ldr	r2, [pc, #116]	@ (801123c <prvHeapInit+0xb0>)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80111ca:	4b1c      	ldr	r3, [pc, #112]	@ (801123c <prvHeapInit+0xb0>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	68ba      	ldr	r2, [r7, #8]
 80111d4:	4413      	add	r3, r2
 80111d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80111d8:	2208      	movs	r2, #8
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	1a9b      	subs	r3, r3, r2
 80111de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f023 0307 	bic.w	r3, r3, #7
 80111e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	4a15      	ldr	r2, [pc, #84]	@ (8011240 <prvHeapInit+0xb4>)
 80111ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80111ee:	4b14      	ldr	r3, [pc, #80]	@ (8011240 <prvHeapInit+0xb4>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	2200      	movs	r2, #0
 80111f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80111f6:	4b12      	ldr	r3, [pc, #72]	@ (8011240 <prvHeapInit+0xb4>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	2200      	movs	r2, #0
 80111fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	1ad2      	subs	r2, r2, r3
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801120c:	4b0c      	ldr	r3, [pc, #48]	@ (8011240 <prvHeapInit+0xb4>)
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	4a0a      	ldr	r2, [pc, #40]	@ (8011244 <prvHeapInit+0xb8>)
 801121a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	4a09      	ldr	r2, [pc, #36]	@ (8011248 <prvHeapInit+0xbc>)
 8011222:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011224:	4b09      	ldr	r3, [pc, #36]	@ (801124c <prvHeapInit+0xc0>)
 8011226:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801122a:	601a      	str	r2, [r3, #0]
}
 801122c:	bf00      	nop
 801122e:	3714      	adds	r7, #20
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr
 8011238:	2000f088 	.word	0x2000f088
 801123c:	2001f088 	.word	0x2001f088
 8011240:	2001f090 	.word	0x2001f090
 8011244:	2001f098 	.word	0x2001f098
 8011248:	2001f094 	.word	0x2001f094
 801124c:	2001f09c 	.word	0x2001f09c

08011250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011250:	b480      	push	{r7}
 8011252:	b085      	sub	sp, #20
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011258:	4b28      	ldr	r3, [pc, #160]	@ (80112fc <prvInsertBlockIntoFreeList+0xac>)
 801125a:	60fb      	str	r3, [r7, #12]
 801125c:	e002      	b.n	8011264 <prvInsertBlockIntoFreeList+0x14>
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	60fb      	str	r3, [r7, #12]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	429a      	cmp	r2, r3
 801126c:	d8f7      	bhi.n	801125e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	4413      	add	r3, r2
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	429a      	cmp	r2, r3
 801127e:	d108      	bne.n	8011292 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	685a      	ldr	r2, [r3, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	441a      	add	r2, r3
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	68ba      	ldr	r2, [r7, #8]
 801129c:	441a      	add	r2, r3
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d118      	bne.n	80112d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	4b15      	ldr	r3, [pc, #84]	@ (8011300 <prvInsertBlockIntoFreeList+0xb0>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d00d      	beq.n	80112ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	685a      	ldr	r2, [r3, #4]
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	441a      	add	r2, r3
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	601a      	str	r2, [r3, #0]
 80112cc:	e008      	b.n	80112e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80112ce:	4b0c      	ldr	r3, [pc, #48]	@ (8011300 <prvInsertBlockIntoFreeList+0xb0>)
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	601a      	str	r2, [r3, #0]
 80112d6:	e003      	b.n	80112e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d002      	beq.n	80112ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112ee:	bf00      	nop
 80112f0:	3714      	adds	r7, #20
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr
 80112fa:	bf00      	nop
 80112fc:	2001f088 	.word	0x2001f088
 8011300:	2001f090 	.word	0x2001f090

08011304 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	330c      	adds	r3, #12
 8011314:	461a      	mov	r2, r3
 8011316:	6839      	ldr	r1, [r7, #0]
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f001 fff7 	bl	801330c <tcpip_send_msg_wait_sem>
 801131e:	4603      	mov	r3, r0
 8011320:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d103      	bne.n	8011332 <netconn_apimsg+0x2e>
    return apimsg->err;
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011330:	e001      	b.n	8011336 <netconn_apimsg+0x32>
  }
  return err;
 8011332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
	...

08011340 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b08c      	sub	sp, #48	@ 0x30
 8011344:	af00      	add	r7, sp, #0
 8011346:	4603      	mov	r3, r0
 8011348:	603a      	str	r2, [r7, #0]
 801134a:	71fb      	strb	r3, [r7, #7]
 801134c:	460b      	mov	r3, r1
 801134e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011350:	79fb      	ldrb	r3, [r7, #7]
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	4618      	mov	r0, r3
 8011356:	f000 ff21 	bl	801219c <netconn_alloc>
 801135a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 801135c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801135e:	2b00      	cmp	r3, #0
 8011360:	d054      	beq.n	801140c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8011362:	79bb      	ldrb	r3, [r7, #6]
 8011364:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8011366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011368:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801136a:	f107 0308 	add.w	r3, r7, #8
 801136e:	4619      	mov	r1, r3
 8011370:	4829      	ldr	r0, [pc, #164]	@ (8011418 <netconn_new_with_proto_and_callback+0xd8>)
 8011372:	f7ff ffc7 	bl	8011304 <netconn_apimsg>
 8011376:	4603      	mov	r3, r0
 8011378:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 801137c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011380:	2b00      	cmp	r3, #0
 8011382:	d043      	beq.n	801140c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8011384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d005      	beq.n	8011398 <netconn_new_with_proto_and_callback+0x58>
 801138c:	4b23      	ldr	r3, [pc, #140]	@ (801141c <netconn_new_with_proto_and_callback+0xdc>)
 801138e:	22a3      	movs	r2, #163	@ 0xa3
 8011390:	4923      	ldr	r1, [pc, #140]	@ (8011420 <netconn_new_with_proto_and_callback+0xe0>)
 8011392:	4824      	ldr	r0, [pc, #144]	@ (8011424 <netconn_new_with_proto_and_callback+0xe4>)
 8011394:	f00e ff88 	bl	80202a8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8011398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139a:	3310      	adds	r3, #16
 801139c:	4618      	mov	r0, r3
 801139e:	f00d fba3 	bl	801eae8 <sys_mbox_valid>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d105      	bne.n	80113b4 <netconn_new_with_proto_and_callback+0x74>
 80113a8:	4b1c      	ldr	r3, [pc, #112]	@ (801141c <netconn_new_with_proto_and_callback+0xdc>)
 80113aa:	22a4      	movs	r2, #164	@ 0xa4
 80113ac:	491e      	ldr	r1, [pc, #120]	@ (8011428 <netconn_new_with_proto_and_callback+0xe8>)
 80113ae:	481d      	ldr	r0, [pc, #116]	@ (8011424 <netconn_new_with_proto_and_callback+0xe4>)
 80113b0:	f00e ff7a 	bl	80202a8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80113b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b6:	3314      	adds	r3, #20
 80113b8:	4618      	mov	r0, r3
 80113ba:	f00d fb95 	bl	801eae8 <sys_mbox_valid>
 80113be:	4603      	mov	r3, r0
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d005      	beq.n	80113d0 <netconn_new_with_proto_and_callback+0x90>
 80113c4:	4b15      	ldr	r3, [pc, #84]	@ (801141c <netconn_new_with_proto_and_callback+0xdc>)
 80113c6:	22a6      	movs	r2, #166	@ 0xa6
 80113c8:	4918      	ldr	r1, [pc, #96]	@ (801142c <netconn_new_with_proto_and_callback+0xec>)
 80113ca:	4816      	ldr	r0, [pc, #88]	@ (8011424 <netconn_new_with_proto_and_callback+0xe4>)
 80113cc:	f00e ff6c 	bl	80202a8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80113d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d2:	330c      	adds	r3, #12
 80113d4:	4618      	mov	r0, r3
 80113d6:	f00d fc41 	bl	801ec5c <sys_sem_valid>
 80113da:	4603      	mov	r3, r0
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d105      	bne.n	80113ec <netconn_new_with_proto_and_callback+0xac>
 80113e0:	4b0e      	ldr	r3, [pc, #56]	@ (801141c <netconn_new_with_proto_and_callback+0xdc>)
 80113e2:	22a9      	movs	r2, #169	@ 0xa9
 80113e4:	4912      	ldr	r1, [pc, #72]	@ (8011430 <netconn_new_with_proto_and_callback+0xf0>)
 80113e6:	480f      	ldr	r0, [pc, #60]	@ (8011424 <netconn_new_with_proto_and_callback+0xe4>)
 80113e8:	f00e ff5e 	bl	80202a8 <iprintf>
      sys_sem_free(&conn->op_completed);
 80113ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ee:	330c      	adds	r3, #12
 80113f0:	4618      	mov	r0, r3
 80113f2:	f00d fc1b 	bl	801ec2c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80113f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f8:	3310      	adds	r3, #16
 80113fa:	4618      	mov	r0, r3
 80113fc:	f00d fae0 	bl	801e9c0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011400:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011402:	2007      	movs	r0, #7
 8011404:	f002 fdfc 	bl	8014000 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011408:	2300      	movs	r3, #0
 801140a:	e000      	b.n	801140e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801140c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801140e:	4618      	mov	r0, r3
 8011410:	3730      	adds	r7, #48	@ 0x30
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	08012171 	.word	0x08012171
 801141c:	080213b8 	.word	0x080213b8
 8011420:	080213ec 	.word	0x080213ec
 8011424:	08021410 	.word	0x08021410
 8011428:	08021438 	.word	0x08021438
 801142c:	08021450 	.word	0x08021450
 8011430:	08021474 	.word	0x08021474

08011434 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b08c      	sub	sp, #48	@ 0x30
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d101      	bne.n	8011446 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011442:	2300      	movs	r3, #0
 8011444:	e014      	b.n	8011470 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801144a:	2329      	movs	r3, #41	@ 0x29
 801144c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801144e:	f107 030c 	add.w	r3, r7, #12
 8011452:	4619      	mov	r1, r3
 8011454:	4808      	ldr	r0, [pc, #32]	@ (8011478 <netconn_prepare_delete+0x44>)
 8011456:	f7ff ff55 	bl	8011304 <netconn_apimsg>
 801145a:	4603      	mov	r3, r0
 801145c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011460:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011464:	2b00      	cmp	r3, #0
 8011466:	d002      	beq.n	801146e <netconn_prepare_delete+0x3a>
    return err;
 8011468:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801146c:	e000      	b.n	8011470 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	3730      	adds	r7, #48	@ 0x30
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}
 8011478:	080126dd 	.word	0x080126dd

0801147c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d101      	bne.n	801148e <netconn_delete+0x12>
    return ERR_OK;
 801148a:	2300      	movs	r3, #0
 801148c:	e00d      	b.n	80114aa <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7ff ffd0 	bl	8011434 <netconn_prepare_delete>
 8011494:	4603      	mov	r3, r0
 8011496:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8011498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d102      	bne.n	80114a6 <netconn_delete+0x2a>
    netconn_free(conn);
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f000 fee9 	bl	8012278 <netconn_free>
  }
  return err;
 80114a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
	...

080114b4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b08e      	sub	sp, #56	@ 0x38
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	4613      	mov	r3, r2
 80114c0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d109      	bne.n	80114dc <netconn_bind+0x28>
 80114c8:	4b11      	ldr	r3, [pc, #68]	@ (8011510 <netconn_bind+0x5c>)
 80114ca:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80114ce:	4911      	ldr	r1, [pc, #68]	@ (8011514 <netconn_bind+0x60>)
 80114d0:	4811      	ldr	r0, [pc, #68]	@ (8011518 <netconn_bind+0x64>)
 80114d2:	f00e fee9 	bl	80202a8 <iprintf>
 80114d6:	f06f 030f 	mvn.w	r3, #15
 80114da:	e015      	b.n	8011508 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d101      	bne.n	80114e6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80114e2:	4b0e      	ldr	r3, [pc, #56]	@ (801151c <netconn_bind+0x68>)
 80114e4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80114ee:	88fb      	ldrh	r3, [r7, #6]
 80114f0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80114f2:	f107 0314 	add.w	r3, r7, #20
 80114f6:	4619      	mov	r1, r3
 80114f8:	4809      	ldr	r0, [pc, #36]	@ (8011520 <netconn_bind+0x6c>)
 80114fa:	f7ff ff03 	bl	8011304 <netconn_apimsg>
 80114fe:	4603      	mov	r3, r0
 8011500:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011504:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8011508:	4618      	mov	r0, r3
 801150a:	3738      	adds	r7, #56	@ 0x38
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	080213b8 	.word	0x080213b8
 8011514:	080214f0 	.word	0x080214f0
 8011518:	08021410 	.word	0x08021410
 801151c:	08025000 	.word	0x08025000
 8011520:	080128a5 	.word	0x080128a5

08011524 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b088      	sub	sp, #32
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	4613      	mov	r3, r2
 8011530:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8011532:	2300      	movs	r3, #0
 8011534:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d109      	bne.n	8011550 <netconn_recv_data+0x2c>
 801153c:	4b58      	ldr	r3, [pc, #352]	@ (80116a0 <netconn_recv_data+0x17c>)
 801153e:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8011542:	4958      	ldr	r1, [pc, #352]	@ (80116a4 <netconn_recv_data+0x180>)
 8011544:	4858      	ldr	r0, [pc, #352]	@ (80116a8 <netconn_recv_data+0x184>)
 8011546:	f00e feaf 	bl	80202a8 <iprintf>
 801154a:	f06f 030f 	mvn.w	r3, #15
 801154e:	e0a2      	b.n	8011696 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	2200      	movs	r2, #0
 8011554:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d109      	bne.n	8011570 <netconn_recv_data+0x4c>
 801155c:	4b50      	ldr	r3, [pc, #320]	@ (80116a0 <netconn_recv_data+0x17c>)
 801155e:	f240 224a 	movw	r2, #586	@ 0x24a
 8011562:	4952      	ldr	r1, [pc, #328]	@ (80116ac <netconn_recv_data+0x188>)
 8011564:	4850      	ldr	r0, [pc, #320]	@ (80116a8 <netconn_recv_data+0x184>)
 8011566:	f00e fe9f 	bl	80202a8 <iprintf>
 801156a:	f06f 030f 	mvn.w	r3, #15
 801156e:	e092      	b.n	8011696 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	3310      	adds	r3, #16
 8011574:	4618      	mov	r0, r3
 8011576:	f00d fab7 	bl	801eae8 <sys_mbox_valid>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d10e      	bne.n	801159e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011580:	68f8      	ldr	r0, [r7, #12]
 8011582:	f000 fa45 	bl	8011a10 <netconn_err>
 8011586:	4603      	mov	r3, r0
 8011588:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801158a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d002      	beq.n	8011598 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8011592:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011596:	e07e      	b.n	8011696 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011598:	f06f 030a 	mvn.w	r3, #10
 801159c:	e07b      	b.n	8011696 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	7f1b      	ldrb	r3, [r3, #28]
 80115a2:	f003 0302 	and.w	r3, r3, #2
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10f      	bne.n	80115ca <netconn_recv_data+0xa6>
 80115aa:	79fb      	ldrb	r3, [r7, #7]
 80115ac:	f003 0304 	and.w	r3, r3, #4
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d10a      	bne.n	80115ca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	7f1b      	ldrb	r3, [r3, #28]
 80115b8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d104      	bne.n	80115ca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d023      	beq.n	8011612 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	3310      	adds	r3, #16
 80115ce:	f107 0218 	add.w	r2, r7, #24
 80115d2:	4611      	mov	r1, r2
 80115d4:	4618      	mov	r0, r3
 80115d6:	f00d fa70 	bl	801eaba <sys_arch_mbox_tryfetch>
 80115da:	4603      	mov	r3, r0
 80115dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115e0:	d11f      	bne.n	8011622 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f000 fa14 	bl	8011a10 <netconn_err>
 80115e8:	4603      	mov	r3, r0
 80115ea:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80115ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d002      	beq.n	80115fa <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80115f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80115f8:	e04d      	b.n	8011696 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	7f1b      	ldrb	r3, [r3, #28]
 80115fe:	f003 0301 	and.w	r3, r3, #1
 8011602:	2b00      	cmp	r3, #0
 8011604:	d002      	beq.n	801160c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011606:	f06f 030a 	mvn.w	r3, #10
 801160a:	e044      	b.n	8011696 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 801160c:	f06f 0306 	mvn.w	r3, #6
 8011610:	e041      	b.n	8011696 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	3310      	adds	r3, #16
 8011616:	f107 0118 	add.w	r1, r7, #24
 801161a:	2200      	movs	r2, #0
 801161c:	4618      	mov	r0, r3
 801161e:	f00d fa1b 	bl	801ea58 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801162a:	2b10      	cmp	r3, #16
 801162c:	d117      	bne.n	801165e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801162e:	69bb      	ldr	r3, [r7, #24]
 8011630:	f107 0217 	add.w	r2, r7, #23
 8011634:	4611      	mov	r1, r2
 8011636:	4618      	mov	r0, r3
 8011638:	f000 fa3c 	bl	8011ab4 <lwip_netconn_is_err_msg>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d009      	beq.n	8011656 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011646:	f113 0f0f 	cmn.w	r3, #15
 801164a:	d101      	bne.n	8011650 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801164c:	2300      	movs	r3, #0
 801164e:	e022      	b.n	8011696 <netconn_recv_data+0x172>
      }
      return err;
 8011650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011654:	e01f      	b.n	8011696 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	891b      	ldrh	r3, [r3, #8]
 801165a:	83fb      	strh	r3, [r7, #30]
 801165c:	e00d      	b.n	801167a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801165e:	69bb      	ldr	r3, [r7, #24]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d106      	bne.n	8011672 <netconn_recv_data+0x14e>
 8011664:	4b0e      	ldr	r3, [pc, #56]	@ (80116a0 <netconn_recv_data+0x17c>)
 8011666:	f240 2291 	movw	r2, #657	@ 0x291
 801166a:	4911      	ldr	r1, [pc, #68]	@ (80116b0 <netconn_recv_data+0x18c>)
 801166c:	480e      	ldr	r0, [pc, #56]	@ (80116a8 <netconn_recv_data+0x184>)
 801166e:	f00e fe1b 	bl	80202a8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011672:	69bb      	ldr	r3, [r7, #24]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	891b      	ldrh	r3, [r3, #8]
 8011678:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801167e:	2b00      	cmp	r3, #0
 8011680:	d005      	beq.n	801168e <netconn_recv_data+0x16a>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011686:	8bfa      	ldrh	r2, [r7, #30]
 8011688:	2101      	movs	r1, #1
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801168e:	69ba      	ldr	r2, [r7, #24]
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011694:	2300      	movs	r3, #0
}
 8011696:	4618      	mov	r0, r3
 8011698:	3720      	adds	r7, #32
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	080213b8 	.word	0x080213b8
 80116a4:	080215d0 	.word	0x080215d0
 80116a8:	08021410 	.word	0x08021410
 80116ac:	080215f0 	.word	0x080215f0
 80116b0:	0802160c 	.word	0x0802160c

080116b4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d005      	beq.n	80116d2 <netconn_tcp_recvd_msg+0x1e>
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80116ce:	2b10      	cmp	r3, #16
 80116d0:	d009      	beq.n	80116e6 <netconn_tcp_recvd_msg+0x32>
 80116d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011704 <netconn_tcp_recvd_msg+0x50>)
 80116d4:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80116d8:	490b      	ldr	r1, [pc, #44]	@ (8011708 <netconn_tcp_recvd_msg+0x54>)
 80116da:	480c      	ldr	r0, [pc, #48]	@ (801170c <netconn_tcp_recvd_msg+0x58>)
 80116dc:	f00e fde4 	bl	80202a8 <iprintf>
 80116e0:	f06f 030f 	mvn.w	r3, #15
 80116e4:	e00a      	b.n	80116fc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80116f2:	6879      	ldr	r1, [r7, #4]
 80116f4:	4806      	ldr	r0, [pc, #24]	@ (8011710 <netconn_tcp_recvd_msg+0x5c>)
 80116f6:	f7ff fe05 	bl	8011304 <netconn_apimsg>
 80116fa:	4603      	mov	r3, r0
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3710      	adds	r7, #16
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	080213b8 	.word	0x080213b8
 8011708:	08021618 	.word	0x08021618
 801170c:	08021410 	.word	0x08021410
 8011710:	080129b3 	.word	0x080129b3

08011714 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b090      	sub	sp, #64	@ 0x40
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	4613      	mov	r3, r2
 8011720:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	3310      	adds	r3, #16
 8011726:	4618      	mov	r0, r3
 8011728:	f00d f9de 	bl	801eae8 <sys_mbox_valid>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d102      	bne.n	8011738 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011732:	f06f 030a 	mvn.w	r3, #10
 8011736:	e06d      	b.n	8011814 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	7f1b      	ldrb	r3, [r3, #28]
 801173c:	b25b      	sxtb	r3, r3
 801173e:	2b00      	cmp	r3, #0
 8011740:	da07      	bge.n	8011752 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	7f1b      	ldrb	r3, [r3, #28]
 8011746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801174a:	b2da      	uxtb	r2, r3
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011750:	e039      	b.n	80117c6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011752:	79fb      	ldrb	r3, [r7, #7]
 8011754:	461a      	mov	r2, r3
 8011756:	68b9      	ldr	r1, [r7, #8]
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	f7ff fee3 	bl	8011524 <netconn_recv_data>
 801175e:	4603      	mov	r3, r0
 8011760:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8011764:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011768:	2b00      	cmp	r3, #0
 801176a:	d002      	beq.n	8011772 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801176c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011770:	e050      	b.n	8011814 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011778:	79fb      	ldrb	r3, [r7, #7]
 801177a:	f003 0308 	and.w	r3, r3, #8
 801177e:	2b00      	cmp	r3, #0
 8011780:	d10e      	bne.n	80117a0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <netconn_recv_data_tcp+0x7a>
 8011788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178a:	891b      	ldrh	r3, [r3, #8]
 801178c:	e000      	b.n	8011790 <netconn_recv_data_tcp+0x7c>
 801178e:	2301      	movs	r3, #1
 8011790:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011792:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011794:	f107 0214 	add.w	r2, r7, #20
 8011798:	4619      	mov	r1, r3
 801179a:	68f8      	ldr	r0, [r7, #12]
 801179c:	f7ff ff8a 	bl	80116b4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80117a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d134      	bne.n	8011810 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80117a6:	79fb      	ldrb	r3, [r7, #7]
 80117a8:	f003 0310 	and.w	r3, r3, #16
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d009      	beq.n	80117c4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	7f1b      	ldrb	r3, [r3, #28]
 80117b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80117be:	f06f 0306 	mvn.w	r3, #6
 80117c2:	e027      	b.n	8011814 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80117c4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d005      	beq.n	80117da <netconn_recv_data_tcp+0xc6>
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117d2:	2200      	movs	r2, #0
 80117d4:	2101      	movs	r1, #1
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d10f      	bne.n	8011802 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80117e2:	68f8      	ldr	r0, [r7, #12]
 80117e4:	f000 f914 	bl	8011a10 <netconn_err>
 80117e8:	4603      	mov	r3, r0
 80117ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80117ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d002      	beq.n	80117fc <netconn_recv_data_tcp+0xe8>
          return err;
 80117f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80117fa:	e00b      	b.n	8011814 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80117fc:	f06f 030d 	mvn.w	r3, #13
 8011800:	e008      	b.n	8011814 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011802:	2101      	movs	r1, #1
 8011804:	68f8      	ldr	r0, [r7, #12]
 8011806:	f000 f8d3 	bl	80119b0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801180a:	f06f 030e 	mvn.w	r3, #14
 801180e:	e001      	b.n	8011814 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011810:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011814:	4618      	mov	r0, r3
 8011816:	3740      	adds	r7, #64	@ 0x40
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b086      	sub	sp, #24
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011826:	2300      	movs	r3, #0
 8011828:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d109      	bne.n	8011844 <netconn_recv+0x28>
 8011830:	4b32      	ldr	r3, [pc, #200]	@ (80118fc <netconn_recv+0xe0>)
 8011832:	f240 3263 	movw	r2, #867	@ 0x363
 8011836:	4932      	ldr	r1, [pc, #200]	@ (8011900 <netconn_recv+0xe4>)
 8011838:	4832      	ldr	r0, [pc, #200]	@ (8011904 <netconn_recv+0xe8>)
 801183a:	f00e fd35 	bl	80202a8 <iprintf>
 801183e:	f06f 030f 	mvn.w	r3, #15
 8011842:	e056      	b.n	80118f2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	2200      	movs	r2, #0
 8011848:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d109      	bne.n	8011864 <netconn_recv+0x48>
 8011850:	4b2a      	ldr	r3, [pc, #168]	@ (80118fc <netconn_recv+0xe0>)
 8011852:	f240 3265 	movw	r2, #869	@ 0x365
 8011856:	492c      	ldr	r1, [pc, #176]	@ (8011908 <netconn_recv+0xec>)
 8011858:	482a      	ldr	r0, [pc, #168]	@ (8011904 <netconn_recv+0xe8>)
 801185a:	f00e fd25 	bl	80202a8 <iprintf>
 801185e:	f06f 030f 	mvn.w	r3, #15
 8011862:	e046      	b.n	80118f2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801186c:	2b10      	cmp	r3, #16
 801186e:	d13a      	bne.n	80118e6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011870:	2300      	movs	r3, #0
 8011872:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011874:	2006      	movs	r0, #6
 8011876:	f002 fb47 	bl	8013f08 <memp_malloc>
 801187a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d102      	bne.n	8011888 <netconn_recv+0x6c>
      return ERR_MEM;
 8011882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011886:	e034      	b.n	80118f2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011888:	f107 030c 	add.w	r3, r7, #12
 801188c:	2200      	movs	r2, #0
 801188e:	4619      	mov	r1, r3
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff ff3f 	bl	8011714 <netconn_recv_data_tcp>
 8011896:	4603      	mov	r3, r0
 8011898:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801189a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d006      	beq.n	80118b0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80118a2:	6979      	ldr	r1, [r7, #20]
 80118a4:	2006      	movs	r0, #6
 80118a6:	f002 fbab 	bl	8014000 <memp_free>
      return err;
 80118aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118ae:	e020      	b.n	80118f2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d106      	bne.n	80118c4 <netconn_recv+0xa8>
 80118b6:	4b11      	ldr	r3, [pc, #68]	@ (80118fc <netconn_recv+0xe0>)
 80118b8:	f240 3279 	movw	r2, #889	@ 0x379
 80118bc:	4913      	ldr	r1, [pc, #76]	@ (801190c <netconn_recv+0xf0>)
 80118be:	4811      	ldr	r0, [pc, #68]	@ (8011904 <netconn_recv+0xe8>)
 80118c0:	f00e fcf2 	bl	80202a8 <iprintf>

    buf->p = p;
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	2200      	movs	r2, #0
 80118d4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2200      	movs	r2, #0
 80118da:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	697a      	ldr	r2, [r7, #20]
 80118e0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80118e2:	2300      	movs	r3, #0
 80118e4:	e005      	b.n	80118f2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80118e6:	2200      	movs	r2, #0
 80118e8:	6839      	ldr	r1, [r7, #0]
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7ff fe1a 	bl	8011524 <netconn_recv_data>
 80118f0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3718      	adds	r7, #24
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	080213b8 	.word	0x080213b8
 8011900:	080215d0 	.word	0x080215d0
 8011904:	08021410 	.word	0x08021410
 8011908:	080215f0 	.word	0x080215f0
 801190c:	08021668 	.word	0x08021668

08011910 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	607a      	str	r2, [r7, #4]
 801191c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d011      	beq.n	8011948 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d002      	beq.n	8011930 <netconn_sendto+0x20>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	e000      	b.n	8011932 <netconn_sendto+0x22>
 8011930:	2300      	movs	r3, #0
 8011932:	68ba      	ldr	r2, [r7, #8]
 8011934:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	887a      	ldrh	r2, [r7, #2]
 801193a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 801193c:	68b9      	ldr	r1, [r7, #8]
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f000 f808 	bl	8011954 <netconn_send>
 8011944:	4603      	mov	r3, r0
 8011946:	e001      	b.n	801194c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8011948:	f06f 0305 	mvn.w	r3, #5
}
 801194c:	4618      	mov	r0, r3
 801194e:	3710      	adds	r7, #16
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b08c      	sub	sp, #48	@ 0x30
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d109      	bne.n	8011978 <netconn_send+0x24>
 8011964:	4b0e      	ldr	r3, [pc, #56]	@ (80119a0 <netconn_send+0x4c>)
 8011966:	f240 32b2 	movw	r2, #946	@ 0x3b2
 801196a:	490e      	ldr	r1, [pc, #56]	@ (80119a4 <netconn_send+0x50>)
 801196c:	480e      	ldr	r0, [pc, #56]	@ (80119a8 <netconn_send+0x54>)
 801196e:	f00e fc9b 	bl	80202a8 <iprintf>
 8011972:	f06f 030f 	mvn.w	r3, #15
 8011976:	e00e      	b.n	8011996 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011980:	f107 030c 	add.w	r3, r7, #12
 8011984:	4619      	mov	r1, r3
 8011986:	4809      	ldr	r0, [pc, #36]	@ (80119ac <netconn_send+0x58>)
 8011988:	f7ff fcbc 	bl	8011304 <netconn_apimsg>
 801198c:	4603      	mov	r3, r0
 801198e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011992:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011996:	4618      	mov	r0, r3
 8011998:	3730      	adds	r7, #48	@ 0x30
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	080213b8 	.word	0x080213b8
 80119a4:	08021674 	.word	0x08021674
 80119a8:	08021410 	.word	0x08021410
 80119ac:	08012919 	.word	0x08012919

080119b0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b08c      	sub	sp, #48	@ 0x30
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	460b      	mov	r3, r1
 80119ba:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d109      	bne.n	80119d6 <netconn_close_shutdown+0x26>
 80119c2:	4b0f      	ldr	r3, [pc, #60]	@ (8011a00 <netconn_close_shutdown+0x50>)
 80119c4:	f240 4247 	movw	r2, #1095	@ 0x447
 80119c8:	490e      	ldr	r1, [pc, #56]	@ (8011a04 <netconn_close_shutdown+0x54>)
 80119ca:	480f      	ldr	r0, [pc, #60]	@ (8011a08 <netconn_close_shutdown+0x58>)
 80119cc:	f00e fc6c 	bl	80202a8 <iprintf>
 80119d0:	f06f 030f 	mvn.w	r3, #15
 80119d4:	e010      	b.n	80119f8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80119da:	78fb      	ldrb	r3, [r7, #3]
 80119dc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80119de:	2329      	movs	r3, #41	@ 0x29
 80119e0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80119e2:	f107 030c 	add.w	r3, r7, #12
 80119e6:	4619      	mov	r1, r3
 80119e8:	4808      	ldr	r0, [pc, #32]	@ (8011a0c <netconn_close_shutdown+0x5c>)
 80119ea:	f7ff fc8b 	bl	8011304 <netconn_apimsg>
 80119ee:	4603      	mov	r3, r0
 80119f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80119f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3730      	adds	r7, #48	@ 0x30
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	080213b8 	.word	0x080213b8
 8011a04:	080216f4 	.word	0x080216f4
 8011a08:	08021410 	.word	0x08021410
 8011a0c:	08012db5 	.word	0x08012db5

08011a10 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d101      	bne.n	8011a22 <netconn_err+0x12>
    return ERR_OK;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	e00d      	b.n	8011a3e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011a22:	f00d f9b7 	bl	801ed94 <sys_arch_protect>
 8011a26:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	7a1b      	ldrb	r3, [r3, #8]
 8011a2c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2200      	movs	r2, #0
 8011a32:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	f00d f9bb 	bl	801edb0 <sys_arch_unprotect>
  return err;
 8011a3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3710      	adds	r7, #16
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
	...

08011a48 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	4603      	mov	r3, r0
 8011a50:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a56:	f113 0f0d 	cmn.w	r3, #13
 8011a5a:	d009      	beq.n	8011a70 <lwip_netconn_err_to_msg+0x28>
 8011a5c:	f113 0f0d 	cmn.w	r3, #13
 8011a60:	dc0c      	bgt.n	8011a7c <lwip_netconn_err_to_msg+0x34>
 8011a62:	f113 0f0f 	cmn.w	r3, #15
 8011a66:	d007      	beq.n	8011a78 <lwip_netconn_err_to_msg+0x30>
 8011a68:	f113 0f0e 	cmn.w	r3, #14
 8011a6c:	d002      	beq.n	8011a74 <lwip_netconn_err_to_msg+0x2c>
 8011a6e:	e005      	b.n	8011a7c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011a70:	4b0a      	ldr	r3, [pc, #40]	@ (8011a9c <lwip_netconn_err_to_msg+0x54>)
 8011a72:	e00e      	b.n	8011a92 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011a74:	4b0a      	ldr	r3, [pc, #40]	@ (8011aa0 <lwip_netconn_err_to_msg+0x58>)
 8011a76:	e00c      	b.n	8011a92 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011a78:	4b0a      	ldr	r3, [pc, #40]	@ (8011aa4 <lwip_netconn_err_to_msg+0x5c>)
 8011a7a:	e00a      	b.n	8011a92 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8011a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d005      	beq.n	8011a90 <lwip_netconn_err_to_msg+0x48>
 8011a84:	4b08      	ldr	r3, [pc, #32]	@ (8011aa8 <lwip_netconn_err_to_msg+0x60>)
 8011a86:	227d      	movs	r2, #125	@ 0x7d
 8011a88:	4908      	ldr	r1, [pc, #32]	@ (8011aac <lwip_netconn_err_to_msg+0x64>)
 8011a8a:	4809      	ldr	r0, [pc, #36]	@ (8011ab0 <lwip_netconn_err_to_msg+0x68>)
 8011a8c:	f00e fc0c 	bl	80202a8 <iprintf>
      return NULL;
 8011a90:	2300      	movs	r3, #0
  }
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	08024eb8 	.word	0x08024eb8
 8011aa0:	08024eb9 	.word	0x08024eb9
 8011aa4:	08024eba 	.word	0x08024eba
 8011aa8:	08021710 	.word	0x08021710
 8011aac:	08021744 	.word	0x08021744
 8011ab0:	08021754 	.word	0x08021754

08011ab4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d105      	bne.n	8011ad0 <lwip_netconn_is_err_msg+0x1c>
 8011ac4:	4b12      	ldr	r3, [pc, #72]	@ (8011b10 <lwip_netconn_is_err_msg+0x5c>)
 8011ac6:	2285      	movs	r2, #133	@ 0x85
 8011ac8:	4912      	ldr	r1, [pc, #72]	@ (8011b14 <lwip_netconn_is_err_msg+0x60>)
 8011aca:	4813      	ldr	r0, [pc, #76]	@ (8011b18 <lwip_netconn_is_err_msg+0x64>)
 8011acc:	f00e fbec 	bl	80202a8 <iprintf>

  if (msg == &netconn_aborted) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	4a12      	ldr	r2, [pc, #72]	@ (8011b1c <lwip_netconn_is_err_msg+0x68>)
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d104      	bne.n	8011ae2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	22f3      	movs	r2, #243	@ 0xf3
 8011adc:	701a      	strb	r2, [r3, #0]
    return 1;
 8011ade:	2301      	movs	r3, #1
 8011ae0:	e012      	b.n	8011b08 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8011b20 <lwip_netconn_is_err_msg+0x6c>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d104      	bne.n	8011af4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	22f2      	movs	r2, #242	@ 0xf2
 8011aee:	701a      	strb	r2, [r3, #0]
    return 1;
 8011af0:	2301      	movs	r3, #1
 8011af2:	e009      	b.n	8011b08 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	4a0b      	ldr	r2, [pc, #44]	@ (8011b24 <lwip_netconn_is_err_msg+0x70>)
 8011af8:	4293      	cmp	r3, r2
 8011afa:	d104      	bne.n	8011b06 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	22f1      	movs	r2, #241	@ 0xf1
 8011b00:	701a      	strb	r2, [r3, #0]
    return 1;
 8011b02:	2301      	movs	r3, #1
 8011b04:	e000      	b.n	8011b08 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011b06:	2300      	movs	r3, #0
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3708      	adds	r7, #8
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	08021710 	.word	0x08021710
 8011b14:	0802177c 	.word	0x0802177c
 8011b18:	08021754 	.word	0x08021754
 8011b1c:	08024eb8 	.word	0x08024eb8
 8011b20:	08024eb9 	.word	0x08024eb9
 8011b24:	08024eba 	.word	0x08024eba

08011b28 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b088      	sub	sp, #32
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	607a      	str	r2, [r7, #4]
 8011b34:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d105      	bne.n	8011b48 <recv_udp+0x20>
 8011b3c:	4b34      	ldr	r3, [pc, #208]	@ (8011c10 <recv_udp+0xe8>)
 8011b3e:	22e5      	movs	r2, #229	@ 0xe5
 8011b40:	4934      	ldr	r1, [pc, #208]	@ (8011c14 <recv_udp+0xec>)
 8011b42:	4835      	ldr	r0, [pc, #212]	@ (8011c18 <recv_udp+0xf0>)
 8011b44:	f00e fbb0 	bl	80202a8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d105      	bne.n	8011b5a <recv_udp+0x32>
 8011b4e:	4b30      	ldr	r3, [pc, #192]	@ (8011c10 <recv_udp+0xe8>)
 8011b50:	22e6      	movs	r2, #230	@ 0xe6
 8011b52:	4932      	ldr	r1, [pc, #200]	@ (8011c1c <recv_udp+0xf4>)
 8011b54:	4830      	ldr	r0, [pc, #192]	@ (8011c18 <recv_udp+0xf0>)
 8011b56:	f00e fba7 	bl	80202a8 <iprintf>
  conn = (struct netconn *)arg;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d103      	bne.n	8011b6c <recv_udp+0x44>
    pbuf_free(p);
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f003 f8ef 	bl	8014d48 <pbuf_free>
    return;
 8011b6a:	e04d      	b.n	8011c08 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	685b      	ldr	r3, [r3, #4]
 8011b70:	68ba      	ldr	r2, [r7, #8]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d005      	beq.n	8011b82 <recv_udp+0x5a>
 8011b76:	4b26      	ldr	r3, [pc, #152]	@ (8011c10 <recv_udp+0xe8>)
 8011b78:	22ee      	movs	r2, #238	@ 0xee
 8011b7a:	4929      	ldr	r1, [pc, #164]	@ (8011c20 <recv_udp+0xf8>)
 8011b7c:	4826      	ldr	r0, [pc, #152]	@ (8011c18 <recv_udp+0xf0>)
 8011b7e:	f00e fb93 	bl	80202a8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011b82:	69fb      	ldr	r3, [r7, #28]
 8011b84:	3310      	adds	r3, #16
 8011b86:	4618      	mov	r0, r3
 8011b88:	f00c ffae 	bl	801eae8 <sys_mbox_valid>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d103      	bne.n	8011b9a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f003 f8d8 	bl	8014d48 <pbuf_free>
    return;
 8011b98:	e036      	b.n	8011c08 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011b9a:	2006      	movs	r0, #6
 8011b9c:	f002 f9b4 	bl	8013f08 <memp_malloc>
 8011ba0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d103      	bne.n	8011bb0 <recv_udp+0x88>
    pbuf_free(p);
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f003 f8cd 	bl	8014d48 <pbuf_free>
    return;
 8011bae:	e02b      	b.n	8011c08 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011bb0:	69bb      	ldr	r3, [r7, #24]
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	687a      	ldr	r2, [r7, #4]
 8011bba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d002      	beq.n	8011bc8 <recv_udp+0xa0>
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	e000      	b.n	8011bca <recv_udp+0xa2>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	69ba      	ldr	r2, [r7, #24]
 8011bcc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011bce:	69bb      	ldr	r3, [r7, #24]
 8011bd0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011bd2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	891b      	ldrh	r3, [r3, #8]
 8011bd8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8011bda:	69fb      	ldr	r3, [r7, #28]
 8011bdc:	3310      	adds	r3, #16
 8011bde:	69b9      	ldr	r1, [r7, #24]
 8011be0:	4618      	mov	r0, r3
 8011be2:	f00c ff15 	bl	801ea10 <sys_mbox_trypost>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d003      	beq.n	8011bf4 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011bec:	69b8      	ldr	r0, [r7, #24]
 8011bee:	f001 f981 	bl	8012ef4 <netbuf_delete>
    return;
 8011bf2:	e009      	b.n	8011c08 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011bf4:	69fb      	ldr	r3, [r7, #28]
 8011bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d005      	beq.n	8011c08 <recv_udp+0xe0>
 8011bfc:	69fb      	ldr	r3, [r7, #28]
 8011bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c00:	8afa      	ldrh	r2, [r7, #22]
 8011c02:	2100      	movs	r1, #0
 8011c04:	69f8      	ldr	r0, [r7, #28]
 8011c06:	4798      	blx	r3
  }
}
 8011c08:	3720      	adds	r7, #32
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	08021710 	.word	0x08021710
 8011c14:	08021788 	.word	0x08021788
 8011c18:	08021754 	.word	0x08021754
 8011c1c:	080217ac 	.word	0x080217ac
 8011c20:	080217cc 	.word	0x080217cc

08011c24 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b088      	sub	sp, #32
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
 8011c30:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d106      	bne.n	8011c46 <recv_tcp+0x22>
 8011c38:	4b36      	ldr	r3, [pc, #216]	@ (8011d14 <recv_tcp+0xf0>)
 8011c3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011c3e:	4936      	ldr	r1, [pc, #216]	@ (8011d18 <recv_tcp+0xf4>)
 8011c40:	4836      	ldr	r0, [pc, #216]	@ (8011d1c <recv_tcp+0xf8>)
 8011c42:	f00e fb31 	bl	80202a8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d106      	bne.n	8011c5a <recv_tcp+0x36>
 8011c4c:	4b31      	ldr	r3, [pc, #196]	@ (8011d14 <recv_tcp+0xf0>)
 8011c4e:	f240 122d 	movw	r2, #301	@ 0x12d
 8011c52:	4933      	ldr	r1, [pc, #204]	@ (8011d20 <recv_tcp+0xfc>)
 8011c54:	4831      	ldr	r0, [pc, #196]	@ (8011d1c <recv_tcp+0xf8>)
 8011c56:	f00e fb27 	bl	80202a8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d006      	beq.n	8011c70 <recv_tcp+0x4c>
 8011c62:	4b2c      	ldr	r3, [pc, #176]	@ (8011d14 <recv_tcp+0xf0>)
 8011c64:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011c68:	492e      	ldr	r1, [pc, #184]	@ (8011d24 <recv_tcp+0x100>)
 8011c6a:	482c      	ldr	r0, [pc, #176]	@ (8011d1c <recv_tcp+0xf8>)
 8011c6c:	f00e fb1c 	bl	80202a8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d102      	bne.n	8011c80 <recv_tcp+0x5c>
    return ERR_VAL;
 8011c7a:	f06f 0305 	mvn.w	r3, #5
 8011c7e:	e045      	b.n	8011d0c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	68ba      	ldr	r2, [r7, #8]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d006      	beq.n	8011c98 <recv_tcp+0x74>
 8011c8a:	4b22      	ldr	r3, [pc, #136]	@ (8011d14 <recv_tcp+0xf0>)
 8011c8c:	f240 1235 	movw	r2, #309	@ 0x135
 8011c90:	4925      	ldr	r1, [pc, #148]	@ (8011d28 <recv_tcp+0x104>)
 8011c92:	4822      	ldr	r0, [pc, #136]	@ (8011d1c <recv_tcp+0xf8>)
 8011c94:	f00e fb08 	bl	80202a8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	3310      	adds	r3, #16
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f00c ff23 	bl	801eae8 <sys_mbox_valid>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d10d      	bne.n	8011cc4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d008      	beq.n	8011cc0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	891b      	ldrh	r3, [r3, #8]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	68b8      	ldr	r0, [r7, #8]
 8011cb6:	f003 ff4d 	bl	8015b54 <tcp_recved>
      pbuf_free(p);
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f003 f844 	bl	8014d48 <pbuf_free>
    }
    return ERR_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	e023      	b.n	8011d0c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d005      	beq.n	8011cd6 <recv_tcp+0xb2>
    msg = p;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	891b      	ldrh	r3, [r3, #8]
 8011cd2:	83fb      	strh	r3, [r7, #30]
 8011cd4:	e003      	b.n	8011cde <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011cd6:	4b15      	ldr	r3, [pc, #84]	@ (8011d2c <recv_tcp+0x108>)
 8011cd8:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	3310      	adds	r3, #16
 8011ce2:	69b9      	ldr	r1, [r7, #24]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f00c fe93 	bl	801ea10 <sys_mbox_trypost>
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d002      	beq.n	8011cf6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011cf4:	e00a      	b.n	8011d0c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d005      	beq.n	8011d0a <recv_tcp+0xe6>
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d02:	8bfa      	ldrh	r2, [r7, #30]
 8011d04:	2100      	movs	r1, #0
 8011d06:	6978      	ldr	r0, [r7, #20]
 8011d08:	4798      	blx	r3
  }

  return ERR_OK;
 8011d0a:	2300      	movs	r3, #0
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3720      	adds	r7, #32
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}
 8011d14:	08021710 	.word	0x08021710
 8011d18:	080217ec 	.word	0x080217ec
 8011d1c:	08021754 	.word	0x08021754
 8011d20:	08021810 	.word	0x08021810
 8011d24:	08021830 	.word	0x08021830
 8011d28:	08021848 	.word	0x08021848
 8011d2c:	08024eba 	.word	0x08024eba

08011d30 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b084      	sub	sp, #16
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d106      	bne.n	8011d52 <poll_tcp+0x22>
 8011d44:	4b29      	ldr	r3, [pc, #164]	@ (8011dec <poll_tcp+0xbc>)
 8011d46:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011d4a:	4929      	ldr	r1, [pc, #164]	@ (8011df0 <poll_tcp+0xc0>)
 8011d4c:	4829      	ldr	r0, [pc, #164]	@ (8011df4 <poll_tcp+0xc4>)
 8011d4e:	f00e faab 	bl	80202a8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	785b      	ldrb	r3, [r3, #1]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d104      	bne.n	8011d64 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011d5a:	2101      	movs	r1, #1
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f000 fe5d 	bl	8012a1c <lwip_netconn_do_writemore>
 8011d62:	e016      	b.n	8011d92 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	785b      	ldrb	r3, [r3, #1]
 8011d68:	2b04      	cmp	r3, #4
 8011d6a:	d112      	bne.n	8011d92 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	6a1b      	ldr	r3, [r3, #32]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00a      	beq.n	8011d8a <poll_tcp+0x5a>
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	6a1b      	ldr	r3, [r3, #32]
 8011d78:	7a5b      	ldrb	r3, [r3, #9]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d005      	beq.n	8011d8a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	6a1b      	ldr	r3, [r3, #32]
 8011d82:	7a5a      	ldrb	r2, [r3, #9]
 8011d84:	3a01      	subs	r2, #1
 8011d86:	b2d2      	uxtb	r2, r2
 8011d88:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011d8a:	2101      	movs	r1, #1
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f000 fb3b 	bl	8012408 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	7f1b      	ldrb	r3, [r3, #28]
 8011d96:	f003 0310 	and.w	r3, r3, #16
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d021      	beq.n	8011de2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d01d      	beq.n	8011de2 <poll_tcp+0xb2>
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011dae:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011db2:	d316      	bcc.n	8011de2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011dbc:	2b04      	cmp	r3, #4
 8011dbe:	d810      	bhi.n	8011de2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	7f1b      	ldrb	r3, [r3, #28]
 8011dc4:	f023 0310 	bic.w	r3, r3, #16
 8011dc8:	b2da      	uxtb	r2, r3
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d005      	beq.n	8011de2 <poll_tcp+0xb2>
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dda:	2200      	movs	r2, #0
 8011ddc:	2102      	movs	r1, #2
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3710      	adds	r7, #16
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	08021710 	.word	0x08021710
 8011df0:	08021868 	.word	0x08021868
 8011df4:	08021754 	.word	0x08021754

08011df8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b086      	sub	sp, #24
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	4613      	mov	r3, r2
 8011e04:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d106      	bne.n	8011e1e <sent_tcp+0x26>
 8011e10:	4b20      	ldr	r3, [pc, #128]	@ (8011e94 <sent_tcp+0x9c>)
 8011e12:	f240 1293 	movw	r2, #403	@ 0x193
 8011e16:	4920      	ldr	r1, [pc, #128]	@ (8011e98 <sent_tcp+0xa0>)
 8011e18:	4820      	ldr	r0, [pc, #128]	@ (8011e9c <sent_tcp+0xa4>)
 8011e1a:	f00e fa45 	bl	80202a8 <iprintf>

  if (conn) {
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d032      	beq.n	8011e8a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	785b      	ldrb	r3, [r3, #1]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d104      	bne.n	8011e36 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011e2c:	2101      	movs	r1, #1
 8011e2e:	6978      	ldr	r0, [r7, #20]
 8011e30:	f000 fdf4 	bl	8012a1c <lwip_netconn_do_writemore>
 8011e34:	e007      	b.n	8011e46 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	785b      	ldrb	r3, [r3, #1]
 8011e3a:	2b04      	cmp	r3, #4
 8011e3c:	d103      	bne.n	8011e46 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011e3e:	2101      	movs	r1, #1
 8011e40:	6978      	ldr	r0, [r7, #20]
 8011e42:	f000 fae1 	bl	8012408 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d01d      	beq.n	8011e8a <sent_tcp+0x92>
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011e56:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011e5a:	d316      	bcc.n	8011e8a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011e64:	2b04      	cmp	r3, #4
 8011e66:	d810      	bhi.n	8011e8a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	7f1b      	ldrb	r3, [r3, #28]
 8011e6c:	f023 0310 	bic.w	r3, r3, #16
 8011e70:	b2da      	uxtb	r2, r3
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d005      	beq.n	8011e8a <sent_tcp+0x92>
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e82:	88fa      	ldrh	r2, [r7, #6]
 8011e84:	2102      	movs	r1, #2
 8011e86:	6978      	ldr	r0, [r7, #20]
 8011e88:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3718      	adds	r7, #24
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	08021710 	.word	0x08021710
 8011e98:	08021868 	.word	0x08021868
 8011e9c:	08021754 	.word	0x08021754

08011ea0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b088      	sub	sp, #32
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d106      	bne.n	8011ec4 <err_tcp+0x24>
 8011eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8012034 <err_tcp+0x194>)
 8011eb8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011ebc:	495e      	ldr	r1, [pc, #376]	@ (8012038 <err_tcp+0x198>)
 8011ebe:	485f      	ldr	r0, [pc, #380]	@ (801203c <err_tcp+0x19c>)
 8011ec0:	f00e f9f2 	bl	80202a8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011ec4:	f00c ff66 	bl	801ed94 <sys_arch_protect>
 8011ec8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	78fa      	ldrb	r2, [r7, #3]
 8011ed4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011ed6:	69fb      	ldr	r3, [r7, #28]
 8011ed8:	7f1b      	ldrb	r3, [r3, #28]
 8011eda:	f043 0301 	orr.w	r3, r3, #1
 8011ede:	b2da      	uxtb	r2, r3
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011ee4:	69fb      	ldr	r3, [r7, #28]
 8011ee6:	785b      	ldrb	r3, [r3, #1]
 8011ee8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	2200      	movs	r2, #0
 8011eee:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011ef0:	69b8      	ldr	r0, [r7, #24]
 8011ef2:	f00c ff5d 	bl	801edb0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d005      	beq.n	8011f0a <err_tcp+0x6a>
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f02:	2200      	movs	r2, #0
 8011f04:	2104      	movs	r1, #4
 8011f06:	69f8      	ldr	r0, [r7, #28]
 8011f08:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d005      	beq.n	8011f1e <err_tcp+0x7e>
 8011f12:	69fb      	ldr	r3, [r7, #28]
 8011f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f16:	2200      	movs	r2, #0
 8011f18:	2100      	movs	r1, #0
 8011f1a:	69f8      	ldr	r0, [r7, #28]
 8011f1c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d005      	beq.n	8011f32 <err_tcp+0x92>
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	2102      	movs	r1, #2
 8011f2e:	69f8      	ldr	r0, [r7, #28]
 8011f30:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7ff fd86 	bl	8011a48 <lwip_netconn_err_to_msg>
 8011f3c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011f3e:	69fb      	ldr	r3, [r7, #28]
 8011f40:	3310      	adds	r3, #16
 8011f42:	4618      	mov	r0, r3
 8011f44:	f00c fdd0 	bl	801eae8 <sys_mbox_valid>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d005      	beq.n	8011f5a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	3310      	adds	r3, #16
 8011f52:	6939      	ldr	r1, [r7, #16]
 8011f54:	4618      	mov	r0, r3
 8011f56:	f00c fd5b 	bl	801ea10 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	3314      	adds	r3, #20
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f00c fdc2 	bl	801eae8 <sys_mbox_valid>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d005      	beq.n	8011f76 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	3314      	adds	r3, #20
 8011f6e:	6939      	ldr	r1, [r7, #16]
 8011f70:	4618      	mov	r0, r3
 8011f72:	f00c fd4d 	bl	801ea10 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011f76:	7dfb      	ldrb	r3, [r7, #23]
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d005      	beq.n	8011f88 <err_tcp+0xe8>
 8011f7c:	7dfb      	ldrb	r3, [r7, #23]
 8011f7e:	2b04      	cmp	r3, #4
 8011f80:	d002      	beq.n	8011f88 <err_tcp+0xe8>
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	2b03      	cmp	r3, #3
 8011f86:	d143      	bne.n	8012010 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	7f1b      	ldrb	r3, [r3, #28]
 8011f8c:	f003 0304 	and.w	r3, r3, #4
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	bf14      	ite	ne
 8011f94:	2301      	movne	r3, #1
 8011f96:	2300      	moveq	r3, #0
 8011f98:	b2db      	uxtb	r3, r3
 8011f9a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	7f1b      	ldrb	r3, [r3, #28]
 8011fa0:	f023 0304 	bic.w	r3, r3, #4
 8011fa4:	b2da      	uxtb	r2, r3
 8011fa6:	69fb      	ldr	r3, [r7, #28]
 8011fa8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d13b      	bne.n	8012028 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	6a1b      	ldr	r3, [r3, #32]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d106      	bne.n	8011fc6 <err_tcp+0x126>
 8011fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8012034 <err_tcp+0x194>)
 8011fba:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011fbe:	4920      	ldr	r1, [pc, #128]	@ (8012040 <err_tcp+0x1a0>)
 8011fc0:	481e      	ldr	r0, [pc, #120]	@ (801203c <err_tcp+0x19c>)
 8011fc2:	f00e f971 	bl	80202a8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011fc6:	7dfb      	ldrb	r3, [r7, #23]
 8011fc8:	2b04      	cmp	r3, #4
 8011fca:	d104      	bne.n	8011fd6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	6a1b      	ldr	r3, [r3, #32]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	711a      	strb	r2, [r3, #4]
 8011fd4:	e003      	b.n	8011fde <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	6a1b      	ldr	r3, [r3, #32]
 8011fda:	78fa      	ldrb	r2, [r7, #3]
 8011fdc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	6a1b      	ldr	r3, [r3, #32]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	330c      	adds	r3, #12
 8011fe6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011fe8:	68b8      	ldr	r0, [r7, #8]
 8011fea:	f00c fe37 	bl	801ec5c <sys_sem_valid>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d106      	bne.n	8012002 <err_tcp+0x162>
 8011ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8012034 <err_tcp+0x194>)
 8011ff6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8011ffa:	4912      	ldr	r1, [pc, #72]	@ (8012044 <err_tcp+0x1a4>)
 8011ffc:	480f      	ldr	r0, [pc, #60]	@ (801203c <err_tcp+0x19c>)
 8011ffe:	f00e f953 	bl	80202a8 <iprintf>
      conn->current_msg = NULL;
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	2200      	movs	r2, #0
 8012006:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8012008:	68b8      	ldr	r0, [r7, #8]
 801200a:	f00c fe02 	bl	801ec12 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801200e:	e00b      	b.n	8012028 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8012010:	69fb      	ldr	r3, [r7, #28]
 8012012:	6a1b      	ldr	r3, [r3, #32]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d008      	beq.n	801202a <err_tcp+0x18a>
 8012018:	4b06      	ldr	r3, [pc, #24]	@ (8012034 <err_tcp+0x194>)
 801201a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 801201e:	490a      	ldr	r1, [pc, #40]	@ (8012048 <err_tcp+0x1a8>)
 8012020:	4806      	ldr	r0, [pc, #24]	@ (801203c <err_tcp+0x19c>)
 8012022:	f00e f941 	bl	80202a8 <iprintf>
  }
}
 8012026:	e000      	b.n	801202a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8012028:	bf00      	nop
}
 801202a:	bf00      	nop
 801202c:	3720      	adds	r7, #32
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	08021710 	.word	0x08021710
 8012038:	08021868 	.word	0x08021868
 801203c:	08021754 	.word	0x08021754
 8012040:	08021878 	.word	0x08021878
 8012044:	08021894 	.word	0x08021894
 8012048:	080218b0 	.word	0x080218b0

0801204c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801205a:	6879      	ldr	r1, [r7, #4]
 801205c:	68f8      	ldr	r0, [r7, #12]
 801205e:	f004 fc6b 	bl	8016938 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8012062:	490a      	ldr	r1, [pc, #40]	@ (801208c <setup_tcp+0x40>)
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f004 fc79 	bl	801695c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801206a:	4909      	ldr	r1, [pc, #36]	@ (8012090 <setup_tcp+0x44>)
 801206c:	68f8      	ldr	r0, [r7, #12]
 801206e:	f004 fc97 	bl	80169a0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8012072:	2202      	movs	r2, #2
 8012074:	4907      	ldr	r1, [pc, #28]	@ (8012094 <setup_tcp+0x48>)
 8012076:	68f8      	ldr	r0, [r7, #12]
 8012078:	f004 fcee 	bl	8016a58 <tcp_poll>
  tcp_err(pcb, err_tcp);
 801207c:	4906      	ldr	r1, [pc, #24]	@ (8012098 <setup_tcp+0x4c>)
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f004 fcb0 	bl	80169e4 <tcp_err>
}
 8012084:	bf00      	nop
 8012086:	3710      	adds	r7, #16
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	08011c25 	.word	0x08011c25
 8012090:	08011df9 	.word	0x08011df9
 8012094:	08011d31 	.word	0x08011d31
 8012098:	08011ea1 	.word	0x08011ea1

0801209c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801209c:	b590      	push	{r4, r7, lr}
 801209e:	b085      	sub	sp, #20
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80120a4:	2300      	movs	r3, #0
 80120a6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d006      	beq.n	80120c0 <pcb_new+0x24>
 80120b2:	4b2b      	ldr	r3, [pc, #172]	@ (8012160 <pcb_new+0xc4>)
 80120b4:	f240 2265 	movw	r2, #613	@ 0x265
 80120b8:	492a      	ldr	r1, [pc, #168]	@ (8012164 <pcb_new+0xc8>)
 80120ba:	482b      	ldr	r0, [pc, #172]	@ (8012168 <pcb_new+0xcc>)
 80120bc:	f00e f8f4 	bl	80202a8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80120ca:	2b10      	cmp	r3, #16
 80120cc:	d022      	beq.n	8012114 <pcb_new+0x78>
 80120ce:	2b20      	cmp	r3, #32
 80120d0:	d133      	bne.n	801213a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681c      	ldr	r4, [r3, #0]
 80120d6:	7bfb      	ldrb	r3, [r7, #15]
 80120d8:	4618      	mov	r0, r3
 80120da:	f009 fff2 	bl	801c0c2 <udp_new_ip_type>
 80120de:	4603      	mov	r3, r0
 80120e0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d02a      	beq.n	8012142 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	2b22      	cmp	r3, #34	@ 0x22
 80120f4:	d104      	bne.n	8012100 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	2201      	movs	r2, #1
 80120fe:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	6858      	ldr	r0, [r3, #4]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	461a      	mov	r2, r3
 801210c:	4917      	ldr	r1, [pc, #92]	@ (801216c <pcb_new+0xd0>)
 801210e:	f009 ff5f 	bl	801bfd0 <udp_recv>
      }
      break;
 8012112:	e016      	b.n	8012142 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681c      	ldr	r4, [r3, #0]
 8012118:	7bfb      	ldrb	r3, [r7, #15]
 801211a:	4618      	mov	r0, r3
 801211c:	f004 fbfe 	bl	801691c <tcp_new_ip_type>
 8012120:	4603      	mov	r3, r0
 8012122:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d00b      	beq.n	8012146 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	4618      	mov	r0, r3
 8012134:	f7ff ff8a 	bl	801204c <setup_tcp>
      }
      break;
 8012138:	e005      	b.n	8012146 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	22fa      	movs	r2, #250	@ 0xfa
 801213e:	711a      	strb	r2, [r3, #4]
      return;
 8012140:	e00a      	b.n	8012158 <pcb_new+0xbc>
      break;
 8012142:	bf00      	nop
 8012144:	e000      	b.n	8012148 <pcb_new+0xac>
      break;
 8012146:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d102      	bne.n	8012158 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	22ff      	movs	r2, #255	@ 0xff
 8012156:	711a      	strb	r2, [r3, #4]
  }
}
 8012158:	3714      	adds	r7, #20
 801215a:	46bd      	mov	sp, r7
 801215c:	bd90      	pop	{r4, r7, pc}
 801215e:	bf00      	nop
 8012160:	08021710 	.word	0x08021710
 8012164:	080218f4 	.word	0x080218f4
 8012168:	08021754 	.word	0x08021754
 801216c:	08011b29 	.word	0x08011b29

08012170 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b084      	sub	sp, #16
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2200      	movs	r2, #0
 8012180:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d102      	bne.n	8012192 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f7ff ff85 	bl	801209c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8012192:	bf00      	nop
 8012194:	3710      	adds	r7, #16
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
	...

0801219c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b086      	sub	sp, #24
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	4603      	mov	r3, r0
 80121a4:	6039      	str	r1, [r7, #0]
 80121a6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80121a8:	2300      	movs	r3, #0
 80121aa:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80121ac:	2007      	movs	r0, #7
 80121ae:	f001 feab 	bl	8013f08 <memp_malloc>
 80121b2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d101      	bne.n	80121be <netconn_alloc+0x22>
    return NULL;
 80121ba:	2300      	movs	r3, #0
 80121bc:	e052      	b.n	8012264 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2200      	movs	r2, #0
 80121c2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	79fa      	ldrb	r2, [r7, #7]
 80121c8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2200      	movs	r2, #0
 80121ce:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80121d0:	79fb      	ldrb	r3, [r7, #7]
 80121d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80121d6:	2b10      	cmp	r3, #16
 80121d8:	d004      	beq.n	80121e4 <netconn_alloc+0x48>
 80121da:	2b20      	cmp	r3, #32
 80121dc:	d105      	bne.n	80121ea <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80121de:	2306      	movs	r3, #6
 80121e0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80121e2:	e00a      	b.n	80121fa <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80121e4:	2306      	movs	r3, #6
 80121e6:	617b      	str	r3, [r7, #20]
      break;
 80121e8:	e007      	b.n	80121fa <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80121ea:	4b20      	ldr	r3, [pc, #128]	@ (801226c <netconn_alloc+0xd0>)
 80121ec:	f240 22e5 	movw	r2, #741	@ 0x2e5
 80121f0:	491f      	ldr	r1, [pc, #124]	@ (8012270 <netconn_alloc+0xd4>)
 80121f2:	4820      	ldr	r0, [pc, #128]	@ (8012274 <netconn_alloc+0xd8>)
 80121f4:	f00e f858 	bl	80202a8 <iprintf>
      goto free_and_return;
 80121f8:	e02f      	b.n	801225a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	3310      	adds	r3, #16
 80121fe:	6979      	ldr	r1, [r7, #20]
 8012200:	4618      	mov	r0, r3
 8012202:	f00c fbab 	bl	801e95c <sys_mbox_new>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d125      	bne.n	8012258 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	330c      	adds	r3, #12
 8012210:	2100      	movs	r1, #0
 8012212:	4618      	mov	r0, r3
 8012214:	f00c fc86 	bl	801eb24 <sys_sem_new>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d005      	beq.n	801222a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	3310      	adds	r3, #16
 8012222:	4618      	mov	r0, r3
 8012224:	f00c fbcc 	bl	801e9c0 <sys_mbox_free>
    goto free_and_return;
 8012228:	e017      	b.n	801225a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	3314      	adds	r3, #20
 801222e:	4618      	mov	r0, r3
 8012230:	f00c fc6b 	bl	801eb0a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2200      	movs	r2, #0
 8012238:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012240:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	683a      	ldr	r2, [r7, #0]
 8012246:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2200      	movs	r2, #0
 801224c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	7cfa      	ldrb	r2, [r7, #19]
 8012252:	771a      	strb	r2, [r3, #28]
  return conn;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	e005      	b.n	8012264 <netconn_alloc+0xc8>
    goto free_and_return;
 8012258:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801225a:	68f9      	ldr	r1, [r7, #12]
 801225c:	2007      	movs	r0, #7
 801225e:	f001 fecf 	bl	8014000 <memp_free>
  return NULL;
 8012262:	2300      	movs	r3, #0
}
 8012264:	4618      	mov	r0, r3
 8012266:	3718      	adds	r7, #24
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}
 801226c:	08021710 	.word	0x08021710
 8012270:	08021914 	.word	0x08021914
 8012274:	08021754 	.word	0x08021754

08012278 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d006      	beq.n	8012296 <netconn_free+0x1e>
 8012288:	4b1b      	ldr	r3, [pc, #108]	@ (80122f8 <netconn_free+0x80>)
 801228a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801228e:	491b      	ldr	r1, [pc, #108]	@ (80122fc <netconn_free+0x84>)
 8012290:	481b      	ldr	r0, [pc, #108]	@ (8012300 <netconn_free+0x88>)
 8012292:	f00e f809 	bl	80202a8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	3310      	adds	r3, #16
 801229a:	4618      	mov	r0, r3
 801229c:	f00c fc24 	bl	801eae8 <sys_mbox_valid>
 80122a0:	4603      	mov	r3, r0
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d006      	beq.n	80122b4 <netconn_free+0x3c>
 80122a6:	4b14      	ldr	r3, [pc, #80]	@ (80122f8 <netconn_free+0x80>)
 80122a8:	f240 3223 	movw	r2, #803	@ 0x323
 80122ac:	4915      	ldr	r1, [pc, #84]	@ (8012304 <netconn_free+0x8c>)
 80122ae:	4814      	ldr	r0, [pc, #80]	@ (8012300 <netconn_free+0x88>)
 80122b0:	f00d fffa 	bl	80202a8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	3314      	adds	r3, #20
 80122b8:	4618      	mov	r0, r3
 80122ba:	f00c fc15 	bl	801eae8 <sys_mbox_valid>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d006      	beq.n	80122d2 <netconn_free+0x5a>
 80122c4:	4b0c      	ldr	r3, [pc, #48]	@ (80122f8 <netconn_free+0x80>)
 80122c6:	f240 3226 	movw	r2, #806	@ 0x326
 80122ca:	490f      	ldr	r1, [pc, #60]	@ (8012308 <netconn_free+0x90>)
 80122cc:	480c      	ldr	r0, [pc, #48]	@ (8012300 <netconn_free+0x88>)
 80122ce:	f00d ffeb 	bl	80202a8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	330c      	adds	r3, #12
 80122d6:	4618      	mov	r0, r3
 80122d8:	f00c fca8 	bl	801ec2c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	330c      	adds	r3, #12
 80122e0:	4618      	mov	r0, r3
 80122e2:	f00c fccc 	bl	801ec7e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80122e6:	6879      	ldr	r1, [r7, #4]
 80122e8:	2007      	movs	r0, #7
 80122ea:	f001 fe89 	bl	8014000 <memp_free>
}
 80122ee:	bf00      	nop
 80122f0:	3708      	adds	r7, #8
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	08021710 	.word	0x08021710
 80122fc:	0802193c 	.word	0x0802193c
 8012300:	08021754 	.word	0x08021754
 8012304:	0802196c 	.word	0x0802196c
 8012308:	080219a8 	.word	0x080219a8

0801230c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b086      	sub	sp, #24
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	3310      	adds	r3, #16
 8012318:	4618      	mov	r0, r3
 801231a:	f00c fbe5 	bl	801eae8 <sys_mbox_valid>
 801231e:	4603      	mov	r3, r0
 8012320:	2b00      	cmp	r3, #0
 8012322:	d02f      	beq.n	8012384 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012324:	e018      	b.n	8012358 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801232e:	2b10      	cmp	r3, #16
 8012330:	d10e      	bne.n	8012350 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	f107 020f 	add.w	r2, r7, #15
 8012338:	4611      	mov	r1, r2
 801233a:	4618      	mov	r0, r3
 801233c:	f7ff fbba 	bl	8011ab4 <lwip_netconn_is_err_msg>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d108      	bne.n	8012358 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	4618      	mov	r0, r3
 801234a:	f002 fcfd 	bl	8014d48 <pbuf_free>
 801234e:	e003      	b.n	8012358 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	4618      	mov	r0, r3
 8012354:	f000 fdce 	bl	8012ef4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	3310      	adds	r3, #16
 801235c:	f107 0210 	add.w	r2, r7, #16
 8012360:	4611      	mov	r1, r2
 8012362:	4618      	mov	r0, r3
 8012364:	f00c fba9 	bl	801eaba <sys_arch_mbox_tryfetch>
 8012368:	4603      	mov	r3, r0
 801236a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801236e:	d1da      	bne.n	8012326 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	3310      	adds	r3, #16
 8012374:	4618      	mov	r0, r3
 8012376:	f00c fb23 	bl	801e9c0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	3310      	adds	r3, #16
 801237e:	4618      	mov	r0, r3
 8012380:	f00c fbc3 	bl	801eb0a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	3314      	adds	r3, #20
 8012388:	4618      	mov	r0, r3
 801238a:	f00c fbad 	bl	801eae8 <sys_mbox_valid>
 801238e:	4603      	mov	r3, r0
 8012390:	2b00      	cmp	r3, #0
 8012392:	d034      	beq.n	80123fe <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012394:	e01d      	b.n	80123d2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	f107 020e 	add.w	r2, r7, #14
 801239c:	4611      	mov	r1, r2
 801239e:	4618      	mov	r0, r3
 80123a0:	f7ff fb88 	bl	8011ab4 <lwip_netconn_is_err_msg>
 80123a4:	4603      	mov	r3, r0
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d113      	bne.n	80123d2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80123ae:	6978      	ldr	r0, [r7, #20]
 80123b0:	f7ff ffac 	bl	801230c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d007      	beq.n	80123cc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f003 fac9 	bl	8015958 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	2200      	movs	r2, #0
 80123ca:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80123cc:	6978      	ldr	r0, [r7, #20]
 80123ce:	f7ff ff53 	bl	8012278 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	3314      	adds	r3, #20
 80123d6:	f107 0210 	add.w	r2, r7, #16
 80123da:	4611      	mov	r1, r2
 80123dc:	4618      	mov	r0, r3
 80123de:	f00c fb6c 	bl	801eaba <sys_arch_mbox_tryfetch>
 80123e2:	4603      	mov	r3, r0
 80123e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80123e8:	d1d5      	bne.n	8012396 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	3314      	adds	r3, #20
 80123ee:	4618      	mov	r0, r3
 80123f0:	f00c fae6 	bl	801e9c0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	3314      	adds	r3, #20
 80123f8:	4618      	mov	r0, r3
 80123fa:	f00c fb86 	bl	801eb0a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80123fe:	bf00      	nop
 8012400:	3718      	adds	r7, #24
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
	...

08012408 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b086      	sub	sp, #24
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	460b      	mov	r3, r1
 8012412:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012414:	2300      	movs	r3, #0
 8012416:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d106      	bne.n	801242c <lwip_netconn_do_close_internal+0x24>
 801241e:	4b87      	ldr	r3, [pc, #540]	@ (801263c <lwip_netconn_do_close_internal+0x234>)
 8012420:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8012424:	4986      	ldr	r1, [pc, #536]	@ (8012640 <lwip_netconn_do_close_internal+0x238>)
 8012426:	4887      	ldr	r0, [pc, #540]	@ (8012644 <lwip_netconn_do_close_internal+0x23c>)
 8012428:	f00d ff3e 	bl	80202a8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012434:	2b10      	cmp	r3, #16
 8012436:	d006      	beq.n	8012446 <lwip_netconn_do_close_internal+0x3e>
 8012438:	4b80      	ldr	r3, [pc, #512]	@ (801263c <lwip_netconn_do_close_internal+0x234>)
 801243a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 801243e:	4982      	ldr	r1, [pc, #520]	@ (8012648 <lwip_netconn_do_close_internal+0x240>)
 8012440:	4880      	ldr	r0, [pc, #512]	@ (8012644 <lwip_netconn_do_close_internal+0x23c>)
 8012442:	f00d ff31 	bl	80202a8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	785b      	ldrb	r3, [r3, #1]
 801244a:	2b04      	cmp	r3, #4
 801244c:	d006      	beq.n	801245c <lwip_netconn_do_close_internal+0x54>
 801244e:	4b7b      	ldr	r3, [pc, #492]	@ (801263c <lwip_netconn_do_close_internal+0x234>)
 8012450:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8012454:	497d      	ldr	r1, [pc, #500]	@ (801264c <lwip_netconn_do_close_internal+0x244>)
 8012456:	487b      	ldr	r0, [pc, #492]	@ (8012644 <lwip_netconn_do_close_internal+0x23c>)
 8012458:	f00d ff26 	bl	80202a8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d106      	bne.n	8012472 <lwip_netconn_do_close_internal+0x6a>
 8012464:	4b75      	ldr	r3, [pc, #468]	@ (801263c <lwip_netconn_do_close_internal+0x234>)
 8012466:	f240 32a5 	movw	r2, #933	@ 0x3a5
 801246a:	4979      	ldr	r1, [pc, #484]	@ (8012650 <lwip_netconn_do_close_internal+0x248>)
 801246c:	4875      	ldr	r0, [pc, #468]	@ (8012644 <lwip_netconn_do_close_internal+0x23c>)
 801246e:	f00d ff1b 	bl	80202a8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6a1b      	ldr	r3, [r3, #32]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d106      	bne.n	8012488 <lwip_netconn_do_close_internal+0x80>
 801247a:	4b70      	ldr	r3, [pc, #448]	@ (801263c <lwip_netconn_do_close_internal+0x234>)
 801247c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012480:	4974      	ldr	r1, [pc, #464]	@ (8012654 <lwip_netconn_do_close_internal+0x24c>)
 8012482:	4870      	ldr	r0, [pc, #448]	@ (8012644 <lwip_netconn_do_close_internal+0x23c>)
 8012484:	f00d ff10 	bl	80202a8 <iprintf>

  tpcb = conn->pcb.tcp;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6a1b      	ldr	r3, [r3, #32]
 8012492:	7a1b      	ldrb	r3, [r3, #8]
 8012494:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8012496:	7bfb      	ldrb	r3, [r7, #15]
 8012498:	f003 0301 	and.w	r3, r3, #1
 801249c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801249e:	7bfb      	ldrb	r3, [r7, #15]
 80124a0:	f003 0302 	and.w	r3, r3, #2
 80124a4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80124a6:	7bfb      	ldrb	r3, [r7, #15]
 80124a8:	2b03      	cmp	r3, #3
 80124aa:	d102      	bne.n	80124b2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80124ac:	2301      	movs	r3, #1
 80124ae:	75bb      	strb	r3, [r7, #22]
 80124b0:	e01f      	b.n	80124f2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80124b2:	7bbb      	ldrb	r3, [r7, #14]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00e      	beq.n	80124d6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80124bc:	2b05      	cmp	r3, #5
 80124be:	d007      	beq.n	80124d0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80124c4:	2b06      	cmp	r3, #6
 80124c6:	d003      	beq.n	80124d0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80124cc:	2b08      	cmp	r3, #8
 80124ce:	d102      	bne.n	80124d6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80124d0:	2301      	movs	r3, #1
 80124d2:	75bb      	strb	r3, [r7, #22]
 80124d4:	e00d      	b.n	80124f2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80124d6:	7b7b      	ldrb	r3, [r7, #13]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d008      	beq.n	80124ee <lwip_netconn_do_close_internal+0xe6>
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	8b5b      	ldrh	r3, [r3, #26]
 80124e0:	f003 0310 	and.w	r3, r3, #16
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d002      	beq.n	80124ee <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80124e8:	2301      	movs	r3, #1
 80124ea:	75bb      	strb	r3, [r7, #22]
 80124ec:	e001      	b.n	80124f2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80124ee:	2300      	movs	r3, #0
 80124f0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80124f2:	7dbb      	ldrb	r3, [r7, #22]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d003      	beq.n	8012500 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80124f8:	2100      	movs	r1, #0
 80124fa:	6938      	ldr	r0, [r7, #16]
 80124fc:	f004 fa1c 	bl	8016938 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	7d1b      	ldrb	r3, [r3, #20]
 8012504:	2b01      	cmp	r3, #1
 8012506:	d104      	bne.n	8012512 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012508:	2100      	movs	r1, #0
 801250a:	6938      	ldr	r0, [r7, #16]
 801250c:	f004 fa8c 	bl	8016a28 <tcp_accept>
 8012510:	e01d      	b.n	801254e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012512:	7bbb      	ldrb	r3, [r7, #14]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d007      	beq.n	8012528 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012518:	2100      	movs	r1, #0
 801251a:	6938      	ldr	r0, [r7, #16]
 801251c:	f004 fa1e 	bl	801695c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012520:	2100      	movs	r1, #0
 8012522:	6938      	ldr	r0, [r7, #16]
 8012524:	f004 fa80 	bl	8016a28 <tcp_accept>
    }
    if (shut_tx) {
 8012528:	7b7b      	ldrb	r3, [r7, #13]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d003      	beq.n	8012536 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801252e:	2100      	movs	r1, #0
 8012530:	6938      	ldr	r0, [r7, #16]
 8012532:	f004 fa35 	bl	80169a0 <tcp_sent>
    }
    if (shut_close) {
 8012536:	7dbb      	ldrb	r3, [r7, #22]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d008      	beq.n	801254e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 801253c:	2200      	movs	r2, #0
 801253e:	2100      	movs	r1, #0
 8012540:	6938      	ldr	r0, [r7, #16]
 8012542:	f004 fa89 	bl	8016a58 <tcp_poll>
      tcp_err(tpcb, NULL);
 8012546:	2100      	movs	r1, #0
 8012548:	6938      	ldr	r0, [r7, #16]
 801254a:	f004 fa4b 	bl	80169e4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801254e:	7dbb      	ldrb	r3, [r7, #22]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d005      	beq.n	8012560 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012554:	6938      	ldr	r0, [r7, #16]
 8012556:	f003 f8b9 	bl	80156cc <tcp_close>
 801255a:	4603      	mov	r3, r0
 801255c:	75fb      	strb	r3, [r7, #23]
 801255e:	e007      	b.n	8012570 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012560:	7bbb      	ldrb	r3, [r7, #14]
 8012562:	7b7a      	ldrb	r2, [r7, #13]
 8012564:	4619      	mov	r1, r3
 8012566:	6938      	ldr	r0, [r7, #16]
 8012568:	f003 f8dc 	bl	8015724 <tcp_shutdown>
 801256c:	4603      	mov	r3, r0
 801256e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d102      	bne.n	801257e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8012578:	2301      	movs	r3, #1
 801257a:	757b      	strb	r3, [r7, #21]
 801257c:	e016      	b.n	80125ac <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801257e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012586:	d10f      	bne.n	80125a8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6a1b      	ldr	r3, [r3, #32]
 801258c:	7a5b      	ldrb	r3, [r3, #9]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d10c      	bne.n	80125ac <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012592:	2301      	movs	r3, #1
 8012594:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8012596:	7dbb      	ldrb	r3, [r7, #22]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d007      	beq.n	80125ac <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 801259c:	6938      	ldr	r0, [r7, #16]
 801259e:	f003 f9db 	bl	8015958 <tcp_abort>
          err = ERR_OK;
 80125a2:	2300      	movs	r3, #0
 80125a4:	75fb      	strb	r3, [r7, #23]
 80125a6:	e001      	b.n	80125ac <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80125a8:	2301      	movs	r3, #1
 80125aa:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80125ac:	7d7b      	ldrb	r3, [r7, #21]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d052      	beq.n	8012658 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6a1b      	ldr	r3, [r3, #32]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	330c      	adds	r3, #12
 80125ba:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6a1b      	ldr	r3, [r3, #32]
 80125c0:	7dfa      	ldrb	r2, [r7, #23]
 80125c2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2200      	movs	r2, #0
 80125ce:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80125d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d129      	bne.n	801262c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80125d8:	7dbb      	ldrb	r3, [r7, #22]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d00c      	beq.n	80125f8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2200      	movs	r2, #0
 80125e2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d005      	beq.n	80125f8 <lwip_netconn_do_close_internal+0x1f0>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125f0:	2200      	movs	r2, #0
 80125f2:	2104      	movs	r1, #4
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	4798      	blx	r3
      }
      if (shut_rx) {
 80125f8:	7bbb      	ldrb	r3, [r7, #14]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d009      	beq.n	8012612 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012602:	2b00      	cmp	r3, #0
 8012604:	d005      	beq.n	8012612 <lwip_netconn_do_close_internal+0x20a>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801260a:	2200      	movs	r2, #0
 801260c:	2100      	movs	r1, #0
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	4798      	blx	r3
      }
      if (shut_tx) {
 8012612:	7b7b      	ldrb	r3, [r7, #13]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d009      	beq.n	801262c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801261c:	2b00      	cmp	r3, #0
 801261e:	d005      	beq.n	801262c <lwip_netconn_do_close_internal+0x224>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012624:	2200      	movs	r2, #0
 8012626:	2102      	movs	r1, #2
 8012628:	6878      	ldr	r0, [r7, #4]
 801262a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801262c:	78fb      	ldrb	r3, [r7, #3]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d002      	beq.n	8012638 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012632:	68b8      	ldr	r0, [r7, #8]
 8012634:	f00c faed 	bl	801ec12 <sys_sem_signal>
    }
    return ERR_OK;
 8012638:	2300      	movs	r3, #0
 801263a:	e03c      	b.n	80126b6 <lwip_netconn_do_close_internal+0x2ae>
 801263c:	08021710 	.word	0x08021710
 8012640:	080219e4 	.word	0x080219e4
 8012644:	08021754 	.word	0x08021754
 8012648:	080219f4 	.word	0x080219f4
 801264c:	08021a14 	.word	0x08021a14
 8012650:	08021a38 	.word	0x08021a38
 8012654:	08021878 	.word	0x08021878
  }
  if (!close_finished) {
 8012658:	7d7b      	ldrb	r3, [r7, #21]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d11e      	bne.n	801269c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801265e:	693b      	ldr	r3, [r7, #16]
 8012660:	7d1b      	ldrb	r3, [r3, #20]
 8012662:	2b01      	cmp	r3, #1
 8012664:	d106      	bne.n	8012674 <lwip_netconn_do_close_internal+0x26c>
 8012666:	4b16      	ldr	r3, [pc, #88]	@ (80126c0 <lwip_netconn_do_close_internal+0x2b8>)
 8012668:	f240 4241 	movw	r2, #1089	@ 0x441
 801266c:	4915      	ldr	r1, [pc, #84]	@ (80126c4 <lwip_netconn_do_close_internal+0x2bc>)
 801266e:	4816      	ldr	r0, [pc, #88]	@ (80126c8 <lwip_netconn_do_close_internal+0x2c0>)
 8012670:	f00d fe1a 	bl	80202a8 <iprintf>
    if (shut_tx) {
 8012674:	7b7b      	ldrb	r3, [r7, #13]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d003      	beq.n	8012682 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801267a:	4914      	ldr	r1, [pc, #80]	@ (80126cc <lwip_netconn_do_close_internal+0x2c4>)
 801267c:	6938      	ldr	r0, [r7, #16]
 801267e:	f004 f98f 	bl	80169a0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012682:	2201      	movs	r2, #1
 8012684:	4912      	ldr	r1, [pc, #72]	@ (80126d0 <lwip_netconn_do_close_internal+0x2c8>)
 8012686:	6938      	ldr	r0, [r7, #16]
 8012688:	f004 f9e6 	bl	8016a58 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 801268c:	4911      	ldr	r1, [pc, #68]	@ (80126d4 <lwip_netconn_do_close_internal+0x2cc>)
 801268e:	6938      	ldr	r0, [r7, #16]
 8012690:	f004 f9a8 	bl	80169e4 <tcp_err>
    tcp_arg(tpcb, conn);
 8012694:	6879      	ldr	r1, [r7, #4]
 8012696:	6938      	ldr	r0, [r7, #16]
 8012698:	f004 f94e 	bl	8016938 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 801269c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d106      	bne.n	80126b2 <lwip_netconn_do_close_internal+0x2aa>
 80126a4:	4b06      	ldr	r3, [pc, #24]	@ (80126c0 <lwip_netconn_do_close_internal+0x2b8>)
 80126a6:	f240 424d 	movw	r2, #1101	@ 0x44d
 80126aa:	490b      	ldr	r1, [pc, #44]	@ (80126d8 <lwip_netconn_do_close_internal+0x2d0>)
 80126ac:	4806      	ldr	r0, [pc, #24]	@ (80126c8 <lwip_netconn_do_close_internal+0x2c0>)
 80126ae:	f00d fdfb 	bl	80202a8 <iprintf>
  return err;
 80126b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3718      	adds	r7, #24
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	08021710 	.word	0x08021710
 80126c4:	08021a4c 	.word	0x08021a4c
 80126c8:	08021754 	.word	0x08021754
 80126cc:	08011df9 	.word	0x08011df9
 80126d0:	08011d31 	.word	0x08011d31
 80126d4:	08011ea1 	.word	0x08011ea1
 80126d8:	08021a70 	.word	0x08021a70

080126dc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	785b      	ldrb	r3, [r3, #1]
 80126ee:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80126f0:	7afb      	ldrb	r3, [r7, #11]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d00d      	beq.n	8012712 <lwip_netconn_do_delconn+0x36>
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012700:	2b10      	cmp	r3, #16
 8012702:	d006      	beq.n	8012712 <lwip_netconn_do_delconn+0x36>
 8012704:	4b60      	ldr	r3, [pc, #384]	@ (8012888 <lwip_netconn_do_delconn+0x1ac>)
 8012706:	f240 425e 	movw	r2, #1118	@ 0x45e
 801270a:	4960      	ldr	r1, [pc, #384]	@ (801288c <lwip_netconn_do_delconn+0x1b0>)
 801270c:	4860      	ldr	r0, [pc, #384]	@ (8012890 <lwip_netconn_do_delconn+0x1b4>)
 801270e:	f00d fdcb 	bl	80202a8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012712:	7afb      	ldrb	r3, [r7, #11]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d005      	beq.n	8012724 <lwip_netconn_do_delconn+0x48>
 8012718:	7afb      	ldrb	r3, [r7, #11]
 801271a:	2b02      	cmp	r3, #2
 801271c:	d002      	beq.n	8012724 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801271e:	7afb      	ldrb	r3, [r7, #11]
 8012720:	2b03      	cmp	r3, #3
 8012722:	d109      	bne.n	8012738 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012724:	7afb      	ldrb	r3, [r7, #11]
 8012726:	2b03      	cmp	r3, #3
 8012728:	d10a      	bne.n	8012740 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	7f1b      	ldrb	r3, [r3, #28]
 8012730:	f003 0304 	and.w	r3, r3, #4
 8012734:	2b00      	cmp	r3, #0
 8012736:	d103      	bne.n	8012740 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	22fb      	movs	r2, #251	@ 0xfb
 801273c:	711a      	strb	r2, [r3, #4]
 801273e:	e097      	b.n	8012870 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012740:	7afb      	ldrb	r3, [r7, #11]
 8012742:	2b03      	cmp	r3, #3
 8012744:	d10d      	bne.n	8012762 <lwip_netconn_do_delconn+0x86>
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	7f1b      	ldrb	r3, [r3, #28]
 801274c:	f003 0304 	and.w	r3, r3, #4
 8012750:	2b00      	cmp	r3, #0
 8012752:	d106      	bne.n	8012762 <lwip_netconn_do_delconn+0x86>
 8012754:	4b4c      	ldr	r3, [pc, #304]	@ (8012888 <lwip_netconn_do_delconn+0x1ac>)
 8012756:	f240 427a 	movw	r2, #1146	@ 0x47a
 801275a:	494e      	ldr	r1, [pc, #312]	@ (8012894 <lwip_netconn_do_delconn+0x1b8>)
 801275c:	484c      	ldr	r0, [pc, #304]	@ (8012890 <lwip_netconn_do_delconn+0x1b4>)
 801275e:	f00d fda3 	bl	80202a8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2200      	movs	r2, #0
 8012766:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4618      	mov	r0, r3
 801276e:	f7ff fdcd 	bl	801230c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d05f      	beq.n	801283c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012786:	2b10      	cmp	r3, #16
 8012788:	d00d      	beq.n	80127a6 <lwip_netconn_do_delconn+0xca>
 801278a:	2b20      	cmp	r3, #32
 801278c:	d151      	bne.n	8012832 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	2200      	movs	r2, #0
 8012796:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	f009 fc36 	bl	801c010 <udp_remove>
          break;
 80127a4:	e046      	b.n	8012834 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	6a1b      	ldr	r3, [r3, #32]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d006      	beq.n	80127be <lwip_netconn_do_delconn+0xe2>
 80127b0:	4b35      	ldr	r3, [pc, #212]	@ (8012888 <lwip_netconn_do_delconn+0x1ac>)
 80127b2:	f240 4294 	movw	r2, #1172	@ 0x494
 80127b6:	4938      	ldr	r1, [pc, #224]	@ (8012898 <lwip_netconn_do_delconn+0x1bc>)
 80127b8:	4835      	ldr	r0, [pc, #212]	@ (8012890 <lwip_netconn_do_delconn+0x1b4>)
 80127ba:	f00d fd75 	bl	80202a8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2204      	movs	r2, #4
 80127c4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2203      	movs	r2, #3
 80127ca:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	68fa      	ldr	r2, [r7, #12]
 80127d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2100      	movs	r1, #0
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff fe14 	bl	8012408 <lwip_netconn_do_close_internal>
 80127e0:	4603      	mov	r3, r0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d04b      	beq.n	801287e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	785b      	ldrb	r3, [r3, #1]
 80127ec:	2b04      	cmp	r3, #4
 80127ee:	d006      	beq.n	80127fe <lwip_netconn_do_delconn+0x122>
 80127f0:	4b25      	ldr	r3, [pc, #148]	@ (8012888 <lwip_netconn_do_delconn+0x1ac>)
 80127f2:	f240 429a 	movw	r2, #1178	@ 0x49a
 80127f6:	4929      	ldr	r1, [pc, #164]	@ (801289c <lwip_netconn_do_delconn+0x1c0>)
 80127f8:	4825      	ldr	r0, [pc, #148]	@ (8012890 <lwip_netconn_do_delconn+0x1b4>)
 80127fa:	f00d fd55 	bl	80202a8 <iprintf>
            UNLOCK_TCPIP_CORE();
 80127fe:	4828      	ldr	r0, [pc, #160]	@ (80128a0 <lwip_netconn_do_delconn+0x1c4>)
 8012800:	f00c fa9b 	bl	801ed3a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	330c      	adds	r3, #12
 801280a:	2100      	movs	r1, #0
 801280c:	4618      	mov	r0, r3
 801280e:	f00c f9cf 	bl	801ebb0 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012812:	4823      	ldr	r0, [pc, #140]	@ (80128a0 <lwip_netconn_do_delconn+0x1c4>)
 8012814:	f00c fa82 	bl	801ed1c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	785b      	ldrb	r3, [r3, #1]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d02d      	beq.n	801287e <lwip_netconn_do_delconn+0x1a2>
 8012822:	4b19      	ldr	r3, [pc, #100]	@ (8012888 <lwip_netconn_do_delconn+0x1ac>)
 8012824:	f240 429e 	movw	r2, #1182	@ 0x49e
 8012828:	491c      	ldr	r1, [pc, #112]	@ (801289c <lwip_netconn_do_delconn+0x1c0>)
 801282a:	4819      	ldr	r0, [pc, #100]	@ (8012890 <lwip_netconn_do_delconn+0x1b4>)
 801282c:	f00d fd3c 	bl	80202a8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012830:	e025      	b.n	801287e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8012832:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	2200      	movs	r2, #0
 801283a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012842:	2b00      	cmp	r3, #0
 8012844:	d007      	beq.n	8012856 <lwip_netconn_do_delconn+0x17a>
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	6810      	ldr	r0, [r2, #0]
 8012850:	2200      	movs	r2, #0
 8012852:	2100      	movs	r1, #0
 8012854:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801285c:	2b00      	cmp	r3, #0
 801285e:	d007      	beq.n	8012870 <lwip_netconn_do_delconn+0x194>
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012866:	68fa      	ldr	r2, [r7, #12]
 8012868:	6810      	ldr	r0, [r2, #0]
 801286a:	2200      	movs	r2, #0
 801286c:	2102      	movs	r1, #2
 801286e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	330c      	adds	r3, #12
 8012876:	4618      	mov	r0, r3
 8012878:	f00c f9f0 	bl	801ec5c <sys_sem_valid>
 801287c:	e000      	b.n	8012880 <lwip_netconn_do_delconn+0x1a4>
          return;
 801287e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012880:	3710      	adds	r7, #16
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
 8012886:	bf00      	nop
 8012888:	08021710 	.word	0x08021710
 801288c:	08021a80 	.word	0x08021a80
 8012890:	08021754 	.word	0x08021754
 8012894:	08021a94 	.word	0x08021a94
 8012898:	08021ab4 	.word	0x08021ab4
 801289c:	08021ad0 	.word	0x08021ad0
 80128a0:	2001f0ac 	.word	0x2001f0ac

080128a4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d025      	beq.n	8012906 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80128c4:	2b10      	cmp	r3, #16
 80128c6:	d00e      	beq.n	80128e6 <lwip_netconn_do_bind+0x42>
 80128c8:	2b20      	cmp	r3, #32
 80128ca:	d119      	bne.n	8012900 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	6858      	ldr	r0, [r3, #4]
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	6899      	ldr	r1, [r3, #8]
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	899b      	ldrh	r3, [r3, #12]
 80128da:	461a      	mov	r2, r3
 80128dc:	f009 faf0 	bl	801bec0 <udp_bind>
 80128e0:	4603      	mov	r3, r0
 80128e2:	73fb      	strb	r3, [r7, #15]
        break;
 80128e4:	e011      	b.n	801290a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	6858      	ldr	r0, [r3, #4]
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	6899      	ldr	r1, [r3, #8]
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	899b      	ldrh	r3, [r3, #12]
 80128f4:	461a      	mov	r2, r3
 80128f6:	f003 f83b 	bl	8015970 <tcp_bind>
 80128fa:	4603      	mov	r3, r0
 80128fc:	73fb      	strb	r3, [r7, #15]
        break;
 80128fe:	e004      	b.n	801290a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012900:	23fa      	movs	r3, #250	@ 0xfa
 8012902:	73fb      	strb	r3, [r7, #15]
        break;
 8012904:	e001      	b.n	801290a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8012906:	23fa      	movs	r3, #250	@ 0xfa
 8012908:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	7bfa      	ldrb	r2, [r7, #15]
 801290e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012910:	bf00      	nop
 8012912:	3710      	adds	r7, #16
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4618      	mov	r0, r3
 801292a:	f7ff f871 	bl	8011a10 <netconn_err>
 801292e:	4603      	mov	r3, r0
 8012930:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d134      	bne.n	80129a4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d02d      	beq.n	80129a0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801294e:	2b20      	cmp	r3, #32
 8012950:	d123      	bne.n	801299a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	689b      	ldr	r3, [r3, #8]
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d10c      	bne.n	8012976 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	685a      	ldr	r2, [r3, #4]
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4619      	mov	r1, r3
 801296a:	4610      	mov	r0, r2
 801296c:	f009 f8aa 	bl	801bac4 <udp_send>
 8012970:	4603      	mov	r3, r0
 8012972:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8012974:	e016      	b.n	80129a4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	6858      	ldr	r0, [r3, #4]
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	689b      	ldr	r3, [r3, #8]
 8012980:	6819      	ldr	r1, [r3, #0]
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	689b      	ldr	r3, [r3, #8]
 8012986:	f103 0208 	add.w	r2, r3, #8
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	899b      	ldrh	r3, [r3, #12]
 8012990:	f009 f8cc 	bl	801bb2c <udp_sendto>
 8012994:	4603      	mov	r3, r0
 8012996:	73fb      	strb	r3, [r7, #15]
          break;
 8012998:	e004      	b.n	80129a4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 801299a:	23f5      	movs	r3, #245	@ 0xf5
 801299c:	73fb      	strb	r3, [r7, #15]
          break;
 801299e:	e001      	b.n	80129a4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80129a0:	23f5      	movs	r3, #245	@ 0xf5
 80129a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	7bfa      	ldrb	r2, [r7, #15]
 80129a8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80129aa:	bf00      	nop
 80129ac:	3710      	adds	r7, #16
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}

080129b2 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b086      	sub	sp, #24
 80129b6:	af00      	add	r7, sp, #0
 80129b8:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	2200      	movs	r2, #0
 80129c2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d022      	beq.n	8012a14 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80129d8:	2b10      	cmp	r3, #16
 80129da:	d11b      	bne.n	8012a14 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80129dc:	693b      	ldr	r3, [r7, #16]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129e8:	d202      	bcs.n	80129f0 <lwip_netconn_do_recv+0x3e>
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	e001      	b.n	80129f4 <lwip_netconn_do_recv+0x42>
 80129f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80129f4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	89fa      	ldrh	r2, [r7, #14]
 80129fe:	4611      	mov	r1, r2
 8012a00:	4618      	mov	r0, r3
 8012a02:	f003 f8a7 	bl	8015b54 <tcp_recved>
        remaining -= recved;
 8012a06:	89fb      	ldrh	r3, [r7, #14]
 8012a08:	697a      	ldr	r2, [r7, #20]
 8012a0a:	1ad3      	subs	r3, r2, r3
 8012a0c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d1e6      	bne.n	80129e2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012a14:	bf00      	nop
 8012a16:	3718      	adds	r7, #24
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b088      	sub	sp, #32
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	460b      	mov	r3, r1
 8012a26:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <lwip_netconn_do_writemore+0x24>
 8012a32:	4b96      	ldr	r3, [pc, #600]	@ (8012c8c <lwip_netconn_do_writemore+0x270>)
 8012a34:	f240 6273 	movw	r2, #1651	@ 0x673
 8012a38:	4995      	ldr	r1, [pc, #596]	@ (8012c90 <lwip_netconn_do_writemore+0x274>)
 8012a3a:	4896      	ldr	r0, [pc, #600]	@ (8012c94 <lwip_netconn_do_writemore+0x278>)
 8012a3c:	f00d fc34 	bl	80202a8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	785b      	ldrb	r3, [r3, #1]
 8012a44:	2b01      	cmp	r3, #1
 8012a46:	d006      	beq.n	8012a56 <lwip_netconn_do_writemore+0x3a>
 8012a48:	4b90      	ldr	r3, [pc, #576]	@ (8012c8c <lwip_netconn_do_writemore+0x270>)
 8012a4a:	f240 6274 	movw	r2, #1652	@ 0x674
 8012a4e:	4992      	ldr	r1, [pc, #584]	@ (8012c98 <lwip_netconn_do_writemore+0x27c>)
 8012a50:	4890      	ldr	r0, [pc, #576]	@ (8012c94 <lwip_netconn_do_writemore+0x278>)
 8012a52:	f00d fc29 	bl	80202a8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6a1b      	ldr	r3, [r3, #32]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d106      	bne.n	8012a6c <lwip_netconn_do_writemore+0x50>
 8012a5e:	4b8b      	ldr	r3, [pc, #556]	@ (8012c8c <lwip_netconn_do_writemore+0x270>)
 8012a60:	f240 6275 	movw	r2, #1653	@ 0x675
 8012a64:	498d      	ldr	r1, [pc, #564]	@ (8012c9c <lwip_netconn_do_writemore+0x280>)
 8012a66:	488b      	ldr	r0, [pc, #556]	@ (8012c94 <lwip_netconn_do_writemore+0x278>)
 8012a68:	f00d fc1e 	bl	80202a8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	685b      	ldr	r3, [r3, #4]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d106      	bne.n	8012a82 <lwip_netconn_do_writemore+0x66>
 8012a74:	4b85      	ldr	r3, [pc, #532]	@ (8012c8c <lwip_netconn_do_writemore+0x270>)
 8012a76:	f240 6276 	movw	r2, #1654	@ 0x676
 8012a7a:	4989      	ldr	r1, [pc, #548]	@ (8012ca0 <lwip_netconn_do_writemore+0x284>)
 8012a7c:	4885      	ldr	r0, [pc, #532]	@ (8012c94 <lwip_netconn_do_writemore+0x278>)
 8012a7e:	f00d fc13 	bl	80202a8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6a1b      	ldr	r3, [r3, #32]
 8012a86:	699a      	ldr	r2, [r3, #24]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6a1b      	ldr	r3, [r3, #32]
 8012a8c:	695b      	ldr	r3, [r3, #20]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d306      	bcc.n	8012aa0 <lwip_netconn_do_writemore+0x84>
 8012a92:	4b7e      	ldr	r3, [pc, #504]	@ (8012c8c <lwip_netconn_do_writemore+0x270>)
 8012a94:	f240 6277 	movw	r2, #1655	@ 0x677
 8012a98:	4982      	ldr	r1, [pc, #520]	@ (8012ca4 <lwip_netconn_do_writemore+0x288>)
 8012a9a:	487e      	ldr	r0, [pc, #504]	@ (8012c94 <lwip_netconn_do_writemore+0x278>)
 8012a9c:	f00d fc04 	bl	80202a8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6a1b      	ldr	r3, [r3, #32]
 8012aa4:	899b      	ldrh	r3, [r3, #12]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d106      	bne.n	8012ab8 <lwip_netconn_do_writemore+0x9c>
 8012aaa:	4b78      	ldr	r3, [pc, #480]	@ (8012c8c <lwip_netconn_do_writemore+0x270>)
 8012aac:	f240 6279 	movw	r2, #1657	@ 0x679
 8012ab0:	497d      	ldr	r1, [pc, #500]	@ (8012ca8 <lwip_netconn_do_writemore+0x28c>)
 8012ab2:	4878      	ldr	r0, [pc, #480]	@ (8012c94 <lwip_netconn_do_writemore+0x278>)
 8012ab4:	f00d fbf8 	bl	80202a8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6a1b      	ldr	r3, [r3, #32]
 8012abc:	7f1b      	ldrb	r3, [r3, #28]
 8012abe:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	7f1b      	ldrb	r3, [r3, #28]
 8012ac4:	f003 0302 	and.w	r3, r3, #2
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d104      	bne.n	8012ad6 <lwip_netconn_do_writemore+0xba>
 8012acc:	7ebb      	ldrb	r3, [r7, #26]
 8012ace:	f003 0304 	and.w	r3, r3, #4
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d001      	beq.n	8012ada <lwip_netconn_do_writemore+0xbe>
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	e000      	b.n	8012adc <lwip_netconn_do_writemore+0xc0>
 8012ada:	2300      	movs	r3, #0
 8012adc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6a1b      	ldr	r3, [r3, #32]
 8012ae2:	689b      	ldr	r3, [r3, #8]
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6a1b      	ldr	r3, [r3, #32]
 8012aea:	691b      	ldr	r3, [r3, #16]
 8012aec:	4413      	add	r3, r2
 8012aee:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6a1b      	ldr	r3, [r3, #32]
 8012af4:	689b      	ldr	r3, [r3, #8]
 8012af6:	685a      	ldr	r2, [r3, #4]
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6a1b      	ldr	r3, [r3, #32]
 8012afc:	691b      	ldr	r3, [r3, #16]
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b08:	d307      	bcc.n	8012b1a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012b0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012b0e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012b10:	7ebb      	ldrb	r3, [r7, #26]
 8012b12:	f043 0302 	orr.w	r3, r3, #2
 8012b16:	76bb      	strb	r3, [r7, #26]
 8012b18:	e001      	b.n	8012b1e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012b26:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012b28:	89fa      	ldrh	r2, [r7, #14]
 8012b2a:	8bbb      	ldrh	r3, [r7, #28]
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d216      	bcs.n	8012b5e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012b30:	89fb      	ldrh	r3, [r7, #14]
 8012b32:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012b34:	7e3b      	ldrb	r3, [r7, #24]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00d      	beq.n	8012b56 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012b3a:	8bbb      	ldrh	r3, [r7, #28]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d10e      	bne.n	8012b5e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6a1b      	ldr	r3, [r3, #32]
 8012b44:	699b      	ldr	r3, [r3, #24]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d102      	bne.n	8012b50 <lwip_netconn_do_writemore+0x134>
 8012b4a:	f06f 0306 	mvn.w	r3, #6
 8012b4e:	e000      	b.n	8012b52 <lwip_netconn_do_writemore+0x136>
 8012b50:	2300      	movs	r3, #0
 8012b52:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012b54:	e07d      	b.n	8012c52 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012b56:	7ebb      	ldrb	r3, [r7, #26]
 8012b58:	f043 0302 	orr.w	r3, r3, #2
 8012b5c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6a1b      	ldr	r3, [r3, #32]
 8012b62:	691a      	ldr	r2, [r3, #16]
 8012b64:	8bbb      	ldrh	r3, [r7, #28]
 8012b66:	441a      	add	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6a1b      	ldr	r3, [r3, #32]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d906      	bls.n	8012b82 <lwip_netconn_do_writemore+0x166>
 8012b74:	4b45      	ldr	r3, [pc, #276]	@ (8012c8c <lwip_netconn_do_writemore+0x270>)
 8012b76:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8012b7a:	494c      	ldr	r1, [pc, #304]	@ (8012cac <lwip_netconn_do_writemore+0x290>)
 8012b7c:	4845      	ldr	r0, [pc, #276]	@ (8012c94 <lwip_netconn_do_writemore+0x278>)
 8012b7e:	f00d fb93 	bl	80202a8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012b82:	8bbb      	ldrh	r3, [r7, #28]
 8012b84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d103      	bne.n	8012b94 <lwip_netconn_do_writemore+0x178>
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b92:	d209      	bcs.n	8012ba8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012b98:	8bba      	ldrh	r2, [r7, #28]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d10b      	bne.n	8012bb6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6a1b      	ldr	r3, [r3, #32]
 8012ba2:	899b      	ldrh	r3, [r3, #12]
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d906      	bls.n	8012bb6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8012ba8:	2301      	movs	r3, #1
 8012baa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012bac:	7ebb      	ldrb	r3, [r7, #26]
 8012bae:	f043 0302 	orr.w	r3, r3, #2
 8012bb2:	76bb      	strb	r3, [r7, #26]
 8012bb4:	e001      	b.n	8012bba <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6858      	ldr	r0, [r3, #4]
 8012bbe:	7ebb      	ldrb	r3, [r7, #26]
 8012bc0:	8bba      	ldrh	r2, [r7, #28]
 8012bc2:	6979      	ldr	r1, [r7, #20]
 8012bc4:	f006 fe6e 	bl	80198a4 <tcp_write>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012bcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d12c      	bne.n	8012c2e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6a1b      	ldr	r3, [r3, #32]
 8012bd8:	6999      	ldr	r1, [r3, #24]
 8012bda:	8bba      	ldrh	r2, [r7, #28]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6a1b      	ldr	r3, [r3, #32]
 8012be0:	440a      	add	r2, r1
 8012be2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6a1b      	ldr	r3, [r3, #32]
 8012be8:	6919      	ldr	r1, [r3, #16]
 8012bea:	8bba      	ldrh	r2, [r7, #28]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6a1b      	ldr	r3, [r3, #32]
 8012bf0:	440a      	add	r2, r1
 8012bf2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6a1b      	ldr	r3, [r3, #32]
 8012bf8:	691a      	ldr	r2, [r3, #16]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6a1b      	ldr	r3, [r3, #32]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d113      	bne.n	8012c2e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6a1b      	ldr	r3, [r3, #32]
 8012c0a:	899a      	ldrh	r2, [r3, #12]
 8012c0c:	3a01      	subs	r2, #1
 8012c0e:	b292      	uxth	r2, r2
 8012c10:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6a1b      	ldr	r3, [r3, #32]
 8012c16:	899b      	ldrh	r3, [r3, #12]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d008      	beq.n	8012c2e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6a1b      	ldr	r3, [r3, #32]
 8012c20:	689a      	ldr	r2, [r3, #8]
 8012c22:	3208      	adds	r2, #8
 8012c24:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6a1b      	ldr	r3, [r3, #32]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012c2e:	7e7b      	ldrb	r3, [r7, #25]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d004      	beq.n	8012c3e <lwip_netconn_do_writemore+0x222>
 8012c34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f43f af50 	beq.w	8012ade <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012c3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d004      	beq.n	8012c50 <lwip_netconn_do_writemore+0x234>
 8012c46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012c4e:	d146      	bne.n	8012cde <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012c50:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012c52:	7e3b      	ldrb	r3, [r7, #24]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d02b      	beq.n	8012cb0 <lwip_netconn_do_writemore+0x294>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6a1b      	ldr	r3, [r3, #32]
 8012c5c:	699a      	ldr	r2, [r3, #24]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6a1b      	ldr	r3, [r3, #32]
 8012c62:	695b      	ldr	r3, [r3, #20]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d223      	bcs.n	8012cb0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d005      	beq.n	8012c7c <lwip_netconn_do_writemore+0x260>
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c74:	2200      	movs	r2, #0
 8012c76:	2103      	movs	r1, #3
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	7f1b      	ldrb	r3, [r3, #28]
 8012c80:	f043 0310 	orr.w	r3, r3, #16
 8012c84:	b2da      	uxtb	r2, r3
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	771a      	strb	r2, [r3, #28]
 8012c8a:	e028      	b.n	8012cde <lwip_netconn_do_writemore+0x2c2>
 8012c8c:	08021710 	.word	0x08021710
 8012c90:	08021868 	.word	0x08021868
 8012c94:	08021754 	.word	0x08021754
 8012c98:	08021b70 	.word	0x08021b70
 8012c9c:	08021878 	.word	0x08021878
 8012ca0:	08021b90 	.word	0x08021b90
 8012ca4:	08021ba8 	.word	0x08021ba8
 8012ca8:	08021be8 	.word	0x08021be8
 8012cac:	08021c10 	.word	0x08021c10
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012cb8:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8012cbc:	d305      	bcc.n	8012cca <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012cc6:	2b04      	cmp	r3, #4
 8012cc8:	d909      	bls.n	8012cde <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d005      	beq.n	8012cde <lwip_netconn_do_writemore+0x2c2>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	2103      	movs	r1, #3
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012cde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d11d      	bne.n	8012d22 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6a1b      	ldr	r3, [r3, #32]
 8012cea:	699a      	ldr	r2, [r3, #24]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6a1b      	ldr	r3, [r3, #32]
 8012cf0:	695b      	ldr	r3, [r3, #20]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d002      	beq.n	8012cfc <lwip_netconn_do_writemore+0x2e0>
 8012cf6:	7e3b      	ldrb	r3, [r7, #24]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d001      	beq.n	8012d00 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	4618      	mov	r0, r3
 8012d06:	f007 fbdd 	bl	801a4c4 <tcp_output>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012d0e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012d12:	f113 0f04 	cmn.w	r3, #4
 8012d16:	d12c      	bne.n	8012d72 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012d18:	7b3b      	ldrb	r3, [r7, #12]
 8012d1a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	76fb      	strb	r3, [r7, #27]
 8012d20:	e027      	b.n	8012d72 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012d22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012d2a:	d120      	bne.n	8012d6e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	4618      	mov	r0, r3
 8012d32:	f007 fbc7 	bl	801a4c4 <tcp_output>
 8012d36:	4603      	mov	r3, r0
 8012d38:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012d3a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012d3e:	f113 0f04 	cmn.w	r3, #4
 8012d42:	d104      	bne.n	8012d4e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012d44:	7b7b      	ldrb	r3, [r7, #13]
 8012d46:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	76fb      	strb	r3, [r7, #27]
 8012d4c:	e011      	b.n	8012d72 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012d4e:	7e3b      	ldrb	r3, [r7, #24]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d00e      	beq.n	8012d72 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6a1b      	ldr	r3, [r3, #32]
 8012d58:	699b      	ldr	r3, [r3, #24]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d102      	bne.n	8012d64 <lwip_netconn_do_writemore+0x348>
 8012d5e:	f06f 0306 	mvn.w	r3, #6
 8012d62:	e000      	b.n	8012d66 <lwip_netconn_do_writemore+0x34a>
 8012d64:	2300      	movs	r3, #0
 8012d66:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012d68:	2301      	movs	r3, #1
 8012d6a:	76fb      	strb	r3, [r7, #27]
 8012d6c:	e001      	b.n	8012d72 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012d6e:	2301      	movs	r3, #1
 8012d70:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012d72:	7efb      	ldrb	r3, [r7, #27]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d015      	beq.n	8012da4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6a1b      	ldr	r3, [r3, #32]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	330c      	adds	r3, #12
 8012d80:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6a1b      	ldr	r3, [r3, #32]
 8012d86:	7ffa      	ldrb	r2, [r7, #31]
 8012d88:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2200      	movs	r2, #0
 8012d94:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012d96:	78fb      	ldrb	r3, [r7, #3]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d006      	beq.n	8012daa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012d9c:	68b8      	ldr	r0, [r7, #8]
 8012d9e:	f00b ff38 	bl	801ec12 <sys_sem_signal>
 8012da2:	e002      	b.n	8012daa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012da4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012da8:	e000      	b.n	8012dac <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8012daa:	2300      	movs	r3, #0
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3720      	adds	r7, #32
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}

08012db4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	785b      	ldrb	r3, [r3, #1]
 8012dc6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d069      	beq.n	8012ea6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012ddc:	2b10      	cmp	r3, #16
 8012dde:	d162      	bne.n	8012ea6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012de4:	2b03      	cmp	r3, #3
 8012de6:	d002      	beq.n	8012dee <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012de8:	7afb      	ldrb	r3, [r7, #11]
 8012dea:	2b02      	cmp	r3, #2
 8012dec:	d05b      	beq.n	8012ea6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012dee:	7afb      	ldrb	r3, [r7, #11]
 8012df0:	2b03      	cmp	r3, #3
 8012df2:	d103      	bne.n	8012dfc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	22f5      	movs	r2, #245	@ 0xf5
 8012df8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012dfa:	e059      	b.n	8012eb0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012dfc:	7afb      	ldrb	r3, [r7, #11]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d103      	bne.n	8012e0a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	22fb      	movs	r2, #251	@ 0xfb
 8012e06:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012e08:	e052      	b.n	8012eb0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	7a1b      	ldrb	r3, [r3, #8]
 8012e0e:	f003 0301 	and.w	r3, r3, #1
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d004      	beq.n	8012e20 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7ff fa76 	bl	801230c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	6a1b      	ldr	r3, [r3, #32]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d006      	beq.n	8012e38 <lwip_netconn_do_close+0x84>
 8012e2a:	4b23      	ldr	r3, [pc, #140]	@ (8012eb8 <lwip_netconn_do_close+0x104>)
 8012e2c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8012e30:	4922      	ldr	r1, [pc, #136]	@ (8012ebc <lwip_netconn_do_close+0x108>)
 8012e32:	4823      	ldr	r0, [pc, #140]	@ (8012ec0 <lwip_netconn_do_close+0x10c>)
 8012e34:	f00d fa38 	bl	80202a8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	2204      	movs	r2, #4
 8012e3e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2100      	movs	r1, #0
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7ff fada 	bl	8012408 <lwip_netconn_do_close_internal>
 8012e54:	4603      	mov	r3, r0
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d029      	beq.n	8012eae <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	785b      	ldrb	r3, [r3, #1]
 8012e60:	2b04      	cmp	r3, #4
 8012e62:	d006      	beq.n	8012e72 <lwip_netconn_do_close+0xbe>
 8012e64:	4b14      	ldr	r3, [pc, #80]	@ (8012eb8 <lwip_netconn_do_close+0x104>)
 8012e66:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8012e6a:	4916      	ldr	r1, [pc, #88]	@ (8012ec4 <lwip_netconn_do_close+0x110>)
 8012e6c:	4814      	ldr	r0, [pc, #80]	@ (8012ec0 <lwip_netconn_do_close+0x10c>)
 8012e6e:	f00d fa1b 	bl	80202a8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8012e72:	4815      	ldr	r0, [pc, #84]	@ (8012ec8 <lwip_netconn_do_close+0x114>)
 8012e74:	f00b ff61 	bl	801ed3a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	330c      	adds	r3, #12
 8012e7e:	2100      	movs	r1, #0
 8012e80:	4618      	mov	r0, r3
 8012e82:	f00b fe95 	bl	801ebb0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012e86:	4810      	ldr	r0, [pc, #64]	@ (8012ec8 <lwip_netconn_do_close+0x114>)
 8012e88:	f00b ff48 	bl	801ed1c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	785b      	ldrb	r3, [r3, #1]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d00b      	beq.n	8012eae <lwip_netconn_do_close+0xfa>
 8012e96:	4b08      	ldr	r3, [pc, #32]	@ (8012eb8 <lwip_netconn_do_close+0x104>)
 8012e98:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8012e9c:	4909      	ldr	r1, [pc, #36]	@ (8012ec4 <lwip_netconn_do_close+0x110>)
 8012e9e:	4808      	ldr	r0, [pc, #32]	@ (8012ec0 <lwip_netconn_do_close+0x10c>)
 8012ea0:	f00d fa02 	bl	80202a8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012ea4:	e003      	b.n	8012eae <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	22f5      	movs	r2, #245	@ 0xf5
 8012eaa:	711a      	strb	r2, [r3, #4]
 8012eac:	e000      	b.n	8012eb0 <lwip_netconn_do_close+0xfc>
      return;
 8012eae:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	08021710 	.word	0x08021710
 8012ebc:	08021ab4 	.word	0x08021ab4
 8012ec0:	08021754 	.word	0x08021754
 8012ec4:	08021ad0 	.word	0x08021ad0
 8012ec8:	2001f0ac 	.word	0x2001f0ac

08012ecc <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012ed2:	2006      	movs	r0, #6
 8012ed4:	f001 f818 	bl	8013f08 <memp_malloc>
 8012ed8:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d004      	beq.n	8012eea <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012ee0:	2210      	movs	r2, #16
 8012ee2:	2100      	movs	r1, #0
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f00d fb37 	bl	8020558 <memset>
  }
  return buf;
 8012eea:	687b      	ldr	r3, [r7, #4]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3708      	adds	r7, #8
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d013      	beq.n	8012f2a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d00b      	beq.n	8012f22 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f001 ff1a 	bl	8014d48 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2200      	movs	r2, #0
 8012f18:	605a      	str	r2, [r3, #4]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	685a      	ldr	r2, [r3, #4]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012f22:	6879      	ldr	r1, [r7, #4]
 8012f24:	2006      	movs	r0, #6
 8012f26:	f001 f86b 	bl	8014000 <memp_free>
  }
}
 8012f2a:	bf00      	nop
 8012f2c:	3708      	adds	r7, #8
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}
	...

08012f34 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	460b      	mov	r3, r1
 8012f3e:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d107      	bne.n	8012f56 <netbuf_alloc+0x22>
 8012f46:	4b1c      	ldr	r3, [pc, #112]	@ (8012fb8 <netbuf_alloc+0x84>)
 8012f48:	2268      	movs	r2, #104	@ 0x68
 8012f4a:	491c      	ldr	r1, [pc, #112]	@ (8012fbc <netbuf_alloc+0x88>)
 8012f4c:	481c      	ldr	r0, [pc, #112]	@ (8012fc0 <netbuf_alloc+0x8c>)
 8012f4e:	f00d f9ab 	bl	80202a8 <iprintf>
 8012f52:	2300      	movs	r3, #0
 8012f54:	e02b      	b.n	8012fae <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d004      	beq.n	8012f68 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	4618      	mov	r0, r3
 8012f64:	f001 fef0 	bl	8014d48 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8012f68:	887b      	ldrh	r3, [r7, #2]
 8012f6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f6e:	4619      	mov	r1, r3
 8012f70:	2036      	movs	r0, #54	@ 0x36
 8012f72:	f001 fc05 	bl	8014780 <pbuf_alloc>
 8012f76:	4602      	mov	r2, r0
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d101      	bne.n	8012f88 <netbuf_alloc+0x54>
    return NULL;
 8012f84:	2300      	movs	r3, #0
 8012f86:	e012      	b.n	8012fae <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	895b      	ldrh	r3, [r3, #10]
 8012f8e:	887a      	ldrh	r2, [r7, #2]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d905      	bls.n	8012fa0 <netbuf_alloc+0x6c>
 8012f94:	4b08      	ldr	r3, [pc, #32]	@ (8012fb8 <netbuf_alloc+0x84>)
 8012f96:	2272      	movs	r2, #114	@ 0x72
 8012f98:	490a      	ldr	r1, [pc, #40]	@ (8012fc4 <netbuf_alloc+0x90>)
 8012f9a:	4809      	ldr	r0, [pc, #36]	@ (8012fc0 <netbuf_alloc+0x8c>)
 8012f9c:	f00d f984 	bl	80202a8 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	685b      	ldr	r3, [r3, #4]
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3708      	adds	r7, #8
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	08021c68 	.word	0x08021c68
 8012fbc:	08021c9c 	.word	0x08021c9c
 8012fc0:	08021cb8 	.word	0x08021cb8
 8012fc4:	08021ce0 	.word	0x08021ce0

08012fc8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b084      	sub	sp, #16
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	60f8      	str	r0, [r7, #12]
 8012fd0:	60b9      	str	r1, [r7, #8]
 8012fd2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d108      	bne.n	8012fec <netbuf_data+0x24>
 8012fda:	4b1b      	ldr	r3, [pc, #108]	@ (8013048 <netbuf_data+0x80>)
 8012fdc:	22c6      	movs	r2, #198	@ 0xc6
 8012fde:	491b      	ldr	r1, [pc, #108]	@ (801304c <netbuf_data+0x84>)
 8012fe0:	481b      	ldr	r0, [pc, #108]	@ (8013050 <netbuf_data+0x88>)
 8012fe2:	f00d f961 	bl	80202a8 <iprintf>
 8012fe6:	f06f 030f 	mvn.w	r3, #15
 8012fea:	e029      	b.n	8013040 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d108      	bne.n	8013004 <netbuf_data+0x3c>
 8012ff2:	4b15      	ldr	r3, [pc, #84]	@ (8013048 <netbuf_data+0x80>)
 8012ff4:	22c7      	movs	r2, #199	@ 0xc7
 8012ff6:	4917      	ldr	r1, [pc, #92]	@ (8013054 <netbuf_data+0x8c>)
 8012ff8:	4815      	ldr	r0, [pc, #84]	@ (8013050 <netbuf_data+0x88>)
 8012ffa:	f00d f955 	bl	80202a8 <iprintf>
 8012ffe:	f06f 030f 	mvn.w	r3, #15
 8013002:	e01d      	b.n	8013040 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d108      	bne.n	801301c <netbuf_data+0x54>
 801300a:	4b0f      	ldr	r3, [pc, #60]	@ (8013048 <netbuf_data+0x80>)
 801300c:	22c8      	movs	r2, #200	@ 0xc8
 801300e:	4912      	ldr	r1, [pc, #72]	@ (8013058 <netbuf_data+0x90>)
 8013010:	480f      	ldr	r0, [pc, #60]	@ (8013050 <netbuf_data+0x88>)
 8013012:	f00d f949 	bl	80202a8 <iprintf>
 8013016:	f06f 030f 	mvn.w	r3, #15
 801301a:	e011      	b.n	8013040 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	685b      	ldr	r3, [r3, #4]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d102      	bne.n	801302a <netbuf_data+0x62>
    return ERR_BUF;
 8013024:	f06f 0301 	mvn.w	r3, #1
 8013028:	e00a      	b.n	8013040 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	685a      	ldr	r2, [r3, #4]
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	685b      	ldr	r3, [r3, #4]
 8013038:	895a      	ldrh	r2, [r3, #10]
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801303e:	2300      	movs	r3, #0
}
 8013040:	4618      	mov	r0, r3
 8013042:	3710      	adds	r7, #16
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}
 8013048:	08021c68 	.word	0x08021c68
 801304c:	08021d70 	.word	0x08021d70
 8013050:	08021cb8 	.word	0x08021cb8
 8013054:	08021d8c 	.word	0x08021d8c
 8013058:	08021dac 	.word	0x08021dac

0801305c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b084      	sub	sp, #16
 8013060:	af00      	add	r7, sp, #0
 8013062:	6078      	str	r0, [r7, #4]
 8013064:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8013066:	f008 faf9 	bl	801b65c <sys_timeouts_sleeptime>
 801306a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013072:	d10b      	bne.n	801308c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8013074:	4813      	ldr	r0, [pc, #76]	@ (80130c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013076:	f00b fe60 	bl	801ed3a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801307a:	2200      	movs	r2, #0
 801307c:	6839      	ldr	r1, [r7, #0]
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f00b fcea 	bl	801ea58 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013084:	480f      	ldr	r0, [pc, #60]	@ (80130c4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013086:	f00b fe49 	bl	801ed1c <sys_mutex_lock>
    return;
 801308a:	e018      	b.n	80130be <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d102      	bne.n	8013098 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8013092:	f008 faa9 	bl	801b5e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013096:	e7e6      	b.n	8013066 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013098:	480a      	ldr	r0, [pc, #40]	@ (80130c4 <tcpip_timeouts_mbox_fetch+0x68>)
 801309a:	f00b fe4e 	bl	801ed3a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801309e:	68fa      	ldr	r2, [r7, #12]
 80130a0:	6839      	ldr	r1, [r7, #0]
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f00b fcd8 	bl	801ea58 <sys_arch_mbox_fetch>
 80130a8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80130aa:	4806      	ldr	r0, [pc, #24]	@ (80130c4 <tcpip_timeouts_mbox_fetch+0x68>)
 80130ac:	f00b fe36 	bl	801ed1c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80130b6:	d102      	bne.n	80130be <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80130b8:	f008 fa96 	bl	801b5e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80130bc:	e7d3      	b.n	8013066 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80130be:	3710      	adds	r7, #16
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	2001f0ac 	.word	0x2001f0ac

080130c8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80130d0:	4810      	ldr	r0, [pc, #64]	@ (8013114 <tcpip_thread+0x4c>)
 80130d2:	f00b fe23 	bl	801ed1c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80130d6:	4b10      	ldr	r3, [pc, #64]	@ (8013118 <tcpip_thread+0x50>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d005      	beq.n	80130ea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80130de:	4b0e      	ldr	r3, [pc, #56]	@ (8013118 <tcpip_thread+0x50>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	4a0e      	ldr	r2, [pc, #56]	@ (801311c <tcpip_thread+0x54>)
 80130e4:	6812      	ldr	r2, [r2, #0]
 80130e6:	4610      	mov	r0, r2
 80130e8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80130ea:	f107 030c 	add.w	r3, r7, #12
 80130ee:	4619      	mov	r1, r3
 80130f0:	480b      	ldr	r0, [pc, #44]	@ (8013120 <tcpip_thread+0x58>)
 80130f2:	f7ff ffb3 	bl	801305c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d106      	bne.n	801310a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80130fc:	4b09      	ldr	r3, [pc, #36]	@ (8013124 <tcpip_thread+0x5c>)
 80130fe:	2291      	movs	r2, #145	@ 0x91
 8013100:	4909      	ldr	r1, [pc, #36]	@ (8013128 <tcpip_thread+0x60>)
 8013102:	480a      	ldr	r0, [pc, #40]	@ (801312c <tcpip_thread+0x64>)
 8013104:	f00d f8d0 	bl	80202a8 <iprintf>
      continue;
 8013108:	e003      	b.n	8013112 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	4618      	mov	r0, r3
 801310e:	f000 f80f 	bl	8013130 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013112:	e7ea      	b.n	80130ea <tcpip_thread+0x22>
 8013114:	2001f0ac 	.word	0x2001f0ac
 8013118:	2001f0a0 	.word	0x2001f0a0
 801311c:	2001f0a4 	.word	0x2001f0a4
 8013120:	2001f0a8 	.word	0x2001f0a8
 8013124:	08021e00 	.word	0x08021e00
 8013128:	08021e30 	.word	0x08021e30
 801312c:	08021e50 	.word	0x08021e50

08013130 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	2b02      	cmp	r3, #2
 801313e:	d026      	beq.n	801318e <tcpip_thread_handle_msg+0x5e>
 8013140:	2b02      	cmp	r3, #2
 8013142:	dc2b      	bgt.n	801319c <tcpip_thread_handle_msg+0x6c>
 8013144:	2b00      	cmp	r3, #0
 8013146:	d002      	beq.n	801314e <tcpip_thread_handle_msg+0x1e>
 8013148:	2b01      	cmp	r3, #1
 801314a:	d015      	beq.n	8013178 <tcpip_thread_handle_msg+0x48>
 801314c:	e026      	b.n	801319c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	6850      	ldr	r0, [r2, #4]
 8013156:	687a      	ldr	r2, [r7, #4]
 8013158:	6892      	ldr	r2, [r2, #8]
 801315a:	4611      	mov	r1, r2
 801315c:	4798      	blx	r3
 801315e:	4603      	mov	r3, r0
 8013160:	2b00      	cmp	r3, #0
 8013162:	d004      	beq.n	801316e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	4618      	mov	r0, r3
 801316a:	f001 fded 	bl	8014d48 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801316e:	6879      	ldr	r1, [r7, #4]
 8013170:	2009      	movs	r0, #9
 8013172:	f000 ff45 	bl	8014000 <memp_free>
      break;
 8013176:	e018      	b.n	80131aa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	687a      	ldr	r2, [r7, #4]
 801317e:	6892      	ldr	r2, [r2, #8]
 8013180:	4610      	mov	r0, r2
 8013182:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013184:	6879      	ldr	r1, [r7, #4]
 8013186:	2008      	movs	r0, #8
 8013188:	f000 ff3a 	bl	8014000 <memp_free>
      break;
 801318c:	e00d      	b.n	80131aa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	6892      	ldr	r2, [r2, #8]
 8013196:	4610      	mov	r0, r2
 8013198:	4798      	blx	r3
      break;
 801319a:	e006      	b.n	80131aa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801319c:	4b05      	ldr	r3, [pc, #20]	@ (80131b4 <tcpip_thread_handle_msg+0x84>)
 801319e:	22cf      	movs	r2, #207	@ 0xcf
 80131a0:	4905      	ldr	r1, [pc, #20]	@ (80131b8 <tcpip_thread_handle_msg+0x88>)
 80131a2:	4806      	ldr	r0, [pc, #24]	@ (80131bc <tcpip_thread_handle_msg+0x8c>)
 80131a4:	f00d f880 	bl	80202a8 <iprintf>
      break;
 80131a8:	bf00      	nop
  }
}
 80131aa:	bf00      	nop
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	08021e00 	.word	0x08021e00
 80131b8:	08021e30 	.word	0x08021e30
 80131bc:	08021e50 	.word	0x08021e50

080131c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b086      	sub	sp, #24
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	60b9      	str	r1, [r7, #8]
 80131ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80131cc:	481a      	ldr	r0, [pc, #104]	@ (8013238 <tcpip_inpkt+0x78>)
 80131ce:	f00b fc8b 	bl	801eae8 <sys_mbox_valid>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d105      	bne.n	80131e4 <tcpip_inpkt+0x24>
 80131d8:	4b18      	ldr	r3, [pc, #96]	@ (801323c <tcpip_inpkt+0x7c>)
 80131da:	22fc      	movs	r2, #252	@ 0xfc
 80131dc:	4918      	ldr	r1, [pc, #96]	@ (8013240 <tcpip_inpkt+0x80>)
 80131de:	4819      	ldr	r0, [pc, #100]	@ (8013244 <tcpip_inpkt+0x84>)
 80131e0:	f00d f862 	bl	80202a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80131e4:	2009      	movs	r0, #9
 80131e6:	f000 fe8f 	bl	8013f08 <memp_malloc>
 80131ea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d102      	bne.n	80131f8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80131f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80131f6:	e01a      	b.n	801322e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	2200      	movs	r2, #0
 80131fc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	68fa      	ldr	r2, [r7, #12]
 8013202:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	68ba      	ldr	r2, [r7, #8]
 8013208:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013210:	6979      	ldr	r1, [r7, #20]
 8013212:	4809      	ldr	r0, [pc, #36]	@ (8013238 <tcpip_inpkt+0x78>)
 8013214:	f00b fbfc 	bl	801ea10 <sys_mbox_trypost>
 8013218:	4603      	mov	r3, r0
 801321a:	2b00      	cmp	r3, #0
 801321c:	d006      	beq.n	801322c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801321e:	6979      	ldr	r1, [r7, #20]
 8013220:	2009      	movs	r0, #9
 8013222:	f000 feed 	bl	8014000 <memp_free>
    return ERR_MEM;
 8013226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801322a:	e000      	b.n	801322e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801322c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801322e:	4618      	mov	r0, r3
 8013230:	3718      	adds	r7, #24
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	2001f0a8 	.word	0x2001f0a8
 801323c:	08021e00 	.word	0x08021e00
 8013240:	08021e78 	.word	0x08021e78
 8013244:	08021e50 	.word	0x08021e50

08013248 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b082      	sub	sp, #8
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013258:	f003 0318 	and.w	r3, r3, #24
 801325c:	2b00      	cmp	r3, #0
 801325e:	d006      	beq.n	801326e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013260:	4a08      	ldr	r2, [pc, #32]	@ (8013284 <tcpip_input+0x3c>)
 8013262:	6839      	ldr	r1, [r7, #0]
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7ff ffab 	bl	80131c0 <tcpip_inpkt>
 801326a:	4603      	mov	r3, r0
 801326c:	e005      	b.n	801327a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801326e:	4a06      	ldr	r2, [pc, #24]	@ (8013288 <tcpip_input+0x40>)
 8013270:	6839      	ldr	r1, [r7, #0]
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7ff ffa4 	bl	80131c0 <tcpip_inpkt>
 8013278:	4603      	mov	r3, r0
}
 801327a:	4618      	mov	r0, r3
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	0801e759 	.word	0x0801e759
 8013288:	0801d535 	.word	0x0801d535

0801328c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b084      	sub	sp, #16
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
 8013294:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013296:	4819      	ldr	r0, [pc, #100]	@ (80132fc <tcpip_try_callback+0x70>)
 8013298:	f00b fc26 	bl	801eae8 <sys_mbox_valid>
 801329c:	4603      	mov	r3, r0
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d106      	bne.n	80132b0 <tcpip_try_callback+0x24>
 80132a2:	4b17      	ldr	r3, [pc, #92]	@ (8013300 <tcpip_try_callback+0x74>)
 80132a4:	f240 125d 	movw	r2, #349	@ 0x15d
 80132a8:	4916      	ldr	r1, [pc, #88]	@ (8013304 <tcpip_try_callback+0x78>)
 80132aa:	4817      	ldr	r0, [pc, #92]	@ (8013308 <tcpip_try_callback+0x7c>)
 80132ac:	f00c fffc 	bl	80202a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80132b0:	2008      	movs	r0, #8
 80132b2:	f000 fe29 	bl	8013f08 <memp_malloc>
 80132b6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d102      	bne.n	80132c4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80132be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132c2:	e017      	b.n	80132f4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	2201      	movs	r2, #1
 80132c8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	683a      	ldr	r2, [r7, #0]
 80132d4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80132d6:	68f9      	ldr	r1, [r7, #12]
 80132d8:	4808      	ldr	r0, [pc, #32]	@ (80132fc <tcpip_try_callback+0x70>)
 80132da:	f00b fb99 	bl	801ea10 <sys_mbox_trypost>
 80132de:	4603      	mov	r3, r0
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d006      	beq.n	80132f2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80132e4:	68f9      	ldr	r1, [r7, #12]
 80132e6:	2008      	movs	r0, #8
 80132e8:	f000 fe8a 	bl	8014000 <memp_free>
    return ERR_MEM;
 80132ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132f0:	e000      	b.n	80132f4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80132f2:	2300      	movs	r3, #0
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3710      	adds	r7, #16
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	2001f0a8 	.word	0x2001f0a8
 8013300:	08021e00 	.word	0x08021e00
 8013304:	08021e78 	.word	0x08021e78
 8013308:	08021e50 	.word	0x08021e50

0801330c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b084      	sub	sp, #16
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8013318:	4806      	ldr	r0, [pc, #24]	@ (8013334 <tcpip_send_msg_wait_sem+0x28>)
 801331a:	f00b fcff 	bl	801ed1c <sys_mutex_lock>
  fn(apimsg);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	68b8      	ldr	r0, [r7, #8]
 8013322:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8013324:	4803      	ldr	r0, [pc, #12]	@ (8013334 <tcpip_send_msg_wait_sem+0x28>)
 8013326:	f00b fd08 	bl	801ed3a <sys_mutex_unlock>
  return ERR_OK;
 801332a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801332c:	4618      	mov	r0, r3
 801332e:	3710      	adds	r7, #16
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	2001f0ac 	.word	0x2001f0ac

08013338 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af02      	add	r7, sp, #8
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013342:	f000 f872 	bl	801342a <lwip_init>

  tcpip_init_done = initfunc;
 8013346:	4a17      	ldr	r2, [pc, #92]	@ (80133a4 <tcpip_init+0x6c>)
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801334c:	4a16      	ldr	r2, [pc, #88]	@ (80133a8 <tcpip_init+0x70>)
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013352:	2106      	movs	r1, #6
 8013354:	4815      	ldr	r0, [pc, #84]	@ (80133ac <tcpip_init+0x74>)
 8013356:	f00b fb01 	bl	801e95c <sys_mbox_new>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d006      	beq.n	801336e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013360:	4b13      	ldr	r3, [pc, #76]	@ (80133b0 <tcpip_init+0x78>)
 8013362:	f240 2261 	movw	r2, #609	@ 0x261
 8013366:	4913      	ldr	r1, [pc, #76]	@ (80133b4 <tcpip_init+0x7c>)
 8013368:	4813      	ldr	r0, [pc, #76]	@ (80133b8 <tcpip_init+0x80>)
 801336a:	f00c ff9d 	bl	80202a8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801336e:	4813      	ldr	r0, [pc, #76]	@ (80133bc <tcpip_init+0x84>)
 8013370:	f00b fc9e 	bl	801ecb0 <sys_mutex_new>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d006      	beq.n	8013388 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801337a:	4b0d      	ldr	r3, [pc, #52]	@ (80133b0 <tcpip_init+0x78>)
 801337c:	f240 2265 	movw	r2, #613	@ 0x265
 8013380:	490f      	ldr	r1, [pc, #60]	@ (80133c0 <tcpip_init+0x88>)
 8013382:	480d      	ldr	r0, [pc, #52]	@ (80133b8 <tcpip_init+0x80>)
 8013384:	f00c ff90 	bl	80202a8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013388:	2318      	movs	r3, #24
 801338a:	9300      	str	r3, [sp, #0]
 801338c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013390:	2200      	movs	r2, #0
 8013392:	490c      	ldr	r1, [pc, #48]	@ (80133c4 <tcpip_init+0x8c>)
 8013394:	480c      	ldr	r0, [pc, #48]	@ (80133c8 <tcpip_init+0x90>)
 8013396:	f00b fcdd 	bl	801ed54 <sys_thread_new>
}
 801339a:	bf00      	nop
 801339c:	3708      	adds	r7, #8
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	2001f0a0 	.word	0x2001f0a0
 80133a8:	2001f0a4 	.word	0x2001f0a4
 80133ac:	2001f0a8 	.word	0x2001f0a8
 80133b0:	08021e00 	.word	0x08021e00
 80133b4:	08021e88 	.word	0x08021e88
 80133b8:	08021e50 	.word	0x08021e50
 80133bc:	2001f0ac 	.word	0x2001f0ac
 80133c0:	08021eac 	.word	0x08021eac
 80133c4:	080130c9 	.word	0x080130c9
 80133c8:	08021ed0 	.word	0x08021ed0

080133cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	4603      	mov	r3, r0
 80133d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80133d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80133da:	021b      	lsls	r3, r3, #8
 80133dc:	b21a      	sxth	r2, r3
 80133de:	88fb      	ldrh	r3, [r7, #6]
 80133e0:	0a1b      	lsrs	r3, r3, #8
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	b21b      	sxth	r3, r3
 80133e6:	4313      	orrs	r3, r2
 80133e8:	b21b      	sxth	r3, r3
 80133ea:	b29b      	uxth	r3, r3
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	370c      	adds	r7, #12
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	4770      	bx	lr

080133f8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80133f8:	b480      	push	{r7}
 80133fa:	b083      	sub	sp, #12
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	061a      	lsls	r2, r3, #24
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	021b      	lsls	r3, r3, #8
 8013408:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801340c:	431a      	orrs	r2, r3
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	0a1b      	lsrs	r3, r3, #8
 8013412:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013416:	431a      	orrs	r2, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	0e1b      	lsrs	r3, r3, #24
 801341c:	4313      	orrs	r3, r2
}
 801341e:	4618      	mov	r0, r3
 8013420:	370c      	adds	r7, #12
 8013422:	46bd      	mov	sp, r7
 8013424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013428:	4770      	bx	lr

0801342a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801342a:	b580      	push	{r7, lr}
 801342c:	b082      	sub	sp, #8
 801342e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013430:	2300      	movs	r3, #0
 8013432:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8013434:	f001 ff32 	bl	801529c <stats_init>
#if !NO_SYS
  sys_init();
 8013438:	f00b fc2e 	bl	801ec98 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801343c:	f000 f8d4 	bl	80135e8 <mem_init>
  memp_init();
 8013440:	f000 fccc 	bl	8013ddc <memp_init>
  pbuf_init();
  netif_init();
 8013444:	f000 fe06 	bl	8014054 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013448:	f008 f940 	bl	801b6cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801344c:	f001 ff2e 	bl	80152ac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013450:	f008 f882 	bl	801b558 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013454:	bf00      	nop
 8013456:	3708      	adds	r7, #8
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801345c:	b480      	push	{r7}
 801345e:	b083      	sub	sp, #12
 8013460:	af00      	add	r7, sp, #0
 8013462:	4603      	mov	r3, r0
 8013464:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8013466:	4b05      	ldr	r3, [pc, #20]	@ (801347c <ptr_to_mem+0x20>)
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	88fb      	ldrh	r3, [r7, #6]
 801346c:	4413      	add	r3, r2
}
 801346e:	4618      	mov	r0, r3
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr
 801347a:	bf00      	nop
 801347c:	2001f0c8 	.word	0x2001f0c8

08013480 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013480:	b480      	push	{r7}
 8013482:	b083      	sub	sp, #12
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013488:	4b05      	ldr	r3, [pc, #20]	@ (80134a0 <mem_to_ptr+0x20>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	1ad3      	subs	r3, r2, r3
 8013490:	b29b      	uxth	r3, r3
}
 8013492:	4618      	mov	r0, r3
 8013494:	370c      	adds	r7, #12
 8013496:	46bd      	mov	sp, r7
 8013498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349c:	4770      	bx	lr
 801349e:	bf00      	nop
 80134a0:	2001f0c8 	.word	0x2001f0c8

080134a4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80134a4:	b590      	push	{r4, r7, lr}
 80134a6:	b085      	sub	sp, #20
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80134ac:	4b45      	ldr	r3, [pc, #276]	@ (80135c4 <plug_holes+0x120>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d206      	bcs.n	80134c4 <plug_holes+0x20>
 80134b6:	4b44      	ldr	r3, [pc, #272]	@ (80135c8 <plug_holes+0x124>)
 80134b8:	f240 12df 	movw	r2, #479	@ 0x1df
 80134bc:	4943      	ldr	r1, [pc, #268]	@ (80135cc <plug_holes+0x128>)
 80134be:	4844      	ldr	r0, [pc, #272]	@ (80135d0 <plug_holes+0x12c>)
 80134c0:	f00c fef2 	bl	80202a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80134c4:	4b43      	ldr	r3, [pc, #268]	@ (80135d4 <plug_holes+0x130>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d306      	bcc.n	80134dc <plug_holes+0x38>
 80134ce:	4b3e      	ldr	r3, [pc, #248]	@ (80135c8 <plug_holes+0x124>)
 80134d0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80134d4:	4940      	ldr	r1, [pc, #256]	@ (80135d8 <plug_holes+0x134>)
 80134d6:	483e      	ldr	r0, [pc, #248]	@ (80135d0 <plug_holes+0x12c>)
 80134d8:	f00c fee6 	bl	80202a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	791b      	ldrb	r3, [r3, #4]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d006      	beq.n	80134f2 <plug_holes+0x4e>
 80134e4:	4b38      	ldr	r3, [pc, #224]	@ (80135c8 <plug_holes+0x124>)
 80134e6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80134ea:	493c      	ldr	r1, [pc, #240]	@ (80135dc <plug_holes+0x138>)
 80134ec:	4838      	ldr	r0, [pc, #224]	@ (80135d0 <plug_holes+0x12c>)
 80134ee:	f00c fedb 	bl	80202a8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	881b      	ldrh	r3, [r3, #0]
 80134f6:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80134fa:	d906      	bls.n	801350a <plug_holes+0x66>
 80134fc:	4b32      	ldr	r3, [pc, #200]	@ (80135c8 <plug_holes+0x124>)
 80134fe:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8013502:	4937      	ldr	r1, [pc, #220]	@ (80135e0 <plug_holes+0x13c>)
 8013504:	4832      	ldr	r0, [pc, #200]	@ (80135d0 <plug_holes+0x12c>)
 8013506:	f00c fecf 	bl	80202a8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	881b      	ldrh	r3, [r3, #0]
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff ffa4 	bl	801345c <ptr_to_mem>
 8013514:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013516:	687a      	ldr	r2, [r7, #4]
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	429a      	cmp	r2, r3
 801351c:	d024      	beq.n	8013568 <plug_holes+0xc4>
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	791b      	ldrb	r3, [r3, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d120      	bne.n	8013568 <plug_holes+0xc4>
 8013526:	4b2b      	ldr	r3, [pc, #172]	@ (80135d4 <plug_holes+0x130>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	68fa      	ldr	r2, [r7, #12]
 801352c:	429a      	cmp	r2, r3
 801352e:	d01b      	beq.n	8013568 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013530:	4b2c      	ldr	r3, [pc, #176]	@ (80135e4 <plug_holes+0x140>)
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	68fa      	ldr	r2, [r7, #12]
 8013536:	429a      	cmp	r2, r3
 8013538:	d102      	bne.n	8013540 <plug_holes+0x9c>
      lfree = mem;
 801353a:	4a2a      	ldr	r2, [pc, #168]	@ (80135e4 <plug_holes+0x140>)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	881a      	ldrh	r2, [r3, #0]
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	881b      	ldrh	r3, [r3, #0]
 801354c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013550:	d00a      	beq.n	8013568 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	881b      	ldrh	r3, [r3, #0]
 8013556:	4618      	mov	r0, r3
 8013558:	f7ff ff80 	bl	801345c <ptr_to_mem>
 801355c:	4604      	mov	r4, r0
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f7ff ff8e 	bl	8013480 <mem_to_ptr>
 8013564:	4603      	mov	r3, r0
 8013566:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	885b      	ldrh	r3, [r3, #2]
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff ff75 	bl	801345c <ptr_to_mem>
 8013572:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013574:	68ba      	ldr	r2, [r7, #8]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	429a      	cmp	r2, r3
 801357a:	d01f      	beq.n	80135bc <plug_holes+0x118>
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	791b      	ldrb	r3, [r3, #4]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d11b      	bne.n	80135bc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013584:	4b17      	ldr	r3, [pc, #92]	@ (80135e4 <plug_holes+0x140>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	429a      	cmp	r2, r3
 801358c:	d102      	bne.n	8013594 <plug_holes+0xf0>
      lfree = pmem;
 801358e:	4a15      	ldr	r2, [pc, #84]	@ (80135e4 <plug_holes+0x140>)
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	881a      	ldrh	r2, [r3, #0]
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	881b      	ldrh	r3, [r3, #0]
 80135a0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80135a4:	d00a      	beq.n	80135bc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	881b      	ldrh	r3, [r3, #0]
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7ff ff56 	bl	801345c <ptr_to_mem>
 80135b0:	4604      	mov	r4, r0
 80135b2:	68b8      	ldr	r0, [r7, #8]
 80135b4:	f7ff ff64 	bl	8013480 <mem_to_ptr>
 80135b8:	4603      	mov	r3, r0
 80135ba:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80135bc:	bf00      	nop
 80135be:	3714      	adds	r7, #20
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd90      	pop	{r4, r7, pc}
 80135c4:	2001f0c8 	.word	0x2001f0c8
 80135c8:	08021ee0 	.word	0x08021ee0
 80135cc:	08021f10 	.word	0x08021f10
 80135d0:	08021f28 	.word	0x08021f28
 80135d4:	2001f0cc 	.word	0x2001f0cc
 80135d8:	08021f50 	.word	0x08021f50
 80135dc:	08021f6c 	.word	0x08021f6c
 80135e0:	08021f88 	.word	0x08021f88
 80135e4:	2001f0d4 	.word	0x2001f0d4

080135e8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80135ee:	4b1f      	ldr	r3, [pc, #124]	@ (801366c <mem_init+0x84>)
 80135f0:	4a1f      	ldr	r2, [pc, #124]	@ (8013670 <mem_init+0x88>)
 80135f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80135f4:	4b1d      	ldr	r3, [pc, #116]	@ (801366c <mem_init+0x84>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013600:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2200      	movs	r2, #0
 8013606:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2200      	movs	r2, #0
 801360c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801360e:	f44f 40c8 	mov.w	r0, #25600	@ 0x6400
 8013612:	f7ff ff23 	bl	801345c <ptr_to_mem>
 8013616:	4603      	mov	r3, r0
 8013618:	4a16      	ldr	r2, [pc, #88]	@ (8013674 <mem_init+0x8c>)
 801361a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801361c:	4b15      	ldr	r3, [pc, #84]	@ (8013674 <mem_init+0x8c>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	2201      	movs	r2, #1
 8013622:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013624:	4b13      	ldr	r3, [pc, #76]	@ (8013674 <mem_init+0x8c>)
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 801362c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801362e:	4b11      	ldr	r3, [pc, #68]	@ (8013674 <mem_init+0x8c>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013636:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013638:	4b0c      	ldr	r3, [pc, #48]	@ (801366c <mem_init+0x84>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4a0e      	ldr	r2, [pc, #56]	@ (8013678 <mem_init+0x90>)
 801363e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013640:	4b0e      	ldr	r3, [pc, #56]	@ (801367c <mem_init+0x94>)
 8013642:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013646:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801364a:	480d      	ldr	r0, [pc, #52]	@ (8013680 <mem_init+0x98>)
 801364c:	f00b fb30 	bl	801ecb0 <sys_mutex_new>
 8013650:	4603      	mov	r3, r0
 8013652:	2b00      	cmp	r3, #0
 8013654:	d006      	beq.n	8013664 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013656:	4b0b      	ldr	r3, [pc, #44]	@ (8013684 <mem_init+0x9c>)
 8013658:	f240 221f 	movw	r2, #543	@ 0x21f
 801365c:	490a      	ldr	r1, [pc, #40]	@ (8013688 <mem_init+0xa0>)
 801365e:	480b      	ldr	r0, [pc, #44]	@ (801368c <mem_init+0xa4>)
 8013660:	f00c fe22 	bl	80202a8 <iprintf>
  }
}
 8013664:	bf00      	nop
 8013666:	3708      	adds	r7, #8
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	2001f0c8 	.word	0x2001f0c8
 8013670:	20048000 	.word	0x20048000
 8013674:	2001f0cc 	.word	0x2001f0cc
 8013678:	2001f0d4 	.word	0x2001f0d4
 801367c:	200252ac 	.word	0x200252ac
 8013680:	2001f0d0 	.word	0x2001f0d0
 8013684:	08021ee0 	.word	0x08021ee0
 8013688:	08021fb4 	.word	0x08021fb4
 801368c:	08021f28 	.word	0x08021f28

08013690 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b086      	sub	sp, #24
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f7ff fef1 	bl	8013480 <mem_to_ptr>
 801369e:	4603      	mov	r3, r0
 80136a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	881b      	ldrh	r3, [r3, #0]
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7ff fed8 	bl	801345c <ptr_to_mem>
 80136ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	885b      	ldrh	r3, [r3, #2]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7ff fed2 	bl	801345c <ptr_to_mem>
 80136b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80136c2:	d818      	bhi.n	80136f6 <mem_link_valid+0x66>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	885b      	ldrh	r3, [r3, #2]
 80136c8:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80136cc:	d813      	bhi.n	80136f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80136d2:	8afa      	ldrh	r2, [r7, #22]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d004      	beq.n	80136e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	881b      	ldrh	r3, [r3, #0]
 80136dc:	8afa      	ldrh	r2, [r7, #22]
 80136de:	429a      	cmp	r2, r3
 80136e0:	d109      	bne.n	80136f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80136e2:	4b08      	ldr	r3, [pc, #32]	@ (8013704 <mem_link_valid+0x74>)
 80136e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136e6:	693a      	ldr	r2, [r7, #16]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d006      	beq.n	80136fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	885b      	ldrh	r3, [r3, #2]
 80136f0:	8afa      	ldrh	r2, [r7, #22]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d001      	beq.n	80136fa <mem_link_valid+0x6a>
    return 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	e000      	b.n	80136fc <mem_link_valid+0x6c>
  }
  return 1;
 80136fa:	2301      	movs	r3, #1
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3718      	adds	r7, #24
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	2001f0cc 	.word	0x2001f0cc

08013708 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b088      	sub	sp, #32
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	f000 80a2 	beq.w	801385c <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f003 0303 	and.w	r3, r3, #3
 801371e:	2b00      	cmp	r3, #0
 8013720:	d015      	beq.n	801374e <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013722:	4b50      	ldr	r3, [pc, #320]	@ (8013864 <mem_free+0x15c>)
 8013724:	f240 2273 	movw	r2, #627	@ 0x273
 8013728:	494f      	ldr	r1, [pc, #316]	@ (8013868 <mem_free+0x160>)
 801372a:	4850      	ldr	r0, [pc, #320]	@ (801386c <mem_free+0x164>)
 801372c:	f00c fdbc 	bl	80202a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013730:	f00b fb30 	bl	801ed94 <sys_arch_protect>
 8013734:	60f8      	str	r0, [r7, #12]
 8013736:	4b4e      	ldr	r3, [pc, #312]	@ (8013870 <mem_free+0x168>)
 8013738:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801373c:	3301      	adds	r3, #1
 801373e:	b29a      	uxth	r2, r3
 8013740:	4b4b      	ldr	r3, [pc, #300]	@ (8013870 <mem_free+0x168>)
 8013742:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013746:	68f8      	ldr	r0, [r7, #12]
 8013748:	f00b fb32 	bl	801edb0 <sys_arch_unprotect>
    return;
 801374c:	e087      	b.n	801385e <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	3b08      	subs	r3, #8
 8013752:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013754:	4b47      	ldr	r3, [pc, #284]	@ (8013874 <mem_free+0x16c>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	69fa      	ldr	r2, [r7, #28]
 801375a:	429a      	cmp	r2, r3
 801375c:	d306      	bcc.n	801376c <mem_free+0x64>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f103 020c 	add.w	r2, r3, #12
 8013764:	4b44      	ldr	r3, [pc, #272]	@ (8013878 <mem_free+0x170>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	429a      	cmp	r2, r3
 801376a:	d915      	bls.n	8013798 <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801376c:	4b3d      	ldr	r3, [pc, #244]	@ (8013864 <mem_free+0x15c>)
 801376e:	f240 227f 	movw	r2, #639	@ 0x27f
 8013772:	4942      	ldr	r1, [pc, #264]	@ (801387c <mem_free+0x174>)
 8013774:	483d      	ldr	r0, [pc, #244]	@ (801386c <mem_free+0x164>)
 8013776:	f00c fd97 	bl	80202a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801377a:	f00b fb0b 	bl	801ed94 <sys_arch_protect>
 801377e:	6138      	str	r0, [r7, #16]
 8013780:	4b3b      	ldr	r3, [pc, #236]	@ (8013870 <mem_free+0x168>)
 8013782:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013786:	3301      	adds	r3, #1
 8013788:	b29a      	uxth	r2, r3
 801378a:	4b39      	ldr	r3, [pc, #228]	@ (8013870 <mem_free+0x168>)
 801378c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013790:	6938      	ldr	r0, [r7, #16]
 8013792:	f00b fb0d 	bl	801edb0 <sys_arch_unprotect>
    return;
 8013796:	e062      	b.n	801385e <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013798:	4839      	ldr	r0, [pc, #228]	@ (8013880 <mem_free+0x178>)
 801379a:	f00b fabf 	bl	801ed1c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801379e:	69fb      	ldr	r3, [r7, #28]
 80137a0:	791b      	ldrb	r3, [r3, #4]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d118      	bne.n	80137d8 <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80137a6:	4b2f      	ldr	r3, [pc, #188]	@ (8013864 <mem_free+0x15c>)
 80137a8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80137ac:	4935      	ldr	r1, [pc, #212]	@ (8013884 <mem_free+0x17c>)
 80137ae:	482f      	ldr	r0, [pc, #188]	@ (801386c <mem_free+0x164>)
 80137b0:	f00c fd7a 	bl	80202a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80137b4:	4832      	ldr	r0, [pc, #200]	@ (8013880 <mem_free+0x178>)
 80137b6:	f00b fac0 	bl	801ed3a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80137ba:	f00b faeb 	bl	801ed94 <sys_arch_protect>
 80137be:	6178      	str	r0, [r7, #20]
 80137c0:	4b2b      	ldr	r3, [pc, #172]	@ (8013870 <mem_free+0x168>)
 80137c2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80137c6:	3301      	adds	r3, #1
 80137c8:	b29a      	uxth	r2, r3
 80137ca:	4b29      	ldr	r3, [pc, #164]	@ (8013870 <mem_free+0x168>)
 80137cc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80137d0:	6978      	ldr	r0, [r7, #20]
 80137d2:	f00b faed 	bl	801edb0 <sys_arch_unprotect>
    return;
 80137d6:	e042      	b.n	801385e <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 80137d8:	69f8      	ldr	r0, [r7, #28]
 80137da:	f7ff ff59 	bl	8013690 <mem_link_valid>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d118      	bne.n	8013816 <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80137e4:	4b1f      	ldr	r3, [pc, #124]	@ (8013864 <mem_free+0x15c>)
 80137e6:	f240 2295 	movw	r2, #661	@ 0x295
 80137ea:	4927      	ldr	r1, [pc, #156]	@ (8013888 <mem_free+0x180>)
 80137ec:	481f      	ldr	r0, [pc, #124]	@ (801386c <mem_free+0x164>)
 80137ee:	f00c fd5b 	bl	80202a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80137f2:	4823      	ldr	r0, [pc, #140]	@ (8013880 <mem_free+0x178>)
 80137f4:	f00b faa1 	bl	801ed3a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80137f8:	f00b facc 	bl	801ed94 <sys_arch_protect>
 80137fc:	61b8      	str	r0, [r7, #24]
 80137fe:	4b1c      	ldr	r3, [pc, #112]	@ (8013870 <mem_free+0x168>)
 8013800:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013804:	3301      	adds	r3, #1
 8013806:	b29a      	uxth	r2, r3
 8013808:	4b19      	ldr	r3, [pc, #100]	@ (8013870 <mem_free+0x168>)
 801380a:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 801380e:	69b8      	ldr	r0, [r7, #24]
 8013810:	f00b face 	bl	801edb0 <sys_arch_unprotect>
    return;
 8013814:	e023      	b.n	801385e <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	2200      	movs	r2, #0
 801381a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801381c:	4b1b      	ldr	r3, [pc, #108]	@ (801388c <mem_free+0x184>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	69fa      	ldr	r2, [r7, #28]
 8013822:	429a      	cmp	r2, r3
 8013824:	d202      	bcs.n	801382c <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013826:	4a19      	ldr	r2, [pc, #100]	@ (801388c <mem_free+0x184>)
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801382c:	4b10      	ldr	r3, [pc, #64]	@ (8013870 <mem_free+0x168>)
 801382e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013832:	4b10      	ldr	r3, [pc, #64]	@ (8013874 <mem_free+0x16c>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	69f9      	ldr	r1, [r7, #28]
 8013838:	1acb      	subs	r3, r1, r3
 801383a:	b299      	uxth	r1, r3
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	881b      	ldrh	r3, [r3, #0]
 8013840:	1acb      	subs	r3, r1, r3
 8013842:	b29b      	uxth	r3, r3
 8013844:	4413      	add	r3, r2
 8013846:	b29a      	uxth	r2, r3
 8013848:	4b09      	ldr	r3, [pc, #36]	@ (8013870 <mem_free+0x168>)
 801384a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801384e:	69f8      	ldr	r0, [r7, #28]
 8013850:	f7ff fe28 	bl	80134a4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013854:	480a      	ldr	r0, [pc, #40]	@ (8013880 <mem_free+0x178>)
 8013856:	f00b fa70 	bl	801ed3a <sys_mutex_unlock>
 801385a:	e000      	b.n	801385e <mem_free+0x156>
    return;
 801385c:	bf00      	nop
}
 801385e:	3720      	adds	r7, #32
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	08021ee0 	.word	0x08021ee0
 8013868:	08021fd0 	.word	0x08021fd0
 801386c:	08021f28 	.word	0x08021f28
 8013870:	200252ac 	.word	0x200252ac
 8013874:	2001f0c8 	.word	0x2001f0c8
 8013878:	2001f0cc 	.word	0x2001f0cc
 801387c:	08021ff4 	.word	0x08021ff4
 8013880:	2001f0d0 	.word	0x2001f0d0
 8013884:	08022010 	.word	0x08022010
 8013888:	08022038 	.word	0x08022038
 801388c:	2001f0d4 	.word	0x2001f0d4

08013890 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b088      	sub	sp, #32
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	460b      	mov	r3, r1
 801389a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801389c:	887b      	ldrh	r3, [r7, #2]
 801389e:	3303      	adds	r3, #3
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	f023 0303 	bic.w	r3, r3, #3
 80138a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80138a8:	8bfb      	ldrh	r3, [r7, #30]
 80138aa:	2b0b      	cmp	r3, #11
 80138ac:	d801      	bhi.n	80138b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80138ae:	230c      	movs	r3, #12
 80138b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80138b2:	8bfb      	ldrh	r3, [r7, #30]
 80138b4:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80138b8:	d803      	bhi.n	80138c2 <mem_trim+0x32>
 80138ba:	8bfa      	ldrh	r2, [r7, #30]
 80138bc:	887b      	ldrh	r3, [r7, #2]
 80138be:	429a      	cmp	r2, r3
 80138c0:	d201      	bcs.n	80138c6 <mem_trim+0x36>
    return NULL;
 80138c2:	2300      	movs	r3, #0
 80138c4:	e0f8      	b.n	8013ab8 <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80138c6:	4b7e      	ldr	r3, [pc, #504]	@ (8013ac0 <mem_trim+0x230>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d304      	bcc.n	80138da <mem_trim+0x4a>
 80138d0:	4b7c      	ldr	r3, [pc, #496]	@ (8013ac4 <mem_trim+0x234>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	687a      	ldr	r2, [r7, #4]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d306      	bcc.n	80138e8 <mem_trim+0x58>
 80138da:	4b7b      	ldr	r3, [pc, #492]	@ (8013ac8 <mem_trim+0x238>)
 80138dc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80138e0:	497a      	ldr	r1, [pc, #488]	@ (8013acc <mem_trim+0x23c>)
 80138e2:	487b      	ldr	r0, [pc, #492]	@ (8013ad0 <mem_trim+0x240>)
 80138e4:	f00c fce0 	bl	80202a8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80138e8:	4b75      	ldr	r3, [pc, #468]	@ (8013ac0 <mem_trim+0x230>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d304      	bcc.n	80138fc <mem_trim+0x6c>
 80138f2:	4b74      	ldr	r3, [pc, #464]	@ (8013ac4 <mem_trim+0x234>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	687a      	ldr	r2, [r7, #4]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d30f      	bcc.n	801391c <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80138fc:	f00b fa4a 	bl	801ed94 <sys_arch_protect>
 8013900:	60b8      	str	r0, [r7, #8]
 8013902:	4b74      	ldr	r3, [pc, #464]	@ (8013ad4 <mem_trim+0x244>)
 8013904:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013908:	3301      	adds	r3, #1
 801390a:	b29a      	uxth	r2, r3
 801390c:	4b71      	ldr	r3, [pc, #452]	@ (8013ad4 <mem_trim+0x244>)
 801390e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013912:	68b8      	ldr	r0, [r7, #8]
 8013914:	f00b fa4c 	bl	801edb0 <sys_arch_unprotect>
    return rmem;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	e0cd      	b.n	8013ab8 <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	3b08      	subs	r3, #8
 8013920:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013922:	69b8      	ldr	r0, [r7, #24]
 8013924:	f7ff fdac 	bl	8013480 <mem_to_ptr>
 8013928:	4603      	mov	r3, r0
 801392a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801392c:	69bb      	ldr	r3, [r7, #24]
 801392e:	881a      	ldrh	r2, [r3, #0]
 8013930:	8afb      	ldrh	r3, [r7, #22]
 8013932:	1ad3      	subs	r3, r2, r3
 8013934:	b29b      	uxth	r3, r3
 8013936:	3b08      	subs	r3, #8
 8013938:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801393a:	8bfa      	ldrh	r2, [r7, #30]
 801393c:	8abb      	ldrh	r3, [r7, #20]
 801393e:	429a      	cmp	r2, r3
 8013940:	d906      	bls.n	8013950 <mem_trim+0xc0>
 8013942:	4b61      	ldr	r3, [pc, #388]	@ (8013ac8 <mem_trim+0x238>)
 8013944:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013948:	4963      	ldr	r1, [pc, #396]	@ (8013ad8 <mem_trim+0x248>)
 801394a:	4861      	ldr	r0, [pc, #388]	@ (8013ad0 <mem_trim+0x240>)
 801394c:	f00c fcac 	bl	80202a8 <iprintf>
  if (newsize > size) {
 8013950:	8bfa      	ldrh	r2, [r7, #30]
 8013952:	8abb      	ldrh	r3, [r7, #20]
 8013954:	429a      	cmp	r2, r3
 8013956:	d901      	bls.n	801395c <mem_trim+0xcc>
    /* not supported */
    return NULL;
 8013958:	2300      	movs	r3, #0
 801395a:	e0ad      	b.n	8013ab8 <mem_trim+0x228>
  }
  if (newsize == size) {
 801395c:	8bfa      	ldrh	r2, [r7, #30]
 801395e:	8abb      	ldrh	r3, [r7, #20]
 8013960:	429a      	cmp	r2, r3
 8013962:	d101      	bne.n	8013968 <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	e0a7      	b.n	8013ab8 <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013968:	485c      	ldr	r0, [pc, #368]	@ (8013adc <mem_trim+0x24c>)
 801396a:	f00b f9d7 	bl	801ed1c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	881b      	ldrh	r3, [r3, #0]
 8013972:	4618      	mov	r0, r3
 8013974:	f7ff fd72 	bl	801345c <ptr_to_mem>
 8013978:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	791b      	ldrb	r3, [r3, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d14b      	bne.n	8013a1a <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	881b      	ldrh	r3, [r3, #0]
 8013986:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801398a:	d106      	bne.n	801399a <mem_trim+0x10a>
 801398c:	4b4e      	ldr	r3, [pc, #312]	@ (8013ac8 <mem_trim+0x238>)
 801398e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013992:	4953      	ldr	r1, [pc, #332]	@ (8013ae0 <mem_trim+0x250>)
 8013994:	484e      	ldr	r0, [pc, #312]	@ (8013ad0 <mem_trim+0x240>)
 8013996:	f00c fc87 	bl	80202a8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	881b      	ldrh	r3, [r3, #0]
 801399e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80139a0:	8afa      	ldrh	r2, [r7, #22]
 80139a2:	8bfb      	ldrh	r3, [r7, #30]
 80139a4:	4413      	add	r3, r2
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	3308      	adds	r3, #8
 80139aa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80139ac:	4b4d      	ldr	r3, [pc, #308]	@ (8013ae4 <mem_trim+0x254>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	693a      	ldr	r2, [r7, #16]
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d106      	bne.n	80139c4 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 80139b6:	89fb      	ldrh	r3, [r7, #14]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7ff fd4f 	bl	801345c <ptr_to_mem>
 80139be:	4603      	mov	r3, r0
 80139c0:	4a48      	ldr	r2, [pc, #288]	@ (8013ae4 <mem_trim+0x254>)
 80139c2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80139c4:	89fb      	ldrh	r3, [r7, #14]
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7ff fd48 	bl	801345c <ptr_to_mem>
 80139cc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	2200      	movs	r2, #0
 80139d2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	89ba      	ldrh	r2, [r7, #12]
 80139d8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	8afa      	ldrh	r2, [r7, #22]
 80139de:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80139e0:	69bb      	ldr	r3, [r7, #24]
 80139e2:	89fa      	ldrh	r2, [r7, #14]
 80139e4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	881b      	ldrh	r3, [r3, #0]
 80139ea:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80139ee:	d007      	beq.n	8013a00 <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	881b      	ldrh	r3, [r3, #0]
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7ff fd31 	bl	801345c <ptr_to_mem>
 80139fa:	4602      	mov	r2, r0
 80139fc:	89fb      	ldrh	r3, [r7, #14]
 80139fe:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013a00:	4b34      	ldr	r3, [pc, #208]	@ (8013ad4 <mem_trim+0x244>)
 8013a02:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013a06:	8bf9      	ldrh	r1, [r7, #30]
 8013a08:	8abb      	ldrh	r3, [r7, #20]
 8013a0a:	1acb      	subs	r3, r1, r3
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	4413      	add	r3, r2
 8013a10:	b29a      	uxth	r2, r3
 8013a12:	4b30      	ldr	r3, [pc, #192]	@ (8013ad4 <mem_trim+0x244>)
 8013a14:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013a18:	e04a      	b.n	8013ab0 <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013a1a:	8bfb      	ldrh	r3, [r7, #30]
 8013a1c:	f103 0214 	add.w	r2, r3, #20
 8013a20:	8abb      	ldrh	r3, [r7, #20]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d844      	bhi.n	8013ab0 <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013a26:	8afa      	ldrh	r2, [r7, #22]
 8013a28:	8bfb      	ldrh	r3, [r7, #30]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	3308      	adds	r3, #8
 8013a30:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013a32:	69bb      	ldr	r3, [r7, #24]
 8013a34:	881b      	ldrh	r3, [r3, #0]
 8013a36:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013a3a:	d106      	bne.n	8013a4a <mem_trim+0x1ba>
 8013a3c:	4b22      	ldr	r3, [pc, #136]	@ (8013ac8 <mem_trim+0x238>)
 8013a3e:	f240 3216 	movw	r2, #790	@ 0x316
 8013a42:	4927      	ldr	r1, [pc, #156]	@ (8013ae0 <mem_trim+0x250>)
 8013a44:	4822      	ldr	r0, [pc, #136]	@ (8013ad0 <mem_trim+0x240>)
 8013a46:	f00c fc2f 	bl	80202a8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013a4a:	89fb      	ldrh	r3, [r7, #14]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff fd05 	bl	801345c <ptr_to_mem>
 8013a52:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013a54:	4b23      	ldr	r3, [pc, #140]	@ (8013ae4 <mem_trim+0x254>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	693a      	ldr	r2, [r7, #16]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d202      	bcs.n	8013a64 <mem_trim+0x1d4>
      lfree = mem2;
 8013a5e:	4a21      	ldr	r2, [pc, #132]	@ (8013ae4 <mem_trim+0x254>)
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	2200      	movs	r2, #0
 8013a68:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013a6a:	69bb      	ldr	r3, [r7, #24]
 8013a6c:	881a      	ldrh	r2, [r3, #0]
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	8afa      	ldrh	r2, [r7, #22]
 8013a76:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	89fa      	ldrh	r2, [r7, #14]
 8013a7c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	881b      	ldrh	r3, [r3, #0]
 8013a82:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013a86:	d007      	beq.n	8013a98 <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	881b      	ldrh	r3, [r3, #0]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7ff fce5 	bl	801345c <ptr_to_mem>
 8013a92:	4602      	mov	r2, r0
 8013a94:	89fb      	ldrh	r3, [r7, #14]
 8013a96:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013a98:	4b0e      	ldr	r3, [pc, #56]	@ (8013ad4 <mem_trim+0x244>)
 8013a9a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013a9e:	8bf9      	ldrh	r1, [r7, #30]
 8013aa0:	8abb      	ldrh	r3, [r7, #20]
 8013aa2:	1acb      	subs	r3, r1, r3
 8013aa4:	b29b      	uxth	r3, r3
 8013aa6:	4413      	add	r3, r2
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8013ad4 <mem_trim+0x244>)
 8013aac:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013ab0:	480a      	ldr	r0, [pc, #40]	@ (8013adc <mem_trim+0x24c>)
 8013ab2:	f00b f942 	bl	801ed3a <sys_mutex_unlock>
  return rmem;
 8013ab6:	687b      	ldr	r3, [r7, #4]
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3720      	adds	r7, #32
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	2001f0c8 	.word	0x2001f0c8
 8013ac4:	2001f0cc 	.word	0x2001f0cc
 8013ac8:	08021ee0 	.word	0x08021ee0
 8013acc:	0802206c 	.word	0x0802206c
 8013ad0:	08021f28 	.word	0x08021f28
 8013ad4:	200252ac 	.word	0x200252ac
 8013ad8:	08022084 	.word	0x08022084
 8013adc:	2001f0d0 	.word	0x2001f0d0
 8013ae0:	080220a4 	.word	0x080220a4
 8013ae4:	2001f0d4 	.word	0x2001f0d4

08013ae8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013ae8:	b590      	push	{r4, r7, lr}
 8013aea:	b089      	sub	sp, #36	@ 0x24
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	4603      	mov	r3, r0
 8013af0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013af2:	88fb      	ldrh	r3, [r7, #6]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <mem_malloc+0x14>
    return NULL;
 8013af8:	2300      	movs	r3, #0
 8013afa:	e121      	b.n	8013d40 <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013afc:	88fb      	ldrh	r3, [r7, #6]
 8013afe:	3303      	adds	r3, #3
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	f023 0303 	bic.w	r3, r3, #3
 8013b06:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013b08:	8bbb      	ldrh	r3, [r7, #28]
 8013b0a:	2b0b      	cmp	r3, #11
 8013b0c:	d801      	bhi.n	8013b12 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013b0e:	230c      	movs	r3, #12
 8013b10:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013b12:	8bbb      	ldrh	r3, [r7, #28]
 8013b14:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013b18:	d803      	bhi.n	8013b22 <mem_malloc+0x3a>
 8013b1a:	8bba      	ldrh	r2, [r7, #28]
 8013b1c:	88fb      	ldrh	r3, [r7, #6]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d201      	bcs.n	8013b26 <mem_malloc+0x3e>
    return NULL;
 8013b22:	2300      	movs	r3, #0
 8013b24:	e10c      	b.n	8013d40 <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013b26:	4888      	ldr	r0, [pc, #544]	@ (8013d48 <mem_malloc+0x260>)
 8013b28:	f00b f8f8 	bl	801ed1c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013b2c:	4b87      	ldr	r3, [pc, #540]	@ (8013d4c <mem_malloc+0x264>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7ff fca5 	bl	8013480 <mem_to_ptr>
 8013b36:	4603      	mov	r3, r0
 8013b38:	83fb      	strh	r3, [r7, #30]
 8013b3a:	e0ee      	b.n	8013d1a <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013b3c:	8bfb      	ldrh	r3, [r7, #30]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7ff fc8c 	bl	801345c <ptr_to_mem>
 8013b44:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	791b      	ldrb	r3, [r3, #4]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	f040 80de 	bne.w	8013d0c <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	881b      	ldrh	r3, [r3, #0]
 8013b54:	461a      	mov	r2, r3
 8013b56:	8bfb      	ldrh	r3, [r7, #30]
 8013b58:	1ad3      	subs	r3, r2, r3
 8013b5a:	f1a3 0208 	sub.w	r2, r3, #8
 8013b5e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013b60:	429a      	cmp	r2, r3
 8013b62:	f0c0 80d3 	bcc.w	8013d0c <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	881b      	ldrh	r3, [r3, #0]
 8013b6a:	461a      	mov	r2, r3
 8013b6c:	8bfb      	ldrh	r3, [r7, #30]
 8013b6e:	1ad3      	subs	r3, r2, r3
 8013b70:	f1a3 0208 	sub.w	r2, r3, #8
 8013b74:	8bbb      	ldrh	r3, [r7, #28]
 8013b76:	3314      	adds	r3, #20
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d34c      	bcc.n	8013c16 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013b7c:	8bfa      	ldrh	r2, [r7, #30]
 8013b7e:	8bbb      	ldrh	r3, [r7, #28]
 8013b80:	4413      	add	r3, r2
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	3308      	adds	r3, #8
 8013b86:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013b88:	8a7b      	ldrh	r3, [r7, #18]
 8013b8a:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013b8e:	d106      	bne.n	8013b9e <mem_malloc+0xb6>
 8013b90:	4b6f      	ldr	r3, [pc, #444]	@ (8013d50 <mem_malloc+0x268>)
 8013b92:	f240 3287 	movw	r2, #903	@ 0x387
 8013b96:	496f      	ldr	r1, [pc, #444]	@ (8013d54 <mem_malloc+0x26c>)
 8013b98:	486f      	ldr	r0, [pc, #444]	@ (8013d58 <mem_malloc+0x270>)
 8013b9a:	f00c fb85 	bl	80202a8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013b9e:	8a7b      	ldrh	r3, [r7, #18]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7ff fc5b 	bl	801345c <ptr_to_mem>
 8013ba6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2200      	movs	r2, #0
 8013bac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	881a      	ldrh	r2, [r3, #0]
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	8bfa      	ldrh	r2, [r7, #30]
 8013bba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	8a7a      	ldrh	r2, [r7, #18]
 8013bc0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	881b      	ldrh	r3, [r3, #0]
 8013bcc:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013bd0:	d007      	beq.n	8013be2 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	881b      	ldrh	r3, [r3, #0]
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ff fc40 	bl	801345c <ptr_to_mem>
 8013bdc:	4602      	mov	r2, r0
 8013bde:	8a7b      	ldrh	r3, [r7, #18]
 8013be0:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8013be2:	4b5e      	ldr	r3, [pc, #376]	@ (8013d5c <mem_malloc+0x274>)
 8013be4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013be8:	8bbb      	ldrh	r3, [r7, #28]
 8013bea:	4413      	add	r3, r2
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	3308      	adds	r3, #8
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8013d5c <mem_malloc+0x274>)
 8013bf4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013bf8:	4b58      	ldr	r3, [pc, #352]	@ (8013d5c <mem_malloc+0x274>)
 8013bfa:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	@ 0xae
 8013bfe:	4b57      	ldr	r3, [pc, #348]	@ (8013d5c <mem_malloc+0x274>)
 8013c00:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d227      	bcs.n	8013c58 <mem_malloc+0x170>
 8013c08:	4b54      	ldr	r3, [pc, #336]	@ (8013d5c <mem_malloc+0x274>)
 8013c0a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013c0e:	4b53      	ldr	r3, [pc, #332]	@ (8013d5c <mem_malloc+0x274>)
 8013c10:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 8013c14:	e020      	b.n	8013c58 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	2201      	movs	r2, #1
 8013c1a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8013c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8013d5c <mem_malloc+0x274>)
 8013c1e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	881b      	ldrh	r3, [r3, #0]
 8013c26:	4413      	add	r3, r2
 8013c28:	b29c      	uxth	r4, r3
 8013c2a:	6978      	ldr	r0, [r7, #20]
 8013c2c:	f7ff fc28 	bl	8013480 <mem_to_ptr>
 8013c30:	4603      	mov	r3, r0
 8013c32:	1ae3      	subs	r3, r4, r3
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	4b49      	ldr	r3, [pc, #292]	@ (8013d5c <mem_malloc+0x274>)
 8013c38:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013c3c:	4b47      	ldr	r3, [pc, #284]	@ (8013d5c <mem_malloc+0x274>)
 8013c3e:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	@ 0xae
 8013c42:	4b46      	ldr	r3, [pc, #280]	@ (8013d5c <mem_malloc+0x274>)
 8013c44:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d205      	bcs.n	8013c58 <mem_malloc+0x170>
 8013c4c:	4b43      	ldr	r3, [pc, #268]	@ (8013d5c <mem_malloc+0x274>)
 8013c4e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013c52:	4b42      	ldr	r3, [pc, #264]	@ (8013d5c <mem_malloc+0x274>)
 8013c54:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013c58:	4b3c      	ldr	r3, [pc, #240]	@ (8013d4c <mem_malloc+0x264>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	697a      	ldr	r2, [r7, #20]
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d127      	bne.n	8013cb2 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 8013c62:	4b3a      	ldr	r3, [pc, #232]	@ (8013d4c <mem_malloc+0x264>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013c68:	e005      	b.n	8013c76 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	881b      	ldrh	r3, [r3, #0]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7ff fbf4 	bl	801345c <ptr_to_mem>
 8013c74:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013c76:	69bb      	ldr	r3, [r7, #24]
 8013c78:	791b      	ldrb	r3, [r3, #4]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d004      	beq.n	8013c88 <mem_malloc+0x1a0>
 8013c7e:	4b38      	ldr	r3, [pc, #224]	@ (8013d60 <mem_malloc+0x278>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	69ba      	ldr	r2, [r7, #24]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d1f0      	bne.n	8013c6a <mem_malloc+0x182>
          }
          lfree = cur;
 8013c88:	4a30      	ldr	r2, [pc, #192]	@ (8013d4c <mem_malloc+0x264>)
 8013c8a:	69bb      	ldr	r3, [r7, #24]
 8013c8c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8013d4c <mem_malloc+0x264>)
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	4b33      	ldr	r3, [pc, #204]	@ (8013d60 <mem_malloc+0x278>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d00b      	beq.n	8013cb2 <mem_malloc+0x1ca>
 8013c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8013d4c <mem_malloc+0x264>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	791b      	ldrb	r3, [r3, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d006      	beq.n	8013cb2 <mem_malloc+0x1ca>
 8013ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8013d50 <mem_malloc+0x268>)
 8013ca6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013caa:	492e      	ldr	r1, [pc, #184]	@ (8013d64 <mem_malloc+0x27c>)
 8013cac:	482a      	ldr	r0, [pc, #168]	@ (8013d58 <mem_malloc+0x270>)
 8013cae:	f00c fafb 	bl	80202a8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013cb2:	4825      	ldr	r0, [pc, #148]	@ (8013d48 <mem_malloc+0x260>)
 8013cb4:	f00b f841 	bl	801ed3a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013cb8:	8bba      	ldrh	r2, [r7, #28]
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	3308      	adds	r3, #8
 8013cc0:	4a27      	ldr	r2, [pc, #156]	@ (8013d60 <mem_malloc+0x278>)
 8013cc2:	6812      	ldr	r2, [r2, #0]
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	d906      	bls.n	8013cd6 <mem_malloc+0x1ee>
 8013cc8:	4b21      	ldr	r3, [pc, #132]	@ (8013d50 <mem_malloc+0x268>)
 8013cca:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013cce:	4926      	ldr	r1, [pc, #152]	@ (8013d68 <mem_malloc+0x280>)
 8013cd0:	4821      	ldr	r0, [pc, #132]	@ (8013d58 <mem_malloc+0x270>)
 8013cd2:	f00c fae9 	bl	80202a8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	f003 0303 	and.w	r3, r3, #3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d006      	beq.n	8013cee <mem_malloc+0x206>
 8013ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8013d50 <mem_malloc+0x268>)
 8013ce2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013ce6:	4921      	ldr	r1, [pc, #132]	@ (8013d6c <mem_malloc+0x284>)
 8013ce8:	481b      	ldr	r0, [pc, #108]	@ (8013d58 <mem_malloc+0x270>)
 8013cea:	f00c fadd 	bl	80202a8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	f003 0303 	and.w	r3, r3, #3
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d006      	beq.n	8013d06 <mem_malloc+0x21e>
 8013cf8:	4b15      	ldr	r3, [pc, #84]	@ (8013d50 <mem_malloc+0x268>)
 8013cfa:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013cfe:	491c      	ldr	r1, [pc, #112]	@ (8013d70 <mem_malloc+0x288>)
 8013d00:	4815      	ldr	r0, [pc, #84]	@ (8013d58 <mem_malloc+0x270>)
 8013d02:	f00c fad1 	bl	80202a8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	3308      	adds	r3, #8
 8013d0a:	e019      	b.n	8013d40 <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 8013d0c:	8bfb      	ldrh	r3, [r7, #30]
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7ff fba4 	bl	801345c <ptr_to_mem>
 8013d14:	4603      	mov	r3, r0
 8013d16:	881b      	ldrh	r3, [r3, #0]
 8013d18:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013d1a:	8bfa      	ldrh	r2, [r7, #30]
 8013d1c:	8bbb      	ldrh	r3, [r7, #28]
 8013d1e:	f5c3 43c8 	rsb	r3, r3, #25600	@ 0x6400
 8013d22:	429a      	cmp	r2, r3
 8013d24:	f4ff af0a 	bcc.w	8013b3c <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8013d28:	4b0c      	ldr	r3, [pc, #48]	@ (8013d5c <mem_malloc+0x274>)
 8013d2a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8013d2e:	3301      	adds	r3, #1
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	4b0a      	ldr	r3, [pc, #40]	@ (8013d5c <mem_malloc+0x274>)
 8013d34:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013d38:	4803      	ldr	r0, [pc, #12]	@ (8013d48 <mem_malloc+0x260>)
 8013d3a:	f00a fffe 	bl	801ed3a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013d3e:	2300      	movs	r3, #0
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3724      	adds	r7, #36	@ 0x24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd90      	pop	{r4, r7, pc}
 8013d48:	2001f0d0 	.word	0x2001f0d0
 8013d4c:	2001f0d4 	.word	0x2001f0d4
 8013d50:	08021ee0 	.word	0x08021ee0
 8013d54:	080220a4 	.word	0x080220a4
 8013d58:	08021f28 	.word	0x08021f28
 8013d5c:	200252ac 	.word	0x200252ac
 8013d60:	2001f0cc 	.word	0x2001f0cc
 8013d64:	080220b8 	.word	0x080220b8
 8013d68:	080220d4 	.word	0x080220d4
 8013d6c:	08022104 	.word	0x08022104
 8013d70:	08022134 	.word	0x08022134

08013d74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013d74:	b480      	push	{r7}
 8013d76:	b085      	sub	sp, #20
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	68db      	ldr	r3, [r3, #12]
 8013d80:	2200      	movs	r2, #0
 8013d82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	689b      	ldr	r3, [r3, #8]
 8013d88:	3303      	adds	r3, #3
 8013d8a:	f023 0303 	bic.w	r3, r3, #3
 8013d8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013d90:	2300      	movs	r3, #0
 8013d92:	60fb      	str	r3, [r7, #12]
 8013d94:	e011      	b.n	8013dba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	68ba      	ldr	r2, [r7, #8]
 8013da6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	889b      	ldrh	r3, [r3, #4]
 8013dac:	461a      	mov	r2, r3
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	4413      	add	r3, r2
 8013db2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	3301      	adds	r3, #1
 8013db8:	60fb      	str	r3, [r7, #12]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	88db      	ldrh	r3, [r3, #6]
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	dbe7      	blt.n	8013d96 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	88d2      	ldrh	r2, [r2, #6]
 8013dce:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013dd0:	bf00      	nop
 8013dd2:	3714      	adds	r7, #20
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dda:	4770      	bx	lr

08013ddc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013de2:	2300      	movs	r3, #0
 8013de4:	80fb      	strh	r3, [r7, #6]
 8013de6:	e014      	b.n	8013e12 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8013de8:	88fb      	ldrh	r3, [r7, #6]
 8013dea:	4a0e      	ldr	r2, [pc, #56]	@ (8013e24 <memp_init+0x48>)
 8013dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7ff ffbf 	bl	8013d74 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8013df6:	88fb      	ldrh	r3, [r7, #6]
 8013df8:	4a0a      	ldr	r2, [pc, #40]	@ (8013e24 <memp_init+0x48>)
 8013dfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013dfe:	88fb      	ldrh	r3, [r7, #6]
 8013e00:	6812      	ldr	r2, [r2, #0]
 8013e02:	4909      	ldr	r1, [pc, #36]	@ (8013e28 <memp_init+0x4c>)
 8013e04:	332c      	adds	r3, #44	@ 0x2c
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	440b      	add	r3, r1
 8013e0a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013e0c:	88fb      	ldrh	r3, [r7, #6]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	80fb      	strh	r3, [r7, #6]
 8013e12:	88fb      	ldrh	r3, [r7, #6]
 8013e14:	2b0c      	cmp	r3, #12
 8013e16:	d9e7      	bls.n	8013de8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013e18:	bf00      	nop
 8013e1a:	bf00      	nop
 8013e1c:	3708      	adds	r7, #8
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}
 8013e22:	bf00      	nop
 8013e24:	08024f8c 	.word	0x08024f8c
 8013e28:	200252ac 	.word	0x200252ac

08013e2c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013e34:	f00a ffae 	bl	801ed94 <sys_arch_protect>
 8013e38:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d029      	beq.n	8013e9c <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	68db      	ldr	r3, [r3, #12]
 8013e4c:	68ba      	ldr	r2, [r7, #8]
 8013e4e:	6812      	ldr	r2, [r2, #0]
 8013e50:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	f003 0303 	and.w	r3, r3, #3
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d006      	beq.n	8013e6a <do_memp_malloc_pool+0x3e>
 8013e5c:	4b16      	ldr	r3, [pc, #88]	@ (8013eb8 <do_memp_malloc_pool+0x8c>)
 8013e5e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013e62:	4916      	ldr	r1, [pc, #88]	@ (8013ebc <do_memp_malloc_pool+0x90>)
 8013e64:	4816      	ldr	r0, [pc, #88]	@ (8013ec0 <do_memp_malloc_pool+0x94>)
 8013e66:	f00c fa1f 	bl	80202a8 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	889a      	ldrh	r2, [r3, #4]
 8013e70:	3201      	adds	r2, #1
 8013e72:	b292      	uxth	r2, r2
 8013e74:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	889a      	ldrh	r2, [r3, #4]
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	88db      	ldrh	r3, [r3, #6]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d905      	bls.n	8013e92 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	8892      	ldrh	r2, [r2, #4]
 8013e90:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013e92:	68f8      	ldr	r0, [r7, #12]
 8013e94:	f00a ff8c 	bl	801edb0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	e009      	b.n	8013eb0 <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	881a      	ldrh	r2, [r3, #0]
 8013ea2:	3201      	adds	r2, #1
 8013ea4:	b292      	uxth	r2, r2
 8013ea6:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013ea8:	68f8      	ldr	r0, [r7, #12]
 8013eaa:	f00a ff81 	bl	801edb0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013eae:	2300      	movs	r3, #0
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3710      	adds	r7, #16
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	08022158 	.word	0x08022158
 8013ebc:	08022188 	.word	0x08022188
 8013ec0:	080221ac 	.word	0x080221ac

08013ec4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d106      	bne.n	8013ee0 <memp_malloc_pool+0x1c>
 8013ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8013efc <memp_malloc_pool+0x38>)
 8013ed4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013ed8:	4909      	ldr	r1, [pc, #36]	@ (8013f00 <memp_malloc_pool+0x3c>)
 8013eda:	480a      	ldr	r0, [pc, #40]	@ (8013f04 <memp_malloc_pool+0x40>)
 8013edc:	f00c f9e4 	bl	80202a8 <iprintf>
  if (desc == NULL) {
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d101      	bne.n	8013eea <memp_malloc_pool+0x26>
    return NULL;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	e003      	b.n	8013ef2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f7ff ff9e 	bl	8013e2c <do_memp_malloc_pool>
 8013ef0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3708      	adds	r7, #8
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}
 8013efa:	bf00      	nop
 8013efc:	08022158 	.word	0x08022158
 8013f00:	080221d4 	.word	0x080221d4
 8013f04:	080221ac 	.word	0x080221ac

08013f08 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	4603      	mov	r3, r0
 8013f10:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013f12:	79fb      	ldrb	r3, [r7, #7]
 8013f14:	2b0c      	cmp	r3, #12
 8013f16:	d908      	bls.n	8013f2a <memp_malloc+0x22>
 8013f18:	4b0a      	ldr	r3, [pc, #40]	@ (8013f44 <memp_malloc+0x3c>)
 8013f1a:	f240 1257 	movw	r2, #343	@ 0x157
 8013f1e:	490a      	ldr	r1, [pc, #40]	@ (8013f48 <memp_malloc+0x40>)
 8013f20:	480a      	ldr	r0, [pc, #40]	@ (8013f4c <memp_malloc+0x44>)
 8013f22:	f00c f9c1 	bl	80202a8 <iprintf>
 8013f26:	2300      	movs	r3, #0
 8013f28:	e008      	b.n	8013f3c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013f2a:	79fb      	ldrb	r3, [r7, #7]
 8013f2c:	4a08      	ldr	r2, [pc, #32]	@ (8013f50 <memp_malloc+0x48>)
 8013f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7ff ff7a 	bl	8013e2c <do_memp_malloc_pool>
 8013f38:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013f3a:	68fb      	ldr	r3, [r7, #12]
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3710      	adds	r7, #16
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	08022158 	.word	0x08022158
 8013f48:	080221e8 	.word	0x080221e8
 8013f4c:	080221ac 	.word	0x080221ac
 8013f50:	08024f8c 	.word	0x08024f8c

08013f54 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b084      	sub	sp, #16
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	f003 0303 	and.w	r3, r3, #3
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d006      	beq.n	8013f76 <do_memp_free_pool+0x22>
 8013f68:	4b10      	ldr	r3, [pc, #64]	@ (8013fac <do_memp_free_pool+0x58>)
 8013f6a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8013f6e:	4910      	ldr	r1, [pc, #64]	@ (8013fb0 <do_memp_free_pool+0x5c>)
 8013f70:	4810      	ldr	r0, [pc, #64]	@ (8013fb4 <do_memp_free_pool+0x60>)
 8013f72:	f00c f999 	bl	80202a8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013f7a:	f00a ff0b 	bl	801ed94 <sys_arch_protect>
 8013f7e:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	889a      	ldrh	r2, [r3, #4]
 8013f86:	3a01      	subs	r2, #1
 8013f88:	b292      	uxth	r2, r2
 8013f8a:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	68db      	ldr	r3, [r3, #12]
 8013f9a:	68fa      	ldr	r2, [r7, #12]
 8013f9c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013f9e:	68b8      	ldr	r0, [r7, #8]
 8013fa0:	f00a ff06 	bl	801edb0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013fa4:	bf00      	nop
 8013fa6:	3710      	adds	r7, #16
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	08022158 	.word	0x08022158
 8013fb0:	08022208 	.word	0x08022208
 8013fb4:	080221ac 	.word	0x080221ac

08013fb8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d106      	bne.n	8013fd6 <memp_free_pool+0x1e>
 8013fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8013ff4 <memp_free_pool+0x3c>)
 8013fca:	f240 1295 	movw	r2, #405	@ 0x195
 8013fce:	490a      	ldr	r1, [pc, #40]	@ (8013ff8 <memp_free_pool+0x40>)
 8013fd0:	480a      	ldr	r0, [pc, #40]	@ (8013ffc <memp_free_pool+0x44>)
 8013fd2:	f00c f969 	bl	80202a8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d007      	beq.n	8013fec <memp_free_pool+0x34>
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d004      	beq.n	8013fec <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013fe2:	6839      	ldr	r1, [r7, #0]
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7ff ffb5 	bl	8013f54 <do_memp_free_pool>
 8013fea:	e000      	b.n	8013fee <memp_free_pool+0x36>
    return;
 8013fec:	bf00      	nop
}
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	08022158 	.word	0x08022158
 8013ff8:	080221d4 	.word	0x080221d4
 8013ffc:	080221ac 	.word	0x080221ac

08014000 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	4603      	mov	r3, r0
 8014008:	6039      	str	r1, [r7, #0]
 801400a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801400c:	79fb      	ldrb	r3, [r7, #7]
 801400e:	2b0c      	cmp	r3, #12
 8014010:	d907      	bls.n	8014022 <memp_free+0x22>
 8014012:	4b0c      	ldr	r3, [pc, #48]	@ (8014044 <memp_free+0x44>)
 8014014:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8014018:	490b      	ldr	r1, [pc, #44]	@ (8014048 <memp_free+0x48>)
 801401a:	480c      	ldr	r0, [pc, #48]	@ (801404c <memp_free+0x4c>)
 801401c:	f00c f944 	bl	80202a8 <iprintf>
 8014020:	e00c      	b.n	801403c <memp_free+0x3c>

  if (mem == NULL) {
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d008      	beq.n	801403a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014028:	79fb      	ldrb	r3, [r7, #7]
 801402a:	4a09      	ldr	r2, [pc, #36]	@ (8014050 <memp_free+0x50>)
 801402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014030:	6839      	ldr	r1, [r7, #0]
 8014032:	4618      	mov	r0, r3
 8014034:	f7ff ff8e 	bl	8013f54 <do_memp_free_pool>
 8014038:	e000      	b.n	801403c <memp_free+0x3c>
    return;
 801403a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801403c:	3708      	adds	r7, #8
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}
 8014042:	bf00      	nop
 8014044:	08022158 	.word	0x08022158
 8014048:	08022228 	.word	0x08022228
 801404c:	080221ac 	.word	0x080221ac
 8014050:	08024f8c 	.word	0x08024f8c

08014054 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014054:	b480      	push	{r7}
 8014056:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014058:	bf00      	nop
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr
	...

08014064 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b086      	sub	sp, #24
 8014068:	af00      	add	r7, sp, #0
 801406a:	60f8      	str	r0, [r7, #12]
 801406c:	60b9      	str	r1, [r7, #8]
 801406e:	607a      	str	r2, [r7, #4]
 8014070:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d108      	bne.n	801408a <netif_add+0x26>
 8014078:	4b57      	ldr	r3, [pc, #348]	@ (80141d8 <netif_add+0x174>)
 801407a:	f240 1227 	movw	r2, #295	@ 0x127
 801407e:	4957      	ldr	r1, [pc, #348]	@ (80141dc <netif_add+0x178>)
 8014080:	4857      	ldr	r0, [pc, #348]	@ (80141e0 <netif_add+0x17c>)
 8014082:	f00c f911 	bl	80202a8 <iprintf>
 8014086:	2300      	movs	r3, #0
 8014088:	e0a2      	b.n	80141d0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801408c:	2b00      	cmp	r3, #0
 801408e:	d108      	bne.n	80140a2 <netif_add+0x3e>
 8014090:	4b51      	ldr	r3, [pc, #324]	@ (80141d8 <netif_add+0x174>)
 8014092:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8014096:	4953      	ldr	r1, [pc, #332]	@ (80141e4 <netif_add+0x180>)
 8014098:	4851      	ldr	r0, [pc, #324]	@ (80141e0 <netif_add+0x17c>)
 801409a:	f00c f905 	bl	80202a8 <iprintf>
 801409e:	2300      	movs	r3, #0
 80140a0:	e096      	b.n	80141d0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d101      	bne.n	80140ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80140a8:	4b4f      	ldr	r3, [pc, #316]	@ (80141e8 <netif_add+0x184>)
 80140aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d101      	bne.n	80140b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80140b2:	4b4d      	ldr	r3, [pc, #308]	@ (80141e8 <netif_add+0x184>)
 80140b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d101      	bne.n	80140c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80140bc:	4b4a      	ldr	r3, [pc, #296]	@ (80141e8 <netif_add+0x184>)
 80140be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	2200      	movs	r2, #0
 80140c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	2200      	movs	r2, #0
 80140ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	2200      	movs	r2, #0
 80140d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	4a45      	ldr	r2, [pc, #276]	@ (80141ec <netif_add+0x188>)
 80140d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	2200      	movs	r2, #0
 80140dc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	2200      	movs	r2, #0
 80140e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	2200      	movs	r2, #0
 80140ea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	6a3a      	ldr	r2, [r7, #32]
 80140f0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80140f2:	4b3f      	ldr	r3, [pc, #252]	@ (80141f0 <netif_add+0x18c>)
 80140f4:	781a      	ldrb	r2, [r3, #0]
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014100:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	687a      	ldr	r2, [r7, #4]
 8014106:	68b9      	ldr	r1, [r7, #8]
 8014108:	68f8      	ldr	r0, [r7, #12]
 801410a:	f000 f913 	bl	8014334 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	4798      	blx	r3
 8014114:	4603      	mov	r3, r0
 8014116:	2b00      	cmp	r3, #0
 8014118:	d001      	beq.n	801411e <netif_add+0xba>
    return NULL;
 801411a:	2300      	movs	r3, #0
 801411c:	e058      	b.n	80141d0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014124:	2bff      	cmp	r3, #255	@ 0xff
 8014126:	d103      	bne.n	8014130 <netif_add+0xcc>
        netif->num = 0;
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	2200      	movs	r2, #0
 801412c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8014130:	2300      	movs	r3, #0
 8014132:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014134:	4b2f      	ldr	r3, [pc, #188]	@ (80141f4 <netif_add+0x190>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	617b      	str	r3, [r7, #20]
 801413a:	e02b      	b.n	8014194 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801413c:	697a      	ldr	r2, [r7, #20]
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	429a      	cmp	r2, r3
 8014142:	d106      	bne.n	8014152 <netif_add+0xee>
 8014144:	4b24      	ldr	r3, [pc, #144]	@ (80141d8 <netif_add+0x174>)
 8014146:	f240 128b 	movw	r2, #395	@ 0x18b
 801414a:	492b      	ldr	r1, [pc, #172]	@ (80141f8 <netif_add+0x194>)
 801414c:	4824      	ldr	r0, [pc, #144]	@ (80141e0 <netif_add+0x17c>)
 801414e:	f00c f8ab 	bl	80202a8 <iprintf>
        num_netifs++;
 8014152:	693b      	ldr	r3, [r7, #16]
 8014154:	3301      	adds	r3, #1
 8014156:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014158:	693b      	ldr	r3, [r7, #16]
 801415a:	2bff      	cmp	r3, #255	@ 0xff
 801415c:	dd06      	ble.n	801416c <netif_add+0x108>
 801415e:	4b1e      	ldr	r3, [pc, #120]	@ (80141d8 <netif_add+0x174>)
 8014160:	f240 128d 	movw	r2, #397	@ 0x18d
 8014164:	4925      	ldr	r1, [pc, #148]	@ (80141fc <netif_add+0x198>)
 8014166:	481e      	ldr	r0, [pc, #120]	@ (80141e0 <netif_add+0x17c>)
 8014168:	f00c f89e 	bl	80202a8 <iprintf>
        if (netif2->num == netif->num) {
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014178:	429a      	cmp	r2, r3
 801417a:	d108      	bne.n	801418e <netif_add+0x12a>
          netif->num++;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014182:	3301      	adds	r3, #1
 8014184:	b2da      	uxtb	r2, r3
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 801418c:	e005      	b.n	801419a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	617b      	str	r3, [r7, #20]
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d1d0      	bne.n	801413c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d1be      	bne.n	801411e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80141a6:	2bfe      	cmp	r3, #254	@ 0xfe
 80141a8:	d103      	bne.n	80141b2 <netif_add+0x14e>
    netif_num = 0;
 80141aa:	4b11      	ldr	r3, [pc, #68]	@ (80141f0 <netif_add+0x18c>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	701a      	strb	r2, [r3, #0]
 80141b0:	e006      	b.n	80141c0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80141b8:	3301      	adds	r3, #1
 80141ba:	b2da      	uxtb	r2, r3
 80141bc:	4b0c      	ldr	r3, [pc, #48]	@ (80141f0 <netif_add+0x18c>)
 80141be:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80141c0:	4b0c      	ldr	r3, [pc, #48]	@ (80141f4 <netif_add+0x190>)
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80141c8:	4a0a      	ldr	r2, [pc, #40]	@ (80141f4 <netif_add+0x190>)
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80141ce:	68fb      	ldr	r3, [r7, #12]
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3718      	adds	r7, #24
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	08022244 	.word	0x08022244
 80141dc:	080222d8 	.word	0x080222d8
 80141e0:	08022294 	.word	0x08022294
 80141e4:	080222f4 	.word	0x080222f4
 80141e8:	08025000 	.word	0x08025000
 80141ec:	0801460f 	.word	0x0801460f
 80141f0:	200252a8 	.word	0x200252a8
 80141f4:	200252a0 	.word	0x200252a0
 80141f8:	08022318 	.word	0x08022318
 80141fc:	0802232c 	.word	0x0802232c

08014200 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
 8014208:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801420a:	6839      	ldr	r1, [r7, #0]
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f002 fdc9 	bl	8016da4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8014212:	6839      	ldr	r1, [r7, #0]
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f007 ff61 	bl	801c0dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801421a:	bf00      	nop
 801421c:	3708      	adds	r7, #8
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
	...

08014224 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d106      	bne.n	8014244 <netif_do_set_ipaddr+0x20>
 8014236:	4b1d      	ldr	r3, [pc, #116]	@ (80142ac <netif_do_set_ipaddr+0x88>)
 8014238:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801423c:	491c      	ldr	r1, [pc, #112]	@ (80142b0 <netif_do_set_ipaddr+0x8c>)
 801423e:	481d      	ldr	r0, [pc, #116]	@ (80142b4 <netif_do_set_ipaddr+0x90>)
 8014240:	f00c f832 	bl	80202a8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d106      	bne.n	8014258 <netif_do_set_ipaddr+0x34>
 801424a:	4b18      	ldr	r3, [pc, #96]	@ (80142ac <netif_do_set_ipaddr+0x88>)
 801424c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8014250:	4917      	ldr	r1, [pc, #92]	@ (80142b0 <netif_do_set_ipaddr+0x8c>)
 8014252:	4818      	ldr	r0, [pc, #96]	@ (80142b4 <netif_do_set_ipaddr+0x90>)
 8014254:	f00c f828 	bl	80202a8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	3304      	adds	r3, #4
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	429a      	cmp	r2, r3
 8014264:	d01c      	beq.n	80142a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	3304      	adds	r3, #4
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014276:	f107 0314 	add.w	r3, r7, #20
 801427a:	4619      	mov	r1, r3
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7ff ffbf 	bl	8014200 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d002      	beq.n	801428e <netif_do_set_ipaddr+0x6a>
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	e000      	b.n	8014290 <netif_do_set_ipaddr+0x6c>
 801428e:	2300      	movs	r3, #0
 8014290:	68fa      	ldr	r2, [r7, #12]
 8014292:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014294:	2101      	movs	r1, #1
 8014296:	68f8      	ldr	r0, [r7, #12]
 8014298:	f000 f8d2 	bl	8014440 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801429c:	2301      	movs	r3, #1
 801429e:	e000      	b.n	80142a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80142a0:	2300      	movs	r3, #0
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3718      	adds	r7, #24
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	08022244 	.word	0x08022244
 80142b0:	0802235c 	.word	0x0802235c
 80142b4:	08022294 	.word	0x08022294

080142b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80142b8:	b480      	push	{r7}
 80142ba:	b085      	sub	sp, #20
 80142bc:	af00      	add	r7, sp, #0
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	681a      	ldr	r2, [r3, #0]
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	3308      	adds	r3, #8
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d00a      	beq.n	80142e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d002      	beq.n	80142de <netif_do_set_netmask+0x26>
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	e000      	b.n	80142e0 <netif_do_set_netmask+0x28>
 80142de:	2300      	movs	r3, #0
 80142e0:	68fa      	ldr	r2, [r7, #12]
 80142e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80142e4:	2301      	movs	r3, #1
 80142e6:	e000      	b.n	80142ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80142e8:	2300      	movs	r3, #0
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3714      	adds	r7, #20
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr

080142f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80142f6:	b480      	push	{r7}
 80142f8:	b085      	sub	sp, #20
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	60f8      	str	r0, [r7, #12]
 80142fe:	60b9      	str	r1, [r7, #8]
 8014300:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	681a      	ldr	r2, [r3, #0]
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	330c      	adds	r3, #12
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	429a      	cmp	r2, r3
 801430e:	d00a      	beq.n	8014326 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d002      	beq.n	801431c <netif_do_set_gw+0x26>
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	e000      	b.n	801431e <netif_do_set_gw+0x28>
 801431c:	2300      	movs	r3, #0
 801431e:	68fa      	ldr	r2, [r7, #12]
 8014320:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8014322:	2301      	movs	r3, #1
 8014324:	e000      	b.n	8014328 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8014326:	2300      	movs	r3, #0
}
 8014328:	4618      	mov	r0, r3
 801432a:	3714      	adds	r7, #20
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr

08014334 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b088      	sub	sp, #32
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	607a      	str	r2, [r7, #4]
 8014340:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8014342:	2300      	movs	r3, #0
 8014344:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014346:	2300      	movs	r3, #0
 8014348:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d101      	bne.n	8014354 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014350:	4b1c      	ldr	r3, [pc, #112]	@ (80143c4 <netif_set_addr+0x90>)
 8014352:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d101      	bne.n	801435e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801435a:	4b1a      	ldr	r3, [pc, #104]	@ (80143c4 <netif_set_addr+0x90>)
 801435c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d101      	bne.n	8014368 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014364:	4b17      	ldr	r3, [pc, #92]	@ (80143c4 <netif_set_addr+0x90>)
 8014366:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d003      	beq.n	8014376 <netif_set_addr+0x42>
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d101      	bne.n	801437a <netif_set_addr+0x46>
 8014376:	2301      	movs	r3, #1
 8014378:	e000      	b.n	801437c <netif_set_addr+0x48>
 801437a:	2300      	movs	r3, #0
 801437c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d006      	beq.n	8014392 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014384:	f107 0310 	add.w	r3, r7, #16
 8014388:	461a      	mov	r2, r3
 801438a:	68b9      	ldr	r1, [r7, #8]
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	f7ff ff49 	bl	8014224 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8014392:	69fa      	ldr	r2, [r7, #28]
 8014394:	6879      	ldr	r1, [r7, #4]
 8014396:	68f8      	ldr	r0, [r7, #12]
 8014398:	f7ff ff8e 	bl	80142b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801439c:	69ba      	ldr	r2, [r7, #24]
 801439e:	6839      	ldr	r1, [r7, #0]
 80143a0:	68f8      	ldr	r0, [r7, #12]
 80143a2:	f7ff ffa8 	bl	80142f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d106      	bne.n	80143ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80143ac:	f107 0310 	add.w	r3, r7, #16
 80143b0:	461a      	mov	r2, r3
 80143b2:	68b9      	ldr	r1, [r7, #8]
 80143b4:	68f8      	ldr	r0, [r7, #12]
 80143b6:	f7ff ff35 	bl	8014224 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80143ba:	bf00      	nop
 80143bc:	3720      	adds	r7, #32
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
 80143c2:	bf00      	nop
 80143c4:	08025000 	.word	0x08025000

080143c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80143d0:	4a04      	ldr	r2, [pc, #16]	@ (80143e4 <netif_set_default+0x1c>)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80143d6:	bf00      	nop
 80143d8:	370c      	adds	r7, #12
 80143da:	46bd      	mov	sp, r7
 80143dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop
 80143e4:	200252a4 	.word	0x200252a4

080143e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d107      	bne.n	8014406 <netif_set_up+0x1e>
 80143f6:	4b0f      	ldr	r3, [pc, #60]	@ (8014434 <netif_set_up+0x4c>)
 80143f8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80143fc:	490e      	ldr	r1, [pc, #56]	@ (8014438 <netif_set_up+0x50>)
 80143fe:	480f      	ldr	r0, [pc, #60]	@ (801443c <netif_set_up+0x54>)
 8014400:	f00b ff52 	bl	80202a8 <iprintf>
 8014404:	e013      	b.n	801442e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801440c:	f003 0301 	and.w	r3, r3, #1
 8014410:	2b00      	cmp	r3, #0
 8014412:	d10c      	bne.n	801442e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801441a:	f043 0301 	orr.w	r3, r3, #1
 801441e:	b2da      	uxtb	r2, r3
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014426:	2103      	movs	r1, #3
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f000 f809 	bl	8014440 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	08022244 	.word	0x08022244
 8014438:	080223cc 	.word	0x080223cc
 801443c:	08022294 	.word	0x08022294

08014440 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	460b      	mov	r3, r1
 801444a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d106      	bne.n	8014460 <netif_issue_reports+0x20>
 8014452:	4b18      	ldr	r3, [pc, #96]	@ (80144b4 <netif_issue_reports+0x74>)
 8014454:	f240 326d 	movw	r2, #877	@ 0x36d
 8014458:	4917      	ldr	r1, [pc, #92]	@ (80144b8 <netif_issue_reports+0x78>)
 801445a:	4818      	ldr	r0, [pc, #96]	@ (80144bc <netif_issue_reports+0x7c>)
 801445c:	f00b ff24 	bl	80202a8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014466:	f003 0304 	and.w	r3, r3, #4
 801446a:	2b00      	cmp	r3, #0
 801446c:	d01e      	beq.n	80144ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014474:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014478:	2b00      	cmp	r3, #0
 801447a:	d017      	beq.n	80144ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801447c:	78fb      	ldrb	r3, [r7, #3]
 801447e:	f003 0301 	and.w	r3, r3, #1
 8014482:	2b00      	cmp	r3, #0
 8014484:	d013      	beq.n	80144ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	3304      	adds	r3, #4
 801448a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801448c:	2b00      	cmp	r3, #0
 801448e:	d00e      	beq.n	80144ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014496:	f003 0308 	and.w	r3, r3, #8
 801449a:	2b00      	cmp	r3, #0
 801449c:	d007      	beq.n	80144ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	3304      	adds	r3, #4
 80144a2:	4619      	mov	r1, r3
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f008 fdc3 	bl	801d030 <etharp_request>
 80144aa:	e000      	b.n	80144ae <netif_issue_reports+0x6e>
    return;
 80144ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	08022244 	.word	0x08022244
 80144b8:	080223e8 	.word	0x080223e8
 80144bc:	08022294 	.word	0x08022294

080144c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d107      	bne.n	80144de <netif_set_down+0x1e>
 80144ce:	4b12      	ldr	r3, [pc, #72]	@ (8014518 <netif_set_down+0x58>)
 80144d0:	f240 329b 	movw	r2, #923	@ 0x39b
 80144d4:	4911      	ldr	r1, [pc, #68]	@ (801451c <netif_set_down+0x5c>)
 80144d6:	4812      	ldr	r0, [pc, #72]	@ (8014520 <netif_set_down+0x60>)
 80144d8:	f00b fee6 	bl	80202a8 <iprintf>
 80144dc:	e019      	b.n	8014512 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144e4:	f003 0301 	and.w	r3, r3, #1
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d012      	beq.n	8014512 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144f2:	f023 0301 	bic.w	r3, r3, #1
 80144f6:	b2da      	uxtb	r2, r3
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014504:	f003 0308 	and.w	r3, r3, #8
 8014508:	2b00      	cmp	r3, #0
 801450a:	d002      	beq.n	8014512 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f008 f90d 	bl	801c72c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014512:	3708      	adds	r7, #8
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}
 8014518:	08022244 	.word	0x08022244
 801451c:	0802240c 	.word	0x0802240c
 8014520:	08022294 	.word	0x08022294

08014524 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d107      	bne.n	8014542 <netif_set_link_up+0x1e>
 8014532:	4b13      	ldr	r3, [pc, #76]	@ (8014580 <netif_set_link_up+0x5c>)
 8014534:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014538:	4912      	ldr	r1, [pc, #72]	@ (8014584 <netif_set_link_up+0x60>)
 801453a:	4813      	ldr	r0, [pc, #76]	@ (8014588 <netif_set_link_up+0x64>)
 801453c:	f00b feb4 	bl	80202a8 <iprintf>
 8014540:	e01b      	b.n	801457a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014548:	f003 0304 	and.w	r3, r3, #4
 801454c:	2b00      	cmp	r3, #0
 801454e:	d114      	bne.n	801457a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014556:	f043 0304 	orr.w	r3, r3, #4
 801455a:	b2da      	uxtb	r2, r3
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014562:	2103      	movs	r1, #3
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7ff ff6b 	bl	8014440 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	69db      	ldr	r3, [r3, #28]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <netif_set_link_up+0x56>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	69db      	ldr	r3, [r3, #28]
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801457a:	3708      	adds	r7, #8
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	08022244 	.word	0x08022244
 8014584:	0802242c 	.word	0x0802242c
 8014588:	08022294 	.word	0x08022294

0801458c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d107      	bne.n	80145aa <netif_set_link_down+0x1e>
 801459a:	4b11      	ldr	r3, [pc, #68]	@ (80145e0 <netif_set_link_down+0x54>)
 801459c:	f240 4206 	movw	r2, #1030	@ 0x406
 80145a0:	4910      	ldr	r1, [pc, #64]	@ (80145e4 <netif_set_link_down+0x58>)
 80145a2:	4811      	ldr	r0, [pc, #68]	@ (80145e8 <netif_set_link_down+0x5c>)
 80145a4:	f00b fe80 	bl	80202a8 <iprintf>
 80145a8:	e017      	b.n	80145da <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145b0:	f003 0304 	and.w	r3, r3, #4
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d010      	beq.n	80145da <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145be:	f023 0304 	bic.w	r3, r3, #4
 80145c2:	b2da      	uxtb	r2, r3
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	69db      	ldr	r3, [r3, #28]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d003      	beq.n	80145da <netif_set_link_down+0x4e>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	69db      	ldr	r3, [r3, #28]
 80145d6:	6878      	ldr	r0, [r7, #4]
 80145d8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80145da:	3708      	adds	r7, #8
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	08022244 	.word	0x08022244
 80145e4:	08022450 	.word	0x08022450
 80145e8:	08022294 	.word	0x08022294

080145ec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d002      	beq.n	8014602 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	683a      	ldr	r2, [r7, #0]
 8014600:	61da      	str	r2, [r3, #28]
  }
}
 8014602:	bf00      	nop
 8014604:	370c      	adds	r7, #12
 8014606:	46bd      	mov	sp, r7
 8014608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460c:	4770      	bx	lr

0801460e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801460e:	b480      	push	{r7}
 8014610:	b085      	sub	sp, #20
 8014612:	af00      	add	r7, sp, #0
 8014614:	60f8      	str	r0, [r7, #12]
 8014616:	60b9      	str	r1, [r7, #8]
 8014618:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801461a:	f06f 030b 	mvn.w	r3, #11
}
 801461e:	4618      	mov	r0, r3
 8014620:	3714      	adds	r7, #20
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr
	...

0801462c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801462c:	b480      	push	{r7}
 801462e:	b085      	sub	sp, #20
 8014630:	af00      	add	r7, sp, #0
 8014632:	4603      	mov	r3, r0
 8014634:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014636:	79fb      	ldrb	r3, [r7, #7]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d013      	beq.n	8014664 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801463c:	4b0d      	ldr	r3, [pc, #52]	@ (8014674 <netif_get_by_index+0x48>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	60fb      	str	r3, [r7, #12]
 8014642:	e00c      	b.n	801465e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801464a:	3301      	adds	r3, #1
 801464c:	b2db      	uxtb	r3, r3
 801464e:	79fa      	ldrb	r2, [r7, #7]
 8014650:	429a      	cmp	r2, r3
 8014652:	d101      	bne.n	8014658 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	e006      	b.n	8014666 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	60fb      	str	r3, [r7, #12]
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d1ef      	bne.n	8014644 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014664:	2300      	movs	r3, #0
}
 8014666:	4618      	mov	r0, r3
 8014668:	3714      	adds	r7, #20
 801466a:	46bd      	mov	sp, r7
 801466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014670:	4770      	bx	lr
 8014672:	bf00      	nop
 8014674:	200252a0 	.word	0x200252a0

08014678 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801467e:	f00a fb89 	bl	801ed94 <sys_arch_protect>
 8014682:	6038      	str	r0, [r7, #0]
 8014684:	4b0d      	ldr	r3, [pc, #52]	@ (80146bc <pbuf_free_ooseq+0x44>)
 8014686:	2200      	movs	r2, #0
 8014688:	701a      	strb	r2, [r3, #0]
 801468a:	6838      	ldr	r0, [r7, #0]
 801468c:	f00a fb90 	bl	801edb0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014690:	4b0b      	ldr	r3, [pc, #44]	@ (80146c0 <pbuf_free_ooseq+0x48>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	607b      	str	r3, [r7, #4]
 8014696:	e00a      	b.n	80146ae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801469c:	2b00      	cmp	r3, #0
 801469e:	d003      	beq.n	80146a8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f002 fbbd 	bl	8016e20 <tcp_free_ooseq>
      return;
 80146a6:	e005      	b.n	80146b4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	607b      	str	r3, [r7, #4]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d1f1      	bne.n	8014698 <pbuf_free_ooseq+0x20>
    }
  }
}
 80146b4:	3708      	adds	r7, #8
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	200252a9 	.word	0x200252a9
 80146c0:	200253b4 	.word	0x200253b4

080146c4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b082      	sub	sp, #8
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80146cc:	f7ff ffd4 	bl	8014678 <pbuf_free_ooseq>
}
 80146d0:	bf00      	nop
 80146d2:	3708      	adds	r7, #8
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80146de:	f00a fb59 	bl	801ed94 <sys_arch_protect>
 80146e2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80146e4:	4b0f      	ldr	r3, [pc, #60]	@ (8014724 <pbuf_pool_is_empty+0x4c>)
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80146ea:	4b0e      	ldr	r3, [pc, #56]	@ (8014724 <pbuf_pool_is_empty+0x4c>)
 80146ec:	2201      	movs	r2, #1
 80146ee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f00a fb5d 	bl	801edb0 <sys_arch_unprotect>

  if (!queued) {
 80146f6:	78fb      	ldrb	r3, [r7, #3]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d10f      	bne.n	801471c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80146fc:	2100      	movs	r1, #0
 80146fe:	480a      	ldr	r0, [pc, #40]	@ (8014728 <pbuf_pool_is_empty+0x50>)
 8014700:	f7fe fdc4 	bl	801328c <tcpip_try_callback>
 8014704:	4603      	mov	r3, r0
 8014706:	2b00      	cmp	r3, #0
 8014708:	d008      	beq.n	801471c <pbuf_pool_is_empty+0x44>
 801470a:	f00a fb43 	bl	801ed94 <sys_arch_protect>
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	4b04      	ldr	r3, [pc, #16]	@ (8014724 <pbuf_pool_is_empty+0x4c>)
 8014712:	2200      	movs	r2, #0
 8014714:	701a      	strb	r2, [r3, #0]
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f00a fb4a 	bl	801edb0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801471c:	bf00      	nop
 801471e:	3708      	adds	r7, #8
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	200252a9 	.word	0x200252a9
 8014728:	080146c5 	.word	0x080146c5

0801472c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801472c:	b480      	push	{r7}
 801472e:	b085      	sub	sp, #20
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	4611      	mov	r1, r2
 8014738:	461a      	mov	r2, r3
 801473a:	460b      	mov	r3, r1
 801473c:	80fb      	strh	r3, [r7, #6]
 801473e:	4613      	mov	r3, r2
 8014740:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	2200      	movs	r2, #0
 8014746:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	68ba      	ldr	r2, [r7, #8]
 801474c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	88fa      	ldrh	r2, [r7, #6]
 8014752:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	88ba      	ldrh	r2, [r7, #4]
 8014758:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801475a:	8b3b      	ldrh	r3, [r7, #24]
 801475c:	b2da      	uxtb	r2, r3
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	7f3a      	ldrb	r2, [r7, #28]
 8014766:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	2201      	movs	r2, #1
 801476c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2200      	movs	r2, #0
 8014772:	73da      	strb	r2, [r3, #15]
}
 8014774:	bf00      	nop
 8014776:	3714      	adds	r7, #20
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08c      	sub	sp, #48	@ 0x30
 8014784:	af02      	add	r7, sp, #8
 8014786:	4603      	mov	r3, r0
 8014788:	71fb      	strb	r3, [r7, #7]
 801478a:	460b      	mov	r3, r1
 801478c:	80bb      	strh	r3, [r7, #4]
 801478e:	4613      	mov	r3, r2
 8014790:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014792:	79fb      	ldrb	r3, [r7, #7]
 8014794:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014796:	887b      	ldrh	r3, [r7, #2]
 8014798:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801479c:	d07f      	beq.n	801489e <pbuf_alloc+0x11e>
 801479e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80147a2:	f300 80c8 	bgt.w	8014936 <pbuf_alloc+0x1b6>
 80147a6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80147aa:	d010      	beq.n	80147ce <pbuf_alloc+0x4e>
 80147ac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80147b0:	f300 80c1 	bgt.w	8014936 <pbuf_alloc+0x1b6>
 80147b4:	2b01      	cmp	r3, #1
 80147b6:	d002      	beq.n	80147be <pbuf_alloc+0x3e>
 80147b8:	2b41      	cmp	r3, #65	@ 0x41
 80147ba:	f040 80bc 	bne.w	8014936 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80147be:	887a      	ldrh	r2, [r7, #2]
 80147c0:	88bb      	ldrh	r3, [r7, #4]
 80147c2:	4619      	mov	r1, r3
 80147c4:	2000      	movs	r0, #0
 80147c6:	f000 f8d1 	bl	801496c <pbuf_alloc_reference>
 80147ca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80147cc:	e0bd      	b.n	801494a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80147ce:	2300      	movs	r3, #0
 80147d0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80147d2:	2300      	movs	r3, #0
 80147d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80147d6:	88bb      	ldrh	r3, [r7, #4]
 80147d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80147da:	200c      	movs	r0, #12
 80147dc:	f7ff fb94 	bl	8013f08 <memp_malloc>
 80147e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d109      	bne.n	80147fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80147e8:	f7ff ff76 	bl	80146d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80147ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d002      	beq.n	80147f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80147f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80147f4:	f000 faa8 	bl	8014d48 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80147f8:	2300      	movs	r3, #0
 80147fa:	e0a7      	b.n	801494c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80147fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80147fe:	3303      	adds	r3, #3
 8014800:	b29b      	uxth	r3, r3
 8014802:	f023 0303 	bic.w	r3, r3, #3
 8014806:	b29b      	uxth	r3, r3
 8014808:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801480c:	b29b      	uxth	r3, r3
 801480e:	8b7a      	ldrh	r2, [r7, #26]
 8014810:	4293      	cmp	r3, r2
 8014812:	bf28      	it	cs
 8014814:	4613      	movcs	r3, r2
 8014816:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014818:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801481a:	3310      	adds	r3, #16
 801481c:	693a      	ldr	r2, [r7, #16]
 801481e:	4413      	add	r3, r2
 8014820:	3303      	adds	r3, #3
 8014822:	f023 0303 	bic.w	r3, r3, #3
 8014826:	4618      	mov	r0, r3
 8014828:	89f9      	ldrh	r1, [r7, #14]
 801482a:	8b7a      	ldrh	r2, [r7, #26]
 801482c:	2300      	movs	r3, #0
 801482e:	9301      	str	r3, [sp, #4]
 8014830:	887b      	ldrh	r3, [r7, #2]
 8014832:	9300      	str	r3, [sp, #0]
 8014834:	460b      	mov	r3, r1
 8014836:	4601      	mov	r1, r0
 8014838:	6938      	ldr	r0, [r7, #16]
 801483a:	f7ff ff77 	bl	801472c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	685b      	ldr	r3, [r3, #4]
 8014842:	f003 0303 	and.w	r3, r3, #3
 8014846:	2b00      	cmp	r3, #0
 8014848:	d006      	beq.n	8014858 <pbuf_alloc+0xd8>
 801484a:	4b42      	ldr	r3, [pc, #264]	@ (8014954 <pbuf_alloc+0x1d4>)
 801484c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014850:	4941      	ldr	r1, [pc, #260]	@ (8014958 <pbuf_alloc+0x1d8>)
 8014852:	4842      	ldr	r0, [pc, #264]	@ (801495c <pbuf_alloc+0x1dc>)
 8014854:	f00b fd28 	bl	80202a8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014858:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801485a:	3303      	adds	r3, #3
 801485c:	f023 0303 	bic.w	r3, r3, #3
 8014860:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014864:	d106      	bne.n	8014874 <pbuf_alloc+0xf4>
 8014866:	4b3b      	ldr	r3, [pc, #236]	@ (8014954 <pbuf_alloc+0x1d4>)
 8014868:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801486c:	493c      	ldr	r1, [pc, #240]	@ (8014960 <pbuf_alloc+0x1e0>)
 801486e:	483b      	ldr	r0, [pc, #236]	@ (801495c <pbuf_alloc+0x1dc>)
 8014870:	f00b fd1a 	bl	80202a8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014876:	2b00      	cmp	r3, #0
 8014878:	d102      	bne.n	8014880 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	627b      	str	r3, [r7, #36]	@ 0x24
 801487e:	e002      	b.n	8014886 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014880:	69fb      	ldr	r3, [r7, #28]
 8014882:	693a      	ldr	r2, [r7, #16]
 8014884:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801488a:	8b7a      	ldrh	r2, [r7, #26]
 801488c:	89fb      	ldrh	r3, [r7, #14]
 801488e:	1ad3      	subs	r3, r2, r3
 8014890:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014892:	2300      	movs	r3, #0
 8014894:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8014896:	8b7b      	ldrh	r3, [r7, #26]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d19e      	bne.n	80147da <pbuf_alloc+0x5a>
      break;
 801489c:	e055      	b.n	801494a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801489e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148a0:	3303      	adds	r3, #3
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	f023 0303 	bic.w	r3, r3, #3
 80148a8:	b29a      	uxth	r2, r3
 80148aa:	88bb      	ldrh	r3, [r7, #4]
 80148ac:	3303      	adds	r3, #3
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	f023 0303 	bic.w	r3, r3, #3
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	4413      	add	r3, r2
 80148b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80148ba:	8b3b      	ldrh	r3, [r7, #24]
 80148bc:	3310      	adds	r3, #16
 80148be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80148c0:	8b3a      	ldrh	r2, [r7, #24]
 80148c2:	88bb      	ldrh	r3, [r7, #4]
 80148c4:	3303      	adds	r3, #3
 80148c6:	f023 0303 	bic.w	r3, r3, #3
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d306      	bcc.n	80148dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80148ce:	8afa      	ldrh	r2, [r7, #22]
 80148d0:	88bb      	ldrh	r3, [r7, #4]
 80148d2:	3303      	adds	r3, #3
 80148d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80148d8:	429a      	cmp	r2, r3
 80148da:	d201      	bcs.n	80148e0 <pbuf_alloc+0x160>
        return NULL;
 80148dc:	2300      	movs	r3, #0
 80148de:	e035      	b.n	801494c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80148e0:	8afb      	ldrh	r3, [r7, #22]
 80148e2:	4618      	mov	r0, r3
 80148e4:	f7ff f900 	bl	8013ae8 <mem_malloc>
 80148e8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80148ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d101      	bne.n	80148f4 <pbuf_alloc+0x174>
        return NULL;
 80148f0:	2300      	movs	r3, #0
 80148f2:	e02b      	b.n	801494c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80148f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148f6:	3310      	adds	r3, #16
 80148f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148fa:	4413      	add	r3, r2
 80148fc:	3303      	adds	r3, #3
 80148fe:	f023 0303 	bic.w	r3, r3, #3
 8014902:	4618      	mov	r0, r3
 8014904:	88b9      	ldrh	r1, [r7, #4]
 8014906:	88ba      	ldrh	r2, [r7, #4]
 8014908:	2300      	movs	r3, #0
 801490a:	9301      	str	r3, [sp, #4]
 801490c:	887b      	ldrh	r3, [r7, #2]
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	460b      	mov	r3, r1
 8014912:	4601      	mov	r1, r0
 8014914:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014916:	f7ff ff09 	bl	801472c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	f003 0303 	and.w	r3, r3, #3
 8014922:	2b00      	cmp	r3, #0
 8014924:	d010      	beq.n	8014948 <pbuf_alloc+0x1c8>
 8014926:	4b0b      	ldr	r3, [pc, #44]	@ (8014954 <pbuf_alloc+0x1d4>)
 8014928:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801492c:	490d      	ldr	r1, [pc, #52]	@ (8014964 <pbuf_alloc+0x1e4>)
 801492e:	480b      	ldr	r0, [pc, #44]	@ (801495c <pbuf_alloc+0x1dc>)
 8014930:	f00b fcba 	bl	80202a8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014934:	e008      	b.n	8014948 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014936:	4b07      	ldr	r3, [pc, #28]	@ (8014954 <pbuf_alloc+0x1d4>)
 8014938:	f240 1227 	movw	r2, #295	@ 0x127
 801493c:	490a      	ldr	r1, [pc, #40]	@ (8014968 <pbuf_alloc+0x1e8>)
 801493e:	4807      	ldr	r0, [pc, #28]	@ (801495c <pbuf_alloc+0x1dc>)
 8014940:	f00b fcb2 	bl	80202a8 <iprintf>
      return NULL;
 8014944:	2300      	movs	r3, #0
 8014946:	e001      	b.n	801494c <pbuf_alloc+0x1cc>
      break;
 8014948:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801494c:	4618      	mov	r0, r3
 801494e:	3728      	adds	r7, #40	@ 0x28
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	08022474 	.word	0x08022474
 8014958:	080224a4 	.word	0x080224a4
 801495c:	080224d4 	.word	0x080224d4
 8014960:	080224fc 	.word	0x080224fc
 8014964:	08022530 	.word	0x08022530
 8014968:	0802255c 	.word	0x0802255c

0801496c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b086      	sub	sp, #24
 8014970:	af02      	add	r7, sp, #8
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	460b      	mov	r3, r1
 8014976:	807b      	strh	r3, [r7, #2]
 8014978:	4613      	mov	r3, r2
 801497a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801497c:	883b      	ldrh	r3, [r7, #0]
 801497e:	2b41      	cmp	r3, #65	@ 0x41
 8014980:	d009      	beq.n	8014996 <pbuf_alloc_reference+0x2a>
 8014982:	883b      	ldrh	r3, [r7, #0]
 8014984:	2b01      	cmp	r3, #1
 8014986:	d006      	beq.n	8014996 <pbuf_alloc_reference+0x2a>
 8014988:	4b0f      	ldr	r3, [pc, #60]	@ (80149c8 <pbuf_alloc_reference+0x5c>)
 801498a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801498e:	490f      	ldr	r1, [pc, #60]	@ (80149cc <pbuf_alloc_reference+0x60>)
 8014990:	480f      	ldr	r0, [pc, #60]	@ (80149d0 <pbuf_alloc_reference+0x64>)
 8014992:	f00b fc89 	bl	80202a8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014996:	200b      	movs	r0, #11
 8014998:	f7ff fab6 	bl	8013f08 <memp_malloc>
 801499c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d101      	bne.n	80149a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80149a4:	2300      	movs	r3, #0
 80149a6:	e00b      	b.n	80149c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80149a8:	8879      	ldrh	r1, [r7, #2]
 80149aa:	887a      	ldrh	r2, [r7, #2]
 80149ac:	2300      	movs	r3, #0
 80149ae:	9301      	str	r3, [sp, #4]
 80149b0:	883b      	ldrh	r3, [r7, #0]
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	460b      	mov	r3, r1
 80149b6:	6879      	ldr	r1, [r7, #4]
 80149b8:	68f8      	ldr	r0, [r7, #12]
 80149ba:	f7ff feb7 	bl	801472c <pbuf_init_alloced_pbuf>
  return p;
 80149be:	68fb      	ldr	r3, [r7, #12]
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	3710      	adds	r7, #16
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}
 80149c8:	08022474 	.word	0x08022474
 80149cc:	08022578 	.word	0x08022578
 80149d0:	080224d4 	.word	0x080224d4

080149d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b088      	sub	sp, #32
 80149d8:	af02      	add	r7, sp, #8
 80149da:	607b      	str	r3, [r7, #4]
 80149dc:	4603      	mov	r3, r0
 80149de:	73fb      	strb	r3, [r7, #15]
 80149e0:	460b      	mov	r3, r1
 80149e2:	81bb      	strh	r3, [r7, #12]
 80149e4:	4613      	mov	r3, r2
 80149e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80149e8:	7bfb      	ldrb	r3, [r7, #15]
 80149ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80149ec:	8a7b      	ldrh	r3, [r7, #18]
 80149ee:	3303      	adds	r3, #3
 80149f0:	f023 0203 	bic.w	r2, r3, #3
 80149f4:	89bb      	ldrh	r3, [r7, #12]
 80149f6:	441a      	add	r2, r3
 80149f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d901      	bls.n	8014a02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80149fe:	2300      	movs	r3, #0
 8014a00:	e018      	b.n	8014a34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014a02:	6a3b      	ldr	r3, [r7, #32]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d007      	beq.n	8014a18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014a08:	8a7b      	ldrh	r3, [r7, #18]
 8014a0a:	3303      	adds	r3, #3
 8014a0c:	f023 0303 	bic.w	r3, r3, #3
 8014a10:	6a3a      	ldr	r2, [r7, #32]
 8014a12:	4413      	add	r3, r2
 8014a14:	617b      	str	r3, [r7, #20]
 8014a16:	e001      	b.n	8014a1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	89b9      	ldrh	r1, [r7, #12]
 8014a20:	89ba      	ldrh	r2, [r7, #12]
 8014a22:	2302      	movs	r3, #2
 8014a24:	9301      	str	r3, [sp, #4]
 8014a26:	897b      	ldrh	r3, [r7, #10]
 8014a28:	9300      	str	r3, [sp, #0]
 8014a2a:	460b      	mov	r3, r1
 8014a2c:	6979      	ldr	r1, [r7, #20]
 8014a2e:	f7ff fe7d 	bl	801472c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014a32:	687b      	ldr	r3, [r7, #4]
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3718      	adds	r7, #24
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b084      	sub	sp, #16
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	460b      	mov	r3, r1
 8014a46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d106      	bne.n	8014a5c <pbuf_realloc+0x20>
 8014a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8014b38 <pbuf_realloc+0xfc>)
 8014a50:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014a54:	4939      	ldr	r1, [pc, #228]	@ (8014b3c <pbuf_realloc+0x100>)
 8014a56:	483a      	ldr	r0, [pc, #232]	@ (8014b40 <pbuf_realloc+0x104>)
 8014a58:	f00b fc26 	bl	80202a8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	891b      	ldrh	r3, [r3, #8]
 8014a60:	887a      	ldrh	r2, [r7, #2]
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d263      	bcs.n	8014b2e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	891a      	ldrh	r2, [r3, #8]
 8014a6a:	887b      	ldrh	r3, [r7, #2]
 8014a6c:	1ad3      	subs	r3, r2, r3
 8014a6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014a70:	887b      	ldrh	r3, [r7, #2]
 8014a72:	817b      	strh	r3, [r7, #10]
  q = p;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014a78:	e018      	b.n	8014aac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	895b      	ldrh	r3, [r3, #10]
 8014a7e:	897a      	ldrh	r2, [r7, #10]
 8014a80:	1ad3      	subs	r3, r2, r3
 8014a82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	891a      	ldrh	r2, [r3, #8]
 8014a88:	893b      	ldrh	r3, [r7, #8]
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	b29a      	uxth	r2, r3
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d106      	bne.n	8014aac <pbuf_realloc+0x70>
 8014a9e:	4b26      	ldr	r3, [pc, #152]	@ (8014b38 <pbuf_realloc+0xfc>)
 8014aa0:	f240 12af 	movw	r2, #431	@ 0x1af
 8014aa4:	4927      	ldr	r1, [pc, #156]	@ (8014b44 <pbuf_realloc+0x108>)
 8014aa6:	4826      	ldr	r0, [pc, #152]	@ (8014b40 <pbuf_realloc+0x104>)
 8014aa8:	f00b fbfe 	bl	80202a8 <iprintf>
  while (rem_len > q->len) {
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	895b      	ldrh	r3, [r3, #10]
 8014ab0:	897a      	ldrh	r2, [r7, #10]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d8e1      	bhi.n	8014a7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	7b1b      	ldrb	r3, [r3, #12]
 8014aba:	f003 030f 	and.w	r3, r3, #15
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d121      	bne.n	8014b06 <pbuf_realloc+0xca>
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	895b      	ldrh	r3, [r3, #10]
 8014ac6:	897a      	ldrh	r2, [r7, #10]
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d01c      	beq.n	8014b06 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	7b5b      	ldrb	r3, [r3, #13]
 8014ad0:	f003 0302 	and.w	r3, r3, #2
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d116      	bne.n	8014b06 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	685a      	ldr	r2, [r3, #4]
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	1ad3      	subs	r3, r2, r3
 8014ae0:	b29a      	uxth	r2, r3
 8014ae2:	897b      	ldrh	r3, [r7, #10]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	4619      	mov	r1, r3
 8014aea:	68f8      	ldr	r0, [r7, #12]
 8014aec:	f7fe fed0 	bl	8013890 <mem_trim>
 8014af0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d106      	bne.n	8014b06 <pbuf_realloc+0xca>
 8014af8:	4b0f      	ldr	r3, [pc, #60]	@ (8014b38 <pbuf_realloc+0xfc>)
 8014afa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8014afe:	4912      	ldr	r1, [pc, #72]	@ (8014b48 <pbuf_realloc+0x10c>)
 8014b00:	480f      	ldr	r0, [pc, #60]	@ (8014b40 <pbuf_realloc+0x104>)
 8014b02:	f00b fbd1 	bl	80202a8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	897a      	ldrh	r2, [r7, #10]
 8014b0a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	895a      	ldrh	r2, [r3, #10]
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d004      	beq.n	8014b26 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4618      	mov	r0, r3
 8014b22:	f000 f911 	bl	8014d48 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2200      	movs	r2, #0
 8014b2a:	601a      	str	r2, [r3, #0]
 8014b2c:	e000      	b.n	8014b30 <pbuf_realloc+0xf4>
    return;
 8014b2e:	bf00      	nop

}
 8014b30:	3710      	adds	r7, #16
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	08022474 	.word	0x08022474
 8014b3c:	0802258c 	.word	0x0802258c
 8014b40:	080224d4 	.word	0x080224d4
 8014b44:	080225a4 	.word	0x080225a4
 8014b48:	080225bc 	.word	0x080225bc

08014b4c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b086      	sub	sp, #24
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	60b9      	str	r1, [r7, #8]
 8014b56:	4613      	mov	r3, r2
 8014b58:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d106      	bne.n	8014b6e <pbuf_add_header_impl+0x22>
 8014b60:	4b2b      	ldr	r3, [pc, #172]	@ (8014c10 <pbuf_add_header_impl+0xc4>)
 8014b62:	f240 12df 	movw	r2, #479	@ 0x1df
 8014b66:	492b      	ldr	r1, [pc, #172]	@ (8014c14 <pbuf_add_header_impl+0xc8>)
 8014b68:	482b      	ldr	r0, [pc, #172]	@ (8014c18 <pbuf_add_header_impl+0xcc>)
 8014b6a:	f00b fb9d 	bl	80202a8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d003      	beq.n	8014b7c <pbuf_add_header_impl+0x30>
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014b7a:	d301      	bcc.n	8014b80 <pbuf_add_header_impl+0x34>
    return 1;
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	e043      	b.n	8014c08 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d101      	bne.n	8014b8a <pbuf_add_header_impl+0x3e>
    return 0;
 8014b86:	2300      	movs	r3, #0
 8014b88:	e03e      	b.n	8014c08 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	891a      	ldrh	r2, [r3, #8]
 8014b92:	8a7b      	ldrh	r3, [r7, #18]
 8014b94:	4413      	add	r3, r2
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	8a7a      	ldrh	r2, [r7, #18]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d901      	bls.n	8014ba2 <pbuf_add_header_impl+0x56>
    return 1;
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	e032      	b.n	8014c08 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	7b1b      	ldrb	r3, [r3, #12]
 8014ba6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014ba8:	8a3b      	ldrh	r3, [r7, #16]
 8014baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d00c      	beq.n	8014bcc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	685a      	ldr	r2, [r3, #4]
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	425b      	negs	r3, r3
 8014bba:	4413      	add	r3, r2
 8014bbc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	3310      	adds	r3, #16
 8014bc2:	697a      	ldr	r2, [r7, #20]
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d20d      	bcs.n	8014be4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014bc8:	2301      	movs	r3, #1
 8014bca:	e01d      	b.n	8014c08 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014bcc:	79fb      	ldrb	r3, [r7, #7]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d006      	beq.n	8014be0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	685a      	ldr	r2, [r3, #4]
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	425b      	negs	r3, r3
 8014bda:	4413      	add	r3, r2
 8014bdc:	617b      	str	r3, [r7, #20]
 8014bde:	e001      	b.n	8014be4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014be0:	2301      	movs	r3, #1
 8014be2:	e011      	b.n	8014c08 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	697a      	ldr	r2, [r7, #20]
 8014be8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	895a      	ldrh	r2, [r3, #10]
 8014bee:	8a7b      	ldrh	r3, [r7, #18]
 8014bf0:	4413      	add	r3, r2
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	891a      	ldrh	r2, [r3, #8]
 8014bfc:	8a7b      	ldrh	r3, [r7, #18]
 8014bfe:	4413      	add	r3, r2
 8014c00:	b29a      	uxth	r2, r3
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	811a      	strh	r2, [r3, #8]


  return 0;
 8014c06:	2300      	movs	r3, #0
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3718      	adds	r7, #24
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	08022474 	.word	0x08022474
 8014c14:	080225d8 	.word	0x080225d8
 8014c18:	080224d4 	.word	0x080224d4

08014c1c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
 8014c24:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014c26:	2200      	movs	r2, #0
 8014c28:	6839      	ldr	r1, [r7, #0]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f7ff ff8e 	bl	8014b4c <pbuf_add_header_impl>
 8014c30:	4603      	mov	r3, r0
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3708      	adds	r7, #8
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}
	...

08014c3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d106      	bne.n	8014c5a <pbuf_remove_header+0x1e>
 8014c4c:	4b20      	ldr	r3, [pc, #128]	@ (8014cd0 <pbuf_remove_header+0x94>)
 8014c4e:	f240 224b 	movw	r2, #587	@ 0x24b
 8014c52:	4920      	ldr	r1, [pc, #128]	@ (8014cd4 <pbuf_remove_header+0x98>)
 8014c54:	4820      	ldr	r0, [pc, #128]	@ (8014cd8 <pbuf_remove_header+0x9c>)
 8014c56:	f00b fb27 	bl	80202a8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d003      	beq.n	8014c68 <pbuf_remove_header+0x2c>
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c66:	d301      	bcc.n	8014c6c <pbuf_remove_header+0x30>
    return 1;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	e02c      	b.n	8014cc6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014c6c:	683b      	ldr	r3, [r7, #0]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d101      	bne.n	8014c76 <pbuf_remove_header+0x3a>
    return 0;
 8014c72:	2300      	movs	r3, #0
 8014c74:	e027      	b.n	8014cc6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	895b      	ldrh	r3, [r3, #10]
 8014c7e:	89fa      	ldrh	r2, [r7, #14]
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d908      	bls.n	8014c96 <pbuf_remove_header+0x5a>
 8014c84:	4b12      	ldr	r3, [pc, #72]	@ (8014cd0 <pbuf_remove_header+0x94>)
 8014c86:	f240 2255 	movw	r2, #597	@ 0x255
 8014c8a:	4914      	ldr	r1, [pc, #80]	@ (8014cdc <pbuf_remove_header+0xa0>)
 8014c8c:	4812      	ldr	r0, [pc, #72]	@ (8014cd8 <pbuf_remove_header+0x9c>)
 8014c8e:	f00b fb0b 	bl	80202a8 <iprintf>
 8014c92:	2301      	movs	r3, #1
 8014c94:	e017      	b.n	8014cc6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	685a      	ldr	r2, [r3, #4]
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	441a      	add	r2, r3
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	895a      	ldrh	r2, [r3, #10]
 8014cac:	89fb      	ldrh	r3, [r7, #14]
 8014cae:	1ad3      	subs	r3, r2, r3
 8014cb0:	b29a      	uxth	r2, r3
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	891a      	ldrh	r2, [r3, #8]
 8014cba:	89fb      	ldrh	r3, [r7, #14]
 8014cbc:	1ad3      	subs	r3, r2, r3
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014cc4:	2300      	movs	r3, #0
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3710      	adds	r7, #16
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	08022474 	.word	0x08022474
 8014cd4:	080225d8 	.word	0x080225d8
 8014cd8:	080224d4 	.word	0x080224d4
 8014cdc:	080225e4 	.word	0x080225e4

08014ce0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b082      	sub	sp, #8
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
 8014ce8:	460b      	mov	r3, r1
 8014cea:	807b      	strh	r3, [r7, #2]
 8014cec:	4613      	mov	r3, r2
 8014cee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	da08      	bge.n	8014d0a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014cf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014cfc:	425b      	negs	r3, r3
 8014cfe:	4619      	mov	r1, r3
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f7ff ff9b 	bl	8014c3c <pbuf_remove_header>
 8014d06:	4603      	mov	r3, r0
 8014d08:	e007      	b.n	8014d1a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014d0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014d0e:	787a      	ldrb	r2, [r7, #1]
 8014d10:	4619      	mov	r1, r3
 8014d12:	6878      	ldr	r0, [r7, #4]
 8014d14:	f7ff ff1a 	bl	8014b4c <pbuf_add_header_impl>
 8014d18:	4603      	mov	r3, r0
  }
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3708      	adds	r7, #8
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}

08014d22 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014d22:	b580      	push	{r7, lr}
 8014d24:	b082      	sub	sp, #8
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014d2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014d32:	2201      	movs	r2, #1
 8014d34:	4619      	mov	r1, r3
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f7ff ffd2 	bl	8014ce0 <pbuf_header_impl>
 8014d3c:	4603      	mov	r3, r0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
	...

08014d48 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b088      	sub	sp, #32
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d10b      	bne.n	8014d6e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d106      	bne.n	8014d6a <pbuf_free+0x22>
 8014d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8014e4c <pbuf_free+0x104>)
 8014d5e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014d62:	493b      	ldr	r1, [pc, #236]	@ (8014e50 <pbuf_free+0x108>)
 8014d64:	483b      	ldr	r0, [pc, #236]	@ (8014e54 <pbuf_free+0x10c>)
 8014d66:	f00b fa9f 	bl	80202a8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	e069      	b.n	8014e42 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014d72:	e062      	b.n	8014e3a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014d74:	f00a f80e 	bl	801ed94 <sys_arch_protect>
 8014d78:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	7b9b      	ldrb	r3, [r3, #14]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d106      	bne.n	8014d90 <pbuf_free+0x48>
 8014d82:	4b32      	ldr	r3, [pc, #200]	@ (8014e4c <pbuf_free+0x104>)
 8014d84:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014d88:	4933      	ldr	r1, [pc, #204]	@ (8014e58 <pbuf_free+0x110>)
 8014d8a:	4832      	ldr	r0, [pc, #200]	@ (8014e54 <pbuf_free+0x10c>)
 8014d8c:	f00b fa8c 	bl	80202a8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	7b9b      	ldrb	r3, [r3, #14]
 8014d94:	3b01      	subs	r3, #1
 8014d96:	b2da      	uxtb	r2, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	739a      	strb	r2, [r3, #14]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	7b9b      	ldrb	r3, [r3, #14]
 8014da0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014da2:	69b8      	ldr	r0, [r7, #24]
 8014da4:	f00a f804 	bl	801edb0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014da8:	7dfb      	ldrb	r3, [r7, #23]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d143      	bne.n	8014e36 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	7b1b      	ldrb	r3, [r3, #12]
 8014db8:	f003 030f 	and.w	r3, r3, #15
 8014dbc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	7b5b      	ldrb	r3, [r3, #13]
 8014dc2:	f003 0302 	and.w	r3, r3, #2
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d011      	beq.n	8014dee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	691b      	ldr	r3, [r3, #16]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d106      	bne.n	8014de4 <pbuf_free+0x9c>
 8014dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8014e4c <pbuf_free+0x104>)
 8014dd8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014ddc:	491f      	ldr	r1, [pc, #124]	@ (8014e5c <pbuf_free+0x114>)
 8014dde:	481d      	ldr	r0, [pc, #116]	@ (8014e54 <pbuf_free+0x10c>)
 8014de0:	f00b fa62 	bl	80202a8 <iprintf>
        pc->custom_free_function(p);
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	691b      	ldr	r3, [r3, #16]
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	4798      	blx	r3
 8014dec:	e01d      	b.n	8014e2a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014dee:	7bfb      	ldrb	r3, [r7, #15]
 8014df0:	2b02      	cmp	r3, #2
 8014df2:	d104      	bne.n	8014dfe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014df4:	6879      	ldr	r1, [r7, #4]
 8014df6:	200c      	movs	r0, #12
 8014df8:	f7ff f902 	bl	8014000 <memp_free>
 8014dfc:	e015      	b.n	8014e2a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014dfe:	7bfb      	ldrb	r3, [r7, #15]
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d104      	bne.n	8014e0e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014e04:	6879      	ldr	r1, [r7, #4]
 8014e06:	200b      	movs	r0, #11
 8014e08:	f7ff f8fa 	bl	8014000 <memp_free>
 8014e0c:	e00d      	b.n	8014e2a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014e0e:	7bfb      	ldrb	r3, [r7, #15]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d103      	bne.n	8014e1c <pbuf_free+0xd4>
          mem_free(p);
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f7fe fc77 	bl	8013708 <mem_free>
 8014e1a:	e006      	b.n	8014e2a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8014e4c <pbuf_free+0x104>)
 8014e1e:	f240 320f 	movw	r2, #783	@ 0x30f
 8014e22:	490f      	ldr	r1, [pc, #60]	@ (8014e60 <pbuf_free+0x118>)
 8014e24:	480b      	ldr	r0, [pc, #44]	@ (8014e54 <pbuf_free+0x10c>)
 8014e26:	f00b fa3f 	bl	80202a8 <iprintf>
        }
      }
      count++;
 8014e2a:	7ffb      	ldrb	r3, [r7, #31]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	607b      	str	r3, [r7, #4]
 8014e34:	e001      	b.n	8014e3a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014e36:	2300      	movs	r3, #0
 8014e38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d199      	bne.n	8014d74 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014e40:	7ffb      	ldrb	r3, [r7, #31]
}
 8014e42:	4618      	mov	r0, r3
 8014e44:	3720      	adds	r7, #32
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	08022474 	.word	0x08022474
 8014e50:	080225d8 	.word	0x080225d8
 8014e54:	080224d4 	.word	0x080224d4
 8014e58:	08022604 	.word	0x08022604
 8014e5c:	0802261c 	.word	0x0802261c
 8014e60:	08022640 	.word	0x08022640

08014e64 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014e64:	b480      	push	{r7}
 8014e66:	b085      	sub	sp, #20
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014e70:	e005      	b.n	8014e7e <pbuf_clen+0x1a>
    ++len;
 8014e72:	89fb      	ldrh	r3, [r7, #14]
 8014e74:	3301      	adds	r3, #1
 8014e76:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d1f6      	bne.n	8014e72 <pbuf_clen+0xe>
  }
  return len;
 8014e84:	89fb      	ldrh	r3, [r7, #14]
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	3714      	adds	r7, #20
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr
	...

08014e94 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d016      	beq.n	8014ed0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014ea2:	f009 ff77 	bl	801ed94 <sys_arch_protect>
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	7b9b      	ldrb	r3, [r3, #14]
 8014eac:	3301      	adds	r3, #1
 8014eae:	b2da      	uxtb	r2, r3
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	739a      	strb	r2, [r3, #14]
 8014eb4:	68f8      	ldr	r0, [r7, #12]
 8014eb6:	f009 ff7b 	bl	801edb0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	7b9b      	ldrb	r3, [r3, #14]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d106      	bne.n	8014ed0 <pbuf_ref+0x3c>
 8014ec2:	4b05      	ldr	r3, [pc, #20]	@ (8014ed8 <pbuf_ref+0x44>)
 8014ec4:	f240 3242 	movw	r2, #834	@ 0x342
 8014ec8:	4904      	ldr	r1, [pc, #16]	@ (8014edc <pbuf_ref+0x48>)
 8014eca:	4805      	ldr	r0, [pc, #20]	@ (8014ee0 <pbuf_ref+0x4c>)
 8014ecc:	f00b f9ec 	bl	80202a8 <iprintf>
  }
}
 8014ed0:	bf00      	nop
 8014ed2:	3710      	adds	r7, #16
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	08022474 	.word	0x08022474
 8014edc:	08022654 	.word	0x08022654
 8014ee0:	080224d4 	.word	0x080224d4

08014ee4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b084      	sub	sp, #16
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d002      	beq.n	8014efa <pbuf_cat+0x16>
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d107      	bne.n	8014f0a <pbuf_cat+0x26>
 8014efa:	4b20      	ldr	r3, [pc, #128]	@ (8014f7c <pbuf_cat+0x98>)
 8014efc:	f240 3259 	movw	r2, #857	@ 0x359
 8014f00:	491f      	ldr	r1, [pc, #124]	@ (8014f80 <pbuf_cat+0x9c>)
 8014f02:	4820      	ldr	r0, [pc, #128]	@ (8014f84 <pbuf_cat+0xa0>)
 8014f04:	f00b f9d0 	bl	80202a8 <iprintf>
 8014f08:	e034      	b.n	8014f74 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	60fb      	str	r3, [r7, #12]
 8014f0e:	e00a      	b.n	8014f26 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	891a      	ldrh	r2, [r3, #8]
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	891b      	ldrh	r3, [r3, #8]
 8014f18:	4413      	add	r3, r2
 8014f1a:	b29a      	uxth	r2, r3
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	60fb      	str	r3, [r7, #12]
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d1f0      	bne.n	8014f10 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	891a      	ldrh	r2, [r3, #8]
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	895b      	ldrh	r3, [r3, #10]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d006      	beq.n	8014f48 <pbuf_cat+0x64>
 8014f3a:	4b10      	ldr	r3, [pc, #64]	@ (8014f7c <pbuf_cat+0x98>)
 8014f3c:	f240 3262 	movw	r2, #866	@ 0x362
 8014f40:	4911      	ldr	r1, [pc, #68]	@ (8014f88 <pbuf_cat+0xa4>)
 8014f42:	4810      	ldr	r0, [pc, #64]	@ (8014f84 <pbuf_cat+0xa0>)
 8014f44:	f00b f9b0 	bl	80202a8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d006      	beq.n	8014f5e <pbuf_cat+0x7a>
 8014f50:	4b0a      	ldr	r3, [pc, #40]	@ (8014f7c <pbuf_cat+0x98>)
 8014f52:	f240 3263 	movw	r2, #867	@ 0x363
 8014f56:	490d      	ldr	r1, [pc, #52]	@ (8014f8c <pbuf_cat+0xa8>)
 8014f58:	480a      	ldr	r0, [pc, #40]	@ (8014f84 <pbuf_cat+0xa0>)
 8014f5a:	f00b f9a5 	bl	80202a8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	891a      	ldrh	r2, [r3, #8]
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	891b      	ldrh	r3, [r3, #8]
 8014f66:	4413      	add	r3, r2
 8014f68:	b29a      	uxth	r2, r3
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	683a      	ldr	r2, [r7, #0]
 8014f72:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	08022474 	.word	0x08022474
 8014f80:	08022668 	.word	0x08022668
 8014f84:	080224d4 	.word	0x080224d4
 8014f88:	080226a0 	.word	0x080226a0
 8014f8c:	080226d0 	.word	0x080226d0

08014f90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014f9a:	6839      	ldr	r1, [r7, #0]
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7ff ffa1 	bl	8014ee4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014fa2:	6838      	ldr	r0, [r7, #0]
 8014fa4:	f7ff ff76 	bl	8014e94 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014fa8:	bf00      	nop
 8014faa:	3708      	adds	r7, #8
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b086      	sub	sp, #24
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	617b      	str	r3, [r7, #20]
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d008      	beq.n	8014fda <pbuf_copy+0x2a>
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d005      	beq.n	8014fda <pbuf_copy+0x2a>
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	891a      	ldrh	r2, [r3, #8]
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	891b      	ldrh	r3, [r3, #8]
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	d209      	bcs.n	8014fee <pbuf_copy+0x3e>
 8014fda:	4b57      	ldr	r3, [pc, #348]	@ (8015138 <pbuf_copy+0x188>)
 8014fdc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014fe0:	4956      	ldr	r1, [pc, #344]	@ (801513c <pbuf_copy+0x18c>)
 8014fe2:	4857      	ldr	r0, [pc, #348]	@ (8015140 <pbuf_copy+0x190>)
 8014fe4:	f00b f960 	bl	80202a8 <iprintf>
 8014fe8:	f06f 030f 	mvn.w	r3, #15
 8014fec:	e09f      	b.n	801512e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	895b      	ldrh	r3, [r3, #10]
 8014ff2:	461a      	mov	r2, r3
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	1ad2      	subs	r2, r2, r3
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	895b      	ldrh	r3, [r3, #10]
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	1acb      	subs	r3, r1, r3
 8015002:	429a      	cmp	r2, r3
 8015004:	d306      	bcc.n	8015014 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	895b      	ldrh	r3, [r3, #10]
 801500a:	461a      	mov	r2, r3
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	1ad3      	subs	r3, r2, r3
 8015010:	60fb      	str	r3, [r7, #12]
 8015012:	e005      	b.n	8015020 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	895b      	ldrh	r3, [r3, #10]
 8015018:	461a      	mov	r2, r3
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	1ad3      	subs	r3, r2, r3
 801501e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	685a      	ldr	r2, [r3, #4]
 8015024:	697b      	ldr	r3, [r7, #20]
 8015026:	18d0      	adds	r0, r2, r3
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	685a      	ldr	r2, [r3, #4]
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	4413      	add	r3, r2
 8015030:	68fa      	ldr	r2, [r7, #12]
 8015032:	4619      	mov	r1, r3
 8015034:	f00b fb63 	bl	80206fe <memcpy>
    offset_to += len;
 8015038:	697a      	ldr	r2, [r7, #20]
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	4413      	add	r3, r2
 801503e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015040:	693a      	ldr	r2, [r7, #16]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	4413      	add	r3, r2
 8015046:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	895b      	ldrh	r3, [r3, #10]
 801504c:	461a      	mov	r2, r3
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	4293      	cmp	r3, r2
 8015052:	d906      	bls.n	8015062 <pbuf_copy+0xb2>
 8015054:	4b38      	ldr	r3, [pc, #224]	@ (8015138 <pbuf_copy+0x188>)
 8015056:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801505a:	493a      	ldr	r1, [pc, #232]	@ (8015144 <pbuf_copy+0x194>)
 801505c:	4838      	ldr	r0, [pc, #224]	@ (8015140 <pbuf_copy+0x190>)
 801505e:	f00b f923 	bl	80202a8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	895b      	ldrh	r3, [r3, #10]
 8015066:	461a      	mov	r2, r3
 8015068:	693b      	ldr	r3, [r7, #16]
 801506a:	4293      	cmp	r3, r2
 801506c:	d906      	bls.n	801507c <pbuf_copy+0xcc>
 801506e:	4b32      	ldr	r3, [pc, #200]	@ (8015138 <pbuf_copy+0x188>)
 8015070:	f240 32da 	movw	r2, #986	@ 0x3da
 8015074:	4934      	ldr	r1, [pc, #208]	@ (8015148 <pbuf_copy+0x198>)
 8015076:	4832      	ldr	r0, [pc, #200]	@ (8015140 <pbuf_copy+0x190>)
 8015078:	f00b f916 	bl	80202a8 <iprintf>
    if (offset_from >= p_from->len) {
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	895b      	ldrh	r3, [r3, #10]
 8015080:	461a      	mov	r2, r3
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	4293      	cmp	r3, r2
 8015086:	d304      	bcc.n	8015092 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015088:	2300      	movs	r3, #0
 801508a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	895b      	ldrh	r3, [r3, #10]
 8015096:	461a      	mov	r2, r3
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	4293      	cmp	r3, r2
 801509c:	d114      	bne.n	80150c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801509e:	2300      	movs	r3, #0
 80150a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d10c      	bne.n	80150c8 <pbuf_copy+0x118>
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d009      	beq.n	80150c8 <pbuf_copy+0x118>
 80150b4:	4b20      	ldr	r3, [pc, #128]	@ (8015138 <pbuf_copy+0x188>)
 80150b6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80150ba:	4924      	ldr	r1, [pc, #144]	@ (801514c <pbuf_copy+0x19c>)
 80150bc:	4820      	ldr	r0, [pc, #128]	@ (8015140 <pbuf_copy+0x190>)
 80150be:	f00b f8f3 	bl	80202a8 <iprintf>
 80150c2:	f06f 030f 	mvn.w	r3, #15
 80150c6:	e032      	b.n	801512e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d013      	beq.n	80150f6 <pbuf_copy+0x146>
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	895a      	ldrh	r2, [r3, #10]
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	891b      	ldrh	r3, [r3, #8]
 80150d6:	429a      	cmp	r2, r3
 80150d8:	d10d      	bne.n	80150f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d009      	beq.n	80150f6 <pbuf_copy+0x146>
 80150e2:	4b15      	ldr	r3, [pc, #84]	@ (8015138 <pbuf_copy+0x188>)
 80150e4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80150e8:	4919      	ldr	r1, [pc, #100]	@ (8015150 <pbuf_copy+0x1a0>)
 80150ea:	4815      	ldr	r0, [pc, #84]	@ (8015140 <pbuf_copy+0x190>)
 80150ec:	f00b f8dc 	bl	80202a8 <iprintf>
 80150f0:	f06f 0305 	mvn.w	r3, #5
 80150f4:	e01b      	b.n	801512e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d013      	beq.n	8015124 <pbuf_copy+0x174>
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	895a      	ldrh	r2, [r3, #10]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	891b      	ldrh	r3, [r3, #8]
 8015104:	429a      	cmp	r2, r3
 8015106:	d10d      	bne.n	8015124 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d009      	beq.n	8015124 <pbuf_copy+0x174>
 8015110:	4b09      	ldr	r3, [pc, #36]	@ (8015138 <pbuf_copy+0x188>)
 8015112:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8015116:	490e      	ldr	r1, [pc, #56]	@ (8015150 <pbuf_copy+0x1a0>)
 8015118:	4809      	ldr	r0, [pc, #36]	@ (8015140 <pbuf_copy+0x190>)
 801511a:	f00b f8c5 	bl	80202a8 <iprintf>
 801511e:	f06f 0305 	mvn.w	r3, #5
 8015122:	e004      	b.n	801512e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	f47f af61 	bne.w	8014fee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801512c:	2300      	movs	r3, #0
}
 801512e:	4618      	mov	r0, r3
 8015130:	3718      	adds	r7, #24
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
 8015136:	bf00      	nop
 8015138:	08022474 	.word	0x08022474
 801513c:	0802271c 	.word	0x0802271c
 8015140:	080224d4 	.word	0x080224d4
 8015144:	0802274c 	.word	0x0802274c
 8015148:	08022764 	.word	0x08022764
 801514c:	08022780 	.word	0x08022780
 8015150:	08022790 	.word	0x08022790

08015154 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b088      	sub	sp, #32
 8015158:	af00      	add	r7, sp, #0
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	4611      	mov	r1, r2
 8015160:	461a      	mov	r2, r3
 8015162:	460b      	mov	r3, r1
 8015164:	80fb      	strh	r3, [r7, #6]
 8015166:	4613      	mov	r3, r2
 8015168:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801516a:	2300      	movs	r3, #0
 801516c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801516e:	2300      	movs	r3, #0
 8015170:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d108      	bne.n	801518a <pbuf_copy_partial+0x36>
 8015178:	4b2b      	ldr	r3, [pc, #172]	@ (8015228 <pbuf_copy_partial+0xd4>)
 801517a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801517e:	492b      	ldr	r1, [pc, #172]	@ (801522c <pbuf_copy_partial+0xd8>)
 8015180:	482b      	ldr	r0, [pc, #172]	@ (8015230 <pbuf_copy_partial+0xdc>)
 8015182:	f00b f891 	bl	80202a8 <iprintf>
 8015186:	2300      	movs	r3, #0
 8015188:	e04a      	b.n	8015220 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d108      	bne.n	80151a2 <pbuf_copy_partial+0x4e>
 8015190:	4b25      	ldr	r3, [pc, #148]	@ (8015228 <pbuf_copy_partial+0xd4>)
 8015192:	f240 420b 	movw	r2, #1035	@ 0x40b
 8015196:	4927      	ldr	r1, [pc, #156]	@ (8015234 <pbuf_copy_partial+0xe0>)
 8015198:	4825      	ldr	r0, [pc, #148]	@ (8015230 <pbuf_copy_partial+0xdc>)
 801519a:	f00b f885 	bl	80202a8 <iprintf>
 801519e:	2300      	movs	r3, #0
 80151a0:	e03e      	b.n	8015220 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	61fb      	str	r3, [r7, #28]
 80151a6:	e034      	b.n	8015212 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80151a8:	88bb      	ldrh	r3, [r7, #4]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d00a      	beq.n	80151c4 <pbuf_copy_partial+0x70>
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	895b      	ldrh	r3, [r3, #10]
 80151b2:	88ba      	ldrh	r2, [r7, #4]
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d305      	bcc.n	80151c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80151b8:	69fb      	ldr	r3, [r7, #28]
 80151ba:	895b      	ldrh	r3, [r3, #10]
 80151bc:	88ba      	ldrh	r2, [r7, #4]
 80151be:	1ad3      	subs	r3, r2, r3
 80151c0:	80bb      	strh	r3, [r7, #4]
 80151c2:	e023      	b.n	801520c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80151c4:	69fb      	ldr	r3, [r7, #28]
 80151c6:	895a      	ldrh	r2, [r3, #10]
 80151c8:	88bb      	ldrh	r3, [r7, #4]
 80151ca:	1ad3      	subs	r3, r2, r3
 80151cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80151ce:	8b3a      	ldrh	r2, [r7, #24]
 80151d0:	88fb      	ldrh	r3, [r7, #6]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d901      	bls.n	80151da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80151d6:	88fb      	ldrh	r3, [r7, #6]
 80151d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80151da:	8b7b      	ldrh	r3, [r7, #26]
 80151dc:	68ba      	ldr	r2, [r7, #8]
 80151de:	18d0      	adds	r0, r2, r3
 80151e0:	69fb      	ldr	r3, [r7, #28]
 80151e2:	685a      	ldr	r2, [r3, #4]
 80151e4:	88bb      	ldrh	r3, [r7, #4]
 80151e6:	4413      	add	r3, r2
 80151e8:	8b3a      	ldrh	r2, [r7, #24]
 80151ea:	4619      	mov	r1, r3
 80151ec:	f00b fa87 	bl	80206fe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80151f0:	8afa      	ldrh	r2, [r7, #22]
 80151f2:	8b3b      	ldrh	r3, [r7, #24]
 80151f4:	4413      	add	r3, r2
 80151f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80151f8:	8b7a      	ldrh	r2, [r7, #26]
 80151fa:	8b3b      	ldrh	r3, [r7, #24]
 80151fc:	4413      	add	r3, r2
 80151fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015200:	88fa      	ldrh	r2, [r7, #6]
 8015202:	8b3b      	ldrh	r3, [r7, #24]
 8015204:	1ad3      	subs	r3, r2, r3
 8015206:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015208:	2300      	movs	r3, #0
 801520a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	61fb      	str	r3, [r7, #28]
 8015212:	88fb      	ldrh	r3, [r7, #6]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d002      	beq.n	801521e <pbuf_copy_partial+0xca>
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1c4      	bne.n	80151a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801521e:	8afb      	ldrh	r3, [r7, #22]
}
 8015220:	4618      	mov	r0, r3
 8015222:	3720      	adds	r7, #32
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}
 8015228:	08022474 	.word	0x08022474
 801522c:	080227bc 	.word	0x080227bc
 8015230:	080224d4 	.word	0x080224d4
 8015234:	080227dc 	.word	0x080227dc

08015238 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
 801523e:	4603      	mov	r3, r0
 8015240:	603a      	str	r2, [r7, #0]
 8015242:	71fb      	strb	r3, [r7, #7]
 8015244:	460b      	mov	r3, r1
 8015246:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	8919      	ldrh	r1, [r3, #8]
 801524c:	88ba      	ldrh	r2, [r7, #4]
 801524e:	79fb      	ldrb	r3, [r7, #7]
 8015250:	4618      	mov	r0, r3
 8015252:	f7ff fa95 	bl	8014780 <pbuf_alloc>
 8015256:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d101      	bne.n	8015262 <pbuf_clone+0x2a>
    return NULL;
 801525e:	2300      	movs	r3, #0
 8015260:	e011      	b.n	8015286 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015262:	6839      	ldr	r1, [r7, #0]
 8015264:	68f8      	ldr	r0, [r7, #12]
 8015266:	f7ff fea3 	bl	8014fb0 <pbuf_copy>
 801526a:	4603      	mov	r3, r0
 801526c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801526e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d006      	beq.n	8015284 <pbuf_clone+0x4c>
 8015276:	4b06      	ldr	r3, [pc, #24]	@ (8015290 <pbuf_clone+0x58>)
 8015278:	f240 5224 	movw	r2, #1316	@ 0x524
 801527c:	4905      	ldr	r1, [pc, #20]	@ (8015294 <pbuf_clone+0x5c>)
 801527e:	4806      	ldr	r0, [pc, #24]	@ (8015298 <pbuf_clone+0x60>)
 8015280:	f00b f812 	bl	80202a8 <iprintf>
  return q;
 8015284:	68fb      	ldr	r3, [r7, #12]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3710      	adds	r7, #16
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	08022474 	.word	0x08022474
 8015294:	080228e8 	.word	0x080228e8
 8015298:	080224d4 	.word	0x080224d4

0801529c <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 801529c:	b480      	push	{r7}
 801529e:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80152a0:	bf00      	nop
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr
	...

080152ac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80152b0:	f00a fefa 	bl	80200a8 <rand>
 80152b4:	4603      	mov	r3, r0
 80152b6:	b29b      	uxth	r3, r3
 80152b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80152bc:	b29b      	uxth	r3, r3
 80152be:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80152c2:	b29a      	uxth	r2, r3
 80152c4:	4b01      	ldr	r3, [pc, #4]	@ (80152cc <tcp_init+0x20>)
 80152c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80152c8:	bf00      	nop
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	20000024 	.word	0x20000024

080152d0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	7d1b      	ldrb	r3, [r3, #20]
 80152dc:	2b01      	cmp	r3, #1
 80152de:	d105      	bne.n	80152ec <tcp_free+0x1c>
 80152e0:	4b06      	ldr	r3, [pc, #24]	@ (80152fc <tcp_free+0x2c>)
 80152e2:	22d4      	movs	r2, #212	@ 0xd4
 80152e4:	4906      	ldr	r1, [pc, #24]	@ (8015300 <tcp_free+0x30>)
 80152e6:	4807      	ldr	r0, [pc, #28]	@ (8015304 <tcp_free+0x34>)
 80152e8:	f00a ffde 	bl	80202a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80152ec:	6879      	ldr	r1, [r7, #4]
 80152ee:	2001      	movs	r0, #1
 80152f0:	f7fe fe86 	bl	8014000 <memp_free>
}
 80152f4:	bf00      	nop
 80152f6:	3708      	adds	r7, #8
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	08022974 	.word	0x08022974
 8015300:	080229a4 	.word	0x080229a4
 8015304:	080229b8 	.word	0x080229b8

08015308 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	7d1b      	ldrb	r3, [r3, #20]
 8015314:	2b01      	cmp	r3, #1
 8015316:	d105      	bne.n	8015324 <tcp_free_listen+0x1c>
 8015318:	4b06      	ldr	r3, [pc, #24]	@ (8015334 <tcp_free_listen+0x2c>)
 801531a:	22df      	movs	r2, #223	@ 0xdf
 801531c:	4906      	ldr	r1, [pc, #24]	@ (8015338 <tcp_free_listen+0x30>)
 801531e:	4807      	ldr	r0, [pc, #28]	@ (801533c <tcp_free_listen+0x34>)
 8015320:	f00a ffc2 	bl	80202a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015324:	6879      	ldr	r1, [r7, #4]
 8015326:	2002      	movs	r0, #2
 8015328:	f7fe fe6a 	bl	8014000 <memp_free>
}
 801532c:	bf00      	nop
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	08022974 	.word	0x08022974
 8015338:	080229e0 	.word	0x080229e0
 801533c:	080229b8 	.word	0x080229b8

08015340 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015344:	f000 ffde 	bl	8016304 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015348:	4b07      	ldr	r3, [pc, #28]	@ (8015368 <tcp_tmr+0x28>)
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	3301      	adds	r3, #1
 801534e:	b2da      	uxtb	r2, r3
 8015350:	4b05      	ldr	r3, [pc, #20]	@ (8015368 <tcp_tmr+0x28>)
 8015352:	701a      	strb	r2, [r3, #0]
 8015354:	4b04      	ldr	r3, [pc, #16]	@ (8015368 <tcp_tmr+0x28>)
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	f003 0301 	and.w	r3, r3, #1
 801535c:	2b00      	cmp	r3, #0
 801535e:	d001      	beq.n	8015364 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015360:	f000 fc8e 	bl	8015c80 <tcp_slowtmr>
  }
}
 8015364:	bf00      	nop
 8015366:	bd80      	pop	{r7, pc}
 8015368:	200253bd 	.word	0x200253bd

0801536c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b084      	sub	sp, #16
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d105      	bne.n	8015388 <tcp_remove_listener+0x1c>
 801537c:	4b0d      	ldr	r3, [pc, #52]	@ (80153b4 <tcp_remove_listener+0x48>)
 801537e:	22ff      	movs	r2, #255	@ 0xff
 8015380:	490d      	ldr	r1, [pc, #52]	@ (80153b8 <tcp_remove_listener+0x4c>)
 8015382:	480e      	ldr	r0, [pc, #56]	@ (80153bc <tcp_remove_listener+0x50>)
 8015384:	f00a ff90 	bl	80202a8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	60fb      	str	r3, [r7, #12]
 801538c:	e00a      	b.n	80153a4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	429a      	cmp	r2, r3
 8015396:	d102      	bne.n	801539e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2200      	movs	r2, #0
 801539c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	68db      	ldr	r3, [r3, #12]
 80153a2:	60fb      	str	r3, [r7, #12]
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d1f1      	bne.n	801538e <tcp_remove_listener+0x22>
    }
  }
}
 80153aa:	bf00      	nop
 80153ac:	bf00      	nop
 80153ae:	3710      	adds	r7, #16
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}
 80153b4:	08022974 	.word	0x08022974
 80153b8:	080229fc 	.word	0x080229fc
 80153bc:	080229b8 	.word	0x080229b8

080153c0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b084      	sub	sp, #16
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d106      	bne.n	80153dc <tcp_listen_closed+0x1c>
 80153ce:	4b14      	ldr	r3, [pc, #80]	@ (8015420 <tcp_listen_closed+0x60>)
 80153d0:	f240 1211 	movw	r2, #273	@ 0x111
 80153d4:	4913      	ldr	r1, [pc, #76]	@ (8015424 <tcp_listen_closed+0x64>)
 80153d6:	4814      	ldr	r0, [pc, #80]	@ (8015428 <tcp_listen_closed+0x68>)
 80153d8:	f00a ff66 	bl	80202a8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	7d1b      	ldrb	r3, [r3, #20]
 80153e0:	2b01      	cmp	r3, #1
 80153e2:	d006      	beq.n	80153f2 <tcp_listen_closed+0x32>
 80153e4:	4b0e      	ldr	r3, [pc, #56]	@ (8015420 <tcp_listen_closed+0x60>)
 80153e6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80153ea:	4910      	ldr	r1, [pc, #64]	@ (801542c <tcp_listen_closed+0x6c>)
 80153ec:	480e      	ldr	r0, [pc, #56]	@ (8015428 <tcp_listen_closed+0x68>)
 80153ee:	f00a ff5b 	bl	80202a8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80153f2:	2301      	movs	r3, #1
 80153f4:	60fb      	str	r3, [r7, #12]
 80153f6:	e00b      	b.n	8015410 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80153f8:	4a0d      	ldr	r2, [pc, #52]	@ (8015430 <tcp_listen_closed+0x70>)
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	6879      	ldr	r1, [r7, #4]
 8015404:	4618      	mov	r0, r3
 8015406:	f7ff ffb1 	bl	801536c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	3301      	adds	r3, #1
 801540e:	60fb      	str	r3, [r7, #12]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2b03      	cmp	r3, #3
 8015414:	d9f0      	bls.n	80153f8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015416:	bf00      	nop
 8015418:	bf00      	nop
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	08022974 	.word	0x08022974
 8015424:	08022a24 	.word	0x08022a24
 8015428:	080229b8 	.word	0x080229b8
 801542c:	08022a30 	.word	0x08022a30
 8015430:	08024fd8 	.word	0x08024fd8

08015434 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015434:	b5b0      	push	{r4, r5, r7, lr}
 8015436:	b088      	sub	sp, #32
 8015438:	af04      	add	r7, sp, #16
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	460b      	mov	r3, r1
 801543e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d106      	bne.n	8015454 <tcp_close_shutdown+0x20>
 8015446:	4b63      	ldr	r3, [pc, #396]	@ (80155d4 <tcp_close_shutdown+0x1a0>)
 8015448:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801544c:	4962      	ldr	r1, [pc, #392]	@ (80155d8 <tcp_close_shutdown+0x1a4>)
 801544e:	4863      	ldr	r0, [pc, #396]	@ (80155dc <tcp_close_shutdown+0x1a8>)
 8015450:	f00a ff2a 	bl	80202a8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015454:	78fb      	ldrb	r3, [r7, #3]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d066      	beq.n	8015528 <tcp_close_shutdown+0xf4>
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	7d1b      	ldrb	r3, [r3, #20]
 801545e:	2b04      	cmp	r3, #4
 8015460:	d003      	beq.n	801546a <tcp_close_shutdown+0x36>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	7d1b      	ldrb	r3, [r3, #20]
 8015466:	2b07      	cmp	r3, #7
 8015468:	d15e      	bne.n	8015528 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801546e:	2b00      	cmp	r3, #0
 8015470:	d104      	bne.n	801547c <tcp_close_shutdown+0x48>
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015476:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801547a:	d055      	beq.n	8015528 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	8b5b      	ldrh	r3, [r3, #26]
 8015480:	f003 0310 	and.w	r3, r3, #16
 8015484:	2b00      	cmp	r3, #0
 8015486:	d106      	bne.n	8015496 <tcp_close_shutdown+0x62>
 8015488:	4b52      	ldr	r3, [pc, #328]	@ (80155d4 <tcp_close_shutdown+0x1a0>)
 801548a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801548e:	4954      	ldr	r1, [pc, #336]	@ (80155e0 <tcp_close_shutdown+0x1ac>)
 8015490:	4852      	ldr	r0, [pc, #328]	@ (80155dc <tcp_close_shutdown+0x1a8>)
 8015492:	f00a ff09 	bl	80202a8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801549e:	687d      	ldr	r5, [r7, #4]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	3304      	adds	r3, #4
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	8ad2      	ldrh	r2, [r2, #22]
 80154a8:	6879      	ldr	r1, [r7, #4]
 80154aa:	8b09      	ldrh	r1, [r1, #24]
 80154ac:	9102      	str	r1, [sp, #8]
 80154ae:	9201      	str	r2, [sp, #4]
 80154b0:	9300      	str	r3, [sp, #0]
 80154b2:	462b      	mov	r3, r5
 80154b4:	4622      	mov	r2, r4
 80154b6:	4601      	mov	r1, r0
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f005 fdcb 	bl	801b054 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f001 fafa 	bl	8016ab8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80154c4:	4b47      	ldr	r3, [pc, #284]	@ (80155e4 <tcp_close_shutdown+0x1b0>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	687a      	ldr	r2, [r7, #4]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d105      	bne.n	80154da <tcp_close_shutdown+0xa6>
 80154ce:	4b45      	ldr	r3, [pc, #276]	@ (80155e4 <tcp_close_shutdown+0x1b0>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	68db      	ldr	r3, [r3, #12]
 80154d4:	4a43      	ldr	r2, [pc, #268]	@ (80155e4 <tcp_close_shutdown+0x1b0>)
 80154d6:	6013      	str	r3, [r2, #0]
 80154d8:	e013      	b.n	8015502 <tcp_close_shutdown+0xce>
 80154da:	4b42      	ldr	r3, [pc, #264]	@ (80155e4 <tcp_close_shutdown+0x1b0>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	60fb      	str	r3, [r7, #12]
 80154e0:	e00c      	b.n	80154fc <tcp_close_shutdown+0xc8>
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	68db      	ldr	r3, [r3, #12]
 80154e6:	687a      	ldr	r2, [r7, #4]
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d104      	bne.n	80154f6 <tcp_close_shutdown+0xc2>
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	68da      	ldr	r2, [r3, #12]
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	60da      	str	r2, [r3, #12]
 80154f4:	e005      	b.n	8015502 <tcp_close_shutdown+0xce>
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	68db      	ldr	r3, [r3, #12]
 80154fa:	60fb      	str	r3, [r7, #12]
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d1ef      	bne.n	80154e2 <tcp_close_shutdown+0xae>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2200      	movs	r2, #0
 8015506:	60da      	str	r2, [r3, #12]
 8015508:	4b37      	ldr	r3, [pc, #220]	@ (80155e8 <tcp_close_shutdown+0x1b4>)
 801550a:	2201      	movs	r2, #1
 801550c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801550e:	4b37      	ldr	r3, [pc, #220]	@ (80155ec <tcp_close_shutdown+0x1b8>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	429a      	cmp	r2, r3
 8015516:	d102      	bne.n	801551e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015518:	f003 fff4 	bl	8019504 <tcp_trigger_input_pcb_close>
 801551c:	e002      	b.n	8015524 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f7ff fed6 	bl	80152d0 <tcp_free>
      }
      return ERR_OK;
 8015524:	2300      	movs	r3, #0
 8015526:	e050      	b.n	80155ca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	7d1b      	ldrb	r3, [r3, #20]
 801552c:	2b02      	cmp	r3, #2
 801552e:	d03b      	beq.n	80155a8 <tcp_close_shutdown+0x174>
 8015530:	2b02      	cmp	r3, #2
 8015532:	dc44      	bgt.n	80155be <tcp_close_shutdown+0x18a>
 8015534:	2b00      	cmp	r3, #0
 8015536:	d002      	beq.n	801553e <tcp_close_shutdown+0x10a>
 8015538:	2b01      	cmp	r3, #1
 801553a:	d02a      	beq.n	8015592 <tcp_close_shutdown+0x15e>
 801553c:	e03f      	b.n	80155be <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	8adb      	ldrh	r3, [r3, #22]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d021      	beq.n	801558a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015546:	4b2a      	ldr	r3, [pc, #168]	@ (80155f0 <tcp_close_shutdown+0x1bc>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	687a      	ldr	r2, [r7, #4]
 801554c:	429a      	cmp	r2, r3
 801554e:	d105      	bne.n	801555c <tcp_close_shutdown+0x128>
 8015550:	4b27      	ldr	r3, [pc, #156]	@ (80155f0 <tcp_close_shutdown+0x1bc>)
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	4a26      	ldr	r2, [pc, #152]	@ (80155f0 <tcp_close_shutdown+0x1bc>)
 8015558:	6013      	str	r3, [r2, #0]
 801555a:	e013      	b.n	8015584 <tcp_close_shutdown+0x150>
 801555c:	4b24      	ldr	r3, [pc, #144]	@ (80155f0 <tcp_close_shutdown+0x1bc>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	60bb      	str	r3, [r7, #8]
 8015562:	e00c      	b.n	801557e <tcp_close_shutdown+0x14a>
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	687a      	ldr	r2, [r7, #4]
 801556a:	429a      	cmp	r2, r3
 801556c:	d104      	bne.n	8015578 <tcp_close_shutdown+0x144>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	68da      	ldr	r2, [r3, #12]
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	60da      	str	r2, [r3, #12]
 8015576:	e005      	b.n	8015584 <tcp_close_shutdown+0x150>
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	60bb      	str	r3, [r7, #8]
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d1ef      	bne.n	8015564 <tcp_close_shutdown+0x130>
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	2200      	movs	r2, #0
 8015588:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f7ff fea0 	bl	80152d0 <tcp_free>
      break;
 8015590:	e01a      	b.n	80155c8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015592:	6878      	ldr	r0, [r7, #4]
 8015594:	f7ff ff14 	bl	80153c0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015598:	6879      	ldr	r1, [r7, #4]
 801559a:	4816      	ldr	r0, [pc, #88]	@ (80155f4 <tcp_close_shutdown+0x1c0>)
 801559c:	f001 fadc 	bl	8016b58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f7ff feb1 	bl	8015308 <tcp_free_listen>
      break;
 80155a6:	e00f      	b.n	80155c8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80155a8:	6879      	ldr	r1, [r7, #4]
 80155aa:	480e      	ldr	r0, [pc, #56]	@ (80155e4 <tcp_close_shutdown+0x1b0>)
 80155ac:	f001 fad4 	bl	8016b58 <tcp_pcb_remove>
 80155b0:	4b0d      	ldr	r3, [pc, #52]	@ (80155e8 <tcp_close_shutdown+0x1b4>)
 80155b2:	2201      	movs	r2, #1
 80155b4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f7ff fe8a 	bl	80152d0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80155bc:	e004      	b.n	80155c8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80155be:	6878      	ldr	r0, [r7, #4]
 80155c0:	f000 f81a 	bl	80155f8 <tcp_close_shutdown_fin>
 80155c4:	4603      	mov	r3, r0
 80155c6:	e000      	b.n	80155ca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80155c8:	2300      	movs	r3, #0
}
 80155ca:	4618      	mov	r0, r3
 80155cc:	3710      	adds	r7, #16
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bdb0      	pop	{r4, r5, r7, pc}
 80155d2:	bf00      	nop
 80155d4:	08022974 	.word	0x08022974
 80155d8:	08022a48 	.word	0x08022a48
 80155dc:	080229b8 	.word	0x080229b8
 80155e0:	08022a68 	.word	0x08022a68
 80155e4:	200253b4 	.word	0x200253b4
 80155e8:	200253bc 	.word	0x200253bc
 80155ec:	200253f4 	.word	0x200253f4
 80155f0:	200253ac 	.word	0x200253ac
 80155f4:	200253b0 	.word	0x200253b0

080155f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b084      	sub	sp, #16
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d106      	bne.n	8015614 <tcp_close_shutdown_fin+0x1c>
 8015606:	4b2e      	ldr	r3, [pc, #184]	@ (80156c0 <tcp_close_shutdown_fin+0xc8>)
 8015608:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801560c:	492d      	ldr	r1, [pc, #180]	@ (80156c4 <tcp_close_shutdown_fin+0xcc>)
 801560e:	482e      	ldr	r0, [pc, #184]	@ (80156c8 <tcp_close_shutdown_fin+0xd0>)
 8015610:	f00a fe4a 	bl	80202a8 <iprintf>

  switch (pcb->state) {
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	7d1b      	ldrb	r3, [r3, #20]
 8015618:	2b07      	cmp	r3, #7
 801561a:	d020      	beq.n	801565e <tcp_close_shutdown_fin+0x66>
 801561c:	2b07      	cmp	r3, #7
 801561e:	dc2b      	bgt.n	8015678 <tcp_close_shutdown_fin+0x80>
 8015620:	2b03      	cmp	r3, #3
 8015622:	d002      	beq.n	801562a <tcp_close_shutdown_fin+0x32>
 8015624:	2b04      	cmp	r3, #4
 8015626:	d00d      	beq.n	8015644 <tcp_close_shutdown_fin+0x4c>
 8015628:	e026      	b.n	8015678 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801562a:	6878      	ldr	r0, [r7, #4]
 801562c:	f004 fdfa 	bl	801a224 <tcp_send_fin>
 8015630:	4603      	mov	r3, r0
 8015632:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d11f      	bne.n	801567c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2205      	movs	r2, #5
 8015640:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015642:	e01b      	b.n	801567c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f004 fded 	bl	801a224 <tcp_send_fin>
 801564a:	4603      	mov	r3, r0
 801564c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801564e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d114      	bne.n	8015680 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2205      	movs	r2, #5
 801565a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801565c:	e010      	b.n	8015680 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f004 fde0 	bl	801a224 <tcp_send_fin>
 8015664:	4603      	mov	r3, r0
 8015666:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d109      	bne.n	8015684 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2209      	movs	r2, #9
 8015674:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015676:	e005      	b.n	8015684 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015678:	2300      	movs	r3, #0
 801567a:	e01c      	b.n	80156b6 <tcp_close_shutdown_fin+0xbe>
      break;
 801567c:	bf00      	nop
 801567e:	e002      	b.n	8015686 <tcp_close_shutdown_fin+0x8e>
      break;
 8015680:	bf00      	nop
 8015682:	e000      	b.n	8015686 <tcp_close_shutdown_fin+0x8e>
      break;
 8015684:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d103      	bne.n	8015696 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801568e:	6878      	ldr	r0, [r7, #4]
 8015690:	f004 ff18 	bl	801a4c4 <tcp_output>
 8015694:	e00d      	b.n	80156b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801569a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801569e:	d108      	bne.n	80156b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	8b5b      	ldrh	r3, [r3, #26]
 80156a4:	f043 0308 	orr.w	r3, r3, #8
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80156ae:	2300      	movs	r3, #0
 80156b0:	e001      	b.n	80156b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80156b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3710      	adds	r7, #16
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	08022974 	.word	0x08022974
 80156c4:	08022a24 	.word	0x08022a24
 80156c8:	080229b8 	.word	0x080229b8

080156cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d109      	bne.n	80156ee <tcp_close+0x22>
 80156da:	4b0f      	ldr	r3, [pc, #60]	@ (8015718 <tcp_close+0x4c>)
 80156dc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80156e0:	490e      	ldr	r1, [pc, #56]	@ (801571c <tcp_close+0x50>)
 80156e2:	480f      	ldr	r0, [pc, #60]	@ (8015720 <tcp_close+0x54>)
 80156e4:	f00a fde0 	bl	80202a8 <iprintf>
 80156e8:	f06f 030f 	mvn.w	r3, #15
 80156ec:	e00f      	b.n	801570e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	7d1b      	ldrb	r3, [r3, #20]
 80156f2:	2b01      	cmp	r3, #1
 80156f4:	d006      	beq.n	8015704 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	8b5b      	ldrh	r3, [r3, #26]
 80156fa:	f043 0310 	orr.w	r3, r3, #16
 80156fe:	b29a      	uxth	r2, r3
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015704:	2101      	movs	r1, #1
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f7ff fe94 	bl	8015434 <tcp_close_shutdown>
 801570c:	4603      	mov	r3, r0
}
 801570e:	4618      	mov	r0, r3
 8015710:	3708      	adds	r7, #8
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}
 8015716:	bf00      	nop
 8015718:	08022974 	.word	0x08022974
 801571c:	08022a84 	.word	0x08022a84
 8015720:	080229b8 	.word	0x080229b8

08015724 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b084      	sub	sp, #16
 8015728:	af00      	add	r7, sp, #0
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d109      	bne.n	801574a <tcp_shutdown+0x26>
 8015736:	4b26      	ldr	r3, [pc, #152]	@ (80157d0 <tcp_shutdown+0xac>)
 8015738:	f240 2207 	movw	r2, #519	@ 0x207
 801573c:	4925      	ldr	r1, [pc, #148]	@ (80157d4 <tcp_shutdown+0xb0>)
 801573e:	4826      	ldr	r0, [pc, #152]	@ (80157d8 <tcp_shutdown+0xb4>)
 8015740:	f00a fdb2 	bl	80202a8 <iprintf>
 8015744:	f06f 030f 	mvn.w	r3, #15
 8015748:	e03d      	b.n	80157c6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	7d1b      	ldrb	r3, [r3, #20]
 801574e:	2b01      	cmp	r3, #1
 8015750:	d102      	bne.n	8015758 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015752:	f06f 030a 	mvn.w	r3, #10
 8015756:	e036      	b.n	80157c6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d01b      	beq.n	8015796 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	8b5b      	ldrh	r3, [r3, #26]
 8015762:	f043 0310 	orr.w	r3, r3, #16
 8015766:	b29a      	uxth	r2, r3
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d005      	beq.n	801577e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8015772:	2101      	movs	r1, #1
 8015774:	68f8      	ldr	r0, [r7, #12]
 8015776:	f7ff fe5d 	bl	8015434 <tcp_close_shutdown>
 801577a:	4603      	mov	r3, r0
 801577c:	e023      	b.n	80157c6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015782:	2b00      	cmp	r3, #0
 8015784:	d007      	beq.n	8015796 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801578a:	4618      	mov	r0, r3
 801578c:	f7ff fadc 	bl	8014d48 <pbuf_free>
      pcb->refused_data = NULL;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	2200      	movs	r2, #0
 8015794:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d013      	beq.n	80157c4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	7d1b      	ldrb	r3, [r3, #20]
 80157a0:	2b04      	cmp	r3, #4
 80157a2:	dc02      	bgt.n	80157aa <tcp_shutdown+0x86>
 80157a4:	2b03      	cmp	r3, #3
 80157a6:	da02      	bge.n	80157ae <tcp_shutdown+0x8a>
 80157a8:	e009      	b.n	80157be <tcp_shutdown+0x9a>
 80157aa:	2b07      	cmp	r3, #7
 80157ac:	d107      	bne.n	80157be <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	b2db      	uxtb	r3, r3
 80157b2:	4619      	mov	r1, r3
 80157b4:	68f8      	ldr	r0, [r7, #12]
 80157b6:	f7ff fe3d 	bl	8015434 <tcp_close_shutdown>
 80157ba:	4603      	mov	r3, r0
 80157bc:	e003      	b.n	80157c6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80157be:	f06f 030a 	mvn.w	r3, #10
 80157c2:	e000      	b.n	80157c6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80157c4:	2300      	movs	r3, #0
}
 80157c6:	4618      	mov	r0, r3
 80157c8:	3710      	adds	r7, #16
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	bf00      	nop
 80157d0:	08022974 	.word	0x08022974
 80157d4:	08022a9c 	.word	0x08022a9c
 80157d8:	080229b8 	.word	0x080229b8

080157dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b08e      	sub	sp, #56	@ 0x38
 80157e0:	af04      	add	r7, sp, #16
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d107      	bne.n	80157fc <tcp_abandon+0x20>
 80157ec:	4b52      	ldr	r3, [pc, #328]	@ (8015938 <tcp_abandon+0x15c>)
 80157ee:	f240 223d 	movw	r2, #573	@ 0x23d
 80157f2:	4952      	ldr	r1, [pc, #328]	@ (801593c <tcp_abandon+0x160>)
 80157f4:	4852      	ldr	r0, [pc, #328]	@ (8015940 <tcp_abandon+0x164>)
 80157f6:	f00a fd57 	bl	80202a8 <iprintf>
 80157fa:	e099      	b.n	8015930 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	7d1b      	ldrb	r3, [r3, #20]
 8015800:	2b01      	cmp	r3, #1
 8015802:	d106      	bne.n	8015812 <tcp_abandon+0x36>
 8015804:	4b4c      	ldr	r3, [pc, #304]	@ (8015938 <tcp_abandon+0x15c>)
 8015806:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801580a:	494e      	ldr	r1, [pc, #312]	@ (8015944 <tcp_abandon+0x168>)
 801580c:	484c      	ldr	r0, [pc, #304]	@ (8015940 <tcp_abandon+0x164>)
 801580e:	f00a fd4b 	bl	80202a8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	7d1b      	ldrb	r3, [r3, #20]
 8015816:	2b0a      	cmp	r3, #10
 8015818:	d107      	bne.n	801582a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801581a:	6879      	ldr	r1, [r7, #4]
 801581c:	484a      	ldr	r0, [pc, #296]	@ (8015948 <tcp_abandon+0x16c>)
 801581e:	f001 f99b 	bl	8016b58 <tcp_pcb_remove>
    tcp_free(pcb);
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f7ff fd54 	bl	80152d0 <tcp_free>
 8015828:	e082      	b.n	8015930 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801582a:	2300      	movs	r3, #0
 801582c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801582e:	2300      	movs	r3, #0
 8015830:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015836:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801583c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015844:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	691b      	ldr	r3, [r3, #16]
 801584a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	7d1b      	ldrb	r3, [r3, #20]
 8015850:	2b00      	cmp	r3, #0
 8015852:	d126      	bne.n	80158a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	8adb      	ldrh	r3, [r3, #22]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d02e      	beq.n	80158ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801585c:	4b3b      	ldr	r3, [pc, #236]	@ (801594c <tcp_abandon+0x170>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	687a      	ldr	r2, [r7, #4]
 8015862:	429a      	cmp	r2, r3
 8015864:	d105      	bne.n	8015872 <tcp_abandon+0x96>
 8015866:	4b39      	ldr	r3, [pc, #228]	@ (801594c <tcp_abandon+0x170>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	4a37      	ldr	r2, [pc, #220]	@ (801594c <tcp_abandon+0x170>)
 801586e:	6013      	str	r3, [r2, #0]
 8015870:	e013      	b.n	801589a <tcp_abandon+0xbe>
 8015872:	4b36      	ldr	r3, [pc, #216]	@ (801594c <tcp_abandon+0x170>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	61fb      	str	r3, [r7, #28]
 8015878:	e00c      	b.n	8015894 <tcp_abandon+0xb8>
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	68db      	ldr	r3, [r3, #12]
 801587e:	687a      	ldr	r2, [r7, #4]
 8015880:	429a      	cmp	r2, r3
 8015882:	d104      	bne.n	801588e <tcp_abandon+0xb2>
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	68da      	ldr	r2, [r3, #12]
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	60da      	str	r2, [r3, #12]
 801588c:	e005      	b.n	801589a <tcp_abandon+0xbe>
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	68db      	ldr	r3, [r3, #12]
 8015892:	61fb      	str	r3, [r7, #28]
 8015894:	69fb      	ldr	r3, [r7, #28]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d1ef      	bne.n	801587a <tcp_abandon+0x9e>
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	2200      	movs	r2, #0
 801589e:	60da      	str	r2, [r3, #12]
 80158a0:	e00b      	b.n	80158ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	8adb      	ldrh	r3, [r3, #22]
 80158aa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80158ac:	6879      	ldr	r1, [r7, #4]
 80158ae:	4828      	ldr	r0, [pc, #160]	@ (8015950 <tcp_abandon+0x174>)
 80158b0:	f001 f952 	bl	8016b58 <tcp_pcb_remove>
 80158b4:	4b27      	ldr	r3, [pc, #156]	@ (8015954 <tcp_abandon+0x178>)
 80158b6:	2201      	movs	r2, #1
 80158b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d004      	beq.n	80158cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158c6:	4618      	mov	r0, r3
 80158c8:	f000 fdfc 	bl	80164c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d004      	beq.n	80158de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158d8:	4618      	mov	r0, r3
 80158da:	f000 fdf3 	bl	80164c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d004      	beq.n	80158f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158ea:	4618      	mov	r0, r3
 80158ec:	f000 fdea 	bl	80164c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80158f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d00e      	beq.n	8015914 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80158f6:	6879      	ldr	r1, [r7, #4]
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	3304      	adds	r3, #4
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	8b12      	ldrh	r2, [r2, #24]
 8015900:	9202      	str	r2, [sp, #8]
 8015902:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015904:	9201      	str	r2, [sp, #4]
 8015906:	9300      	str	r3, [sp, #0]
 8015908:	460b      	mov	r3, r1
 801590a:	697a      	ldr	r2, [r7, #20]
 801590c:	69b9      	ldr	r1, [r7, #24]
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f005 fba0 	bl	801b054 <tcp_rst>
    }
    last_state = pcb->state;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	7d1b      	ldrb	r3, [r3, #20]
 8015918:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f7ff fcd8 	bl	80152d0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d004      	beq.n	8015930 <tcp_abandon+0x154>
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	f06f 010c 	mvn.w	r1, #12
 801592c:	68f8      	ldr	r0, [r7, #12]
 801592e:	4798      	blx	r3
  }
}
 8015930:	3728      	adds	r7, #40	@ 0x28
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}
 8015936:	bf00      	nop
 8015938:	08022974 	.word	0x08022974
 801593c:	08022ab8 	.word	0x08022ab8
 8015940:	080229b8 	.word	0x080229b8
 8015944:	08022ad4 	.word	0x08022ad4
 8015948:	200253b8 	.word	0x200253b8
 801594c:	200253ac 	.word	0x200253ac
 8015950:	200253b4 	.word	0x200253b4
 8015954:	200253bc 	.word	0x200253bc

08015958 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b082      	sub	sp, #8
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015960:	2101      	movs	r1, #1
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f7ff ff3a 	bl	80157dc <tcp_abandon>
}
 8015968:	bf00      	nop
 801596a:	3708      	adds	r7, #8
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}

08015970 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b088      	sub	sp, #32
 8015974:	af00      	add	r7, sp, #0
 8015976:	60f8      	str	r0, [r7, #12]
 8015978:	60b9      	str	r1, [r7, #8]
 801597a:	4613      	mov	r3, r2
 801597c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801597e:	2304      	movs	r3, #4
 8015980:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d101      	bne.n	801598c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015988:	4b3e      	ldr	r3, [pc, #248]	@ (8015a84 <tcp_bind+0x114>)
 801598a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d109      	bne.n	80159a6 <tcp_bind+0x36>
 8015992:	4b3d      	ldr	r3, [pc, #244]	@ (8015a88 <tcp_bind+0x118>)
 8015994:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8015998:	493c      	ldr	r1, [pc, #240]	@ (8015a8c <tcp_bind+0x11c>)
 801599a:	483d      	ldr	r0, [pc, #244]	@ (8015a90 <tcp_bind+0x120>)
 801599c:	f00a fc84 	bl	80202a8 <iprintf>
 80159a0:	f06f 030f 	mvn.w	r3, #15
 80159a4:	e06a      	b.n	8015a7c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	7d1b      	ldrb	r3, [r3, #20]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d009      	beq.n	80159c2 <tcp_bind+0x52>
 80159ae:	4b36      	ldr	r3, [pc, #216]	@ (8015a88 <tcp_bind+0x118>)
 80159b0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80159b4:	4937      	ldr	r1, [pc, #220]	@ (8015a94 <tcp_bind+0x124>)
 80159b6:	4836      	ldr	r0, [pc, #216]	@ (8015a90 <tcp_bind+0x120>)
 80159b8:	f00a fc76 	bl	80202a8 <iprintf>
 80159bc:	f06f 0305 	mvn.w	r3, #5
 80159c0:	e05c      	b.n	8015a7c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80159c2:	88fb      	ldrh	r3, [r7, #6]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d109      	bne.n	80159dc <tcp_bind+0x6c>
    port = tcp_new_port();
 80159c8:	f000 f914 	bl	8015bf4 <tcp_new_port>
 80159cc:	4603      	mov	r3, r0
 80159ce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80159d0:	88fb      	ldrh	r3, [r7, #6]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d135      	bne.n	8015a42 <tcp_bind+0xd2>
      return ERR_BUF;
 80159d6:	f06f 0301 	mvn.w	r3, #1
 80159da:	e04f      	b.n	8015a7c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80159dc:	2300      	movs	r3, #0
 80159de:	61fb      	str	r3, [r7, #28]
 80159e0:	e02b      	b.n	8015a3a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80159e2:	4a2d      	ldr	r2, [pc, #180]	@ (8015a98 <tcp_bind+0x128>)
 80159e4:	69fb      	ldr	r3, [r7, #28]
 80159e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	61bb      	str	r3, [r7, #24]
 80159ee:	e01e      	b.n	8015a2e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80159f0:	69bb      	ldr	r3, [r7, #24]
 80159f2:	8adb      	ldrh	r3, [r3, #22]
 80159f4:	88fa      	ldrh	r2, [r7, #6]
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d116      	bne.n	8015a28 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80159fa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d010      	beq.n	8015a22 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d00c      	beq.n	8015a22 <tcp_bind+0xb2>
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d009      	beq.n	8015a22 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d005      	beq.n	8015a22 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	681a      	ldr	r2, [r3, #0]
 8015a1a:	68bb      	ldr	r3, [r7, #8]
 8015a1c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d102      	bne.n	8015a28 <tcp_bind+0xb8>
              return ERR_USE;
 8015a22:	f06f 0307 	mvn.w	r3, #7
 8015a26:	e029      	b.n	8015a7c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	61bb      	str	r3, [r7, #24]
 8015a2e:	69bb      	ldr	r3, [r7, #24]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d1dd      	bne.n	80159f0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015a34:	69fb      	ldr	r3, [r7, #28]
 8015a36:	3301      	adds	r3, #1
 8015a38:	61fb      	str	r3, [r7, #28]
 8015a3a:	69fa      	ldr	r2, [r7, #28]
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	dbcf      	blt.n	80159e2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015a42:	68bb      	ldr	r3, [r7, #8]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d00c      	beq.n	8015a62 <tcp_bind+0xf2>
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d008      	beq.n	8015a62 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d002      	beq.n	8015a5c <tcp_bind+0xec>
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	e000      	b.n	8015a5e <tcp_bind+0xee>
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	68fa      	ldr	r2, [r7, #12]
 8015a60:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	88fa      	ldrh	r2, [r7, #6]
 8015a66:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015a68:	4b0c      	ldr	r3, [pc, #48]	@ (8015a9c <tcp_bind+0x12c>)
 8015a6a:	681a      	ldr	r2, [r3, #0]
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	60da      	str	r2, [r3, #12]
 8015a70:	4a0a      	ldr	r2, [pc, #40]	@ (8015a9c <tcp_bind+0x12c>)
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	6013      	str	r3, [r2, #0]
 8015a76:	f005 fcaf 	bl	801b3d8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015a7a:	2300      	movs	r3, #0
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3720      	adds	r7, #32
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	08025000 	.word	0x08025000
 8015a88:	08022974 	.word	0x08022974
 8015a8c:	08022b08 	.word	0x08022b08
 8015a90:	080229b8 	.word	0x080229b8
 8015a94:	08022b20 	.word	0x08022b20
 8015a98:	08024fd8 	.word	0x08024fd8
 8015a9c:	200253ac 	.word	0x200253ac

08015aa0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b084      	sub	sp, #16
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d106      	bne.n	8015abc <tcp_update_rcv_ann_wnd+0x1c>
 8015aae:	4b25      	ldr	r3, [pc, #148]	@ (8015b44 <tcp_update_rcv_ann_wnd+0xa4>)
 8015ab0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015ab4:	4924      	ldr	r1, [pc, #144]	@ (8015b48 <tcp_update_rcv_ann_wnd+0xa8>)
 8015ab6:	4825      	ldr	r0, [pc, #148]	@ (8015b4c <tcp_update_rcv_ann_wnd+0xac>)
 8015ab8:	f00a fbf6 	bl	80202a8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ac0:	687a      	ldr	r2, [r7, #4]
 8015ac2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015ac4:	4413      	add	r3, r2
 8015ac6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8015ad0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015ad4:	bf28      	it	cs
 8015ad6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8015ada:	b292      	uxth	r2, r2
 8015adc:	4413      	add	r3, r2
 8015ade:	68fa      	ldr	r2, [r7, #12]
 8015ae0:	1ad3      	subs	r3, r2, r3
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	db08      	blt.n	8015af8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015af2:	68fa      	ldr	r2, [r7, #12]
 8015af4:	1ad3      	subs	r3, r2, r3
 8015af6:	e020      	b.n	8015b3a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b00:	1ad3      	subs	r3, r2, r3
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	dd03      	ble.n	8015b0e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2200      	movs	r2, #0
 8015b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015b0c:	e014      	b.n	8015b38 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b16:	1ad3      	subs	r3, r2, r3
 8015b18:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015b20:	d306      	bcc.n	8015b30 <tcp_update_rcv_ann_wnd+0x90>
 8015b22:	4b08      	ldr	r3, [pc, #32]	@ (8015b44 <tcp_update_rcv_ann_wnd+0xa4>)
 8015b24:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8015b28:	4909      	ldr	r1, [pc, #36]	@ (8015b50 <tcp_update_rcv_ann_wnd+0xb0>)
 8015b2a:	4808      	ldr	r0, [pc, #32]	@ (8015b4c <tcp_update_rcv_ann_wnd+0xac>)
 8015b2c:	f00a fbbc 	bl	80202a8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015b38:	2300      	movs	r3, #0
  }
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3710      	adds	r7, #16
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	08022974 	.word	0x08022974
 8015b48:	08022bd0 	.word	0x08022bd0
 8015b4c:	080229b8 	.word	0x080229b8
 8015b50:	08022bf4 	.word	0x08022bf4

08015b54 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b084      	sub	sp, #16
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
 8015b5c:	460b      	mov	r3, r1
 8015b5e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d107      	bne.n	8015b76 <tcp_recved+0x22>
 8015b66:	4b1f      	ldr	r3, [pc, #124]	@ (8015be4 <tcp_recved+0x90>)
 8015b68:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015b6c:	491e      	ldr	r1, [pc, #120]	@ (8015be8 <tcp_recved+0x94>)
 8015b6e:	481f      	ldr	r0, [pc, #124]	@ (8015bec <tcp_recved+0x98>)
 8015b70:	f00a fb9a 	bl	80202a8 <iprintf>
 8015b74:	e032      	b.n	8015bdc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	7d1b      	ldrb	r3, [r3, #20]
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d106      	bne.n	8015b8c <tcp_recved+0x38>
 8015b7e:	4b19      	ldr	r3, [pc, #100]	@ (8015be4 <tcp_recved+0x90>)
 8015b80:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015b84:	491a      	ldr	r1, [pc, #104]	@ (8015bf0 <tcp_recved+0x9c>)
 8015b86:	4819      	ldr	r0, [pc, #100]	@ (8015bec <tcp_recved+0x98>)
 8015b88:	f00a fb8e 	bl	80202a8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015b90:	887b      	ldrh	r3, [r7, #2]
 8015b92:	4413      	add	r3, r2
 8015b94:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015b96:	89fb      	ldrh	r3, [r7, #14]
 8015b98:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015b9c:	d804      	bhi.n	8015ba8 <tcp_recved+0x54>
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ba2:	89fa      	ldrh	r2, [r7, #14]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d204      	bcs.n	8015bb2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015bae:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015bb0:	e002      	b.n	8015bb8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	89fa      	ldrh	r2, [r7, #14]
 8015bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f7ff ff71 	bl	8015aa0 <tcp_update_rcv_ann_wnd>
 8015bbe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015bc6:	d309      	bcc.n	8015bdc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	8b5b      	ldrh	r3, [r3, #26]
 8015bcc:	f043 0302 	orr.w	r3, r3, #2
 8015bd0:	b29a      	uxth	r2, r3
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f004 fc74 	bl	801a4c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	08022974 	.word	0x08022974
 8015be8:	08022c10 	.word	0x08022c10
 8015bec:	080229b8 	.word	0x080229b8
 8015bf0:	08022c28 	.word	0x08022c28

08015bf4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015bf4:	b480      	push	{r7}
 8015bf6:	b083      	sub	sp, #12
 8015bf8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8015c78 <tcp_new_port+0x84>)
 8015c00:	881b      	ldrh	r3, [r3, #0]
 8015c02:	3301      	adds	r3, #1
 8015c04:	b29a      	uxth	r2, r3
 8015c06:	4b1c      	ldr	r3, [pc, #112]	@ (8015c78 <tcp_new_port+0x84>)
 8015c08:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8015c78 <tcp_new_port+0x84>)
 8015c0c:	881b      	ldrh	r3, [r3, #0]
 8015c0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c12:	4293      	cmp	r3, r2
 8015c14:	d103      	bne.n	8015c1e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015c16:	4b18      	ldr	r3, [pc, #96]	@ (8015c78 <tcp_new_port+0x84>)
 8015c18:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015c1c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015c1e:	2300      	movs	r3, #0
 8015c20:	71fb      	strb	r3, [r7, #7]
 8015c22:	e01e      	b.n	8015c62 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015c24:	79fb      	ldrb	r3, [r7, #7]
 8015c26:	4a15      	ldr	r2, [pc, #84]	@ (8015c7c <tcp_new_port+0x88>)
 8015c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	603b      	str	r3, [r7, #0]
 8015c30:	e011      	b.n	8015c56 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	8ada      	ldrh	r2, [r3, #22]
 8015c36:	4b10      	ldr	r3, [pc, #64]	@ (8015c78 <tcp_new_port+0x84>)
 8015c38:	881b      	ldrh	r3, [r3, #0]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d108      	bne.n	8015c50 <tcp_new_port+0x5c>
        n++;
 8015c3e:	88bb      	ldrh	r3, [r7, #4]
 8015c40:	3301      	adds	r3, #1
 8015c42:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015c44:	88bb      	ldrh	r3, [r7, #4]
 8015c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015c4a:	d3d8      	bcc.n	8015bfe <tcp_new_port+0xa>
          return 0;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	e00d      	b.n	8015c6c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	68db      	ldr	r3, [r3, #12]
 8015c54:	603b      	str	r3, [r7, #0]
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d1ea      	bne.n	8015c32 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015c5c:	79fb      	ldrb	r3, [r7, #7]
 8015c5e:	3301      	adds	r3, #1
 8015c60:	71fb      	strb	r3, [r7, #7]
 8015c62:	79fb      	ldrb	r3, [r7, #7]
 8015c64:	2b03      	cmp	r3, #3
 8015c66:	d9dd      	bls.n	8015c24 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015c68:	4b03      	ldr	r3, [pc, #12]	@ (8015c78 <tcp_new_port+0x84>)
 8015c6a:	881b      	ldrh	r3, [r3, #0]
}
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	370c      	adds	r7, #12
 8015c70:	46bd      	mov	sp, r7
 8015c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c76:	4770      	bx	lr
 8015c78:	20000024 	.word	0x20000024
 8015c7c:	08024fd8 	.word	0x08024fd8

08015c80 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015c80:	b5b0      	push	{r4, r5, r7, lr}
 8015c82:	b090      	sub	sp, #64	@ 0x40
 8015c84:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015c86:	2300      	movs	r3, #0
 8015c88:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015c8c:	4b95      	ldr	r3, [pc, #596]	@ (8015ee4 <tcp_slowtmr+0x264>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	3301      	adds	r3, #1
 8015c92:	4a94      	ldr	r2, [pc, #592]	@ (8015ee4 <tcp_slowtmr+0x264>)
 8015c94:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015c96:	4b94      	ldr	r3, [pc, #592]	@ (8015ee8 <tcp_slowtmr+0x268>)
 8015c98:	781b      	ldrb	r3, [r3, #0]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	b2da      	uxtb	r2, r3
 8015c9e:	4b92      	ldr	r3, [pc, #584]	@ (8015ee8 <tcp_slowtmr+0x268>)
 8015ca0:	701a      	strb	r2, [r3, #0]
 8015ca2:	e000      	b.n	8015ca6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015ca4:	bf00      	nop
  prev = NULL;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8015caa:	4b90      	ldr	r3, [pc, #576]	@ (8015eec <tcp_slowtmr+0x26c>)
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015cb0:	e29d      	b.n	80161ee <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb4:	7d1b      	ldrb	r3, [r3, #20]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d106      	bne.n	8015cc8 <tcp_slowtmr+0x48>
 8015cba:	4b8d      	ldr	r3, [pc, #564]	@ (8015ef0 <tcp_slowtmr+0x270>)
 8015cbc:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015cc0:	498c      	ldr	r1, [pc, #560]	@ (8015ef4 <tcp_slowtmr+0x274>)
 8015cc2:	488d      	ldr	r0, [pc, #564]	@ (8015ef8 <tcp_slowtmr+0x278>)
 8015cc4:	f00a faf0 	bl	80202a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cca:	7d1b      	ldrb	r3, [r3, #20]
 8015ccc:	2b01      	cmp	r3, #1
 8015cce:	d106      	bne.n	8015cde <tcp_slowtmr+0x5e>
 8015cd0:	4b87      	ldr	r3, [pc, #540]	@ (8015ef0 <tcp_slowtmr+0x270>)
 8015cd2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015cd6:	4989      	ldr	r1, [pc, #548]	@ (8015efc <tcp_slowtmr+0x27c>)
 8015cd8:	4887      	ldr	r0, [pc, #540]	@ (8015ef8 <tcp_slowtmr+0x278>)
 8015cda:	f00a fae5 	bl	80202a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ce0:	7d1b      	ldrb	r3, [r3, #20]
 8015ce2:	2b0a      	cmp	r3, #10
 8015ce4:	d106      	bne.n	8015cf4 <tcp_slowtmr+0x74>
 8015ce6:	4b82      	ldr	r3, [pc, #520]	@ (8015ef0 <tcp_slowtmr+0x270>)
 8015ce8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015cec:	4984      	ldr	r1, [pc, #528]	@ (8015f00 <tcp_slowtmr+0x280>)
 8015cee:	4882      	ldr	r0, [pc, #520]	@ (8015ef8 <tcp_slowtmr+0x278>)
 8015cf0:	f00a fada 	bl	80202a8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf6:	7f9a      	ldrb	r2, [r3, #30]
 8015cf8:	4b7b      	ldr	r3, [pc, #492]	@ (8015ee8 <tcp_slowtmr+0x268>)
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d105      	bne.n	8015d0c <tcp_slowtmr+0x8c>
      prev = pcb;
 8015d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d02:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d06:	68db      	ldr	r3, [r3, #12]
 8015d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8015d0a:	e270      	b.n	80161ee <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8015d0c:	4b76      	ldr	r3, [pc, #472]	@ (8015ee8 <tcp_slowtmr+0x268>)
 8015d0e:	781a      	ldrb	r2, [r3, #0]
 8015d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d12:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015d14:	2300      	movs	r3, #0
 8015d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d22:	7d1b      	ldrb	r3, [r3, #20]
 8015d24:	2b02      	cmp	r3, #2
 8015d26:	d10a      	bne.n	8015d3e <tcp_slowtmr+0xbe>
 8015d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d2e:	2b05      	cmp	r3, #5
 8015d30:	d905      	bls.n	8015d3e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d36:	3301      	adds	r3, #1
 8015d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d3c:	e11e      	b.n	8015f7c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d44:	2b0b      	cmp	r3, #11
 8015d46:	d905      	bls.n	8015d54 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d4c:	3301      	adds	r3, #1
 8015d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d52:	e113      	b.n	8015f7c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d075      	beq.n	8015e4a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d006      	beq.n	8015d74 <tcp_slowtmr+0xf4>
 8015d66:	4b62      	ldr	r3, [pc, #392]	@ (8015ef0 <tcp_slowtmr+0x270>)
 8015d68:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015d6c:	4965      	ldr	r1, [pc, #404]	@ (8015f04 <tcp_slowtmr+0x284>)
 8015d6e:	4862      	ldr	r0, [pc, #392]	@ (8015ef8 <tcp_slowtmr+0x278>)
 8015d70:	f00a fa9a 	bl	80202a8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d106      	bne.n	8015d8a <tcp_slowtmr+0x10a>
 8015d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8015ef0 <tcp_slowtmr+0x270>)
 8015d7e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015d82:	4961      	ldr	r1, [pc, #388]	@ (8015f08 <tcp_slowtmr+0x288>)
 8015d84:	485c      	ldr	r0, [pc, #368]	@ (8015ef8 <tcp_slowtmr+0x278>)
 8015d86:	f00a fa8f 	bl	80202a8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d8c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015d90:	2b0b      	cmp	r3, #11
 8015d92:	d905      	bls.n	8015da0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d98:	3301      	adds	r3, #1
 8015d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d9e:	e0ed      	b.n	8015f7c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015da6:	3b01      	subs	r3, #1
 8015da8:	4a58      	ldr	r2, [pc, #352]	@ (8015f0c <tcp_slowtmr+0x28c>)
 8015daa:	5cd3      	ldrb	r3, [r2, r3]
 8015dac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015db4:	7c7a      	ldrb	r2, [r7, #17]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d907      	bls.n	8015dca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8015dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dbc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015dc0:	3301      	adds	r3, #1
 8015dc2:	b2da      	uxtb	r2, r3
 8015dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dc6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8015dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015dd0:	7c7a      	ldrb	r2, [r7, #17]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	f200 80d2 	bhi.w	8015f7c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015dd8:	2301      	movs	r3, #1
 8015dda:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d108      	bne.n	8015df8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015de6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015de8:	f005 fa28 	bl	801b23c <tcp_zero_window_probe>
 8015dec:	4603      	mov	r3, r0
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d014      	beq.n	8015e1c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015df2:	2300      	movs	r3, #0
 8015df4:	623b      	str	r3, [r7, #32]
 8015df6:	e011      	b.n	8015e1c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015dfe:	4619      	mov	r1, r3
 8015e00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e02:	f004 f8bd 	bl	8019f80 <tcp_split_unsent_seg>
 8015e06:	4603      	mov	r3, r0
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d107      	bne.n	8015e1c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8015e0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e0e:	f004 fb59 	bl	801a4c4 <tcp_output>
 8015e12:	4603      	mov	r3, r0
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d101      	bne.n	8015e1c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8015e1c:	6a3b      	ldr	r3, [r7, #32]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	f000 80ac 	beq.w	8015f7c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e26:	2200      	movs	r2, #0
 8015e28:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e2e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015e32:	2b06      	cmp	r3, #6
 8015e34:	f200 80a2 	bhi.w	8015f7c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015e3e:	3301      	adds	r3, #1
 8015e40:	b2da      	uxtb	r2, r3
 8015e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e44:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015e48:	e098      	b.n	8015f7c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	db0f      	blt.n	8015e74 <tcp_slowtmr+0x1f4>
 8015e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015e5a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015e5e:	4293      	cmp	r3, r2
 8015e60:	d008      	beq.n	8015e74 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015e68:	b29b      	uxth	r3, r3
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	b29b      	uxth	r3, r3
 8015e6e:	b21a      	sxth	r2, r3
 8015e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e72:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e76:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8015e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e7c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015e80:	429a      	cmp	r2, r3
 8015e82:	db7b      	blt.n	8015f7c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015e84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e86:	f004 fe1b 	bl	801aac0 <tcp_rexmit_rto_prepare>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d007      	beq.n	8015ea0 <tcp_slowtmr+0x220>
 8015e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d171      	bne.n	8015f7c <tcp_slowtmr+0x2fc>
 8015e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d06d      	beq.n	8015f7c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ea2:	7d1b      	ldrb	r3, [r3, #20]
 8015ea4:	2b02      	cmp	r3, #2
 8015ea6:	d03a      	beq.n	8015f1e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015eae:	2b0c      	cmp	r3, #12
 8015eb0:	bf28      	it	cs
 8015eb2:	230c      	movcs	r3, #12
 8015eb4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015ebc:	10db      	asrs	r3, r3, #3
 8015ebe:	b21b      	sxth	r3, r3
 8015ec0:	461a      	mov	r2, r3
 8015ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015ec8:	4413      	add	r3, r2
 8015eca:	7efa      	ldrb	r2, [r7, #27]
 8015ecc:	4910      	ldr	r1, [pc, #64]	@ (8015f10 <tcp_slowtmr+0x290>)
 8015ece:	5c8a      	ldrb	r2, [r1, r2]
 8015ed0:	4093      	lsls	r3, r2
 8015ed2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8015eda:	4293      	cmp	r3, r2
 8015edc:	dc1a      	bgt.n	8015f14 <tcp_slowtmr+0x294>
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	b21a      	sxth	r2, r3
 8015ee2:	e019      	b.n	8015f18 <tcp_slowtmr+0x298>
 8015ee4:	200253a8 	.word	0x200253a8
 8015ee8:	200253be 	.word	0x200253be
 8015eec:	200253b4 	.word	0x200253b4
 8015ef0:	08022974 	.word	0x08022974
 8015ef4:	08022cb8 	.word	0x08022cb8
 8015ef8:	080229b8 	.word	0x080229b8
 8015efc:	08022ce4 	.word	0x08022ce4
 8015f00:	08022d10 	.word	0x08022d10
 8015f04:	08022d40 	.word	0x08022d40
 8015f08:	08022d74 	.word	0x08022d74
 8015f0c:	08024fd0 	.word	0x08024fd0
 8015f10:	08024fc0 	.word	0x08024fc0
 8015f14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8015f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f20:	2200      	movs	r2, #0
 8015f22:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015f30:	4293      	cmp	r3, r2
 8015f32:	bf28      	it	cs
 8015f34:	4613      	movcs	r3, r2
 8015f36:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015f38:	8a7b      	ldrh	r3, [r7, #18]
 8015f3a:	085b      	lsrs	r3, r3, #1
 8015f3c:	b29a      	uxth	r2, r3
 8015f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f40:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f4e:	005b      	lsls	r3, r3, #1
 8015f50:	b29b      	uxth	r3, r3
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d206      	bcs.n	8015f64 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f5a:	005b      	lsls	r3, r3, #1
 8015f5c:	b29a      	uxth	r2, r3
 8015f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f60:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f66:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8015f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f70:	2200      	movs	r2, #0
 8015f72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015f76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f78:	f004 fe12 	bl	801aba0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f7e:	7d1b      	ldrb	r3, [r3, #20]
 8015f80:	2b06      	cmp	r3, #6
 8015f82:	d111      	bne.n	8015fa8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f86:	8b5b      	ldrh	r3, [r3, #26]
 8015f88:	f003 0310 	and.w	r3, r3, #16
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d00b      	beq.n	8015fa8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015f90:	4b9c      	ldr	r3, [pc, #624]	@ (8016204 <tcp_slowtmr+0x584>)
 8015f92:	681a      	ldr	r2, [r3, #0]
 8015f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f96:	6a1b      	ldr	r3, [r3, #32]
 8015f98:	1ad3      	subs	r3, r2, r3
 8015f9a:	2b28      	cmp	r3, #40	@ 0x28
 8015f9c:	d904      	bls.n	8015fa8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8015f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fa2:	3301      	adds	r3, #1
 8015fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015faa:	7a5b      	ldrb	r3, [r3, #9]
 8015fac:	f003 0308 	and.w	r3, r3, #8
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d04a      	beq.n	801604a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015fb8:	2b04      	cmp	r3, #4
 8015fba:	d003      	beq.n	8015fc4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fbe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015fc0:	2b07      	cmp	r3, #7
 8015fc2:	d142      	bne.n	801604a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015fc4:	4b8f      	ldr	r3, [pc, #572]	@ (8016204 <tcp_slowtmr+0x584>)
 8015fc6:	681a      	ldr	r2, [r3, #0]
 8015fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fca:	6a1b      	ldr	r3, [r3, #32]
 8015fcc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8016208 <tcp_slowtmr+0x588>)
 8015fd6:	440b      	add	r3, r1
 8015fd8:	498c      	ldr	r1, [pc, #560]	@ (801620c <tcp_slowtmr+0x58c>)
 8015fda:	fba1 1303 	umull	r1, r3, r1, r3
 8015fde:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	d90a      	bls.n	8015ffa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fe8:	3301      	adds	r3, #1
 8015fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8015fee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015ff8:	e027      	b.n	801604a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ffa:	4b82      	ldr	r3, [pc, #520]	@ (8016204 <tcp_slowtmr+0x584>)
 8015ffc:	681a      	ldr	r2, [r3, #0]
 8015ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016000:	6a1b      	ldr	r3, [r3, #32]
 8016002:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016006:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801600c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016010:	4618      	mov	r0, r3
 8016012:	4b7f      	ldr	r3, [pc, #508]	@ (8016210 <tcp_slowtmr+0x590>)
 8016014:	fb00 f303 	mul.w	r3, r0, r3
 8016018:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801601a:	497c      	ldr	r1, [pc, #496]	@ (801620c <tcp_slowtmr+0x58c>)
 801601c:	fba1 1303 	umull	r1, r3, r1, r3
 8016020:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016022:	429a      	cmp	r2, r3
 8016024:	d911      	bls.n	801604a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8016026:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016028:	f005 f8c8 	bl	801b1bc <tcp_keepalive>
 801602c:	4603      	mov	r3, r0
 801602e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8016032:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016036:	2b00      	cmp	r3, #0
 8016038:	d107      	bne.n	801604a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801603c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016040:	3301      	adds	r3, #1
 8016042:	b2da      	uxtb	r2, r3
 8016044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016046:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801604a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801604c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801604e:	2b00      	cmp	r3, #0
 8016050:	d011      	beq.n	8016076 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016052:	4b6c      	ldr	r3, [pc, #432]	@ (8016204 <tcp_slowtmr+0x584>)
 8016054:	681a      	ldr	r2, [r3, #0]
 8016056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016058:	6a1b      	ldr	r3, [r3, #32]
 801605a:	1ad2      	subs	r2, r2, r3
 801605c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801605e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016062:	4619      	mov	r1, r3
 8016064:	460b      	mov	r3, r1
 8016066:	005b      	lsls	r3, r3, #1
 8016068:	440b      	add	r3, r1
 801606a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801606c:	429a      	cmp	r2, r3
 801606e:	d302      	bcc.n	8016076 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8016070:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016072:	f000 fed5 	bl	8016e20 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8016076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016078:	7d1b      	ldrb	r3, [r3, #20]
 801607a:	2b03      	cmp	r3, #3
 801607c:	d10b      	bne.n	8016096 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801607e:	4b61      	ldr	r3, [pc, #388]	@ (8016204 <tcp_slowtmr+0x584>)
 8016080:	681a      	ldr	r2, [r3, #0]
 8016082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016084:	6a1b      	ldr	r3, [r3, #32]
 8016086:	1ad3      	subs	r3, r2, r3
 8016088:	2b28      	cmp	r3, #40	@ 0x28
 801608a:	d904      	bls.n	8016096 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801608c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016090:	3301      	adds	r3, #1
 8016092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8016096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016098:	7d1b      	ldrb	r3, [r3, #20]
 801609a:	2b09      	cmp	r3, #9
 801609c:	d10b      	bne.n	80160b6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801609e:	4b59      	ldr	r3, [pc, #356]	@ (8016204 <tcp_slowtmr+0x584>)
 80160a0:	681a      	ldr	r2, [r3, #0]
 80160a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160a4:	6a1b      	ldr	r3, [r3, #32]
 80160a6:	1ad3      	subs	r3, r2, r3
 80160a8:	2bf0      	cmp	r3, #240	@ 0xf0
 80160aa:	d904      	bls.n	80160b6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80160ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80160b0:	3301      	adds	r3, #1
 80160b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80160b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d060      	beq.n	8016180 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80160be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80160c4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80160c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80160c8:	f000 fcf6 	bl	8016ab8 <tcp_pcb_purge>
      if (prev != NULL) {
 80160cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d010      	beq.n	80160f4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80160d2:	4b50      	ldr	r3, [pc, #320]	@ (8016214 <tcp_slowtmr+0x594>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80160d8:	429a      	cmp	r2, r3
 80160da:	d106      	bne.n	80160ea <tcp_slowtmr+0x46a>
 80160dc:	4b4e      	ldr	r3, [pc, #312]	@ (8016218 <tcp_slowtmr+0x598>)
 80160de:	f240 526d 	movw	r2, #1389	@ 0x56d
 80160e2:	494e      	ldr	r1, [pc, #312]	@ (801621c <tcp_slowtmr+0x59c>)
 80160e4:	484e      	ldr	r0, [pc, #312]	@ (8016220 <tcp_slowtmr+0x5a0>)
 80160e6:	f00a f8df 	bl	80202a8 <iprintf>
        prev->next = pcb->next;
 80160ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160ec:	68da      	ldr	r2, [r3, #12]
 80160ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160f0:	60da      	str	r2, [r3, #12]
 80160f2:	e00f      	b.n	8016114 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80160f4:	4b47      	ldr	r3, [pc, #284]	@ (8016214 <tcp_slowtmr+0x594>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d006      	beq.n	801610c <tcp_slowtmr+0x48c>
 80160fe:	4b46      	ldr	r3, [pc, #280]	@ (8016218 <tcp_slowtmr+0x598>)
 8016100:	f240 5271 	movw	r2, #1393	@ 0x571
 8016104:	4947      	ldr	r1, [pc, #284]	@ (8016224 <tcp_slowtmr+0x5a4>)
 8016106:	4846      	ldr	r0, [pc, #280]	@ (8016220 <tcp_slowtmr+0x5a0>)
 8016108:	f00a f8ce 	bl	80202a8 <iprintf>
        tcp_active_pcbs = pcb->next;
 801610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801610e:	68db      	ldr	r3, [r3, #12]
 8016110:	4a40      	ldr	r2, [pc, #256]	@ (8016214 <tcp_slowtmr+0x594>)
 8016112:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8016114:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016118:	2b00      	cmp	r3, #0
 801611a:	d013      	beq.n	8016144 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801611c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801611e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8016120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016122:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016124:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8016126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016128:	3304      	adds	r3, #4
 801612a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801612c:	8ad2      	ldrh	r2, [r2, #22]
 801612e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016130:	8b09      	ldrh	r1, [r1, #24]
 8016132:	9102      	str	r1, [sp, #8]
 8016134:	9201      	str	r2, [sp, #4]
 8016136:	9300      	str	r3, [sp, #0]
 8016138:	462b      	mov	r3, r5
 801613a:	4622      	mov	r2, r4
 801613c:	4601      	mov	r1, r0
 801613e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016140:	f004 ff88 	bl	801b054 <tcp_rst>
      err_arg = pcb->callback_arg;
 8016144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016146:	691b      	ldr	r3, [r3, #16]
 8016148:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801614c:	7d1b      	ldrb	r3, [r3, #20]
 801614e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016152:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016156:	68db      	ldr	r3, [r3, #12]
 8016158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801615a:	6838      	ldr	r0, [r7, #0]
 801615c:	f7ff f8b8 	bl	80152d0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8016160:	4b31      	ldr	r3, [pc, #196]	@ (8016228 <tcp_slowtmr+0x5a8>)
 8016162:	2200      	movs	r2, #0
 8016164:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d004      	beq.n	8016176 <tcp_slowtmr+0x4f6>
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	f06f 010c 	mvn.w	r1, #12
 8016172:	68b8      	ldr	r0, [r7, #8]
 8016174:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016176:	4b2c      	ldr	r3, [pc, #176]	@ (8016228 <tcp_slowtmr+0x5a8>)
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d037      	beq.n	80161ee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801617e:	e592      	b.n	8015ca6 <tcp_slowtmr+0x26>
      prev = pcb;
 8016180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016182:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016186:	68db      	ldr	r3, [r3, #12]
 8016188:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801618c:	7f1b      	ldrb	r3, [r3, #28]
 801618e:	3301      	adds	r3, #1
 8016190:	b2da      	uxtb	r2, r3
 8016192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016194:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016198:	7f1a      	ldrb	r2, [r3, #28]
 801619a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801619c:	7f5b      	ldrb	r3, [r3, #29]
 801619e:	429a      	cmp	r2, r3
 80161a0:	d325      	bcc.n	80161ee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80161a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161a4:	2200      	movs	r2, #0
 80161a6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80161a8:	4b1f      	ldr	r3, [pc, #124]	@ (8016228 <tcp_slowtmr+0x5a8>)
 80161aa:	2200      	movs	r2, #0
 80161ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80161ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d00b      	beq.n	80161d0 <tcp_slowtmr+0x550>
 80161b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80161be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80161c0:	6912      	ldr	r2, [r2, #16]
 80161c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80161c4:	4610      	mov	r0, r2
 80161c6:	4798      	blx	r3
 80161c8:	4603      	mov	r3, r0
 80161ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80161ce:	e002      	b.n	80161d6 <tcp_slowtmr+0x556>
 80161d0:	2300      	movs	r3, #0
 80161d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80161d6:	4b14      	ldr	r3, [pc, #80]	@ (8016228 <tcp_slowtmr+0x5a8>)
 80161d8:	781b      	ldrb	r3, [r3, #0]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	f47f ad62 	bne.w	8015ca4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80161e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d102      	bne.n	80161ee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80161e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80161ea:	f004 f96b 	bl	801a4c4 <tcp_output>
  while (pcb != NULL) {
 80161ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	f47f ad5e 	bne.w	8015cb2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80161f6:	2300      	movs	r3, #0
 80161f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80161fa:	4b0c      	ldr	r3, [pc, #48]	@ (801622c <tcp_slowtmr+0x5ac>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016200:	e069      	b.n	80162d6 <tcp_slowtmr+0x656>
 8016202:	bf00      	nop
 8016204:	200253a8 	.word	0x200253a8
 8016208:	000a4cb8 	.word	0x000a4cb8
 801620c:	10624dd3 	.word	0x10624dd3
 8016210:	000124f8 	.word	0x000124f8
 8016214:	200253b4 	.word	0x200253b4
 8016218:	08022974 	.word	0x08022974
 801621c:	08022dac 	.word	0x08022dac
 8016220:	080229b8 	.word	0x080229b8
 8016224:	08022dd8 	.word	0x08022dd8
 8016228:	200253bc 	.word	0x200253bc
 801622c:	200253b8 	.word	0x200253b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016232:	7d1b      	ldrb	r3, [r3, #20]
 8016234:	2b0a      	cmp	r3, #10
 8016236:	d006      	beq.n	8016246 <tcp_slowtmr+0x5c6>
 8016238:	4b2b      	ldr	r3, [pc, #172]	@ (80162e8 <tcp_slowtmr+0x668>)
 801623a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801623e:	492b      	ldr	r1, [pc, #172]	@ (80162ec <tcp_slowtmr+0x66c>)
 8016240:	482b      	ldr	r0, [pc, #172]	@ (80162f0 <tcp_slowtmr+0x670>)
 8016242:	f00a f831 	bl	80202a8 <iprintf>
    pcb_remove = 0;
 8016246:	2300      	movs	r3, #0
 8016248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801624c:	4b29      	ldr	r3, [pc, #164]	@ (80162f4 <tcp_slowtmr+0x674>)
 801624e:	681a      	ldr	r2, [r3, #0]
 8016250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016252:	6a1b      	ldr	r3, [r3, #32]
 8016254:	1ad3      	subs	r3, r2, r3
 8016256:	2bf0      	cmp	r3, #240	@ 0xf0
 8016258:	d904      	bls.n	8016264 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801625a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801625e:	3301      	adds	r3, #1
 8016260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016268:	2b00      	cmp	r3, #0
 801626a:	d02f      	beq.n	80162cc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801626c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801626e:	f000 fc23 	bl	8016ab8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016274:	2b00      	cmp	r3, #0
 8016276:	d010      	beq.n	801629a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016278:	4b1f      	ldr	r3, [pc, #124]	@ (80162f8 <tcp_slowtmr+0x678>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801627e:	429a      	cmp	r2, r3
 8016280:	d106      	bne.n	8016290 <tcp_slowtmr+0x610>
 8016282:	4b19      	ldr	r3, [pc, #100]	@ (80162e8 <tcp_slowtmr+0x668>)
 8016284:	f240 52af 	movw	r2, #1455	@ 0x5af
 8016288:	491c      	ldr	r1, [pc, #112]	@ (80162fc <tcp_slowtmr+0x67c>)
 801628a:	4819      	ldr	r0, [pc, #100]	@ (80162f0 <tcp_slowtmr+0x670>)
 801628c:	f00a f80c 	bl	80202a8 <iprintf>
        prev->next = pcb->next;
 8016290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016292:	68da      	ldr	r2, [r3, #12]
 8016294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016296:	60da      	str	r2, [r3, #12]
 8016298:	e00f      	b.n	80162ba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801629a:	4b17      	ldr	r3, [pc, #92]	@ (80162f8 <tcp_slowtmr+0x678>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d006      	beq.n	80162b2 <tcp_slowtmr+0x632>
 80162a4:	4b10      	ldr	r3, [pc, #64]	@ (80162e8 <tcp_slowtmr+0x668>)
 80162a6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80162aa:	4915      	ldr	r1, [pc, #84]	@ (8016300 <tcp_slowtmr+0x680>)
 80162ac:	4810      	ldr	r0, [pc, #64]	@ (80162f0 <tcp_slowtmr+0x670>)
 80162ae:	f009 fffb 	bl	80202a8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80162b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162b4:	68db      	ldr	r3, [r3, #12]
 80162b6:	4a10      	ldr	r2, [pc, #64]	@ (80162f8 <tcp_slowtmr+0x678>)
 80162b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80162ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80162be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162c0:	68db      	ldr	r3, [r3, #12]
 80162c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80162c4:	69f8      	ldr	r0, [r7, #28]
 80162c6:	f7ff f803 	bl	80152d0 <tcp_free>
 80162ca:	e004      	b.n	80162d6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80162cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80162d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d2:	68db      	ldr	r3, [r3, #12]
 80162d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80162d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d1a9      	bne.n	8016230 <tcp_slowtmr+0x5b0>
    }
  }
}
 80162dc:	bf00      	nop
 80162de:	bf00      	nop
 80162e0:	3730      	adds	r7, #48	@ 0x30
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bdb0      	pop	{r4, r5, r7, pc}
 80162e6:	bf00      	nop
 80162e8:	08022974 	.word	0x08022974
 80162ec:	08022e04 	.word	0x08022e04
 80162f0:	080229b8 	.word	0x080229b8
 80162f4:	200253a8 	.word	0x200253a8
 80162f8:	200253b8 	.word	0x200253b8
 80162fc:	08022e34 	.word	0x08022e34
 8016300:	08022e5c 	.word	0x08022e5c

08016304 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801630a:	4b2d      	ldr	r3, [pc, #180]	@ (80163c0 <tcp_fasttmr+0xbc>)
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	3301      	adds	r3, #1
 8016310:	b2da      	uxtb	r2, r3
 8016312:	4b2b      	ldr	r3, [pc, #172]	@ (80163c0 <tcp_fasttmr+0xbc>)
 8016314:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016316:	4b2b      	ldr	r3, [pc, #172]	@ (80163c4 <tcp_fasttmr+0xc0>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801631c:	e048      	b.n	80163b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	7f9a      	ldrb	r2, [r3, #30]
 8016322:	4b27      	ldr	r3, [pc, #156]	@ (80163c0 <tcp_fasttmr+0xbc>)
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	429a      	cmp	r2, r3
 8016328:	d03f      	beq.n	80163aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801632a:	4b25      	ldr	r3, [pc, #148]	@ (80163c0 <tcp_fasttmr+0xbc>)
 801632c:	781a      	ldrb	r2, [r3, #0]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	8b5b      	ldrh	r3, [r3, #26]
 8016336:	f003 0301 	and.w	r3, r3, #1
 801633a:	2b00      	cmp	r3, #0
 801633c:	d010      	beq.n	8016360 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	8b5b      	ldrh	r3, [r3, #26]
 8016342:	f043 0302 	orr.w	r3, r3, #2
 8016346:	b29a      	uxth	r2, r3
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f004 f8b9 	bl	801a4c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	8b5b      	ldrh	r3, [r3, #26]
 8016356:	f023 0303 	bic.w	r3, r3, #3
 801635a:	b29a      	uxth	r2, r3
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	8b5b      	ldrh	r3, [r3, #26]
 8016364:	f003 0308 	and.w	r3, r3, #8
 8016368:	2b00      	cmp	r3, #0
 801636a:	d009      	beq.n	8016380 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	8b5b      	ldrh	r3, [r3, #26]
 8016370:	f023 0308 	bic.w	r3, r3, #8
 8016374:	b29a      	uxth	r2, r3
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f7ff f93c 	bl	80155f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801638a:	2b00      	cmp	r3, #0
 801638c:	d00a      	beq.n	80163a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801638e:	4b0e      	ldr	r3, [pc, #56]	@ (80163c8 <tcp_fasttmr+0xc4>)
 8016390:	2200      	movs	r2, #0
 8016392:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f000 f819 	bl	80163cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801639a:	4b0b      	ldr	r3, [pc, #44]	@ (80163c8 <tcp_fasttmr+0xc4>)
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d000      	beq.n	80163a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80163a2:	e7b8      	b.n	8016316 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	607b      	str	r3, [r7, #4]
 80163a8:	e002      	b.n	80163b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	68db      	ldr	r3, [r3, #12]
 80163ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d1b3      	bne.n	801631e <tcp_fasttmr+0x1a>
    }
  }
}
 80163b6:	bf00      	nop
 80163b8:	bf00      	nop
 80163ba:	3708      	adds	r7, #8
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}
 80163c0:	200253be 	.word	0x200253be
 80163c4:	200253b4 	.word	0x200253b4
 80163c8:	200253bc 	.word	0x200253bc

080163cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80163cc:	b590      	push	{r4, r7, lr}
 80163ce:	b085      	sub	sp, #20
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d109      	bne.n	80163ee <tcp_process_refused_data+0x22>
 80163da:	4b37      	ldr	r3, [pc, #220]	@ (80164b8 <tcp_process_refused_data+0xec>)
 80163dc:	f240 6209 	movw	r2, #1545	@ 0x609
 80163e0:	4936      	ldr	r1, [pc, #216]	@ (80164bc <tcp_process_refused_data+0xf0>)
 80163e2:	4837      	ldr	r0, [pc, #220]	@ (80164c0 <tcp_process_refused_data+0xf4>)
 80163e4:	f009 ff60 	bl	80202a8 <iprintf>
 80163e8:	f06f 030f 	mvn.w	r3, #15
 80163ec:	e060      	b.n	80164b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80163f2:	7b5b      	ldrb	r3, [r3, #13]
 80163f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80163fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2200      	movs	r2, #0
 8016400:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016408:	2b00      	cmp	r3, #0
 801640a:	d00b      	beq.n	8016424 <tcp_process_refused_data+0x58>
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	6918      	ldr	r0, [r3, #16]
 8016416:	2300      	movs	r3, #0
 8016418:	68ba      	ldr	r2, [r7, #8]
 801641a:	6879      	ldr	r1, [r7, #4]
 801641c:	47a0      	blx	r4
 801641e:	4603      	mov	r3, r0
 8016420:	73fb      	strb	r3, [r7, #15]
 8016422:	e007      	b.n	8016434 <tcp_process_refused_data+0x68>
 8016424:	2300      	movs	r3, #0
 8016426:	68ba      	ldr	r2, [r7, #8]
 8016428:	6879      	ldr	r1, [r7, #4]
 801642a:	2000      	movs	r0, #0
 801642c:	f000 f8a4 	bl	8016578 <tcp_recv_null>
 8016430:	4603      	mov	r3, r0
 8016432:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d12a      	bne.n	8016492 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801643c:	7bbb      	ldrb	r3, [r7, #14]
 801643e:	f003 0320 	and.w	r3, r3, #32
 8016442:	2b00      	cmp	r3, #0
 8016444:	d033      	beq.n	80164ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801644a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801644e:	d005      	beq.n	801645c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016454:	3301      	adds	r3, #1
 8016456:	b29a      	uxth	r2, r3
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016462:	2b00      	cmp	r3, #0
 8016464:	d00b      	beq.n	801647e <tcp_process_refused_data+0xb2>
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	6918      	ldr	r0, [r3, #16]
 8016470:	2300      	movs	r3, #0
 8016472:	2200      	movs	r2, #0
 8016474:	6879      	ldr	r1, [r7, #4]
 8016476:	47a0      	blx	r4
 8016478:	4603      	mov	r3, r0
 801647a:	73fb      	strb	r3, [r7, #15]
 801647c:	e001      	b.n	8016482 <tcp_process_refused_data+0xb6>
 801647e:	2300      	movs	r3, #0
 8016480:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016486:	f113 0f0d 	cmn.w	r3, #13
 801648a:	d110      	bne.n	80164ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801648c:	f06f 030c 	mvn.w	r3, #12
 8016490:	e00e      	b.n	80164b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016496:	f113 0f0d 	cmn.w	r3, #13
 801649a:	d102      	bne.n	80164a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801649c:	f06f 030c 	mvn.w	r3, #12
 80164a0:	e006      	b.n	80164b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	68ba      	ldr	r2, [r7, #8]
 80164a6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80164a8:	f06f 0304 	mvn.w	r3, #4
 80164ac:	e000      	b.n	80164b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80164ae:	2300      	movs	r3, #0
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3714      	adds	r7, #20
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd90      	pop	{r4, r7, pc}
 80164b8:	08022974 	.word	0x08022974
 80164bc:	08022e84 	.word	0x08022e84
 80164c0:	080229b8 	.word	0x080229b8

080164c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b084      	sub	sp, #16
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80164cc:	e007      	b.n	80164de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80164d4:	6878      	ldr	r0, [r7, #4]
 80164d6:	f000 f80a 	bl	80164ee <tcp_seg_free>
    seg = next;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d1f4      	bne.n	80164ce <tcp_segs_free+0xa>
  }
}
 80164e4:	bf00      	nop
 80164e6:	bf00      	nop
 80164e8:	3710      	adds	r7, #16
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b082      	sub	sp, #8
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d00c      	beq.n	8016516 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d004      	beq.n	801650e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	685b      	ldr	r3, [r3, #4]
 8016508:	4618      	mov	r0, r3
 801650a:	f7fe fc1d 	bl	8014d48 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801650e:	6879      	ldr	r1, [r7, #4]
 8016510:	2003      	movs	r0, #3
 8016512:	f7fd fd75 	bl	8014000 <memp_free>
  }
}
 8016516:	bf00      	nop
 8016518:	3708      	adds	r7, #8
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}
	...

08016520 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b084      	sub	sp, #16
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d106      	bne.n	801653c <tcp_seg_copy+0x1c>
 801652e:	4b0f      	ldr	r3, [pc, #60]	@ (801656c <tcp_seg_copy+0x4c>)
 8016530:	f240 6282 	movw	r2, #1666	@ 0x682
 8016534:	490e      	ldr	r1, [pc, #56]	@ (8016570 <tcp_seg_copy+0x50>)
 8016536:	480f      	ldr	r0, [pc, #60]	@ (8016574 <tcp_seg_copy+0x54>)
 8016538:	f009 feb6 	bl	80202a8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801653c:	2003      	movs	r0, #3
 801653e:	f7fd fce3 	bl	8013f08 <memp_malloc>
 8016542:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d101      	bne.n	801654e <tcp_seg_copy+0x2e>
    return NULL;
 801654a:	2300      	movs	r3, #0
 801654c:	e00a      	b.n	8016564 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801654e:	2210      	movs	r2, #16
 8016550:	6879      	ldr	r1, [r7, #4]
 8016552:	68f8      	ldr	r0, [r7, #12]
 8016554:	f00a f8d3 	bl	80206fe <memcpy>
  pbuf_ref(cseg->p);
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	685b      	ldr	r3, [r3, #4]
 801655c:	4618      	mov	r0, r3
 801655e:	f7fe fc99 	bl	8014e94 <pbuf_ref>
  return cseg;
 8016562:	68fb      	ldr	r3, [r7, #12]
}
 8016564:	4618      	mov	r0, r3
 8016566:	3710      	adds	r7, #16
 8016568:	46bd      	mov	sp, r7
 801656a:	bd80      	pop	{r7, pc}
 801656c:	08022974 	.word	0x08022974
 8016570:	08022ec8 	.word	0x08022ec8
 8016574:	080229b8 	.word	0x080229b8

08016578 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af00      	add	r7, sp, #0
 801657e:	60f8      	str	r0, [r7, #12]
 8016580:	60b9      	str	r1, [r7, #8]
 8016582:	607a      	str	r2, [r7, #4]
 8016584:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d109      	bne.n	80165a0 <tcp_recv_null+0x28>
 801658c:	4b12      	ldr	r3, [pc, #72]	@ (80165d8 <tcp_recv_null+0x60>)
 801658e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016592:	4912      	ldr	r1, [pc, #72]	@ (80165dc <tcp_recv_null+0x64>)
 8016594:	4812      	ldr	r0, [pc, #72]	@ (80165e0 <tcp_recv_null+0x68>)
 8016596:	f009 fe87 	bl	80202a8 <iprintf>
 801659a:	f06f 030f 	mvn.w	r3, #15
 801659e:	e016      	b.n	80165ce <tcp_recv_null+0x56>

  if (p != NULL) {
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d009      	beq.n	80165ba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	891b      	ldrh	r3, [r3, #8]
 80165aa:	4619      	mov	r1, r3
 80165ac:	68b8      	ldr	r0, [r7, #8]
 80165ae:	f7ff fad1 	bl	8015b54 <tcp_recved>
    pbuf_free(p);
 80165b2:	6878      	ldr	r0, [r7, #4]
 80165b4:	f7fe fbc8 	bl	8014d48 <pbuf_free>
 80165b8:	e008      	b.n	80165cc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80165ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d104      	bne.n	80165cc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80165c2:	68b8      	ldr	r0, [r7, #8]
 80165c4:	f7ff f882 	bl	80156cc <tcp_close>
 80165c8:	4603      	mov	r3, r0
 80165ca:	e000      	b.n	80165ce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80165cc:	2300      	movs	r3, #0
}
 80165ce:	4618      	mov	r0, r3
 80165d0:	3710      	adds	r7, #16
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd80      	pop	{r7, pc}
 80165d6:	bf00      	nop
 80165d8:	08022974 	.word	0x08022974
 80165dc:	08022ee4 	.word	0x08022ee4
 80165e0:	080229b8 	.word	0x080229b8

080165e4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b086      	sub	sp, #24
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	4603      	mov	r3, r0
 80165ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80165ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	db01      	blt.n	80165fa <tcp_kill_prio+0x16>
 80165f6:	79fb      	ldrb	r3, [r7, #7]
 80165f8:	e000      	b.n	80165fc <tcp_kill_prio+0x18>
 80165fa:	237f      	movs	r3, #127	@ 0x7f
 80165fc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80165fe:	7afb      	ldrb	r3, [r7, #11]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d034      	beq.n	801666e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016604:	7afb      	ldrb	r3, [r7, #11]
 8016606:	3b01      	subs	r3, #1
 8016608:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801660a:	2300      	movs	r3, #0
 801660c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801660e:	2300      	movs	r3, #0
 8016610:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016612:	4b19      	ldr	r3, [pc, #100]	@ (8016678 <tcp_kill_prio+0x94>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	617b      	str	r3, [r7, #20]
 8016618:	e01f      	b.n	801665a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801661a:	697b      	ldr	r3, [r7, #20]
 801661c:	7d5b      	ldrb	r3, [r3, #21]
 801661e:	7afa      	ldrb	r2, [r7, #11]
 8016620:	429a      	cmp	r2, r3
 8016622:	d80c      	bhi.n	801663e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016628:	7afa      	ldrb	r2, [r7, #11]
 801662a:	429a      	cmp	r2, r3
 801662c:	d112      	bne.n	8016654 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801662e:	4b13      	ldr	r3, [pc, #76]	@ (801667c <tcp_kill_prio+0x98>)
 8016630:	681a      	ldr	r2, [r3, #0]
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	6a1b      	ldr	r3, [r3, #32]
 8016636:	1ad3      	subs	r3, r2, r3
 8016638:	68fa      	ldr	r2, [r7, #12]
 801663a:	429a      	cmp	r2, r3
 801663c:	d80a      	bhi.n	8016654 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801663e:	4b0f      	ldr	r3, [pc, #60]	@ (801667c <tcp_kill_prio+0x98>)
 8016640:	681a      	ldr	r2, [r3, #0]
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	6a1b      	ldr	r3, [r3, #32]
 8016646:	1ad3      	subs	r3, r2, r3
 8016648:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801664a:	697b      	ldr	r3, [r7, #20]
 801664c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	7d5b      	ldrb	r3, [r3, #21]
 8016652:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016654:	697b      	ldr	r3, [r7, #20]
 8016656:	68db      	ldr	r3, [r3, #12]
 8016658:	617b      	str	r3, [r7, #20]
 801665a:	697b      	ldr	r3, [r7, #20]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d1dc      	bne.n	801661a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016660:	693b      	ldr	r3, [r7, #16]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d004      	beq.n	8016670 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016666:	6938      	ldr	r0, [r7, #16]
 8016668:	f7ff f976 	bl	8015958 <tcp_abort>
 801666c:	e000      	b.n	8016670 <tcp_kill_prio+0x8c>
    return;
 801666e:	bf00      	nop
  }
}
 8016670:	3718      	adds	r7, #24
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}
 8016676:	bf00      	nop
 8016678:	200253b4 	.word	0x200253b4
 801667c:	200253a8 	.word	0x200253a8

08016680 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b086      	sub	sp, #24
 8016684:	af00      	add	r7, sp, #0
 8016686:	4603      	mov	r3, r0
 8016688:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801668a:	79fb      	ldrb	r3, [r7, #7]
 801668c:	2b08      	cmp	r3, #8
 801668e:	d009      	beq.n	80166a4 <tcp_kill_state+0x24>
 8016690:	79fb      	ldrb	r3, [r7, #7]
 8016692:	2b09      	cmp	r3, #9
 8016694:	d006      	beq.n	80166a4 <tcp_kill_state+0x24>
 8016696:	4b1a      	ldr	r3, [pc, #104]	@ (8016700 <tcp_kill_state+0x80>)
 8016698:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801669c:	4919      	ldr	r1, [pc, #100]	@ (8016704 <tcp_kill_state+0x84>)
 801669e:	481a      	ldr	r0, [pc, #104]	@ (8016708 <tcp_kill_state+0x88>)
 80166a0:	f009 fe02 	bl	80202a8 <iprintf>

  inactivity = 0;
 80166a4:	2300      	movs	r3, #0
 80166a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80166a8:	2300      	movs	r3, #0
 80166aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166ac:	4b17      	ldr	r3, [pc, #92]	@ (801670c <tcp_kill_state+0x8c>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	617b      	str	r3, [r7, #20]
 80166b2:	e017      	b.n	80166e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	7d1b      	ldrb	r3, [r3, #20]
 80166b8:	79fa      	ldrb	r2, [r7, #7]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d10f      	bne.n	80166de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80166be:	4b14      	ldr	r3, [pc, #80]	@ (8016710 <tcp_kill_state+0x90>)
 80166c0:	681a      	ldr	r2, [r3, #0]
 80166c2:	697b      	ldr	r3, [r7, #20]
 80166c4:	6a1b      	ldr	r3, [r3, #32]
 80166c6:	1ad3      	subs	r3, r2, r3
 80166c8:	68fa      	ldr	r2, [r7, #12]
 80166ca:	429a      	cmp	r2, r3
 80166cc:	d807      	bhi.n	80166de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80166ce:	4b10      	ldr	r3, [pc, #64]	@ (8016710 <tcp_kill_state+0x90>)
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	6a1b      	ldr	r3, [r3, #32]
 80166d6:	1ad3      	subs	r3, r2, r3
 80166d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80166da:	697b      	ldr	r3, [r7, #20]
 80166dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	68db      	ldr	r3, [r3, #12]
 80166e2:	617b      	str	r3, [r7, #20]
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d1e4      	bne.n	80166b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80166ea:	693b      	ldr	r3, [r7, #16]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d003      	beq.n	80166f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80166f0:	2100      	movs	r1, #0
 80166f2:	6938      	ldr	r0, [r7, #16]
 80166f4:	f7ff f872 	bl	80157dc <tcp_abandon>
  }
}
 80166f8:	bf00      	nop
 80166fa:	3718      	adds	r7, #24
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}
 8016700:	08022974 	.word	0x08022974
 8016704:	08022f00 	.word	0x08022f00
 8016708:	080229b8 	.word	0x080229b8
 801670c:	200253b4 	.word	0x200253b4
 8016710:	200253a8 	.word	0x200253a8

08016714 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801671a:	2300      	movs	r3, #0
 801671c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801671e:	2300      	movs	r3, #0
 8016720:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016722:	4b12      	ldr	r3, [pc, #72]	@ (801676c <tcp_kill_timewait+0x58>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	60fb      	str	r3, [r7, #12]
 8016728:	e012      	b.n	8016750 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801672a:	4b11      	ldr	r3, [pc, #68]	@ (8016770 <tcp_kill_timewait+0x5c>)
 801672c:	681a      	ldr	r2, [r3, #0]
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	6a1b      	ldr	r3, [r3, #32]
 8016732:	1ad3      	subs	r3, r2, r3
 8016734:	687a      	ldr	r2, [r7, #4]
 8016736:	429a      	cmp	r2, r3
 8016738:	d807      	bhi.n	801674a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801673a:	4b0d      	ldr	r3, [pc, #52]	@ (8016770 <tcp_kill_timewait+0x5c>)
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	6a1b      	ldr	r3, [r3, #32]
 8016742:	1ad3      	subs	r3, r2, r3
 8016744:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	68db      	ldr	r3, [r3, #12]
 801674e:	60fb      	str	r3, [r7, #12]
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d1e9      	bne.n	801672a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016756:	68bb      	ldr	r3, [r7, #8]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d002      	beq.n	8016762 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801675c:	68b8      	ldr	r0, [r7, #8]
 801675e:	f7ff f8fb 	bl	8015958 <tcp_abort>
  }
}
 8016762:	bf00      	nop
 8016764:	3710      	adds	r7, #16
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	200253b8 	.word	0x200253b8
 8016770:	200253a8 	.word	0x200253a8

08016774 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801677a:	4b10      	ldr	r3, [pc, #64]	@ (80167bc <tcp_handle_closepend+0x48>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016780:	e014      	b.n	80167ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	68db      	ldr	r3, [r3, #12]
 8016786:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	8b5b      	ldrh	r3, [r3, #26]
 801678c:	f003 0308 	and.w	r3, r3, #8
 8016790:	2b00      	cmp	r3, #0
 8016792:	d009      	beq.n	80167a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	8b5b      	ldrh	r3, [r3, #26]
 8016798:	f023 0308 	bic.w	r3, r3, #8
 801679c:	b29a      	uxth	r2, r3
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	f7fe ff28 	bl	80155f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d1e7      	bne.n	8016782 <tcp_handle_closepend+0xe>
  }
}
 80167b2:	bf00      	nop
 80167b4:	bf00      	nop
 80167b6:	3708      	adds	r7, #8
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	200253b4 	.word	0x200253b4

080167c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b084      	sub	sp, #16
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	4603      	mov	r3, r0
 80167c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167ca:	2001      	movs	r0, #1
 80167cc:	f7fd fb9c 	bl	8013f08 <memp_malloc>
 80167d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d14e      	bne.n	8016876 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80167d8:	f7ff ffcc 	bl	8016774 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80167dc:	f7ff ff9a 	bl	8016714 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167e0:	2001      	movs	r0, #1
 80167e2:	f7fd fb91 	bl	8013f08 <memp_malloc>
 80167e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d139      	bne.n	8016862 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80167ee:	2009      	movs	r0, #9
 80167f0:	f7ff ff46 	bl	8016680 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167f4:	2001      	movs	r0, #1
 80167f6:	f7fd fb87 	bl	8013f08 <memp_malloc>
 80167fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d125      	bne.n	801684e <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016802:	2008      	movs	r0, #8
 8016804:	f7ff ff3c 	bl	8016680 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016808:	2001      	movs	r0, #1
 801680a:	f7fd fb7d 	bl	8013f08 <memp_malloc>
 801680e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d111      	bne.n	801683a <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016816:	79fb      	ldrb	r3, [r7, #7]
 8016818:	4618      	mov	r0, r3
 801681a:	f7ff fee3 	bl	80165e4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801681e:	2001      	movs	r0, #1
 8016820:	f7fd fb72 	bl	8013f08 <memp_malloc>
 8016824:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d006      	beq.n	801683a <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801682c:	4b36      	ldr	r3, [pc, #216]	@ (8016908 <tcp_alloc+0x148>)
 801682e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016832:	881a      	ldrh	r2, [r3, #0]
 8016834:	3a01      	subs	r2, #1
 8016836:	b292      	uxth	r2, r2
 8016838:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d006      	beq.n	801684e <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016840:	4b31      	ldr	r3, [pc, #196]	@ (8016908 <tcp_alloc+0x148>)
 8016842:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016846:	881a      	ldrh	r2, [r3, #0]
 8016848:	3a01      	subs	r2, #1
 801684a:	b292      	uxth	r2, r2
 801684c:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d006      	beq.n	8016862 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016854:	4b2c      	ldr	r3, [pc, #176]	@ (8016908 <tcp_alloc+0x148>)
 8016856:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801685a:	881a      	ldrh	r2, [r3, #0]
 801685c:	3a01      	subs	r2, #1
 801685e:	b292      	uxth	r2, r2
 8016860:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d006      	beq.n	8016876 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016868:	4b27      	ldr	r3, [pc, #156]	@ (8016908 <tcp_alloc+0x148>)
 801686a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801686e:	881a      	ldrh	r2, [r3, #0]
 8016870:	3a01      	subs	r2, #1
 8016872:	b292      	uxth	r2, r2
 8016874:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d03f      	beq.n	80168fc <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801687c:	229c      	movs	r2, #156	@ 0x9c
 801687e:	2100      	movs	r1, #0
 8016880:	68f8      	ldr	r0, [r7, #12]
 8016882:	f009 fe69 	bl	8020558 <memset>
    pcb->prio = prio;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	79fa      	ldrb	r2, [r7, #7]
 801688a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016892:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801689c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	22ff      	movs	r2, #255	@ 0xff
 80168aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80168b2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	2206      	movs	r2, #6
 80168b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	2206      	movs	r2, #6
 80168c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168c8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	2201      	movs	r2, #1
 80168ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80168d2:	4b0e      	ldr	r3, [pc, #56]	@ (801690c <tcp_alloc+0x14c>)
 80168d4:	681a      	ldr	r2, [r3, #0]
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80168da:	4b0d      	ldr	r3, [pc, #52]	@ (8016910 <tcp_alloc+0x150>)
 80168dc:	781a      	ldrb	r2, [r3, #0]
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80168e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	4a09      	ldr	r2, [pc, #36]	@ (8016914 <tcp_alloc+0x154>)
 80168f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	4a08      	ldr	r2, [pc, #32]	@ (8016918 <tcp_alloc+0x158>)
 80168f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80168fc:	68fb      	ldr	r3, [r7, #12]
}
 80168fe:	4618      	mov	r0, r3
 8016900:	3710      	adds	r7, #16
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}
 8016906:	bf00      	nop
 8016908:	200252ac 	.word	0x200252ac
 801690c:	200253a8 	.word	0x200253a8
 8016910:	200253be 	.word	0x200253be
 8016914:	08016579 	.word	0x08016579
 8016918:	006ddd00 	.word	0x006ddd00

0801691c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b084      	sub	sp, #16
 8016920:	af00      	add	r7, sp, #0
 8016922:	4603      	mov	r3, r0
 8016924:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016926:	2040      	movs	r0, #64	@ 0x40
 8016928:	f7ff ff4a 	bl	80167c0 <tcp_alloc>
 801692c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801692e:	68fb      	ldr	r3, [r7, #12]
}
 8016930:	4618      	mov	r0, r3
 8016932:	3710      	adds	r7, #16
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}

08016938 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016938:	b480      	push	{r7}
 801693a:	b083      	sub	sp, #12
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d002      	beq.n	801694e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	683a      	ldr	r2, [r7, #0]
 801694c:	611a      	str	r2, [r3, #16]
  }
}
 801694e:	bf00      	nop
 8016950:	370c      	adds	r7, #12
 8016952:	46bd      	mov	sp, r7
 8016954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016958:	4770      	bx	lr
	...

0801695c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d00e      	beq.n	801698a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	7d1b      	ldrb	r3, [r3, #20]
 8016970:	2b01      	cmp	r3, #1
 8016972:	d106      	bne.n	8016982 <tcp_recv+0x26>
 8016974:	4b07      	ldr	r3, [pc, #28]	@ (8016994 <tcp_recv+0x38>)
 8016976:	f240 72df 	movw	r2, #2015	@ 0x7df
 801697a:	4907      	ldr	r1, [pc, #28]	@ (8016998 <tcp_recv+0x3c>)
 801697c:	4807      	ldr	r0, [pc, #28]	@ (801699c <tcp_recv+0x40>)
 801697e:	f009 fc93 	bl	80202a8 <iprintf>
    pcb->recv = recv;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	683a      	ldr	r2, [r7, #0]
 8016986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801698a:	bf00      	nop
 801698c:	3708      	adds	r7, #8
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}
 8016992:	bf00      	nop
 8016994:	08022974 	.word	0x08022974
 8016998:	08022f10 	.word	0x08022f10
 801699c:	080229b8 	.word	0x080229b8

080169a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d00e      	beq.n	80169ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	7d1b      	ldrb	r3, [r3, #20]
 80169b4:	2b01      	cmp	r3, #1
 80169b6:	d106      	bne.n	80169c6 <tcp_sent+0x26>
 80169b8:	4b07      	ldr	r3, [pc, #28]	@ (80169d8 <tcp_sent+0x38>)
 80169ba:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80169be:	4907      	ldr	r1, [pc, #28]	@ (80169dc <tcp_sent+0x3c>)
 80169c0:	4807      	ldr	r0, [pc, #28]	@ (80169e0 <tcp_sent+0x40>)
 80169c2:	f009 fc71 	bl	80202a8 <iprintf>
    pcb->sent = sent;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	683a      	ldr	r2, [r7, #0]
 80169ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80169ce:	bf00      	nop
 80169d0:	3708      	adds	r7, #8
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	08022974 	.word	0x08022974
 80169dc:	08022f38 	.word	0x08022f38
 80169e0:	080229b8 	.word	0x080229b8

080169e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b082      	sub	sp, #8
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
 80169ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d00e      	beq.n	8016a12 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	7d1b      	ldrb	r3, [r3, #20]
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d106      	bne.n	8016a0a <tcp_err+0x26>
 80169fc:	4b07      	ldr	r3, [pc, #28]	@ (8016a1c <tcp_err+0x38>)
 80169fe:	f640 020d 	movw	r2, #2061	@ 0x80d
 8016a02:	4907      	ldr	r1, [pc, #28]	@ (8016a20 <tcp_err+0x3c>)
 8016a04:	4807      	ldr	r0, [pc, #28]	@ (8016a24 <tcp_err+0x40>)
 8016a06:	f009 fc4f 	bl	80202a8 <iprintf>
    pcb->errf = err;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	683a      	ldr	r2, [r7, #0]
 8016a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8016a12:	bf00      	nop
 8016a14:	3708      	adds	r7, #8
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}
 8016a1a:	bf00      	nop
 8016a1c:	08022974 	.word	0x08022974
 8016a20:	08022f60 	.word	0x08022f60
 8016a24:	080229b8 	.word	0x080229b8

08016a28 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016a28:	b480      	push	{r7}
 8016a2a:	b085      	sub	sp, #20
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	6078      	str	r0, [r7, #4]
 8016a30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d008      	beq.n	8016a4a <tcp_accept+0x22>
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	7d1b      	ldrb	r3, [r3, #20]
 8016a3c:	2b01      	cmp	r3, #1
 8016a3e:	d104      	bne.n	8016a4a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	683a      	ldr	r2, [r7, #0]
 8016a48:	619a      	str	r2, [r3, #24]
  }
}
 8016a4a:	bf00      	nop
 8016a4c:	3714      	adds	r7, #20
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a54:	4770      	bx	lr
	...

08016a58 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b084      	sub	sp, #16
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	4613      	mov	r3, r2
 8016a64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d107      	bne.n	8016a7c <tcp_poll+0x24>
 8016a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8016aa8 <tcp_poll+0x50>)
 8016a6e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8016a72:	490e      	ldr	r1, [pc, #56]	@ (8016aac <tcp_poll+0x54>)
 8016a74:	480e      	ldr	r0, [pc, #56]	@ (8016ab0 <tcp_poll+0x58>)
 8016a76:	f009 fc17 	bl	80202a8 <iprintf>
 8016a7a:	e011      	b.n	8016aa0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	7d1b      	ldrb	r3, [r3, #20]
 8016a80:	2b01      	cmp	r3, #1
 8016a82:	d106      	bne.n	8016a92 <tcp_poll+0x3a>
 8016a84:	4b08      	ldr	r3, [pc, #32]	@ (8016aa8 <tcp_poll+0x50>)
 8016a86:	f640 023e 	movw	r2, #2110	@ 0x83e
 8016a8a:	490a      	ldr	r1, [pc, #40]	@ (8016ab4 <tcp_poll+0x5c>)
 8016a8c:	4808      	ldr	r0, [pc, #32]	@ (8016ab0 <tcp_poll+0x58>)
 8016a8e:	f009 fc0b 	bl	80202a8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	68ba      	ldr	r2, [r7, #8]
 8016a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	79fa      	ldrb	r2, [r7, #7]
 8016a9e:	775a      	strb	r2, [r3, #29]
}
 8016aa0:	3710      	adds	r7, #16
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	bd80      	pop	{r7, pc}
 8016aa6:	bf00      	nop
 8016aa8:	08022974 	.word	0x08022974
 8016aac:	08022f88 	.word	0x08022f88
 8016ab0:	080229b8 	.word	0x080229b8
 8016ab4:	08022fa0 	.word	0x08022fa0

08016ab8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d107      	bne.n	8016ad6 <tcp_pcb_purge+0x1e>
 8016ac6:	4b21      	ldr	r3, [pc, #132]	@ (8016b4c <tcp_pcb_purge+0x94>)
 8016ac8:	f640 0251 	movw	r2, #2129	@ 0x851
 8016acc:	4920      	ldr	r1, [pc, #128]	@ (8016b50 <tcp_pcb_purge+0x98>)
 8016ace:	4821      	ldr	r0, [pc, #132]	@ (8016b54 <tcp_pcb_purge+0x9c>)
 8016ad0:	f009 fbea 	bl	80202a8 <iprintf>
 8016ad4:	e037      	b.n	8016b46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	7d1b      	ldrb	r3, [r3, #20]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d033      	beq.n	8016b46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016ae2:	2b0a      	cmp	r3, #10
 8016ae4:	d02f      	beq.n	8016b46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016aea:	2b01      	cmp	r3, #1
 8016aec:	d02b      	beq.n	8016b46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d007      	beq.n	8016b06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7fe f924 	bl	8014d48 <pbuf_free>
      pcb->refused_data = NULL;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2200      	movs	r2, #0
 8016b04:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d002      	beq.n	8016b14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016b0e:	6878      	ldr	r0, [r7, #4]
 8016b10:	f000 f986 	bl	8016e20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b1a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7ff fccf 	bl	80164c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	f7ff fcca 	bl	80164c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2200      	movs	r2, #0
 8016b34:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	2200      	movs	r2, #0
 8016b42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016b46:	3708      	adds	r7, #8
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	08022974 	.word	0x08022974
 8016b50:	08022fc0 	.word	0x08022fc0
 8016b54:	080229b8 	.word	0x080229b8

08016b58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b084      	sub	sp, #16
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
 8016b60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d106      	bne.n	8016b76 <tcp_pcb_remove+0x1e>
 8016b68:	4b3e      	ldr	r3, [pc, #248]	@ (8016c64 <tcp_pcb_remove+0x10c>)
 8016b6a:	f640 0283 	movw	r2, #2179	@ 0x883
 8016b6e:	493e      	ldr	r1, [pc, #248]	@ (8016c68 <tcp_pcb_remove+0x110>)
 8016b70:	483e      	ldr	r0, [pc, #248]	@ (8016c6c <tcp_pcb_remove+0x114>)
 8016b72:	f009 fb99 	bl	80202a8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d106      	bne.n	8016b8a <tcp_pcb_remove+0x32>
 8016b7c:	4b39      	ldr	r3, [pc, #228]	@ (8016c64 <tcp_pcb_remove+0x10c>)
 8016b7e:	f640 0284 	movw	r2, #2180	@ 0x884
 8016b82:	493b      	ldr	r1, [pc, #236]	@ (8016c70 <tcp_pcb_remove+0x118>)
 8016b84:	4839      	ldr	r0, [pc, #228]	@ (8016c6c <tcp_pcb_remove+0x114>)
 8016b86:	f009 fb8f 	bl	80202a8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	683a      	ldr	r2, [r7, #0]
 8016b90:	429a      	cmp	r2, r3
 8016b92:	d105      	bne.n	8016ba0 <tcp_pcb_remove+0x48>
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	68da      	ldr	r2, [r3, #12]
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	601a      	str	r2, [r3, #0]
 8016b9e:	e013      	b.n	8016bc8 <tcp_pcb_remove+0x70>
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	60fb      	str	r3, [r7, #12]
 8016ba6:	e00c      	b.n	8016bc2 <tcp_pcb_remove+0x6a>
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	68db      	ldr	r3, [r3, #12]
 8016bac:	683a      	ldr	r2, [r7, #0]
 8016bae:	429a      	cmp	r2, r3
 8016bb0:	d104      	bne.n	8016bbc <tcp_pcb_remove+0x64>
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	68da      	ldr	r2, [r3, #12]
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	60da      	str	r2, [r3, #12]
 8016bba:	e005      	b.n	8016bc8 <tcp_pcb_remove+0x70>
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	68db      	ldr	r3, [r3, #12]
 8016bc0:	60fb      	str	r3, [r7, #12]
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d1ef      	bne.n	8016ba8 <tcp_pcb_remove+0x50>
 8016bc8:	683b      	ldr	r3, [r7, #0]
 8016bca:	2200      	movs	r2, #0
 8016bcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016bce:	6838      	ldr	r0, [r7, #0]
 8016bd0:	f7ff ff72 	bl	8016ab8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	7d1b      	ldrb	r3, [r3, #20]
 8016bd8:	2b0a      	cmp	r3, #10
 8016bda:	d013      	beq.n	8016c04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	d00f      	beq.n	8016c04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	8b5b      	ldrh	r3, [r3, #26]
 8016be8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d009      	beq.n	8016c04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	8b5b      	ldrh	r3, [r3, #26]
 8016bf4:	f043 0302 	orr.w	r3, r3, #2
 8016bf8:	b29a      	uxth	r2, r3
 8016bfa:	683b      	ldr	r3, [r7, #0]
 8016bfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016bfe:	6838      	ldr	r0, [r7, #0]
 8016c00:	f003 fc60 	bl	801a4c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	7d1b      	ldrb	r3, [r3, #20]
 8016c08:	2b01      	cmp	r3, #1
 8016c0a:	d020      	beq.n	8016c4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d006      	beq.n	8016c22 <tcp_pcb_remove+0xca>
 8016c14:	4b13      	ldr	r3, [pc, #76]	@ (8016c64 <tcp_pcb_remove+0x10c>)
 8016c16:	f640 0293 	movw	r2, #2195	@ 0x893
 8016c1a:	4916      	ldr	r1, [pc, #88]	@ (8016c74 <tcp_pcb_remove+0x11c>)
 8016c1c:	4813      	ldr	r0, [pc, #76]	@ (8016c6c <tcp_pcb_remove+0x114>)
 8016c1e:	f009 fb43 	bl	80202a8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d006      	beq.n	8016c38 <tcp_pcb_remove+0xe0>
 8016c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8016c64 <tcp_pcb_remove+0x10c>)
 8016c2c:	f640 0294 	movw	r2, #2196	@ 0x894
 8016c30:	4911      	ldr	r1, [pc, #68]	@ (8016c78 <tcp_pcb_remove+0x120>)
 8016c32:	480e      	ldr	r0, [pc, #56]	@ (8016c6c <tcp_pcb_remove+0x114>)
 8016c34:	f009 fb38 	bl	80202a8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d006      	beq.n	8016c4e <tcp_pcb_remove+0xf6>
 8016c40:	4b08      	ldr	r3, [pc, #32]	@ (8016c64 <tcp_pcb_remove+0x10c>)
 8016c42:	f640 0296 	movw	r2, #2198	@ 0x896
 8016c46:	490d      	ldr	r1, [pc, #52]	@ (8016c7c <tcp_pcb_remove+0x124>)
 8016c48:	4808      	ldr	r0, [pc, #32]	@ (8016c6c <tcp_pcb_remove+0x114>)
 8016c4a:	f009 fb2d 	bl	80202a8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	2200      	movs	r2, #0
 8016c52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016c54:	683b      	ldr	r3, [r7, #0]
 8016c56:	2200      	movs	r2, #0
 8016c58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016c5a:	bf00      	nop
 8016c5c:	3710      	adds	r7, #16
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	08022974 	.word	0x08022974
 8016c68:	08022fdc 	.word	0x08022fdc
 8016c6c:	080229b8 	.word	0x080229b8
 8016c70:	08022ff8 	.word	0x08022ff8
 8016c74:	08023018 	.word	0x08023018
 8016c78:	08023030 	.word	0x08023030
 8016c7c:	0802304c 	.word	0x0802304c

08016c80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d106      	bne.n	8016c9c <tcp_next_iss+0x1c>
 8016c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8016cb8 <tcp_next_iss+0x38>)
 8016c90:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016c94:	4909      	ldr	r1, [pc, #36]	@ (8016cbc <tcp_next_iss+0x3c>)
 8016c96:	480a      	ldr	r0, [pc, #40]	@ (8016cc0 <tcp_next_iss+0x40>)
 8016c98:	f009 fb06 	bl	80202a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016c9c:	4b09      	ldr	r3, [pc, #36]	@ (8016cc4 <tcp_next_iss+0x44>)
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	4b09      	ldr	r3, [pc, #36]	@ (8016cc8 <tcp_next_iss+0x48>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	4413      	add	r3, r2
 8016ca6:	4a07      	ldr	r2, [pc, #28]	@ (8016cc4 <tcp_next_iss+0x44>)
 8016ca8:	6013      	str	r3, [r2, #0]
  return iss;
 8016caa:	4b06      	ldr	r3, [pc, #24]	@ (8016cc4 <tcp_next_iss+0x44>)
 8016cac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3708      	adds	r7, #8
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	bf00      	nop
 8016cb8:	08022974 	.word	0x08022974
 8016cbc:	08023064 	.word	0x08023064
 8016cc0:	080229b8 	.word	0x080229b8
 8016cc4:	20000028 	.word	0x20000028
 8016cc8:	200253a8 	.word	0x200253a8

08016ccc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b086      	sub	sp, #24
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	60b9      	str	r1, [r7, #8]
 8016cd6:	607a      	str	r2, [r7, #4]
 8016cd8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d106      	bne.n	8016cee <tcp_eff_send_mss_netif+0x22>
 8016ce0:	4b14      	ldr	r3, [pc, #80]	@ (8016d34 <tcp_eff_send_mss_netif+0x68>)
 8016ce2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8016ce6:	4914      	ldr	r1, [pc, #80]	@ (8016d38 <tcp_eff_send_mss_netif+0x6c>)
 8016ce8:	4814      	ldr	r0, [pc, #80]	@ (8016d3c <tcp_eff_send_mss_netif+0x70>)
 8016cea:	f009 fadd 	bl	80202a8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d101      	bne.n	8016cf8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016cf4:	89fb      	ldrh	r3, [r7, #14]
 8016cf6:	e019      	b.n	8016d2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016cfc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016cfe:	8afb      	ldrh	r3, [r7, #22]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d012      	beq.n	8016d2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016d04:	2328      	movs	r3, #40	@ 0x28
 8016d06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016d08:	8afa      	ldrh	r2, [r7, #22]
 8016d0a:	8abb      	ldrh	r3, [r7, #20]
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d904      	bls.n	8016d1a <tcp_eff_send_mss_netif+0x4e>
 8016d10:	8afa      	ldrh	r2, [r7, #22]
 8016d12:	8abb      	ldrh	r3, [r7, #20]
 8016d14:	1ad3      	subs	r3, r2, r3
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	e000      	b.n	8016d1c <tcp_eff_send_mss_netif+0x50>
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016d1e:	8a7a      	ldrh	r2, [r7, #18]
 8016d20:	89fb      	ldrh	r3, [r7, #14]
 8016d22:	4293      	cmp	r3, r2
 8016d24:	bf28      	it	cs
 8016d26:	4613      	movcs	r3, r2
 8016d28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	3718      	adds	r7, #24
 8016d30:	46bd      	mov	sp, r7
 8016d32:	bd80      	pop	{r7, pc}
 8016d34:	08022974 	.word	0x08022974
 8016d38:	08023080 	.word	0x08023080
 8016d3c:	080229b8 	.word	0x080229b8

08016d40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b084      	sub	sp, #16
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
 8016d48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d119      	bne.n	8016d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016d54:	4b10      	ldr	r3, [pc, #64]	@ (8016d98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016d56:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016d5a:	4910      	ldr	r1, [pc, #64]	@ (8016d9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016d5c:	4810      	ldr	r0, [pc, #64]	@ (8016da0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016d5e:	f009 faa3 	bl	80202a8 <iprintf>

  while (pcb != NULL) {
 8016d62:	e011      	b.n	8016d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681a      	ldr	r2, [r3, #0]
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d108      	bne.n	8016d82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	68db      	ldr	r3, [r3, #12]
 8016d74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016d76:	68f8      	ldr	r0, [r7, #12]
 8016d78:	f7fe fdee 	bl	8015958 <tcp_abort>
      pcb = next;
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	60fb      	str	r3, [r7, #12]
 8016d80:	e002      	b.n	8016d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	68db      	ldr	r3, [r3, #12]
 8016d86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d1ea      	bne.n	8016d64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016d8e:	bf00      	nop
 8016d90:	bf00      	nop
 8016d92:	3710      	adds	r7, #16
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}
 8016d98:	08022974 	.word	0x08022974
 8016d9c:	080230a8 	.word	0x080230a8
 8016da0:	080229b8 	.word	0x080229b8

08016da4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b084      	sub	sp, #16
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
 8016dac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d02a      	beq.n	8016e0a <tcp_netif_ip_addr_changed+0x66>
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d026      	beq.n	8016e0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016dbc:	4b15      	ldr	r3, [pc, #84]	@ (8016e14 <tcp_netif_ip_addr_changed+0x70>)
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	4619      	mov	r1, r3
 8016dc2:	6878      	ldr	r0, [r7, #4]
 8016dc4:	f7ff ffbc 	bl	8016d40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016dc8:	4b13      	ldr	r3, [pc, #76]	@ (8016e18 <tcp_netif_ip_addr_changed+0x74>)
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	4619      	mov	r1, r3
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	f7ff ffb6 	bl	8016d40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d017      	beq.n	8016e0a <tcp_netif_ip_addr_changed+0x66>
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d013      	beq.n	8016e0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016de2:	4b0e      	ldr	r3, [pc, #56]	@ (8016e1c <tcp_netif_ip_addr_changed+0x78>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	60fb      	str	r3, [r7, #12]
 8016de8:	e00c      	b.n	8016e04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d103      	bne.n	8016dfe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	681a      	ldr	r2, [r3, #0]
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	68db      	ldr	r3, [r3, #12]
 8016e02:	60fb      	str	r3, [r7, #12]
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d1ef      	bne.n	8016dea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016e0a:	bf00      	nop
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	200253b4 	.word	0x200253b4
 8016e18:	200253ac 	.word	0x200253ac
 8016e1c:	200253b0 	.word	0x200253b0

08016e20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b082      	sub	sp, #8
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d007      	beq.n	8016e40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ff fb45 	bl	80164c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016e40:	bf00      	nop
 8016e42:	3708      	adds	r7, #8
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd80      	pop	{r7, pc}

08016e48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016e48:	b590      	push	{r4, r7, lr}
 8016e4a:	b08d      	sub	sp, #52	@ 0x34
 8016e4c:	af04      	add	r7, sp, #16
 8016e4e:	6078      	str	r0, [r7, #4]
 8016e50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d105      	bne.n	8016e64 <tcp_input+0x1c>
 8016e58:	4b9b      	ldr	r3, [pc, #620]	@ (80170c8 <tcp_input+0x280>)
 8016e5a:	2283      	movs	r2, #131	@ 0x83
 8016e5c:	499b      	ldr	r1, [pc, #620]	@ (80170cc <tcp_input+0x284>)
 8016e5e:	489c      	ldr	r0, [pc, #624]	@ (80170d0 <tcp_input+0x288>)
 8016e60:	f009 fa22 	bl	80202a8 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8016e64:	4b9b      	ldr	r3, [pc, #620]	@ (80170d4 <tcp_input+0x28c>)
 8016e66:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	b29a      	uxth	r2, r3
 8016e6e:	4b99      	ldr	r3, [pc, #612]	@ (80170d4 <tcp_input+0x28c>)
 8016e70:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	4a97      	ldr	r2, [pc, #604]	@ (80170d8 <tcp_input+0x290>)
 8016e7a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	895b      	ldrh	r3, [r3, #10]
 8016e80:	2b13      	cmp	r3, #19
 8016e82:	d809      	bhi.n	8016e98 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8016e84:	4b93      	ldr	r3, [pc, #588]	@ (80170d4 <tcp_input+0x28c>)
 8016e86:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016e8a:	3301      	adds	r3, #1
 8016e8c:	b29a      	uxth	r2, r3
 8016e8e:	4b91      	ldr	r3, [pc, #580]	@ (80170d4 <tcp_input+0x28c>)
 8016e90:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016e94:	f000 bc1c 	b.w	80176d0 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016e98:	4b90      	ldr	r3, [pc, #576]	@ (80170dc <tcp_input+0x294>)
 8016e9a:	695b      	ldr	r3, [r3, #20]
 8016e9c:	4a8f      	ldr	r2, [pc, #572]	@ (80170dc <tcp_input+0x294>)
 8016e9e:	6812      	ldr	r2, [r2, #0]
 8016ea0:	4611      	mov	r1, r2
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f006 fdaa 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d105      	bne.n	8016eba <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016eae:	4b8b      	ldr	r3, [pc, #556]	@ (80170dc <tcp_input+0x294>)
 8016eb0:	695b      	ldr	r3, [r3, #20]
 8016eb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016eb6:	2be0      	cmp	r3, #224	@ 0xe0
 8016eb8:	d109      	bne.n	8016ece <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8016eba:	4b86      	ldr	r3, [pc, #536]	@ (80170d4 <tcp_input+0x28c>)
 8016ebc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8016ec0:	3301      	adds	r3, #1
 8016ec2:	b29a      	uxth	r2, r3
 8016ec4:	4b83      	ldr	r3, [pc, #524]	@ (80170d4 <tcp_input+0x28c>)
 8016ec6:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8016eca:	f000 bc01 	b.w	80176d0 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016ece:	4b82      	ldr	r3, [pc, #520]	@ (80170d8 <tcp_input+0x290>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	899b      	ldrh	r3, [r3, #12]
 8016ed4:	b29b      	uxth	r3, r3
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7fc fa78 	bl	80133cc <lwip_htons>
 8016edc:	4603      	mov	r3, r0
 8016ede:	0b1b      	lsrs	r3, r3, #12
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	b2db      	uxtb	r3, r3
 8016ee4:	009b      	lsls	r3, r3, #2
 8016ee6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016ee8:	7cbb      	ldrb	r3, [r7, #18]
 8016eea:	2b13      	cmp	r3, #19
 8016eec:	d905      	bls.n	8016efa <tcp_input+0xb2>
 8016eee:	7cbb      	ldrb	r3, [r7, #18]
 8016ef0:	b29a      	uxth	r2, r3
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	891b      	ldrh	r3, [r3, #8]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d908      	bls.n	8016f0c <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8016efa:	4b76      	ldr	r3, [pc, #472]	@ (80170d4 <tcp_input+0x28c>)
 8016efc:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016f00:	3301      	adds	r3, #1
 8016f02:	b29a      	uxth	r2, r3
 8016f04:	4b73      	ldr	r3, [pc, #460]	@ (80170d4 <tcp_input+0x28c>)
 8016f06:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016f0a:	e3e1      	b.n	80176d0 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016f0c:	7cbb      	ldrb	r3, [r7, #18]
 8016f0e:	b29b      	uxth	r3, r3
 8016f10:	3b14      	subs	r3, #20
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	4b72      	ldr	r3, [pc, #456]	@ (80170e0 <tcp_input+0x298>)
 8016f16:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016f18:	4b72      	ldr	r3, [pc, #456]	@ (80170e4 <tcp_input+0x29c>)
 8016f1a:	2200      	movs	r2, #0
 8016f1c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	895a      	ldrh	r2, [r3, #10]
 8016f22:	7cbb      	ldrb	r3, [r7, #18]
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d309      	bcc.n	8016f3e <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80170e0 <tcp_input+0x298>)
 8016f2c:	881a      	ldrh	r2, [r3, #0]
 8016f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80170e8 <tcp_input+0x2a0>)
 8016f30:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016f32:	7cbb      	ldrb	r3, [r7, #18]
 8016f34:	4619      	mov	r1, r3
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f7fd fe80 	bl	8014c3c <pbuf_remove_header>
 8016f3c:	e056      	b.n	8016fec <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d105      	bne.n	8016f52 <tcp_input+0x10a>
 8016f46:	4b60      	ldr	r3, [pc, #384]	@ (80170c8 <tcp_input+0x280>)
 8016f48:	22c2      	movs	r2, #194	@ 0xc2
 8016f4a:	4968      	ldr	r1, [pc, #416]	@ (80170ec <tcp_input+0x2a4>)
 8016f4c:	4860      	ldr	r0, [pc, #384]	@ (80170d0 <tcp_input+0x288>)
 8016f4e:	f009 f9ab 	bl	80202a8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016f52:	2114      	movs	r1, #20
 8016f54:	6878      	ldr	r0, [r7, #4]
 8016f56:	f7fd fe71 	bl	8014c3c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	895a      	ldrh	r2, [r3, #10]
 8016f5e:	4b62      	ldr	r3, [pc, #392]	@ (80170e8 <tcp_input+0x2a0>)
 8016f60:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016f62:	4b5f      	ldr	r3, [pc, #380]	@ (80170e0 <tcp_input+0x298>)
 8016f64:	881a      	ldrh	r2, [r3, #0]
 8016f66:	4b60      	ldr	r3, [pc, #384]	@ (80170e8 <tcp_input+0x2a0>)
 8016f68:	881b      	ldrh	r3, [r3, #0]
 8016f6a:	1ad3      	subs	r3, r2, r3
 8016f6c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016f6e:	4b5e      	ldr	r3, [pc, #376]	@ (80170e8 <tcp_input+0x2a0>)
 8016f70:	881b      	ldrh	r3, [r3, #0]
 8016f72:	4619      	mov	r1, r3
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f7fd fe61 	bl	8014c3c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	895b      	ldrh	r3, [r3, #10]
 8016f80:	8a3a      	ldrh	r2, [r7, #16]
 8016f82:	429a      	cmp	r2, r3
 8016f84:	d908      	bls.n	8016f98 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8016f86:	4b53      	ldr	r3, [pc, #332]	@ (80170d4 <tcp_input+0x28c>)
 8016f88:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016f8c:	3301      	adds	r3, #1
 8016f8e:	b29a      	uxth	r2, r3
 8016f90:	4b50      	ldr	r3, [pc, #320]	@ (80170d4 <tcp_input+0x28c>)
 8016f92:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016f96:	e39b      	b.n	80176d0 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	685b      	ldr	r3, [r3, #4]
 8016f9e:	4a51      	ldr	r2, [pc, #324]	@ (80170e4 <tcp_input+0x29c>)
 8016fa0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	8a3a      	ldrh	r2, [r7, #16]
 8016fa8:	4611      	mov	r1, r2
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7fd fe46 	bl	8014c3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	891a      	ldrh	r2, [r3, #8]
 8016fb4:	8a3b      	ldrh	r3, [r7, #16]
 8016fb6:	1ad3      	subs	r3, r2, r3
 8016fb8:	b29a      	uxth	r2, r3
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	895b      	ldrh	r3, [r3, #10]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d005      	beq.n	8016fd2 <tcp_input+0x18a>
 8016fc6:	4b40      	ldr	r3, [pc, #256]	@ (80170c8 <tcp_input+0x280>)
 8016fc8:	22df      	movs	r2, #223	@ 0xdf
 8016fca:	4949      	ldr	r1, [pc, #292]	@ (80170f0 <tcp_input+0x2a8>)
 8016fcc:	4840      	ldr	r0, [pc, #256]	@ (80170d0 <tcp_input+0x288>)
 8016fce:	f009 f96b 	bl	80202a8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	891a      	ldrh	r2, [r3, #8]
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	891b      	ldrh	r3, [r3, #8]
 8016fdc:	429a      	cmp	r2, r3
 8016fde:	d005      	beq.n	8016fec <tcp_input+0x1a4>
 8016fe0:	4b39      	ldr	r3, [pc, #228]	@ (80170c8 <tcp_input+0x280>)
 8016fe2:	22e0      	movs	r2, #224	@ 0xe0
 8016fe4:	4943      	ldr	r1, [pc, #268]	@ (80170f4 <tcp_input+0x2ac>)
 8016fe6:	483a      	ldr	r0, [pc, #232]	@ (80170d0 <tcp_input+0x288>)
 8016fe8:	f009 f95e 	bl	80202a8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016fec:	4b3a      	ldr	r3, [pc, #232]	@ (80170d8 <tcp_input+0x290>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	4a38      	ldr	r2, [pc, #224]	@ (80170d8 <tcp_input+0x290>)
 8016ff6:	6814      	ldr	r4, [r2, #0]
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7fc f9e7 	bl	80133cc <lwip_htons>
 8016ffe:	4603      	mov	r3, r0
 8017000:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017002:	4b35      	ldr	r3, [pc, #212]	@ (80170d8 <tcp_input+0x290>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	885b      	ldrh	r3, [r3, #2]
 8017008:	b29b      	uxth	r3, r3
 801700a:	4a33      	ldr	r2, [pc, #204]	@ (80170d8 <tcp_input+0x290>)
 801700c:	6814      	ldr	r4, [r2, #0]
 801700e:	4618      	mov	r0, r3
 8017010:	f7fc f9dc 	bl	80133cc <lwip_htons>
 8017014:	4603      	mov	r3, r0
 8017016:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017018:	4b2f      	ldr	r3, [pc, #188]	@ (80170d8 <tcp_input+0x290>)
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	685b      	ldr	r3, [r3, #4]
 801701e:	4a2e      	ldr	r2, [pc, #184]	@ (80170d8 <tcp_input+0x290>)
 8017020:	6814      	ldr	r4, [r2, #0]
 8017022:	4618      	mov	r0, r3
 8017024:	f7fc f9e8 	bl	80133f8 <lwip_htonl>
 8017028:	4603      	mov	r3, r0
 801702a:	6063      	str	r3, [r4, #4]
 801702c:	6863      	ldr	r3, [r4, #4]
 801702e:	4a32      	ldr	r2, [pc, #200]	@ (80170f8 <tcp_input+0x2b0>)
 8017030:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017032:	4b29      	ldr	r3, [pc, #164]	@ (80170d8 <tcp_input+0x290>)
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	689b      	ldr	r3, [r3, #8]
 8017038:	4a27      	ldr	r2, [pc, #156]	@ (80170d8 <tcp_input+0x290>)
 801703a:	6814      	ldr	r4, [r2, #0]
 801703c:	4618      	mov	r0, r3
 801703e:	f7fc f9db 	bl	80133f8 <lwip_htonl>
 8017042:	4603      	mov	r3, r0
 8017044:	60a3      	str	r3, [r4, #8]
 8017046:	68a3      	ldr	r3, [r4, #8]
 8017048:	4a2c      	ldr	r2, [pc, #176]	@ (80170fc <tcp_input+0x2b4>)
 801704a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801704c:	4b22      	ldr	r3, [pc, #136]	@ (80170d8 <tcp_input+0x290>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	89db      	ldrh	r3, [r3, #14]
 8017052:	b29b      	uxth	r3, r3
 8017054:	4a20      	ldr	r2, [pc, #128]	@ (80170d8 <tcp_input+0x290>)
 8017056:	6814      	ldr	r4, [r2, #0]
 8017058:	4618      	mov	r0, r3
 801705a:	f7fc f9b7 	bl	80133cc <lwip_htons>
 801705e:	4603      	mov	r3, r0
 8017060:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017062:	4b1d      	ldr	r3, [pc, #116]	@ (80170d8 <tcp_input+0x290>)
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	899b      	ldrh	r3, [r3, #12]
 8017068:	b29b      	uxth	r3, r3
 801706a:	4618      	mov	r0, r3
 801706c:	f7fc f9ae 	bl	80133cc <lwip_htons>
 8017070:	4603      	mov	r3, r0
 8017072:	b2db      	uxtb	r3, r3
 8017074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017078:	b2da      	uxtb	r2, r3
 801707a:	4b21      	ldr	r3, [pc, #132]	@ (8017100 <tcp_input+0x2b8>)
 801707c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	891a      	ldrh	r2, [r3, #8]
 8017082:	4b20      	ldr	r3, [pc, #128]	@ (8017104 <tcp_input+0x2bc>)
 8017084:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017086:	4b1e      	ldr	r3, [pc, #120]	@ (8017100 <tcp_input+0x2b8>)
 8017088:	781b      	ldrb	r3, [r3, #0]
 801708a:	f003 0303 	and.w	r3, r3, #3
 801708e:	2b00      	cmp	r3, #0
 8017090:	d014      	beq.n	80170bc <tcp_input+0x274>
    tcplen++;
 8017092:	4b1c      	ldr	r3, [pc, #112]	@ (8017104 <tcp_input+0x2bc>)
 8017094:	881b      	ldrh	r3, [r3, #0]
 8017096:	3301      	adds	r3, #1
 8017098:	b29a      	uxth	r2, r3
 801709a:	4b1a      	ldr	r3, [pc, #104]	@ (8017104 <tcp_input+0x2bc>)
 801709c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	891a      	ldrh	r2, [r3, #8]
 80170a2:	4b18      	ldr	r3, [pc, #96]	@ (8017104 <tcp_input+0x2bc>)
 80170a4:	881b      	ldrh	r3, [r3, #0]
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d908      	bls.n	80170bc <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 80170aa:	4b0a      	ldr	r3, [pc, #40]	@ (80170d4 <tcp_input+0x28c>)
 80170ac:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80170b0:	3301      	adds	r3, #1
 80170b2:	b29a      	uxth	r2, r3
 80170b4:	4b07      	ldr	r3, [pc, #28]	@ (80170d4 <tcp_input+0x28c>)
 80170b6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 80170ba:	e309      	b.n	80176d0 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80170bc:	2300      	movs	r3, #0
 80170be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80170c0:	4b11      	ldr	r3, [pc, #68]	@ (8017108 <tcp_input+0x2c0>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	61fb      	str	r3, [r7, #28]
 80170c6:	e0a1      	b.n	801720c <tcp_input+0x3c4>
 80170c8:	080230dc 	.word	0x080230dc
 80170cc:	08023110 	.word	0x08023110
 80170d0:	08023128 	.word	0x08023128
 80170d4:	200252ac 	.word	0x200252ac
 80170d8:	200253d0 	.word	0x200253d0
 80170dc:	2001f0b0 	.word	0x2001f0b0
 80170e0:	200253d4 	.word	0x200253d4
 80170e4:	200253d8 	.word	0x200253d8
 80170e8:	200253d6 	.word	0x200253d6
 80170ec:	08023150 	.word	0x08023150
 80170f0:	08023160 	.word	0x08023160
 80170f4:	0802316c 	.word	0x0802316c
 80170f8:	200253e0 	.word	0x200253e0
 80170fc:	200253e4 	.word	0x200253e4
 8017100:	200253ec 	.word	0x200253ec
 8017104:	200253ea 	.word	0x200253ea
 8017108:	200253b4 	.word	0x200253b4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801710c:	69fb      	ldr	r3, [r7, #28]
 801710e:	7d1b      	ldrb	r3, [r3, #20]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d105      	bne.n	8017120 <tcp_input+0x2d8>
 8017114:	4b8a      	ldr	r3, [pc, #552]	@ (8017340 <tcp_input+0x4f8>)
 8017116:	22fb      	movs	r2, #251	@ 0xfb
 8017118:	498a      	ldr	r1, [pc, #552]	@ (8017344 <tcp_input+0x4fc>)
 801711a:	488b      	ldr	r0, [pc, #556]	@ (8017348 <tcp_input+0x500>)
 801711c:	f009 f8c4 	bl	80202a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017120:	69fb      	ldr	r3, [r7, #28]
 8017122:	7d1b      	ldrb	r3, [r3, #20]
 8017124:	2b0a      	cmp	r3, #10
 8017126:	d105      	bne.n	8017134 <tcp_input+0x2ec>
 8017128:	4b85      	ldr	r3, [pc, #532]	@ (8017340 <tcp_input+0x4f8>)
 801712a:	22fc      	movs	r2, #252	@ 0xfc
 801712c:	4987      	ldr	r1, [pc, #540]	@ (801734c <tcp_input+0x504>)
 801712e:	4886      	ldr	r0, [pc, #536]	@ (8017348 <tcp_input+0x500>)
 8017130:	f009 f8ba 	bl	80202a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017134:	69fb      	ldr	r3, [r7, #28]
 8017136:	7d1b      	ldrb	r3, [r3, #20]
 8017138:	2b01      	cmp	r3, #1
 801713a:	d105      	bne.n	8017148 <tcp_input+0x300>
 801713c:	4b80      	ldr	r3, [pc, #512]	@ (8017340 <tcp_input+0x4f8>)
 801713e:	22fd      	movs	r2, #253	@ 0xfd
 8017140:	4983      	ldr	r1, [pc, #524]	@ (8017350 <tcp_input+0x508>)
 8017142:	4881      	ldr	r0, [pc, #516]	@ (8017348 <tcp_input+0x500>)
 8017144:	f009 f8b0 	bl	80202a8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017148:	69fb      	ldr	r3, [r7, #28]
 801714a:	7a1b      	ldrb	r3, [r3, #8]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d00c      	beq.n	801716a <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017150:	69fb      	ldr	r3, [r7, #28]
 8017152:	7a1a      	ldrb	r2, [r3, #8]
 8017154:	4b7f      	ldr	r3, [pc, #508]	@ (8017354 <tcp_input+0x50c>)
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801715c:	3301      	adds	r3, #1
 801715e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017160:	429a      	cmp	r2, r3
 8017162:	d002      	beq.n	801716a <tcp_input+0x322>
      prev = pcb;
 8017164:	69fb      	ldr	r3, [r7, #28]
 8017166:	61bb      	str	r3, [r7, #24]
      continue;
 8017168:	e04d      	b.n	8017206 <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 801716a:	69fb      	ldr	r3, [r7, #28]
 801716c:	8b1a      	ldrh	r2, [r3, #24]
 801716e:	4b7a      	ldr	r3, [pc, #488]	@ (8017358 <tcp_input+0x510>)
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	881b      	ldrh	r3, [r3, #0]
 8017174:	b29b      	uxth	r3, r3
 8017176:	429a      	cmp	r2, r3
 8017178:	d143      	bne.n	8017202 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 801717a:	69fb      	ldr	r3, [r7, #28]
 801717c:	8ada      	ldrh	r2, [r3, #22]
 801717e:	4b76      	ldr	r3, [pc, #472]	@ (8017358 <tcp_input+0x510>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	885b      	ldrh	r3, [r3, #2]
 8017184:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017186:	429a      	cmp	r2, r3
 8017188:	d13b      	bne.n	8017202 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801718a:	69fb      	ldr	r3, [r7, #28]
 801718c:	685a      	ldr	r2, [r3, #4]
 801718e:	4b71      	ldr	r3, [pc, #452]	@ (8017354 <tcp_input+0x50c>)
 8017190:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017192:	429a      	cmp	r2, r3
 8017194:	d135      	bne.n	8017202 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017196:	69fb      	ldr	r3, [r7, #28]
 8017198:	681a      	ldr	r2, [r3, #0]
 801719a:	4b6e      	ldr	r3, [pc, #440]	@ (8017354 <tcp_input+0x50c>)
 801719c:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801719e:	429a      	cmp	r2, r3
 80171a0:	d12f      	bne.n	8017202 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80171a2:	69fb      	ldr	r3, [r7, #28]
 80171a4:	68db      	ldr	r3, [r3, #12]
 80171a6:	69fa      	ldr	r2, [r7, #28]
 80171a8:	429a      	cmp	r2, r3
 80171aa:	d106      	bne.n	80171ba <tcp_input+0x372>
 80171ac:	4b64      	ldr	r3, [pc, #400]	@ (8017340 <tcp_input+0x4f8>)
 80171ae:	f240 120d 	movw	r2, #269	@ 0x10d
 80171b2:	496a      	ldr	r1, [pc, #424]	@ (801735c <tcp_input+0x514>)
 80171b4:	4864      	ldr	r0, [pc, #400]	@ (8017348 <tcp_input+0x500>)
 80171b6:	f009 f877 	bl	80202a8 <iprintf>
      if (prev != NULL) {
 80171ba:	69bb      	ldr	r3, [r7, #24]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d00b      	beq.n	80171d8 <tcp_input+0x390>
        prev->next = pcb->next;
 80171c0:	69fb      	ldr	r3, [r7, #28]
 80171c2:	68da      	ldr	r2, [r3, #12]
 80171c4:	69bb      	ldr	r3, [r7, #24]
 80171c6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80171c8:	4b65      	ldr	r3, [pc, #404]	@ (8017360 <tcp_input+0x518>)
 80171ca:	681a      	ldr	r2, [r3, #0]
 80171cc:	69fb      	ldr	r3, [r7, #28]
 80171ce:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80171d0:	4a63      	ldr	r2, [pc, #396]	@ (8017360 <tcp_input+0x518>)
 80171d2:	69fb      	ldr	r3, [r7, #28]
 80171d4:	6013      	str	r3, [r2, #0]
 80171d6:	e007      	b.n	80171e8 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80171d8:	4b62      	ldr	r3, [pc, #392]	@ (8017364 <tcp_input+0x51c>)
 80171da:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80171de:	3301      	adds	r3, #1
 80171e0:	b29a      	uxth	r2, r3
 80171e2:	4b60      	ldr	r3, [pc, #384]	@ (8017364 <tcp_input+0x51c>)
 80171e4:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80171e8:	69fb      	ldr	r3, [r7, #28]
 80171ea:	68db      	ldr	r3, [r3, #12]
 80171ec:	69fa      	ldr	r2, [r7, #28]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d111      	bne.n	8017216 <tcp_input+0x3ce>
 80171f2:	4b53      	ldr	r3, [pc, #332]	@ (8017340 <tcp_input+0x4f8>)
 80171f4:	f240 1215 	movw	r2, #277	@ 0x115
 80171f8:	495b      	ldr	r1, [pc, #364]	@ (8017368 <tcp_input+0x520>)
 80171fa:	4853      	ldr	r0, [pc, #332]	@ (8017348 <tcp_input+0x500>)
 80171fc:	f009 f854 	bl	80202a8 <iprintf>
      break;
 8017200:	e009      	b.n	8017216 <tcp_input+0x3ce>
    }
    prev = pcb;
 8017202:	69fb      	ldr	r3, [r7, #28]
 8017204:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017206:	69fb      	ldr	r3, [r7, #28]
 8017208:	68db      	ldr	r3, [r3, #12]
 801720a:	61fb      	str	r3, [r7, #28]
 801720c:	69fb      	ldr	r3, [r7, #28]
 801720e:	2b00      	cmp	r3, #0
 8017210:	f47f af7c 	bne.w	801710c <tcp_input+0x2c4>
 8017214:	e000      	b.n	8017218 <tcp_input+0x3d0>
      break;
 8017216:	bf00      	nop
  }

  if (pcb == NULL) {
 8017218:	69fb      	ldr	r3, [r7, #28]
 801721a:	2b00      	cmp	r3, #0
 801721c:	f040 80bb 	bne.w	8017396 <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017220:	4b52      	ldr	r3, [pc, #328]	@ (801736c <tcp_input+0x524>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	61fb      	str	r3, [r7, #28]
 8017226:	e03f      	b.n	80172a8 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017228:	69fb      	ldr	r3, [r7, #28]
 801722a:	7d1b      	ldrb	r3, [r3, #20]
 801722c:	2b0a      	cmp	r3, #10
 801722e:	d006      	beq.n	801723e <tcp_input+0x3f6>
 8017230:	4b43      	ldr	r3, [pc, #268]	@ (8017340 <tcp_input+0x4f8>)
 8017232:	f240 121f 	movw	r2, #287	@ 0x11f
 8017236:	494e      	ldr	r1, [pc, #312]	@ (8017370 <tcp_input+0x528>)
 8017238:	4843      	ldr	r0, [pc, #268]	@ (8017348 <tcp_input+0x500>)
 801723a:	f009 f835 	bl	80202a8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801723e:	69fb      	ldr	r3, [r7, #28]
 8017240:	7a1b      	ldrb	r3, [r3, #8]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d009      	beq.n	801725a <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017246:	69fb      	ldr	r3, [r7, #28]
 8017248:	7a1a      	ldrb	r2, [r3, #8]
 801724a:	4b42      	ldr	r3, [pc, #264]	@ (8017354 <tcp_input+0x50c>)
 801724c:	685b      	ldr	r3, [r3, #4]
 801724e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017252:	3301      	adds	r3, #1
 8017254:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017256:	429a      	cmp	r2, r3
 8017258:	d122      	bne.n	80172a0 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801725a:	69fb      	ldr	r3, [r7, #28]
 801725c:	8b1a      	ldrh	r2, [r3, #24]
 801725e:	4b3e      	ldr	r3, [pc, #248]	@ (8017358 <tcp_input+0x510>)
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	881b      	ldrh	r3, [r3, #0]
 8017264:	b29b      	uxth	r3, r3
 8017266:	429a      	cmp	r2, r3
 8017268:	d11b      	bne.n	80172a2 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	8ada      	ldrh	r2, [r3, #22]
 801726e:	4b3a      	ldr	r3, [pc, #232]	@ (8017358 <tcp_input+0x510>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	885b      	ldrh	r3, [r3, #2]
 8017274:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017276:	429a      	cmp	r2, r3
 8017278:	d113      	bne.n	80172a2 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801727a:	69fb      	ldr	r3, [r7, #28]
 801727c:	685a      	ldr	r2, [r3, #4]
 801727e:	4b35      	ldr	r3, [pc, #212]	@ (8017354 <tcp_input+0x50c>)
 8017280:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017282:	429a      	cmp	r2, r3
 8017284:	d10d      	bne.n	80172a2 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017286:	69fb      	ldr	r3, [r7, #28]
 8017288:	681a      	ldr	r2, [r3, #0]
 801728a:	4b32      	ldr	r3, [pc, #200]	@ (8017354 <tcp_input+0x50c>)
 801728c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801728e:	429a      	cmp	r2, r3
 8017290:	d107      	bne.n	80172a2 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8017292:	69f8      	ldr	r0, [r7, #28]
 8017294:	f000 fb88 	bl	80179a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f7fd fd55 	bl	8014d48 <pbuf_free>
        return;
 801729e:	e224      	b.n	80176ea <tcp_input+0x8a2>
        continue;
 80172a0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80172a2:	69fb      	ldr	r3, [r7, #28]
 80172a4:	68db      	ldr	r3, [r3, #12]
 80172a6:	61fb      	str	r3, [r7, #28]
 80172a8:	69fb      	ldr	r3, [r7, #28]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d1bc      	bne.n	8017228 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80172ae:	2300      	movs	r3, #0
 80172b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80172b2:	4b30      	ldr	r3, [pc, #192]	@ (8017374 <tcp_input+0x52c>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	617b      	str	r3, [r7, #20]
 80172b8:	e02a      	b.n	8017310 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	7a1b      	ldrb	r3, [r3, #8]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d00c      	beq.n	80172dc <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	7a1a      	ldrb	r2, [r3, #8]
 80172c6:	4b23      	ldr	r3, [pc, #140]	@ (8017354 <tcp_input+0x50c>)
 80172c8:	685b      	ldr	r3, [r3, #4]
 80172ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80172ce:	3301      	adds	r3, #1
 80172d0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80172d2:	429a      	cmp	r2, r3
 80172d4:	d002      	beq.n	80172dc <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 80172d6:	697b      	ldr	r3, [r7, #20]
 80172d8:	61bb      	str	r3, [r7, #24]
        continue;
 80172da:	e016      	b.n	801730a <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	8ada      	ldrh	r2, [r3, #22]
 80172e0:	4b1d      	ldr	r3, [pc, #116]	@ (8017358 <tcp_input+0x510>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	885b      	ldrh	r3, [r3, #2]
 80172e6:	b29b      	uxth	r3, r3
 80172e8:	429a      	cmp	r2, r3
 80172ea:	d10c      	bne.n	8017306 <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	681a      	ldr	r2, [r3, #0]
 80172f0:	4b18      	ldr	r3, [pc, #96]	@ (8017354 <tcp_input+0x50c>)
 80172f2:	695b      	ldr	r3, [r3, #20]
 80172f4:	429a      	cmp	r2, r3
 80172f6:	d00f      	beq.n	8017318 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80172f8:	697b      	ldr	r3, [r7, #20]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d00d      	beq.n	801731a <tcp_input+0x4d2>
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d009      	beq.n	801731a <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017306:	697b      	ldr	r3, [r7, #20]
 8017308:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801730a:	697b      	ldr	r3, [r7, #20]
 801730c:	68db      	ldr	r3, [r3, #12]
 801730e:	617b      	str	r3, [r7, #20]
 8017310:	697b      	ldr	r3, [r7, #20]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d1d1      	bne.n	80172ba <tcp_input+0x472>
 8017316:	e000      	b.n	801731a <tcp_input+0x4d2>
            break;
 8017318:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d03a      	beq.n	8017396 <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017320:	69bb      	ldr	r3, [r7, #24]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d028      	beq.n	8017378 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017326:	697b      	ldr	r3, [r7, #20]
 8017328:	68da      	ldr	r2, [r3, #12]
 801732a:	69bb      	ldr	r3, [r7, #24]
 801732c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801732e:	4b11      	ldr	r3, [pc, #68]	@ (8017374 <tcp_input+0x52c>)
 8017330:	681a      	ldr	r2, [r3, #0]
 8017332:	697b      	ldr	r3, [r7, #20]
 8017334:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017336:	4a0f      	ldr	r2, [pc, #60]	@ (8017374 <tcp_input+0x52c>)
 8017338:	697b      	ldr	r3, [r7, #20]
 801733a:	6013      	str	r3, [r2, #0]
 801733c:	e024      	b.n	8017388 <tcp_input+0x540>
 801733e:	bf00      	nop
 8017340:	080230dc 	.word	0x080230dc
 8017344:	0802318c 	.word	0x0802318c
 8017348:	08023128 	.word	0x08023128
 801734c:	080231b4 	.word	0x080231b4
 8017350:	080231e0 	.word	0x080231e0
 8017354:	2001f0b0 	.word	0x2001f0b0
 8017358:	200253d0 	.word	0x200253d0
 801735c:	08023208 	.word	0x08023208
 8017360:	200253b4 	.word	0x200253b4
 8017364:	200252ac 	.word	0x200252ac
 8017368:	08023234 	.word	0x08023234
 801736c:	200253b8 	.word	0x200253b8
 8017370:	08023260 	.word	0x08023260
 8017374:	200253b0 	.word	0x200253b0
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017378:	4ba0      	ldr	r3, [pc, #640]	@ (80175fc <tcp_input+0x7b4>)
 801737a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801737e:	3301      	adds	r3, #1
 8017380:	b29a      	uxth	r2, r3
 8017382:	4b9e      	ldr	r3, [pc, #632]	@ (80175fc <tcp_input+0x7b4>)
 8017384:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017388:	6978      	ldr	r0, [r7, #20]
 801738a:	f000 fa05 	bl	8017798 <tcp_listen_input>
      }
      pbuf_free(p);
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	f7fd fcda 	bl	8014d48 <pbuf_free>
      return;
 8017394:	e1a9      	b.n	80176ea <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017396:	69fb      	ldr	r3, [r7, #28]
 8017398:	2b00      	cmp	r3, #0
 801739a:	f000 815f 	beq.w	801765c <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801739e:	4b98      	ldr	r3, [pc, #608]	@ (8017600 <tcp_input+0x7b8>)
 80173a0:	2200      	movs	r2, #0
 80173a2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	891a      	ldrh	r2, [r3, #8]
 80173a8:	4b95      	ldr	r3, [pc, #596]	@ (8017600 <tcp_input+0x7b8>)
 80173aa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80173ac:	4a94      	ldr	r2, [pc, #592]	@ (8017600 <tcp_input+0x7b8>)
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80173b2:	4b94      	ldr	r3, [pc, #592]	@ (8017604 <tcp_input+0x7bc>)
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	4a92      	ldr	r2, [pc, #584]	@ (8017600 <tcp_input+0x7b8>)
 80173b8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80173ba:	4b93      	ldr	r3, [pc, #588]	@ (8017608 <tcp_input+0x7c0>)
 80173bc:	2200      	movs	r2, #0
 80173be:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80173c0:	4b92      	ldr	r3, [pc, #584]	@ (801760c <tcp_input+0x7c4>)
 80173c2:	2200      	movs	r2, #0
 80173c4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80173c6:	4b92      	ldr	r3, [pc, #584]	@ (8017610 <tcp_input+0x7c8>)
 80173c8:	2200      	movs	r2, #0
 80173ca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80173cc:	4b91      	ldr	r3, [pc, #580]	@ (8017614 <tcp_input+0x7cc>)
 80173ce:	781b      	ldrb	r3, [r3, #0]
 80173d0:	f003 0308 	and.w	r3, r3, #8
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d006      	beq.n	80173e6 <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	7b5b      	ldrb	r3, [r3, #13]
 80173dc:	f043 0301 	orr.w	r3, r3, #1
 80173e0:	b2da      	uxtb	r2, r3
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80173e6:	69fb      	ldr	r3, [r7, #28]
 80173e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d01e      	beq.n	801742c <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80173ee:	69f8      	ldr	r0, [r7, #28]
 80173f0:	f7fe ffec 	bl	80163cc <tcp_process_refused_data>
 80173f4:	4603      	mov	r3, r0
 80173f6:	f113 0f0d 	cmn.w	r3, #13
 80173fa:	d007      	beq.n	801740c <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80173fc:	69fb      	ldr	r3, [r7, #28]
 80173fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017400:	2b00      	cmp	r3, #0
 8017402:	d013      	beq.n	801742c <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017404:	4b84      	ldr	r3, [pc, #528]	@ (8017618 <tcp_input+0x7d0>)
 8017406:	881b      	ldrh	r3, [r3, #0]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d00f      	beq.n	801742c <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801740c:	69fb      	ldr	r3, [r7, #28]
 801740e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017410:	2b00      	cmp	r3, #0
 8017412:	d102      	bne.n	801741a <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017414:	69f8      	ldr	r0, [r7, #28]
 8017416:	f003 fe6f 	bl	801b0f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 801741a:	4b78      	ldr	r3, [pc, #480]	@ (80175fc <tcp_input+0x7b4>)
 801741c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017420:	3301      	adds	r3, #1
 8017422:	b29a      	uxth	r2, r3
 8017424:	4b75      	ldr	r3, [pc, #468]	@ (80175fc <tcp_input+0x7b4>)
 8017426:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801742a:	e104      	b.n	8017636 <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 801742c:	4a7b      	ldr	r2, [pc, #492]	@ (801761c <tcp_input+0x7d4>)
 801742e:	69fb      	ldr	r3, [r7, #28]
 8017430:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017432:	69f8      	ldr	r0, [r7, #28]
 8017434:	f000 fb32 	bl	8017a9c <tcp_process>
 8017438:	4603      	mov	r3, r0
 801743a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801743c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017440:	f113 0f0d 	cmn.w	r3, #13
 8017444:	f000 80d1 	beq.w	80175ea <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8017448:	4b70      	ldr	r3, [pc, #448]	@ (801760c <tcp_input+0x7c4>)
 801744a:	781b      	ldrb	r3, [r3, #0]
 801744c:	f003 0308 	and.w	r3, r3, #8
 8017450:	2b00      	cmp	r3, #0
 8017452:	d015      	beq.n	8017480 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017454:	69fb      	ldr	r3, [r7, #28]
 8017456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801745a:	2b00      	cmp	r3, #0
 801745c:	d008      	beq.n	8017470 <tcp_input+0x628>
 801745e:	69fb      	ldr	r3, [r7, #28]
 8017460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017464:	69fa      	ldr	r2, [r7, #28]
 8017466:	6912      	ldr	r2, [r2, #16]
 8017468:	f06f 010d 	mvn.w	r1, #13
 801746c:	4610      	mov	r0, r2
 801746e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017470:	69f9      	ldr	r1, [r7, #28]
 8017472:	486b      	ldr	r0, [pc, #428]	@ (8017620 <tcp_input+0x7d8>)
 8017474:	f7ff fb70 	bl	8016b58 <tcp_pcb_remove>
        tcp_free(pcb);
 8017478:	69f8      	ldr	r0, [r7, #28]
 801747a:	f7fd ff29 	bl	80152d0 <tcp_free>
 801747e:	e0da      	b.n	8017636 <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 8017480:	2300      	movs	r3, #0
 8017482:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017484:	4b62      	ldr	r3, [pc, #392]	@ (8017610 <tcp_input+0x7c8>)
 8017486:	881b      	ldrh	r3, [r3, #0]
 8017488:	2b00      	cmp	r3, #0
 801748a:	d01d      	beq.n	80174c8 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801748c:	4b60      	ldr	r3, [pc, #384]	@ (8017610 <tcp_input+0x7c8>)
 801748e:	881b      	ldrh	r3, [r3, #0]
 8017490:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017492:	69fb      	ldr	r3, [r7, #28]
 8017494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017498:	2b00      	cmp	r3, #0
 801749a:	d00a      	beq.n	80174b2 <tcp_input+0x66a>
 801749c:	69fb      	ldr	r3, [r7, #28]
 801749e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80174a2:	69fa      	ldr	r2, [r7, #28]
 80174a4:	6910      	ldr	r0, [r2, #16]
 80174a6:	89fa      	ldrh	r2, [r7, #14]
 80174a8:	69f9      	ldr	r1, [r7, #28]
 80174aa:	4798      	blx	r3
 80174ac:	4603      	mov	r3, r0
 80174ae:	74fb      	strb	r3, [r7, #19]
 80174b0:	e001      	b.n	80174b6 <tcp_input+0x66e>
 80174b2:	2300      	movs	r3, #0
 80174b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80174b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174ba:	f113 0f0d 	cmn.w	r3, #13
 80174be:	f000 8096 	beq.w	80175ee <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 80174c2:	4b53      	ldr	r3, [pc, #332]	@ (8017610 <tcp_input+0x7c8>)
 80174c4:	2200      	movs	r2, #0
 80174c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80174c8:	69f8      	ldr	r0, [r7, #28]
 80174ca:	f000 f925 	bl	8017718 <tcp_input_delayed_close>
 80174ce:	4603      	mov	r3, r0
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	f040 808e 	bne.w	80175f2 <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80174d6:	4b4c      	ldr	r3, [pc, #304]	@ (8017608 <tcp_input+0x7c0>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d041      	beq.n	8017562 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80174de:	69fb      	ldr	r3, [r7, #28]
 80174e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d006      	beq.n	80174f4 <tcp_input+0x6ac>
 80174e6:	4b4f      	ldr	r3, [pc, #316]	@ (8017624 <tcp_input+0x7dc>)
 80174e8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80174ec:	494e      	ldr	r1, [pc, #312]	@ (8017628 <tcp_input+0x7e0>)
 80174ee:	484f      	ldr	r0, [pc, #316]	@ (801762c <tcp_input+0x7e4>)
 80174f0:	f008 feda 	bl	80202a8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80174f4:	69fb      	ldr	r3, [r7, #28]
 80174f6:	8b5b      	ldrh	r3, [r3, #26]
 80174f8:	f003 0310 	and.w	r3, r3, #16
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d008      	beq.n	8017512 <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017500:	4b41      	ldr	r3, [pc, #260]	@ (8017608 <tcp_input+0x7c0>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	4618      	mov	r0, r3
 8017506:	f7fd fc1f 	bl	8014d48 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801750a:	69f8      	ldr	r0, [r7, #28]
 801750c:	f7fe fa24 	bl	8015958 <tcp_abort>
            goto aborted;
 8017510:	e091      	b.n	8017636 <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017512:	69fb      	ldr	r3, [r7, #28]
 8017514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017518:	2b00      	cmp	r3, #0
 801751a:	d00c      	beq.n	8017536 <tcp_input+0x6ee>
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	6918      	ldr	r0, [r3, #16]
 8017526:	4b38      	ldr	r3, [pc, #224]	@ (8017608 <tcp_input+0x7c0>)
 8017528:	681a      	ldr	r2, [r3, #0]
 801752a:	2300      	movs	r3, #0
 801752c:	69f9      	ldr	r1, [r7, #28]
 801752e:	47a0      	blx	r4
 8017530:	4603      	mov	r3, r0
 8017532:	74fb      	strb	r3, [r7, #19]
 8017534:	e008      	b.n	8017548 <tcp_input+0x700>
 8017536:	4b34      	ldr	r3, [pc, #208]	@ (8017608 <tcp_input+0x7c0>)
 8017538:	681a      	ldr	r2, [r3, #0]
 801753a:	2300      	movs	r3, #0
 801753c:	69f9      	ldr	r1, [r7, #28]
 801753e:	2000      	movs	r0, #0
 8017540:	f7ff f81a 	bl	8016578 <tcp_recv_null>
 8017544:	4603      	mov	r3, r0
 8017546:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801754c:	f113 0f0d 	cmn.w	r3, #13
 8017550:	d051      	beq.n	80175f6 <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017552:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d003      	beq.n	8017562 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801755a:	4b2b      	ldr	r3, [pc, #172]	@ (8017608 <tcp_input+0x7c0>)
 801755c:	681a      	ldr	r2, [r3, #0]
 801755e:	69fb      	ldr	r3, [r7, #28]
 8017560:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017562:	4b2a      	ldr	r3, [pc, #168]	@ (801760c <tcp_input+0x7c4>)
 8017564:	781b      	ldrb	r3, [r3, #0]
 8017566:	f003 0320 	and.w	r3, r3, #32
 801756a:	2b00      	cmp	r3, #0
 801756c:	d030      	beq.n	80175d0 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017572:	2b00      	cmp	r3, #0
 8017574:	d009      	beq.n	801758a <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017576:	69fb      	ldr	r3, [r7, #28]
 8017578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801757a:	7b5a      	ldrb	r2, [r3, #13]
 801757c:	69fb      	ldr	r3, [r7, #28]
 801757e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017580:	f042 0220 	orr.w	r2, r2, #32
 8017584:	b2d2      	uxtb	r2, r2
 8017586:	735a      	strb	r2, [r3, #13]
 8017588:	e022      	b.n	80175d0 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801758e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8017592:	d005      	beq.n	80175a0 <tcp_input+0x758>
              pcb->rcv_wnd++;
 8017594:	69fb      	ldr	r3, [r7, #28]
 8017596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017598:	3301      	adds	r3, #1
 801759a:	b29a      	uxth	r2, r3
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80175a0:	69fb      	ldr	r3, [r7, #28]
 80175a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d00b      	beq.n	80175c2 <tcp_input+0x77a>
 80175aa:	69fb      	ldr	r3, [r7, #28]
 80175ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80175b0:	69fb      	ldr	r3, [r7, #28]
 80175b2:	6918      	ldr	r0, [r3, #16]
 80175b4:	2300      	movs	r3, #0
 80175b6:	2200      	movs	r2, #0
 80175b8:	69f9      	ldr	r1, [r7, #28]
 80175ba:	47a0      	blx	r4
 80175bc:	4603      	mov	r3, r0
 80175be:	74fb      	strb	r3, [r7, #19]
 80175c0:	e001      	b.n	80175c6 <tcp_input+0x77e>
 80175c2:	2300      	movs	r3, #0
 80175c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80175c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80175ca:	f113 0f0d 	cmn.w	r3, #13
 80175ce:	d02f      	beq.n	8017630 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80175d0:	4b12      	ldr	r3, [pc, #72]	@ (801761c <tcp_input+0x7d4>)
 80175d2:	2200      	movs	r2, #0
 80175d4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80175d6:	69f8      	ldr	r0, [r7, #28]
 80175d8:	f000 f89e 	bl	8017718 <tcp_input_delayed_close>
 80175dc:	4603      	mov	r3, r0
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d128      	bne.n	8017634 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80175e2:	69f8      	ldr	r0, [r7, #28]
 80175e4:	f002 ff6e 	bl	801a4c4 <tcp_output>
 80175e8:	e025      	b.n	8017636 <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80175ea:	bf00      	nop
 80175ec:	e023      	b.n	8017636 <tcp_input+0x7ee>
              goto aborted;
 80175ee:	bf00      	nop
 80175f0:	e021      	b.n	8017636 <tcp_input+0x7ee>
          goto aborted;
 80175f2:	bf00      	nop
 80175f4:	e01f      	b.n	8017636 <tcp_input+0x7ee>
            goto aborted;
 80175f6:	bf00      	nop
 80175f8:	e01d      	b.n	8017636 <tcp_input+0x7ee>
 80175fa:	bf00      	nop
 80175fc:	200252ac 	.word	0x200252ac
 8017600:	200253c0 	.word	0x200253c0
 8017604:	200253d0 	.word	0x200253d0
 8017608:	200253f0 	.word	0x200253f0
 801760c:	200253ed 	.word	0x200253ed
 8017610:	200253e8 	.word	0x200253e8
 8017614:	200253ec 	.word	0x200253ec
 8017618:	200253ea 	.word	0x200253ea
 801761c:	200253f4 	.word	0x200253f4
 8017620:	200253b4 	.word	0x200253b4
 8017624:	080230dc 	.word	0x080230dc
 8017628:	08023290 	.word	0x08023290
 801762c:	08023128 	.word	0x08023128
              goto aborted;
 8017630:	bf00      	nop
 8017632:	e000      	b.n	8017636 <tcp_input+0x7ee>
          goto aborted;
 8017634:	bf00      	nop
    tcp_input_pcb = NULL;
 8017636:	4b2e      	ldr	r3, [pc, #184]	@ (80176f0 <tcp_input+0x8a8>)
 8017638:	2200      	movs	r2, #0
 801763a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801763c:	4b2d      	ldr	r3, [pc, #180]	@ (80176f4 <tcp_input+0x8ac>)
 801763e:	2200      	movs	r2, #0
 8017640:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017642:	4b2d      	ldr	r3, [pc, #180]	@ (80176f8 <tcp_input+0x8b0>)
 8017644:	685b      	ldr	r3, [r3, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d04e      	beq.n	80176e8 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 801764a:	4b2b      	ldr	r3, [pc, #172]	@ (80176f8 <tcp_input+0x8b0>)
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	4618      	mov	r0, r3
 8017650:	f7fd fb7a 	bl	8014d48 <pbuf_free>
      inseg.p = NULL;
 8017654:	4b28      	ldr	r3, [pc, #160]	@ (80176f8 <tcp_input+0x8b0>)
 8017656:	2200      	movs	r2, #0
 8017658:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801765a:	e045      	b.n	80176e8 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801765c:	4b27      	ldr	r3, [pc, #156]	@ (80176fc <tcp_input+0x8b4>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	899b      	ldrh	r3, [r3, #12]
 8017662:	b29b      	uxth	r3, r3
 8017664:	4618      	mov	r0, r3
 8017666:	f7fb feb1 	bl	80133cc <lwip_htons>
 801766a:	4603      	mov	r3, r0
 801766c:	b2db      	uxtb	r3, r3
 801766e:	f003 0304 	and.w	r3, r3, #4
 8017672:	2b00      	cmp	r3, #0
 8017674:	d128      	bne.n	80176c8 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 8017676:	4b22      	ldr	r3, [pc, #136]	@ (8017700 <tcp_input+0x8b8>)
 8017678:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 801767c:	3301      	adds	r3, #1
 801767e:	b29a      	uxth	r2, r3
 8017680:	4b1f      	ldr	r3, [pc, #124]	@ (8017700 <tcp_input+0x8b8>)
 8017682:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 8017686:	4b1e      	ldr	r3, [pc, #120]	@ (8017700 <tcp_input+0x8b8>)
 8017688:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801768c:	3301      	adds	r3, #1
 801768e:	b29a      	uxth	r2, r3
 8017690:	4b1b      	ldr	r3, [pc, #108]	@ (8017700 <tcp_input+0x8b8>)
 8017692:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017696:	4b1b      	ldr	r3, [pc, #108]	@ (8017704 <tcp_input+0x8bc>)
 8017698:	6819      	ldr	r1, [r3, #0]
 801769a:	4b1b      	ldr	r3, [pc, #108]	@ (8017708 <tcp_input+0x8c0>)
 801769c:	881b      	ldrh	r3, [r3, #0]
 801769e:	461a      	mov	r2, r3
 80176a0:	4b1a      	ldr	r3, [pc, #104]	@ (801770c <tcp_input+0x8c4>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176a6:	4b15      	ldr	r3, [pc, #84]	@ (80176fc <tcp_input+0x8b4>)
 80176a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176aa:	885b      	ldrh	r3, [r3, #2]
 80176ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176ae:	4a13      	ldr	r2, [pc, #76]	@ (80176fc <tcp_input+0x8b4>)
 80176b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176b2:	8812      	ldrh	r2, [r2, #0]
 80176b4:	b292      	uxth	r2, r2
 80176b6:	9202      	str	r2, [sp, #8]
 80176b8:	9301      	str	r3, [sp, #4]
 80176ba:	4b15      	ldr	r3, [pc, #84]	@ (8017710 <tcp_input+0x8c8>)
 80176bc:	9300      	str	r3, [sp, #0]
 80176be:	4b15      	ldr	r3, [pc, #84]	@ (8017714 <tcp_input+0x8cc>)
 80176c0:	4602      	mov	r2, r0
 80176c2:	2000      	movs	r0, #0
 80176c4:	f003 fcc6 	bl	801b054 <tcp_rst>
    pbuf_free(p);
 80176c8:	6878      	ldr	r0, [r7, #4]
 80176ca:	f7fd fb3d 	bl	8014d48 <pbuf_free>
  return;
 80176ce:	e00b      	b.n	80176e8 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 80176d0:	4b0b      	ldr	r3, [pc, #44]	@ (8017700 <tcp_input+0x8b8>)
 80176d2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80176d6:	3301      	adds	r3, #1
 80176d8:	b29a      	uxth	r2, r3
 80176da:	4b09      	ldr	r3, [pc, #36]	@ (8017700 <tcp_input+0x8b8>)
 80176dc:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f7fd fb31 	bl	8014d48 <pbuf_free>
 80176e6:	e000      	b.n	80176ea <tcp_input+0x8a2>
  return;
 80176e8:	bf00      	nop
}
 80176ea:	3724      	adds	r7, #36	@ 0x24
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd90      	pop	{r4, r7, pc}
 80176f0:	200253f4 	.word	0x200253f4
 80176f4:	200253f0 	.word	0x200253f0
 80176f8:	200253c0 	.word	0x200253c0
 80176fc:	200253d0 	.word	0x200253d0
 8017700:	200252ac 	.word	0x200252ac
 8017704:	200253e4 	.word	0x200253e4
 8017708:	200253ea 	.word	0x200253ea
 801770c:	200253e0 	.word	0x200253e0
 8017710:	2001f0c0 	.word	0x2001f0c0
 8017714:	2001f0c4 	.word	0x2001f0c4

08017718 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d106      	bne.n	8017734 <tcp_input_delayed_close+0x1c>
 8017726:	4b17      	ldr	r3, [pc, #92]	@ (8017784 <tcp_input_delayed_close+0x6c>)
 8017728:	f240 225a 	movw	r2, #602	@ 0x25a
 801772c:	4916      	ldr	r1, [pc, #88]	@ (8017788 <tcp_input_delayed_close+0x70>)
 801772e:	4817      	ldr	r0, [pc, #92]	@ (801778c <tcp_input_delayed_close+0x74>)
 8017730:	f008 fdba 	bl	80202a8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017734:	4b16      	ldr	r3, [pc, #88]	@ (8017790 <tcp_input_delayed_close+0x78>)
 8017736:	781b      	ldrb	r3, [r3, #0]
 8017738:	f003 0310 	and.w	r3, r3, #16
 801773c:	2b00      	cmp	r3, #0
 801773e:	d01c      	beq.n	801777a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	8b5b      	ldrh	r3, [r3, #26]
 8017744:	f003 0310 	and.w	r3, r3, #16
 8017748:	2b00      	cmp	r3, #0
 801774a:	d10d      	bne.n	8017768 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017752:	2b00      	cmp	r3, #0
 8017754:	d008      	beq.n	8017768 <tcp_input_delayed_close+0x50>
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	6912      	ldr	r2, [r2, #16]
 8017760:	f06f 010e 	mvn.w	r1, #14
 8017764:	4610      	mov	r0, r2
 8017766:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017768:	6879      	ldr	r1, [r7, #4]
 801776a:	480a      	ldr	r0, [pc, #40]	@ (8017794 <tcp_input_delayed_close+0x7c>)
 801776c:	f7ff f9f4 	bl	8016b58 <tcp_pcb_remove>
    tcp_free(pcb);
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f7fd fdad 	bl	80152d0 <tcp_free>
    return 1;
 8017776:	2301      	movs	r3, #1
 8017778:	e000      	b.n	801777c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801777a:	2300      	movs	r3, #0
}
 801777c:	4618      	mov	r0, r3
 801777e:	3708      	adds	r7, #8
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}
 8017784:	080230dc 	.word	0x080230dc
 8017788:	080232ac 	.word	0x080232ac
 801778c:	08023128 	.word	0x08023128
 8017790:	200253ed 	.word	0x200253ed
 8017794:	200253b4 	.word	0x200253b4

08017798 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017798:	b590      	push	{r4, r7, lr}
 801779a:	b08b      	sub	sp, #44	@ 0x2c
 801779c:	af04      	add	r7, sp, #16
 801779e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80177a0:	4b73      	ldr	r3, [pc, #460]	@ (8017970 <tcp_listen_input+0x1d8>)
 80177a2:	781b      	ldrb	r3, [r3, #0]
 80177a4:	f003 0304 	and.w	r3, r3, #4
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f040 80da 	bne.w	8017962 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d106      	bne.n	80177c2 <tcp_listen_input+0x2a>
 80177b4:	4b6f      	ldr	r3, [pc, #444]	@ (8017974 <tcp_listen_input+0x1dc>)
 80177b6:	f240 2281 	movw	r2, #641	@ 0x281
 80177ba:	496f      	ldr	r1, [pc, #444]	@ (8017978 <tcp_listen_input+0x1e0>)
 80177bc:	486f      	ldr	r0, [pc, #444]	@ (801797c <tcp_listen_input+0x1e4>)
 80177be:	f008 fd73 	bl	80202a8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80177c2:	4b6b      	ldr	r3, [pc, #428]	@ (8017970 <tcp_listen_input+0x1d8>)
 80177c4:	781b      	ldrb	r3, [r3, #0]
 80177c6:	f003 0310 	and.w	r3, r3, #16
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d019      	beq.n	8017802 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177ce:	4b6c      	ldr	r3, [pc, #432]	@ (8017980 <tcp_listen_input+0x1e8>)
 80177d0:	6819      	ldr	r1, [r3, #0]
 80177d2:	4b6c      	ldr	r3, [pc, #432]	@ (8017984 <tcp_listen_input+0x1ec>)
 80177d4:	881b      	ldrh	r3, [r3, #0]
 80177d6:	461a      	mov	r2, r3
 80177d8:	4b6b      	ldr	r3, [pc, #428]	@ (8017988 <tcp_listen_input+0x1f0>)
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177de:	4b6b      	ldr	r3, [pc, #428]	@ (801798c <tcp_listen_input+0x1f4>)
 80177e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177e2:	885b      	ldrh	r3, [r3, #2]
 80177e4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177e6:	4a69      	ldr	r2, [pc, #420]	@ (801798c <tcp_listen_input+0x1f4>)
 80177e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177ea:	8812      	ldrh	r2, [r2, #0]
 80177ec:	b292      	uxth	r2, r2
 80177ee:	9202      	str	r2, [sp, #8]
 80177f0:	9301      	str	r3, [sp, #4]
 80177f2:	4b67      	ldr	r3, [pc, #412]	@ (8017990 <tcp_listen_input+0x1f8>)
 80177f4:	9300      	str	r3, [sp, #0]
 80177f6:	4b67      	ldr	r3, [pc, #412]	@ (8017994 <tcp_listen_input+0x1fc>)
 80177f8:	4602      	mov	r2, r0
 80177fa:	6878      	ldr	r0, [r7, #4]
 80177fc:	f003 fc2a 	bl	801b054 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017800:	e0b1      	b.n	8017966 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 8017802:	4b5b      	ldr	r3, [pc, #364]	@ (8017970 <tcp_listen_input+0x1d8>)
 8017804:	781b      	ldrb	r3, [r3, #0]
 8017806:	f003 0302 	and.w	r3, r3, #2
 801780a:	2b00      	cmp	r3, #0
 801780c:	f000 80ab 	beq.w	8017966 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	7d5b      	ldrb	r3, [r3, #21]
 8017814:	4618      	mov	r0, r3
 8017816:	f7fe ffd3 	bl	80167c0 <tcp_alloc>
 801781a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801781c:	697b      	ldr	r3, [r7, #20]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d119      	bne.n	8017856 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8017822:	4b5d      	ldr	r3, [pc, #372]	@ (8017998 <tcp_listen_input+0x200>)
 8017824:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8017828:	3301      	adds	r3, #1
 801782a:	b29a      	uxth	r2, r3
 801782c:	4b5a      	ldr	r3, [pc, #360]	@ (8017998 <tcp_listen_input+0x200>)
 801782e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	699b      	ldr	r3, [r3, #24]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d00a      	beq.n	8017850 <tcp_listen_input+0xb8>
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	699b      	ldr	r3, [r3, #24]
 801783e:	687a      	ldr	r2, [r7, #4]
 8017840:	6910      	ldr	r0, [r2, #16]
 8017842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017846:	2100      	movs	r1, #0
 8017848:	4798      	blx	r3
 801784a:	4603      	mov	r3, r0
 801784c:	73bb      	strb	r3, [r7, #14]
      return;
 801784e:	e08b      	b.n	8017968 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017850:	23f0      	movs	r3, #240	@ 0xf0
 8017852:	73bb      	strb	r3, [r7, #14]
      return;
 8017854:	e088      	b.n	8017968 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017856:	4b51      	ldr	r3, [pc, #324]	@ (801799c <tcp_listen_input+0x204>)
 8017858:	695a      	ldr	r2, [r3, #20]
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801785e:	4b4f      	ldr	r3, [pc, #316]	@ (801799c <tcp_listen_input+0x204>)
 8017860:	691a      	ldr	r2, [r3, #16]
 8017862:	697b      	ldr	r3, [r7, #20]
 8017864:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	8ada      	ldrh	r2, [r3, #22]
 801786a:	697b      	ldr	r3, [r7, #20]
 801786c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801786e:	4b47      	ldr	r3, [pc, #284]	@ (801798c <tcp_listen_input+0x1f4>)
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	881b      	ldrh	r3, [r3, #0]
 8017874:	b29a      	uxth	r2, r3
 8017876:	697b      	ldr	r3, [r7, #20]
 8017878:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	2203      	movs	r2, #3
 801787e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017880:	4b41      	ldr	r3, [pc, #260]	@ (8017988 <tcp_listen_input+0x1f0>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	1c5a      	adds	r2, r3, #1
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801788e:	697b      	ldr	r3, [r7, #20]
 8017890:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8017892:	6978      	ldr	r0, [r7, #20]
 8017894:	f7ff f9f4 	bl	8016c80 <tcp_next_iss>
 8017898:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	693a      	ldr	r2, [r7, #16]
 801789e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80178a0:	697b      	ldr	r3, [r7, #20]
 80178a2:	693a      	ldr	r2, [r7, #16]
 80178a4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80178a6:	697b      	ldr	r3, [r7, #20]
 80178a8:	693a      	ldr	r2, [r7, #16]
 80178aa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80178ac:	697b      	ldr	r3, [r7, #20]
 80178ae:	693a      	ldr	r2, [r7, #16]
 80178b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80178b2:	4b35      	ldr	r3, [pc, #212]	@ (8017988 <tcp_listen_input+0x1f0>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	1e5a      	subs	r2, r3, #1
 80178b8:	697b      	ldr	r3, [r7, #20]
 80178ba:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	691a      	ldr	r2, [r3, #16]
 80178c0:	697b      	ldr	r3, [r7, #20]
 80178c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	687a      	ldr	r2, [r7, #4]
 80178c8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	7a5b      	ldrb	r3, [r3, #9]
 80178ce:	f003 030c 	and.w	r3, r3, #12
 80178d2:	b2da      	uxtb	r2, r3
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	7a1a      	ldrb	r2, [r3, #8]
 80178dc:	697b      	ldr	r3, [r7, #20]
 80178de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80178e0:	4b2f      	ldr	r3, [pc, #188]	@ (80179a0 <tcp_listen_input+0x208>)
 80178e2:	681a      	ldr	r2, [r3, #0]
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	60da      	str	r2, [r3, #12]
 80178e8:	4a2d      	ldr	r2, [pc, #180]	@ (80179a0 <tcp_listen_input+0x208>)
 80178ea:	697b      	ldr	r3, [r7, #20]
 80178ec:	6013      	str	r3, [r2, #0]
 80178ee:	f003 fd73 	bl	801b3d8 <tcp_timer_needed>
 80178f2:	4b2c      	ldr	r3, [pc, #176]	@ (80179a4 <tcp_listen_input+0x20c>)
 80178f4:	2201      	movs	r2, #1
 80178f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80178f8:	6978      	ldr	r0, [r7, #20]
 80178fa:	f001 fd8d 	bl	8019418 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80178fe:	4b23      	ldr	r3, [pc, #140]	@ (801798c <tcp_listen_input+0x1f4>)
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	89db      	ldrh	r3, [r3, #14]
 8017904:	b29a      	uxth	r2, r3
 8017906:	697b      	ldr	r3, [r7, #20]
 8017908:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801790c:	697b      	ldr	r3, [r7, #20]
 801790e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801791c:	697b      	ldr	r3, [r7, #20]
 801791e:	3304      	adds	r3, #4
 8017920:	4618      	mov	r0, r3
 8017922:	f005 fd63 	bl	801d3ec <ip4_route>
 8017926:	4601      	mov	r1, r0
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	3304      	adds	r3, #4
 801792c:	461a      	mov	r2, r3
 801792e:	4620      	mov	r0, r4
 8017930:	f7ff f9cc 	bl	8016ccc <tcp_eff_send_mss_netif>
 8017934:	4603      	mov	r3, r0
 8017936:	461a      	mov	r2, r3
 8017938:	697b      	ldr	r3, [r7, #20]
 801793a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801793c:	2112      	movs	r1, #18
 801793e:	6978      	ldr	r0, [r7, #20]
 8017940:	f002 fcc0 	bl	801a2c4 <tcp_enqueue_flags>
 8017944:	4603      	mov	r3, r0
 8017946:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d004      	beq.n	801795a <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8017950:	2100      	movs	r1, #0
 8017952:	6978      	ldr	r0, [r7, #20]
 8017954:	f7fd ff42 	bl	80157dc <tcp_abandon>
      return;
 8017958:	e006      	b.n	8017968 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 801795a:	6978      	ldr	r0, [r7, #20]
 801795c:	f002 fdb2 	bl	801a4c4 <tcp_output>
  return;
 8017960:	e001      	b.n	8017966 <tcp_listen_input+0x1ce>
    return;
 8017962:	bf00      	nop
 8017964:	e000      	b.n	8017968 <tcp_listen_input+0x1d0>
  return;
 8017966:	bf00      	nop
}
 8017968:	371c      	adds	r7, #28
 801796a:	46bd      	mov	sp, r7
 801796c:	bd90      	pop	{r4, r7, pc}
 801796e:	bf00      	nop
 8017970:	200253ec 	.word	0x200253ec
 8017974:	080230dc 	.word	0x080230dc
 8017978:	080232d4 	.word	0x080232d4
 801797c:	08023128 	.word	0x08023128
 8017980:	200253e4 	.word	0x200253e4
 8017984:	200253ea 	.word	0x200253ea
 8017988:	200253e0 	.word	0x200253e0
 801798c:	200253d0 	.word	0x200253d0
 8017990:	2001f0c0 	.word	0x2001f0c0
 8017994:	2001f0c4 	.word	0x2001f0c4
 8017998:	200252ac 	.word	0x200252ac
 801799c:	2001f0b0 	.word	0x2001f0b0
 80179a0:	200253b4 	.word	0x200253b4
 80179a4:	200253bc 	.word	0x200253bc

080179a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b086      	sub	sp, #24
 80179ac:	af04      	add	r7, sp, #16
 80179ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80179b0:	4b2f      	ldr	r3, [pc, #188]	@ (8017a70 <tcp_timewait_input+0xc8>)
 80179b2:	781b      	ldrb	r3, [r3, #0]
 80179b4:	f003 0304 	and.w	r3, r3, #4
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d153      	bne.n	8017a64 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d106      	bne.n	80179d0 <tcp_timewait_input+0x28>
 80179c2:	4b2c      	ldr	r3, [pc, #176]	@ (8017a74 <tcp_timewait_input+0xcc>)
 80179c4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80179c8:	492b      	ldr	r1, [pc, #172]	@ (8017a78 <tcp_timewait_input+0xd0>)
 80179ca:	482c      	ldr	r0, [pc, #176]	@ (8017a7c <tcp_timewait_input+0xd4>)
 80179cc:	f008 fc6c 	bl	80202a8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80179d0:	4b27      	ldr	r3, [pc, #156]	@ (8017a70 <tcp_timewait_input+0xc8>)
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	f003 0302 	and.w	r3, r3, #2
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d02a      	beq.n	8017a32 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80179dc:	4b28      	ldr	r3, [pc, #160]	@ (8017a80 <tcp_timewait_input+0xd8>)
 80179de:	681a      	ldr	r2, [r3, #0]
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179e4:	1ad3      	subs	r3, r2, r3
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	db2d      	blt.n	8017a46 <tcp_timewait_input+0x9e>
 80179ea:	4b25      	ldr	r3, [pc, #148]	@ (8017a80 <tcp_timewait_input+0xd8>)
 80179ec:	681a      	ldr	r2, [r3, #0]
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179f2:	6879      	ldr	r1, [r7, #4]
 80179f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80179f6:	440b      	add	r3, r1
 80179f8:	1ad3      	subs	r3, r2, r3
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	dc23      	bgt.n	8017a46 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80179fe:	4b21      	ldr	r3, [pc, #132]	@ (8017a84 <tcp_timewait_input+0xdc>)
 8017a00:	6819      	ldr	r1, [r3, #0]
 8017a02:	4b21      	ldr	r3, [pc, #132]	@ (8017a88 <tcp_timewait_input+0xe0>)
 8017a04:	881b      	ldrh	r3, [r3, #0]
 8017a06:	461a      	mov	r2, r3
 8017a08:	4b1d      	ldr	r3, [pc, #116]	@ (8017a80 <tcp_timewait_input+0xd8>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8017a8c <tcp_timewait_input+0xe4>)
 8017a10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a12:	885b      	ldrh	r3, [r3, #2]
 8017a14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a16:	4a1d      	ldr	r2, [pc, #116]	@ (8017a8c <tcp_timewait_input+0xe4>)
 8017a18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a1a:	8812      	ldrh	r2, [r2, #0]
 8017a1c:	b292      	uxth	r2, r2
 8017a1e:	9202      	str	r2, [sp, #8]
 8017a20:	9301      	str	r3, [sp, #4]
 8017a22:	4b1b      	ldr	r3, [pc, #108]	@ (8017a90 <tcp_timewait_input+0xe8>)
 8017a24:	9300      	str	r3, [sp, #0]
 8017a26:	4b1b      	ldr	r3, [pc, #108]	@ (8017a94 <tcp_timewait_input+0xec>)
 8017a28:	4602      	mov	r2, r0
 8017a2a:	6878      	ldr	r0, [r7, #4]
 8017a2c:	f003 fb12 	bl	801b054 <tcp_rst>
      return;
 8017a30:	e01b      	b.n	8017a6a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017a32:	4b0f      	ldr	r3, [pc, #60]	@ (8017a70 <tcp_timewait_input+0xc8>)
 8017a34:	781b      	ldrb	r3, [r3, #0]
 8017a36:	f003 0301 	and.w	r3, r3, #1
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d003      	beq.n	8017a46 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017a3e:	4b16      	ldr	r3, [pc, #88]	@ (8017a98 <tcp_timewait_input+0xf0>)
 8017a40:	681a      	ldr	r2, [r3, #0]
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017a46:	4b10      	ldr	r3, [pc, #64]	@ (8017a88 <tcp_timewait_input+0xe0>)
 8017a48:	881b      	ldrh	r3, [r3, #0]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d00c      	beq.n	8017a68 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	8b5b      	ldrh	r3, [r3, #26]
 8017a52:	f043 0302 	orr.w	r3, r3, #2
 8017a56:	b29a      	uxth	r2, r3
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f002 fd31 	bl	801a4c4 <tcp_output>
  }
  return;
 8017a62:	e001      	b.n	8017a68 <tcp_timewait_input+0xc0>
    return;
 8017a64:	bf00      	nop
 8017a66:	e000      	b.n	8017a6a <tcp_timewait_input+0xc2>
  return;
 8017a68:	bf00      	nop
}
 8017a6a:	3708      	adds	r7, #8
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}
 8017a70:	200253ec 	.word	0x200253ec
 8017a74:	080230dc 	.word	0x080230dc
 8017a78:	080232f4 	.word	0x080232f4
 8017a7c:	08023128 	.word	0x08023128
 8017a80:	200253e0 	.word	0x200253e0
 8017a84:	200253e4 	.word	0x200253e4
 8017a88:	200253ea 	.word	0x200253ea
 8017a8c:	200253d0 	.word	0x200253d0
 8017a90:	2001f0c0 	.word	0x2001f0c0
 8017a94:	2001f0c4 	.word	0x2001f0c4
 8017a98:	200253a8 	.word	0x200253a8

08017a9c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017a9c:	b590      	push	{r4, r7, lr}
 8017a9e:	b08d      	sub	sp, #52	@ 0x34
 8017aa0:	af04      	add	r7, sp, #16
 8017aa2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d106      	bne.n	8017ac0 <tcp_process+0x24>
 8017ab2:	4b9d      	ldr	r3, [pc, #628]	@ (8017d28 <tcp_process+0x28c>)
 8017ab4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8017ab8:	499c      	ldr	r1, [pc, #624]	@ (8017d2c <tcp_process+0x290>)
 8017aba:	489d      	ldr	r0, [pc, #628]	@ (8017d30 <tcp_process+0x294>)
 8017abc:	f008 fbf4 	bl	80202a8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017ac0:	4b9c      	ldr	r3, [pc, #624]	@ (8017d34 <tcp_process+0x298>)
 8017ac2:	781b      	ldrb	r3, [r3, #0]
 8017ac4:	f003 0304 	and.w	r3, r3, #4
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d04e      	beq.n	8017b6a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	7d1b      	ldrb	r3, [r3, #20]
 8017ad0:	2b02      	cmp	r3, #2
 8017ad2:	d108      	bne.n	8017ae6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ad8:	4b97      	ldr	r3, [pc, #604]	@ (8017d38 <tcp_process+0x29c>)
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	d123      	bne.n	8017b28 <tcp_process+0x8c>
        acceptable = 1;
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	76fb      	strb	r3, [r7, #27]
 8017ae4:	e020      	b.n	8017b28 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017aea:	4b94      	ldr	r3, [pc, #592]	@ (8017d3c <tcp_process+0x2a0>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d102      	bne.n	8017af8 <tcp_process+0x5c>
        acceptable = 1;
 8017af2:	2301      	movs	r3, #1
 8017af4:	76fb      	strb	r3, [r7, #27]
 8017af6:	e017      	b.n	8017b28 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017af8:	4b90      	ldr	r3, [pc, #576]	@ (8017d3c <tcp_process+0x2a0>)
 8017afa:	681a      	ldr	r2, [r3, #0]
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b00:	1ad3      	subs	r3, r2, r3
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	db10      	blt.n	8017b28 <tcp_process+0x8c>
 8017b06:	4b8d      	ldr	r3, [pc, #564]	@ (8017d3c <tcp_process+0x2a0>)
 8017b08:	681a      	ldr	r2, [r3, #0]
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b0e:	6879      	ldr	r1, [r7, #4]
 8017b10:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017b12:	440b      	add	r3, r1
 8017b14:	1ad3      	subs	r3, r2, r3
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	dc06      	bgt.n	8017b28 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	8b5b      	ldrh	r3, [r3, #26]
 8017b1e:	f043 0302 	orr.w	r3, r3, #2
 8017b22:	b29a      	uxth	r2, r3
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017b28:	7efb      	ldrb	r3, [r7, #27]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d01b      	beq.n	8017b66 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	7d1b      	ldrb	r3, [r3, #20]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d106      	bne.n	8017b44 <tcp_process+0xa8>
 8017b36:	4b7c      	ldr	r3, [pc, #496]	@ (8017d28 <tcp_process+0x28c>)
 8017b38:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8017b3c:	4980      	ldr	r1, [pc, #512]	@ (8017d40 <tcp_process+0x2a4>)
 8017b3e:	487c      	ldr	r0, [pc, #496]	@ (8017d30 <tcp_process+0x294>)
 8017b40:	f008 fbb2 	bl	80202a8 <iprintf>
      recv_flags |= TF_RESET;
 8017b44:	4b7f      	ldr	r3, [pc, #508]	@ (8017d44 <tcp_process+0x2a8>)
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	f043 0308 	orr.w	r3, r3, #8
 8017b4c:	b2da      	uxtb	r2, r3
 8017b4e:	4b7d      	ldr	r3, [pc, #500]	@ (8017d44 <tcp_process+0x2a8>)
 8017b50:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	8b5b      	ldrh	r3, [r3, #26]
 8017b56:	f023 0301 	bic.w	r3, r3, #1
 8017b5a:	b29a      	uxth	r2, r3
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017b60:	f06f 030d 	mvn.w	r3, #13
 8017b64:	e37a      	b.n	801825c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017b66:	2300      	movs	r3, #0
 8017b68:	e378      	b.n	801825c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017b6a:	4b72      	ldr	r3, [pc, #456]	@ (8017d34 <tcp_process+0x298>)
 8017b6c:	781b      	ldrb	r3, [r3, #0]
 8017b6e:	f003 0302 	and.w	r3, r3, #2
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d010      	beq.n	8017b98 <tcp_process+0xfc>
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	7d1b      	ldrb	r3, [r3, #20]
 8017b7a:	2b02      	cmp	r3, #2
 8017b7c:	d00c      	beq.n	8017b98 <tcp_process+0xfc>
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	7d1b      	ldrb	r3, [r3, #20]
 8017b82:	2b03      	cmp	r3, #3
 8017b84:	d008      	beq.n	8017b98 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	8b5b      	ldrh	r3, [r3, #26]
 8017b8a:	f043 0302 	orr.w	r3, r3, #2
 8017b8e:	b29a      	uxth	r2, r3
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017b94:	2300      	movs	r3, #0
 8017b96:	e361      	b.n	801825c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	8b5b      	ldrh	r3, [r3, #26]
 8017b9c:	f003 0310 	and.w	r3, r3, #16
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d103      	bne.n	8017bac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017ba4:	4b68      	ldr	r3, [pc, #416]	@ (8017d48 <tcp_process+0x2ac>)
 8017ba6:	681a      	ldr	r2, [r3, #0]
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	2200      	movs	r2, #0
 8017bb0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8017bbc:	6878      	ldr	r0, [r7, #4]
 8017bbe:	f001 fc2b 	bl	8019418 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	7d1b      	ldrb	r3, [r3, #20]
 8017bc6:	3b02      	subs	r3, #2
 8017bc8:	2b07      	cmp	r3, #7
 8017bca:	f200 8337 	bhi.w	801823c <tcp_process+0x7a0>
 8017bce:	a201      	add	r2, pc, #4	@ (adr r2, 8017bd4 <tcp_process+0x138>)
 8017bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bd4:	08017bf5 	.word	0x08017bf5
 8017bd8:	08017e25 	.word	0x08017e25
 8017bdc:	08017f9d 	.word	0x08017f9d
 8017be0:	08017fc7 	.word	0x08017fc7
 8017be4:	080180eb 	.word	0x080180eb
 8017be8:	08017f9d 	.word	0x08017f9d
 8017bec:	08018177 	.word	0x08018177
 8017bf0:	08018207 	.word	0x08018207
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8017d34 <tcp_process+0x298>)
 8017bf6:	781b      	ldrb	r3, [r3, #0]
 8017bf8:	f003 0310 	and.w	r3, r3, #16
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	f000 80e4 	beq.w	8017dca <tcp_process+0x32e>
 8017c02:	4b4c      	ldr	r3, [pc, #304]	@ (8017d34 <tcp_process+0x298>)
 8017c04:	781b      	ldrb	r3, [r3, #0]
 8017c06:	f003 0302 	and.w	r3, r3, #2
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	f000 80dd 	beq.w	8017dca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c14:	1c5a      	adds	r2, r3, #1
 8017c16:	4b48      	ldr	r3, [pc, #288]	@ (8017d38 <tcp_process+0x29c>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	429a      	cmp	r2, r3
 8017c1c:	f040 80d5 	bne.w	8017dca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017c20:	4b46      	ldr	r3, [pc, #280]	@ (8017d3c <tcp_process+0x2a0>)
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	1c5a      	adds	r2, r3, #1
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8017c32:	4b41      	ldr	r3, [pc, #260]	@ (8017d38 <tcp_process+0x29c>)
 8017c34:	681a      	ldr	r2, [r3, #0]
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017c3a:	4b44      	ldr	r3, [pc, #272]	@ (8017d4c <tcp_process+0x2b0>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	89db      	ldrh	r3, [r3, #14]
 8017c40:	b29a      	uxth	r2, r3
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017c54:	4b39      	ldr	r3, [pc, #228]	@ (8017d3c <tcp_process+0x2a0>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	1e5a      	subs	r2, r3, #1
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	2204      	movs	r2, #4
 8017c62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	3304      	adds	r3, #4
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f005 fbbd 	bl	801d3ec <ip4_route>
 8017c72:	4601      	mov	r1, r0
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	3304      	adds	r3, #4
 8017c78:	461a      	mov	r2, r3
 8017c7a:	4620      	mov	r0, r4
 8017c7c:	f7ff f826 	bl	8016ccc <tcp_eff_send_mss_netif>
 8017c80:	4603      	mov	r3, r0
 8017c82:	461a      	mov	r2, r3
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c8c:	009a      	lsls	r2, r3, #2
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c92:	005b      	lsls	r3, r3, #1
 8017c94:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017c98:	428b      	cmp	r3, r1
 8017c9a:	bf38      	it	cc
 8017c9c:	460b      	movcc	r3, r1
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d204      	bcs.n	8017cac <tcp_process+0x210>
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	b29b      	uxth	r3, r3
 8017caa:	e00d      	b.n	8017cc8 <tcp_process+0x22c>
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017cb0:	005b      	lsls	r3, r3, #1
 8017cb2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	d904      	bls.n	8017cc4 <tcp_process+0x228>
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017cbe:	005b      	lsls	r3, r3, #1
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	e001      	b.n	8017cc8 <tcp_process+0x22c>
 8017cc4:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017cc8:	687a      	ldr	r2, [r7, #4]
 8017cca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d106      	bne.n	8017ce6 <tcp_process+0x24a>
 8017cd8:	4b13      	ldr	r3, [pc, #76]	@ (8017d28 <tcp_process+0x28c>)
 8017cda:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8017cde:	491c      	ldr	r1, [pc, #112]	@ (8017d50 <tcp_process+0x2b4>)
 8017ce0:	4813      	ldr	r0, [pc, #76]	@ (8017d30 <tcp_process+0x294>)
 8017ce2:	f008 fae1 	bl	80202a8 <iprintf>
        --pcb->snd_queuelen;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017cec:	3b01      	subs	r3, #1
 8017cee:	b29a      	uxth	r2, r3
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017cfa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017cfc:	69fb      	ldr	r3, [r7, #28]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d12a      	bne.n	8017d58 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d06:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017d08:	69fb      	ldr	r3, [r7, #28]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d106      	bne.n	8017d1c <tcp_process+0x280>
 8017d0e:	4b06      	ldr	r3, [pc, #24]	@ (8017d28 <tcp_process+0x28c>)
 8017d10:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017d14:	490f      	ldr	r1, [pc, #60]	@ (8017d54 <tcp_process+0x2b8>)
 8017d16:	4806      	ldr	r0, [pc, #24]	@ (8017d30 <tcp_process+0x294>)
 8017d18:	f008 fac6 	bl	80202a8 <iprintf>
          pcb->unsent = rseg->next;
 8017d1c:	69fb      	ldr	r3, [r7, #28]
 8017d1e:	681a      	ldr	r2, [r3, #0]
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017d24:	e01c      	b.n	8017d60 <tcp_process+0x2c4>
 8017d26:	bf00      	nop
 8017d28:	080230dc 	.word	0x080230dc
 8017d2c:	08023314 	.word	0x08023314
 8017d30:	08023128 	.word	0x08023128
 8017d34:	200253ec 	.word	0x200253ec
 8017d38:	200253e4 	.word	0x200253e4
 8017d3c:	200253e0 	.word	0x200253e0
 8017d40:	08023330 	.word	0x08023330
 8017d44:	200253ed 	.word	0x200253ed
 8017d48:	200253a8 	.word	0x200253a8
 8017d4c:	200253d0 	.word	0x200253d0
 8017d50:	08023350 	.word	0x08023350
 8017d54:	08023368 	.word	0x08023368
        } else {
          pcb->unacked = rseg->next;
 8017d58:	69fb      	ldr	r3, [r7, #28]
 8017d5a:	681a      	ldr	r2, [r3, #0]
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017d60:	69f8      	ldr	r0, [r7, #28]
 8017d62:	f7fe fbc4 	bl	80164ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d104      	bne.n	8017d78 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d74:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017d76:	e006      	b.n	8017d86 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	2200      	movs	r2, #0
 8017d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d00a      	beq.n	8017da6 <tcp_process+0x30a>
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d96:	687a      	ldr	r2, [r7, #4]
 8017d98:	6910      	ldr	r0, [r2, #16]
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	6879      	ldr	r1, [r7, #4]
 8017d9e:	4798      	blx	r3
 8017da0:	4603      	mov	r3, r0
 8017da2:	76bb      	strb	r3, [r7, #26]
 8017da4:	e001      	b.n	8017daa <tcp_process+0x30e>
 8017da6:	2300      	movs	r3, #0
 8017da8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017daa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017dae:	f113 0f0d 	cmn.w	r3, #13
 8017db2:	d102      	bne.n	8017dba <tcp_process+0x31e>
          return ERR_ABRT;
 8017db4:	f06f 030c 	mvn.w	r3, #12
 8017db8:	e250      	b.n	801825c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	8b5b      	ldrh	r3, [r3, #26]
 8017dbe:	f043 0302 	orr.w	r3, r3, #2
 8017dc2:	b29a      	uxth	r2, r3
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017dc8:	e23a      	b.n	8018240 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017dca:	4b98      	ldr	r3, [pc, #608]	@ (801802c <tcp_process+0x590>)
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	f003 0310 	and.w	r3, r3, #16
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	f000 8234 	beq.w	8018240 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017dd8:	4b95      	ldr	r3, [pc, #596]	@ (8018030 <tcp_process+0x594>)
 8017dda:	6819      	ldr	r1, [r3, #0]
 8017ddc:	4b95      	ldr	r3, [pc, #596]	@ (8018034 <tcp_process+0x598>)
 8017dde:	881b      	ldrh	r3, [r3, #0]
 8017de0:	461a      	mov	r2, r3
 8017de2:	4b95      	ldr	r3, [pc, #596]	@ (8018038 <tcp_process+0x59c>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017de8:	4b94      	ldr	r3, [pc, #592]	@ (801803c <tcp_process+0x5a0>)
 8017dea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017dec:	885b      	ldrh	r3, [r3, #2]
 8017dee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017df0:	4a92      	ldr	r2, [pc, #584]	@ (801803c <tcp_process+0x5a0>)
 8017df2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017df4:	8812      	ldrh	r2, [r2, #0]
 8017df6:	b292      	uxth	r2, r2
 8017df8:	9202      	str	r2, [sp, #8]
 8017dfa:	9301      	str	r3, [sp, #4]
 8017dfc:	4b90      	ldr	r3, [pc, #576]	@ (8018040 <tcp_process+0x5a4>)
 8017dfe:	9300      	str	r3, [sp, #0]
 8017e00:	4b90      	ldr	r3, [pc, #576]	@ (8018044 <tcp_process+0x5a8>)
 8017e02:	4602      	mov	r2, r0
 8017e04:	6878      	ldr	r0, [r7, #4]
 8017e06:	f003 f925 	bl	801b054 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017e10:	2b05      	cmp	r3, #5
 8017e12:	f200 8215 	bhi.w	8018240 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2200      	movs	r2, #0
 8017e1a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f002 fee7 	bl	801abf0 <tcp_rexmit_rto>
      break;
 8017e22:	e20d      	b.n	8018240 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017e24:	4b81      	ldr	r3, [pc, #516]	@ (801802c <tcp_process+0x590>)
 8017e26:	781b      	ldrb	r3, [r3, #0]
 8017e28:	f003 0310 	and.w	r3, r3, #16
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f000 80a1 	beq.w	8017f74 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017e32:	4b7f      	ldr	r3, [pc, #508]	@ (8018030 <tcp_process+0x594>)
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e3a:	1ad3      	subs	r3, r2, r3
 8017e3c:	3b01      	subs	r3, #1
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	db7e      	blt.n	8017f40 <tcp_process+0x4a4>
 8017e42:	4b7b      	ldr	r3, [pc, #492]	@ (8018030 <tcp_process+0x594>)
 8017e44:	681a      	ldr	r2, [r3, #0]
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e4a:	1ad3      	subs	r3, r2, r3
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	dc77      	bgt.n	8017f40 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	2204      	movs	r2, #4
 8017e54:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d102      	bne.n	8017e64 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017e5e:	23fa      	movs	r3, #250	@ 0xfa
 8017e60:	76bb      	strb	r3, [r7, #26]
 8017e62:	e01d      	b.n	8017ea0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e68:	699b      	ldr	r3, [r3, #24]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d106      	bne.n	8017e7c <tcp_process+0x3e0>
 8017e6e:	4b76      	ldr	r3, [pc, #472]	@ (8018048 <tcp_process+0x5ac>)
 8017e70:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017e74:	4975      	ldr	r1, [pc, #468]	@ (801804c <tcp_process+0x5b0>)
 8017e76:	4876      	ldr	r0, [pc, #472]	@ (8018050 <tcp_process+0x5b4>)
 8017e78:	f008 fa16 	bl	80202a8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e80:	699b      	ldr	r3, [r3, #24]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d00a      	beq.n	8017e9c <tcp_process+0x400>
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e8a:	699b      	ldr	r3, [r3, #24]
 8017e8c:	687a      	ldr	r2, [r7, #4]
 8017e8e:	6910      	ldr	r0, [r2, #16]
 8017e90:	2200      	movs	r2, #0
 8017e92:	6879      	ldr	r1, [r7, #4]
 8017e94:	4798      	blx	r3
 8017e96:	4603      	mov	r3, r0
 8017e98:	76bb      	strb	r3, [r7, #26]
 8017e9a:	e001      	b.n	8017ea0 <tcp_process+0x404>
 8017e9c:	23f0      	movs	r3, #240	@ 0xf0
 8017e9e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017ea0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d00a      	beq.n	8017ebe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017ea8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017eac:	f113 0f0d 	cmn.w	r3, #13
 8017eb0:	d002      	beq.n	8017eb8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f7fd fd50 	bl	8015958 <tcp_abort>
            }
            return ERR_ABRT;
 8017eb8:	f06f 030c 	mvn.w	r3, #12
 8017ebc:	e1ce      	b.n	801825c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f000 fae0 	bl	8018484 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017ec4:	4b63      	ldr	r3, [pc, #396]	@ (8018054 <tcp_process+0x5b8>)
 8017ec6:	881b      	ldrh	r3, [r3, #0]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d005      	beq.n	8017ed8 <tcp_process+0x43c>
            recv_acked--;
 8017ecc:	4b61      	ldr	r3, [pc, #388]	@ (8018054 <tcp_process+0x5b8>)
 8017ece:	881b      	ldrh	r3, [r3, #0]
 8017ed0:	3b01      	subs	r3, #1
 8017ed2:	b29a      	uxth	r2, r3
 8017ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8018054 <tcp_process+0x5b8>)
 8017ed6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017edc:	009a      	lsls	r2, r3, #2
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ee2:	005b      	lsls	r3, r3, #1
 8017ee4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017ee8:	428b      	cmp	r3, r1
 8017eea:	bf38      	it	cc
 8017eec:	460b      	movcc	r3, r1
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d204      	bcs.n	8017efc <tcp_process+0x460>
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ef6:	009b      	lsls	r3, r3, #2
 8017ef8:	b29b      	uxth	r3, r3
 8017efa:	e00d      	b.n	8017f18 <tcp_process+0x47c>
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f00:	005b      	lsls	r3, r3, #1
 8017f02:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017f06:	4293      	cmp	r3, r2
 8017f08:	d904      	bls.n	8017f14 <tcp_process+0x478>
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f0e:	005b      	lsls	r3, r3, #1
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	e001      	b.n	8017f18 <tcp_process+0x47c>
 8017f14:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017f18:	687a      	ldr	r2, [r7, #4]
 8017f1a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8018058 <tcp_process+0x5bc>)
 8017f20:	781b      	ldrb	r3, [r3, #0]
 8017f22:	f003 0320 	and.w	r3, r3, #32
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d037      	beq.n	8017f9a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	8b5b      	ldrh	r3, [r3, #26]
 8017f2e:	f043 0302 	orr.w	r3, r3, #2
 8017f32:	b29a      	uxth	r2, r3
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	2207      	movs	r2, #7
 8017f3c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017f3e:	e02c      	b.n	8017f9a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f40:	4b3b      	ldr	r3, [pc, #236]	@ (8018030 <tcp_process+0x594>)
 8017f42:	6819      	ldr	r1, [r3, #0]
 8017f44:	4b3b      	ldr	r3, [pc, #236]	@ (8018034 <tcp_process+0x598>)
 8017f46:	881b      	ldrh	r3, [r3, #0]
 8017f48:	461a      	mov	r2, r3
 8017f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8018038 <tcp_process+0x59c>)
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017f50:	4b3a      	ldr	r3, [pc, #232]	@ (801803c <tcp_process+0x5a0>)
 8017f52:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f54:	885b      	ldrh	r3, [r3, #2]
 8017f56:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017f58:	4a38      	ldr	r2, [pc, #224]	@ (801803c <tcp_process+0x5a0>)
 8017f5a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f5c:	8812      	ldrh	r2, [r2, #0]
 8017f5e:	b292      	uxth	r2, r2
 8017f60:	9202      	str	r2, [sp, #8]
 8017f62:	9301      	str	r3, [sp, #4]
 8017f64:	4b36      	ldr	r3, [pc, #216]	@ (8018040 <tcp_process+0x5a4>)
 8017f66:	9300      	str	r3, [sp, #0]
 8017f68:	4b36      	ldr	r3, [pc, #216]	@ (8018044 <tcp_process+0x5a8>)
 8017f6a:	4602      	mov	r2, r0
 8017f6c:	6878      	ldr	r0, [r7, #4]
 8017f6e:	f003 f871 	bl	801b054 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017f72:	e167      	b.n	8018244 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017f74:	4b2d      	ldr	r3, [pc, #180]	@ (801802c <tcp_process+0x590>)
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	f003 0302 	and.w	r3, r3, #2
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	f000 8161 	beq.w	8018244 <tcp_process+0x7a8>
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f86:	1e5a      	subs	r2, r3, #1
 8017f88:	4b2b      	ldr	r3, [pc, #172]	@ (8018038 <tcp_process+0x59c>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	429a      	cmp	r2, r3
 8017f8e:	f040 8159 	bne.w	8018244 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f002 fe4e 	bl	801ac34 <tcp_rexmit>
      break;
 8017f98:	e154      	b.n	8018244 <tcp_process+0x7a8>
 8017f9a:	e153      	b.n	8018244 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017f9c:	6878      	ldr	r0, [r7, #4]
 8017f9e:	f000 fa71 	bl	8018484 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8018058 <tcp_process+0x5bc>)
 8017fa4:	781b      	ldrb	r3, [r3, #0]
 8017fa6:	f003 0320 	and.w	r3, r3, #32
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	f000 814c 	beq.w	8018248 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	8b5b      	ldrh	r3, [r3, #26]
 8017fb4:	f043 0302 	orr.w	r3, r3, #2
 8017fb8:	b29a      	uxth	r2, r3
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2207      	movs	r2, #7
 8017fc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017fc4:	e140      	b.n	8018248 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	f000 fa5c 	bl	8018484 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017fcc:	4b22      	ldr	r3, [pc, #136]	@ (8018058 <tcp_process+0x5bc>)
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	f003 0320 	and.w	r3, r3, #32
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d071      	beq.n	80180bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017fd8:	4b14      	ldr	r3, [pc, #80]	@ (801802c <tcp_process+0x590>)
 8017fda:	781b      	ldrb	r3, [r3, #0]
 8017fdc:	f003 0310 	and.w	r3, r3, #16
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d060      	beq.n	80180a6 <tcp_process+0x60a>
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017fe8:	4b11      	ldr	r3, [pc, #68]	@ (8018030 <tcp_process+0x594>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	429a      	cmp	r2, r3
 8017fee:	d15a      	bne.n	80180a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d156      	bne.n	80180a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	8b5b      	ldrh	r3, [r3, #26]
 8017ffc:	f043 0302 	orr.w	r3, r3, #2
 8018000:	b29a      	uxth	r2, r3
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018006:	6878      	ldr	r0, [r7, #4]
 8018008:	f7fe fd56 	bl	8016ab8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801800c:	4b13      	ldr	r3, [pc, #76]	@ (801805c <tcp_process+0x5c0>)
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	687a      	ldr	r2, [r7, #4]
 8018012:	429a      	cmp	r2, r3
 8018014:	d105      	bne.n	8018022 <tcp_process+0x586>
 8018016:	4b11      	ldr	r3, [pc, #68]	@ (801805c <tcp_process+0x5c0>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	68db      	ldr	r3, [r3, #12]
 801801c:	4a0f      	ldr	r2, [pc, #60]	@ (801805c <tcp_process+0x5c0>)
 801801e:	6013      	str	r3, [r2, #0]
 8018020:	e02e      	b.n	8018080 <tcp_process+0x5e4>
 8018022:	4b0e      	ldr	r3, [pc, #56]	@ (801805c <tcp_process+0x5c0>)
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	617b      	str	r3, [r7, #20]
 8018028:	e027      	b.n	801807a <tcp_process+0x5de>
 801802a:	bf00      	nop
 801802c:	200253ec 	.word	0x200253ec
 8018030:	200253e4 	.word	0x200253e4
 8018034:	200253ea 	.word	0x200253ea
 8018038:	200253e0 	.word	0x200253e0
 801803c:	200253d0 	.word	0x200253d0
 8018040:	2001f0c0 	.word	0x2001f0c0
 8018044:	2001f0c4 	.word	0x2001f0c4
 8018048:	080230dc 	.word	0x080230dc
 801804c:	0802337c 	.word	0x0802337c
 8018050:	08023128 	.word	0x08023128
 8018054:	200253e8 	.word	0x200253e8
 8018058:	200253ed 	.word	0x200253ed
 801805c:	200253b4 	.word	0x200253b4
 8018060:	697b      	ldr	r3, [r7, #20]
 8018062:	68db      	ldr	r3, [r3, #12]
 8018064:	687a      	ldr	r2, [r7, #4]
 8018066:	429a      	cmp	r2, r3
 8018068:	d104      	bne.n	8018074 <tcp_process+0x5d8>
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	68da      	ldr	r2, [r3, #12]
 801806e:	697b      	ldr	r3, [r7, #20]
 8018070:	60da      	str	r2, [r3, #12]
 8018072:	e005      	b.n	8018080 <tcp_process+0x5e4>
 8018074:	697b      	ldr	r3, [r7, #20]
 8018076:	68db      	ldr	r3, [r3, #12]
 8018078:	617b      	str	r3, [r7, #20]
 801807a:	697b      	ldr	r3, [r7, #20]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d1ef      	bne.n	8018060 <tcp_process+0x5c4>
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2200      	movs	r2, #0
 8018084:	60da      	str	r2, [r3, #12]
 8018086:	4b77      	ldr	r3, [pc, #476]	@ (8018264 <tcp_process+0x7c8>)
 8018088:	2201      	movs	r2, #1
 801808a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	220a      	movs	r2, #10
 8018090:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8018092:	4b75      	ldr	r3, [pc, #468]	@ (8018268 <tcp_process+0x7cc>)
 8018094:	681a      	ldr	r2, [r3, #0]
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	60da      	str	r2, [r3, #12]
 801809a:	4a73      	ldr	r2, [pc, #460]	@ (8018268 <tcp_process+0x7cc>)
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	6013      	str	r3, [r2, #0]
 80180a0:	f003 f99a 	bl	801b3d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80180a4:	e0d2      	b.n	801824c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	8b5b      	ldrh	r3, [r3, #26]
 80180aa:	f043 0302 	orr.w	r3, r3, #2
 80180ae:	b29a      	uxth	r2, r3
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	2208      	movs	r2, #8
 80180b8:	751a      	strb	r2, [r3, #20]
      break;
 80180ba:	e0c7      	b.n	801824c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80180bc:	4b6b      	ldr	r3, [pc, #428]	@ (801826c <tcp_process+0x7d0>)
 80180be:	781b      	ldrb	r3, [r3, #0]
 80180c0:	f003 0310 	and.w	r3, r3, #16
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	f000 80c1 	beq.w	801824c <tcp_process+0x7b0>
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180ce:	4b68      	ldr	r3, [pc, #416]	@ (8018270 <tcp_process+0x7d4>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	429a      	cmp	r2, r3
 80180d4:	f040 80ba 	bne.w	801824c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80180dc:	2b00      	cmp	r3, #0
 80180de:	f040 80b5 	bne.w	801824c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2206      	movs	r2, #6
 80180e6:	751a      	strb	r2, [r3, #20]
      break;
 80180e8:	e0b0      	b.n	801824c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	f000 f9ca 	bl	8018484 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80180f0:	4b60      	ldr	r3, [pc, #384]	@ (8018274 <tcp_process+0x7d8>)
 80180f2:	781b      	ldrb	r3, [r3, #0]
 80180f4:	f003 0320 	and.w	r3, r3, #32
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	f000 80a9 	beq.w	8018250 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	8b5b      	ldrh	r3, [r3, #26]
 8018102:	f043 0302 	orr.w	r3, r3, #2
 8018106:	b29a      	uxth	r2, r3
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f7fe fcd3 	bl	8016ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018112:	4b59      	ldr	r3, [pc, #356]	@ (8018278 <tcp_process+0x7dc>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	687a      	ldr	r2, [r7, #4]
 8018118:	429a      	cmp	r2, r3
 801811a:	d105      	bne.n	8018128 <tcp_process+0x68c>
 801811c:	4b56      	ldr	r3, [pc, #344]	@ (8018278 <tcp_process+0x7dc>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	68db      	ldr	r3, [r3, #12]
 8018122:	4a55      	ldr	r2, [pc, #340]	@ (8018278 <tcp_process+0x7dc>)
 8018124:	6013      	str	r3, [r2, #0]
 8018126:	e013      	b.n	8018150 <tcp_process+0x6b4>
 8018128:	4b53      	ldr	r3, [pc, #332]	@ (8018278 <tcp_process+0x7dc>)
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	613b      	str	r3, [r7, #16]
 801812e:	e00c      	b.n	801814a <tcp_process+0x6ae>
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	68db      	ldr	r3, [r3, #12]
 8018134:	687a      	ldr	r2, [r7, #4]
 8018136:	429a      	cmp	r2, r3
 8018138:	d104      	bne.n	8018144 <tcp_process+0x6a8>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	68da      	ldr	r2, [r3, #12]
 801813e:	693b      	ldr	r3, [r7, #16]
 8018140:	60da      	str	r2, [r3, #12]
 8018142:	e005      	b.n	8018150 <tcp_process+0x6b4>
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	68db      	ldr	r3, [r3, #12]
 8018148:	613b      	str	r3, [r7, #16]
 801814a:	693b      	ldr	r3, [r7, #16]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d1ef      	bne.n	8018130 <tcp_process+0x694>
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2200      	movs	r2, #0
 8018154:	60da      	str	r2, [r3, #12]
 8018156:	4b43      	ldr	r3, [pc, #268]	@ (8018264 <tcp_process+0x7c8>)
 8018158:	2201      	movs	r2, #1
 801815a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	220a      	movs	r2, #10
 8018160:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018162:	4b41      	ldr	r3, [pc, #260]	@ (8018268 <tcp_process+0x7cc>)
 8018164:	681a      	ldr	r2, [r3, #0]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	60da      	str	r2, [r3, #12]
 801816a:	4a3f      	ldr	r2, [pc, #252]	@ (8018268 <tcp_process+0x7cc>)
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6013      	str	r3, [r2, #0]
 8018170:	f003 f932 	bl	801b3d8 <tcp_timer_needed>
      }
      break;
 8018174:	e06c      	b.n	8018250 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f000 f984 	bl	8018484 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801817c:	4b3b      	ldr	r3, [pc, #236]	@ (801826c <tcp_process+0x7d0>)
 801817e:	781b      	ldrb	r3, [r3, #0]
 8018180:	f003 0310 	and.w	r3, r3, #16
 8018184:	2b00      	cmp	r3, #0
 8018186:	d065      	beq.n	8018254 <tcp_process+0x7b8>
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801818c:	4b38      	ldr	r3, [pc, #224]	@ (8018270 <tcp_process+0x7d4>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	429a      	cmp	r2, r3
 8018192:	d15f      	bne.n	8018254 <tcp_process+0x7b8>
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018198:	2b00      	cmp	r3, #0
 801819a:	d15b      	bne.n	8018254 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f7fe fc8b 	bl	8016ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80181a2:	4b35      	ldr	r3, [pc, #212]	@ (8018278 <tcp_process+0x7dc>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	687a      	ldr	r2, [r7, #4]
 80181a8:	429a      	cmp	r2, r3
 80181aa:	d105      	bne.n	80181b8 <tcp_process+0x71c>
 80181ac:	4b32      	ldr	r3, [pc, #200]	@ (8018278 <tcp_process+0x7dc>)
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	4a31      	ldr	r2, [pc, #196]	@ (8018278 <tcp_process+0x7dc>)
 80181b4:	6013      	str	r3, [r2, #0]
 80181b6:	e013      	b.n	80181e0 <tcp_process+0x744>
 80181b8:	4b2f      	ldr	r3, [pc, #188]	@ (8018278 <tcp_process+0x7dc>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	60fb      	str	r3, [r7, #12]
 80181be:	e00c      	b.n	80181da <tcp_process+0x73e>
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	68db      	ldr	r3, [r3, #12]
 80181c4:	687a      	ldr	r2, [r7, #4]
 80181c6:	429a      	cmp	r2, r3
 80181c8:	d104      	bne.n	80181d4 <tcp_process+0x738>
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	68da      	ldr	r2, [r3, #12]
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	60da      	str	r2, [r3, #12]
 80181d2:	e005      	b.n	80181e0 <tcp_process+0x744>
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	68db      	ldr	r3, [r3, #12]
 80181d8:	60fb      	str	r3, [r7, #12]
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d1ef      	bne.n	80181c0 <tcp_process+0x724>
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	2200      	movs	r2, #0
 80181e4:	60da      	str	r2, [r3, #12]
 80181e6:	4b1f      	ldr	r3, [pc, #124]	@ (8018264 <tcp_process+0x7c8>)
 80181e8:	2201      	movs	r2, #1
 80181ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	220a      	movs	r2, #10
 80181f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80181f2:	4b1d      	ldr	r3, [pc, #116]	@ (8018268 <tcp_process+0x7cc>)
 80181f4:	681a      	ldr	r2, [r3, #0]
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	60da      	str	r2, [r3, #12]
 80181fa:	4a1b      	ldr	r2, [pc, #108]	@ (8018268 <tcp_process+0x7cc>)
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	6013      	str	r3, [r2, #0]
 8018200:	f003 f8ea 	bl	801b3d8 <tcp_timer_needed>
      }
      break;
 8018204:	e026      	b.n	8018254 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018206:	6878      	ldr	r0, [r7, #4]
 8018208:	f000 f93c 	bl	8018484 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801820c:	4b17      	ldr	r3, [pc, #92]	@ (801826c <tcp_process+0x7d0>)
 801820e:	781b      	ldrb	r3, [r3, #0]
 8018210:	f003 0310 	and.w	r3, r3, #16
 8018214:	2b00      	cmp	r3, #0
 8018216:	d01f      	beq.n	8018258 <tcp_process+0x7bc>
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801821c:	4b14      	ldr	r3, [pc, #80]	@ (8018270 <tcp_process+0x7d4>)
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	429a      	cmp	r2, r3
 8018222:	d119      	bne.n	8018258 <tcp_process+0x7bc>
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018228:	2b00      	cmp	r3, #0
 801822a:	d115      	bne.n	8018258 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801822c:	4b11      	ldr	r3, [pc, #68]	@ (8018274 <tcp_process+0x7d8>)
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	f043 0310 	orr.w	r3, r3, #16
 8018234:	b2da      	uxtb	r2, r3
 8018236:	4b0f      	ldr	r3, [pc, #60]	@ (8018274 <tcp_process+0x7d8>)
 8018238:	701a      	strb	r2, [r3, #0]
      }
      break;
 801823a:	e00d      	b.n	8018258 <tcp_process+0x7bc>
    default:
      break;
 801823c:	bf00      	nop
 801823e:	e00c      	b.n	801825a <tcp_process+0x7be>
      break;
 8018240:	bf00      	nop
 8018242:	e00a      	b.n	801825a <tcp_process+0x7be>
      break;
 8018244:	bf00      	nop
 8018246:	e008      	b.n	801825a <tcp_process+0x7be>
      break;
 8018248:	bf00      	nop
 801824a:	e006      	b.n	801825a <tcp_process+0x7be>
      break;
 801824c:	bf00      	nop
 801824e:	e004      	b.n	801825a <tcp_process+0x7be>
      break;
 8018250:	bf00      	nop
 8018252:	e002      	b.n	801825a <tcp_process+0x7be>
      break;
 8018254:	bf00      	nop
 8018256:	e000      	b.n	801825a <tcp_process+0x7be>
      break;
 8018258:	bf00      	nop
  }
  return ERR_OK;
 801825a:	2300      	movs	r3, #0
}
 801825c:	4618      	mov	r0, r3
 801825e:	3724      	adds	r7, #36	@ 0x24
 8018260:	46bd      	mov	sp, r7
 8018262:	bd90      	pop	{r4, r7, pc}
 8018264:	200253bc 	.word	0x200253bc
 8018268:	200253b8 	.word	0x200253b8
 801826c:	200253ec 	.word	0x200253ec
 8018270:	200253e4 	.word	0x200253e4
 8018274:	200253ed 	.word	0x200253ed
 8018278:	200253b4 	.word	0x200253b4

0801827c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801827c:	b590      	push	{r4, r7, lr}
 801827e:	b085      	sub	sp, #20
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
 8018284:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d106      	bne.n	801829a <tcp_oos_insert_segment+0x1e>
 801828c:	4b3b      	ldr	r3, [pc, #236]	@ (801837c <tcp_oos_insert_segment+0x100>)
 801828e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8018292:	493b      	ldr	r1, [pc, #236]	@ (8018380 <tcp_oos_insert_segment+0x104>)
 8018294:	483b      	ldr	r0, [pc, #236]	@ (8018384 <tcp_oos_insert_segment+0x108>)
 8018296:	f008 f807 	bl	80202a8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	68db      	ldr	r3, [r3, #12]
 801829e:	899b      	ldrh	r3, [r3, #12]
 80182a0:	b29b      	uxth	r3, r3
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7fb f892 	bl	80133cc <lwip_htons>
 80182a8:	4603      	mov	r3, r0
 80182aa:	b2db      	uxtb	r3, r3
 80182ac:	f003 0301 	and.w	r3, r3, #1
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d028      	beq.n	8018306 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80182b4:	6838      	ldr	r0, [r7, #0]
 80182b6:	f7fe f905 	bl	80164c4 <tcp_segs_free>
    next = NULL;
 80182ba:	2300      	movs	r3, #0
 80182bc:	603b      	str	r3, [r7, #0]
 80182be:	e056      	b.n	801836e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80182c0:	683b      	ldr	r3, [r7, #0]
 80182c2:	68db      	ldr	r3, [r3, #12]
 80182c4:	899b      	ldrh	r3, [r3, #12]
 80182c6:	b29b      	uxth	r3, r3
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7fb f87f 	bl	80133cc <lwip_htons>
 80182ce:	4603      	mov	r3, r0
 80182d0:	b2db      	uxtb	r3, r3
 80182d2:	f003 0301 	and.w	r3, r3, #1
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d00d      	beq.n	80182f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	68db      	ldr	r3, [r3, #12]
 80182de:	899b      	ldrh	r3, [r3, #12]
 80182e0:	b29c      	uxth	r4, r3
 80182e2:	2001      	movs	r0, #1
 80182e4:	f7fb f872 	bl	80133cc <lwip_htons>
 80182e8:	4603      	mov	r3, r0
 80182ea:	461a      	mov	r2, r3
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	68db      	ldr	r3, [r3, #12]
 80182f0:	4322      	orrs	r2, r4
 80182f2:	b292      	uxth	r2, r2
 80182f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80182f6:	683b      	ldr	r3, [r7, #0]
 80182f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018300:	68f8      	ldr	r0, [r7, #12]
 8018302:	f7fe f8f4 	bl	80164ee <tcp_seg_free>
    while (next &&
 8018306:	683b      	ldr	r3, [r7, #0]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d00e      	beq.n	801832a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	891b      	ldrh	r3, [r3, #8]
 8018310:	461a      	mov	r2, r3
 8018312:	4b1d      	ldr	r3, [pc, #116]	@ (8018388 <tcp_oos_insert_segment+0x10c>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	441a      	add	r2, r3
 8018318:	683b      	ldr	r3, [r7, #0]
 801831a:	68db      	ldr	r3, [r3, #12]
 801831c:	685b      	ldr	r3, [r3, #4]
 801831e:	6839      	ldr	r1, [r7, #0]
 8018320:	8909      	ldrh	r1, [r1, #8]
 8018322:	440b      	add	r3, r1
 8018324:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018326:	2b00      	cmp	r3, #0
 8018328:	daca      	bge.n	80182c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801832a:	683b      	ldr	r3, [r7, #0]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d01e      	beq.n	801836e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	891b      	ldrh	r3, [r3, #8]
 8018334:	461a      	mov	r2, r3
 8018336:	4b14      	ldr	r3, [pc, #80]	@ (8018388 <tcp_oos_insert_segment+0x10c>)
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	441a      	add	r2, r3
 801833c:	683b      	ldr	r3, [r7, #0]
 801833e:	68db      	ldr	r3, [r3, #12]
 8018340:	685b      	ldr	r3, [r3, #4]
 8018342:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018344:	2b00      	cmp	r3, #0
 8018346:	dd12      	ble.n	801836e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018348:	683b      	ldr	r3, [r7, #0]
 801834a:	68db      	ldr	r3, [r3, #12]
 801834c:	685b      	ldr	r3, [r3, #4]
 801834e:	b29a      	uxth	r2, r3
 8018350:	4b0d      	ldr	r3, [pc, #52]	@ (8018388 <tcp_oos_insert_segment+0x10c>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	b29b      	uxth	r3, r3
 8018356:	1ad3      	subs	r3, r2, r3
 8018358:	b29a      	uxth	r2, r3
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	685a      	ldr	r2, [r3, #4]
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	891b      	ldrh	r3, [r3, #8]
 8018366:	4619      	mov	r1, r3
 8018368:	4610      	mov	r0, r2
 801836a:	f7fc fb67 	bl	8014a3c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	683a      	ldr	r2, [r7, #0]
 8018372:	601a      	str	r2, [r3, #0]
}
 8018374:	bf00      	nop
 8018376:	3714      	adds	r7, #20
 8018378:	46bd      	mov	sp, r7
 801837a:	bd90      	pop	{r4, r7, pc}
 801837c:	080230dc 	.word	0x080230dc
 8018380:	0802339c 	.word	0x0802339c
 8018384:	08023128 	.word	0x08023128
 8018388:	200253e0 	.word	0x200253e0

0801838c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801838c:	b5b0      	push	{r4, r5, r7, lr}
 801838e:	b086      	sub	sp, #24
 8018390:	af00      	add	r7, sp, #0
 8018392:	60f8      	str	r0, [r7, #12]
 8018394:	60b9      	str	r1, [r7, #8]
 8018396:	607a      	str	r2, [r7, #4]
 8018398:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801839a:	e03e      	b.n	801841a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80183a6:	697b      	ldr	r3, [r7, #20]
 80183a8:	685b      	ldr	r3, [r3, #4]
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7fc fd5a 	bl	8014e64 <pbuf_clen>
 80183b0:	4603      	mov	r3, r0
 80183b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80183ba:	8a7a      	ldrh	r2, [r7, #18]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d906      	bls.n	80183ce <tcp_free_acked_segments+0x42>
 80183c0:	4b2a      	ldr	r3, [pc, #168]	@ (801846c <tcp_free_acked_segments+0xe0>)
 80183c2:	f240 4257 	movw	r2, #1111	@ 0x457
 80183c6:	492a      	ldr	r1, [pc, #168]	@ (8018470 <tcp_free_acked_segments+0xe4>)
 80183c8:	482a      	ldr	r0, [pc, #168]	@ (8018474 <tcp_free_acked_segments+0xe8>)
 80183ca:	f007 ff6d 	bl	80202a8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80183d4:	8a7b      	ldrh	r3, [r7, #18]
 80183d6:	1ad3      	subs	r3, r2, r3
 80183d8:	b29a      	uxth	r2, r3
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	891a      	ldrh	r2, [r3, #8]
 80183e4:	4b24      	ldr	r3, [pc, #144]	@ (8018478 <tcp_free_acked_segments+0xec>)
 80183e6:	881b      	ldrh	r3, [r3, #0]
 80183e8:	4413      	add	r3, r2
 80183ea:	b29a      	uxth	r2, r3
 80183ec:	4b22      	ldr	r3, [pc, #136]	@ (8018478 <tcp_free_acked_segments+0xec>)
 80183ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80183f0:	6978      	ldr	r0, [r7, #20]
 80183f2:	f7fe f87c 	bl	80164ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d00c      	beq.n	801841a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d109      	bne.n	801841a <tcp_free_acked_segments+0x8e>
 8018406:	683b      	ldr	r3, [r7, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d106      	bne.n	801841a <tcp_free_acked_segments+0x8e>
 801840c:	4b17      	ldr	r3, [pc, #92]	@ (801846c <tcp_free_acked_segments+0xe0>)
 801840e:	f240 4261 	movw	r2, #1121	@ 0x461
 8018412:	491a      	ldr	r1, [pc, #104]	@ (801847c <tcp_free_acked_segments+0xf0>)
 8018414:	4817      	ldr	r0, [pc, #92]	@ (8018474 <tcp_free_acked_segments+0xe8>)
 8018416:	f007 ff47 	bl	80202a8 <iprintf>
  while (seg_list != NULL &&
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d020      	beq.n	8018462 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	68db      	ldr	r3, [r3, #12]
 8018424:	685b      	ldr	r3, [r3, #4]
 8018426:	4618      	mov	r0, r3
 8018428:	f7fa ffe6 	bl	80133f8 <lwip_htonl>
 801842c:	4604      	mov	r4, r0
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	891b      	ldrh	r3, [r3, #8]
 8018432:	461d      	mov	r5, r3
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	68db      	ldr	r3, [r3, #12]
 8018438:	899b      	ldrh	r3, [r3, #12]
 801843a:	b29b      	uxth	r3, r3
 801843c:	4618      	mov	r0, r3
 801843e:	f7fa ffc5 	bl	80133cc <lwip_htons>
 8018442:	4603      	mov	r3, r0
 8018444:	b2db      	uxtb	r3, r3
 8018446:	f003 0303 	and.w	r3, r3, #3
 801844a:	2b00      	cmp	r3, #0
 801844c:	d001      	beq.n	8018452 <tcp_free_acked_segments+0xc6>
 801844e:	2301      	movs	r3, #1
 8018450:	e000      	b.n	8018454 <tcp_free_acked_segments+0xc8>
 8018452:	2300      	movs	r3, #0
 8018454:	442b      	add	r3, r5
 8018456:	18e2      	adds	r2, r4, r3
 8018458:	4b09      	ldr	r3, [pc, #36]	@ (8018480 <tcp_free_acked_segments+0xf4>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801845e:	2b00      	cmp	r3, #0
 8018460:	dd9c      	ble.n	801839c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018462:	68bb      	ldr	r3, [r7, #8]
}
 8018464:	4618      	mov	r0, r3
 8018466:	3718      	adds	r7, #24
 8018468:	46bd      	mov	sp, r7
 801846a:	bdb0      	pop	{r4, r5, r7, pc}
 801846c:	080230dc 	.word	0x080230dc
 8018470:	080233c4 	.word	0x080233c4
 8018474:	08023128 	.word	0x08023128
 8018478:	200253e8 	.word	0x200253e8
 801847c:	080233ec 	.word	0x080233ec
 8018480:	200253e4 	.word	0x200253e4

08018484 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018484:	b5b0      	push	{r4, r5, r7, lr}
 8018486:	b094      	sub	sp, #80	@ 0x50
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801848c:	2300      	movs	r3, #0
 801848e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	2b00      	cmp	r3, #0
 8018494:	d106      	bne.n	80184a4 <tcp_receive+0x20>
 8018496:	4b91      	ldr	r3, [pc, #580]	@ (80186dc <tcp_receive+0x258>)
 8018498:	f240 427b 	movw	r2, #1147	@ 0x47b
 801849c:	4990      	ldr	r1, [pc, #576]	@ (80186e0 <tcp_receive+0x25c>)
 801849e:	4891      	ldr	r0, [pc, #580]	@ (80186e4 <tcp_receive+0x260>)
 80184a0:	f007 ff02 	bl	80202a8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	7d1b      	ldrb	r3, [r3, #20]
 80184a8:	2b03      	cmp	r3, #3
 80184aa:	d806      	bhi.n	80184ba <tcp_receive+0x36>
 80184ac:	4b8b      	ldr	r3, [pc, #556]	@ (80186dc <tcp_receive+0x258>)
 80184ae:	f240 427c 	movw	r2, #1148	@ 0x47c
 80184b2:	498d      	ldr	r1, [pc, #564]	@ (80186e8 <tcp_receive+0x264>)
 80184b4:	488b      	ldr	r0, [pc, #556]	@ (80186e4 <tcp_receive+0x260>)
 80184b6:	f007 fef7 	bl	80202a8 <iprintf>

  if (flags & TCP_ACK) {
 80184ba:	4b8c      	ldr	r3, [pc, #560]	@ (80186ec <tcp_receive+0x268>)
 80184bc:	781b      	ldrb	r3, [r3, #0]
 80184be:	f003 0310 	and.w	r3, r3, #16
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	f000 8264 	beq.w	8018990 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80184ce:	461a      	mov	r2, r3
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184d4:	4413      	add	r3, r2
 80184d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80184dc:	4b84      	ldr	r3, [pc, #528]	@ (80186f0 <tcp_receive+0x26c>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	1ad3      	subs	r3, r2, r3
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	db1b      	blt.n	801851e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80184ea:	4b81      	ldr	r3, [pc, #516]	@ (80186f0 <tcp_receive+0x26c>)
 80184ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80184ee:	429a      	cmp	r2, r3
 80184f0:	d106      	bne.n	8018500 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80184f6:	4b7f      	ldr	r3, [pc, #508]	@ (80186f4 <tcp_receive+0x270>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	1ad3      	subs	r3, r2, r3
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	db0e      	blt.n	801851e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018504:	4b7b      	ldr	r3, [pc, #492]	@ (80186f4 <tcp_receive+0x270>)
 8018506:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018508:	429a      	cmp	r2, r3
 801850a:	d125      	bne.n	8018558 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801850c:	4b7a      	ldr	r3, [pc, #488]	@ (80186f8 <tcp_receive+0x274>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	89db      	ldrh	r3, [r3, #14]
 8018512:	b29a      	uxth	r2, r3
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801851a:	429a      	cmp	r2, r3
 801851c:	d91c      	bls.n	8018558 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801851e:	4b76      	ldr	r3, [pc, #472]	@ (80186f8 <tcp_receive+0x274>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	89db      	ldrh	r3, [r3, #14]
 8018524:	b29a      	uxth	r2, r3
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018538:	429a      	cmp	r2, r3
 801853a:	d205      	bcs.n	8018548 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8018548:	4b69      	ldr	r3, [pc, #420]	@ (80186f0 <tcp_receive+0x26c>)
 801854a:	681a      	ldr	r2, [r3, #0]
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8018550:	4b68      	ldr	r3, [pc, #416]	@ (80186f4 <tcp_receive+0x270>)
 8018552:	681a      	ldr	r2, [r3, #0]
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018558:	4b66      	ldr	r3, [pc, #408]	@ (80186f4 <tcp_receive+0x270>)
 801855a:	681a      	ldr	r2, [r3, #0]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018560:	1ad3      	subs	r3, r2, r3
 8018562:	2b00      	cmp	r3, #0
 8018564:	dc58      	bgt.n	8018618 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018566:	4b65      	ldr	r3, [pc, #404]	@ (80186fc <tcp_receive+0x278>)
 8018568:	881b      	ldrh	r3, [r3, #0]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d14b      	bne.n	8018606 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018572:	687a      	ldr	r2, [r7, #4]
 8018574:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8018578:	4413      	add	r3, r2
 801857a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801857c:	429a      	cmp	r2, r3
 801857e:	d142      	bne.n	8018606 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018586:	2b00      	cmp	r3, #0
 8018588:	db3d      	blt.n	8018606 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801858e:	4b59      	ldr	r3, [pc, #356]	@ (80186f4 <tcp_receive+0x270>)
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	429a      	cmp	r2, r3
 8018594:	d137      	bne.n	8018606 <tcp_receive+0x182>
              found_dupack = 1;
 8018596:	2301      	movs	r3, #1
 8018598:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80185a0:	2bff      	cmp	r3, #255	@ 0xff
 80185a2:	d007      	beq.n	80185b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80185aa:	3301      	adds	r3, #1
 80185ac:	b2da      	uxtb	r2, r3
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80185ba:	2b03      	cmp	r3, #3
 80185bc:	d91b      	bls.n	80185f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80185c8:	4413      	add	r3, r2
 80185ca:	b29a      	uxth	r2, r3
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d30a      	bcc.n	80185ec <tcp_receive+0x168>
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80185e0:	4413      	add	r3, r2
 80185e2:	b29a      	uxth	r2, r3
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80185ea:	e004      	b.n	80185f6 <tcp_receive+0x172>
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80185f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80185fc:	2b02      	cmp	r3, #2
 80185fe:	d902      	bls.n	8018606 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f002 fb83 	bl	801ad0c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018608:	2b00      	cmp	r3, #0
 801860a:	f040 8161 	bne.w	80188d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	2200      	movs	r2, #0
 8018612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018616:	e15b      	b.n	80188d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018618:	4b36      	ldr	r3, [pc, #216]	@ (80186f4 <tcp_receive+0x270>)
 801861a:	681a      	ldr	r2, [r3, #0]
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018620:	1ad3      	subs	r3, r2, r3
 8018622:	3b01      	subs	r3, #1
 8018624:	2b00      	cmp	r3, #0
 8018626:	f2c0 814e 	blt.w	80188c6 <tcp_receive+0x442>
 801862a:	4b32      	ldr	r3, [pc, #200]	@ (80186f4 <tcp_receive+0x270>)
 801862c:	681a      	ldr	r2, [r3, #0]
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018632:	1ad3      	subs	r3, r2, r3
 8018634:	2b00      	cmp	r3, #0
 8018636:	f300 8146 	bgt.w	80188c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	8b5b      	ldrh	r3, [r3, #26]
 801863e:	f003 0304 	and.w	r3, r3, #4
 8018642:	2b00      	cmp	r3, #0
 8018644:	d010      	beq.n	8018668 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	8b5b      	ldrh	r3, [r3, #26]
 801864a:	f023 0304 	bic.w	r3, r3, #4
 801864e:	b29a      	uxth	r2, r3
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	2200      	movs	r2, #0
 8018664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	2200      	movs	r2, #0
 801866c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018676:	10db      	asrs	r3, r3, #3
 8018678:	b21b      	sxth	r3, r3
 801867a:	b29a      	uxth	r2, r3
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018682:	b29b      	uxth	r3, r3
 8018684:	4413      	add	r3, r2
 8018686:	b29b      	uxth	r3, r3
 8018688:	b21a      	sxth	r2, r3
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018690:	4b18      	ldr	r3, [pc, #96]	@ (80186f4 <tcp_receive+0x270>)
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	b29a      	uxth	r2, r3
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801869a:	b29b      	uxth	r3, r3
 801869c:	1ad3      	subs	r3, r2, r3
 801869e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	2200      	movs	r2, #0
 80186a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80186a8:	4b12      	ldr	r3, [pc, #72]	@ (80186f4 <tcp_receive+0x270>)
 80186aa:	681a      	ldr	r2, [r3, #0]
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	7d1b      	ldrb	r3, [r3, #20]
 80186b4:	2b03      	cmp	r3, #3
 80186b6:	f240 8097 	bls.w	80187e8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80186c6:	429a      	cmp	r2, r3
 80186c8:	d245      	bcs.n	8018756 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	8b5b      	ldrh	r3, [r3, #26]
 80186ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d014      	beq.n	8018700 <tcp_receive+0x27c>
 80186d6:	2301      	movs	r3, #1
 80186d8:	e013      	b.n	8018702 <tcp_receive+0x27e>
 80186da:	bf00      	nop
 80186dc:	080230dc 	.word	0x080230dc
 80186e0:	0802340c 	.word	0x0802340c
 80186e4:	08023128 	.word	0x08023128
 80186e8:	08023428 	.word	0x08023428
 80186ec:	200253ec 	.word	0x200253ec
 80186f0:	200253e0 	.word	0x200253e0
 80186f4:	200253e4 	.word	0x200253e4
 80186f8:	200253d0 	.word	0x200253d0
 80186fc:	200253ea 	.word	0x200253ea
 8018700:	2302      	movs	r3, #2
 8018702:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018706:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801870a:	b29a      	uxth	r2, r3
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018710:	fb12 f303 	smulbb	r3, r2, r3
 8018714:	b29b      	uxth	r3, r3
 8018716:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018718:	4293      	cmp	r3, r2
 801871a:	bf28      	it	cs
 801871c:	4613      	movcs	r3, r2
 801871e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018726:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018728:	4413      	add	r3, r2
 801872a:	b29a      	uxth	r2, r3
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018732:	429a      	cmp	r2, r3
 8018734:	d309      	bcc.n	801874a <tcp_receive+0x2c6>
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801873c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801873e:	4413      	add	r3, r2
 8018740:	b29a      	uxth	r2, r3
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018748:	e04e      	b.n	80187e8 <tcp_receive+0x364>
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018750:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018754:	e048      	b.n	80187e8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801875c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801875e:	4413      	add	r3, r2
 8018760:	b29a      	uxth	r2, r3
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018768:	429a      	cmp	r2, r3
 801876a:	d309      	bcc.n	8018780 <tcp_receive+0x2fc>
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018772:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018774:	4413      	add	r3, r2
 8018776:	b29a      	uxth	r2, r3
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801877e:	e004      	b.n	801878a <tcp_receive+0x306>
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018786:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018796:	429a      	cmp	r2, r3
 8018798:	d326      	bcc.n	80187e8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80187a6:	1ad3      	subs	r3, r2, r3
 80187a8:	b29a      	uxth	r2, r3
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80187ba:	4413      	add	r3, r2
 80187bc:	b29a      	uxth	r2, r3
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80187c4:	429a      	cmp	r2, r3
 80187c6:	d30a      	bcc.n	80187de <tcp_receive+0x35a>
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80187d2:	4413      	add	r3, r2
 80187d4:	b29a      	uxth	r2, r3
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80187dc:	e004      	b.n	80187e8 <tcp_receive+0x364>
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80187e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80187f0:	4a98      	ldr	r2, [pc, #608]	@ (8018a54 <tcp_receive+0x5d0>)
 80187f2:	6878      	ldr	r0, [r7, #4]
 80187f4:	f7ff fdca 	bl	801838c <tcp_free_acked_segments>
 80187f8:	4602      	mov	r2, r0
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018806:	4a94      	ldr	r2, [pc, #592]	@ (8018a58 <tcp_receive+0x5d4>)
 8018808:	6878      	ldr	r0, [r7, #4]
 801880a:	f7ff fdbf 	bl	801838c <tcp_free_acked_segments>
 801880e:	4602      	mov	r2, r0
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018818:	2b00      	cmp	r3, #0
 801881a:	d104      	bne.n	8018826 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018822:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018824:	e002      	b.n	801882c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	2200      	movs	r2, #0
 801882a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	2200      	movs	r2, #0
 8018830:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018836:	2b00      	cmp	r3, #0
 8018838:	d103      	bne.n	8018842 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	2200      	movs	r2, #0
 801883e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018848:	4b84      	ldr	r3, [pc, #528]	@ (8018a5c <tcp_receive+0x5d8>)
 801884a:	881b      	ldrh	r3, [r3, #0]
 801884c:	4413      	add	r3, r2
 801884e:	b29a      	uxth	r2, r3
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	8b5b      	ldrh	r3, [r3, #26]
 801885a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801885e:	2b00      	cmp	r3, #0
 8018860:	d035      	beq.n	80188ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018866:	2b00      	cmp	r3, #0
 8018868:	d118      	bne.n	801889c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801886e:	2b00      	cmp	r3, #0
 8018870:	d00c      	beq.n	801888c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801887a:	68db      	ldr	r3, [r3, #12]
 801887c:	685b      	ldr	r3, [r3, #4]
 801887e:	4618      	mov	r0, r3
 8018880:	f7fa fdba 	bl	80133f8 <lwip_htonl>
 8018884:	4603      	mov	r3, r0
 8018886:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018888:	2b00      	cmp	r3, #0
 801888a:	dc20      	bgt.n	80188ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	8b5b      	ldrh	r3, [r3, #26]
 8018890:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018894:	b29a      	uxth	r2, r3
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801889a:	e018      	b.n	80188ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80188a4:	68db      	ldr	r3, [r3, #12]
 80188a6:	685b      	ldr	r3, [r3, #4]
 80188a8:	4618      	mov	r0, r3
 80188aa:	f7fa fda5 	bl	80133f8 <lwip_htonl>
 80188ae:	4603      	mov	r3, r0
 80188b0:	1ae3      	subs	r3, r4, r3
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	dc0b      	bgt.n	80188ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	8b5b      	ldrh	r3, [r3, #26]
 80188ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80188be:	b29a      	uxth	r2, r3
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80188c4:	e003      	b.n	80188ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80188c6:	6878      	ldr	r0, [r7, #4]
 80188c8:	f002 fc16 	bl	801b0f8 <tcp_send_empty_ack>
 80188cc:	e000      	b.n	80188d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80188ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d05b      	beq.n	8018990 <tcp_receive+0x50c>
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80188dc:	4b60      	ldr	r3, [pc, #384]	@ (8018a60 <tcp_receive+0x5dc>)
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	1ad3      	subs	r3, r2, r3
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	da54      	bge.n	8018990 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80188e6:	4b5f      	ldr	r3, [pc, #380]	@ (8018a64 <tcp_receive+0x5e0>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	b29a      	uxth	r2, r3
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80188f0:	b29b      	uxth	r3, r3
 80188f2:	1ad3      	subs	r3, r2, r3
 80188f4:	b29b      	uxth	r3, r3
 80188f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80188fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018904:	10db      	asrs	r3, r3, #3
 8018906:	b21b      	sxth	r3, r3
 8018908:	b29b      	uxth	r3, r3
 801890a:	1ad3      	subs	r3, r2, r3
 801890c:	b29b      	uxth	r3, r3
 801890e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018918:	b29a      	uxth	r2, r3
 801891a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801891e:	4413      	add	r3, r2
 8018920:	b29b      	uxth	r3, r3
 8018922:	b21a      	sxth	r2, r3
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018928:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801892c:	2b00      	cmp	r3, #0
 801892e:	da05      	bge.n	801893c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018930:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018934:	425b      	negs	r3, r3
 8018936:	b29b      	uxth	r3, r3
 8018938:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801893c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018946:	109b      	asrs	r3, r3, #2
 8018948:	b21b      	sxth	r3, r3
 801894a:	b29b      	uxth	r3, r3
 801894c:	1ad3      	subs	r3, r2, r3
 801894e:	b29b      	uxth	r3, r3
 8018950:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801895a:	b29a      	uxth	r2, r3
 801895c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018960:	4413      	add	r3, r2
 8018962:	b29b      	uxth	r3, r3
 8018964:	b21a      	sxth	r2, r3
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018970:	10db      	asrs	r3, r3, #3
 8018972:	b21b      	sxth	r3, r3
 8018974:	b29a      	uxth	r2, r3
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801897c:	b29b      	uxth	r3, r3
 801897e:	4413      	add	r3, r2
 8018980:	b29b      	uxth	r3, r3
 8018982:	b21a      	sxth	r2, r3
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2200      	movs	r2, #0
 801898e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018990:	4b35      	ldr	r3, [pc, #212]	@ (8018a68 <tcp_receive+0x5e4>)
 8018992:	881b      	ldrh	r3, [r3, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	f000 84df 	beq.w	8019358 <tcp_receive+0xed4>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	7d1b      	ldrb	r3, [r3, #20]
 801899e:	2b06      	cmp	r3, #6
 80189a0:	f200 84da 	bhi.w	8019358 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189a8:	4b30      	ldr	r3, [pc, #192]	@ (8018a6c <tcp_receive+0x5e8>)
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	1ad3      	subs	r3, r2, r3
 80189ae:	3b01      	subs	r3, #1
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f2c0 808f 	blt.w	8018ad4 <tcp_receive+0x650>
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189ba:	4b2b      	ldr	r3, [pc, #172]	@ (8018a68 <tcp_receive+0x5e4>)
 80189bc:	881b      	ldrh	r3, [r3, #0]
 80189be:	4619      	mov	r1, r3
 80189c0:	4b2a      	ldr	r3, [pc, #168]	@ (8018a6c <tcp_receive+0x5e8>)
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	440b      	add	r3, r1
 80189c6:	1ad3      	subs	r3, r2, r3
 80189c8:	3301      	adds	r3, #1
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	f300 8082 	bgt.w	8018ad4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80189d0:	4b27      	ldr	r3, [pc, #156]	@ (8018a70 <tcp_receive+0x5ec>)
 80189d2:	685b      	ldr	r3, [r3, #4]
 80189d4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189da:	4b24      	ldr	r3, [pc, #144]	@ (8018a6c <tcp_receive+0x5e8>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	1ad3      	subs	r3, r2, r3
 80189e0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80189e2:	4b23      	ldr	r3, [pc, #140]	@ (8018a70 <tcp_receive+0x5ec>)
 80189e4:	685b      	ldr	r3, [r3, #4]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d106      	bne.n	80189f8 <tcp_receive+0x574>
 80189ea:	4b22      	ldr	r3, [pc, #136]	@ (8018a74 <tcp_receive+0x5f0>)
 80189ec:	f240 5294 	movw	r2, #1428	@ 0x594
 80189f0:	4921      	ldr	r1, [pc, #132]	@ (8018a78 <tcp_receive+0x5f4>)
 80189f2:	4822      	ldr	r0, [pc, #136]	@ (8018a7c <tcp_receive+0x5f8>)
 80189f4:	f007 fc58 	bl	80202a8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80189f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80189fe:	4293      	cmp	r3, r2
 8018a00:	d906      	bls.n	8018a10 <tcp_receive+0x58c>
 8018a02:	4b1c      	ldr	r3, [pc, #112]	@ (8018a74 <tcp_receive+0x5f0>)
 8018a04:	f240 5295 	movw	r2, #1429	@ 0x595
 8018a08:	491d      	ldr	r1, [pc, #116]	@ (8018a80 <tcp_receive+0x5fc>)
 8018a0a:	481c      	ldr	r0, [pc, #112]	@ (8018a7c <tcp_receive+0x5f8>)
 8018a0c:	f007 fc4c 	bl	80202a8 <iprintf>
      off = (u16_t)off32;
 8018a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018a16:	4b16      	ldr	r3, [pc, #88]	@ (8018a70 <tcp_receive+0x5ec>)
 8018a18:	685b      	ldr	r3, [r3, #4]
 8018a1a:	891b      	ldrh	r3, [r3, #8]
 8018a1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a20:	429a      	cmp	r2, r3
 8018a22:	d906      	bls.n	8018a32 <tcp_receive+0x5ae>
 8018a24:	4b13      	ldr	r3, [pc, #76]	@ (8018a74 <tcp_receive+0x5f0>)
 8018a26:	f240 5297 	movw	r2, #1431	@ 0x597
 8018a2a:	4916      	ldr	r1, [pc, #88]	@ (8018a84 <tcp_receive+0x600>)
 8018a2c:	4813      	ldr	r0, [pc, #76]	@ (8018a7c <tcp_receive+0x5f8>)
 8018a2e:	f007 fc3b 	bl	80202a8 <iprintf>
      inseg.len -= off;
 8018a32:	4b0f      	ldr	r3, [pc, #60]	@ (8018a70 <tcp_receive+0x5ec>)
 8018a34:	891a      	ldrh	r2, [r3, #8]
 8018a36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018a3a:	1ad3      	subs	r3, r2, r3
 8018a3c:	b29a      	uxth	r2, r3
 8018a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8018a70 <tcp_receive+0x5ec>)
 8018a40:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018a42:	4b0b      	ldr	r3, [pc, #44]	@ (8018a70 <tcp_receive+0x5ec>)
 8018a44:	685b      	ldr	r3, [r3, #4]
 8018a46:	891a      	ldrh	r2, [r3, #8]
 8018a48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018a4c:	1ad3      	subs	r3, r2, r3
 8018a4e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8018a50:	e02a      	b.n	8018aa8 <tcp_receive+0x624>
 8018a52:	bf00      	nop
 8018a54:	08023444 	.word	0x08023444
 8018a58:	0802344c 	.word	0x0802344c
 8018a5c:	200253e8 	.word	0x200253e8
 8018a60:	200253e4 	.word	0x200253e4
 8018a64:	200253a8 	.word	0x200253a8
 8018a68:	200253ea 	.word	0x200253ea
 8018a6c:	200253e0 	.word	0x200253e0
 8018a70:	200253c0 	.word	0x200253c0
 8018a74:	080230dc 	.word	0x080230dc
 8018a78:	08023454 	.word	0x08023454
 8018a7c:	08023128 	.word	0x08023128
 8018a80:	08023464 	.word	0x08023464
 8018a84:	08023474 	.word	0x08023474
        off -= p->len;
 8018a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a8a:	895b      	ldrh	r3, [r3, #10]
 8018a8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a90:	1ad3      	subs	r3, r2, r3
 8018a92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a98:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018a9a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8018aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018aaa:	895b      	ldrh	r3, [r3, #10]
 8018aac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018ab0:	429a      	cmp	r2, r3
 8018ab2:	d8e9      	bhi.n	8018a88 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018ab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018ab8:	4619      	mov	r1, r3
 8018aba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018abc:	f7fc f8be 	bl	8014c3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ac4:	4a90      	ldr	r2, [pc, #576]	@ (8018d08 <tcp_receive+0x884>)
 8018ac6:	6013      	str	r3, [r2, #0]
 8018ac8:	4b90      	ldr	r3, [pc, #576]	@ (8018d0c <tcp_receive+0x888>)
 8018aca:	68db      	ldr	r3, [r3, #12]
 8018acc:	4a8e      	ldr	r2, [pc, #568]	@ (8018d08 <tcp_receive+0x884>)
 8018ace:	6812      	ldr	r2, [r2, #0]
 8018ad0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018ad2:	e00d      	b.n	8018af0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018ad4:	4b8c      	ldr	r3, [pc, #560]	@ (8018d08 <tcp_receive+0x884>)
 8018ad6:	681a      	ldr	r2, [r3, #0]
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018adc:	1ad3      	subs	r3, r2, r3
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	da06      	bge.n	8018af0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	8b5b      	ldrh	r3, [r3, #26]
 8018ae6:	f043 0302 	orr.w	r3, r3, #2
 8018aea:	b29a      	uxth	r2, r3
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018af0:	4b85      	ldr	r3, [pc, #532]	@ (8018d08 <tcp_receive+0x884>)
 8018af2:	681a      	ldr	r2, [r3, #0]
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018af8:	1ad3      	subs	r3, r2, r3
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	f2c0 8427 	blt.w	801934e <tcp_receive+0xeca>
 8018b00:	4b81      	ldr	r3, [pc, #516]	@ (8018d08 <tcp_receive+0x884>)
 8018b02:	681a      	ldr	r2, [r3, #0]
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b08:	6879      	ldr	r1, [r7, #4]
 8018b0a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018b0c:	440b      	add	r3, r1
 8018b0e:	1ad3      	subs	r3, r2, r3
 8018b10:	3301      	adds	r3, #1
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	f300 841b 	bgt.w	801934e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b1c:	4b7a      	ldr	r3, [pc, #488]	@ (8018d08 <tcp_receive+0x884>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	429a      	cmp	r2, r3
 8018b22:	f040 8298 	bne.w	8019056 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018b26:	4b79      	ldr	r3, [pc, #484]	@ (8018d0c <tcp_receive+0x888>)
 8018b28:	891c      	ldrh	r4, [r3, #8]
 8018b2a:	4b78      	ldr	r3, [pc, #480]	@ (8018d0c <tcp_receive+0x888>)
 8018b2c:	68db      	ldr	r3, [r3, #12]
 8018b2e:	899b      	ldrh	r3, [r3, #12]
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	4618      	mov	r0, r3
 8018b34:	f7fa fc4a 	bl	80133cc <lwip_htons>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	f003 0303 	and.w	r3, r3, #3
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d001      	beq.n	8018b48 <tcp_receive+0x6c4>
 8018b44:	2301      	movs	r3, #1
 8018b46:	e000      	b.n	8018b4a <tcp_receive+0x6c6>
 8018b48:	2300      	movs	r3, #0
 8018b4a:	4423      	add	r3, r4
 8018b4c:	b29a      	uxth	r2, r3
 8018b4e:	4b70      	ldr	r3, [pc, #448]	@ (8018d10 <tcp_receive+0x88c>)
 8018b50:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018b56:	4b6e      	ldr	r3, [pc, #440]	@ (8018d10 <tcp_receive+0x88c>)
 8018b58:	881b      	ldrh	r3, [r3, #0]
 8018b5a:	429a      	cmp	r2, r3
 8018b5c:	d274      	bcs.n	8018c48 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018b5e:	4b6b      	ldr	r3, [pc, #428]	@ (8018d0c <tcp_receive+0x888>)
 8018b60:	68db      	ldr	r3, [r3, #12]
 8018b62:	899b      	ldrh	r3, [r3, #12]
 8018b64:	b29b      	uxth	r3, r3
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7fa fc30 	bl	80133cc <lwip_htons>
 8018b6c:	4603      	mov	r3, r0
 8018b6e:	b2db      	uxtb	r3, r3
 8018b70:	f003 0301 	and.w	r3, r3, #1
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d01e      	beq.n	8018bb6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018b78:	4b64      	ldr	r3, [pc, #400]	@ (8018d0c <tcp_receive+0x888>)
 8018b7a:	68db      	ldr	r3, [r3, #12]
 8018b7c:	899b      	ldrh	r3, [r3, #12]
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	b21b      	sxth	r3, r3
 8018b82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018b86:	b21c      	sxth	r4, r3
 8018b88:	4b60      	ldr	r3, [pc, #384]	@ (8018d0c <tcp_receive+0x888>)
 8018b8a:	68db      	ldr	r3, [r3, #12]
 8018b8c:	899b      	ldrh	r3, [r3, #12]
 8018b8e:	b29b      	uxth	r3, r3
 8018b90:	4618      	mov	r0, r3
 8018b92:	f7fa fc1b 	bl	80133cc <lwip_htons>
 8018b96:	4603      	mov	r3, r0
 8018b98:	b2db      	uxtb	r3, r3
 8018b9a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018b9e:	b29b      	uxth	r3, r3
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7fa fc13 	bl	80133cc <lwip_htons>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	b21b      	sxth	r3, r3
 8018baa:	4323      	orrs	r3, r4
 8018bac:	b21a      	sxth	r2, r3
 8018bae:	4b57      	ldr	r3, [pc, #348]	@ (8018d0c <tcp_receive+0x888>)
 8018bb0:	68db      	ldr	r3, [r3, #12]
 8018bb2:	b292      	uxth	r2, r2
 8018bb4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018bba:	4b54      	ldr	r3, [pc, #336]	@ (8018d0c <tcp_receive+0x888>)
 8018bbc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018bbe:	4b53      	ldr	r3, [pc, #332]	@ (8018d0c <tcp_receive+0x888>)
 8018bc0:	68db      	ldr	r3, [r3, #12]
 8018bc2:	899b      	ldrh	r3, [r3, #12]
 8018bc4:	b29b      	uxth	r3, r3
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7fa fc00 	bl	80133cc <lwip_htons>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	b2db      	uxtb	r3, r3
 8018bd0:	f003 0302 	and.w	r3, r3, #2
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d005      	beq.n	8018be4 <tcp_receive+0x760>
            inseg.len -= 1;
 8018bd8:	4b4c      	ldr	r3, [pc, #304]	@ (8018d0c <tcp_receive+0x888>)
 8018bda:	891b      	ldrh	r3, [r3, #8]
 8018bdc:	3b01      	subs	r3, #1
 8018bde:	b29a      	uxth	r2, r3
 8018be0:	4b4a      	ldr	r3, [pc, #296]	@ (8018d0c <tcp_receive+0x888>)
 8018be2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018be4:	4b49      	ldr	r3, [pc, #292]	@ (8018d0c <tcp_receive+0x888>)
 8018be6:	685b      	ldr	r3, [r3, #4]
 8018be8:	4a48      	ldr	r2, [pc, #288]	@ (8018d0c <tcp_receive+0x888>)
 8018bea:	8912      	ldrh	r2, [r2, #8]
 8018bec:	4611      	mov	r1, r2
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7fb ff24 	bl	8014a3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018bf4:	4b45      	ldr	r3, [pc, #276]	@ (8018d0c <tcp_receive+0x888>)
 8018bf6:	891c      	ldrh	r4, [r3, #8]
 8018bf8:	4b44      	ldr	r3, [pc, #272]	@ (8018d0c <tcp_receive+0x888>)
 8018bfa:	68db      	ldr	r3, [r3, #12]
 8018bfc:	899b      	ldrh	r3, [r3, #12]
 8018bfe:	b29b      	uxth	r3, r3
 8018c00:	4618      	mov	r0, r3
 8018c02:	f7fa fbe3 	bl	80133cc <lwip_htons>
 8018c06:	4603      	mov	r3, r0
 8018c08:	b2db      	uxtb	r3, r3
 8018c0a:	f003 0303 	and.w	r3, r3, #3
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d001      	beq.n	8018c16 <tcp_receive+0x792>
 8018c12:	2301      	movs	r3, #1
 8018c14:	e000      	b.n	8018c18 <tcp_receive+0x794>
 8018c16:	2300      	movs	r3, #0
 8018c18:	4423      	add	r3, r4
 8018c1a:	b29a      	uxth	r2, r3
 8018c1c:	4b3c      	ldr	r3, [pc, #240]	@ (8018d10 <tcp_receive+0x88c>)
 8018c1e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018c20:	4b3b      	ldr	r3, [pc, #236]	@ (8018d10 <tcp_receive+0x88c>)
 8018c22:	881b      	ldrh	r3, [r3, #0]
 8018c24:	461a      	mov	r2, r3
 8018c26:	4b38      	ldr	r3, [pc, #224]	@ (8018d08 <tcp_receive+0x884>)
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	441a      	add	r2, r3
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c30:	6879      	ldr	r1, [r7, #4]
 8018c32:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018c34:	440b      	add	r3, r1
 8018c36:	429a      	cmp	r2, r3
 8018c38:	d006      	beq.n	8018c48 <tcp_receive+0x7c4>
 8018c3a:	4b36      	ldr	r3, [pc, #216]	@ (8018d14 <tcp_receive+0x890>)
 8018c3c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018c40:	4935      	ldr	r1, [pc, #212]	@ (8018d18 <tcp_receive+0x894>)
 8018c42:	4836      	ldr	r0, [pc, #216]	@ (8018d1c <tcp_receive+0x898>)
 8018c44:	f007 fb30 	bl	80202a8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	f000 80e6 	beq.w	8018e1e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018c52:	4b2e      	ldr	r3, [pc, #184]	@ (8018d0c <tcp_receive+0x888>)
 8018c54:	68db      	ldr	r3, [r3, #12]
 8018c56:	899b      	ldrh	r3, [r3, #12]
 8018c58:	b29b      	uxth	r3, r3
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	f7fa fbb6 	bl	80133cc <lwip_htons>
 8018c60:	4603      	mov	r3, r0
 8018c62:	b2db      	uxtb	r3, r3
 8018c64:	f003 0301 	and.w	r3, r3, #1
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d010      	beq.n	8018c8e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018c6c:	e00a      	b.n	8018c84 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c72:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c78:	681a      	ldr	r2, [r3, #0]
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8018c7e:	68f8      	ldr	r0, [r7, #12]
 8018c80:	f7fd fc35 	bl	80164ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d1f0      	bne.n	8018c6e <tcp_receive+0x7ea>
 8018c8c:	e0c7      	b.n	8018e1e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018c94:	e051      	b.n	8018d3a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c98:	68db      	ldr	r3, [r3, #12]
 8018c9a:	899b      	ldrh	r3, [r3, #12]
 8018c9c:	b29b      	uxth	r3, r3
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	f7fa fb94 	bl	80133cc <lwip_htons>
 8018ca4:	4603      	mov	r3, r0
 8018ca6:	b2db      	uxtb	r3, r3
 8018ca8:	f003 0301 	and.w	r3, r3, #1
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d03c      	beq.n	8018d2a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018cb0:	4b16      	ldr	r3, [pc, #88]	@ (8018d0c <tcp_receive+0x888>)
 8018cb2:	68db      	ldr	r3, [r3, #12]
 8018cb4:	899b      	ldrh	r3, [r3, #12]
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7fa fb87 	bl	80133cc <lwip_htons>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	b2db      	uxtb	r3, r3
 8018cc2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d12f      	bne.n	8018d2a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018cca:	4b10      	ldr	r3, [pc, #64]	@ (8018d0c <tcp_receive+0x888>)
 8018ccc:	68db      	ldr	r3, [r3, #12]
 8018cce:	899b      	ldrh	r3, [r3, #12]
 8018cd0:	b29c      	uxth	r4, r3
 8018cd2:	2001      	movs	r0, #1
 8018cd4:	f7fa fb7a 	bl	80133cc <lwip_htons>
 8018cd8:	4603      	mov	r3, r0
 8018cda:	461a      	mov	r2, r3
 8018cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8018d0c <tcp_receive+0x888>)
 8018cde:	68db      	ldr	r3, [r3, #12]
 8018ce0:	4322      	orrs	r2, r4
 8018ce2:	b292      	uxth	r2, r2
 8018ce4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018ce6:	4b09      	ldr	r3, [pc, #36]	@ (8018d0c <tcp_receive+0x888>)
 8018ce8:	891c      	ldrh	r4, [r3, #8]
 8018cea:	4b08      	ldr	r3, [pc, #32]	@ (8018d0c <tcp_receive+0x888>)
 8018cec:	68db      	ldr	r3, [r3, #12]
 8018cee:	899b      	ldrh	r3, [r3, #12]
 8018cf0:	b29b      	uxth	r3, r3
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7fa fb6a 	bl	80133cc <lwip_htons>
 8018cf8:	4603      	mov	r3, r0
 8018cfa:	b2db      	uxtb	r3, r3
 8018cfc:	f003 0303 	and.w	r3, r3, #3
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d00d      	beq.n	8018d20 <tcp_receive+0x89c>
 8018d04:	2301      	movs	r3, #1
 8018d06:	e00c      	b.n	8018d22 <tcp_receive+0x89e>
 8018d08:	200253e0 	.word	0x200253e0
 8018d0c:	200253c0 	.word	0x200253c0
 8018d10:	200253ea 	.word	0x200253ea
 8018d14:	080230dc 	.word	0x080230dc
 8018d18:	08023484 	.word	0x08023484
 8018d1c:	08023128 	.word	0x08023128
 8018d20:	2300      	movs	r3, #0
 8018d22:	4423      	add	r3, r4
 8018d24:	b29a      	uxth	r2, r3
 8018d26:	4b98      	ldr	r3, [pc, #608]	@ (8018f88 <tcp_receive+0xb04>)
 8018d28:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d2c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018d34:	6938      	ldr	r0, [r7, #16]
 8018d36:	f7fd fbda 	bl	80164ee <tcp_seg_free>
            while (next &&
 8018d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d00e      	beq.n	8018d5e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018d40:	4b91      	ldr	r3, [pc, #580]	@ (8018f88 <tcp_receive+0xb04>)
 8018d42:	881b      	ldrh	r3, [r3, #0]
 8018d44:	461a      	mov	r2, r3
 8018d46:	4b91      	ldr	r3, [pc, #580]	@ (8018f8c <tcp_receive+0xb08>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	441a      	add	r2, r3
 8018d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d4e:	68db      	ldr	r3, [r3, #12]
 8018d50:	685b      	ldr	r3, [r3, #4]
 8018d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018d54:	8909      	ldrh	r1, [r1, #8]
 8018d56:	440b      	add	r3, r1
 8018d58:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	da9b      	bge.n	8018c96 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d059      	beq.n	8018e18 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018d64:	4b88      	ldr	r3, [pc, #544]	@ (8018f88 <tcp_receive+0xb04>)
 8018d66:	881b      	ldrh	r3, [r3, #0]
 8018d68:	461a      	mov	r2, r3
 8018d6a:	4b88      	ldr	r3, [pc, #544]	@ (8018f8c <tcp_receive+0xb08>)
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	441a      	add	r2, r3
 8018d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d72:	68db      	ldr	r3, [r3, #12]
 8018d74:	685b      	ldr	r3, [r3, #4]
 8018d76:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	dd4d      	ble.n	8018e18 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d7e:	68db      	ldr	r3, [r3, #12]
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	b29a      	uxth	r2, r3
 8018d84:	4b81      	ldr	r3, [pc, #516]	@ (8018f8c <tcp_receive+0xb08>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	b29b      	uxth	r3, r3
 8018d8a:	1ad3      	subs	r3, r2, r3
 8018d8c:	b29a      	uxth	r2, r3
 8018d8e:	4b80      	ldr	r3, [pc, #512]	@ (8018f90 <tcp_receive+0xb0c>)
 8018d90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018d92:	4b7f      	ldr	r3, [pc, #508]	@ (8018f90 <tcp_receive+0xb0c>)
 8018d94:	68db      	ldr	r3, [r3, #12]
 8018d96:	899b      	ldrh	r3, [r3, #12]
 8018d98:	b29b      	uxth	r3, r3
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7fa fb16 	bl	80133cc <lwip_htons>
 8018da0:	4603      	mov	r3, r0
 8018da2:	b2db      	uxtb	r3, r3
 8018da4:	f003 0302 	and.w	r3, r3, #2
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d005      	beq.n	8018db8 <tcp_receive+0x934>
                inseg.len -= 1;
 8018dac:	4b78      	ldr	r3, [pc, #480]	@ (8018f90 <tcp_receive+0xb0c>)
 8018dae:	891b      	ldrh	r3, [r3, #8]
 8018db0:	3b01      	subs	r3, #1
 8018db2:	b29a      	uxth	r2, r3
 8018db4:	4b76      	ldr	r3, [pc, #472]	@ (8018f90 <tcp_receive+0xb0c>)
 8018db6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018db8:	4b75      	ldr	r3, [pc, #468]	@ (8018f90 <tcp_receive+0xb0c>)
 8018dba:	685b      	ldr	r3, [r3, #4]
 8018dbc:	4a74      	ldr	r2, [pc, #464]	@ (8018f90 <tcp_receive+0xb0c>)
 8018dbe:	8912      	ldrh	r2, [r2, #8]
 8018dc0:	4611      	mov	r1, r2
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f7fb fe3a 	bl	8014a3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018dc8:	4b71      	ldr	r3, [pc, #452]	@ (8018f90 <tcp_receive+0xb0c>)
 8018dca:	891c      	ldrh	r4, [r3, #8]
 8018dcc:	4b70      	ldr	r3, [pc, #448]	@ (8018f90 <tcp_receive+0xb0c>)
 8018dce:	68db      	ldr	r3, [r3, #12]
 8018dd0:	899b      	ldrh	r3, [r3, #12]
 8018dd2:	b29b      	uxth	r3, r3
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f7fa faf9 	bl	80133cc <lwip_htons>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	f003 0303 	and.w	r3, r3, #3
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d001      	beq.n	8018dea <tcp_receive+0x966>
 8018de6:	2301      	movs	r3, #1
 8018de8:	e000      	b.n	8018dec <tcp_receive+0x968>
 8018dea:	2300      	movs	r3, #0
 8018dec:	4423      	add	r3, r4
 8018dee:	b29a      	uxth	r2, r3
 8018df0:	4b65      	ldr	r3, [pc, #404]	@ (8018f88 <tcp_receive+0xb04>)
 8018df2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018df4:	4b64      	ldr	r3, [pc, #400]	@ (8018f88 <tcp_receive+0xb04>)
 8018df6:	881b      	ldrh	r3, [r3, #0]
 8018df8:	461a      	mov	r2, r3
 8018dfa:	4b64      	ldr	r3, [pc, #400]	@ (8018f8c <tcp_receive+0xb08>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	441a      	add	r2, r3
 8018e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e02:	68db      	ldr	r3, [r3, #12]
 8018e04:	685b      	ldr	r3, [r3, #4]
 8018e06:	429a      	cmp	r2, r3
 8018e08:	d006      	beq.n	8018e18 <tcp_receive+0x994>
 8018e0a:	4b62      	ldr	r3, [pc, #392]	@ (8018f94 <tcp_receive+0xb10>)
 8018e0c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018e10:	4961      	ldr	r1, [pc, #388]	@ (8018f98 <tcp_receive+0xb14>)
 8018e12:	4862      	ldr	r0, [pc, #392]	@ (8018f9c <tcp_receive+0xb18>)
 8018e14:	f007 fa48 	bl	80202a8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018e1c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018e1e:	4b5a      	ldr	r3, [pc, #360]	@ (8018f88 <tcp_receive+0xb04>)
 8018e20:	881b      	ldrh	r3, [r3, #0]
 8018e22:	461a      	mov	r2, r3
 8018e24:	4b59      	ldr	r3, [pc, #356]	@ (8018f8c <tcp_receive+0xb08>)
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	441a      	add	r2, r3
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018e32:	4b55      	ldr	r3, [pc, #340]	@ (8018f88 <tcp_receive+0xb04>)
 8018e34:	881b      	ldrh	r3, [r3, #0]
 8018e36:	429a      	cmp	r2, r3
 8018e38:	d206      	bcs.n	8018e48 <tcp_receive+0x9c4>
 8018e3a:	4b56      	ldr	r3, [pc, #344]	@ (8018f94 <tcp_receive+0xb10>)
 8018e3c:	f240 6207 	movw	r2, #1543	@ 0x607
 8018e40:	4957      	ldr	r1, [pc, #348]	@ (8018fa0 <tcp_receive+0xb1c>)
 8018e42:	4856      	ldr	r0, [pc, #344]	@ (8018f9c <tcp_receive+0xb18>)
 8018e44:	f007 fa30 	bl	80202a8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8018f88 <tcp_receive+0xb04>)
 8018e4e:	881b      	ldrh	r3, [r3, #0]
 8018e50:	1ad3      	subs	r3, r2, r3
 8018e52:	b29a      	uxth	r2, r3
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f7fc fe21 	bl	8015aa0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8018f90 <tcp_receive+0xb0c>)
 8018e60:	685b      	ldr	r3, [r3, #4]
 8018e62:	891b      	ldrh	r3, [r3, #8]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d006      	beq.n	8018e76 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018e68:	4b49      	ldr	r3, [pc, #292]	@ (8018f90 <tcp_receive+0xb0c>)
 8018e6a:	685b      	ldr	r3, [r3, #4]
 8018e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8018fa4 <tcp_receive+0xb20>)
 8018e6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018e70:	4b47      	ldr	r3, [pc, #284]	@ (8018f90 <tcp_receive+0xb0c>)
 8018e72:	2200      	movs	r2, #0
 8018e74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018e76:	4b46      	ldr	r3, [pc, #280]	@ (8018f90 <tcp_receive+0xb0c>)
 8018e78:	68db      	ldr	r3, [r3, #12]
 8018e7a:	899b      	ldrh	r3, [r3, #12]
 8018e7c:	b29b      	uxth	r3, r3
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f7fa faa4 	bl	80133cc <lwip_htons>
 8018e84:	4603      	mov	r3, r0
 8018e86:	b2db      	uxtb	r3, r3
 8018e88:	f003 0301 	and.w	r3, r3, #1
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	f000 80b8 	beq.w	8019002 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018e92:	4b45      	ldr	r3, [pc, #276]	@ (8018fa8 <tcp_receive+0xb24>)
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	f043 0320 	orr.w	r3, r3, #32
 8018e9a:	b2da      	uxtb	r2, r3
 8018e9c:	4b42      	ldr	r3, [pc, #264]	@ (8018fa8 <tcp_receive+0xb24>)
 8018e9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018ea0:	e0af      	b.n	8019002 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ea6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018eac:	68db      	ldr	r3, [r3, #12]
 8018eae:	685b      	ldr	r3, [r3, #4]
 8018eb0:	4a36      	ldr	r2, [pc, #216]	@ (8018f8c <tcp_receive+0xb08>)
 8018eb2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	891b      	ldrh	r3, [r3, #8]
 8018eb8:	461c      	mov	r4, r3
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	68db      	ldr	r3, [r3, #12]
 8018ebe:	899b      	ldrh	r3, [r3, #12]
 8018ec0:	b29b      	uxth	r3, r3
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7fa fa82 	bl	80133cc <lwip_htons>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	b2db      	uxtb	r3, r3
 8018ecc:	f003 0303 	and.w	r3, r3, #3
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d001      	beq.n	8018ed8 <tcp_receive+0xa54>
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	e000      	b.n	8018eda <tcp_receive+0xa56>
 8018ed8:	2300      	movs	r3, #0
 8018eda:	191a      	adds	r2, r3, r4
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ee0:	441a      	add	r2, r3
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018eea:	461c      	mov	r4, r3
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	891b      	ldrh	r3, [r3, #8]
 8018ef0:	461d      	mov	r5, r3
 8018ef2:	68bb      	ldr	r3, [r7, #8]
 8018ef4:	68db      	ldr	r3, [r3, #12]
 8018ef6:	899b      	ldrh	r3, [r3, #12]
 8018ef8:	b29b      	uxth	r3, r3
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7fa fa66 	bl	80133cc <lwip_htons>
 8018f00:	4603      	mov	r3, r0
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	f003 0303 	and.w	r3, r3, #3
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d001      	beq.n	8018f10 <tcp_receive+0xa8c>
 8018f0c:	2301      	movs	r3, #1
 8018f0e:	e000      	b.n	8018f12 <tcp_receive+0xa8e>
 8018f10:	2300      	movs	r3, #0
 8018f12:	442b      	add	r3, r5
 8018f14:	429c      	cmp	r4, r3
 8018f16:	d206      	bcs.n	8018f26 <tcp_receive+0xaa2>
 8018f18:	4b1e      	ldr	r3, [pc, #120]	@ (8018f94 <tcp_receive+0xb10>)
 8018f1a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8018f1e:	4923      	ldr	r1, [pc, #140]	@ (8018fac <tcp_receive+0xb28>)
 8018f20:	481e      	ldr	r0, [pc, #120]	@ (8018f9c <tcp_receive+0xb18>)
 8018f22:	f007 f9c1 	bl	80202a8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018f26:	68bb      	ldr	r3, [r7, #8]
 8018f28:	891b      	ldrh	r3, [r3, #8]
 8018f2a:	461c      	mov	r4, r3
 8018f2c:	68bb      	ldr	r3, [r7, #8]
 8018f2e:	68db      	ldr	r3, [r3, #12]
 8018f30:	899b      	ldrh	r3, [r3, #12]
 8018f32:	b29b      	uxth	r3, r3
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7fa fa49 	bl	80133cc <lwip_htons>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	b2db      	uxtb	r3, r3
 8018f3e:	f003 0303 	and.w	r3, r3, #3
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d001      	beq.n	8018f4a <tcp_receive+0xac6>
 8018f46:	2301      	movs	r3, #1
 8018f48:	e000      	b.n	8018f4c <tcp_receive+0xac8>
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	1919      	adds	r1, r3, r4
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018f52:	b28b      	uxth	r3, r1
 8018f54:	1ad3      	subs	r3, r2, r3
 8018f56:	b29a      	uxth	r2, r3
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018f5c:	6878      	ldr	r0, [r7, #4]
 8018f5e:	f7fc fd9f 	bl	8015aa0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018f62:	68bb      	ldr	r3, [r7, #8]
 8018f64:	685b      	ldr	r3, [r3, #4]
 8018f66:	891b      	ldrh	r3, [r3, #8]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d028      	beq.n	8018fbe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8018fa4 <tcp_receive+0xb20>)
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d01d      	beq.n	8018fb0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018f74:	4b0b      	ldr	r3, [pc, #44]	@ (8018fa4 <tcp_receive+0xb20>)
 8018f76:	681a      	ldr	r2, [r3, #0]
 8018f78:	68bb      	ldr	r3, [r7, #8]
 8018f7a:	685b      	ldr	r3, [r3, #4]
 8018f7c:	4619      	mov	r1, r3
 8018f7e:	4610      	mov	r0, r2
 8018f80:	f7fb ffb0 	bl	8014ee4 <pbuf_cat>
 8018f84:	e018      	b.n	8018fb8 <tcp_receive+0xb34>
 8018f86:	bf00      	nop
 8018f88:	200253ea 	.word	0x200253ea
 8018f8c:	200253e0 	.word	0x200253e0
 8018f90:	200253c0 	.word	0x200253c0
 8018f94:	080230dc 	.word	0x080230dc
 8018f98:	080234bc 	.word	0x080234bc
 8018f9c:	08023128 	.word	0x08023128
 8018fa0:	080234f8 	.word	0x080234f8
 8018fa4:	200253f0 	.word	0x200253f0
 8018fa8:	200253ed 	.word	0x200253ed
 8018fac:	08023518 	.word	0x08023518
            } else {
              recv_data = cseg->p;
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	685b      	ldr	r3, [r3, #4]
 8018fb4:	4a70      	ldr	r2, [pc, #448]	@ (8019178 <tcp_receive+0xcf4>)
 8018fb6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	2200      	movs	r2, #0
 8018fbc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018fbe:	68bb      	ldr	r3, [r7, #8]
 8018fc0:	68db      	ldr	r3, [r3, #12]
 8018fc2:	899b      	ldrh	r3, [r3, #12]
 8018fc4:	b29b      	uxth	r3, r3
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7fa fa00 	bl	80133cc <lwip_htons>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	b2db      	uxtb	r3, r3
 8018fd0:	f003 0301 	and.w	r3, r3, #1
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d00d      	beq.n	8018ff4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018fd8:	4b68      	ldr	r3, [pc, #416]	@ (801917c <tcp_receive+0xcf8>)
 8018fda:	781b      	ldrb	r3, [r3, #0]
 8018fdc:	f043 0320 	orr.w	r3, r3, #32
 8018fe0:	b2da      	uxtb	r2, r3
 8018fe2:	4b66      	ldr	r3, [pc, #408]	@ (801917c <tcp_receive+0xcf8>)
 8018fe4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	7d1b      	ldrb	r3, [r3, #20]
 8018fea:	2b04      	cmp	r3, #4
 8018fec:	d102      	bne.n	8018ff4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	2207      	movs	r2, #7
 8018ff2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018ff4:	68bb      	ldr	r3, [r7, #8]
 8018ff6:	681a      	ldr	r2, [r3, #0]
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018ffc:	68b8      	ldr	r0, [r7, #8]
 8018ffe:	f7fd fa76 	bl	80164ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019006:	2b00      	cmp	r3, #0
 8019008:	d008      	beq.n	801901c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801900e:	68db      	ldr	r3, [r3, #12]
 8019010:	685a      	ldr	r2, [r3, #4]
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8019016:	429a      	cmp	r2, r3
 8019018:	f43f af43 	beq.w	8018ea2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	8b5b      	ldrh	r3, [r3, #26]
 8019020:	f003 0301 	and.w	r3, r3, #1
 8019024:	2b00      	cmp	r3, #0
 8019026:	d00e      	beq.n	8019046 <tcp_receive+0xbc2>
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	8b5b      	ldrh	r3, [r3, #26]
 801902c:	f023 0301 	bic.w	r3, r3, #1
 8019030:	b29a      	uxth	r2, r3
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	835a      	strh	r2, [r3, #26]
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	8b5b      	ldrh	r3, [r3, #26]
 801903a:	f043 0302 	orr.w	r3, r3, #2
 801903e:	b29a      	uxth	r2, r3
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019044:	e187      	b.n	8019356 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	8b5b      	ldrh	r3, [r3, #26]
 801904a:	f043 0301 	orr.w	r3, r3, #1
 801904e:	b29a      	uxth	r2, r3
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019054:	e17f      	b.n	8019356 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801905a:	2b00      	cmp	r3, #0
 801905c:	d106      	bne.n	801906c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801905e:	4848      	ldr	r0, [pc, #288]	@ (8019180 <tcp_receive+0xcfc>)
 8019060:	f7fd fa5e 	bl	8016520 <tcp_seg_copy>
 8019064:	4602      	mov	r2, r0
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	675a      	str	r2, [r3, #116]	@ 0x74
 801906a:	e16c      	b.n	8019346 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801906c:	2300      	movs	r3, #0
 801906e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019074:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019076:	e156      	b.n	8019326 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8019078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801907a:	68db      	ldr	r3, [r3, #12]
 801907c:	685a      	ldr	r2, [r3, #4]
 801907e:	4b41      	ldr	r3, [pc, #260]	@ (8019184 <tcp_receive+0xd00>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	429a      	cmp	r2, r3
 8019084:	d11d      	bne.n	80190c2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019086:	4b3e      	ldr	r3, [pc, #248]	@ (8019180 <tcp_receive+0xcfc>)
 8019088:	891a      	ldrh	r2, [r3, #8]
 801908a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801908c:	891b      	ldrh	r3, [r3, #8]
 801908e:	429a      	cmp	r2, r3
 8019090:	f240 814e 	bls.w	8019330 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019094:	483a      	ldr	r0, [pc, #232]	@ (8019180 <tcp_receive+0xcfc>)
 8019096:	f7fd fa43 	bl	8016520 <tcp_seg_copy>
 801909a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801909c:	697b      	ldr	r3, [r7, #20]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	f000 8148 	beq.w	8019334 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80190a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d003      	beq.n	80190b2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80190aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190ac:	697a      	ldr	r2, [r7, #20]
 80190ae:	601a      	str	r2, [r3, #0]
 80190b0:	e002      	b.n	80190b8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	697a      	ldr	r2, [r7, #20]
 80190b6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80190b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80190ba:	6978      	ldr	r0, [r7, #20]
 80190bc:	f7ff f8de 	bl	801827c <tcp_oos_insert_segment>
                }
                break;
 80190c0:	e138      	b.n	8019334 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80190c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d117      	bne.n	80190f8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80190c8:	4b2e      	ldr	r3, [pc, #184]	@ (8019184 <tcp_receive+0xd00>)
 80190ca:	681a      	ldr	r2, [r3, #0]
 80190cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190ce:	68db      	ldr	r3, [r3, #12]
 80190d0:	685b      	ldr	r3, [r3, #4]
 80190d2:	1ad3      	subs	r3, r2, r3
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	da57      	bge.n	8019188 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80190d8:	4829      	ldr	r0, [pc, #164]	@ (8019180 <tcp_receive+0xcfc>)
 80190da:	f7fd fa21 	bl	8016520 <tcp_seg_copy>
 80190de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80190e0:	69bb      	ldr	r3, [r7, #24]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	f000 8128 	beq.w	8019338 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	69ba      	ldr	r2, [r7, #24]
 80190ec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80190ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80190f0:	69b8      	ldr	r0, [r7, #24]
 80190f2:	f7ff f8c3 	bl	801827c <tcp_oos_insert_segment>
                  }
                  break;
 80190f6:	e11f      	b.n	8019338 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80190f8:	4b22      	ldr	r3, [pc, #136]	@ (8019184 <tcp_receive+0xd00>)
 80190fa:	681a      	ldr	r2, [r3, #0]
 80190fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190fe:	68db      	ldr	r3, [r3, #12]
 8019100:	685b      	ldr	r3, [r3, #4]
 8019102:	1ad3      	subs	r3, r2, r3
 8019104:	3b01      	subs	r3, #1
 8019106:	2b00      	cmp	r3, #0
 8019108:	db3e      	blt.n	8019188 <tcp_receive+0xd04>
 801910a:	4b1e      	ldr	r3, [pc, #120]	@ (8019184 <tcp_receive+0xd00>)
 801910c:	681a      	ldr	r2, [r3, #0]
 801910e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019110:	68db      	ldr	r3, [r3, #12]
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	1ad3      	subs	r3, r2, r3
 8019116:	3301      	adds	r3, #1
 8019118:	2b00      	cmp	r3, #0
 801911a:	dc35      	bgt.n	8019188 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801911c:	4818      	ldr	r0, [pc, #96]	@ (8019180 <tcp_receive+0xcfc>)
 801911e:	f7fd f9ff 	bl	8016520 <tcp_seg_copy>
 8019122:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019124:	69fb      	ldr	r3, [r7, #28]
 8019126:	2b00      	cmp	r3, #0
 8019128:	f000 8108 	beq.w	801933c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801912c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801912e:	68db      	ldr	r3, [r3, #12]
 8019130:	685b      	ldr	r3, [r3, #4]
 8019132:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019134:	8912      	ldrh	r2, [r2, #8]
 8019136:	441a      	add	r2, r3
 8019138:	4b12      	ldr	r3, [pc, #72]	@ (8019184 <tcp_receive+0xd00>)
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	1ad3      	subs	r3, r2, r3
 801913e:	2b00      	cmp	r3, #0
 8019140:	dd12      	ble.n	8019168 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019142:	4b10      	ldr	r3, [pc, #64]	@ (8019184 <tcp_receive+0xd00>)
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	b29a      	uxth	r2, r3
 8019148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801914a:	68db      	ldr	r3, [r3, #12]
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	b29b      	uxth	r3, r3
 8019150:	1ad3      	subs	r3, r2, r3
 8019152:	b29a      	uxth	r2, r3
 8019154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019156:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801915a:	685a      	ldr	r2, [r3, #4]
 801915c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801915e:	891b      	ldrh	r3, [r3, #8]
 8019160:	4619      	mov	r1, r3
 8019162:	4610      	mov	r0, r2
 8019164:	f7fb fc6a 	bl	8014a3c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801916a:	69fa      	ldr	r2, [r7, #28]
 801916c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801916e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019170:	69f8      	ldr	r0, [r7, #28]
 8019172:	f7ff f883 	bl	801827c <tcp_oos_insert_segment>
                  }
                  break;
 8019176:	e0e1      	b.n	801933c <tcp_receive+0xeb8>
 8019178:	200253f0 	.word	0x200253f0
 801917c:	200253ed 	.word	0x200253ed
 8019180:	200253c0 	.word	0x200253c0
 8019184:	200253e0 	.word	0x200253e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801918a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	2b00      	cmp	r3, #0
 8019192:	f040 80c5 	bne.w	8019320 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019196:	4b7f      	ldr	r3, [pc, #508]	@ (8019394 <tcp_receive+0xf10>)
 8019198:	681a      	ldr	r2, [r3, #0]
 801919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801919c:	68db      	ldr	r3, [r3, #12]
 801919e:	685b      	ldr	r3, [r3, #4]
 80191a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	f340 80bc 	ble.w	8019320 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80191a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191aa:	68db      	ldr	r3, [r3, #12]
 80191ac:	899b      	ldrh	r3, [r3, #12]
 80191ae:	b29b      	uxth	r3, r3
 80191b0:	4618      	mov	r0, r3
 80191b2:	f7fa f90b 	bl	80133cc <lwip_htons>
 80191b6:	4603      	mov	r3, r0
 80191b8:	b2db      	uxtb	r3, r3
 80191ba:	f003 0301 	and.w	r3, r3, #1
 80191be:	2b00      	cmp	r3, #0
 80191c0:	f040 80be 	bne.w	8019340 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80191c4:	4874      	ldr	r0, [pc, #464]	@ (8019398 <tcp_receive+0xf14>)
 80191c6:	f7fd f9ab 	bl	8016520 <tcp_seg_copy>
 80191ca:	4602      	mov	r2, r0
 80191cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80191d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	f000 80b5 	beq.w	8019344 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80191da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191dc:	68db      	ldr	r3, [r3, #12]
 80191de:	685b      	ldr	r3, [r3, #4]
 80191e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80191e2:	8912      	ldrh	r2, [r2, #8]
 80191e4:	441a      	add	r2, r3
 80191e6:	4b6b      	ldr	r3, [pc, #428]	@ (8019394 <tcp_receive+0xf10>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	1ad3      	subs	r3, r2, r3
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	dd12      	ble.n	8019216 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80191f0:	4b68      	ldr	r3, [pc, #416]	@ (8019394 <tcp_receive+0xf10>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	b29a      	uxth	r2, r3
 80191f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191f8:	68db      	ldr	r3, [r3, #12]
 80191fa:	685b      	ldr	r3, [r3, #4]
 80191fc:	b29b      	uxth	r3, r3
 80191fe:	1ad3      	subs	r3, r2, r3
 8019200:	b29a      	uxth	r2, r3
 8019202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019204:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019208:	685a      	ldr	r2, [r3, #4]
 801920a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801920c:	891b      	ldrh	r3, [r3, #8]
 801920e:	4619      	mov	r1, r3
 8019210:	4610      	mov	r0, r2
 8019212:	f7fb fc13 	bl	8014a3c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019216:	4b61      	ldr	r3, [pc, #388]	@ (801939c <tcp_receive+0xf18>)
 8019218:	881b      	ldrh	r3, [r3, #0]
 801921a:	461a      	mov	r2, r3
 801921c:	4b5d      	ldr	r3, [pc, #372]	@ (8019394 <tcp_receive+0xf10>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	441a      	add	r2, r3
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019226:	6879      	ldr	r1, [r7, #4]
 8019228:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801922a:	440b      	add	r3, r1
 801922c:	1ad3      	subs	r3, r2, r3
 801922e:	2b00      	cmp	r3, #0
 8019230:	f340 8088 	ble.w	8019344 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	68db      	ldr	r3, [r3, #12]
 801923a:	899b      	ldrh	r3, [r3, #12]
 801923c:	b29b      	uxth	r3, r3
 801923e:	4618      	mov	r0, r3
 8019240:	f7fa f8c4 	bl	80133cc <lwip_htons>
 8019244:	4603      	mov	r3, r0
 8019246:	b2db      	uxtb	r3, r3
 8019248:	f003 0301 	and.w	r3, r3, #1
 801924c:	2b00      	cmp	r3, #0
 801924e:	d021      	beq.n	8019294 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	68db      	ldr	r3, [r3, #12]
 8019256:	899b      	ldrh	r3, [r3, #12]
 8019258:	b29b      	uxth	r3, r3
 801925a:	b21b      	sxth	r3, r3
 801925c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019260:	b21c      	sxth	r4, r3
 8019262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	68db      	ldr	r3, [r3, #12]
 8019268:	899b      	ldrh	r3, [r3, #12]
 801926a:	b29b      	uxth	r3, r3
 801926c:	4618      	mov	r0, r3
 801926e:	f7fa f8ad 	bl	80133cc <lwip_htons>
 8019272:	4603      	mov	r3, r0
 8019274:	b2db      	uxtb	r3, r3
 8019276:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801927a:	b29b      	uxth	r3, r3
 801927c:	4618      	mov	r0, r3
 801927e:	f7fa f8a5 	bl	80133cc <lwip_htons>
 8019282:	4603      	mov	r3, r0
 8019284:	b21b      	sxth	r3, r3
 8019286:	4323      	orrs	r3, r4
 8019288:	b21a      	sxth	r2, r3
 801928a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	68db      	ldr	r3, [r3, #12]
 8019290:	b292      	uxth	r2, r2
 8019292:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019298:	b29a      	uxth	r2, r3
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801929e:	4413      	add	r3, r2
 80192a0:	b299      	uxth	r1, r3
 80192a2:	4b3c      	ldr	r3, [pc, #240]	@ (8019394 <tcp_receive+0xf10>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	b29a      	uxth	r2, r3
 80192a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	1a8a      	subs	r2, r1, r2
 80192ae:	b292      	uxth	r2, r2
 80192b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80192b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	685a      	ldr	r2, [r3, #4]
 80192b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	891b      	ldrh	r3, [r3, #8]
 80192be:	4619      	mov	r1, r3
 80192c0:	4610      	mov	r0, r2
 80192c2:	f7fb fbbb 	bl	8014a3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80192c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	891c      	ldrh	r4, [r3, #8]
 80192cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	68db      	ldr	r3, [r3, #12]
 80192d2:	899b      	ldrh	r3, [r3, #12]
 80192d4:	b29b      	uxth	r3, r3
 80192d6:	4618      	mov	r0, r3
 80192d8:	f7fa f878 	bl	80133cc <lwip_htons>
 80192dc:	4603      	mov	r3, r0
 80192de:	b2db      	uxtb	r3, r3
 80192e0:	f003 0303 	and.w	r3, r3, #3
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d001      	beq.n	80192ec <tcp_receive+0xe68>
 80192e8:	2301      	movs	r3, #1
 80192ea:	e000      	b.n	80192ee <tcp_receive+0xe6a>
 80192ec:	2300      	movs	r3, #0
 80192ee:	4423      	add	r3, r4
 80192f0:	b29a      	uxth	r2, r3
 80192f2:	4b2a      	ldr	r3, [pc, #168]	@ (801939c <tcp_receive+0xf18>)
 80192f4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80192f6:	4b29      	ldr	r3, [pc, #164]	@ (801939c <tcp_receive+0xf18>)
 80192f8:	881b      	ldrh	r3, [r3, #0]
 80192fa:	461a      	mov	r2, r3
 80192fc:	4b25      	ldr	r3, [pc, #148]	@ (8019394 <tcp_receive+0xf10>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	441a      	add	r2, r3
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019306:	6879      	ldr	r1, [r7, #4]
 8019308:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801930a:	440b      	add	r3, r1
 801930c:	429a      	cmp	r2, r3
 801930e:	d019      	beq.n	8019344 <tcp_receive+0xec0>
 8019310:	4b23      	ldr	r3, [pc, #140]	@ (80193a0 <tcp_receive+0xf1c>)
 8019312:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8019316:	4923      	ldr	r1, [pc, #140]	@ (80193a4 <tcp_receive+0xf20>)
 8019318:	4823      	ldr	r0, [pc, #140]	@ (80193a8 <tcp_receive+0xf24>)
 801931a:	f006 ffc5 	bl	80202a8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801931e:	e011      	b.n	8019344 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019328:	2b00      	cmp	r3, #0
 801932a:	f47f aea5 	bne.w	8019078 <tcp_receive+0xbf4>
 801932e:	e00a      	b.n	8019346 <tcp_receive+0xec2>
                break;
 8019330:	bf00      	nop
 8019332:	e008      	b.n	8019346 <tcp_receive+0xec2>
                break;
 8019334:	bf00      	nop
 8019336:	e006      	b.n	8019346 <tcp_receive+0xec2>
                  break;
 8019338:	bf00      	nop
 801933a:	e004      	b.n	8019346 <tcp_receive+0xec2>
                  break;
 801933c:	bf00      	nop
 801933e:	e002      	b.n	8019346 <tcp_receive+0xec2>
                  break;
 8019340:	bf00      	nop
 8019342:	e000      	b.n	8019346 <tcp_receive+0xec2>
                break;
 8019344:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019346:	6878      	ldr	r0, [r7, #4]
 8019348:	f001 fed6 	bl	801b0f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801934c:	e003      	b.n	8019356 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801934e:	6878      	ldr	r0, [r7, #4]
 8019350:	f001 fed2 	bl	801b0f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019354:	e01a      	b.n	801938c <tcp_receive+0xf08>
 8019356:	e019      	b.n	801938c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019358:	4b0e      	ldr	r3, [pc, #56]	@ (8019394 <tcp_receive+0xf10>)
 801935a:	681a      	ldr	r2, [r3, #0]
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019360:	1ad3      	subs	r3, r2, r3
 8019362:	2b00      	cmp	r3, #0
 8019364:	db0a      	blt.n	801937c <tcp_receive+0xef8>
 8019366:	4b0b      	ldr	r3, [pc, #44]	@ (8019394 <tcp_receive+0xf10>)
 8019368:	681a      	ldr	r2, [r3, #0]
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801936e:	6879      	ldr	r1, [r7, #4]
 8019370:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019372:	440b      	add	r3, r1
 8019374:	1ad3      	subs	r3, r2, r3
 8019376:	3301      	adds	r3, #1
 8019378:	2b00      	cmp	r3, #0
 801937a:	dd07      	ble.n	801938c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	8b5b      	ldrh	r3, [r3, #26]
 8019380:	f043 0302 	orr.w	r3, r3, #2
 8019384:	b29a      	uxth	r2, r3
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801938a:	e7ff      	b.n	801938c <tcp_receive+0xf08>
 801938c:	bf00      	nop
 801938e:	3750      	adds	r7, #80	@ 0x50
 8019390:	46bd      	mov	sp, r7
 8019392:	bdb0      	pop	{r4, r5, r7, pc}
 8019394:	200253e0 	.word	0x200253e0
 8019398:	200253c0 	.word	0x200253c0
 801939c:	200253ea 	.word	0x200253ea
 80193a0:	080230dc 	.word	0x080230dc
 80193a4:	08023484 	.word	0x08023484
 80193a8:	08023128 	.word	0x08023128

080193ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80193ac:	b480      	push	{r7}
 80193ae:	b083      	sub	sp, #12
 80193b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80193b2:	4b15      	ldr	r3, [pc, #84]	@ (8019408 <tcp_get_next_optbyte+0x5c>)
 80193b4:	881b      	ldrh	r3, [r3, #0]
 80193b6:	1c5a      	adds	r2, r3, #1
 80193b8:	b291      	uxth	r1, r2
 80193ba:	4a13      	ldr	r2, [pc, #76]	@ (8019408 <tcp_get_next_optbyte+0x5c>)
 80193bc:	8011      	strh	r1, [r2, #0]
 80193be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80193c0:	4b12      	ldr	r3, [pc, #72]	@ (801940c <tcp_get_next_optbyte+0x60>)
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d004      	beq.n	80193d2 <tcp_get_next_optbyte+0x26>
 80193c8:	4b11      	ldr	r3, [pc, #68]	@ (8019410 <tcp_get_next_optbyte+0x64>)
 80193ca:	881b      	ldrh	r3, [r3, #0]
 80193cc:	88fa      	ldrh	r2, [r7, #6]
 80193ce:	429a      	cmp	r2, r3
 80193d0:	d208      	bcs.n	80193e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80193d2:	4b10      	ldr	r3, [pc, #64]	@ (8019414 <tcp_get_next_optbyte+0x68>)
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	3314      	adds	r3, #20
 80193d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80193da:	88fb      	ldrh	r3, [r7, #6]
 80193dc:	683a      	ldr	r2, [r7, #0]
 80193de:	4413      	add	r3, r2
 80193e0:	781b      	ldrb	r3, [r3, #0]
 80193e2:	e00b      	b.n	80193fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80193e4:	88fb      	ldrh	r3, [r7, #6]
 80193e6:	b2da      	uxtb	r2, r3
 80193e8:	4b09      	ldr	r3, [pc, #36]	@ (8019410 <tcp_get_next_optbyte+0x64>)
 80193ea:	881b      	ldrh	r3, [r3, #0]
 80193ec:	b2db      	uxtb	r3, r3
 80193ee:	1ad3      	subs	r3, r2, r3
 80193f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80193f2:	4b06      	ldr	r3, [pc, #24]	@ (801940c <tcp_get_next_optbyte+0x60>)
 80193f4:	681a      	ldr	r2, [r3, #0]
 80193f6:	797b      	ldrb	r3, [r7, #5]
 80193f8:	4413      	add	r3, r2
 80193fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	370c      	adds	r7, #12
 8019400:	46bd      	mov	sp, r7
 8019402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019406:	4770      	bx	lr
 8019408:	200253dc 	.word	0x200253dc
 801940c:	200253d8 	.word	0x200253d8
 8019410:	200253d6 	.word	0x200253d6
 8019414:	200253d0 	.word	0x200253d0

08019418 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b084      	sub	sp, #16
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d106      	bne.n	8019434 <tcp_parseopt+0x1c>
 8019426:	4b32      	ldr	r3, [pc, #200]	@ (80194f0 <tcp_parseopt+0xd8>)
 8019428:	f240 727d 	movw	r2, #1917	@ 0x77d
 801942c:	4931      	ldr	r1, [pc, #196]	@ (80194f4 <tcp_parseopt+0xdc>)
 801942e:	4832      	ldr	r0, [pc, #200]	@ (80194f8 <tcp_parseopt+0xe0>)
 8019430:	f006 ff3a 	bl	80202a8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019434:	4b31      	ldr	r3, [pc, #196]	@ (80194fc <tcp_parseopt+0xe4>)
 8019436:	881b      	ldrh	r3, [r3, #0]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d056      	beq.n	80194ea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801943c:	4b30      	ldr	r3, [pc, #192]	@ (8019500 <tcp_parseopt+0xe8>)
 801943e:	2200      	movs	r2, #0
 8019440:	801a      	strh	r2, [r3, #0]
 8019442:	e046      	b.n	80194d2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8019444:	f7ff ffb2 	bl	80193ac <tcp_get_next_optbyte>
 8019448:	4603      	mov	r3, r0
 801944a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801944c:	7bfb      	ldrb	r3, [r7, #15]
 801944e:	2b02      	cmp	r3, #2
 8019450:	d006      	beq.n	8019460 <tcp_parseopt+0x48>
 8019452:	2b02      	cmp	r3, #2
 8019454:	dc2a      	bgt.n	80194ac <tcp_parseopt+0x94>
 8019456:	2b00      	cmp	r3, #0
 8019458:	d042      	beq.n	80194e0 <tcp_parseopt+0xc8>
 801945a:	2b01      	cmp	r3, #1
 801945c:	d038      	beq.n	80194d0 <tcp_parseopt+0xb8>
 801945e:	e025      	b.n	80194ac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019460:	f7ff ffa4 	bl	80193ac <tcp_get_next_optbyte>
 8019464:	4603      	mov	r3, r0
 8019466:	2b04      	cmp	r3, #4
 8019468:	d13c      	bne.n	80194e4 <tcp_parseopt+0xcc>
 801946a:	4b25      	ldr	r3, [pc, #148]	@ (8019500 <tcp_parseopt+0xe8>)
 801946c:	881b      	ldrh	r3, [r3, #0]
 801946e:	3301      	adds	r3, #1
 8019470:	4a22      	ldr	r2, [pc, #136]	@ (80194fc <tcp_parseopt+0xe4>)
 8019472:	8812      	ldrh	r2, [r2, #0]
 8019474:	4293      	cmp	r3, r2
 8019476:	da35      	bge.n	80194e4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019478:	f7ff ff98 	bl	80193ac <tcp_get_next_optbyte>
 801947c:	4603      	mov	r3, r0
 801947e:	021b      	lsls	r3, r3, #8
 8019480:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019482:	f7ff ff93 	bl	80193ac <tcp_get_next_optbyte>
 8019486:	4603      	mov	r3, r0
 8019488:	461a      	mov	r2, r3
 801948a:	89bb      	ldrh	r3, [r7, #12]
 801948c:	4313      	orrs	r3, r2
 801948e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019490:	89bb      	ldrh	r3, [r7, #12]
 8019492:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8019496:	d804      	bhi.n	80194a2 <tcp_parseopt+0x8a>
 8019498:	89bb      	ldrh	r3, [r7, #12]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d001      	beq.n	80194a2 <tcp_parseopt+0x8a>
 801949e:	89ba      	ldrh	r2, [r7, #12]
 80194a0:	e001      	b.n	80194a6 <tcp_parseopt+0x8e>
 80194a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80194aa:	e012      	b.n	80194d2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80194ac:	f7ff ff7e 	bl	80193ac <tcp_get_next_optbyte>
 80194b0:	4603      	mov	r3, r0
 80194b2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80194b4:	7afb      	ldrb	r3, [r7, #11]
 80194b6:	2b01      	cmp	r3, #1
 80194b8:	d916      	bls.n	80194e8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80194ba:	7afb      	ldrb	r3, [r7, #11]
 80194bc:	b29a      	uxth	r2, r3
 80194be:	4b10      	ldr	r3, [pc, #64]	@ (8019500 <tcp_parseopt+0xe8>)
 80194c0:	881b      	ldrh	r3, [r3, #0]
 80194c2:	4413      	add	r3, r2
 80194c4:	b29b      	uxth	r3, r3
 80194c6:	3b02      	subs	r3, #2
 80194c8:	b29a      	uxth	r2, r3
 80194ca:	4b0d      	ldr	r3, [pc, #52]	@ (8019500 <tcp_parseopt+0xe8>)
 80194cc:	801a      	strh	r2, [r3, #0]
 80194ce:	e000      	b.n	80194d2 <tcp_parseopt+0xba>
          break;
 80194d0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80194d2:	4b0b      	ldr	r3, [pc, #44]	@ (8019500 <tcp_parseopt+0xe8>)
 80194d4:	881a      	ldrh	r2, [r3, #0]
 80194d6:	4b09      	ldr	r3, [pc, #36]	@ (80194fc <tcp_parseopt+0xe4>)
 80194d8:	881b      	ldrh	r3, [r3, #0]
 80194da:	429a      	cmp	r2, r3
 80194dc:	d3b2      	bcc.n	8019444 <tcp_parseopt+0x2c>
 80194de:	e004      	b.n	80194ea <tcp_parseopt+0xd2>
          return;
 80194e0:	bf00      	nop
 80194e2:	e002      	b.n	80194ea <tcp_parseopt+0xd2>
            return;
 80194e4:	bf00      	nop
 80194e6:	e000      	b.n	80194ea <tcp_parseopt+0xd2>
            return;
 80194e8:	bf00      	nop
      }
    }
  }
}
 80194ea:	3710      	adds	r7, #16
 80194ec:	46bd      	mov	sp, r7
 80194ee:	bd80      	pop	{r7, pc}
 80194f0:	080230dc 	.word	0x080230dc
 80194f4:	08023540 	.word	0x08023540
 80194f8:	08023128 	.word	0x08023128
 80194fc:	200253d4 	.word	0x200253d4
 8019500:	200253dc 	.word	0x200253dc

08019504 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019504:	b480      	push	{r7}
 8019506:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019508:	4b05      	ldr	r3, [pc, #20]	@ (8019520 <tcp_trigger_input_pcb_close+0x1c>)
 801950a:	781b      	ldrb	r3, [r3, #0]
 801950c:	f043 0310 	orr.w	r3, r3, #16
 8019510:	b2da      	uxtb	r2, r3
 8019512:	4b03      	ldr	r3, [pc, #12]	@ (8019520 <tcp_trigger_input_pcb_close+0x1c>)
 8019514:	701a      	strb	r2, [r3, #0]
}
 8019516:	bf00      	nop
 8019518:	46bd      	mov	sp, r7
 801951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951e:	4770      	bx	lr
 8019520:	200253ed 	.word	0x200253ed

08019524 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b084      	sub	sp, #16
 8019528:	af00      	add	r7, sp, #0
 801952a:	60f8      	str	r0, [r7, #12]
 801952c:	60b9      	str	r1, [r7, #8]
 801952e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d00a      	beq.n	801954c <tcp_route+0x28>
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	7a1b      	ldrb	r3, [r3, #8]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d006      	beq.n	801954c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	7a1b      	ldrb	r3, [r3, #8]
 8019542:	4618      	mov	r0, r3
 8019544:	f7fb f872 	bl	801462c <netif_get_by_index>
 8019548:	4603      	mov	r3, r0
 801954a:	e003      	b.n	8019554 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801954c:	6878      	ldr	r0, [r7, #4]
 801954e:	f003 ff4d 	bl	801d3ec <ip4_route>
 8019552:	4603      	mov	r3, r0
  }
}
 8019554:	4618      	mov	r0, r3
 8019556:	3710      	adds	r7, #16
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}

0801955c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801955c:	b590      	push	{r4, r7, lr}
 801955e:	b087      	sub	sp, #28
 8019560:	af00      	add	r7, sp, #0
 8019562:	60f8      	str	r0, [r7, #12]
 8019564:	60b9      	str	r1, [r7, #8]
 8019566:	603b      	str	r3, [r7, #0]
 8019568:	4613      	mov	r3, r2
 801956a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d105      	bne.n	801957e <tcp_create_segment+0x22>
 8019572:	4b47      	ldr	r3, [pc, #284]	@ (8019690 <tcp_create_segment+0x134>)
 8019574:	22a3      	movs	r2, #163	@ 0xa3
 8019576:	4947      	ldr	r1, [pc, #284]	@ (8019694 <tcp_create_segment+0x138>)
 8019578:	4847      	ldr	r0, [pc, #284]	@ (8019698 <tcp_create_segment+0x13c>)
 801957a:	f006 fe95 	bl	80202a8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801957e:	68bb      	ldr	r3, [r7, #8]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d105      	bne.n	8019590 <tcp_create_segment+0x34>
 8019584:	4b42      	ldr	r3, [pc, #264]	@ (8019690 <tcp_create_segment+0x134>)
 8019586:	22a4      	movs	r2, #164	@ 0xa4
 8019588:	4944      	ldr	r1, [pc, #272]	@ (801969c <tcp_create_segment+0x140>)
 801958a:	4843      	ldr	r0, [pc, #268]	@ (8019698 <tcp_create_segment+0x13c>)
 801958c:	f006 fe8c 	bl	80202a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019590:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019594:	009b      	lsls	r3, r3, #2
 8019596:	b2db      	uxtb	r3, r3
 8019598:	f003 0304 	and.w	r3, r3, #4
 801959c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801959e:	2003      	movs	r0, #3
 80195a0:	f7fa fcb2 	bl	8013f08 <memp_malloc>
 80195a4:	6138      	str	r0, [r7, #16]
 80195a6:	693b      	ldr	r3, [r7, #16]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d104      	bne.n	80195b6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80195ac:	68b8      	ldr	r0, [r7, #8]
 80195ae:	f7fb fbcb 	bl	8014d48 <pbuf_free>
    return NULL;
 80195b2:	2300      	movs	r3, #0
 80195b4:	e068      	b.n	8019688 <tcp_create_segment+0x12c>
  }
  seg->flags = optflags;
 80195b6:	693b      	ldr	r3, [r7, #16]
 80195b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80195bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80195be:	693b      	ldr	r3, [r7, #16]
 80195c0:	2200      	movs	r2, #0
 80195c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80195c4:	693b      	ldr	r3, [r7, #16]
 80195c6:	68ba      	ldr	r2, [r7, #8]
 80195c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80195ca:	68bb      	ldr	r3, [r7, #8]
 80195cc:	891a      	ldrh	r2, [r3, #8]
 80195ce:	7dfb      	ldrb	r3, [r7, #23]
 80195d0:	b29b      	uxth	r3, r3
 80195d2:	429a      	cmp	r2, r3
 80195d4:	d205      	bcs.n	80195e2 <tcp_create_segment+0x86>
 80195d6:	4b2e      	ldr	r3, [pc, #184]	@ (8019690 <tcp_create_segment+0x134>)
 80195d8:	22b0      	movs	r2, #176	@ 0xb0
 80195da:	4931      	ldr	r1, [pc, #196]	@ (80196a0 <tcp_create_segment+0x144>)
 80195dc:	482e      	ldr	r0, [pc, #184]	@ (8019698 <tcp_create_segment+0x13c>)
 80195de:	f006 fe63 	bl	80202a8 <iprintf>
  seg->len = p->tot_len - optlen;
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	891a      	ldrh	r2, [r3, #8]
 80195e6:	7dfb      	ldrb	r3, [r7, #23]
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	1ad3      	subs	r3, r2, r3
 80195ec:	b29a      	uxth	r2, r3
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80195f2:	2114      	movs	r1, #20
 80195f4:	68b8      	ldr	r0, [r7, #8]
 80195f6:	f7fb fb11 	bl	8014c1c <pbuf_add_header>
 80195fa:	4603      	mov	r3, r0
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d00c      	beq.n	801961a <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8019600:	4b28      	ldr	r3, [pc, #160]	@ (80196a4 <tcp_create_segment+0x148>)
 8019602:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8019606:	3301      	adds	r3, #1
 8019608:	b29a      	uxth	r2, r3
 801960a:	4b26      	ldr	r3, [pc, #152]	@ (80196a4 <tcp_create_segment+0x148>)
 801960c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 8019610:	6938      	ldr	r0, [r7, #16]
 8019612:	f7fc ff6c 	bl	80164ee <tcp_seg_free>
    return NULL;
 8019616:	2300      	movs	r3, #0
 8019618:	e036      	b.n	8019688 <tcp_create_segment+0x12c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801961a:	693b      	ldr	r3, [r7, #16]
 801961c:	685b      	ldr	r3, [r3, #4]
 801961e:	685a      	ldr	r2, [r3, #4]
 8019620:	693b      	ldr	r3, [r7, #16]
 8019622:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	8ada      	ldrh	r2, [r3, #22]
 8019628:	693b      	ldr	r3, [r7, #16]
 801962a:	68dc      	ldr	r4, [r3, #12]
 801962c:	4610      	mov	r0, r2
 801962e:	f7f9 fecd 	bl	80133cc <lwip_htons>
 8019632:	4603      	mov	r3, r0
 8019634:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	8b1a      	ldrh	r2, [r3, #24]
 801963a:	693b      	ldr	r3, [r7, #16]
 801963c:	68dc      	ldr	r4, [r3, #12]
 801963e:	4610      	mov	r0, r2
 8019640:	f7f9 fec4 	bl	80133cc <lwip_htons>
 8019644:	4603      	mov	r3, r0
 8019646:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019648:	693b      	ldr	r3, [r7, #16]
 801964a:	68dc      	ldr	r4, [r3, #12]
 801964c:	6838      	ldr	r0, [r7, #0]
 801964e:	f7f9 fed3 	bl	80133f8 <lwip_htonl>
 8019652:	4603      	mov	r3, r0
 8019654:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019656:	7dfb      	ldrb	r3, [r7, #23]
 8019658:	089b      	lsrs	r3, r3, #2
 801965a:	b2db      	uxtb	r3, r3
 801965c:	3305      	adds	r3, #5
 801965e:	b29b      	uxth	r3, r3
 8019660:	031b      	lsls	r3, r3, #12
 8019662:	b29a      	uxth	r2, r3
 8019664:	79fb      	ldrb	r3, [r7, #7]
 8019666:	b29b      	uxth	r3, r3
 8019668:	4313      	orrs	r3, r2
 801966a:	b29a      	uxth	r2, r3
 801966c:	693b      	ldr	r3, [r7, #16]
 801966e:	68dc      	ldr	r4, [r3, #12]
 8019670:	4610      	mov	r0, r2
 8019672:	f7f9 feab 	bl	80133cc <lwip_htons>
 8019676:	4603      	mov	r3, r0
 8019678:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801967a:	693b      	ldr	r3, [r7, #16]
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	2200      	movs	r2, #0
 8019680:	749a      	strb	r2, [r3, #18]
 8019682:	2200      	movs	r2, #0
 8019684:	74da      	strb	r2, [r3, #19]
  return seg;
 8019686:	693b      	ldr	r3, [r7, #16]
}
 8019688:	4618      	mov	r0, r3
 801968a:	371c      	adds	r7, #28
 801968c:	46bd      	mov	sp, r7
 801968e:	bd90      	pop	{r4, r7, pc}
 8019690:	0802355c 	.word	0x0802355c
 8019694:	08023590 	.word	0x08023590
 8019698:	080235b0 	.word	0x080235b0
 801969c:	080235d8 	.word	0x080235d8
 80196a0:	080235fc 	.word	0x080235fc
 80196a4:	200252ac 	.word	0x200252ac

080196a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b086      	sub	sp, #24
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	607b      	str	r3, [r7, #4]
 80196b0:	4603      	mov	r3, r0
 80196b2:	73fb      	strb	r3, [r7, #15]
 80196b4:	460b      	mov	r3, r1
 80196b6:	81bb      	strh	r3, [r7, #12]
 80196b8:	4613      	mov	r3, r2
 80196ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80196bc:	89bb      	ldrh	r3, [r7, #12]
 80196be:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d105      	bne.n	80196d2 <tcp_pbuf_prealloc+0x2a>
 80196c6:	4b30      	ldr	r3, [pc, #192]	@ (8019788 <tcp_pbuf_prealloc+0xe0>)
 80196c8:	22e8      	movs	r2, #232	@ 0xe8
 80196ca:	4930      	ldr	r1, [pc, #192]	@ (801978c <tcp_pbuf_prealloc+0xe4>)
 80196cc:	4830      	ldr	r0, [pc, #192]	@ (8019790 <tcp_pbuf_prealloc+0xe8>)
 80196ce:	f006 fdeb 	bl	80202a8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80196d2:	6a3b      	ldr	r3, [r7, #32]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d105      	bne.n	80196e4 <tcp_pbuf_prealloc+0x3c>
 80196d8:	4b2b      	ldr	r3, [pc, #172]	@ (8019788 <tcp_pbuf_prealloc+0xe0>)
 80196da:	22e9      	movs	r2, #233	@ 0xe9
 80196dc:	492d      	ldr	r1, [pc, #180]	@ (8019794 <tcp_pbuf_prealloc+0xec>)
 80196de:	482c      	ldr	r0, [pc, #176]	@ (8019790 <tcp_pbuf_prealloc+0xe8>)
 80196e0:	f006 fde2 	bl	80202a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80196e4:	89ba      	ldrh	r2, [r7, #12]
 80196e6:	897b      	ldrh	r3, [r7, #10]
 80196e8:	429a      	cmp	r2, r3
 80196ea:	d221      	bcs.n	8019730 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80196ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80196f0:	f003 0302 	and.w	r3, r3, #2
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d111      	bne.n	801971c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80196f8:	6a3b      	ldr	r3, [r7, #32]
 80196fa:	8b5b      	ldrh	r3, [r3, #26]
 80196fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019700:	2b00      	cmp	r3, #0
 8019702:	d115      	bne.n	8019730 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019704:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019708:	2b00      	cmp	r3, #0
 801970a:	d007      	beq.n	801971c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801970c:	6a3b      	ldr	r3, [r7, #32]
 801970e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019710:	2b00      	cmp	r3, #0
 8019712:	d103      	bne.n	801971c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019714:	6a3b      	ldr	r3, [r7, #32]
 8019716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8019718:	2b00      	cmp	r3, #0
 801971a:	d009      	beq.n	8019730 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801971c:	89bb      	ldrh	r3, [r7, #12]
 801971e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019722:	f023 0203 	bic.w	r2, r3, #3
 8019726:	897b      	ldrh	r3, [r7, #10]
 8019728:	4293      	cmp	r3, r2
 801972a:	bf28      	it	cs
 801972c:	4613      	movcs	r3, r2
 801972e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019730:	8af9      	ldrh	r1, [r7, #22]
 8019732:	7bfb      	ldrb	r3, [r7, #15]
 8019734:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019738:	4618      	mov	r0, r3
 801973a:	f7fb f821 	bl	8014780 <pbuf_alloc>
 801973e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d101      	bne.n	801974a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019746:	2300      	movs	r3, #0
 8019748:	e019      	b.n	801977e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801974a:	693b      	ldr	r3, [r7, #16]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d006      	beq.n	8019760 <tcp_pbuf_prealloc+0xb8>
 8019752:	4b0d      	ldr	r3, [pc, #52]	@ (8019788 <tcp_pbuf_prealloc+0xe0>)
 8019754:	f240 120b 	movw	r2, #267	@ 0x10b
 8019758:	490f      	ldr	r1, [pc, #60]	@ (8019798 <tcp_pbuf_prealloc+0xf0>)
 801975a:	480d      	ldr	r0, [pc, #52]	@ (8019790 <tcp_pbuf_prealloc+0xe8>)
 801975c:	f006 fda4 	bl	80202a8 <iprintf>
  *oversize = p->len - length;
 8019760:	693b      	ldr	r3, [r7, #16]
 8019762:	895a      	ldrh	r2, [r3, #10]
 8019764:	89bb      	ldrh	r3, [r7, #12]
 8019766:	1ad3      	subs	r3, r2, r3
 8019768:	b29a      	uxth	r2, r3
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801976e:	693b      	ldr	r3, [r7, #16]
 8019770:	89ba      	ldrh	r2, [r7, #12]
 8019772:	811a      	strh	r2, [r3, #8]
 8019774:	693b      	ldr	r3, [r7, #16]
 8019776:	891a      	ldrh	r2, [r3, #8]
 8019778:	693b      	ldr	r3, [r7, #16]
 801977a:	815a      	strh	r2, [r3, #10]
  return p;
 801977c:	693b      	ldr	r3, [r7, #16]
}
 801977e:	4618      	mov	r0, r3
 8019780:	3718      	adds	r7, #24
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}
 8019786:	bf00      	nop
 8019788:	0802355c 	.word	0x0802355c
 801978c:	08023614 	.word	0x08023614
 8019790:	080235b0 	.word	0x080235b0
 8019794:	08023638 	.word	0x08023638
 8019798:	08023658 	.word	0x08023658

0801979c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b082      	sub	sp, #8
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	460b      	mov	r3, r1
 80197a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d106      	bne.n	80197bc <tcp_write_checks+0x20>
 80197ae:	4b37      	ldr	r3, [pc, #220]	@ (801988c <tcp_write_checks+0xf0>)
 80197b0:	f240 1233 	movw	r2, #307	@ 0x133
 80197b4:	4936      	ldr	r1, [pc, #216]	@ (8019890 <tcp_write_checks+0xf4>)
 80197b6:	4837      	ldr	r0, [pc, #220]	@ (8019894 <tcp_write_checks+0xf8>)
 80197b8:	f006 fd76 	bl	80202a8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	7d1b      	ldrb	r3, [r3, #20]
 80197c0:	2b04      	cmp	r3, #4
 80197c2:	d00e      	beq.n	80197e2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80197c8:	2b07      	cmp	r3, #7
 80197ca:	d00a      	beq.n	80197e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80197d0:	2b02      	cmp	r3, #2
 80197d2:	d006      	beq.n	80197e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80197d8:	2b03      	cmp	r3, #3
 80197da:	d002      	beq.n	80197e2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80197dc:	f06f 030a 	mvn.w	r3, #10
 80197e0:	e050      	b.n	8019884 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 80197e2:	887b      	ldrh	r3, [r7, #2]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d101      	bne.n	80197ec <tcp_write_checks+0x50>
    return ERR_OK;
 80197e8:	2300      	movs	r3, #0
 80197ea:	e04b      	b.n	8019884 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80197f2:	887a      	ldrh	r2, [r7, #2]
 80197f4:	429a      	cmp	r2, r3
 80197f6:	d909      	bls.n	801980c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	8b5b      	ldrh	r3, [r3, #26]
 80197fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019800:	b29a      	uxth	r2, r3
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801980a:	e03b      	b.n	8019884 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019812:	2b08      	cmp	r3, #8
 8019814:	d911      	bls.n	801983a <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8019816:	4b20      	ldr	r3, [pc, #128]	@ (8019898 <tcp_write_checks+0xfc>)
 8019818:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801981c:	3301      	adds	r3, #1
 801981e:	b29a      	uxth	r2, r3
 8019820:	4b1d      	ldr	r3, [pc, #116]	@ (8019898 <tcp_write_checks+0xfc>)
 8019822:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	8b5b      	ldrh	r3, [r3, #26]
 801982a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801982e:	b29a      	uxth	r2, r3
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019834:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019838:	e024      	b.n	8019884 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019840:	2b00      	cmp	r3, #0
 8019842:	d00f      	beq.n	8019864 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019848:	2b00      	cmp	r3, #0
 801984a:	d11a      	bne.n	8019882 <tcp_write_checks+0xe6>
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019850:	2b00      	cmp	r3, #0
 8019852:	d116      	bne.n	8019882 <tcp_write_checks+0xe6>
 8019854:	4b0d      	ldr	r3, [pc, #52]	@ (801988c <tcp_write_checks+0xf0>)
 8019856:	f240 1255 	movw	r2, #341	@ 0x155
 801985a:	4910      	ldr	r1, [pc, #64]	@ (801989c <tcp_write_checks+0x100>)
 801985c:	480d      	ldr	r0, [pc, #52]	@ (8019894 <tcp_write_checks+0xf8>)
 801985e:	f006 fd23 	bl	80202a8 <iprintf>
 8019862:	e00e      	b.n	8019882 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019868:	2b00      	cmp	r3, #0
 801986a:	d103      	bne.n	8019874 <tcp_write_checks+0xd8>
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019870:	2b00      	cmp	r3, #0
 8019872:	d006      	beq.n	8019882 <tcp_write_checks+0xe6>
 8019874:	4b05      	ldr	r3, [pc, #20]	@ (801988c <tcp_write_checks+0xf0>)
 8019876:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801987a:	4909      	ldr	r1, [pc, #36]	@ (80198a0 <tcp_write_checks+0x104>)
 801987c:	4805      	ldr	r0, [pc, #20]	@ (8019894 <tcp_write_checks+0xf8>)
 801987e:	f006 fd13 	bl	80202a8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019882:	2300      	movs	r3, #0
}
 8019884:	4618      	mov	r0, r3
 8019886:	3708      	adds	r7, #8
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}
 801988c:	0802355c 	.word	0x0802355c
 8019890:	0802366c 	.word	0x0802366c
 8019894:	080235b0 	.word	0x080235b0
 8019898:	200252ac 	.word	0x200252ac
 801989c:	0802368c 	.word	0x0802368c
 80198a0:	080236c8 	.word	0x080236c8

080198a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80198a4:	b590      	push	{r4, r7, lr}
 80198a6:	b09b      	sub	sp, #108	@ 0x6c
 80198a8:	af04      	add	r7, sp, #16
 80198aa:	60f8      	str	r0, [r7, #12]
 80198ac:	60b9      	str	r1, [r7, #8]
 80198ae:	4611      	mov	r1, r2
 80198b0:	461a      	mov	r2, r3
 80198b2:	460b      	mov	r3, r1
 80198b4:	80fb      	strh	r3, [r7, #6]
 80198b6:	4613      	mov	r3, r2
 80198b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80198ba:	2300      	movs	r3, #0
 80198bc:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80198be:	2300      	movs	r3, #0
 80198c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80198c2:	2300      	movs	r3, #0
 80198c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80198c6:	2300      	movs	r3, #0
 80198c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80198ca:	2300      	movs	r3, #0
 80198cc:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80198ce:	2300      	movs	r3, #0
 80198d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80198d4:	2300      	movs	r3, #0
 80198d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80198da:	2300      	movs	r3, #0
 80198dc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80198de:	2300      	movs	r3, #0
 80198e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80198e2:	2300      	movs	r3, #0
 80198e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d109      	bne.n	8019900 <tcp_write+0x5c>
 80198ec:	4ba4      	ldr	r3, [pc, #656]	@ (8019b80 <tcp_write+0x2dc>)
 80198ee:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80198f2:	49a4      	ldr	r1, [pc, #656]	@ (8019b84 <tcp_write+0x2e0>)
 80198f4:	48a4      	ldr	r0, [pc, #656]	@ (8019b88 <tcp_write+0x2e4>)
 80198f6:	f006 fcd7 	bl	80202a8 <iprintf>
 80198fa:	f06f 030f 	mvn.w	r3, #15
 80198fe:	e332      	b.n	8019f66 <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019906:	085b      	lsrs	r3, r3, #1
 8019908:	b29a      	uxth	r2, r3
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801990e:	4293      	cmp	r3, r2
 8019910:	bf28      	it	cs
 8019912:	4613      	movcs	r3, r2
 8019914:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019916:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019918:	2b00      	cmp	r3, #0
 801991a:	d102      	bne.n	8019922 <tcp_write+0x7e>
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019920:	e000      	b.n	8019924 <tcp_write+0x80>
 8019922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019924:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019926:	68bb      	ldr	r3, [r7, #8]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d109      	bne.n	8019940 <tcp_write+0x9c>
 801992c:	4b94      	ldr	r3, [pc, #592]	@ (8019b80 <tcp_write+0x2dc>)
 801992e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8019932:	4996      	ldr	r1, [pc, #600]	@ (8019b8c <tcp_write+0x2e8>)
 8019934:	4894      	ldr	r0, [pc, #592]	@ (8019b88 <tcp_write+0x2e4>)
 8019936:	f006 fcb7 	bl	80202a8 <iprintf>
 801993a:	f06f 030f 	mvn.w	r3, #15
 801993e:	e312      	b.n	8019f66 <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019940:	88fb      	ldrh	r3, [r7, #6]
 8019942:	4619      	mov	r1, r3
 8019944:	68f8      	ldr	r0, [r7, #12]
 8019946:	f7ff ff29 	bl	801979c <tcp_write_checks>
 801994a:	4603      	mov	r3, r0
 801994c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8019950:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8019954:	2b00      	cmp	r3, #0
 8019956:	d002      	beq.n	801995e <tcp_write+0xba>
    return err;
 8019958:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801995c:	e303      	b.n	8019f66 <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019964:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019968:	2300      	movs	r3, #0
 801996a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019972:	2b00      	cmp	r3, #0
 8019974:	f000 80f6 	beq.w	8019b64 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801997c:	653b      	str	r3, [r7, #80]	@ 0x50
 801997e:	e002      	b.n	8019986 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	2b00      	cmp	r3, #0
 801998c:	d1f8      	bne.n	8019980 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801998e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019990:	7a9b      	ldrb	r3, [r3, #10]
 8019992:	009b      	lsls	r3, r3, #2
 8019994:	b29b      	uxth	r3, r3
 8019996:	f003 0304 	and.w	r3, r3, #4
 801999a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801999c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801999e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80199a0:	891b      	ldrh	r3, [r3, #8]
 80199a2:	4619      	mov	r1, r3
 80199a4:	8c3b      	ldrh	r3, [r7, #32]
 80199a6:	440b      	add	r3, r1
 80199a8:	429a      	cmp	r2, r3
 80199aa:	da06      	bge.n	80199ba <tcp_write+0x116>
 80199ac:	4b74      	ldr	r3, [pc, #464]	@ (8019b80 <tcp_write+0x2dc>)
 80199ae:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80199b2:	4977      	ldr	r1, [pc, #476]	@ (8019b90 <tcp_write+0x2ec>)
 80199b4:	4874      	ldr	r0, [pc, #464]	@ (8019b88 <tcp_write+0x2e4>)
 80199b6:	f006 fc77 	bl	80202a8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80199ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80199bc:	891a      	ldrh	r2, [r3, #8]
 80199be:	8c3b      	ldrh	r3, [r7, #32]
 80199c0:	4413      	add	r3, r2
 80199c2:	b29b      	uxth	r3, r3
 80199c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80199c6:	1ad3      	subs	r3, r2, r3
 80199c8:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80199d0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80199d2:	8a7b      	ldrh	r3, [r7, #18]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d026      	beq.n	8019a26 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80199d8:	8a7b      	ldrh	r3, [r7, #18]
 80199da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80199dc:	429a      	cmp	r2, r3
 80199de:	d206      	bcs.n	80199ee <tcp_write+0x14a>
 80199e0:	4b67      	ldr	r3, [pc, #412]	@ (8019b80 <tcp_write+0x2dc>)
 80199e2:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80199e6:	496b      	ldr	r1, [pc, #428]	@ (8019b94 <tcp_write+0x2f0>)
 80199e8:	4867      	ldr	r0, [pc, #412]	@ (8019b88 <tcp_write+0x2e4>)
 80199ea:	f006 fc5d 	bl	80202a8 <iprintf>
      seg = last_unsent;
 80199ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80199f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80199f2:	8a7b      	ldrh	r3, [r7, #18]
 80199f4:	88fa      	ldrh	r2, [r7, #6]
 80199f6:	4293      	cmp	r3, r2
 80199f8:	bf28      	it	cs
 80199fa:	4613      	movcs	r3, r2
 80199fc:	b29b      	uxth	r3, r3
 80199fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019a00:	4293      	cmp	r3, r2
 8019a02:	bf28      	it	cs
 8019a04:	4613      	movcs	r3, r2
 8019a06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8019a08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019a0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019a0e:	4413      	add	r3, r2
 8019a10:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8019a14:	8a7a      	ldrh	r2, [r7, #18]
 8019a16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019a18:	1ad3      	subs	r3, r2, r3
 8019a1a:	b29b      	uxth	r3, r3
 8019a1c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8019a1e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019a20:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019a22:	1ad3      	subs	r3, r2, r3
 8019a24:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019a26:	8a7b      	ldrh	r3, [r7, #18]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d00b      	beq.n	8019a44 <tcp_write+0x1a0>
 8019a2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019a30:	88fb      	ldrh	r3, [r7, #6]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	d006      	beq.n	8019a44 <tcp_write+0x1a0>
 8019a36:	4b52      	ldr	r3, [pc, #328]	@ (8019b80 <tcp_write+0x2dc>)
 8019a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a3c:	4956      	ldr	r1, [pc, #344]	@ (8019b98 <tcp_write+0x2f4>)
 8019a3e:	4852      	ldr	r0, [pc, #328]	@ (8019b88 <tcp_write+0x2e4>)
 8019a40:	f006 fc32 	bl	80202a8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019a44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019a48:	88fb      	ldrh	r3, [r7, #6]
 8019a4a:	429a      	cmp	r2, r3
 8019a4c:	f080 8167 	bcs.w	8019d1e <tcp_write+0x47a>
 8019a50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	f000 8163 	beq.w	8019d1e <tcp_write+0x47a>
 8019a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a5a:	891b      	ldrh	r3, [r3, #8]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	f000 815e 	beq.w	8019d1e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019a62:	88fa      	ldrh	r2, [r7, #6]
 8019a64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019a68:	1ad2      	subs	r2, r2, r3
 8019a6a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019a6c:	4293      	cmp	r3, r2
 8019a6e:	bfa8      	it	ge
 8019a70:	4613      	movge	r3, r2
 8019a72:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a76:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a78:	797b      	ldrb	r3, [r7, #5]
 8019a7a:	f003 0301 	and.w	r3, r3, #1
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d027      	beq.n	8019ad2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019a82:	f107 0012 	add.w	r0, r7, #18
 8019a86:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019a88:	8bf9      	ldrh	r1, [r7, #30]
 8019a8a:	2301      	movs	r3, #1
 8019a8c:	9302      	str	r3, [sp, #8]
 8019a8e:	797b      	ldrb	r3, [r7, #5]
 8019a90:	9301      	str	r3, [sp, #4]
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	9300      	str	r3, [sp, #0]
 8019a96:	4603      	mov	r3, r0
 8019a98:	2000      	movs	r0, #0
 8019a9a:	f7ff fe05 	bl	80196a8 <tcp_pbuf_prealloc>
 8019a9e:	6578      	str	r0, [r7, #84]	@ 0x54
 8019aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	f000 8225 	beq.w	8019ef2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019aaa:	6858      	ldr	r0, [r3, #4]
 8019aac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019ab0:	68ba      	ldr	r2, [r7, #8]
 8019ab2:	4413      	add	r3, r2
 8019ab4:	8bfa      	ldrh	r2, [r7, #30]
 8019ab6:	4619      	mov	r1, r3
 8019ab8:	f006 fe21 	bl	80206fe <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019abc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019abe:	f7fb f9d1 	bl	8014e64 <pbuf_clen>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	461a      	mov	r2, r3
 8019ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019aca:	4413      	add	r3, r2
 8019acc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019ad0:	e041      	b.n	8019b56 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ad4:	685b      	ldr	r3, [r3, #4]
 8019ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ad8:	e002      	b.n	8019ae0 <tcp_write+0x23c>
 8019ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d1f8      	bne.n	8019ada <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019aea:	7b1b      	ldrb	r3, [r3, #12]
 8019aec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d115      	bne.n	8019b20 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019af6:	685b      	ldr	r3, [r3, #4]
 8019af8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019afa:	8952      	ldrh	r2, [r2, #10]
 8019afc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019afe:	68ba      	ldr	r2, [r7, #8]
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d10d      	bne.n	8019b20 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019b04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d006      	beq.n	8019b1a <tcp_write+0x276>
 8019b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8019b80 <tcp_write+0x2dc>)
 8019b0e:	f240 2231 	movw	r2, #561	@ 0x231
 8019b12:	4922      	ldr	r1, [pc, #136]	@ (8019b9c <tcp_write+0x2f8>)
 8019b14:	481c      	ldr	r0, [pc, #112]	@ (8019b88 <tcp_write+0x2e4>)
 8019b16:	f006 fbc7 	bl	80202a8 <iprintf>
          extendlen = seglen;
 8019b1a:	8bfb      	ldrh	r3, [r7, #30]
 8019b1c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8019b1e:	e01a      	b.n	8019b56 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019b20:	8bfb      	ldrh	r3, [r7, #30]
 8019b22:	2201      	movs	r2, #1
 8019b24:	4619      	mov	r1, r3
 8019b26:	2000      	movs	r0, #0
 8019b28:	f7fa fe2a 	bl	8014780 <pbuf_alloc>
 8019b2c:	6578      	str	r0, [r7, #84]	@ 0x54
 8019b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	f000 81e0 	beq.w	8019ef6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019b36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019b3a:	68ba      	ldr	r2, [r7, #8]
 8019b3c:	441a      	add	r2, r3
 8019b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b40:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019b42:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019b44:	f7fb f98e 	bl	8014e64 <pbuf_clen>
 8019b48:	4603      	mov	r3, r0
 8019b4a:	461a      	mov	r2, r3
 8019b4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019b50:	4413      	add	r3, r2
 8019b52:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019b56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019b5a:	8bfb      	ldrh	r3, [r7, #30]
 8019b5c:	4413      	add	r3, r2
 8019b5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8019b62:	e0dc      	b.n	8019d1e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	f000 80d7 	beq.w	8019d1e <tcp_write+0x47a>
 8019b70:	4b03      	ldr	r3, [pc, #12]	@ (8019b80 <tcp_write+0x2dc>)
 8019b72:	f240 224a 	movw	r2, #586	@ 0x24a
 8019b76:	490a      	ldr	r1, [pc, #40]	@ (8019ba0 <tcp_write+0x2fc>)
 8019b78:	4803      	ldr	r0, [pc, #12]	@ (8019b88 <tcp_write+0x2e4>)
 8019b7a:	f006 fb95 	bl	80202a8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019b7e:	e0ce      	b.n	8019d1e <tcp_write+0x47a>
 8019b80:	0802355c 	.word	0x0802355c
 8019b84:	080236fc 	.word	0x080236fc
 8019b88:	080235b0 	.word	0x080235b0
 8019b8c:	08023714 	.word	0x08023714
 8019b90:	08023748 	.word	0x08023748
 8019b94:	08023760 	.word	0x08023760
 8019b98:	08023780 	.word	0x08023780
 8019b9c:	080237a0 	.word	0x080237a0
 8019ba0:	080237cc 	.word	0x080237cc
    struct pbuf *p;
    u16_t left = len - pos;
 8019ba4:	88fa      	ldrh	r2, [r7, #6]
 8019ba6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019baa:	1ad3      	subs	r3, r2, r3
 8019bac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019bae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019bb2:	b29b      	uxth	r3, r3
 8019bb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019bb6:	1ad3      	subs	r3, r2, r3
 8019bb8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019bba:	8b7a      	ldrh	r2, [r7, #26]
 8019bbc:	8bbb      	ldrh	r3, [r7, #28]
 8019bbe:	4293      	cmp	r3, r2
 8019bc0:	bf28      	it	cs
 8019bc2:	4613      	movcs	r3, r2
 8019bc4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019bc6:	797b      	ldrb	r3, [r7, #5]
 8019bc8:	f003 0301 	and.w	r3, r3, #1
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d036      	beq.n	8019c3e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019bd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019bd4:	b29a      	uxth	r2, r3
 8019bd6:	8b3b      	ldrh	r3, [r7, #24]
 8019bd8:	4413      	add	r3, r2
 8019bda:	b299      	uxth	r1, r3
 8019bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	bf0c      	ite	eq
 8019be2:	2301      	moveq	r3, #1
 8019be4:	2300      	movne	r3, #0
 8019be6:	b2db      	uxtb	r3, r3
 8019be8:	f107 0012 	add.w	r0, r7, #18
 8019bec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019bee:	9302      	str	r3, [sp, #8]
 8019bf0:	797b      	ldrb	r3, [r7, #5]
 8019bf2:	9301      	str	r3, [sp, #4]
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	9300      	str	r3, [sp, #0]
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	2036      	movs	r0, #54	@ 0x36
 8019bfc:	f7ff fd54 	bl	80196a8 <tcp_pbuf_prealloc>
 8019c00:	6338      	str	r0, [r7, #48]	@ 0x30
 8019c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	f000 8178 	beq.w	8019efa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c0c:	895b      	ldrh	r3, [r3, #10]
 8019c0e:	8b3a      	ldrh	r2, [r7, #24]
 8019c10:	429a      	cmp	r2, r3
 8019c12:	d906      	bls.n	8019c22 <tcp_write+0x37e>
 8019c14:	4b8c      	ldr	r3, [pc, #560]	@ (8019e48 <tcp_write+0x5a4>)
 8019c16:	f240 2266 	movw	r2, #614	@ 0x266
 8019c1a:	498c      	ldr	r1, [pc, #560]	@ (8019e4c <tcp_write+0x5a8>)
 8019c1c:	488c      	ldr	r0, [pc, #560]	@ (8019e50 <tcp_write+0x5ac>)
 8019c1e:	f006 fb43 	bl	80202a8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c24:	685a      	ldr	r2, [r3, #4]
 8019c26:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019c2a:	18d0      	adds	r0, r2, r3
 8019c2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019c30:	68ba      	ldr	r2, [r7, #8]
 8019c32:	4413      	add	r3, r2
 8019c34:	8b3a      	ldrh	r2, [r7, #24]
 8019c36:	4619      	mov	r1, r3
 8019c38:	f006 fd61 	bl	80206fe <memcpy>
 8019c3c:	e02f      	b.n	8019c9e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019c3e:	8a7b      	ldrh	r3, [r7, #18]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	d006      	beq.n	8019c52 <tcp_write+0x3ae>
 8019c44:	4b80      	ldr	r3, [pc, #512]	@ (8019e48 <tcp_write+0x5a4>)
 8019c46:	f240 2271 	movw	r2, #625	@ 0x271
 8019c4a:	4982      	ldr	r1, [pc, #520]	@ (8019e54 <tcp_write+0x5b0>)
 8019c4c:	4880      	ldr	r0, [pc, #512]	@ (8019e50 <tcp_write+0x5ac>)
 8019c4e:	f006 fb2b 	bl	80202a8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019c52:	8b3b      	ldrh	r3, [r7, #24]
 8019c54:	2201      	movs	r2, #1
 8019c56:	4619      	mov	r1, r3
 8019c58:	2036      	movs	r0, #54	@ 0x36
 8019c5a:	f7fa fd91 	bl	8014780 <pbuf_alloc>
 8019c5e:	6178      	str	r0, [r7, #20]
 8019c60:	697b      	ldr	r3, [r7, #20]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	f000 814b 	beq.w	8019efe <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019c6c:	68ba      	ldr	r2, [r7, #8]
 8019c6e:	441a      	add	r2, r3
 8019c70:	697b      	ldr	r3, [r7, #20]
 8019c72:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019c74:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019c78:	b29b      	uxth	r3, r3
 8019c7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019c7e:	4619      	mov	r1, r3
 8019c80:	2036      	movs	r0, #54	@ 0x36
 8019c82:	f7fa fd7d 	bl	8014780 <pbuf_alloc>
 8019c86:	6338      	str	r0, [r7, #48]	@ 0x30
 8019c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d103      	bne.n	8019c96 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019c8e:	6978      	ldr	r0, [r7, #20]
 8019c90:	f7fb f85a 	bl	8014d48 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019c94:	e136      	b.n	8019f04 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019c96:	6979      	ldr	r1, [r7, #20]
 8019c98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c9a:	f7fb f923 	bl	8014ee4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019c9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ca0:	f7fb f8e0 	bl	8014e64 <pbuf_clen>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	461a      	mov	r2, r3
 8019ca8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019cac:	4413      	add	r3, r2
 8019cae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019cb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019cb6:	2b09      	cmp	r3, #9
 8019cb8:	d903      	bls.n	8019cc2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019cba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019cbc:	f7fb f844 	bl	8014d48 <pbuf_free>
      goto memerr;
 8019cc0:	e120      	b.n	8019f04 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019cc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019cca:	441a      	add	r2, r3
 8019ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019cd0:	9300      	str	r3, [sp, #0]
 8019cd2:	4613      	mov	r3, r2
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019cd8:	68f8      	ldr	r0, [r7, #12]
 8019cda:	f7ff fc3f 	bl	801955c <tcp_create_segment>
 8019cde:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8019ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	f000 810d 	beq.w	8019f02 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d102      	bne.n	8019cf4 <tcp_write+0x450>
      queue = seg;
 8019cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8019cf2:	e00c      	b.n	8019d0e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d106      	bne.n	8019d08 <tcp_write+0x464>
 8019cfa:	4b53      	ldr	r3, [pc, #332]	@ (8019e48 <tcp_write+0x5a4>)
 8019cfc:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019d00:	4955      	ldr	r1, [pc, #340]	@ (8019e58 <tcp_write+0x5b4>)
 8019d02:	4853      	ldr	r0, [pc, #332]	@ (8019e50 <tcp_write+0x5ac>)
 8019d04:	f006 fad0 	bl	80202a8 <iprintf>
      prev_seg->next = seg;
 8019d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019d0c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d10:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019d12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d16:	8b3b      	ldrh	r3, [r7, #24]
 8019d18:	4413      	add	r3, r2
 8019d1a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8019d1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d22:	88fb      	ldrh	r3, [r7, #6]
 8019d24:	429a      	cmp	r2, r3
 8019d26:	f4ff af3d 	bcc.w	8019ba4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019d2a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d02c      	beq.n	8019d8a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d32:	685b      	ldr	r3, [r3, #4]
 8019d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d36:	e01e      	b.n	8019d76 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d3a:	891a      	ldrh	r2, [r3, #8]
 8019d3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d3e:	4413      	add	r3, r2
 8019d40:	b29a      	uxth	r2, r3
 8019d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d44:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d110      	bne.n	8019d70 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d50:	685b      	ldr	r3, [r3, #4]
 8019d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d54:	8952      	ldrh	r2, [r2, #10]
 8019d56:	4413      	add	r3, r2
 8019d58:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019d5a:	68b9      	ldr	r1, [r7, #8]
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	f006 fcce 	bl	80206fe <memcpy>
        p->len += oversize_used;
 8019d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d64:	895a      	ldrh	r2, [r3, #10]
 8019d66:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d68:	4413      	add	r3, r2
 8019d6a:	b29a      	uxth	r2, r3
 8019d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d6e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d1dd      	bne.n	8019d38 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d7e:	891a      	ldrh	r2, [r3, #8]
 8019d80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d82:	4413      	add	r3, r2
 8019d84:	b29a      	uxth	r2, r3
 8019d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d88:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019d8a:	8a7a      	ldrh	r2, [r7, #18]
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d018      	beq.n	8019dca <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d106      	bne.n	8019dac <tcp_write+0x508>
 8019d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8019e48 <tcp_write+0x5a4>)
 8019da0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8019da4:	492d      	ldr	r1, [pc, #180]	@ (8019e5c <tcp_write+0x5b8>)
 8019da6:	482a      	ldr	r0, [pc, #168]	@ (8019e50 <tcp_write+0x5ac>)
 8019da8:	f006 fa7e 	bl	80202a8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dae:	685b      	ldr	r3, [r3, #4]
 8019db0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019db2:	4618      	mov	r0, r3
 8019db4:	f7fb f896 	bl	8014ee4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dba:	891a      	ldrh	r2, [r3, #8]
 8019dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dbe:	891b      	ldrh	r3, [r3, #8]
 8019dc0:	4413      	add	r3, r2
 8019dc2:	b29a      	uxth	r2, r3
 8019dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dc6:	811a      	strh	r2, [r3, #8]
 8019dc8:	e037      	b.n	8019e3a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8019dca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d034      	beq.n	8019e3a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d003      	beq.n	8019dde <tcp_write+0x53a>
 8019dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dd8:	685b      	ldr	r3, [r3, #4]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d106      	bne.n	8019dec <tcp_write+0x548>
 8019dde:	4b1a      	ldr	r3, [pc, #104]	@ (8019e48 <tcp_write+0x5a4>)
 8019de0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8019de4:	491e      	ldr	r1, [pc, #120]	@ (8019e60 <tcp_write+0x5bc>)
 8019de6:	481a      	ldr	r0, [pc, #104]	@ (8019e50 <tcp_write+0x5ac>)
 8019de8:	f006 fa5e 	bl	80202a8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dee:	685b      	ldr	r3, [r3, #4]
 8019df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019df2:	e009      	b.n	8019e08 <tcp_write+0x564>
      p->tot_len += extendlen;
 8019df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019df6:	891a      	ldrh	r2, [r3, #8]
 8019df8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019dfa:	4413      	add	r3, r2
 8019dfc:	b29a      	uxth	r2, r3
 8019dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e00:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d1f1      	bne.n	8019df4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e12:	891a      	ldrh	r2, [r3, #8]
 8019e14:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e16:	4413      	add	r3, r2
 8019e18:	b29a      	uxth	r2, r3
 8019e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e1c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e20:	895a      	ldrh	r2, [r3, #10]
 8019e22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e24:	4413      	add	r3, r2
 8019e26:	b29a      	uxth	r2, r3
 8019e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e2a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e2e:	891a      	ldrh	r2, [r3, #8]
 8019e30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e32:	4413      	add	r3, r2
 8019e34:	b29a      	uxth	r2, r3
 8019e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e38:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d111      	bne.n	8019e64 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019e44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019e46:	e010      	b.n	8019e6a <tcp_write+0x5c6>
 8019e48:	0802355c 	.word	0x0802355c
 8019e4c:	080237fc 	.word	0x080237fc
 8019e50:	080235b0 	.word	0x080235b0
 8019e54:	0802383c 	.word	0x0802383c
 8019e58:	0802384c 	.word	0x0802384c
 8019e5c:	08023860 	.word	0x08023860
 8019e60:	08023898 	.word	0x08023898
  } else {
    last_unsent->next = queue;
 8019e64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019e68:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019e6e:	88fb      	ldrh	r3, [r7, #6]
 8019e70:	441a      	add	r2, r3
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019e7c:	88fb      	ldrh	r3, [r7, #6]
 8019e7e:	1ad3      	subs	r3, r2, r3
 8019e80:	b29a      	uxth	r2, r3
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019e8e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d00e      	beq.n	8019eba <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d10a      	bne.n	8019eba <tcp_write+0x616>
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d106      	bne.n	8019eba <tcp_write+0x616>
 8019eac:	4b30      	ldr	r3, [pc, #192]	@ (8019f70 <tcp_write+0x6cc>)
 8019eae:	f240 3212 	movw	r2, #786	@ 0x312
 8019eb2:	4930      	ldr	r1, [pc, #192]	@ (8019f74 <tcp_write+0x6d0>)
 8019eb4:	4830      	ldr	r0, [pc, #192]	@ (8019f78 <tcp_write+0x6d4>)
 8019eb6:	f006 f9f7 	bl	80202a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d016      	beq.n	8019eee <tcp_write+0x64a>
 8019ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ec2:	68db      	ldr	r3, [r3, #12]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d012      	beq.n	8019eee <tcp_write+0x64a>
 8019ec8:	797b      	ldrb	r3, [r7, #5]
 8019eca:	f003 0302 	and.w	r3, r3, #2
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d10d      	bne.n	8019eee <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ed4:	68db      	ldr	r3, [r3, #12]
 8019ed6:	899b      	ldrh	r3, [r3, #12]
 8019ed8:	b29c      	uxth	r4, r3
 8019eda:	2008      	movs	r0, #8
 8019edc:	f7f9 fa76 	bl	80133cc <lwip_htons>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	461a      	mov	r2, r3
 8019ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ee6:	68db      	ldr	r3, [r3, #12]
 8019ee8:	4322      	orrs	r2, r4
 8019eea:	b292      	uxth	r2, r2
 8019eec:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019eee:	2300      	movs	r3, #0
 8019ef0:	e039      	b.n	8019f66 <tcp_write+0x6c2>
          goto memerr;
 8019ef2:	bf00      	nop
 8019ef4:	e006      	b.n	8019f04 <tcp_write+0x660>
            goto memerr;
 8019ef6:	bf00      	nop
 8019ef8:	e004      	b.n	8019f04 <tcp_write+0x660>
        goto memerr;
 8019efa:	bf00      	nop
 8019efc:	e002      	b.n	8019f04 <tcp_write+0x660>
        goto memerr;
 8019efe:	bf00      	nop
 8019f00:	e000      	b.n	8019f04 <tcp_write+0x660>
      goto memerr;
 8019f02:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	8b5b      	ldrh	r3, [r3, #26]
 8019f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f0c:	b29a      	uxth	r2, r3
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8019f12:	4b1a      	ldr	r3, [pc, #104]	@ (8019f7c <tcp_write+0x6d8>)
 8019f14:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019f18:	3301      	adds	r3, #1
 8019f1a:	b29a      	uxth	r2, r3
 8019f1c:	4b17      	ldr	r3, [pc, #92]	@ (8019f7c <tcp_write+0x6d8>)
 8019f1e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 8019f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d002      	beq.n	8019f2e <tcp_write+0x68a>
    pbuf_free(concat_p);
 8019f28:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019f2a:	f7fa ff0d 	bl	8014d48 <pbuf_free>
  }
  if (queue != NULL) {
 8019f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d002      	beq.n	8019f3a <tcp_write+0x696>
    tcp_segs_free(queue);
 8019f34:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019f36:	f7fc fac5 	bl	80164c4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d00e      	beq.n	8019f62 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d10a      	bne.n	8019f62 <tcp_write+0x6be>
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d106      	bne.n	8019f62 <tcp_write+0x6be>
 8019f54:	4b06      	ldr	r3, [pc, #24]	@ (8019f70 <tcp_write+0x6cc>)
 8019f56:	f240 3227 	movw	r2, #807	@ 0x327
 8019f5a:	4906      	ldr	r1, [pc, #24]	@ (8019f74 <tcp_write+0x6d0>)
 8019f5c:	4806      	ldr	r0, [pc, #24]	@ (8019f78 <tcp_write+0x6d4>)
 8019f5e:	f006 f9a3 	bl	80202a8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019f66:	4618      	mov	r0, r3
 8019f68:	375c      	adds	r7, #92	@ 0x5c
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd90      	pop	{r4, r7, pc}
 8019f6e:	bf00      	nop
 8019f70:	0802355c 	.word	0x0802355c
 8019f74:	080238d0 	.word	0x080238d0
 8019f78:	080235b0 	.word	0x080235b0
 8019f7c:	200252ac 	.word	0x200252ac

08019f80 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019f80:	b590      	push	{r4, r7, lr}
 8019f82:	b08b      	sub	sp, #44	@ 0x2c
 8019f84:	af02      	add	r7, sp, #8
 8019f86:	6078      	str	r0, [r7, #4]
 8019f88:	460b      	mov	r3, r1
 8019f8a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019f8c:	2300      	movs	r3, #0
 8019f8e:	61fb      	str	r3, [r7, #28]
 8019f90:	2300      	movs	r3, #0
 8019f92:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019f94:	2300      	movs	r3, #0
 8019f96:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d106      	bne.n	8019fac <tcp_split_unsent_seg+0x2c>
 8019f9e:	4b99      	ldr	r3, [pc, #612]	@ (801a204 <tcp_split_unsent_seg+0x284>)
 8019fa0:	f240 324b 	movw	r2, #843	@ 0x34b
 8019fa4:	4998      	ldr	r1, [pc, #608]	@ (801a208 <tcp_split_unsent_seg+0x288>)
 8019fa6:	4899      	ldr	r0, [pc, #612]	@ (801a20c <tcp_split_unsent_seg+0x28c>)
 8019fa8:	f006 f97e 	bl	80202a8 <iprintf>

  useg = pcb->unsent;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019fb0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019fb2:	697b      	ldr	r3, [r7, #20]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d102      	bne.n	8019fbe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019fb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fbc:	e11e      	b.n	801a1fc <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 8019fbe:	887b      	ldrh	r3, [r7, #2]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d109      	bne.n	8019fd8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019fc4:	4b8f      	ldr	r3, [pc, #572]	@ (801a204 <tcp_split_unsent_seg+0x284>)
 8019fc6:	f240 3253 	movw	r2, #851	@ 0x353
 8019fca:	4991      	ldr	r1, [pc, #580]	@ (801a210 <tcp_split_unsent_seg+0x290>)
 8019fcc:	488f      	ldr	r0, [pc, #572]	@ (801a20c <tcp_split_unsent_seg+0x28c>)
 8019fce:	f006 f96b 	bl	80202a8 <iprintf>
    return ERR_VAL;
 8019fd2:	f06f 0305 	mvn.w	r3, #5
 8019fd6:	e111      	b.n	801a1fc <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 8019fd8:	697b      	ldr	r3, [r7, #20]
 8019fda:	891b      	ldrh	r3, [r3, #8]
 8019fdc:	887a      	ldrh	r2, [r7, #2]
 8019fde:	429a      	cmp	r2, r3
 8019fe0:	d301      	bcc.n	8019fe6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	e10a      	b.n	801a1fc <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019fea:	887a      	ldrh	r2, [r7, #2]
 8019fec:	429a      	cmp	r2, r3
 8019fee:	d906      	bls.n	8019ffe <tcp_split_unsent_seg+0x7e>
 8019ff0:	4b84      	ldr	r3, [pc, #528]	@ (801a204 <tcp_split_unsent_seg+0x284>)
 8019ff2:	f240 325b 	movw	r2, #859	@ 0x35b
 8019ff6:	4987      	ldr	r1, [pc, #540]	@ (801a214 <tcp_split_unsent_seg+0x294>)
 8019ff8:	4884      	ldr	r0, [pc, #528]	@ (801a20c <tcp_split_unsent_seg+0x28c>)
 8019ffa:	f006 f955 	bl	80202a8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019ffe:	697b      	ldr	r3, [r7, #20]
 801a000:	891b      	ldrh	r3, [r3, #8]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d106      	bne.n	801a014 <tcp_split_unsent_seg+0x94>
 801a006:	4b7f      	ldr	r3, [pc, #508]	@ (801a204 <tcp_split_unsent_seg+0x284>)
 801a008:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801a00c:	4982      	ldr	r1, [pc, #520]	@ (801a218 <tcp_split_unsent_seg+0x298>)
 801a00e:	487f      	ldr	r0, [pc, #508]	@ (801a20c <tcp_split_unsent_seg+0x28c>)
 801a010:	f006 f94a 	bl	80202a8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a014:	697b      	ldr	r3, [r7, #20]
 801a016:	7a9b      	ldrb	r3, [r3, #10]
 801a018:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a01a:	7bfb      	ldrb	r3, [r7, #15]
 801a01c:	009b      	lsls	r3, r3, #2
 801a01e:	b2db      	uxtb	r3, r3
 801a020:	f003 0304 	and.w	r3, r3, #4
 801a024:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	891a      	ldrh	r2, [r3, #8]
 801a02a:	887b      	ldrh	r3, [r7, #2]
 801a02c:	1ad3      	subs	r3, r2, r3
 801a02e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a030:	7bbb      	ldrb	r3, [r7, #14]
 801a032:	b29a      	uxth	r2, r3
 801a034:	89bb      	ldrh	r3, [r7, #12]
 801a036:	4413      	add	r3, r2
 801a038:	b29b      	uxth	r3, r3
 801a03a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a03e:	4619      	mov	r1, r3
 801a040:	2036      	movs	r0, #54	@ 0x36
 801a042:	f7fa fb9d 	bl	8014780 <pbuf_alloc>
 801a046:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a048:	693b      	ldr	r3, [r7, #16]
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	f000 80b7 	beq.w	801a1be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a050:	697b      	ldr	r3, [r7, #20]
 801a052:	685b      	ldr	r3, [r3, #4]
 801a054:	891a      	ldrh	r2, [r3, #8]
 801a056:	697b      	ldr	r3, [r7, #20]
 801a058:	891b      	ldrh	r3, [r3, #8]
 801a05a:	1ad3      	subs	r3, r2, r3
 801a05c:	b29a      	uxth	r2, r3
 801a05e:	887b      	ldrh	r3, [r7, #2]
 801a060:	4413      	add	r3, r2
 801a062:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a064:	697b      	ldr	r3, [r7, #20]
 801a066:	6858      	ldr	r0, [r3, #4]
 801a068:	693b      	ldr	r3, [r7, #16]
 801a06a:	685a      	ldr	r2, [r3, #4]
 801a06c:	7bbb      	ldrb	r3, [r7, #14]
 801a06e:	18d1      	adds	r1, r2, r3
 801a070:	897b      	ldrh	r3, [r7, #10]
 801a072:	89ba      	ldrh	r2, [r7, #12]
 801a074:	f7fb f86e 	bl	8015154 <pbuf_copy_partial>
 801a078:	4603      	mov	r3, r0
 801a07a:	461a      	mov	r2, r3
 801a07c:	89bb      	ldrh	r3, [r7, #12]
 801a07e:	4293      	cmp	r3, r2
 801a080:	f040 809f 	bne.w	801a1c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a084:	697b      	ldr	r3, [r7, #20]
 801a086:	68db      	ldr	r3, [r3, #12]
 801a088:	899b      	ldrh	r3, [r3, #12]
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	4618      	mov	r0, r3
 801a08e:	f7f9 f99d 	bl	80133cc <lwip_htons>
 801a092:	4603      	mov	r3, r0
 801a094:	b2db      	uxtb	r3, r3
 801a096:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a09a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a09c:	2300      	movs	r3, #0
 801a09e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a0a0:	7efb      	ldrb	r3, [r7, #27]
 801a0a2:	f003 0308 	and.w	r3, r3, #8
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d007      	beq.n	801a0ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a0aa:	7efb      	ldrb	r3, [r7, #27]
 801a0ac:	f023 0308 	bic.w	r3, r3, #8
 801a0b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a0b2:	7ebb      	ldrb	r3, [r7, #26]
 801a0b4:	f043 0308 	orr.w	r3, r3, #8
 801a0b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a0ba:	7efb      	ldrb	r3, [r7, #27]
 801a0bc:	f003 0301 	and.w	r3, r3, #1
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d007      	beq.n	801a0d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a0c4:	7efb      	ldrb	r3, [r7, #27]
 801a0c6:	f023 0301 	bic.w	r3, r3, #1
 801a0ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a0cc:	7ebb      	ldrb	r3, [r7, #26]
 801a0ce:	f043 0301 	orr.w	r3, r3, #1
 801a0d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a0d4:	697b      	ldr	r3, [r7, #20]
 801a0d6:	68db      	ldr	r3, [r3, #12]
 801a0d8:	685b      	ldr	r3, [r3, #4]
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f7f9 f98c 	bl	80133f8 <lwip_htonl>
 801a0e0:	4602      	mov	r2, r0
 801a0e2:	887b      	ldrh	r3, [r7, #2]
 801a0e4:	18d1      	adds	r1, r2, r3
 801a0e6:	7eba      	ldrb	r2, [r7, #26]
 801a0e8:	7bfb      	ldrb	r3, [r7, #15]
 801a0ea:	9300      	str	r3, [sp, #0]
 801a0ec:	460b      	mov	r3, r1
 801a0ee:	6939      	ldr	r1, [r7, #16]
 801a0f0:	6878      	ldr	r0, [r7, #4]
 801a0f2:	f7ff fa33 	bl	801955c <tcp_create_segment>
 801a0f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a0f8:	69fb      	ldr	r3, [r7, #28]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d063      	beq.n	801a1c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a0fe:	697b      	ldr	r3, [r7, #20]
 801a100:	685b      	ldr	r3, [r3, #4]
 801a102:	4618      	mov	r0, r3
 801a104:	f7fa feae 	bl	8014e64 <pbuf_clen>
 801a108:	4603      	mov	r3, r0
 801a10a:	461a      	mov	r2, r3
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a112:	1a9b      	subs	r3, r3, r2
 801a114:	b29a      	uxth	r2, r3
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a11c:	697b      	ldr	r3, [r7, #20]
 801a11e:	6858      	ldr	r0, [r3, #4]
 801a120:	697b      	ldr	r3, [r7, #20]
 801a122:	685b      	ldr	r3, [r3, #4]
 801a124:	891a      	ldrh	r2, [r3, #8]
 801a126:	89bb      	ldrh	r3, [r7, #12]
 801a128:	1ad3      	subs	r3, r2, r3
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	4619      	mov	r1, r3
 801a12e:	f7fa fc85 	bl	8014a3c <pbuf_realloc>
  useg->len -= remainder;
 801a132:	697b      	ldr	r3, [r7, #20]
 801a134:	891a      	ldrh	r2, [r3, #8]
 801a136:	89bb      	ldrh	r3, [r7, #12]
 801a138:	1ad3      	subs	r3, r2, r3
 801a13a:	b29a      	uxth	r2, r3
 801a13c:	697b      	ldr	r3, [r7, #20]
 801a13e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a140:	697b      	ldr	r3, [r7, #20]
 801a142:	68db      	ldr	r3, [r3, #12]
 801a144:	899b      	ldrh	r3, [r3, #12]
 801a146:	b29c      	uxth	r4, r3
 801a148:	7efb      	ldrb	r3, [r7, #27]
 801a14a:	b29b      	uxth	r3, r3
 801a14c:	4618      	mov	r0, r3
 801a14e:	f7f9 f93d 	bl	80133cc <lwip_htons>
 801a152:	4603      	mov	r3, r0
 801a154:	461a      	mov	r2, r3
 801a156:	697b      	ldr	r3, [r7, #20]
 801a158:	68db      	ldr	r3, [r3, #12]
 801a15a:	4322      	orrs	r2, r4
 801a15c:	b292      	uxth	r2, r2
 801a15e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a160:	697b      	ldr	r3, [r7, #20]
 801a162:	685b      	ldr	r3, [r3, #4]
 801a164:	4618      	mov	r0, r3
 801a166:	f7fa fe7d 	bl	8014e64 <pbuf_clen>
 801a16a:	4603      	mov	r3, r0
 801a16c:	461a      	mov	r2, r3
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a174:	4413      	add	r3, r2
 801a176:	b29a      	uxth	r2, r3
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a17e:	69fb      	ldr	r3, [r7, #28]
 801a180:	685b      	ldr	r3, [r3, #4]
 801a182:	4618      	mov	r0, r3
 801a184:	f7fa fe6e 	bl	8014e64 <pbuf_clen>
 801a188:	4603      	mov	r3, r0
 801a18a:	461a      	mov	r2, r3
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a192:	4413      	add	r3, r2
 801a194:	b29a      	uxth	r2, r3
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a19c:	697b      	ldr	r3, [r7, #20]
 801a19e:	681a      	ldr	r2, [r3, #0]
 801a1a0:	69fb      	ldr	r3, [r7, #28]
 801a1a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a1a4:	697b      	ldr	r3, [r7, #20]
 801a1a6:	69fa      	ldr	r2, [r7, #28]
 801a1a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a1aa:	69fb      	ldr	r3, [r7, #28]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d103      	bne.n	801a1ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	e01e      	b.n	801a1fc <tcp_split_unsent_seg+0x27c>
    goto memerr;
 801a1be:	bf00      	nop
 801a1c0:	e002      	b.n	801a1c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a1c2:	bf00      	nop
 801a1c4:	e000      	b.n	801a1c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a1c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 801a1c8:	4b14      	ldr	r3, [pc, #80]	@ (801a21c <tcp_split_unsent_seg+0x29c>)
 801a1ca:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a1ce:	3301      	adds	r3, #1
 801a1d0:	b29a      	uxth	r2, r3
 801a1d2:	4b12      	ldr	r3, [pc, #72]	@ (801a21c <tcp_split_unsent_seg+0x29c>)
 801a1d4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a1d8:	69fb      	ldr	r3, [r7, #28]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d006      	beq.n	801a1ec <tcp_split_unsent_seg+0x26c>
 801a1de:	4b09      	ldr	r3, [pc, #36]	@ (801a204 <tcp_split_unsent_seg+0x284>)
 801a1e0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801a1e4:	490e      	ldr	r1, [pc, #56]	@ (801a220 <tcp_split_unsent_seg+0x2a0>)
 801a1e6:	4809      	ldr	r0, [pc, #36]	@ (801a20c <tcp_split_unsent_seg+0x28c>)
 801a1e8:	f006 f85e 	bl	80202a8 <iprintf>
  if (p != NULL) {
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d002      	beq.n	801a1f8 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 801a1f2:	6938      	ldr	r0, [r7, #16]
 801a1f4:	f7fa fda8 	bl	8014d48 <pbuf_free>
  }

  return ERR_MEM;
 801a1f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	3724      	adds	r7, #36	@ 0x24
 801a200:	46bd      	mov	sp, r7
 801a202:	bd90      	pop	{r4, r7, pc}
 801a204:	0802355c 	.word	0x0802355c
 801a208:	080238f0 	.word	0x080238f0
 801a20c:	080235b0 	.word	0x080235b0
 801a210:	08023914 	.word	0x08023914
 801a214:	08023938 	.word	0x08023938
 801a218:	08023948 	.word	0x08023948
 801a21c:	200252ac 	.word	0x200252ac
 801a220:	08023958 	.word	0x08023958

0801a224 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a224:	b590      	push	{r4, r7, lr}
 801a226:	b085      	sub	sp, #20
 801a228:	af00      	add	r7, sp, #0
 801a22a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d106      	bne.n	801a240 <tcp_send_fin+0x1c>
 801a232:	4b21      	ldr	r3, [pc, #132]	@ (801a2b8 <tcp_send_fin+0x94>)
 801a234:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a238:	4920      	ldr	r1, [pc, #128]	@ (801a2bc <tcp_send_fin+0x98>)
 801a23a:	4821      	ldr	r0, [pc, #132]	@ (801a2c0 <tcp_send_fin+0x9c>)
 801a23c:	f006 f834 	bl	80202a8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a244:	2b00      	cmp	r3, #0
 801a246:	d02e      	beq.n	801a2a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a24c:	60fb      	str	r3, [r7, #12]
 801a24e:	e002      	b.n	801a256 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d1f8      	bne.n	801a250 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	68db      	ldr	r3, [r3, #12]
 801a262:	899b      	ldrh	r3, [r3, #12]
 801a264:	b29b      	uxth	r3, r3
 801a266:	4618      	mov	r0, r3
 801a268:	f7f9 f8b0 	bl	80133cc <lwip_htons>
 801a26c:	4603      	mov	r3, r0
 801a26e:	b2db      	uxtb	r3, r3
 801a270:	f003 0307 	and.w	r3, r3, #7
 801a274:	2b00      	cmp	r3, #0
 801a276:	d116      	bne.n	801a2a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	68db      	ldr	r3, [r3, #12]
 801a27c:	899b      	ldrh	r3, [r3, #12]
 801a27e:	b29c      	uxth	r4, r3
 801a280:	2001      	movs	r0, #1
 801a282:	f7f9 f8a3 	bl	80133cc <lwip_htons>
 801a286:	4603      	mov	r3, r0
 801a288:	461a      	mov	r2, r3
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	68db      	ldr	r3, [r3, #12]
 801a28e:	4322      	orrs	r2, r4
 801a290:	b292      	uxth	r2, r2
 801a292:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	8b5b      	ldrh	r3, [r3, #26]
 801a298:	f043 0320 	orr.w	r3, r3, #32
 801a29c:	b29a      	uxth	r2, r3
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	e004      	b.n	801a2b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a2a6:	2101      	movs	r1, #1
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f000 f80b 	bl	801a2c4 <tcp_enqueue_flags>
 801a2ae:	4603      	mov	r3, r0
}
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3714      	adds	r7, #20
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd90      	pop	{r4, r7, pc}
 801a2b8:	0802355c 	.word	0x0802355c
 801a2bc:	08023964 	.word	0x08023964
 801a2c0:	080235b0 	.word	0x080235b0

0801a2c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b08a      	sub	sp, #40	@ 0x28
 801a2c8:	af02      	add	r7, sp, #8
 801a2ca:	6078      	str	r0, [r7, #4]
 801a2cc:	460b      	mov	r3, r1
 801a2ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a2d4:	2300      	movs	r3, #0
 801a2d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a2d8:	78fb      	ldrb	r3, [r7, #3]
 801a2da:	f003 0303 	and.w	r3, r3, #3
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d106      	bne.n	801a2f0 <tcp_enqueue_flags+0x2c>
 801a2e2:	4b6f      	ldr	r3, [pc, #444]	@ (801a4a0 <tcp_enqueue_flags+0x1dc>)
 801a2e4:	f240 4211 	movw	r2, #1041	@ 0x411
 801a2e8:	496e      	ldr	r1, [pc, #440]	@ (801a4a4 <tcp_enqueue_flags+0x1e0>)
 801a2ea:	486f      	ldr	r0, [pc, #444]	@ (801a4a8 <tcp_enqueue_flags+0x1e4>)
 801a2ec:	f005 ffdc 	bl	80202a8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d106      	bne.n	801a304 <tcp_enqueue_flags+0x40>
 801a2f6:	4b6a      	ldr	r3, [pc, #424]	@ (801a4a0 <tcp_enqueue_flags+0x1dc>)
 801a2f8:	f240 4213 	movw	r2, #1043	@ 0x413
 801a2fc:	496b      	ldr	r1, [pc, #428]	@ (801a4ac <tcp_enqueue_flags+0x1e8>)
 801a2fe:	486a      	ldr	r0, [pc, #424]	@ (801a4a8 <tcp_enqueue_flags+0x1e4>)
 801a300:	f005 ffd2 	bl	80202a8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a304:	78fb      	ldrb	r3, [r7, #3]
 801a306:	f003 0302 	and.w	r3, r3, #2
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d001      	beq.n	801a312 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a30e:	2301      	movs	r3, #1
 801a310:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a312:	7ffb      	ldrb	r3, [r7, #31]
 801a314:	009b      	lsls	r3, r3, #2
 801a316:	b2db      	uxtb	r3, r3
 801a318:	f003 0304 	and.w	r3, r3, #4
 801a31c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a31e:	7dfb      	ldrb	r3, [r7, #23]
 801a320:	b29b      	uxth	r3, r3
 801a322:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a326:	4619      	mov	r1, r3
 801a328:	2036      	movs	r0, #54	@ 0x36
 801a32a:	f7fa fa29 	bl	8014780 <pbuf_alloc>
 801a32e:	6138      	str	r0, [r7, #16]
 801a330:	693b      	ldr	r3, [r7, #16]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d111      	bne.n	801a35a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	8b5b      	ldrh	r3, [r3, #26]
 801a33a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a33e:	b29a      	uxth	r2, r3
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a344:	4b5a      	ldr	r3, [pc, #360]	@ (801a4b0 <tcp_enqueue_flags+0x1ec>)
 801a346:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a34a:	3301      	adds	r3, #1
 801a34c:	b29a      	uxth	r2, r3
 801a34e:	4b58      	ldr	r3, [pc, #352]	@ (801a4b0 <tcp_enqueue_flags+0x1ec>)
 801a350:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a358:	e09d      	b.n	801a496 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a35a:	693b      	ldr	r3, [r7, #16]
 801a35c:	895a      	ldrh	r2, [r3, #10]
 801a35e:	7dfb      	ldrb	r3, [r7, #23]
 801a360:	b29b      	uxth	r3, r3
 801a362:	429a      	cmp	r2, r3
 801a364:	d206      	bcs.n	801a374 <tcp_enqueue_flags+0xb0>
 801a366:	4b4e      	ldr	r3, [pc, #312]	@ (801a4a0 <tcp_enqueue_flags+0x1dc>)
 801a368:	f240 4239 	movw	r2, #1081	@ 0x439
 801a36c:	4951      	ldr	r1, [pc, #324]	@ (801a4b4 <tcp_enqueue_flags+0x1f0>)
 801a36e:	484e      	ldr	r0, [pc, #312]	@ (801a4a8 <tcp_enqueue_flags+0x1e4>)
 801a370:	f005 ff9a 	bl	80202a8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801a378:	78fa      	ldrb	r2, [r7, #3]
 801a37a:	7ffb      	ldrb	r3, [r7, #31]
 801a37c:	9300      	str	r3, [sp, #0]
 801a37e:	460b      	mov	r3, r1
 801a380:	6939      	ldr	r1, [r7, #16]
 801a382:	6878      	ldr	r0, [r7, #4]
 801a384:	f7ff f8ea 	bl	801955c <tcp_create_segment>
 801a388:	60f8      	str	r0, [r7, #12]
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d111      	bne.n	801a3b4 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	8b5b      	ldrh	r3, [r3, #26]
 801a394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a398:	b29a      	uxth	r2, r3
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a39e:	4b44      	ldr	r3, [pc, #272]	@ (801a4b0 <tcp_enqueue_flags+0x1ec>)
 801a3a0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a3a4:	3301      	adds	r3, #1
 801a3a6:	b29a      	uxth	r2, r3
 801a3a8:	4b41      	ldr	r3, [pc, #260]	@ (801a4b0 <tcp_enqueue_flags+0x1ec>)
 801a3aa:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a3ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a3b2:	e070      	b.n	801a496 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	68db      	ldr	r3, [r3, #12]
 801a3b8:	f003 0303 	and.w	r3, r3, #3
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d006      	beq.n	801a3ce <tcp_enqueue_flags+0x10a>
 801a3c0:	4b37      	ldr	r3, [pc, #220]	@ (801a4a0 <tcp_enqueue_flags+0x1dc>)
 801a3c2:	f240 4242 	movw	r2, #1090	@ 0x442
 801a3c6:	493c      	ldr	r1, [pc, #240]	@ (801a4b8 <tcp_enqueue_flags+0x1f4>)
 801a3c8:	4837      	ldr	r0, [pc, #220]	@ (801a4a8 <tcp_enqueue_flags+0x1e4>)
 801a3ca:	f005 ff6d 	bl	80202a8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	891b      	ldrh	r3, [r3, #8]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d006      	beq.n	801a3e4 <tcp_enqueue_flags+0x120>
 801a3d6:	4b32      	ldr	r3, [pc, #200]	@ (801a4a0 <tcp_enqueue_flags+0x1dc>)
 801a3d8:	f240 4243 	movw	r2, #1091	@ 0x443
 801a3dc:	4937      	ldr	r1, [pc, #220]	@ (801a4bc <tcp_enqueue_flags+0x1f8>)
 801a3de:	4832      	ldr	r0, [pc, #200]	@ (801a4a8 <tcp_enqueue_flags+0x1e4>)
 801a3e0:	f005 ff62 	bl	80202a8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d103      	bne.n	801a3f4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	68fa      	ldr	r2, [r7, #12]
 801a3f0:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a3f2:	e00d      	b.n	801a410 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3f8:	61bb      	str	r3, [r7, #24]
 801a3fa:	e002      	b.n	801a402 <tcp_enqueue_flags+0x13e>
 801a3fc:	69bb      	ldr	r3, [r7, #24]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	61bb      	str	r3, [r7, #24]
 801a402:	69bb      	ldr	r3, [r7, #24]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	2b00      	cmp	r3, #0
 801a408:	d1f8      	bne.n	801a3fc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801a40a:	69bb      	ldr	r3, [r7, #24]
 801a40c:	68fa      	ldr	r2, [r7, #12]
 801a40e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	2200      	movs	r2, #0
 801a414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a418:	78fb      	ldrb	r3, [r7, #3]
 801a41a:	f003 0302 	and.w	r3, r3, #2
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d104      	bne.n	801a42c <tcp_enqueue_flags+0x168>
 801a422:	78fb      	ldrb	r3, [r7, #3]
 801a424:	f003 0301 	and.w	r3, r3, #1
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d004      	beq.n	801a436 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a430:	1c5a      	adds	r2, r3, #1
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a436:	78fb      	ldrb	r3, [r7, #3]
 801a438:	f003 0301 	and.w	r3, r3, #1
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d006      	beq.n	801a44e <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	8b5b      	ldrh	r3, [r3, #26]
 801a444:	f043 0320 	orr.w	r3, r3, #32
 801a448:	b29a      	uxth	r2, r3
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	685b      	ldr	r3, [r3, #4]
 801a452:	4618      	mov	r0, r3
 801a454:	f7fa fd06 	bl	8014e64 <pbuf_clen>
 801a458:	4603      	mov	r3, r0
 801a45a:	461a      	mov	r2, r3
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a462:	4413      	add	r3, r2
 801a464:	b29a      	uxth	r2, r3
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a472:	2b00      	cmp	r3, #0
 801a474:	d00e      	beq.n	801a494 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d10a      	bne.n	801a494 <tcp_enqueue_flags+0x1d0>
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a482:	2b00      	cmp	r3, #0
 801a484:	d106      	bne.n	801a494 <tcp_enqueue_flags+0x1d0>
 801a486:	4b06      	ldr	r3, [pc, #24]	@ (801a4a0 <tcp_enqueue_flags+0x1dc>)
 801a488:	f240 4265 	movw	r2, #1125	@ 0x465
 801a48c:	490c      	ldr	r1, [pc, #48]	@ (801a4c0 <tcp_enqueue_flags+0x1fc>)
 801a48e:	4806      	ldr	r0, [pc, #24]	@ (801a4a8 <tcp_enqueue_flags+0x1e4>)
 801a490:	f005 ff0a 	bl	80202a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a494:	2300      	movs	r3, #0
}
 801a496:	4618      	mov	r0, r3
 801a498:	3720      	adds	r7, #32
 801a49a:	46bd      	mov	sp, r7
 801a49c:	bd80      	pop	{r7, pc}
 801a49e:	bf00      	nop
 801a4a0:	0802355c 	.word	0x0802355c
 801a4a4:	08023980 	.word	0x08023980
 801a4a8:	080235b0 	.word	0x080235b0
 801a4ac:	080239d8 	.word	0x080239d8
 801a4b0:	200252ac 	.word	0x200252ac
 801a4b4:	080239f8 	.word	0x080239f8
 801a4b8:	08023a34 	.word	0x08023a34
 801a4bc:	08023a4c 	.word	0x08023a4c
 801a4c0:	08023a78 	.word	0x08023a78

0801a4c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a4c4:	b5b0      	push	{r4, r5, r7, lr}
 801a4c6:	b08a      	sub	sp, #40	@ 0x28
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d106      	bne.n	801a4e0 <tcp_output+0x1c>
 801a4d2:	4b8a      	ldr	r3, [pc, #552]	@ (801a6fc <tcp_output+0x238>)
 801a4d4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801a4d8:	4989      	ldr	r1, [pc, #548]	@ (801a700 <tcp_output+0x23c>)
 801a4da:	488a      	ldr	r0, [pc, #552]	@ (801a704 <tcp_output+0x240>)
 801a4dc:	f005 fee4 	bl	80202a8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	7d1b      	ldrb	r3, [r3, #20]
 801a4e4:	2b01      	cmp	r3, #1
 801a4e6:	d106      	bne.n	801a4f6 <tcp_output+0x32>
 801a4e8:	4b84      	ldr	r3, [pc, #528]	@ (801a6fc <tcp_output+0x238>)
 801a4ea:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801a4ee:	4986      	ldr	r1, [pc, #536]	@ (801a708 <tcp_output+0x244>)
 801a4f0:	4884      	ldr	r0, [pc, #528]	@ (801a704 <tcp_output+0x240>)
 801a4f2:	f005 fed9 	bl	80202a8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a4f6:	4b85      	ldr	r3, [pc, #532]	@ (801a70c <tcp_output+0x248>)
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	687a      	ldr	r2, [r7, #4]
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	d101      	bne.n	801a504 <tcp_output+0x40>
    return ERR_OK;
 801a500:	2300      	movs	r3, #0
 801a502:	e1ce      	b.n	801a8a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a510:	4293      	cmp	r3, r2
 801a512:	bf28      	it	cs
 801a514:	4613      	movcs	r3, r2
 801a516:	b29b      	uxth	r3, r3
 801a518:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a51e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a522:	2b00      	cmp	r3, #0
 801a524:	d10b      	bne.n	801a53e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	8b5b      	ldrh	r3, [r3, #26]
 801a52a:	f003 0302 	and.w	r3, r3, #2
 801a52e:	2b00      	cmp	r3, #0
 801a530:	f000 81aa 	beq.w	801a888 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801a534:	6878      	ldr	r0, [r7, #4]
 801a536:	f000 fddf 	bl	801b0f8 <tcp_send_empty_ack>
 801a53a:	4603      	mov	r3, r0
 801a53c:	e1b1      	b.n	801a8a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a53e:	6879      	ldr	r1, [r7, #4]
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	3304      	adds	r3, #4
 801a544:	461a      	mov	r2, r3
 801a546:	6878      	ldr	r0, [r7, #4]
 801a548:	f7fe ffec 	bl	8019524 <tcp_route>
 801a54c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a54e:	697b      	ldr	r3, [r7, #20]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d102      	bne.n	801a55a <tcp_output+0x96>
    return ERR_RTE;
 801a554:	f06f 0303 	mvn.w	r3, #3
 801a558:	e1a3      	b.n	801a8a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d003      	beq.n	801a568 <tcp_output+0xa4>
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d111      	bne.n	801a58c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a568:	697b      	ldr	r3, [r7, #20]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d002      	beq.n	801a574 <tcp_output+0xb0>
 801a56e:	697b      	ldr	r3, [r7, #20]
 801a570:	3304      	adds	r3, #4
 801a572:	e000      	b.n	801a576 <tcp_output+0xb2>
 801a574:	2300      	movs	r3, #0
 801a576:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a578:	693b      	ldr	r3, [r7, #16]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d102      	bne.n	801a584 <tcp_output+0xc0>
      return ERR_RTE;
 801a57e:	f06f 0303 	mvn.w	r3, #3
 801a582:	e18e      	b.n	801a8a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a584:	693b      	ldr	r3, [r7, #16]
 801a586:	681a      	ldr	r2, [r3, #0]
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a58e:	68db      	ldr	r3, [r3, #12]
 801a590:	685b      	ldr	r3, [r3, #4]
 801a592:	4618      	mov	r0, r3
 801a594:	f7f8 ff30 	bl	80133f8 <lwip_htonl>
 801a598:	4602      	mov	r2, r0
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a59e:	1ad3      	subs	r3, r2, r3
 801a5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a5a2:	8912      	ldrh	r2, [r2, #8]
 801a5a4:	4413      	add	r3, r2
 801a5a6:	69ba      	ldr	r2, [r7, #24]
 801a5a8:	429a      	cmp	r2, r3
 801a5aa:	d227      	bcs.n	801a5fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a5b2:	461a      	mov	r2, r3
 801a5b4:	69bb      	ldr	r3, [r7, #24]
 801a5b6:	4293      	cmp	r3, r2
 801a5b8:	d114      	bne.n	801a5e4 <tcp_output+0x120>
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d110      	bne.n	801a5e4 <tcp_output+0x120>
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d10b      	bne.n	801a5e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	2201      	movs	r2, #1
 801a5d8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	2200      	movs	r2, #0
 801a5e0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	8b5b      	ldrh	r3, [r3, #26]
 801a5e8:	f003 0302 	and.w	r3, r3, #2
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	f000 814d 	beq.w	801a88c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801a5f2:	6878      	ldr	r0, [r7, #4]
 801a5f4:	f000 fd80 	bl	801b0f8 <tcp_send_empty_ack>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	e152      	b.n	801a8a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	2200      	movs	r2, #0
 801a600:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a608:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a60a:	6a3b      	ldr	r3, [r7, #32]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	f000 811c 	beq.w	801a84a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801a612:	e002      	b.n	801a61a <tcp_output+0x156>
 801a614:	6a3b      	ldr	r3, [r7, #32]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	623b      	str	r3, [r7, #32]
 801a61a:	6a3b      	ldr	r3, [r7, #32]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d1f8      	bne.n	801a614 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a622:	e112      	b.n	801a84a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a626:	68db      	ldr	r3, [r3, #12]
 801a628:	899b      	ldrh	r3, [r3, #12]
 801a62a:	b29b      	uxth	r3, r3
 801a62c:	4618      	mov	r0, r3
 801a62e:	f7f8 fecd 	bl	80133cc <lwip_htons>
 801a632:	4603      	mov	r3, r0
 801a634:	b2db      	uxtb	r3, r3
 801a636:	f003 0304 	and.w	r3, r3, #4
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d006      	beq.n	801a64c <tcp_output+0x188>
 801a63e:	4b2f      	ldr	r3, [pc, #188]	@ (801a6fc <tcp_output+0x238>)
 801a640:	f240 5236 	movw	r2, #1334	@ 0x536
 801a644:	4932      	ldr	r1, [pc, #200]	@ (801a710 <tcp_output+0x24c>)
 801a646:	482f      	ldr	r0, [pc, #188]	@ (801a704 <tcp_output+0x240>)
 801a648:	f005 fe2e 	bl	80202a8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a650:	2b00      	cmp	r3, #0
 801a652:	d01f      	beq.n	801a694 <tcp_output+0x1d0>
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	8b5b      	ldrh	r3, [r3, #26]
 801a658:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d119      	bne.n	801a694 <tcp_output+0x1d0>
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a664:	2b00      	cmp	r3, #0
 801a666:	d00b      	beq.n	801a680 <tcp_output+0x1bc>
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d110      	bne.n	801a694 <tcp_output+0x1d0>
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a676:	891a      	ldrh	r2, [r3, #8]
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a67c:	429a      	cmp	r2, r3
 801a67e:	d209      	bcs.n	801a694 <tcp_output+0x1d0>
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a686:	2b00      	cmp	r3, #0
 801a688:	d004      	beq.n	801a694 <tcp_output+0x1d0>
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a690:	2b08      	cmp	r3, #8
 801a692:	d901      	bls.n	801a698 <tcp_output+0x1d4>
 801a694:	2301      	movs	r3, #1
 801a696:	e000      	b.n	801a69a <tcp_output+0x1d6>
 801a698:	2300      	movs	r3, #0
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d106      	bne.n	801a6ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	8b5b      	ldrh	r3, [r3, #26]
 801a6a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	f000 80e4 	beq.w	801a874 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	7d1b      	ldrb	r3, [r3, #20]
 801a6b0:	2b02      	cmp	r3, #2
 801a6b2:	d00d      	beq.n	801a6d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6b6:	68db      	ldr	r3, [r3, #12]
 801a6b8:	899b      	ldrh	r3, [r3, #12]
 801a6ba:	b29c      	uxth	r4, r3
 801a6bc:	2010      	movs	r0, #16
 801a6be:	f7f8 fe85 	bl	80133cc <lwip_htons>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	461a      	mov	r2, r3
 801a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6c8:	68db      	ldr	r3, [r3, #12]
 801a6ca:	4322      	orrs	r2, r4
 801a6cc:	b292      	uxth	r2, r2
 801a6ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a6d0:	697a      	ldr	r2, [r7, #20]
 801a6d2:	6879      	ldr	r1, [r7, #4]
 801a6d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a6d6:	f000 f909 	bl	801a8ec <tcp_output_segment>
 801a6da:	4603      	mov	r3, r0
 801a6dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d016      	beq.n	801a714 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	8b5b      	ldrh	r3, [r3, #26]
 801a6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a6ee:	b29a      	uxth	r2, r3
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	835a      	strh	r2, [r3, #26]
      return err;
 801a6f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a6f8:	e0d3      	b.n	801a8a2 <tcp_output+0x3de>
 801a6fa:	bf00      	nop
 801a6fc:	0802355c 	.word	0x0802355c
 801a700:	08023aa0 	.word	0x08023aa0
 801a704:	080235b0 	.word	0x080235b0
 801a708:	08023ab8 	.word	0x08023ab8
 801a70c:	200253f4 	.word	0x200253f4
 801a710:	08023ae0 	.word	0x08023ae0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a716:	681a      	ldr	r2, [r3, #0]
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	7d1b      	ldrb	r3, [r3, #20]
 801a720:	2b02      	cmp	r3, #2
 801a722:	d006      	beq.n	801a732 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	8b5b      	ldrh	r3, [r3, #26]
 801a728:	f023 0303 	bic.w	r3, r3, #3
 801a72c:	b29a      	uxth	r2, r3
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a734:	68db      	ldr	r3, [r3, #12]
 801a736:	685b      	ldr	r3, [r3, #4]
 801a738:	4618      	mov	r0, r3
 801a73a:	f7f8 fe5d 	bl	80133f8 <lwip_htonl>
 801a73e:	4604      	mov	r4, r0
 801a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a742:	891b      	ldrh	r3, [r3, #8]
 801a744:	461d      	mov	r5, r3
 801a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a748:	68db      	ldr	r3, [r3, #12]
 801a74a:	899b      	ldrh	r3, [r3, #12]
 801a74c:	b29b      	uxth	r3, r3
 801a74e:	4618      	mov	r0, r3
 801a750:	f7f8 fe3c 	bl	80133cc <lwip_htons>
 801a754:	4603      	mov	r3, r0
 801a756:	b2db      	uxtb	r3, r3
 801a758:	f003 0303 	and.w	r3, r3, #3
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d001      	beq.n	801a764 <tcp_output+0x2a0>
 801a760:	2301      	movs	r3, #1
 801a762:	e000      	b.n	801a766 <tcp_output+0x2a2>
 801a764:	2300      	movs	r3, #0
 801a766:	442b      	add	r3, r5
 801a768:	4423      	add	r3, r4
 801a76a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a770:	68bb      	ldr	r3, [r7, #8]
 801a772:	1ad3      	subs	r3, r2, r3
 801a774:	2b00      	cmp	r3, #0
 801a776:	da02      	bge.n	801a77e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	68ba      	ldr	r2, [r7, #8]
 801a77c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a780:	891b      	ldrh	r3, [r3, #8]
 801a782:	461c      	mov	r4, r3
 801a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a786:	68db      	ldr	r3, [r3, #12]
 801a788:	899b      	ldrh	r3, [r3, #12]
 801a78a:	b29b      	uxth	r3, r3
 801a78c:	4618      	mov	r0, r3
 801a78e:	f7f8 fe1d 	bl	80133cc <lwip_htons>
 801a792:	4603      	mov	r3, r0
 801a794:	b2db      	uxtb	r3, r3
 801a796:	f003 0303 	and.w	r3, r3, #3
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d001      	beq.n	801a7a2 <tcp_output+0x2de>
 801a79e:	2301      	movs	r3, #1
 801a7a0:	e000      	b.n	801a7a4 <tcp_output+0x2e0>
 801a7a2:	2300      	movs	r3, #0
 801a7a4:	4423      	add	r3, r4
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d049      	beq.n	801a83e <tcp_output+0x37a>
      seg->next = NULL;
 801a7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ac:	2200      	movs	r2, #0
 801a7ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d105      	bne.n	801a7c4 <tcp_output+0x300>
        pcb->unacked = seg;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7bc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801a7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7c0:	623b      	str	r3, [r7, #32]
 801a7c2:	e03f      	b.n	801a844 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7c6:	68db      	ldr	r3, [r3, #12]
 801a7c8:	685b      	ldr	r3, [r3, #4]
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f7f8 fe14 	bl	80133f8 <lwip_htonl>
 801a7d0:	4604      	mov	r4, r0
 801a7d2:	6a3b      	ldr	r3, [r7, #32]
 801a7d4:	68db      	ldr	r3, [r3, #12]
 801a7d6:	685b      	ldr	r3, [r3, #4]
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f7f8 fe0d 	bl	80133f8 <lwip_htonl>
 801a7de:	4603      	mov	r3, r0
 801a7e0:	1ae3      	subs	r3, r4, r3
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	da24      	bge.n	801a830 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	3370      	adds	r3, #112	@ 0x70
 801a7ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a7ec:	e002      	b.n	801a7f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a7ee:	69fb      	ldr	r3, [r7, #28]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a7f4:	69fb      	ldr	r3, [r7, #28]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d011      	beq.n	801a820 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a7fc:	69fb      	ldr	r3, [r7, #28]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	68db      	ldr	r3, [r3, #12]
 801a802:	685b      	ldr	r3, [r3, #4]
 801a804:	4618      	mov	r0, r3
 801a806:	f7f8 fdf7 	bl	80133f8 <lwip_htonl>
 801a80a:	4604      	mov	r4, r0
 801a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a80e:	68db      	ldr	r3, [r3, #12]
 801a810:	685b      	ldr	r3, [r3, #4]
 801a812:	4618      	mov	r0, r3
 801a814:	f7f8 fdf0 	bl	80133f8 <lwip_htonl>
 801a818:	4603      	mov	r3, r0
 801a81a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	dbe6      	blt.n	801a7ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801a820:	69fb      	ldr	r3, [r7, #28]
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a826:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a828:	69fb      	ldr	r3, [r7, #28]
 801a82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a82c:	601a      	str	r2, [r3, #0]
 801a82e:	e009      	b.n	801a844 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a830:	6a3b      	ldr	r3, [r7, #32]
 801a832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a834:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a836:	6a3b      	ldr	r3, [r7, #32]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	623b      	str	r3, [r7, #32]
 801a83c:	e002      	b.n	801a844 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a83e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a840:	f7fb fe55 	bl	80164ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a848:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801a84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d012      	beq.n	801a876 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	685b      	ldr	r3, [r3, #4]
 801a856:	4618      	mov	r0, r3
 801a858:	f7f8 fdce 	bl	80133f8 <lwip_htonl>
 801a85c:	4602      	mov	r2, r0
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a862:	1ad3      	subs	r3, r2, r3
 801a864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a866:	8912      	ldrh	r2, [r2, #8]
 801a868:	4413      	add	r3, r2
  while (seg != NULL &&
 801a86a:	69ba      	ldr	r2, [r7, #24]
 801a86c:	429a      	cmp	r2, r3
 801a86e:	f4bf aed9 	bcs.w	801a624 <tcp_output+0x160>
 801a872:	e000      	b.n	801a876 <tcp_output+0x3b2>
      break;
 801a874:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d108      	bne.n	801a890 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	2200      	movs	r2, #0
 801a882:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a886:	e004      	b.n	801a892 <tcp_output+0x3ce>
    goto output_done;
 801a888:	bf00      	nop
 801a88a:	e002      	b.n	801a892 <tcp_output+0x3ce>
    goto output_done;
 801a88c:	bf00      	nop
 801a88e:	e000      	b.n	801a892 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a890:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	8b5b      	ldrh	r3, [r3, #26]
 801a896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a89a:	b29a      	uxth	r2, r3
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a8a0:	2300      	movs	r3, #0
}
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	3728      	adds	r7, #40	@ 0x28
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bdb0      	pop	{r4, r5, r7, pc}
 801a8aa:	bf00      	nop

0801a8ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b082      	sub	sp, #8
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d106      	bne.n	801a8c8 <tcp_output_segment_busy+0x1c>
 801a8ba:	4b09      	ldr	r3, [pc, #36]	@ (801a8e0 <tcp_output_segment_busy+0x34>)
 801a8bc:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a8c0:	4908      	ldr	r1, [pc, #32]	@ (801a8e4 <tcp_output_segment_busy+0x38>)
 801a8c2:	4809      	ldr	r0, [pc, #36]	@ (801a8e8 <tcp_output_segment_busy+0x3c>)
 801a8c4:	f005 fcf0 	bl	80202a8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	685b      	ldr	r3, [r3, #4]
 801a8cc:	7b9b      	ldrb	r3, [r3, #14]
 801a8ce:	2b01      	cmp	r3, #1
 801a8d0:	d001      	beq.n	801a8d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a8d2:	2301      	movs	r3, #1
 801a8d4:	e000      	b.n	801a8d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a8d6:	2300      	movs	r3, #0
}
 801a8d8:	4618      	mov	r0, r3
 801a8da:	3708      	adds	r7, #8
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bd80      	pop	{r7, pc}
 801a8e0:	0802355c 	.word	0x0802355c
 801a8e4:	08023af8 	.word	0x08023af8
 801a8e8:	080235b0 	.word	0x080235b0

0801a8ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a8ec:	b5b0      	push	{r4, r5, r7, lr}
 801a8ee:	b08c      	sub	sp, #48	@ 0x30
 801a8f0:	af04      	add	r7, sp, #16
 801a8f2:	60f8      	str	r0, [r7, #12]
 801a8f4:	60b9      	str	r1, [r7, #8]
 801a8f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d106      	bne.n	801a90c <tcp_output_segment+0x20>
 801a8fe:	4b68      	ldr	r3, [pc, #416]	@ (801aaa0 <tcp_output_segment+0x1b4>)
 801a900:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a904:	4967      	ldr	r1, [pc, #412]	@ (801aaa4 <tcp_output_segment+0x1b8>)
 801a906:	4868      	ldr	r0, [pc, #416]	@ (801aaa8 <tcp_output_segment+0x1bc>)
 801a908:	f005 fcce 	bl	80202a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a90c:	68bb      	ldr	r3, [r7, #8]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d106      	bne.n	801a920 <tcp_output_segment+0x34>
 801a912:	4b63      	ldr	r3, [pc, #396]	@ (801aaa0 <tcp_output_segment+0x1b4>)
 801a914:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a918:	4964      	ldr	r1, [pc, #400]	@ (801aaac <tcp_output_segment+0x1c0>)
 801a91a:	4863      	ldr	r0, [pc, #396]	@ (801aaa8 <tcp_output_segment+0x1bc>)
 801a91c:	f005 fcc4 	bl	80202a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d106      	bne.n	801a934 <tcp_output_segment+0x48>
 801a926:	4b5e      	ldr	r3, [pc, #376]	@ (801aaa0 <tcp_output_segment+0x1b4>)
 801a928:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a92c:	4960      	ldr	r1, [pc, #384]	@ (801aab0 <tcp_output_segment+0x1c4>)
 801a92e:	485e      	ldr	r0, [pc, #376]	@ (801aaa8 <tcp_output_segment+0x1bc>)
 801a930:	f005 fcba 	bl	80202a8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a934:	68f8      	ldr	r0, [r7, #12]
 801a936:	f7ff ffb9 	bl	801a8ac <tcp_output_segment_busy>
 801a93a:	4603      	mov	r3, r0
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d001      	beq.n	801a944 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a940:	2300      	movs	r3, #0
 801a942:	e0a9      	b.n	801aa98 <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	68dc      	ldr	r4, [r3, #12]
 801a94c:	4610      	mov	r0, r2
 801a94e:	f7f8 fd53 	bl	80133f8 <lwip_htonl>
 801a952:	4603      	mov	r3, r0
 801a954:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a956:	68bb      	ldr	r3, [r7, #8]
 801a958:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a95a:	68fb      	ldr	r3, [r7, #12]
 801a95c:	68dc      	ldr	r4, [r3, #12]
 801a95e:	4610      	mov	r0, r2
 801a960:	f7f8 fd34 	bl	80133cc <lwip_htons>
 801a964:	4603      	mov	r3, r0
 801a966:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a96c:	68ba      	ldr	r2, [r7, #8]
 801a96e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a970:	441a      	add	r2, r3
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	68db      	ldr	r3, [r3, #12]
 801a97a:	3314      	adds	r3, #20
 801a97c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	7a9b      	ldrb	r3, [r3, #10]
 801a982:	f003 0301 	and.w	r3, r3, #1
 801a986:	2b00      	cmp	r3, #0
 801a988:	d015      	beq.n	801a9b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	3304      	adds	r3, #4
 801a98e:	461a      	mov	r2, r3
 801a990:	6879      	ldr	r1, [r7, #4]
 801a992:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801a996:	f7fc f999 	bl	8016ccc <tcp_eff_send_mss_netif>
 801a99a:	4603      	mov	r3, r0
 801a99c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a99e:	8b7b      	ldrh	r3, [r7, #26]
 801a9a0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f7f8 fd27 	bl	80133f8 <lwip_htonl>
 801a9aa:	4602      	mov	r2, r0
 801a9ac:	69fb      	ldr	r3, [r7, #28]
 801a9ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a9b0:	69fb      	ldr	r3, [r7, #28]
 801a9b2:	3304      	adds	r3, #4
 801a9b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a9b6:	68bb      	ldr	r3, [r7, #8]
 801a9b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	da02      	bge.n	801a9c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	2200      	movs	r2, #0
 801a9c4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801a9c6:	68bb      	ldr	r3, [r7, #8]
 801a9c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d10c      	bne.n	801a9e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a9ce:	4b39      	ldr	r3, [pc, #228]	@ (801aab4 <tcp_output_segment+0x1c8>)
 801a9d0:	681a      	ldr	r2, [r3, #0]
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	68db      	ldr	r3, [r3, #12]
 801a9da:	685b      	ldr	r3, [r3, #4]
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7f8 fd0b 	bl	80133f8 <lwip_htonl>
 801a9e2:	4602      	mov	r2, r0
 801a9e4:	68bb      	ldr	r3, [r7, #8]
 801a9e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	68da      	ldr	r2, [r3, #12]
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	685b      	ldr	r3, [r3, #4]
 801a9f0:	685b      	ldr	r3, [r3, #4]
 801a9f2:	1ad3      	subs	r3, r2, r3
 801a9f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	685b      	ldr	r3, [r3, #4]
 801a9fa:	8959      	ldrh	r1, [r3, #10]
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	685b      	ldr	r3, [r3, #4]
 801aa00:	8b3a      	ldrh	r2, [r7, #24]
 801aa02:	1a8a      	subs	r2, r1, r2
 801aa04:	b292      	uxth	r2, r2
 801aa06:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	685b      	ldr	r3, [r3, #4]
 801aa0c:	8919      	ldrh	r1, [r3, #8]
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	685b      	ldr	r3, [r3, #4]
 801aa12:	8b3a      	ldrh	r2, [r7, #24]
 801aa14:	1a8a      	subs	r2, r1, r2
 801aa16:	b292      	uxth	r2, r2
 801aa18:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	685b      	ldr	r3, [r3, #4]
 801aa1e:	68fa      	ldr	r2, [r7, #12]
 801aa20:	68d2      	ldr	r2, [r2, #12]
 801aa22:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	68db      	ldr	r3, [r3, #12]
 801aa28:	2200      	movs	r2, #0
 801aa2a:	741a      	strb	r2, [r3, #16]
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	68da      	ldr	r2, [r3, #12]
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	7a9b      	ldrb	r3, [r3, #10]
 801aa38:	f003 0301 	and.w	r3, r3, #1
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d001      	beq.n	801aa44 <tcp_output_segment+0x158>
 801aa40:	2318      	movs	r3, #24
 801aa42:	e000      	b.n	801aa46 <tcp_output_segment+0x15a>
 801aa44:	2314      	movs	r3, #20
 801aa46:	4413      	add	r3, r2
 801aa48:	69fa      	ldr	r2, [r7, #28]
 801aa4a:	429a      	cmp	r2, r3
 801aa4c:	d006      	beq.n	801aa5c <tcp_output_segment+0x170>
 801aa4e:	4b14      	ldr	r3, [pc, #80]	@ (801aaa0 <tcp_output_segment+0x1b4>)
 801aa50:	f240 621c 	movw	r2, #1564	@ 0x61c
 801aa54:	4918      	ldr	r1, [pc, #96]	@ (801aab8 <tcp_output_segment+0x1cc>)
 801aa56:	4814      	ldr	r0, [pc, #80]	@ (801aaa8 <tcp_output_segment+0x1bc>)
 801aa58:	f005 fc26 	bl	80202a8 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801aa5c:	4b17      	ldr	r3, [pc, #92]	@ (801aabc <tcp_output_segment+0x1d0>)
 801aa5e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801aa62:	3301      	adds	r3, #1
 801aa64:	b29a      	uxth	r2, r3
 801aa66:	4b15      	ldr	r3, [pc, #84]	@ (801aabc <tcp_output_segment+0x1d0>)
 801aa68:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	6858      	ldr	r0, [r3, #4]
 801aa70:	68b9      	ldr	r1, [r7, #8]
 801aa72:	68bb      	ldr	r3, [r7, #8]
 801aa74:	1d1c      	adds	r4, r3, #4
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	7add      	ldrb	r5, [r3, #11]
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	7a9b      	ldrb	r3, [r3, #10]
 801aa7e:	687a      	ldr	r2, [r7, #4]
 801aa80:	9202      	str	r2, [sp, #8]
 801aa82:	2206      	movs	r2, #6
 801aa84:	9201      	str	r2, [sp, #4]
 801aa86:	9300      	str	r3, [sp, #0]
 801aa88:	462b      	mov	r3, r5
 801aa8a:	4622      	mov	r2, r4
 801aa8c:	f002 fec4 	bl	801d818 <ip4_output_if>
 801aa90:	4603      	mov	r3, r0
 801aa92:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801aa94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aa98:	4618      	mov	r0, r3
 801aa9a:	3720      	adds	r7, #32
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bdb0      	pop	{r4, r5, r7, pc}
 801aaa0:	0802355c 	.word	0x0802355c
 801aaa4:	08023b20 	.word	0x08023b20
 801aaa8:	080235b0 	.word	0x080235b0
 801aaac:	08023b40 	.word	0x08023b40
 801aab0:	08023b60 	.word	0x08023b60
 801aab4:	200253a8 	.word	0x200253a8
 801aab8:	08023b84 	.word	0x08023b84
 801aabc:	200252ac 	.word	0x200252ac

0801aac0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801aac0:	b5b0      	push	{r4, r5, r7, lr}
 801aac2:	b084      	sub	sp, #16
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d106      	bne.n	801aadc <tcp_rexmit_rto_prepare+0x1c>
 801aace:	4b31      	ldr	r3, [pc, #196]	@ (801ab94 <tcp_rexmit_rto_prepare+0xd4>)
 801aad0:	f240 6263 	movw	r2, #1635	@ 0x663
 801aad4:	4930      	ldr	r1, [pc, #192]	@ (801ab98 <tcp_rexmit_rto_prepare+0xd8>)
 801aad6:	4831      	ldr	r0, [pc, #196]	@ (801ab9c <tcp_rexmit_rto_prepare+0xdc>)
 801aad8:	f005 fbe6 	bl	80202a8 <iprintf>

  if (pcb->unacked == NULL) {
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d102      	bne.n	801aaea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801aae4:	f06f 0305 	mvn.w	r3, #5
 801aae8:	e050      	b.n	801ab8c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aaee:	60fb      	str	r3, [r7, #12]
 801aaf0:	e00b      	b.n	801ab0a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801aaf2:	68f8      	ldr	r0, [r7, #12]
 801aaf4:	f7ff feda 	bl	801a8ac <tcp_output_segment_busy>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d002      	beq.n	801ab04 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801aafe:	f06f 0305 	mvn.w	r3, #5
 801ab02:	e043      	b.n	801ab8c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	60fb      	str	r3, [r7, #12]
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d1ef      	bne.n	801aaf2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801ab12:	68f8      	ldr	r0, [r7, #12]
 801ab14:	f7ff feca 	bl	801a8ac <tcp_output_segment_busy>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d002      	beq.n	801ab24 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801ab1e:	f06f 0305 	mvn.w	r3, #5
 801ab22:	e033      	b.n	801ab8c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	2200      	movs	r2, #0
 801ab38:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	8b5b      	ldrh	r3, [r3, #26]
 801ab3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801ab42:	b29a      	uxth	r2, r3
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	68db      	ldr	r3, [r3, #12]
 801ab4c:	685b      	ldr	r3, [r3, #4]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f7f8 fc52 	bl	80133f8 <lwip_htonl>
 801ab54:	4604      	mov	r4, r0
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	891b      	ldrh	r3, [r3, #8]
 801ab5a:	461d      	mov	r5, r3
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	68db      	ldr	r3, [r3, #12]
 801ab60:	899b      	ldrh	r3, [r3, #12]
 801ab62:	b29b      	uxth	r3, r3
 801ab64:	4618      	mov	r0, r3
 801ab66:	f7f8 fc31 	bl	80133cc <lwip_htons>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	b2db      	uxtb	r3, r3
 801ab6e:	f003 0303 	and.w	r3, r3, #3
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d001      	beq.n	801ab7a <tcp_rexmit_rto_prepare+0xba>
 801ab76:	2301      	movs	r3, #1
 801ab78:	e000      	b.n	801ab7c <tcp_rexmit_rto_prepare+0xbc>
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	442b      	add	r3, r5
 801ab7e:	18e2      	adds	r2, r4, r3
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	2200      	movs	r2, #0
 801ab88:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801ab8a:	2300      	movs	r3, #0
}
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	3710      	adds	r7, #16
 801ab90:	46bd      	mov	sp, r7
 801ab92:	bdb0      	pop	{r4, r5, r7, pc}
 801ab94:	0802355c 	.word	0x0802355c
 801ab98:	08023b98 	.word	0x08023b98
 801ab9c:	080235b0 	.word	0x080235b0

0801aba0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b082      	sub	sp, #8
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d106      	bne.n	801abbc <tcp_rexmit_rto_commit+0x1c>
 801abae:	4b0d      	ldr	r3, [pc, #52]	@ (801abe4 <tcp_rexmit_rto_commit+0x44>)
 801abb0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801abb4:	490c      	ldr	r1, [pc, #48]	@ (801abe8 <tcp_rexmit_rto_commit+0x48>)
 801abb6:	480d      	ldr	r0, [pc, #52]	@ (801abec <tcp_rexmit_rto_commit+0x4c>)
 801abb8:	f005 fb76 	bl	80202a8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801abc2:	2bff      	cmp	r3, #255	@ 0xff
 801abc4:	d007      	beq.n	801abd6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801abcc:	3301      	adds	r3, #1
 801abce:	b2da      	uxtb	r2, r3
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801abd6:	6878      	ldr	r0, [r7, #4]
 801abd8:	f7ff fc74 	bl	801a4c4 <tcp_output>
}
 801abdc:	bf00      	nop
 801abde:	3708      	adds	r7, #8
 801abe0:	46bd      	mov	sp, r7
 801abe2:	bd80      	pop	{r7, pc}
 801abe4:	0802355c 	.word	0x0802355c
 801abe8:	08023bbc 	.word	0x08023bbc
 801abec:	080235b0 	.word	0x080235b0

0801abf0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801abf0:	b580      	push	{r7, lr}
 801abf2:	b082      	sub	sp, #8
 801abf4:	af00      	add	r7, sp, #0
 801abf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d106      	bne.n	801ac0c <tcp_rexmit_rto+0x1c>
 801abfe:	4b0a      	ldr	r3, [pc, #40]	@ (801ac28 <tcp_rexmit_rto+0x38>)
 801ac00:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801ac04:	4909      	ldr	r1, [pc, #36]	@ (801ac2c <tcp_rexmit_rto+0x3c>)
 801ac06:	480a      	ldr	r0, [pc, #40]	@ (801ac30 <tcp_rexmit_rto+0x40>)
 801ac08:	f005 fb4e 	bl	80202a8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801ac0c:	6878      	ldr	r0, [r7, #4]
 801ac0e:	f7ff ff57 	bl	801aac0 <tcp_rexmit_rto_prepare>
 801ac12:	4603      	mov	r3, r0
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d102      	bne.n	801ac1e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801ac18:	6878      	ldr	r0, [r7, #4]
 801ac1a:	f7ff ffc1 	bl	801aba0 <tcp_rexmit_rto_commit>
  }
}
 801ac1e:	bf00      	nop
 801ac20:	3708      	adds	r7, #8
 801ac22:	46bd      	mov	sp, r7
 801ac24:	bd80      	pop	{r7, pc}
 801ac26:	bf00      	nop
 801ac28:	0802355c 	.word	0x0802355c
 801ac2c:	08023be0 	.word	0x08023be0
 801ac30:	080235b0 	.word	0x080235b0

0801ac34 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801ac34:	b590      	push	{r4, r7, lr}
 801ac36:	b085      	sub	sp, #20
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d106      	bne.n	801ac50 <tcp_rexmit+0x1c>
 801ac42:	4b2f      	ldr	r3, [pc, #188]	@ (801ad00 <tcp_rexmit+0xcc>)
 801ac44:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801ac48:	492e      	ldr	r1, [pc, #184]	@ (801ad04 <tcp_rexmit+0xd0>)
 801ac4a:	482f      	ldr	r0, [pc, #188]	@ (801ad08 <tcp_rexmit+0xd4>)
 801ac4c:	f005 fb2c 	bl	80202a8 <iprintf>

  if (pcb->unacked == NULL) {
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d102      	bne.n	801ac5e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ac58:	f06f 0305 	mvn.w	r3, #5
 801ac5c:	e04c      	b.n	801acf8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac62:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ac64:	68b8      	ldr	r0, [r7, #8]
 801ac66:	f7ff fe21 	bl	801a8ac <tcp_output_segment_busy>
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d002      	beq.n	801ac76 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ac70:	f06f 0305 	mvn.w	r3, #5
 801ac74:	e040      	b.n	801acf8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ac76:	68bb      	ldr	r3, [r7, #8]
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	336c      	adds	r3, #108	@ 0x6c
 801ac82:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ac84:	e002      	b.n	801ac8c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ac8c:	68fb      	ldr	r3, [r7, #12]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d011      	beq.n	801acb8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	68db      	ldr	r3, [r3, #12]
 801ac9a:	685b      	ldr	r3, [r3, #4]
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	f7f8 fbab 	bl	80133f8 <lwip_htonl>
 801aca2:	4604      	mov	r4, r0
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	68db      	ldr	r3, [r3, #12]
 801aca8:	685b      	ldr	r3, [r3, #4]
 801acaa:	4618      	mov	r0, r3
 801acac:	f7f8 fba4 	bl	80133f8 <lwip_htonl>
 801acb0:	4603      	mov	r3, r0
 801acb2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	dbe6      	blt.n	801ac86 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	681a      	ldr	r2, [r3, #0]
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	68ba      	ldr	r2, [r7, #8]
 801acc4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801acc6:	68bb      	ldr	r3, [r7, #8]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d103      	bne.n	801acd6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	2200      	movs	r2, #0
 801acd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801acdc:	2bff      	cmp	r3, #255	@ 0xff
 801acde:	d007      	beq.n	801acf0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ace6:	3301      	adds	r3, #1
 801ace8:	b2da      	uxtb	r2, r3
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	2200      	movs	r2, #0
 801acf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801acf6:	2300      	movs	r3, #0
}
 801acf8:	4618      	mov	r0, r3
 801acfa:	3714      	adds	r7, #20
 801acfc:	46bd      	mov	sp, r7
 801acfe:	bd90      	pop	{r4, r7, pc}
 801ad00:	0802355c 	.word	0x0802355c
 801ad04:	08023bfc 	.word	0x08023bfc
 801ad08:	080235b0 	.word	0x080235b0

0801ad0c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b082      	sub	sp, #8
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d106      	bne.n	801ad28 <tcp_rexmit_fast+0x1c>
 801ad1a:	4b2a      	ldr	r3, [pc, #168]	@ (801adc4 <tcp_rexmit_fast+0xb8>)
 801ad1c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801ad20:	4929      	ldr	r1, [pc, #164]	@ (801adc8 <tcp_rexmit_fast+0xbc>)
 801ad22:	482a      	ldr	r0, [pc, #168]	@ (801adcc <tcp_rexmit_fast+0xc0>)
 801ad24:	f005 fac0 	bl	80202a8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d045      	beq.n	801adbc <tcp_rexmit_fast+0xb0>
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	8b5b      	ldrh	r3, [r3, #26]
 801ad34:	f003 0304 	and.w	r3, r3, #4
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d13f      	bne.n	801adbc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ad3c:	6878      	ldr	r0, [r7, #4]
 801ad3e:	f7ff ff79 	bl	801ac34 <tcp_rexmit>
 801ad42:	4603      	mov	r3, r0
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d139      	bne.n	801adbc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ad54:	4293      	cmp	r3, r2
 801ad56:	bf28      	it	cs
 801ad58:	4613      	movcs	r3, r2
 801ad5a:	b29b      	uxth	r3, r3
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	da00      	bge.n	801ad62 <tcp_rexmit_fast+0x56>
 801ad60:	3301      	adds	r3, #1
 801ad62:	105b      	asrs	r3, r3, #1
 801ad64:	b29a      	uxth	r2, r3
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801ad72:	461a      	mov	r2, r3
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ad78:	005b      	lsls	r3, r3, #1
 801ad7a:	429a      	cmp	r2, r3
 801ad7c:	d206      	bcs.n	801ad8c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ad82:	005b      	lsls	r3, r3, #1
 801ad84:	b29a      	uxth	r2, r3
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ad96:	4619      	mov	r1, r3
 801ad98:	0049      	lsls	r1, r1, #1
 801ad9a:	440b      	add	r3, r1
 801ad9c:	b29b      	uxth	r3, r3
 801ad9e:	4413      	add	r3, r2
 801ada0:	b29a      	uxth	r2, r3
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	8b5b      	ldrh	r3, [r3, #26]
 801adac:	f043 0304 	orr.w	r3, r3, #4
 801adb0:	b29a      	uxth	r2, r3
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	2200      	movs	r2, #0
 801adba:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801adbc:	bf00      	nop
 801adbe:	3708      	adds	r7, #8
 801adc0:	46bd      	mov	sp, r7
 801adc2:	bd80      	pop	{r7, pc}
 801adc4:	0802355c 	.word	0x0802355c
 801adc8:	08023c14 	.word	0x08023c14
 801adcc:	080235b0 	.word	0x080235b0

0801add0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b086      	sub	sp, #24
 801add4:	af00      	add	r7, sp, #0
 801add6:	60f8      	str	r0, [r7, #12]
 801add8:	607b      	str	r3, [r7, #4]
 801adda:	460b      	mov	r3, r1
 801addc:	817b      	strh	r3, [r7, #10]
 801adde:	4613      	mov	r3, r2
 801ade0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ade2:	897a      	ldrh	r2, [r7, #10]
 801ade4:	893b      	ldrh	r3, [r7, #8]
 801ade6:	4413      	add	r3, r2
 801ade8:	b29b      	uxth	r3, r3
 801adea:	3314      	adds	r3, #20
 801adec:	b29b      	uxth	r3, r3
 801adee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801adf2:	4619      	mov	r1, r3
 801adf4:	2022      	movs	r0, #34	@ 0x22
 801adf6:	f7f9 fcc3 	bl	8014780 <pbuf_alloc>
 801adfa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801adfc:	697b      	ldr	r3, [r7, #20]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d04d      	beq.n	801ae9e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ae02:	897b      	ldrh	r3, [r7, #10]
 801ae04:	3313      	adds	r3, #19
 801ae06:	697a      	ldr	r2, [r7, #20]
 801ae08:	8952      	ldrh	r2, [r2, #10]
 801ae0a:	4293      	cmp	r3, r2
 801ae0c:	db06      	blt.n	801ae1c <tcp_output_alloc_header_common+0x4c>
 801ae0e:	4b26      	ldr	r3, [pc, #152]	@ (801aea8 <tcp_output_alloc_header_common+0xd8>)
 801ae10:	f240 7223 	movw	r2, #1827	@ 0x723
 801ae14:	4925      	ldr	r1, [pc, #148]	@ (801aeac <tcp_output_alloc_header_common+0xdc>)
 801ae16:	4826      	ldr	r0, [pc, #152]	@ (801aeb0 <tcp_output_alloc_header_common+0xe0>)
 801ae18:	f005 fa46 	bl	80202a8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ae1c:	697b      	ldr	r3, [r7, #20]
 801ae1e:	685b      	ldr	r3, [r3, #4]
 801ae20:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ae22:	8c3b      	ldrh	r3, [r7, #32]
 801ae24:	4618      	mov	r0, r3
 801ae26:	f7f8 fad1 	bl	80133cc <lwip_htons>
 801ae2a:	4603      	mov	r3, r0
 801ae2c:	461a      	mov	r2, r3
 801ae2e:	693b      	ldr	r3, [r7, #16]
 801ae30:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ae32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ae34:	4618      	mov	r0, r3
 801ae36:	f7f8 fac9 	bl	80133cc <lwip_htons>
 801ae3a:	4603      	mov	r3, r0
 801ae3c:	461a      	mov	r2, r3
 801ae3e:	693b      	ldr	r3, [r7, #16]
 801ae40:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ae42:	693b      	ldr	r3, [r7, #16]
 801ae44:	687a      	ldr	r2, [r7, #4]
 801ae46:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ae48:	68f8      	ldr	r0, [r7, #12]
 801ae4a:	f7f8 fad5 	bl	80133f8 <lwip_htonl>
 801ae4e:	4602      	mov	r2, r0
 801ae50:	693b      	ldr	r3, [r7, #16]
 801ae52:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ae54:	897b      	ldrh	r3, [r7, #10]
 801ae56:	089b      	lsrs	r3, r3, #2
 801ae58:	b29b      	uxth	r3, r3
 801ae5a:	3305      	adds	r3, #5
 801ae5c:	b29b      	uxth	r3, r3
 801ae5e:	031b      	lsls	r3, r3, #12
 801ae60:	b29a      	uxth	r2, r3
 801ae62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ae66:	b29b      	uxth	r3, r3
 801ae68:	4313      	orrs	r3, r2
 801ae6a:	b29b      	uxth	r3, r3
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	f7f8 faad 	bl	80133cc <lwip_htons>
 801ae72:	4603      	mov	r3, r0
 801ae74:	461a      	mov	r2, r3
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ae7a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f7f8 faa5 	bl	80133cc <lwip_htons>
 801ae82:	4603      	mov	r3, r0
 801ae84:	461a      	mov	r2, r3
 801ae86:	693b      	ldr	r3, [r7, #16]
 801ae88:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ae8a:	693b      	ldr	r3, [r7, #16]
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	741a      	strb	r2, [r3, #16]
 801ae90:	2200      	movs	r2, #0
 801ae92:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ae94:	693b      	ldr	r3, [r7, #16]
 801ae96:	2200      	movs	r2, #0
 801ae98:	749a      	strb	r2, [r3, #18]
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ae9e:	697b      	ldr	r3, [r7, #20]
}
 801aea0:	4618      	mov	r0, r3
 801aea2:	3718      	adds	r7, #24
 801aea4:	46bd      	mov	sp, r7
 801aea6:	bd80      	pop	{r7, pc}
 801aea8:	0802355c 	.word	0x0802355c
 801aeac:	08023c34 	.word	0x08023c34
 801aeb0:	080235b0 	.word	0x080235b0

0801aeb4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801aeb4:	b5b0      	push	{r4, r5, r7, lr}
 801aeb6:	b08a      	sub	sp, #40	@ 0x28
 801aeb8:	af04      	add	r7, sp, #16
 801aeba:	60f8      	str	r0, [r7, #12]
 801aebc:	607b      	str	r3, [r7, #4]
 801aebe:	460b      	mov	r3, r1
 801aec0:	817b      	strh	r3, [r7, #10]
 801aec2:	4613      	mov	r3, r2
 801aec4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d106      	bne.n	801aeda <tcp_output_alloc_header+0x26>
 801aecc:	4b15      	ldr	r3, [pc, #84]	@ (801af24 <tcp_output_alloc_header+0x70>)
 801aece:	f240 7242 	movw	r2, #1858	@ 0x742
 801aed2:	4915      	ldr	r1, [pc, #84]	@ (801af28 <tcp_output_alloc_header+0x74>)
 801aed4:	4815      	ldr	r0, [pc, #84]	@ (801af2c <tcp_output_alloc_header+0x78>)
 801aed6:	f005 f9e7 	bl	80202a8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801aede:	68fb      	ldr	r3, [r7, #12]
 801aee0:	8adb      	ldrh	r3, [r3, #22]
 801aee2:	68fa      	ldr	r2, [r7, #12]
 801aee4:	8b12      	ldrh	r2, [r2, #24]
 801aee6:	68f9      	ldr	r1, [r7, #12]
 801aee8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801aeea:	893d      	ldrh	r5, [r7, #8]
 801aeec:	897c      	ldrh	r4, [r7, #10]
 801aeee:	9103      	str	r1, [sp, #12]
 801aef0:	2110      	movs	r1, #16
 801aef2:	9102      	str	r1, [sp, #8]
 801aef4:	9201      	str	r2, [sp, #4]
 801aef6:	9300      	str	r3, [sp, #0]
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	462a      	mov	r2, r5
 801aefc:	4621      	mov	r1, r4
 801aefe:	f7ff ff67 	bl	801add0 <tcp_output_alloc_header_common>
 801af02:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d006      	beq.n	801af18 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af0e:	68fa      	ldr	r2, [r7, #12]
 801af10:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801af12:	441a      	add	r2, r3
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801af18:	697b      	ldr	r3, [r7, #20]
}
 801af1a:	4618      	mov	r0, r3
 801af1c:	3718      	adds	r7, #24
 801af1e:	46bd      	mov	sp, r7
 801af20:	bdb0      	pop	{r4, r5, r7, pc}
 801af22:	bf00      	nop
 801af24:	0802355c 	.word	0x0802355c
 801af28:	08023c64 	.word	0x08023c64
 801af2c:	080235b0 	.word	0x080235b0

0801af30 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b088      	sub	sp, #32
 801af34:	af00      	add	r7, sp, #0
 801af36:	60f8      	str	r0, [r7, #12]
 801af38:	60b9      	str	r1, [r7, #8]
 801af3a:	4611      	mov	r1, r2
 801af3c:	461a      	mov	r2, r3
 801af3e:	460b      	mov	r3, r1
 801af40:	71fb      	strb	r3, [r7, #7]
 801af42:	4613      	mov	r3, r2
 801af44:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801af46:	2300      	movs	r3, #0
 801af48:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801af4a:	68bb      	ldr	r3, [r7, #8]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d106      	bne.n	801af5e <tcp_output_fill_options+0x2e>
 801af50:	4b12      	ldr	r3, [pc, #72]	@ (801af9c <tcp_output_fill_options+0x6c>)
 801af52:	f240 7256 	movw	r2, #1878	@ 0x756
 801af56:	4912      	ldr	r1, [pc, #72]	@ (801afa0 <tcp_output_fill_options+0x70>)
 801af58:	4812      	ldr	r0, [pc, #72]	@ (801afa4 <tcp_output_fill_options+0x74>)
 801af5a:	f005 f9a5 	bl	80202a8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801af5e:	68bb      	ldr	r3, [r7, #8]
 801af60:	685b      	ldr	r3, [r3, #4]
 801af62:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801af64:	69bb      	ldr	r3, [r7, #24]
 801af66:	3314      	adds	r3, #20
 801af68:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801af6a:	8bfb      	ldrh	r3, [r7, #30]
 801af6c:	009b      	lsls	r3, r3, #2
 801af6e:	461a      	mov	r2, r3
 801af70:	79fb      	ldrb	r3, [r7, #7]
 801af72:	009b      	lsls	r3, r3, #2
 801af74:	f003 0304 	and.w	r3, r3, #4
 801af78:	4413      	add	r3, r2
 801af7a:	3314      	adds	r3, #20
 801af7c:	69ba      	ldr	r2, [r7, #24]
 801af7e:	4413      	add	r3, r2
 801af80:	697a      	ldr	r2, [r7, #20]
 801af82:	429a      	cmp	r2, r3
 801af84:	d006      	beq.n	801af94 <tcp_output_fill_options+0x64>
 801af86:	4b05      	ldr	r3, [pc, #20]	@ (801af9c <tcp_output_fill_options+0x6c>)
 801af88:	f240 7275 	movw	r2, #1909	@ 0x775
 801af8c:	4906      	ldr	r1, [pc, #24]	@ (801afa8 <tcp_output_fill_options+0x78>)
 801af8e:	4805      	ldr	r0, [pc, #20]	@ (801afa4 <tcp_output_fill_options+0x74>)
 801af90:	f005 f98a 	bl	80202a8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801af94:	bf00      	nop
 801af96:	3720      	adds	r7, #32
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd80      	pop	{r7, pc}
 801af9c:	0802355c 	.word	0x0802355c
 801afa0:	08023c8c 	.word	0x08023c8c
 801afa4:	080235b0 	.word	0x080235b0
 801afa8:	08023b84 	.word	0x08023b84

0801afac <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b08a      	sub	sp, #40	@ 0x28
 801afb0:	af04      	add	r7, sp, #16
 801afb2:	60f8      	str	r0, [r7, #12]
 801afb4:	60b9      	str	r1, [r7, #8]
 801afb6:	607a      	str	r2, [r7, #4]
 801afb8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801afba:	68bb      	ldr	r3, [r7, #8]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d106      	bne.n	801afce <tcp_output_control_segment+0x22>
 801afc0:	4b20      	ldr	r3, [pc, #128]	@ (801b044 <tcp_output_control_segment+0x98>)
 801afc2:	f240 7287 	movw	r2, #1927	@ 0x787
 801afc6:	4920      	ldr	r1, [pc, #128]	@ (801b048 <tcp_output_control_segment+0x9c>)
 801afc8:	4820      	ldr	r0, [pc, #128]	@ (801b04c <tcp_output_control_segment+0xa0>)
 801afca:	f005 f96d 	bl	80202a8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801afce:	683a      	ldr	r2, [r7, #0]
 801afd0:	6879      	ldr	r1, [r7, #4]
 801afd2:	68f8      	ldr	r0, [r7, #12]
 801afd4:	f7fe faa6 	bl	8019524 <tcp_route>
 801afd8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801afda:	693b      	ldr	r3, [r7, #16]
 801afdc:	2b00      	cmp	r3, #0
 801afde:	d102      	bne.n	801afe6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801afe0:	23fc      	movs	r3, #252	@ 0xfc
 801afe2:	75fb      	strb	r3, [r7, #23]
 801afe4:	e024      	b.n	801b030 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d006      	beq.n	801affa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	7adb      	ldrb	r3, [r3, #11]
 801aff0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	7a9b      	ldrb	r3, [r3, #10]
 801aff6:	757b      	strb	r3, [r7, #21]
 801aff8:	e003      	b.n	801b002 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801affa:	23ff      	movs	r3, #255	@ 0xff
 801affc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801affe:	2300      	movs	r3, #0
 801b000:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801b002:	4b13      	ldr	r3, [pc, #76]	@ (801b050 <tcp_output_control_segment+0xa4>)
 801b004:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b008:	3301      	adds	r3, #1
 801b00a:	b29a      	uxth	r2, r3
 801b00c:	4b10      	ldr	r3, [pc, #64]	@ (801b050 <tcp_output_control_segment+0xa4>)
 801b00e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b012:	7dba      	ldrb	r2, [r7, #22]
 801b014:	693b      	ldr	r3, [r7, #16]
 801b016:	9302      	str	r3, [sp, #8]
 801b018:	2306      	movs	r3, #6
 801b01a:	9301      	str	r3, [sp, #4]
 801b01c:	7d7b      	ldrb	r3, [r7, #21]
 801b01e:	9300      	str	r3, [sp, #0]
 801b020:	4613      	mov	r3, r2
 801b022:	683a      	ldr	r2, [r7, #0]
 801b024:	6879      	ldr	r1, [r7, #4]
 801b026:	68b8      	ldr	r0, [r7, #8]
 801b028:	f002 fbf6 	bl	801d818 <ip4_output_if>
 801b02c:	4603      	mov	r3, r0
 801b02e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b030:	68b8      	ldr	r0, [r7, #8]
 801b032:	f7f9 fe89 	bl	8014d48 <pbuf_free>
  return err;
 801b036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b03a:	4618      	mov	r0, r3
 801b03c:	3718      	adds	r7, #24
 801b03e:	46bd      	mov	sp, r7
 801b040:	bd80      	pop	{r7, pc}
 801b042:	bf00      	nop
 801b044:	0802355c 	.word	0x0802355c
 801b048:	08023cb4 	.word	0x08023cb4
 801b04c:	080235b0 	.word	0x080235b0
 801b050:	200252ac 	.word	0x200252ac

0801b054 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b054:	b590      	push	{r4, r7, lr}
 801b056:	b08b      	sub	sp, #44	@ 0x2c
 801b058:	af04      	add	r7, sp, #16
 801b05a:	60f8      	str	r0, [r7, #12]
 801b05c:	60b9      	str	r1, [r7, #8]
 801b05e:	607a      	str	r2, [r7, #4]
 801b060:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d106      	bne.n	801b076 <tcp_rst+0x22>
 801b068:	4b1f      	ldr	r3, [pc, #124]	@ (801b0e8 <tcp_rst+0x94>)
 801b06a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801b06e:	491f      	ldr	r1, [pc, #124]	@ (801b0ec <tcp_rst+0x98>)
 801b070:	481f      	ldr	r0, [pc, #124]	@ (801b0f0 <tcp_rst+0x9c>)
 801b072:	f005 f919 	bl	80202a8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d106      	bne.n	801b08a <tcp_rst+0x36>
 801b07c:	4b1a      	ldr	r3, [pc, #104]	@ (801b0e8 <tcp_rst+0x94>)
 801b07e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801b082:	491c      	ldr	r1, [pc, #112]	@ (801b0f4 <tcp_rst+0xa0>)
 801b084:	481a      	ldr	r0, [pc, #104]	@ (801b0f0 <tcp_rst+0x9c>)
 801b086:	f005 f90f 	bl	80202a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b08a:	2300      	movs	r3, #0
 801b08c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b08e:	f246 0308 	movw	r3, #24584	@ 0x6008
 801b092:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b094:	7dfb      	ldrb	r3, [r7, #23]
 801b096:	b29c      	uxth	r4, r3
 801b098:	68b8      	ldr	r0, [r7, #8]
 801b09a:	f7f8 f9ad 	bl	80133f8 <lwip_htonl>
 801b09e:	4602      	mov	r2, r0
 801b0a0:	8abb      	ldrh	r3, [r7, #20]
 801b0a2:	9303      	str	r3, [sp, #12]
 801b0a4:	2314      	movs	r3, #20
 801b0a6:	9302      	str	r3, [sp, #8]
 801b0a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801b0aa:	9301      	str	r3, [sp, #4]
 801b0ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b0ae:	9300      	str	r3, [sp, #0]
 801b0b0:	4613      	mov	r3, r2
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	4621      	mov	r1, r4
 801b0b6:	6878      	ldr	r0, [r7, #4]
 801b0b8:	f7ff fe8a 	bl	801add0 <tcp_output_alloc_header_common>
 801b0bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b0be:	693b      	ldr	r3, [r7, #16]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d00c      	beq.n	801b0de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b0c4:	7dfb      	ldrb	r3, [r7, #23]
 801b0c6:	2200      	movs	r2, #0
 801b0c8:	6939      	ldr	r1, [r7, #16]
 801b0ca:	68f8      	ldr	r0, [r7, #12]
 801b0cc:	f7ff ff30 	bl	801af30 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0d2:	683a      	ldr	r2, [r7, #0]
 801b0d4:	6939      	ldr	r1, [r7, #16]
 801b0d6:	68f8      	ldr	r0, [r7, #12]
 801b0d8:	f7ff ff68 	bl	801afac <tcp_output_control_segment>
 801b0dc:	e000      	b.n	801b0e0 <tcp_rst+0x8c>
    return;
 801b0de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b0e0:	371c      	adds	r7, #28
 801b0e2:	46bd      	mov	sp, r7
 801b0e4:	bd90      	pop	{r4, r7, pc}
 801b0e6:	bf00      	nop
 801b0e8:	0802355c 	.word	0x0802355c
 801b0ec:	08023ce0 	.word	0x08023ce0
 801b0f0:	080235b0 	.word	0x080235b0
 801b0f4:	08023cfc 	.word	0x08023cfc

0801b0f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b0f8:	b590      	push	{r4, r7, lr}
 801b0fa:	b087      	sub	sp, #28
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b100:	2300      	movs	r3, #0
 801b102:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b104:	2300      	movs	r3, #0
 801b106:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d106      	bne.n	801b11c <tcp_send_empty_ack+0x24>
 801b10e:	4b28      	ldr	r3, [pc, #160]	@ (801b1b0 <tcp_send_empty_ack+0xb8>)
 801b110:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801b114:	4927      	ldr	r1, [pc, #156]	@ (801b1b4 <tcp_send_empty_ack+0xbc>)
 801b116:	4828      	ldr	r0, [pc, #160]	@ (801b1b8 <tcp_send_empty_ack+0xc0>)
 801b118:	f005 f8c6 	bl	80202a8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b11c:	7dfb      	ldrb	r3, [r7, #23]
 801b11e:	009b      	lsls	r3, r3, #2
 801b120:	b2db      	uxtb	r3, r3
 801b122:	f003 0304 	and.w	r3, r3, #4
 801b126:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b128:	7d7b      	ldrb	r3, [r7, #21]
 801b12a:	b29c      	uxth	r4, r3
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b130:	4618      	mov	r0, r3
 801b132:	f7f8 f961 	bl	80133f8 <lwip_htonl>
 801b136:	4603      	mov	r3, r0
 801b138:	2200      	movs	r2, #0
 801b13a:	4621      	mov	r1, r4
 801b13c:	6878      	ldr	r0, [r7, #4]
 801b13e:	f7ff feb9 	bl	801aeb4 <tcp_output_alloc_header>
 801b142:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b144:	693b      	ldr	r3, [r7, #16]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d109      	bne.n	801b15e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	8b5b      	ldrh	r3, [r3, #26]
 801b14e:	f043 0303 	orr.w	r3, r3, #3
 801b152:	b29a      	uxth	r2, r3
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b158:	f06f 0301 	mvn.w	r3, #1
 801b15c:	e023      	b.n	801b1a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b15e:	7dbb      	ldrb	r3, [r7, #22]
 801b160:	7dfa      	ldrb	r2, [r7, #23]
 801b162:	6939      	ldr	r1, [r7, #16]
 801b164:	6878      	ldr	r0, [r7, #4]
 801b166:	f7ff fee3 	bl	801af30 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b16a:	687a      	ldr	r2, [r7, #4]
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	3304      	adds	r3, #4
 801b170:	6939      	ldr	r1, [r7, #16]
 801b172:	6878      	ldr	r0, [r7, #4]
 801b174:	f7ff ff1a 	bl	801afac <tcp_output_control_segment>
 801b178:	4603      	mov	r3, r0
 801b17a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d007      	beq.n	801b194 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	8b5b      	ldrh	r3, [r3, #26]
 801b188:	f043 0303 	orr.w	r3, r3, #3
 801b18c:	b29a      	uxth	r2, r3
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	835a      	strh	r2, [r3, #26]
 801b192:	e006      	b.n	801b1a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	8b5b      	ldrh	r3, [r3, #26]
 801b198:	f023 0303 	bic.w	r3, r3, #3
 801b19c:	b29a      	uxth	r2, r3
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b1a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	371c      	adds	r7, #28
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bd90      	pop	{r4, r7, pc}
 801b1ae:	bf00      	nop
 801b1b0:	0802355c 	.word	0x0802355c
 801b1b4:	08023d18 	.word	0x08023d18
 801b1b8:	080235b0 	.word	0x080235b0

0801b1bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b1bc:	b590      	push	{r4, r7, lr}
 801b1be:	b087      	sub	sp, #28
 801b1c0:	af00      	add	r7, sp, #0
 801b1c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b1c4:	2300      	movs	r3, #0
 801b1c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d106      	bne.n	801b1dc <tcp_keepalive+0x20>
 801b1ce:	4b18      	ldr	r3, [pc, #96]	@ (801b230 <tcp_keepalive+0x74>)
 801b1d0:	f640 0224 	movw	r2, #2084	@ 0x824
 801b1d4:	4917      	ldr	r1, [pc, #92]	@ (801b234 <tcp_keepalive+0x78>)
 801b1d6:	4818      	ldr	r0, [pc, #96]	@ (801b238 <tcp_keepalive+0x7c>)
 801b1d8:	f005 f866 	bl	80202a8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b1dc:	7dfb      	ldrb	r3, [r7, #23]
 801b1de:	b29c      	uxth	r4, r3
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b1e4:	3b01      	subs	r3, #1
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	f7f8 f906 	bl	80133f8 <lwip_htonl>
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	4621      	mov	r1, r4
 801b1f2:	6878      	ldr	r0, [r7, #4]
 801b1f4:	f7ff fe5e 	bl	801aeb4 <tcp_output_alloc_header>
 801b1f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b1fa:	693b      	ldr	r3, [r7, #16]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d102      	bne.n	801b206 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b204:	e010      	b.n	801b228 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b206:	7dfb      	ldrb	r3, [r7, #23]
 801b208:	2200      	movs	r2, #0
 801b20a:	6939      	ldr	r1, [r7, #16]
 801b20c:	6878      	ldr	r0, [r7, #4]
 801b20e:	f7ff fe8f 	bl	801af30 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b212:	687a      	ldr	r2, [r7, #4]
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	3304      	adds	r3, #4
 801b218:	6939      	ldr	r1, [r7, #16]
 801b21a:	6878      	ldr	r0, [r7, #4]
 801b21c:	f7ff fec6 	bl	801afac <tcp_output_control_segment>
 801b220:	4603      	mov	r3, r0
 801b222:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b224:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b228:	4618      	mov	r0, r3
 801b22a:	371c      	adds	r7, #28
 801b22c:	46bd      	mov	sp, r7
 801b22e:	bd90      	pop	{r4, r7, pc}
 801b230:	0802355c 	.word	0x0802355c
 801b234:	08023d38 	.word	0x08023d38
 801b238:	080235b0 	.word	0x080235b0

0801b23c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b23c:	b590      	push	{r4, r7, lr}
 801b23e:	b08b      	sub	sp, #44	@ 0x2c
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b244:	2300      	movs	r3, #0
 801b246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d106      	bne.n	801b25e <tcp_zero_window_probe+0x22>
 801b250:	4b4c      	ldr	r3, [pc, #304]	@ (801b384 <tcp_zero_window_probe+0x148>)
 801b252:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b256:	494c      	ldr	r1, [pc, #304]	@ (801b388 <tcp_zero_window_probe+0x14c>)
 801b258:	484c      	ldr	r0, [pc, #304]	@ (801b38c <tcp_zero_window_probe+0x150>)
 801b25a:	f005 f825 	bl	80202a8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b262:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b264:	6a3b      	ldr	r3, [r7, #32]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d101      	bne.n	801b26e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b26a:	2300      	movs	r3, #0
 801b26c:	e086      	b.n	801b37c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b274:	2bff      	cmp	r3, #255	@ 0xff
 801b276:	d007      	beq.n	801b288 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b27e:	3301      	adds	r3, #1
 801b280:	b2da      	uxtb	r2, r3
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b288:	6a3b      	ldr	r3, [r7, #32]
 801b28a:	68db      	ldr	r3, [r3, #12]
 801b28c:	899b      	ldrh	r3, [r3, #12]
 801b28e:	b29b      	uxth	r3, r3
 801b290:	4618      	mov	r0, r3
 801b292:	f7f8 f89b 	bl	80133cc <lwip_htons>
 801b296:	4603      	mov	r3, r0
 801b298:	b2db      	uxtb	r3, r3
 801b29a:	f003 0301 	and.w	r3, r3, #1
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d005      	beq.n	801b2ae <tcp_zero_window_probe+0x72>
 801b2a2:	6a3b      	ldr	r3, [r7, #32]
 801b2a4:	891b      	ldrh	r3, [r3, #8]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d101      	bne.n	801b2ae <tcp_zero_window_probe+0x72>
 801b2aa:	2301      	movs	r3, #1
 801b2ac:	e000      	b.n	801b2b0 <tcp_zero_window_probe+0x74>
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b2b2:	7ffb      	ldrb	r3, [r7, #31]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	bf0c      	ite	eq
 801b2b8:	2301      	moveq	r3, #1
 801b2ba:	2300      	movne	r3, #0
 801b2bc:	b2db      	uxtb	r3, r3
 801b2be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b2c4:	b299      	uxth	r1, r3
 801b2c6:	6a3b      	ldr	r3, [r7, #32]
 801b2c8:	68db      	ldr	r3, [r3, #12]
 801b2ca:	685b      	ldr	r3, [r3, #4]
 801b2cc:	8bba      	ldrh	r2, [r7, #28]
 801b2ce:	6878      	ldr	r0, [r7, #4]
 801b2d0:	f7ff fdf0 	bl	801aeb4 <tcp_output_alloc_header>
 801b2d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b2d6:	69bb      	ldr	r3, [r7, #24]
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d102      	bne.n	801b2e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b2dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2e0:	e04c      	b.n	801b37c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b2e2:	69bb      	ldr	r3, [r7, #24]
 801b2e4:	685b      	ldr	r3, [r3, #4]
 801b2e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b2e8:	7ffb      	ldrb	r3, [r7, #31]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d011      	beq.n	801b312 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b2ee:	697b      	ldr	r3, [r7, #20]
 801b2f0:	899b      	ldrh	r3, [r3, #12]
 801b2f2:	b29b      	uxth	r3, r3
 801b2f4:	b21b      	sxth	r3, r3
 801b2f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b2fa:	b21c      	sxth	r4, r3
 801b2fc:	2011      	movs	r0, #17
 801b2fe:	f7f8 f865 	bl	80133cc <lwip_htons>
 801b302:	4603      	mov	r3, r0
 801b304:	b21b      	sxth	r3, r3
 801b306:	4323      	orrs	r3, r4
 801b308:	b21b      	sxth	r3, r3
 801b30a:	b29a      	uxth	r2, r3
 801b30c:	697b      	ldr	r3, [r7, #20]
 801b30e:	819a      	strh	r2, [r3, #12]
 801b310:	e010      	b.n	801b334 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b312:	69bb      	ldr	r3, [r7, #24]
 801b314:	685b      	ldr	r3, [r3, #4]
 801b316:	3314      	adds	r3, #20
 801b318:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b31a:	6a3b      	ldr	r3, [r7, #32]
 801b31c:	6858      	ldr	r0, [r3, #4]
 801b31e:	6a3b      	ldr	r3, [r7, #32]
 801b320:	685b      	ldr	r3, [r3, #4]
 801b322:	891a      	ldrh	r2, [r3, #8]
 801b324:	6a3b      	ldr	r3, [r7, #32]
 801b326:	891b      	ldrh	r3, [r3, #8]
 801b328:	1ad3      	subs	r3, r2, r3
 801b32a:	b29b      	uxth	r3, r3
 801b32c:	2201      	movs	r2, #1
 801b32e:	6939      	ldr	r1, [r7, #16]
 801b330:	f7f9 ff10 	bl	8015154 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b334:	6a3b      	ldr	r3, [r7, #32]
 801b336:	68db      	ldr	r3, [r3, #12]
 801b338:	685b      	ldr	r3, [r3, #4]
 801b33a:	4618      	mov	r0, r3
 801b33c:	f7f8 f85c 	bl	80133f8 <lwip_htonl>
 801b340:	4603      	mov	r3, r0
 801b342:	3301      	adds	r3, #1
 801b344:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	1ad3      	subs	r3, r2, r3
 801b34e:	2b00      	cmp	r3, #0
 801b350:	da02      	bge.n	801b358 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	68fa      	ldr	r2, [r7, #12]
 801b356:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b35c:	2200      	movs	r2, #0
 801b35e:	69b9      	ldr	r1, [r7, #24]
 801b360:	6878      	ldr	r0, [r7, #4]
 801b362:	f7ff fde5 	bl	801af30 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b366:	687a      	ldr	r2, [r7, #4]
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	3304      	adds	r3, #4
 801b36c:	69b9      	ldr	r1, [r7, #24]
 801b36e:	6878      	ldr	r0, [r7, #4]
 801b370:	f7ff fe1c 	bl	801afac <tcp_output_control_segment>
 801b374:	4603      	mov	r3, r0
 801b376:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b378:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b37c:	4618      	mov	r0, r3
 801b37e:	372c      	adds	r7, #44	@ 0x2c
 801b380:	46bd      	mov	sp, r7
 801b382:	bd90      	pop	{r4, r7, pc}
 801b384:	0802355c 	.word	0x0802355c
 801b388:	08023d54 	.word	0x08023d54
 801b38c:	080235b0 	.word	0x080235b0

0801b390 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b082      	sub	sp, #8
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b398:	f7f9 ffd2 	bl	8015340 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b39c:	4b0a      	ldr	r3, [pc, #40]	@ (801b3c8 <tcpip_tcp_timer+0x38>)
 801b39e:	681b      	ldr	r3, [r3, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d103      	bne.n	801b3ac <tcpip_tcp_timer+0x1c>
 801b3a4:	4b09      	ldr	r3, [pc, #36]	@ (801b3cc <tcpip_tcp_timer+0x3c>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	d005      	beq.n	801b3b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b3ac:	2200      	movs	r2, #0
 801b3ae:	4908      	ldr	r1, [pc, #32]	@ (801b3d0 <tcpip_tcp_timer+0x40>)
 801b3b0:	20fa      	movs	r0, #250	@ 0xfa
 801b3b2:	f000 f8f3 	bl	801b59c <sys_timeout>
 801b3b6:	e003      	b.n	801b3c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b3b8:	4b06      	ldr	r3, [pc, #24]	@ (801b3d4 <tcpip_tcp_timer+0x44>)
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	601a      	str	r2, [r3, #0]
  }
}
 801b3be:	bf00      	nop
 801b3c0:	bf00      	nop
 801b3c2:	3708      	adds	r7, #8
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	bd80      	pop	{r7, pc}
 801b3c8:	200253b4 	.word	0x200253b4
 801b3cc:	200253b8 	.word	0x200253b8
 801b3d0:	0801b391 	.word	0x0801b391
 801b3d4:	20025400 	.word	0x20025400

0801b3d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b3dc:	4b0a      	ldr	r3, [pc, #40]	@ (801b408 <tcp_timer_needed+0x30>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d10f      	bne.n	801b404 <tcp_timer_needed+0x2c>
 801b3e4:	4b09      	ldr	r3, [pc, #36]	@ (801b40c <tcp_timer_needed+0x34>)
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d103      	bne.n	801b3f4 <tcp_timer_needed+0x1c>
 801b3ec:	4b08      	ldr	r3, [pc, #32]	@ (801b410 <tcp_timer_needed+0x38>)
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d007      	beq.n	801b404 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b3f4:	4b04      	ldr	r3, [pc, #16]	@ (801b408 <tcp_timer_needed+0x30>)
 801b3f6:	2201      	movs	r2, #1
 801b3f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	4905      	ldr	r1, [pc, #20]	@ (801b414 <tcp_timer_needed+0x3c>)
 801b3fe:	20fa      	movs	r0, #250	@ 0xfa
 801b400:	f000 f8cc 	bl	801b59c <sys_timeout>
  }
}
 801b404:	bf00      	nop
 801b406:	bd80      	pop	{r7, pc}
 801b408:	20025400 	.word	0x20025400
 801b40c:	200253b4 	.word	0x200253b4
 801b410:	200253b8 	.word	0x200253b8
 801b414:	0801b391 	.word	0x0801b391

0801b418 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b086      	sub	sp, #24
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	60f8      	str	r0, [r7, #12]
 801b420:	60b9      	str	r1, [r7, #8]
 801b422:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b424:	200a      	movs	r0, #10
 801b426:	f7f8 fd6f 	bl	8013f08 <memp_malloc>
 801b42a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b42c:	693b      	ldr	r3, [r7, #16]
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d109      	bne.n	801b446 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b432:	693b      	ldr	r3, [r7, #16]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d151      	bne.n	801b4dc <sys_timeout_abs+0xc4>
 801b438:	4b2a      	ldr	r3, [pc, #168]	@ (801b4e4 <sys_timeout_abs+0xcc>)
 801b43a:	22be      	movs	r2, #190	@ 0xbe
 801b43c:	492a      	ldr	r1, [pc, #168]	@ (801b4e8 <sys_timeout_abs+0xd0>)
 801b43e:	482b      	ldr	r0, [pc, #172]	@ (801b4ec <sys_timeout_abs+0xd4>)
 801b440:	f004 ff32 	bl	80202a8 <iprintf>
    return;
 801b444:	e04a      	b.n	801b4dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b446:	693b      	ldr	r3, [r7, #16]
 801b448:	2200      	movs	r2, #0
 801b44a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	68ba      	ldr	r2, [r7, #8]
 801b450:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b452:	693b      	ldr	r3, [r7, #16]
 801b454:	687a      	ldr	r2, [r7, #4]
 801b456:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b458:	693b      	ldr	r3, [r7, #16]
 801b45a:	68fa      	ldr	r2, [r7, #12]
 801b45c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b45e:	4b24      	ldr	r3, [pc, #144]	@ (801b4f0 <sys_timeout_abs+0xd8>)
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d103      	bne.n	801b46e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b466:	4a22      	ldr	r2, [pc, #136]	@ (801b4f0 <sys_timeout_abs+0xd8>)
 801b468:	693b      	ldr	r3, [r7, #16]
 801b46a:	6013      	str	r3, [r2, #0]
    return;
 801b46c:	e037      	b.n	801b4de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b46e:	693b      	ldr	r3, [r7, #16]
 801b470:	685a      	ldr	r2, [r3, #4]
 801b472:	4b1f      	ldr	r3, [pc, #124]	@ (801b4f0 <sys_timeout_abs+0xd8>)
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	685b      	ldr	r3, [r3, #4]
 801b478:	1ad3      	subs	r3, r2, r3
 801b47a:	0fdb      	lsrs	r3, r3, #31
 801b47c:	f003 0301 	and.w	r3, r3, #1
 801b480:	b2db      	uxtb	r3, r3
 801b482:	2b00      	cmp	r3, #0
 801b484:	d007      	beq.n	801b496 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b486:	4b1a      	ldr	r3, [pc, #104]	@ (801b4f0 <sys_timeout_abs+0xd8>)
 801b488:	681a      	ldr	r2, [r3, #0]
 801b48a:	693b      	ldr	r3, [r7, #16]
 801b48c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b48e:	4a18      	ldr	r2, [pc, #96]	@ (801b4f0 <sys_timeout_abs+0xd8>)
 801b490:	693b      	ldr	r3, [r7, #16]
 801b492:	6013      	str	r3, [r2, #0]
 801b494:	e023      	b.n	801b4de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b496:	4b16      	ldr	r3, [pc, #88]	@ (801b4f0 <sys_timeout_abs+0xd8>)
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	617b      	str	r3, [r7, #20]
 801b49c:	e01a      	b.n	801b4d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b49e:	697b      	ldr	r3, [r7, #20]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d00b      	beq.n	801b4be <sys_timeout_abs+0xa6>
 801b4a6:	693b      	ldr	r3, [r7, #16]
 801b4a8:	685a      	ldr	r2, [r3, #4]
 801b4aa:	697b      	ldr	r3, [r7, #20]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	685b      	ldr	r3, [r3, #4]
 801b4b0:	1ad3      	subs	r3, r2, r3
 801b4b2:	0fdb      	lsrs	r3, r3, #31
 801b4b4:	f003 0301 	and.w	r3, r3, #1
 801b4b8:	b2db      	uxtb	r3, r3
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d007      	beq.n	801b4ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b4be:	697b      	ldr	r3, [r7, #20]
 801b4c0:	681a      	ldr	r2, [r3, #0]
 801b4c2:	693b      	ldr	r3, [r7, #16]
 801b4c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b4c6:	697b      	ldr	r3, [r7, #20]
 801b4c8:	693a      	ldr	r2, [r7, #16]
 801b4ca:	601a      	str	r2, [r3, #0]
        break;
 801b4cc:	e007      	b.n	801b4de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b4ce:	697b      	ldr	r3, [r7, #20]
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	617b      	str	r3, [r7, #20]
 801b4d4:	697b      	ldr	r3, [r7, #20]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d1e1      	bne.n	801b49e <sys_timeout_abs+0x86>
 801b4da:	e000      	b.n	801b4de <sys_timeout_abs+0xc6>
    return;
 801b4dc:	bf00      	nop
      }
    }
  }
}
 801b4de:	3718      	adds	r7, #24
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	bd80      	pop	{r7, pc}
 801b4e4:	08023d78 	.word	0x08023d78
 801b4e8:	08023dac 	.word	0x08023dac
 801b4ec:	08023dec 	.word	0x08023dec
 801b4f0:	200253f8 	.word	0x200253f8

0801b4f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b4f4:	b580      	push	{r7, lr}
 801b4f6:	b086      	sub	sp, #24
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b500:	697b      	ldr	r3, [r7, #20]
 801b502:	685b      	ldr	r3, [r3, #4]
 801b504:	4798      	blx	r3

  now = sys_now();
 801b506:	f7f1 fbab 	bl	800cc60 <sys_now>
 801b50a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b50c:	697b      	ldr	r3, [r7, #20]
 801b50e:	681a      	ldr	r2, [r3, #0]
 801b510:	4b0f      	ldr	r3, [pc, #60]	@ (801b550 <lwip_cyclic_timer+0x5c>)
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	4413      	add	r3, r2
 801b516:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b518:	68fa      	ldr	r2, [r7, #12]
 801b51a:	693b      	ldr	r3, [r7, #16]
 801b51c:	1ad3      	subs	r3, r2, r3
 801b51e:	0fdb      	lsrs	r3, r3, #31
 801b520:	f003 0301 	and.w	r3, r3, #1
 801b524:	b2db      	uxtb	r3, r3
 801b526:	2b00      	cmp	r3, #0
 801b528:	d009      	beq.n	801b53e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b52a:	697b      	ldr	r3, [r7, #20]
 801b52c:	681a      	ldr	r2, [r3, #0]
 801b52e:	693b      	ldr	r3, [r7, #16]
 801b530:	4413      	add	r3, r2
 801b532:	687a      	ldr	r2, [r7, #4]
 801b534:	4907      	ldr	r1, [pc, #28]	@ (801b554 <lwip_cyclic_timer+0x60>)
 801b536:	4618      	mov	r0, r3
 801b538:	f7ff ff6e 	bl	801b418 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b53c:	e004      	b.n	801b548 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b53e:	687a      	ldr	r2, [r7, #4]
 801b540:	4904      	ldr	r1, [pc, #16]	@ (801b554 <lwip_cyclic_timer+0x60>)
 801b542:	68f8      	ldr	r0, [r7, #12]
 801b544:	f7ff ff68 	bl	801b418 <sys_timeout_abs>
}
 801b548:	bf00      	nop
 801b54a:	3718      	adds	r7, #24
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bd80      	pop	{r7, pc}
 801b550:	200253fc 	.word	0x200253fc
 801b554:	0801b4f5 	.word	0x0801b4f5

0801b558 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b558:	b580      	push	{r7, lr}
 801b55a:	b082      	sub	sp, #8
 801b55c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b55e:	2301      	movs	r3, #1
 801b560:	607b      	str	r3, [r7, #4]
 801b562:	e00e      	b.n	801b582 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b564:	4a0b      	ldr	r2, [pc, #44]	@ (801b594 <sys_timeouts_init+0x3c>)
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	00db      	lsls	r3, r3, #3
 801b570:	4a08      	ldr	r2, [pc, #32]	@ (801b594 <sys_timeouts_init+0x3c>)
 801b572:	4413      	add	r3, r2
 801b574:	461a      	mov	r2, r3
 801b576:	4908      	ldr	r1, [pc, #32]	@ (801b598 <sys_timeouts_init+0x40>)
 801b578:	f000 f810 	bl	801b59c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	3301      	adds	r3, #1
 801b580:	607b      	str	r3, [r7, #4]
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	2b02      	cmp	r3, #2
 801b586:	d9ed      	bls.n	801b564 <sys_timeouts_init+0xc>
  }
}
 801b588:	bf00      	nop
 801b58a:	bf00      	nop
 801b58c:	3708      	adds	r7, #8
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}
 801b592:	bf00      	nop
 801b594:	08024fe8 	.word	0x08024fe8
 801b598:	0801b4f5 	.word	0x0801b4f5

0801b59c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b086      	sub	sp, #24
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	60f8      	str	r0, [r7, #12]
 801b5a4:	60b9      	str	r1, [r7, #8]
 801b5a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b5ae:	d306      	bcc.n	801b5be <sys_timeout+0x22>
 801b5b0:	4b0a      	ldr	r3, [pc, #40]	@ (801b5dc <sys_timeout+0x40>)
 801b5b2:	f240 1229 	movw	r2, #297	@ 0x129
 801b5b6:	490a      	ldr	r1, [pc, #40]	@ (801b5e0 <sys_timeout+0x44>)
 801b5b8:	480a      	ldr	r0, [pc, #40]	@ (801b5e4 <sys_timeout+0x48>)
 801b5ba:	f004 fe75 	bl	80202a8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b5be:	f7f1 fb4f 	bl	800cc60 <sys_now>
 801b5c2:	4602      	mov	r2, r0
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	4413      	add	r3, r2
 801b5c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b5ca:	687a      	ldr	r2, [r7, #4]
 801b5cc:	68b9      	ldr	r1, [r7, #8]
 801b5ce:	6978      	ldr	r0, [r7, #20]
 801b5d0:	f7ff ff22 	bl	801b418 <sys_timeout_abs>
#endif
}
 801b5d4:	bf00      	nop
 801b5d6:	3718      	adds	r7, #24
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	08023d78 	.word	0x08023d78
 801b5e0:	08023e14 	.word	0x08023e14
 801b5e4:	08023dec 	.word	0x08023dec

0801b5e8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b084      	sub	sp, #16
 801b5ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b5ee:	f7f1 fb37 	bl	800cc60 <sys_now>
 801b5f2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b5f4:	4b17      	ldr	r3, [pc, #92]	@ (801b654 <sys_check_timeouts+0x6c>)
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d022      	beq.n	801b646 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b600:	68bb      	ldr	r3, [r7, #8]
 801b602:	685b      	ldr	r3, [r3, #4]
 801b604:	68fa      	ldr	r2, [r7, #12]
 801b606:	1ad3      	subs	r3, r2, r3
 801b608:	0fdb      	lsrs	r3, r3, #31
 801b60a:	f003 0301 	and.w	r3, r3, #1
 801b60e:	b2db      	uxtb	r3, r3
 801b610:	2b00      	cmp	r3, #0
 801b612:	d11a      	bne.n	801b64a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b614:	68bb      	ldr	r3, [r7, #8]
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	4a0e      	ldr	r2, [pc, #56]	@ (801b654 <sys_check_timeouts+0x6c>)
 801b61a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b61c:	68bb      	ldr	r3, [r7, #8]
 801b61e:	689b      	ldr	r3, [r3, #8]
 801b620:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b622:	68bb      	ldr	r3, [r7, #8]
 801b624:	68db      	ldr	r3, [r3, #12]
 801b626:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b628:	68bb      	ldr	r3, [r7, #8]
 801b62a:	685b      	ldr	r3, [r3, #4]
 801b62c:	4a0a      	ldr	r2, [pc, #40]	@ (801b658 <sys_check_timeouts+0x70>)
 801b62e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b630:	68b9      	ldr	r1, [r7, #8]
 801b632:	200a      	movs	r0, #10
 801b634:	f7f8 fce4 	bl	8014000 <memp_free>
    if (handler != NULL) {
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d0da      	beq.n	801b5f4 <sys_check_timeouts+0xc>
      handler(arg);
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	6838      	ldr	r0, [r7, #0]
 801b642:	4798      	blx	r3
  do {
 801b644:	e7d6      	b.n	801b5f4 <sys_check_timeouts+0xc>
      return;
 801b646:	bf00      	nop
 801b648:	e000      	b.n	801b64c <sys_check_timeouts+0x64>
      return;
 801b64a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b64c:	3710      	adds	r7, #16
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd80      	pop	{r7, pc}
 801b652:	bf00      	nop
 801b654:	200253f8 	.word	0x200253f8
 801b658:	200253fc 	.word	0x200253fc

0801b65c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b65c:	b580      	push	{r7, lr}
 801b65e:	b082      	sub	sp, #8
 801b660:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b662:	4b16      	ldr	r3, [pc, #88]	@ (801b6bc <sys_timeouts_sleeptime+0x60>)
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	2b00      	cmp	r3, #0
 801b668:	d102      	bne.n	801b670 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b66a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b66e:	e020      	b.n	801b6b2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b670:	f7f1 faf6 	bl	800cc60 <sys_now>
 801b674:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b676:	4b11      	ldr	r3, [pc, #68]	@ (801b6bc <sys_timeouts_sleeptime+0x60>)
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	685a      	ldr	r2, [r3, #4]
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	1ad3      	subs	r3, r2, r3
 801b680:	0fdb      	lsrs	r3, r3, #31
 801b682:	f003 0301 	and.w	r3, r3, #1
 801b686:	b2db      	uxtb	r3, r3
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d001      	beq.n	801b690 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b68c:	2300      	movs	r3, #0
 801b68e:	e010      	b.n	801b6b2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b690:	4b0a      	ldr	r3, [pc, #40]	@ (801b6bc <sys_timeouts_sleeptime+0x60>)
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	685a      	ldr	r2, [r3, #4]
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	1ad3      	subs	r3, r2, r3
 801b69a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b69c:	683b      	ldr	r3, [r7, #0]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	da06      	bge.n	801b6b0 <sys_timeouts_sleeptime+0x54>
 801b6a2:	4b07      	ldr	r3, [pc, #28]	@ (801b6c0 <sys_timeouts_sleeptime+0x64>)
 801b6a4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801b6a8:	4906      	ldr	r1, [pc, #24]	@ (801b6c4 <sys_timeouts_sleeptime+0x68>)
 801b6aa:	4807      	ldr	r0, [pc, #28]	@ (801b6c8 <sys_timeouts_sleeptime+0x6c>)
 801b6ac:	f004 fdfc 	bl	80202a8 <iprintf>
    return ret;
 801b6b0:	683b      	ldr	r3, [r7, #0]
  }
}
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	3708      	adds	r7, #8
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}
 801b6ba:	bf00      	nop
 801b6bc:	200253f8 	.word	0x200253f8
 801b6c0:	08023d78 	.word	0x08023d78
 801b6c4:	08023e4c 	.word	0x08023e4c
 801b6c8:	08023dec 	.word	0x08023dec

0801b6cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b6cc:	b580      	push	{r7, lr}
 801b6ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b6d0:	f004 fcea 	bl	80200a8 <rand>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	b29b      	uxth	r3, r3
 801b6d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b6dc:	b29b      	uxth	r3, r3
 801b6de:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b6e2:	b29a      	uxth	r2, r3
 801b6e4:	4b01      	ldr	r3, [pc, #4]	@ (801b6ec <udp_init+0x20>)
 801b6e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b6e8:	bf00      	nop
 801b6ea:	bd80      	pop	{r7, pc}
 801b6ec:	2000002c 	.word	0x2000002c

0801b6f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b6f0:	b480      	push	{r7}
 801b6f2:	b083      	sub	sp, #12
 801b6f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b6fa:	4b17      	ldr	r3, [pc, #92]	@ (801b758 <udp_new_port+0x68>)
 801b6fc:	881b      	ldrh	r3, [r3, #0]
 801b6fe:	1c5a      	adds	r2, r3, #1
 801b700:	b291      	uxth	r1, r2
 801b702:	4a15      	ldr	r2, [pc, #84]	@ (801b758 <udp_new_port+0x68>)
 801b704:	8011      	strh	r1, [r2, #0]
 801b706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b70a:	4293      	cmp	r3, r2
 801b70c:	d103      	bne.n	801b716 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b70e:	4b12      	ldr	r3, [pc, #72]	@ (801b758 <udp_new_port+0x68>)
 801b710:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b714:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b716:	4b11      	ldr	r3, [pc, #68]	@ (801b75c <udp_new_port+0x6c>)
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	603b      	str	r3, [r7, #0]
 801b71c:	e011      	b.n	801b742 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b71e:	683b      	ldr	r3, [r7, #0]
 801b720:	8a5a      	ldrh	r2, [r3, #18]
 801b722:	4b0d      	ldr	r3, [pc, #52]	@ (801b758 <udp_new_port+0x68>)
 801b724:	881b      	ldrh	r3, [r3, #0]
 801b726:	429a      	cmp	r2, r3
 801b728:	d108      	bne.n	801b73c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b72a:	88fb      	ldrh	r3, [r7, #6]
 801b72c:	3301      	adds	r3, #1
 801b72e:	80fb      	strh	r3, [r7, #6]
 801b730:	88fb      	ldrh	r3, [r7, #6]
 801b732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b736:	d3e0      	bcc.n	801b6fa <udp_new_port+0xa>
        return 0;
 801b738:	2300      	movs	r3, #0
 801b73a:	e007      	b.n	801b74c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	68db      	ldr	r3, [r3, #12]
 801b740:	603b      	str	r3, [r7, #0]
 801b742:	683b      	ldr	r3, [r7, #0]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d1ea      	bne.n	801b71e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b748:	4b03      	ldr	r3, [pc, #12]	@ (801b758 <udp_new_port+0x68>)
 801b74a:	881b      	ldrh	r3, [r3, #0]
}
 801b74c:	4618      	mov	r0, r3
 801b74e:	370c      	adds	r7, #12
 801b750:	46bd      	mov	sp, r7
 801b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b756:	4770      	bx	lr
 801b758:	2000002c 	.word	0x2000002c
 801b75c:	20025404 	.word	0x20025404

0801b760 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b084      	sub	sp, #16
 801b764:	af00      	add	r7, sp, #0
 801b766:	60f8      	str	r0, [r7, #12]
 801b768:	60b9      	str	r1, [r7, #8]
 801b76a:	4613      	mov	r3, r2
 801b76c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	2b00      	cmp	r3, #0
 801b772:	d105      	bne.n	801b780 <udp_input_local_match+0x20>
 801b774:	4b27      	ldr	r3, [pc, #156]	@ (801b814 <udp_input_local_match+0xb4>)
 801b776:	2287      	movs	r2, #135	@ 0x87
 801b778:	4927      	ldr	r1, [pc, #156]	@ (801b818 <udp_input_local_match+0xb8>)
 801b77a:	4828      	ldr	r0, [pc, #160]	@ (801b81c <udp_input_local_match+0xbc>)
 801b77c:	f004 fd94 	bl	80202a8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d105      	bne.n	801b792 <udp_input_local_match+0x32>
 801b786:	4b23      	ldr	r3, [pc, #140]	@ (801b814 <udp_input_local_match+0xb4>)
 801b788:	2288      	movs	r2, #136	@ 0x88
 801b78a:	4925      	ldr	r1, [pc, #148]	@ (801b820 <udp_input_local_match+0xc0>)
 801b78c:	4823      	ldr	r0, [pc, #140]	@ (801b81c <udp_input_local_match+0xbc>)
 801b78e:	f004 fd8b 	bl	80202a8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	7a1b      	ldrb	r3, [r3, #8]
 801b796:	2b00      	cmp	r3, #0
 801b798:	d00b      	beq.n	801b7b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b79a:	68fb      	ldr	r3, [r7, #12]
 801b79c:	7a1a      	ldrb	r2, [r3, #8]
 801b79e:	4b21      	ldr	r3, [pc, #132]	@ (801b824 <udp_input_local_match+0xc4>)
 801b7a0:	685b      	ldr	r3, [r3, #4]
 801b7a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b7a6:	3301      	adds	r3, #1
 801b7a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d001      	beq.n	801b7b2 <udp_input_local_match+0x52>
    return 0;
 801b7ae:	2300      	movs	r3, #0
 801b7b0:	e02b      	b.n	801b80a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b7b2:	79fb      	ldrb	r3, [r7, #7]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d018      	beq.n	801b7ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d013      	beq.n	801b7e6 <udp_input_local_match+0x86>
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d00f      	beq.n	801b7e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b7c6:	4b17      	ldr	r3, [pc, #92]	@ (801b824 <udp_input_local_match+0xc4>)
 801b7c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b7ce:	d00a      	beq.n	801b7e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	681a      	ldr	r2, [r3, #0]
 801b7d4:	4b13      	ldr	r3, [pc, #76]	@ (801b824 <udp_input_local_match+0xc4>)
 801b7d6:	695b      	ldr	r3, [r3, #20]
 801b7d8:	405a      	eors	r2, r3
 801b7da:	68bb      	ldr	r3, [r7, #8]
 801b7dc:	3308      	adds	r3, #8
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d110      	bne.n	801b808 <udp_input_local_match+0xa8>
          return 1;
 801b7e6:	2301      	movs	r3, #1
 801b7e8:	e00f      	b.n	801b80a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d009      	beq.n	801b804 <udp_input_local_match+0xa4>
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	d005      	beq.n	801b804 <udp_input_local_match+0xa4>
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	681a      	ldr	r2, [r3, #0]
 801b7fc:	4b09      	ldr	r3, [pc, #36]	@ (801b824 <udp_input_local_match+0xc4>)
 801b7fe:	695b      	ldr	r3, [r3, #20]
 801b800:	429a      	cmp	r2, r3
 801b802:	d101      	bne.n	801b808 <udp_input_local_match+0xa8>
        return 1;
 801b804:	2301      	movs	r3, #1
 801b806:	e000      	b.n	801b80a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b808:	2300      	movs	r3, #0
}
 801b80a:	4618      	mov	r0, r3
 801b80c:	3710      	adds	r7, #16
 801b80e:	46bd      	mov	sp, r7
 801b810:	bd80      	pop	{r7, pc}
 801b812:	bf00      	nop
 801b814:	08023e60 	.word	0x08023e60
 801b818:	08023e90 	.word	0x08023e90
 801b81c:	08023eb4 	.word	0x08023eb4
 801b820:	08023edc 	.word	0x08023edc
 801b824:	2001f0b0 	.word	0x2001f0b0

0801b828 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b828:	b590      	push	{r4, r7, lr}
 801b82a:	b08d      	sub	sp, #52	@ 0x34
 801b82c:	af02      	add	r7, sp, #8
 801b82e:	6078      	str	r0, [r7, #4]
 801b830:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b832:	2300      	movs	r3, #0
 801b834:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d105      	bne.n	801b848 <udp_input+0x20>
 801b83c:	4b98      	ldr	r3, [pc, #608]	@ (801baa0 <udp_input+0x278>)
 801b83e:	22cf      	movs	r2, #207	@ 0xcf
 801b840:	4998      	ldr	r1, [pc, #608]	@ (801baa4 <udp_input+0x27c>)
 801b842:	4899      	ldr	r0, [pc, #612]	@ (801baa8 <udp_input+0x280>)
 801b844:	f004 fd30 	bl	80202a8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b848:	683b      	ldr	r3, [r7, #0]
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d105      	bne.n	801b85a <udp_input+0x32>
 801b84e:	4b94      	ldr	r3, [pc, #592]	@ (801baa0 <udp_input+0x278>)
 801b850:	22d0      	movs	r2, #208	@ 0xd0
 801b852:	4996      	ldr	r1, [pc, #600]	@ (801baac <udp_input+0x284>)
 801b854:	4894      	ldr	r0, [pc, #592]	@ (801baa8 <udp_input+0x280>)
 801b856:	f004 fd27 	bl	80202a8 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b85a:	4b95      	ldr	r3, [pc, #596]	@ (801bab0 <udp_input+0x288>)
 801b85c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801b860:	3301      	adds	r3, #1
 801b862:	b29a      	uxth	r2, r3
 801b864:	4b92      	ldr	r3, [pc, #584]	@ (801bab0 <udp_input+0x288>)
 801b866:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	895b      	ldrh	r3, [r3, #10]
 801b86e:	2b07      	cmp	r3, #7
 801b870:	d813      	bhi.n	801b89a <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801b872:	4b8f      	ldr	r3, [pc, #572]	@ (801bab0 <udp_input+0x288>)
 801b874:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801b878:	3301      	adds	r3, #1
 801b87a:	b29a      	uxth	r2, r3
 801b87c:	4b8c      	ldr	r3, [pc, #560]	@ (801bab0 <udp_input+0x288>)
 801b87e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801b882:	4b8b      	ldr	r3, [pc, #556]	@ (801bab0 <udp_input+0x288>)
 801b884:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b888:	3301      	adds	r3, #1
 801b88a:	b29a      	uxth	r2, r3
 801b88c:	4b88      	ldr	r3, [pc, #544]	@ (801bab0 <udp_input+0x288>)
 801b88e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b892:	6878      	ldr	r0, [r7, #4]
 801b894:	f7f9 fa58 	bl	8014d48 <pbuf_free>
    goto end;
 801b898:	e0fd      	b.n	801ba96 <udp_input+0x26e>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	685b      	ldr	r3, [r3, #4]
 801b89e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b8a0:	4b84      	ldr	r3, [pc, #528]	@ (801bab4 <udp_input+0x28c>)
 801b8a2:	695b      	ldr	r3, [r3, #20]
 801b8a4:	4a83      	ldr	r2, [pc, #524]	@ (801bab4 <udp_input+0x28c>)
 801b8a6:	6812      	ldr	r2, [r2, #0]
 801b8a8:	4611      	mov	r1, r2
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	f002 f8a6 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 801b8b0:	4603      	mov	r3, r0
 801b8b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b8b4:	697b      	ldr	r3, [r7, #20]
 801b8b6:	881b      	ldrh	r3, [r3, #0]
 801b8b8:	b29b      	uxth	r3, r3
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7f7 fd86 	bl	80133cc <lwip_htons>
 801b8c0:	4603      	mov	r3, r0
 801b8c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b8c4:	697b      	ldr	r3, [r7, #20]
 801b8c6:	885b      	ldrh	r3, [r3, #2]
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	f7f7 fd7e 	bl	80133cc <lwip_htons>
 801b8d0:	4603      	mov	r3, r0
 801b8d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b8d8:	2300      	movs	r3, #0
 801b8da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b8dc:	2300      	movs	r3, #0
 801b8de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b8e0:	4b75      	ldr	r3, [pc, #468]	@ (801bab8 <udp_input+0x290>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801b8e6:	e05d      	b.n	801b9a4 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8ea:	8a5b      	ldrh	r3, [r3, #18]
 801b8ec:	89fa      	ldrh	r2, [r7, #14]
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d153      	bne.n	801b99a <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b8f2:	7cfb      	ldrb	r3, [r7, #19]
 801b8f4:	461a      	mov	r2, r3
 801b8f6:	6839      	ldr	r1, [r7, #0]
 801b8f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b8fa:	f7ff ff31 	bl	801b760 <udp_input_local_match>
 801b8fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b900:	2b00      	cmp	r3, #0
 801b902:	d04a      	beq.n	801b99a <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b906:	7c1b      	ldrb	r3, [r3, #16]
 801b908:	f003 0304 	and.w	r3, r3, #4
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d11d      	bne.n	801b94c <udp_input+0x124>
        if (uncon_pcb == NULL) {
 801b910:	69fb      	ldr	r3, [r7, #28]
 801b912:	2b00      	cmp	r3, #0
 801b914:	d102      	bne.n	801b91c <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b918:	61fb      	str	r3, [r7, #28]
 801b91a:	e017      	b.n	801b94c <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b91c:	7cfb      	ldrb	r3, [r7, #19]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d014      	beq.n	801b94c <udp_input+0x124>
 801b922:	4b64      	ldr	r3, [pc, #400]	@ (801bab4 <udp_input+0x28c>)
 801b924:	695b      	ldr	r3, [r3, #20]
 801b926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b92a:	d10f      	bne.n	801b94c <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b92c:	69fb      	ldr	r3, [r7, #28]
 801b92e:	681a      	ldr	r2, [r3, #0]
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	3304      	adds	r3, #4
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	429a      	cmp	r2, r3
 801b938:	d008      	beq.n	801b94c <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b93c:	681a      	ldr	r2, [r3, #0]
 801b93e:	683b      	ldr	r3, [r7, #0]
 801b940:	3304      	adds	r3, #4
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	429a      	cmp	r2, r3
 801b946:	d101      	bne.n	801b94c <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 801b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b94a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b94e:	8a9b      	ldrh	r3, [r3, #20]
 801b950:	8a3a      	ldrh	r2, [r7, #16]
 801b952:	429a      	cmp	r2, r3
 801b954:	d121      	bne.n	801b99a <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b958:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d005      	beq.n	801b96a <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b960:	685a      	ldr	r2, [r3, #4]
 801b962:	4b54      	ldr	r3, [pc, #336]	@ (801bab4 <udp_input+0x28c>)
 801b964:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b966:	429a      	cmp	r2, r3
 801b968:	d117      	bne.n	801b99a <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b96a:	6a3b      	ldr	r3, [r7, #32]
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d00b      	beq.n	801b988 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b972:	68da      	ldr	r2, [r3, #12]
 801b974:	6a3b      	ldr	r3, [r7, #32]
 801b976:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b978:	4b4f      	ldr	r3, [pc, #316]	@ (801bab8 <udp_input+0x290>)
 801b97a:	681a      	ldr	r2, [r3, #0]
 801b97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b97e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b980:	4a4d      	ldr	r2, [pc, #308]	@ (801bab8 <udp_input+0x290>)
 801b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b984:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b986:	e010      	b.n	801b9aa <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 801b988:	4b49      	ldr	r3, [pc, #292]	@ (801bab0 <udp_input+0x288>)
 801b98a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801b98e:	3301      	adds	r3, #1
 801b990:	b29a      	uxth	r2, r3
 801b992:	4b47      	ldr	r3, [pc, #284]	@ (801bab0 <udp_input+0x288>)
 801b994:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801b998:	e007      	b.n	801b9aa <udp_input+0x182>
      }
    }

    prev = pcb;
 801b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b99c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9a0:	68db      	ldr	r3, [r3, #12]
 801b9a2:	627b      	str	r3, [r7, #36]	@ 0x24
 801b9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d19e      	bne.n	801b8e8 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d101      	bne.n	801b9b4 <udp_input+0x18c>
    pcb = uncon_pcb;
 801b9b0:	69fb      	ldr	r3, [r7, #28]
 801b9b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d002      	beq.n	801b9c0 <udp_input+0x198>
    for_us = 1;
 801b9ba:	2301      	movs	r3, #1
 801b9bc:	76fb      	strb	r3, [r7, #27]
 801b9be:	e00a      	b.n	801b9d6 <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b9c0:	683b      	ldr	r3, [r7, #0]
 801b9c2:	3304      	adds	r3, #4
 801b9c4:	681a      	ldr	r2, [r3, #0]
 801b9c6:	4b3b      	ldr	r3, [pc, #236]	@ (801bab4 <udp_input+0x28c>)
 801b9c8:	695b      	ldr	r3, [r3, #20]
 801b9ca:	429a      	cmp	r2, r3
 801b9cc:	bf0c      	ite	eq
 801b9ce:	2301      	moveq	r3, #1
 801b9d0:	2300      	movne	r3, #0
 801b9d2:	b2db      	uxtb	r3, r3
 801b9d4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b9d6:	7efb      	ldrb	r3, [r7, #27]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d059      	beq.n	801ba90 <udp_input+0x268>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b9dc:	2108      	movs	r1, #8
 801b9de:	6878      	ldr	r0, [r7, #4]
 801b9e0:	f7f9 f92c 	bl	8014c3c <pbuf_remove_header>
 801b9e4:	4603      	mov	r3, r0
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d012      	beq.n	801ba10 <udp_input+0x1e8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b9ea:	4b2d      	ldr	r3, [pc, #180]	@ (801baa0 <udp_input+0x278>)
 801b9ec:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801b9f0:	4932      	ldr	r1, [pc, #200]	@ (801babc <udp_input+0x294>)
 801b9f2:	482d      	ldr	r0, [pc, #180]	@ (801baa8 <udp_input+0x280>)
 801b9f4:	f004 fc58 	bl	80202a8 <iprintf>
      UDP_STATS_INC(udp.drop);
 801b9f8:	4b2d      	ldr	r3, [pc, #180]	@ (801bab0 <udp_input+0x288>)
 801b9fa:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b9fe:	3301      	adds	r3, #1
 801ba00:	b29a      	uxth	r2, r3
 801ba02:	4b2b      	ldr	r3, [pc, #172]	@ (801bab0 <udp_input+0x288>)
 801ba04:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ba08:	6878      	ldr	r0, [r7, #4]
 801ba0a:	f7f9 f99d 	bl	8014d48 <pbuf_free>
      goto end;
 801ba0e:	e042      	b.n	801ba96 <udp_input+0x26e>
    }

    if (pcb != NULL) {
 801ba10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d012      	beq.n	801ba3c <udp_input+0x214>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba18:	699b      	ldr	r3, [r3, #24]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d00a      	beq.n	801ba34 <udp_input+0x20c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ba1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba20:	699c      	ldr	r4, [r3, #24]
 801ba22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba24:	69d8      	ldr	r0, [r3, #28]
 801ba26:	8a3b      	ldrh	r3, [r7, #16]
 801ba28:	9300      	str	r3, [sp, #0]
 801ba2a:	4b25      	ldr	r3, [pc, #148]	@ (801bac0 <udp_input+0x298>)
 801ba2c:	687a      	ldr	r2, [r7, #4]
 801ba2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ba30:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ba32:	e031      	b.n	801ba98 <udp_input+0x270>
        pbuf_free(p);
 801ba34:	6878      	ldr	r0, [r7, #4]
 801ba36:	f7f9 f987 	bl	8014d48 <pbuf_free>
        goto end;
 801ba3a:	e02c      	b.n	801ba96 <udp_input+0x26e>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ba3c:	7cfb      	ldrb	r3, [r7, #19]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d112      	bne.n	801ba68 <udp_input+0x240>
 801ba42:	4b1c      	ldr	r3, [pc, #112]	@ (801bab4 <udp_input+0x28c>)
 801ba44:	695b      	ldr	r3, [r3, #20]
 801ba46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ba4a:	2be0      	cmp	r3, #224	@ 0xe0
 801ba4c:	d00c      	beq.n	801ba68 <udp_input+0x240>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ba4e:	4b19      	ldr	r3, [pc, #100]	@ (801bab4 <udp_input+0x28c>)
 801ba50:	899b      	ldrh	r3, [r3, #12]
 801ba52:	3308      	adds	r3, #8
 801ba54:	b29b      	uxth	r3, r3
 801ba56:	b21b      	sxth	r3, r3
 801ba58:	4619      	mov	r1, r3
 801ba5a:	6878      	ldr	r0, [r7, #4]
 801ba5c:	f7f9 f961 	bl	8014d22 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ba60:	2103      	movs	r1, #3
 801ba62:	6878      	ldr	r0, [r7, #4]
 801ba64:	f001 fc2e 	bl	801d2c4 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801ba68:	4b11      	ldr	r3, [pc, #68]	@ (801bab0 <udp_input+0x288>)
 801ba6a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801ba6e:	3301      	adds	r3, #1
 801ba70:	b29a      	uxth	r2, r3
 801ba72:	4b0f      	ldr	r3, [pc, #60]	@ (801bab0 <udp_input+0x288>)
 801ba74:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801ba78:	4b0d      	ldr	r3, [pc, #52]	@ (801bab0 <udp_input+0x288>)
 801ba7a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801ba7e:	3301      	adds	r3, #1
 801ba80:	b29a      	uxth	r2, r3
 801ba82:	4b0b      	ldr	r3, [pc, #44]	@ (801bab0 <udp_input+0x288>)
 801ba84:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801ba88:	6878      	ldr	r0, [r7, #4]
 801ba8a:	f7f9 f95d 	bl	8014d48 <pbuf_free>
  return;
 801ba8e:	e003      	b.n	801ba98 <udp_input+0x270>
    pbuf_free(p);
 801ba90:	6878      	ldr	r0, [r7, #4]
 801ba92:	f7f9 f959 	bl	8014d48 <pbuf_free>
  return;
 801ba96:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ba98:	372c      	adds	r7, #44	@ 0x2c
 801ba9a:	46bd      	mov	sp, r7
 801ba9c:	bd90      	pop	{r4, r7, pc}
 801ba9e:	bf00      	nop
 801baa0:	08023e60 	.word	0x08023e60
 801baa4:	08023f04 	.word	0x08023f04
 801baa8:	08023eb4 	.word	0x08023eb4
 801baac:	08023f1c 	.word	0x08023f1c
 801bab0:	200252ac 	.word	0x200252ac
 801bab4:	2001f0b0 	.word	0x2001f0b0
 801bab8:	20025404 	.word	0x20025404
 801babc:	08023f38 	.word	0x08023f38
 801bac0:	2001f0c0 	.word	0x2001f0c0

0801bac4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801bac4:	b580      	push	{r7, lr}
 801bac6:	b082      	sub	sp, #8
 801bac8:	af00      	add	r7, sp, #0
 801baca:	6078      	str	r0, [r7, #4]
 801bacc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d109      	bne.n	801bae8 <udp_send+0x24>
 801bad4:	4b11      	ldr	r3, [pc, #68]	@ (801bb1c <udp_send+0x58>)
 801bad6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801bada:	4911      	ldr	r1, [pc, #68]	@ (801bb20 <udp_send+0x5c>)
 801badc:	4811      	ldr	r0, [pc, #68]	@ (801bb24 <udp_send+0x60>)
 801bade:	f004 fbe3 	bl	80202a8 <iprintf>
 801bae2:	f06f 030f 	mvn.w	r3, #15
 801bae6:	e015      	b.n	801bb14 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801bae8:	683b      	ldr	r3, [r7, #0]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d109      	bne.n	801bb02 <udp_send+0x3e>
 801baee:	4b0b      	ldr	r3, [pc, #44]	@ (801bb1c <udp_send+0x58>)
 801baf0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801baf4:	490c      	ldr	r1, [pc, #48]	@ (801bb28 <udp_send+0x64>)
 801baf6:	480b      	ldr	r0, [pc, #44]	@ (801bb24 <udp_send+0x60>)
 801baf8:	f004 fbd6 	bl	80202a8 <iprintf>
 801bafc:	f06f 030f 	mvn.w	r3, #15
 801bb00:	e008      	b.n	801bb14 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	1d1a      	adds	r2, r3, #4
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	8a9b      	ldrh	r3, [r3, #20]
 801bb0a:	6839      	ldr	r1, [r7, #0]
 801bb0c:	6878      	ldr	r0, [r7, #4]
 801bb0e:	f000 f80d 	bl	801bb2c <udp_sendto>
 801bb12:	4603      	mov	r3, r0
}
 801bb14:	4618      	mov	r0, r3
 801bb16:	3708      	adds	r7, #8
 801bb18:	46bd      	mov	sp, r7
 801bb1a:	bd80      	pop	{r7, pc}
 801bb1c:	08023e60 	.word	0x08023e60
 801bb20:	08023f54 	.word	0x08023f54
 801bb24:	08023eb4 	.word	0x08023eb4
 801bb28:	08023f6c 	.word	0x08023f6c

0801bb2c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b088      	sub	sp, #32
 801bb30:	af02      	add	r7, sp, #8
 801bb32:	60f8      	str	r0, [r7, #12]
 801bb34:	60b9      	str	r1, [r7, #8]
 801bb36:	607a      	str	r2, [r7, #4]
 801bb38:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d109      	bne.n	801bb54 <udp_sendto+0x28>
 801bb40:	4b27      	ldr	r3, [pc, #156]	@ (801bbe0 <udp_sendto+0xb4>)
 801bb42:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801bb46:	4927      	ldr	r1, [pc, #156]	@ (801bbe4 <udp_sendto+0xb8>)
 801bb48:	4827      	ldr	r0, [pc, #156]	@ (801bbe8 <udp_sendto+0xbc>)
 801bb4a:	f004 fbad 	bl	80202a8 <iprintf>
 801bb4e:	f06f 030f 	mvn.w	r3, #15
 801bb52:	e040      	b.n	801bbd6 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bb54:	68bb      	ldr	r3, [r7, #8]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d109      	bne.n	801bb6e <udp_sendto+0x42>
 801bb5a:	4b21      	ldr	r3, [pc, #132]	@ (801bbe0 <udp_sendto+0xb4>)
 801bb5c:	f240 2219 	movw	r2, #537	@ 0x219
 801bb60:	4922      	ldr	r1, [pc, #136]	@ (801bbec <udp_sendto+0xc0>)
 801bb62:	4821      	ldr	r0, [pc, #132]	@ (801bbe8 <udp_sendto+0xbc>)
 801bb64:	f004 fba0 	bl	80202a8 <iprintf>
 801bb68:	f06f 030f 	mvn.w	r3, #15
 801bb6c:	e033      	b.n	801bbd6 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d109      	bne.n	801bb88 <udp_sendto+0x5c>
 801bb74:	4b1a      	ldr	r3, [pc, #104]	@ (801bbe0 <udp_sendto+0xb4>)
 801bb76:	f240 221a 	movw	r2, #538	@ 0x21a
 801bb7a:	491d      	ldr	r1, [pc, #116]	@ (801bbf0 <udp_sendto+0xc4>)
 801bb7c:	481a      	ldr	r0, [pc, #104]	@ (801bbe8 <udp_sendto+0xbc>)
 801bb7e:	f004 fb93 	bl	80202a8 <iprintf>
 801bb82:	f06f 030f 	mvn.w	r3, #15
 801bb86:	e026      	b.n	801bbd6 <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	7a1b      	ldrb	r3, [r3, #8]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d006      	beq.n	801bb9e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	7a1b      	ldrb	r3, [r3, #8]
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7f8 fd49 	bl	801462c <netif_get_by_index>
 801bb9a:	6178      	str	r0, [r7, #20]
 801bb9c:	e003      	b.n	801bba6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801bb9e:	6878      	ldr	r0, [r7, #4]
 801bba0:	f001 fc24 	bl	801d3ec <ip4_route>
 801bba4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d10a      	bne.n	801bbc2 <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801bbac:	4b11      	ldr	r3, [pc, #68]	@ (801bbf4 <udp_sendto+0xc8>)
 801bbae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801bbb2:	3301      	adds	r3, #1
 801bbb4:	b29a      	uxth	r2, r3
 801bbb6:	4b0f      	ldr	r3, [pc, #60]	@ (801bbf4 <udp_sendto+0xc8>)
 801bbb8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801bbbc:	f06f 0303 	mvn.w	r3, #3
 801bbc0:	e009      	b.n	801bbd6 <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bbc2:	887a      	ldrh	r2, [r7, #2]
 801bbc4:	697b      	ldr	r3, [r7, #20]
 801bbc6:	9300      	str	r3, [sp, #0]
 801bbc8:	4613      	mov	r3, r2
 801bbca:	687a      	ldr	r2, [r7, #4]
 801bbcc:	68b9      	ldr	r1, [r7, #8]
 801bbce:	68f8      	ldr	r0, [r7, #12]
 801bbd0:	f000 f812 	bl	801bbf8 <udp_sendto_if>
 801bbd4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	3718      	adds	r7, #24
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	bd80      	pop	{r7, pc}
 801bbde:	bf00      	nop
 801bbe0:	08023e60 	.word	0x08023e60
 801bbe4:	08023f84 	.word	0x08023f84
 801bbe8:	08023eb4 	.word	0x08023eb4
 801bbec:	08023f9c 	.word	0x08023f9c
 801bbf0:	08023fb8 	.word	0x08023fb8
 801bbf4:	200252ac 	.word	0x200252ac

0801bbf8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b088      	sub	sp, #32
 801bbfc:	af02      	add	r7, sp, #8
 801bbfe:	60f8      	str	r0, [r7, #12]
 801bc00:	60b9      	str	r1, [r7, #8]
 801bc02:	607a      	str	r2, [r7, #4]
 801bc04:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d109      	bne.n	801bc20 <udp_sendto_if+0x28>
 801bc0c:	4b2e      	ldr	r3, [pc, #184]	@ (801bcc8 <udp_sendto_if+0xd0>)
 801bc0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bc12:	492e      	ldr	r1, [pc, #184]	@ (801bccc <udp_sendto_if+0xd4>)
 801bc14:	482e      	ldr	r0, [pc, #184]	@ (801bcd0 <udp_sendto_if+0xd8>)
 801bc16:	f004 fb47 	bl	80202a8 <iprintf>
 801bc1a:	f06f 030f 	mvn.w	r3, #15
 801bc1e:	e04f      	b.n	801bcc0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bc20:	68bb      	ldr	r3, [r7, #8]
 801bc22:	2b00      	cmp	r3, #0
 801bc24:	d109      	bne.n	801bc3a <udp_sendto_if+0x42>
 801bc26:	4b28      	ldr	r3, [pc, #160]	@ (801bcc8 <udp_sendto_if+0xd0>)
 801bc28:	f240 2281 	movw	r2, #641	@ 0x281
 801bc2c:	4929      	ldr	r1, [pc, #164]	@ (801bcd4 <udp_sendto_if+0xdc>)
 801bc2e:	4828      	ldr	r0, [pc, #160]	@ (801bcd0 <udp_sendto_if+0xd8>)
 801bc30:	f004 fb3a 	bl	80202a8 <iprintf>
 801bc34:	f06f 030f 	mvn.w	r3, #15
 801bc38:	e042      	b.n	801bcc0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d109      	bne.n	801bc54 <udp_sendto_if+0x5c>
 801bc40:	4b21      	ldr	r3, [pc, #132]	@ (801bcc8 <udp_sendto_if+0xd0>)
 801bc42:	f240 2282 	movw	r2, #642	@ 0x282
 801bc46:	4924      	ldr	r1, [pc, #144]	@ (801bcd8 <udp_sendto_if+0xe0>)
 801bc48:	4821      	ldr	r0, [pc, #132]	@ (801bcd0 <udp_sendto_if+0xd8>)
 801bc4a:	f004 fb2d 	bl	80202a8 <iprintf>
 801bc4e:	f06f 030f 	mvn.w	r3, #15
 801bc52:	e035      	b.n	801bcc0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bc54:	6a3b      	ldr	r3, [r7, #32]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d109      	bne.n	801bc6e <udp_sendto_if+0x76>
 801bc5a:	4b1b      	ldr	r3, [pc, #108]	@ (801bcc8 <udp_sendto_if+0xd0>)
 801bc5c:	f240 2283 	movw	r2, #643	@ 0x283
 801bc60:	491e      	ldr	r1, [pc, #120]	@ (801bcdc <udp_sendto_if+0xe4>)
 801bc62:	481b      	ldr	r0, [pc, #108]	@ (801bcd0 <udp_sendto_if+0xd8>)
 801bc64:	f004 fb20 	bl	80202a8 <iprintf>
 801bc68:	f06f 030f 	mvn.w	r3, #15
 801bc6c:	e028      	b.n	801bcc0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bc6e:	68fb      	ldr	r3, [r7, #12]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d009      	beq.n	801bc88 <udp_sendto_if+0x90>
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d005      	beq.n	801bc88 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bc84:	2be0      	cmp	r3, #224	@ 0xe0
 801bc86:	d103      	bne.n	801bc90 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801bc88:	6a3b      	ldr	r3, [r7, #32]
 801bc8a:	3304      	adds	r3, #4
 801bc8c:	617b      	str	r3, [r7, #20]
 801bc8e:	e00b      	b.n	801bca8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bc90:	68fb      	ldr	r3, [r7, #12]
 801bc92:	681a      	ldr	r2, [r3, #0]
 801bc94:	6a3b      	ldr	r3, [r7, #32]
 801bc96:	3304      	adds	r3, #4
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	429a      	cmp	r2, r3
 801bc9c:	d002      	beq.n	801bca4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bc9e:	f06f 0303 	mvn.w	r3, #3
 801bca2:	e00d      	b.n	801bcc0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bca8:	887a      	ldrh	r2, [r7, #2]
 801bcaa:	697b      	ldr	r3, [r7, #20]
 801bcac:	9301      	str	r3, [sp, #4]
 801bcae:	6a3b      	ldr	r3, [r7, #32]
 801bcb0:	9300      	str	r3, [sp, #0]
 801bcb2:	4613      	mov	r3, r2
 801bcb4:	687a      	ldr	r2, [r7, #4]
 801bcb6:	68b9      	ldr	r1, [r7, #8]
 801bcb8:	68f8      	ldr	r0, [r7, #12]
 801bcba:	f000 f811 	bl	801bce0 <udp_sendto_if_src>
 801bcbe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bcc0:	4618      	mov	r0, r3
 801bcc2:	3718      	adds	r7, #24
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	bd80      	pop	{r7, pc}
 801bcc8:	08023e60 	.word	0x08023e60
 801bccc:	08023fd4 	.word	0x08023fd4
 801bcd0:	08023eb4 	.word	0x08023eb4
 801bcd4:	08023ff0 	.word	0x08023ff0
 801bcd8:	0802400c 	.word	0x0802400c
 801bcdc:	0802402c 	.word	0x0802402c

0801bce0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b08c      	sub	sp, #48	@ 0x30
 801bce4:	af04      	add	r7, sp, #16
 801bce6:	60f8      	str	r0, [r7, #12]
 801bce8:	60b9      	str	r1, [r7, #8]
 801bcea:	607a      	str	r2, [r7, #4]
 801bcec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bcee:	68fb      	ldr	r3, [r7, #12]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d109      	bne.n	801bd08 <udp_sendto_if_src+0x28>
 801bcf4:	4b69      	ldr	r3, [pc, #420]	@ (801be9c <udp_sendto_if_src+0x1bc>)
 801bcf6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801bcfa:	4969      	ldr	r1, [pc, #420]	@ (801bea0 <udp_sendto_if_src+0x1c0>)
 801bcfc:	4869      	ldr	r0, [pc, #420]	@ (801bea4 <udp_sendto_if_src+0x1c4>)
 801bcfe:	f004 fad3 	bl	80202a8 <iprintf>
 801bd02:	f06f 030f 	mvn.w	r3, #15
 801bd06:	e0c4      	b.n	801be92 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bd08:	68bb      	ldr	r3, [r7, #8]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d109      	bne.n	801bd22 <udp_sendto_if_src+0x42>
 801bd0e:	4b63      	ldr	r3, [pc, #396]	@ (801be9c <udp_sendto_if_src+0x1bc>)
 801bd10:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801bd14:	4964      	ldr	r1, [pc, #400]	@ (801bea8 <udp_sendto_if_src+0x1c8>)
 801bd16:	4863      	ldr	r0, [pc, #396]	@ (801bea4 <udp_sendto_if_src+0x1c4>)
 801bd18:	f004 fac6 	bl	80202a8 <iprintf>
 801bd1c:	f06f 030f 	mvn.w	r3, #15
 801bd20:	e0b7      	b.n	801be92 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d109      	bne.n	801bd3c <udp_sendto_if_src+0x5c>
 801bd28:	4b5c      	ldr	r3, [pc, #368]	@ (801be9c <udp_sendto_if_src+0x1bc>)
 801bd2a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801bd2e:	495f      	ldr	r1, [pc, #380]	@ (801beac <udp_sendto_if_src+0x1cc>)
 801bd30:	485c      	ldr	r0, [pc, #368]	@ (801bea4 <udp_sendto_if_src+0x1c4>)
 801bd32:	f004 fab9 	bl	80202a8 <iprintf>
 801bd36:	f06f 030f 	mvn.w	r3, #15
 801bd3a:	e0aa      	b.n	801be92 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d109      	bne.n	801bd56 <udp_sendto_if_src+0x76>
 801bd42:	4b56      	ldr	r3, [pc, #344]	@ (801be9c <udp_sendto_if_src+0x1bc>)
 801bd44:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801bd48:	4959      	ldr	r1, [pc, #356]	@ (801beb0 <udp_sendto_if_src+0x1d0>)
 801bd4a:	4856      	ldr	r0, [pc, #344]	@ (801bea4 <udp_sendto_if_src+0x1c4>)
 801bd4c:	f004 faac 	bl	80202a8 <iprintf>
 801bd50:	f06f 030f 	mvn.w	r3, #15
 801bd54:	e09d      	b.n	801be92 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d109      	bne.n	801bd70 <udp_sendto_if_src+0x90>
 801bd5c:	4b4f      	ldr	r3, [pc, #316]	@ (801be9c <udp_sendto_if_src+0x1bc>)
 801bd5e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801bd62:	4954      	ldr	r1, [pc, #336]	@ (801beb4 <udp_sendto_if_src+0x1d4>)
 801bd64:	484f      	ldr	r0, [pc, #316]	@ (801bea4 <udp_sendto_if_src+0x1c4>)
 801bd66:	f004 fa9f 	bl	80202a8 <iprintf>
 801bd6a:	f06f 030f 	mvn.w	r3, #15
 801bd6e:	e090      	b.n	801be92 <udp_sendto_if_src+0x1b2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	8a5b      	ldrh	r3, [r3, #18]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d10f      	bne.n	801bd98 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bd78:	68f9      	ldr	r1, [r7, #12]
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	8a5b      	ldrh	r3, [r3, #18]
 801bd7e:	461a      	mov	r2, r3
 801bd80:	68f8      	ldr	r0, [r7, #12]
 801bd82:	f000 f89d 	bl	801bec0 <udp_bind>
 801bd86:	4603      	mov	r3, r0
 801bd88:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bd8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d002      	beq.n	801bd98 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801bd92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bd96:	e07c      	b.n	801be92 <udp_sendto_if_src+0x1b2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	891b      	ldrh	r3, [r3, #8]
 801bd9c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801bda0:	4293      	cmp	r3, r2
 801bda2:	d902      	bls.n	801bdaa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801bda4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bda8:	e073      	b.n	801be92 <udp_sendto_if_src+0x1b2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bdaa:	2108      	movs	r1, #8
 801bdac:	68b8      	ldr	r0, [r7, #8]
 801bdae:	f7f8 ff35 	bl	8014c1c <pbuf_add_header>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d015      	beq.n	801bde4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bdb8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bdbc:	2108      	movs	r1, #8
 801bdbe:	2022      	movs	r0, #34	@ 0x22
 801bdc0:	f7f8 fcde 	bl	8014780 <pbuf_alloc>
 801bdc4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bdc6:	69fb      	ldr	r3, [r7, #28]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d102      	bne.n	801bdd2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801bdcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bdd0:	e05f      	b.n	801be92 <udp_sendto_if_src+0x1b2>
    }
    if (p->tot_len != 0) {
 801bdd2:	68bb      	ldr	r3, [r7, #8]
 801bdd4:	891b      	ldrh	r3, [r3, #8]
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d006      	beq.n	801bde8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bdda:	68b9      	ldr	r1, [r7, #8]
 801bddc:	69f8      	ldr	r0, [r7, #28]
 801bdde:	f7f9 f8d7 	bl	8014f90 <pbuf_chain>
 801bde2:	e001      	b.n	801bde8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801bde4:	68bb      	ldr	r3, [r7, #8]
 801bde6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bde8:	69fb      	ldr	r3, [r7, #28]
 801bdea:	895b      	ldrh	r3, [r3, #10]
 801bdec:	2b07      	cmp	r3, #7
 801bdee:	d806      	bhi.n	801bdfe <udp_sendto_if_src+0x11e>
 801bdf0:	4b2a      	ldr	r3, [pc, #168]	@ (801be9c <udp_sendto_if_src+0x1bc>)
 801bdf2:	f240 320d 	movw	r2, #781	@ 0x30d
 801bdf6:	4930      	ldr	r1, [pc, #192]	@ (801beb8 <udp_sendto_if_src+0x1d8>)
 801bdf8:	482a      	ldr	r0, [pc, #168]	@ (801bea4 <udp_sendto_if_src+0x1c4>)
 801bdfa:	f004 fa55 	bl	80202a8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801bdfe:	69fb      	ldr	r3, [r7, #28]
 801be00:	685b      	ldr	r3, [r3, #4]
 801be02:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	8a5b      	ldrh	r3, [r3, #18]
 801be08:	4618      	mov	r0, r3
 801be0a:	f7f7 fadf 	bl	80133cc <lwip_htons>
 801be0e:	4603      	mov	r3, r0
 801be10:	461a      	mov	r2, r3
 801be12:	697b      	ldr	r3, [r7, #20]
 801be14:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801be16:	887b      	ldrh	r3, [r7, #2]
 801be18:	4618      	mov	r0, r3
 801be1a:	f7f7 fad7 	bl	80133cc <lwip_htons>
 801be1e:	4603      	mov	r3, r0
 801be20:	461a      	mov	r2, r3
 801be22:	697b      	ldr	r3, [r7, #20]
 801be24:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801be26:	697b      	ldr	r3, [r7, #20]
 801be28:	2200      	movs	r2, #0
 801be2a:	719a      	strb	r2, [r3, #6]
 801be2c:	2200      	movs	r2, #0
 801be2e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801be30:	69fb      	ldr	r3, [r7, #28]
 801be32:	891b      	ldrh	r3, [r3, #8]
 801be34:	4618      	mov	r0, r3
 801be36:	f7f7 fac9 	bl	80133cc <lwip_htons>
 801be3a:	4603      	mov	r3, r0
 801be3c:	461a      	mov	r2, r3
 801be3e:	697b      	ldr	r3, [r7, #20]
 801be40:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801be42:	2311      	movs	r3, #17
 801be44:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	7adb      	ldrb	r3, [r3, #11]
 801be4a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	7a9b      	ldrb	r3, [r3, #10]
 801be50:	7cb9      	ldrb	r1, [r7, #18]
 801be52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801be54:	9202      	str	r2, [sp, #8]
 801be56:	7cfa      	ldrb	r2, [r7, #19]
 801be58:	9201      	str	r2, [sp, #4]
 801be5a:	9300      	str	r3, [sp, #0]
 801be5c:	460b      	mov	r3, r1
 801be5e:	687a      	ldr	r2, [r7, #4]
 801be60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801be62:	69f8      	ldr	r0, [r7, #28]
 801be64:	f001 fd02 	bl	801d86c <ip4_output_if_src>
 801be68:	4603      	mov	r3, r0
 801be6a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801be6c:	69fa      	ldr	r2, [r7, #28]
 801be6e:	68bb      	ldr	r3, [r7, #8]
 801be70:	429a      	cmp	r2, r3
 801be72:	d004      	beq.n	801be7e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801be74:	69f8      	ldr	r0, [r7, #28]
 801be76:	f7f8 ff67 	bl	8014d48 <pbuf_free>
    q = NULL;
 801be7a:	2300      	movs	r3, #0
 801be7c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801be7e:	4b0f      	ldr	r3, [pc, #60]	@ (801bebc <udp_sendto_if_src+0x1dc>)
 801be80:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801be84:	3301      	adds	r3, #1
 801be86:	b29a      	uxth	r2, r3
 801be88:	4b0c      	ldr	r3, [pc, #48]	@ (801bebc <udp_sendto_if_src+0x1dc>)
 801be8a:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801be8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801be92:	4618      	mov	r0, r3
 801be94:	3720      	adds	r7, #32
 801be96:	46bd      	mov	sp, r7
 801be98:	bd80      	pop	{r7, pc}
 801be9a:	bf00      	nop
 801be9c:	08023e60 	.word	0x08023e60
 801bea0:	0802404c 	.word	0x0802404c
 801bea4:	08023eb4 	.word	0x08023eb4
 801bea8:	0802406c 	.word	0x0802406c
 801beac:	0802408c 	.word	0x0802408c
 801beb0:	080240b0 	.word	0x080240b0
 801beb4:	080240d4 	.word	0x080240d4
 801beb8:	080240f8 	.word	0x080240f8
 801bebc:	200252ac 	.word	0x200252ac

0801bec0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b086      	sub	sp, #24
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	60f8      	str	r0, [r7, #12]
 801bec8:	60b9      	str	r1, [r7, #8]
 801beca:	4613      	mov	r3, r2
 801becc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bece:	68bb      	ldr	r3, [r7, #8]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d101      	bne.n	801bed8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801bed4:	4b39      	ldr	r3, [pc, #228]	@ (801bfbc <udp_bind+0xfc>)
 801bed6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d109      	bne.n	801bef2 <udp_bind+0x32>
 801bede:	4b38      	ldr	r3, [pc, #224]	@ (801bfc0 <udp_bind+0x100>)
 801bee0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801bee4:	4937      	ldr	r1, [pc, #220]	@ (801bfc4 <udp_bind+0x104>)
 801bee6:	4838      	ldr	r0, [pc, #224]	@ (801bfc8 <udp_bind+0x108>)
 801bee8:	f004 f9de 	bl	80202a8 <iprintf>
 801beec:	f06f 030f 	mvn.w	r3, #15
 801bef0:	e060      	b.n	801bfb4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801bef2:	2300      	movs	r3, #0
 801bef4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bef6:	4b35      	ldr	r3, [pc, #212]	@ (801bfcc <udp_bind+0x10c>)
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	617b      	str	r3, [r7, #20]
 801befc:	e009      	b.n	801bf12 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801befe:	68fa      	ldr	r2, [r7, #12]
 801bf00:	697b      	ldr	r3, [r7, #20]
 801bf02:	429a      	cmp	r2, r3
 801bf04:	d102      	bne.n	801bf0c <udp_bind+0x4c>
      rebind = 1;
 801bf06:	2301      	movs	r3, #1
 801bf08:	74fb      	strb	r3, [r7, #19]
      break;
 801bf0a:	e005      	b.n	801bf18 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf0c:	697b      	ldr	r3, [r7, #20]
 801bf0e:	68db      	ldr	r3, [r3, #12]
 801bf10:	617b      	str	r3, [r7, #20]
 801bf12:	697b      	ldr	r3, [r7, #20]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d1f2      	bne.n	801befe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801bf18:	88fb      	ldrh	r3, [r7, #6]
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d109      	bne.n	801bf32 <udp_bind+0x72>
    port = udp_new_port();
 801bf1e:	f7ff fbe7 	bl	801b6f0 <udp_new_port>
 801bf22:	4603      	mov	r3, r0
 801bf24:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801bf26:	88fb      	ldrh	r3, [r7, #6]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d12c      	bne.n	801bf86 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801bf2c:	f06f 0307 	mvn.w	r3, #7
 801bf30:	e040      	b.n	801bfb4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf32:	4b26      	ldr	r3, [pc, #152]	@ (801bfcc <udp_bind+0x10c>)
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	617b      	str	r3, [r7, #20]
 801bf38:	e022      	b.n	801bf80 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801bf3a:	68fa      	ldr	r2, [r7, #12]
 801bf3c:	697b      	ldr	r3, [r7, #20]
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d01b      	beq.n	801bf7a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801bf42:	697b      	ldr	r3, [r7, #20]
 801bf44:	8a5b      	ldrh	r3, [r3, #18]
 801bf46:	88fa      	ldrh	r2, [r7, #6]
 801bf48:	429a      	cmp	r2, r3
 801bf4a:	d116      	bne.n	801bf7a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bf4c:	697b      	ldr	r3, [r7, #20]
 801bf4e:	681a      	ldr	r2, [r3, #0]
 801bf50:	68bb      	ldr	r3, [r7, #8]
 801bf52:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801bf54:	429a      	cmp	r2, r3
 801bf56:	d00d      	beq.n	801bf74 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bf58:	68bb      	ldr	r3, [r7, #8]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d00a      	beq.n	801bf74 <udp_bind+0xb4>
 801bf5e:	68bb      	ldr	r3, [r7, #8]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d006      	beq.n	801bf74 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bf66:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d003      	beq.n	801bf74 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bf6c:	697b      	ldr	r3, [r7, #20]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d102      	bne.n	801bf7a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801bf74:	f06f 0307 	mvn.w	r3, #7
 801bf78:	e01c      	b.n	801bfb4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf7a:	697b      	ldr	r3, [r7, #20]
 801bf7c:	68db      	ldr	r3, [r3, #12]
 801bf7e:	617b      	str	r3, [r7, #20]
 801bf80:	697b      	ldr	r3, [r7, #20]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d1d9      	bne.n	801bf3a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801bf86:	68bb      	ldr	r3, [r7, #8]
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d002      	beq.n	801bf92 <udp_bind+0xd2>
 801bf8c:	68bb      	ldr	r3, [r7, #8]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	e000      	b.n	801bf94 <udp_bind+0xd4>
 801bf92:	2300      	movs	r3, #0
 801bf94:	68fa      	ldr	r2, [r7, #12]
 801bf96:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	88fa      	ldrh	r2, [r7, #6]
 801bf9c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801bf9e:	7cfb      	ldrb	r3, [r7, #19]
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d106      	bne.n	801bfb2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801bfa4:	4b09      	ldr	r3, [pc, #36]	@ (801bfcc <udp_bind+0x10c>)
 801bfa6:	681a      	ldr	r2, [r3, #0]
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801bfac:	4a07      	ldr	r2, [pc, #28]	@ (801bfcc <udp_bind+0x10c>)
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801bfb2:	2300      	movs	r3, #0
}
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	3718      	adds	r7, #24
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	bd80      	pop	{r7, pc}
 801bfbc:	08025000 	.word	0x08025000
 801bfc0:	08023e60 	.word	0x08023e60
 801bfc4:	08024128 	.word	0x08024128
 801bfc8:	08023eb4 	.word	0x08023eb4
 801bfcc:	20025404 	.word	0x20025404

0801bfd0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801bfd0:	b580      	push	{r7, lr}
 801bfd2:	b084      	sub	sp, #16
 801bfd4:	af00      	add	r7, sp, #0
 801bfd6:	60f8      	str	r0, [r7, #12]
 801bfd8:	60b9      	str	r1, [r7, #8]
 801bfda:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801bfdc:	68fb      	ldr	r3, [r7, #12]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d107      	bne.n	801bff2 <udp_recv+0x22>
 801bfe2:	4b08      	ldr	r3, [pc, #32]	@ (801c004 <udp_recv+0x34>)
 801bfe4:	f240 428a 	movw	r2, #1162	@ 0x48a
 801bfe8:	4907      	ldr	r1, [pc, #28]	@ (801c008 <udp_recv+0x38>)
 801bfea:	4808      	ldr	r0, [pc, #32]	@ (801c00c <udp_recv+0x3c>)
 801bfec:	f004 f95c 	bl	80202a8 <iprintf>
 801bff0:	e005      	b.n	801bffe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	68ba      	ldr	r2, [r7, #8]
 801bff6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	687a      	ldr	r2, [r7, #4]
 801bffc:	61da      	str	r2, [r3, #28]
}
 801bffe:	3710      	adds	r7, #16
 801c000:	46bd      	mov	sp, r7
 801c002:	bd80      	pop	{r7, pc}
 801c004:	08023e60 	.word	0x08023e60
 801c008:	08024194 	.word	0x08024194
 801c00c:	08023eb4 	.word	0x08023eb4

0801c010 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c010:	b580      	push	{r7, lr}
 801c012:	b084      	sub	sp, #16
 801c014:	af00      	add	r7, sp, #0
 801c016:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d107      	bne.n	801c02e <udp_remove+0x1e>
 801c01e:	4b19      	ldr	r3, [pc, #100]	@ (801c084 <udp_remove+0x74>)
 801c020:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801c024:	4918      	ldr	r1, [pc, #96]	@ (801c088 <udp_remove+0x78>)
 801c026:	4819      	ldr	r0, [pc, #100]	@ (801c08c <udp_remove+0x7c>)
 801c028:	f004 f93e 	bl	80202a8 <iprintf>
 801c02c:	e026      	b.n	801c07c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c02e:	4b18      	ldr	r3, [pc, #96]	@ (801c090 <udp_remove+0x80>)
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	687a      	ldr	r2, [r7, #4]
 801c034:	429a      	cmp	r2, r3
 801c036:	d105      	bne.n	801c044 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c038:	4b15      	ldr	r3, [pc, #84]	@ (801c090 <udp_remove+0x80>)
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	68db      	ldr	r3, [r3, #12]
 801c03e:	4a14      	ldr	r2, [pc, #80]	@ (801c090 <udp_remove+0x80>)
 801c040:	6013      	str	r3, [r2, #0]
 801c042:	e017      	b.n	801c074 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c044:	4b12      	ldr	r3, [pc, #72]	@ (801c090 <udp_remove+0x80>)
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	60fb      	str	r3, [r7, #12]
 801c04a:	e010      	b.n	801c06e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	68db      	ldr	r3, [r3, #12]
 801c050:	2b00      	cmp	r3, #0
 801c052:	d009      	beq.n	801c068 <udp_remove+0x58>
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	68db      	ldr	r3, [r3, #12]
 801c058:	687a      	ldr	r2, [r7, #4]
 801c05a:	429a      	cmp	r2, r3
 801c05c:	d104      	bne.n	801c068 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	68da      	ldr	r2, [r3, #12]
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	60da      	str	r2, [r3, #12]
        break;
 801c066:	e005      	b.n	801c074 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	68db      	ldr	r3, [r3, #12]
 801c06c:	60fb      	str	r3, [r7, #12]
 801c06e:	68fb      	ldr	r3, [r7, #12]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d1eb      	bne.n	801c04c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c074:	6879      	ldr	r1, [r7, #4]
 801c076:	2000      	movs	r0, #0
 801c078:	f7f7 ffc2 	bl	8014000 <memp_free>
}
 801c07c:	3710      	adds	r7, #16
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}
 801c082:	bf00      	nop
 801c084:	08023e60 	.word	0x08023e60
 801c088:	080241ac 	.word	0x080241ac
 801c08c:	08023eb4 	.word	0x08023eb4
 801c090:	20025404 	.word	0x20025404

0801c094 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c094:	b580      	push	{r7, lr}
 801c096:	b082      	sub	sp, #8
 801c098:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c09a:	2000      	movs	r0, #0
 801c09c:	f7f7 ff34 	bl	8013f08 <memp_malloc>
 801c0a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d007      	beq.n	801c0b8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c0a8:	2220      	movs	r2, #32
 801c0aa:	2100      	movs	r1, #0
 801c0ac:	6878      	ldr	r0, [r7, #4]
 801c0ae:	f004 fa53 	bl	8020558 <memset>
    pcb->ttl = UDP_TTL;
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	22ff      	movs	r2, #255	@ 0xff
 801c0b6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c0b8:	687b      	ldr	r3, [r7, #4]
}
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	3708      	adds	r7, #8
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	bd80      	pop	{r7, pc}

0801c0c2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c0c2:	b580      	push	{r7, lr}
 801c0c4:	b084      	sub	sp, #16
 801c0c6:	af00      	add	r7, sp, #0
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c0cc:	f7ff ffe2 	bl	801c094 <udp_new>
 801c0d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c0d2:	68fb      	ldr	r3, [r7, #12]
}
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	3710      	adds	r7, #16
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	bd80      	pop	{r7, pc}

0801c0dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c0dc:	b480      	push	{r7}
 801c0de:	b085      	sub	sp, #20
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	6078      	str	r0, [r7, #4]
 801c0e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d01e      	beq.n	801c12a <udp_netif_ip_addr_changed+0x4e>
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d01a      	beq.n	801c12a <udp_netif_ip_addr_changed+0x4e>
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d017      	beq.n	801c12a <udp_netif_ip_addr_changed+0x4e>
 801c0fa:	683b      	ldr	r3, [r7, #0]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d013      	beq.n	801c12a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c102:	4b0d      	ldr	r3, [pc, #52]	@ (801c138 <udp_netif_ip_addr_changed+0x5c>)
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	60fb      	str	r3, [r7, #12]
 801c108:	e00c      	b.n	801c124 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	681a      	ldr	r2, [r3, #0]
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	429a      	cmp	r2, r3
 801c114:	d103      	bne.n	801c11e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c116:	683b      	ldr	r3, [r7, #0]
 801c118:	681a      	ldr	r2, [r3, #0]
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	68db      	ldr	r3, [r3, #12]
 801c122:	60fb      	str	r3, [r7, #12]
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d1ef      	bne.n	801c10a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c12a:	bf00      	nop
 801c12c:	3714      	adds	r7, #20
 801c12e:	46bd      	mov	sp, r7
 801c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c134:	4770      	bx	lr
 801c136:	bf00      	nop
 801c138:	20025404 	.word	0x20025404

0801c13c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c13c:	b580      	push	{r7, lr}
 801c13e:	b082      	sub	sp, #8
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c144:	4915      	ldr	r1, [pc, #84]	@ (801c19c <etharp_free_entry+0x60>)
 801c146:	687a      	ldr	r2, [r7, #4]
 801c148:	4613      	mov	r3, r2
 801c14a:	005b      	lsls	r3, r3, #1
 801c14c:	4413      	add	r3, r2
 801c14e:	00db      	lsls	r3, r3, #3
 801c150:	440b      	add	r3, r1
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d013      	beq.n	801c180 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c158:	4910      	ldr	r1, [pc, #64]	@ (801c19c <etharp_free_entry+0x60>)
 801c15a:	687a      	ldr	r2, [r7, #4]
 801c15c:	4613      	mov	r3, r2
 801c15e:	005b      	lsls	r3, r3, #1
 801c160:	4413      	add	r3, r2
 801c162:	00db      	lsls	r3, r3, #3
 801c164:	440b      	add	r3, r1
 801c166:	681b      	ldr	r3, [r3, #0]
 801c168:	4618      	mov	r0, r3
 801c16a:	f7f8 fded 	bl	8014d48 <pbuf_free>
    arp_table[i].q = NULL;
 801c16e:	490b      	ldr	r1, [pc, #44]	@ (801c19c <etharp_free_entry+0x60>)
 801c170:	687a      	ldr	r2, [r7, #4]
 801c172:	4613      	mov	r3, r2
 801c174:	005b      	lsls	r3, r3, #1
 801c176:	4413      	add	r3, r2
 801c178:	00db      	lsls	r3, r3, #3
 801c17a:	440b      	add	r3, r1
 801c17c:	2200      	movs	r2, #0
 801c17e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c180:	4906      	ldr	r1, [pc, #24]	@ (801c19c <etharp_free_entry+0x60>)
 801c182:	687a      	ldr	r2, [r7, #4]
 801c184:	4613      	mov	r3, r2
 801c186:	005b      	lsls	r3, r3, #1
 801c188:	4413      	add	r3, r2
 801c18a:	00db      	lsls	r3, r3, #3
 801c18c:	440b      	add	r3, r1
 801c18e:	3314      	adds	r3, #20
 801c190:	2200      	movs	r2, #0
 801c192:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c194:	bf00      	nop
 801c196:	3708      	adds	r7, #8
 801c198:	46bd      	mov	sp, r7
 801c19a:	bd80      	pop	{r7, pc}
 801c19c:	20025408 	.word	0x20025408

0801c1a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	b082      	sub	sp, #8
 801c1a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	607b      	str	r3, [r7, #4]
 801c1aa:	e096      	b.n	801c2da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c1ac:	494f      	ldr	r1, [pc, #316]	@ (801c2ec <etharp_tmr+0x14c>)
 801c1ae:	687a      	ldr	r2, [r7, #4]
 801c1b0:	4613      	mov	r3, r2
 801c1b2:	005b      	lsls	r3, r3, #1
 801c1b4:	4413      	add	r3, r2
 801c1b6:	00db      	lsls	r3, r3, #3
 801c1b8:	440b      	add	r3, r1
 801c1ba:	3314      	adds	r3, #20
 801c1bc:	781b      	ldrb	r3, [r3, #0]
 801c1be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c1c0:	78fb      	ldrb	r3, [r7, #3]
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	f000 8086 	beq.w	801c2d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c1c8:	4948      	ldr	r1, [pc, #288]	@ (801c2ec <etharp_tmr+0x14c>)
 801c1ca:	687a      	ldr	r2, [r7, #4]
 801c1cc:	4613      	mov	r3, r2
 801c1ce:	005b      	lsls	r3, r3, #1
 801c1d0:	4413      	add	r3, r2
 801c1d2:	00db      	lsls	r3, r3, #3
 801c1d4:	440b      	add	r3, r1
 801c1d6:	3312      	adds	r3, #18
 801c1d8:	881b      	ldrh	r3, [r3, #0]
 801c1da:	3301      	adds	r3, #1
 801c1dc:	b298      	uxth	r0, r3
 801c1de:	4943      	ldr	r1, [pc, #268]	@ (801c2ec <etharp_tmr+0x14c>)
 801c1e0:	687a      	ldr	r2, [r7, #4]
 801c1e2:	4613      	mov	r3, r2
 801c1e4:	005b      	lsls	r3, r3, #1
 801c1e6:	4413      	add	r3, r2
 801c1e8:	00db      	lsls	r3, r3, #3
 801c1ea:	440b      	add	r3, r1
 801c1ec:	3312      	adds	r3, #18
 801c1ee:	4602      	mov	r2, r0
 801c1f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c1f2:	493e      	ldr	r1, [pc, #248]	@ (801c2ec <etharp_tmr+0x14c>)
 801c1f4:	687a      	ldr	r2, [r7, #4]
 801c1f6:	4613      	mov	r3, r2
 801c1f8:	005b      	lsls	r3, r3, #1
 801c1fa:	4413      	add	r3, r2
 801c1fc:	00db      	lsls	r3, r3, #3
 801c1fe:	440b      	add	r3, r1
 801c200:	3312      	adds	r3, #18
 801c202:	881b      	ldrh	r3, [r3, #0]
 801c204:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801c208:	d215      	bcs.n	801c236 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c20a:	4938      	ldr	r1, [pc, #224]	@ (801c2ec <etharp_tmr+0x14c>)
 801c20c:	687a      	ldr	r2, [r7, #4]
 801c20e:	4613      	mov	r3, r2
 801c210:	005b      	lsls	r3, r3, #1
 801c212:	4413      	add	r3, r2
 801c214:	00db      	lsls	r3, r3, #3
 801c216:	440b      	add	r3, r1
 801c218:	3314      	adds	r3, #20
 801c21a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c21c:	2b01      	cmp	r3, #1
 801c21e:	d10e      	bne.n	801c23e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c220:	4932      	ldr	r1, [pc, #200]	@ (801c2ec <etharp_tmr+0x14c>)
 801c222:	687a      	ldr	r2, [r7, #4]
 801c224:	4613      	mov	r3, r2
 801c226:	005b      	lsls	r3, r3, #1
 801c228:	4413      	add	r3, r2
 801c22a:	00db      	lsls	r3, r3, #3
 801c22c:	440b      	add	r3, r1
 801c22e:	3312      	adds	r3, #18
 801c230:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c232:	2b04      	cmp	r3, #4
 801c234:	d903      	bls.n	801c23e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c236:	6878      	ldr	r0, [r7, #4]
 801c238:	f7ff ff80 	bl	801c13c <etharp_free_entry>
 801c23c:	e04a      	b.n	801c2d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c23e:	492b      	ldr	r1, [pc, #172]	@ (801c2ec <etharp_tmr+0x14c>)
 801c240:	687a      	ldr	r2, [r7, #4]
 801c242:	4613      	mov	r3, r2
 801c244:	005b      	lsls	r3, r3, #1
 801c246:	4413      	add	r3, r2
 801c248:	00db      	lsls	r3, r3, #3
 801c24a:	440b      	add	r3, r1
 801c24c:	3314      	adds	r3, #20
 801c24e:	781b      	ldrb	r3, [r3, #0]
 801c250:	2b03      	cmp	r3, #3
 801c252:	d10a      	bne.n	801c26a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c254:	4925      	ldr	r1, [pc, #148]	@ (801c2ec <etharp_tmr+0x14c>)
 801c256:	687a      	ldr	r2, [r7, #4]
 801c258:	4613      	mov	r3, r2
 801c25a:	005b      	lsls	r3, r3, #1
 801c25c:	4413      	add	r3, r2
 801c25e:	00db      	lsls	r3, r3, #3
 801c260:	440b      	add	r3, r1
 801c262:	3314      	adds	r3, #20
 801c264:	2204      	movs	r2, #4
 801c266:	701a      	strb	r2, [r3, #0]
 801c268:	e034      	b.n	801c2d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c26a:	4920      	ldr	r1, [pc, #128]	@ (801c2ec <etharp_tmr+0x14c>)
 801c26c:	687a      	ldr	r2, [r7, #4]
 801c26e:	4613      	mov	r3, r2
 801c270:	005b      	lsls	r3, r3, #1
 801c272:	4413      	add	r3, r2
 801c274:	00db      	lsls	r3, r3, #3
 801c276:	440b      	add	r3, r1
 801c278:	3314      	adds	r3, #20
 801c27a:	781b      	ldrb	r3, [r3, #0]
 801c27c:	2b04      	cmp	r3, #4
 801c27e:	d10a      	bne.n	801c296 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c280:	491a      	ldr	r1, [pc, #104]	@ (801c2ec <etharp_tmr+0x14c>)
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	4613      	mov	r3, r2
 801c286:	005b      	lsls	r3, r3, #1
 801c288:	4413      	add	r3, r2
 801c28a:	00db      	lsls	r3, r3, #3
 801c28c:	440b      	add	r3, r1
 801c28e:	3314      	adds	r3, #20
 801c290:	2202      	movs	r2, #2
 801c292:	701a      	strb	r2, [r3, #0]
 801c294:	e01e      	b.n	801c2d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c296:	4915      	ldr	r1, [pc, #84]	@ (801c2ec <etharp_tmr+0x14c>)
 801c298:	687a      	ldr	r2, [r7, #4]
 801c29a:	4613      	mov	r3, r2
 801c29c:	005b      	lsls	r3, r3, #1
 801c29e:	4413      	add	r3, r2
 801c2a0:	00db      	lsls	r3, r3, #3
 801c2a2:	440b      	add	r3, r1
 801c2a4:	3314      	adds	r3, #20
 801c2a6:	781b      	ldrb	r3, [r3, #0]
 801c2a8:	2b01      	cmp	r3, #1
 801c2aa:	d113      	bne.n	801c2d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c2ac:	490f      	ldr	r1, [pc, #60]	@ (801c2ec <etharp_tmr+0x14c>)
 801c2ae:	687a      	ldr	r2, [r7, #4]
 801c2b0:	4613      	mov	r3, r2
 801c2b2:	005b      	lsls	r3, r3, #1
 801c2b4:	4413      	add	r3, r2
 801c2b6:	00db      	lsls	r3, r3, #3
 801c2b8:	440b      	add	r3, r1
 801c2ba:	3308      	adds	r3, #8
 801c2bc:	6818      	ldr	r0, [r3, #0]
 801c2be:	687a      	ldr	r2, [r7, #4]
 801c2c0:	4613      	mov	r3, r2
 801c2c2:	005b      	lsls	r3, r3, #1
 801c2c4:	4413      	add	r3, r2
 801c2c6:	00db      	lsls	r3, r3, #3
 801c2c8:	4a08      	ldr	r2, [pc, #32]	@ (801c2ec <etharp_tmr+0x14c>)
 801c2ca:	4413      	add	r3, r2
 801c2cc:	3304      	adds	r3, #4
 801c2ce:	4619      	mov	r1, r3
 801c2d0:	f000 feae 	bl	801d030 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	3301      	adds	r3, #1
 801c2d8:	607b      	str	r3, [r7, #4]
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	2b09      	cmp	r3, #9
 801c2de:	f77f af65 	ble.w	801c1ac <etharp_tmr+0xc>
      }
    }
  }
}
 801c2e2:	bf00      	nop
 801c2e4:	bf00      	nop
 801c2e6:	3708      	adds	r7, #8
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	bd80      	pop	{r7, pc}
 801c2ec:	20025408 	.word	0x20025408

0801c2f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c2f0:	b580      	push	{r7, lr}
 801c2f2:	b08a      	sub	sp, #40	@ 0x28
 801c2f4:	af00      	add	r7, sp, #0
 801c2f6:	60f8      	str	r0, [r7, #12]
 801c2f8:	460b      	mov	r3, r1
 801c2fa:	607a      	str	r2, [r7, #4]
 801c2fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c2fe:	230a      	movs	r3, #10
 801c300:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c302:	230a      	movs	r3, #10
 801c304:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c306:	230a      	movs	r3, #10
 801c308:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801c30a:	2300      	movs	r3, #0
 801c30c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c30e:	230a      	movs	r3, #10
 801c310:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c312:	2300      	movs	r3, #0
 801c314:	83bb      	strh	r3, [r7, #28]
 801c316:	2300      	movs	r3, #0
 801c318:	837b      	strh	r3, [r7, #26]
 801c31a:	2300      	movs	r3, #0
 801c31c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c31e:	2300      	movs	r3, #0
 801c320:	843b      	strh	r3, [r7, #32]
 801c322:	e0ae      	b.n	801c482 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c328:	49a6      	ldr	r1, [pc, #664]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c32a:	4613      	mov	r3, r2
 801c32c:	005b      	lsls	r3, r3, #1
 801c32e:	4413      	add	r3, r2
 801c330:	00db      	lsls	r3, r3, #3
 801c332:	440b      	add	r3, r1
 801c334:	3314      	adds	r3, #20
 801c336:	781b      	ldrb	r3, [r3, #0]
 801c338:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c33a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c33e:	2b0a      	cmp	r3, #10
 801c340:	d105      	bne.n	801c34e <etharp_find_entry+0x5e>
 801c342:	7dfb      	ldrb	r3, [r7, #23]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d102      	bne.n	801c34e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c348:	8c3b      	ldrh	r3, [r7, #32]
 801c34a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801c34c:	e095      	b.n	801c47a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c34e:	7dfb      	ldrb	r3, [r7, #23]
 801c350:	2b00      	cmp	r3, #0
 801c352:	f000 8092 	beq.w	801c47a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c356:	7dfb      	ldrb	r3, [r7, #23]
 801c358:	2b01      	cmp	r3, #1
 801c35a:	d009      	beq.n	801c370 <etharp_find_entry+0x80>
 801c35c:	7dfb      	ldrb	r3, [r7, #23]
 801c35e:	2b01      	cmp	r3, #1
 801c360:	d806      	bhi.n	801c370 <etharp_find_entry+0x80>
 801c362:	4b99      	ldr	r3, [pc, #612]	@ (801c5c8 <etharp_find_entry+0x2d8>)
 801c364:	f240 1223 	movw	r2, #291	@ 0x123
 801c368:	4998      	ldr	r1, [pc, #608]	@ (801c5cc <etharp_find_entry+0x2dc>)
 801c36a:	4899      	ldr	r0, [pc, #612]	@ (801c5d0 <etharp_find_entry+0x2e0>)
 801c36c:	f003 ff9c 	bl	80202a8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d020      	beq.n	801c3b8 <etharp_find_entry+0xc8>
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	6819      	ldr	r1, [r3, #0]
 801c37a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c37e:	4891      	ldr	r0, [pc, #580]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c380:	4613      	mov	r3, r2
 801c382:	005b      	lsls	r3, r3, #1
 801c384:	4413      	add	r3, r2
 801c386:	00db      	lsls	r3, r3, #3
 801c388:	4403      	add	r3, r0
 801c38a:	3304      	adds	r3, #4
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	4299      	cmp	r1, r3
 801c390:	d112      	bne.n	801c3b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	2b00      	cmp	r3, #0
 801c396:	d00c      	beq.n	801c3b2 <etharp_find_entry+0xc2>
 801c398:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c39c:	4989      	ldr	r1, [pc, #548]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c39e:	4613      	mov	r3, r2
 801c3a0:	005b      	lsls	r3, r3, #1
 801c3a2:	4413      	add	r3, r2
 801c3a4:	00db      	lsls	r3, r3, #3
 801c3a6:	440b      	add	r3, r1
 801c3a8:	3308      	adds	r3, #8
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	687a      	ldr	r2, [r7, #4]
 801c3ae:	429a      	cmp	r2, r3
 801c3b0:	d102      	bne.n	801c3b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c3b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c3b6:	e100      	b.n	801c5ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c3b8:	7dfb      	ldrb	r3, [r7, #23]
 801c3ba:	2b01      	cmp	r3, #1
 801c3bc:	d140      	bne.n	801c440 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c3be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3c2:	4980      	ldr	r1, [pc, #512]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c3c4:	4613      	mov	r3, r2
 801c3c6:	005b      	lsls	r3, r3, #1
 801c3c8:	4413      	add	r3, r2
 801c3ca:	00db      	lsls	r3, r3, #3
 801c3cc:	440b      	add	r3, r1
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d01a      	beq.n	801c40a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c3d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3d8:	497a      	ldr	r1, [pc, #488]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c3da:	4613      	mov	r3, r2
 801c3dc:	005b      	lsls	r3, r3, #1
 801c3de:	4413      	add	r3, r2
 801c3e0:	00db      	lsls	r3, r3, #3
 801c3e2:	440b      	add	r3, r1
 801c3e4:	3312      	adds	r3, #18
 801c3e6:	881b      	ldrh	r3, [r3, #0]
 801c3e8:	8bba      	ldrh	r2, [r7, #28]
 801c3ea:	429a      	cmp	r2, r3
 801c3ec:	d845      	bhi.n	801c47a <etharp_find_entry+0x18a>
            old_queue = i;
 801c3ee:	8c3b      	ldrh	r3, [r7, #32]
 801c3f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c3f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3f6:	4973      	ldr	r1, [pc, #460]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c3f8:	4613      	mov	r3, r2
 801c3fa:	005b      	lsls	r3, r3, #1
 801c3fc:	4413      	add	r3, r2
 801c3fe:	00db      	lsls	r3, r3, #3
 801c400:	440b      	add	r3, r1
 801c402:	3312      	adds	r3, #18
 801c404:	881b      	ldrh	r3, [r3, #0]
 801c406:	83bb      	strh	r3, [r7, #28]
 801c408:	e037      	b.n	801c47a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c40a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c40e:	496d      	ldr	r1, [pc, #436]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c410:	4613      	mov	r3, r2
 801c412:	005b      	lsls	r3, r3, #1
 801c414:	4413      	add	r3, r2
 801c416:	00db      	lsls	r3, r3, #3
 801c418:	440b      	add	r3, r1
 801c41a:	3312      	adds	r3, #18
 801c41c:	881b      	ldrh	r3, [r3, #0]
 801c41e:	8b7a      	ldrh	r2, [r7, #26]
 801c420:	429a      	cmp	r2, r3
 801c422:	d82a      	bhi.n	801c47a <etharp_find_entry+0x18a>
            old_pending = i;
 801c424:	8c3b      	ldrh	r3, [r7, #32]
 801c426:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801c428:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c42c:	4965      	ldr	r1, [pc, #404]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c42e:	4613      	mov	r3, r2
 801c430:	005b      	lsls	r3, r3, #1
 801c432:	4413      	add	r3, r2
 801c434:	00db      	lsls	r3, r3, #3
 801c436:	440b      	add	r3, r1
 801c438:	3312      	adds	r3, #18
 801c43a:	881b      	ldrh	r3, [r3, #0]
 801c43c:	837b      	strh	r3, [r7, #26]
 801c43e:	e01c      	b.n	801c47a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c440:	7dfb      	ldrb	r3, [r7, #23]
 801c442:	2b01      	cmp	r3, #1
 801c444:	d919      	bls.n	801c47a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c44a:	495e      	ldr	r1, [pc, #376]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c44c:	4613      	mov	r3, r2
 801c44e:	005b      	lsls	r3, r3, #1
 801c450:	4413      	add	r3, r2
 801c452:	00db      	lsls	r3, r3, #3
 801c454:	440b      	add	r3, r1
 801c456:	3312      	adds	r3, #18
 801c458:	881b      	ldrh	r3, [r3, #0]
 801c45a:	8b3a      	ldrh	r2, [r7, #24]
 801c45c:	429a      	cmp	r2, r3
 801c45e:	d80c      	bhi.n	801c47a <etharp_find_entry+0x18a>
            old_stable = i;
 801c460:	8c3b      	ldrh	r3, [r7, #32]
 801c462:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801c464:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c468:	4956      	ldr	r1, [pc, #344]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c46a:	4613      	mov	r3, r2
 801c46c:	005b      	lsls	r3, r3, #1
 801c46e:	4413      	add	r3, r2
 801c470:	00db      	lsls	r3, r3, #3
 801c472:	440b      	add	r3, r1
 801c474:	3312      	adds	r3, #18
 801c476:	881b      	ldrh	r3, [r3, #0]
 801c478:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c47a:	8c3b      	ldrh	r3, [r7, #32]
 801c47c:	3301      	adds	r3, #1
 801c47e:	b29b      	uxth	r3, r3
 801c480:	843b      	strh	r3, [r7, #32]
 801c482:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c486:	2b09      	cmp	r3, #9
 801c488:	f77f af4c 	ble.w	801c324 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c48c:	7afb      	ldrb	r3, [r7, #11]
 801c48e:	f003 0302 	and.w	r3, r3, #2
 801c492:	2b00      	cmp	r3, #0
 801c494:	d108      	bne.n	801c4a8 <etharp_find_entry+0x1b8>
 801c496:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c49a:	2b0a      	cmp	r3, #10
 801c49c:	d107      	bne.n	801c4ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c49e:	7afb      	ldrb	r3, [r7, #11]
 801c4a0:	f003 0301 	and.w	r3, r3, #1
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d102      	bne.n	801c4ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c4a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c4ac:	e085      	b.n	801c5ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c4ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c4b2:	2b09      	cmp	r3, #9
 801c4b4:	dc02      	bgt.n	801c4bc <etharp_find_entry+0x1cc>
    i = empty;
 801c4b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c4b8:	843b      	strh	r3, [r7, #32]
 801c4ba:	e039      	b.n	801c530 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c4bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c4c0:	2b09      	cmp	r3, #9
 801c4c2:	dc14      	bgt.n	801c4ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c4c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c4c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c4c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c4cc:	493d      	ldr	r1, [pc, #244]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c4ce:	4613      	mov	r3, r2
 801c4d0:	005b      	lsls	r3, r3, #1
 801c4d2:	4413      	add	r3, r2
 801c4d4:	00db      	lsls	r3, r3, #3
 801c4d6:	440b      	add	r3, r1
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d018      	beq.n	801c510 <etharp_find_entry+0x220>
 801c4de:	4b3a      	ldr	r3, [pc, #232]	@ (801c5c8 <etharp_find_entry+0x2d8>)
 801c4e0:	f240 126d 	movw	r2, #365	@ 0x16d
 801c4e4:	493b      	ldr	r1, [pc, #236]	@ (801c5d4 <etharp_find_entry+0x2e4>)
 801c4e6:	483a      	ldr	r0, [pc, #232]	@ (801c5d0 <etharp_find_entry+0x2e0>)
 801c4e8:	f003 fede 	bl	80202a8 <iprintf>
 801c4ec:	e010      	b.n	801c510 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c4ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c4f2:	2b09      	cmp	r3, #9
 801c4f4:	dc02      	bgt.n	801c4fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c4f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c4f8:	843b      	strh	r3, [r7, #32]
 801c4fa:	e009      	b.n	801c510 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c4fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c500:	2b09      	cmp	r3, #9
 801c502:	dc02      	bgt.n	801c50a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c504:	8bfb      	ldrh	r3, [r7, #30]
 801c506:	843b      	strh	r3, [r7, #32]
 801c508:	e002      	b.n	801c510 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c50a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c50e:	e054      	b.n	801c5ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c510:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c514:	2b09      	cmp	r3, #9
 801c516:	dd06      	ble.n	801c526 <etharp_find_entry+0x236>
 801c518:	4b2b      	ldr	r3, [pc, #172]	@ (801c5c8 <etharp_find_entry+0x2d8>)
 801c51a:	f240 127f 	movw	r2, #383	@ 0x17f
 801c51e:	492e      	ldr	r1, [pc, #184]	@ (801c5d8 <etharp_find_entry+0x2e8>)
 801c520:	482b      	ldr	r0, [pc, #172]	@ (801c5d0 <etharp_find_entry+0x2e0>)
 801c522:	f003 fec1 	bl	80202a8 <iprintf>
    etharp_free_entry(i);
 801c526:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c52a:	4618      	mov	r0, r3
 801c52c:	f7ff fe06 	bl	801c13c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c530:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c534:	2b09      	cmp	r3, #9
 801c536:	dd06      	ble.n	801c546 <etharp_find_entry+0x256>
 801c538:	4b23      	ldr	r3, [pc, #140]	@ (801c5c8 <etharp_find_entry+0x2d8>)
 801c53a:	f240 1283 	movw	r2, #387	@ 0x183
 801c53e:	4926      	ldr	r1, [pc, #152]	@ (801c5d8 <etharp_find_entry+0x2e8>)
 801c540:	4823      	ldr	r0, [pc, #140]	@ (801c5d0 <etharp_find_entry+0x2e0>)
 801c542:	f003 feb1 	bl	80202a8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c54a:	491e      	ldr	r1, [pc, #120]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c54c:	4613      	mov	r3, r2
 801c54e:	005b      	lsls	r3, r3, #1
 801c550:	4413      	add	r3, r2
 801c552:	00db      	lsls	r3, r3, #3
 801c554:	440b      	add	r3, r1
 801c556:	3314      	adds	r3, #20
 801c558:	781b      	ldrb	r3, [r3, #0]
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d006      	beq.n	801c56c <etharp_find_entry+0x27c>
 801c55e:	4b1a      	ldr	r3, [pc, #104]	@ (801c5c8 <etharp_find_entry+0x2d8>)
 801c560:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801c564:	491d      	ldr	r1, [pc, #116]	@ (801c5dc <etharp_find_entry+0x2ec>)
 801c566:	481a      	ldr	r0, [pc, #104]	@ (801c5d0 <etharp_find_entry+0x2e0>)
 801c568:	f003 fe9e 	bl	80202a8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d00b      	beq.n	801c58a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c572:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	6819      	ldr	r1, [r3, #0]
 801c57a:	4812      	ldr	r0, [pc, #72]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c57c:	4613      	mov	r3, r2
 801c57e:	005b      	lsls	r3, r3, #1
 801c580:	4413      	add	r3, r2
 801c582:	00db      	lsls	r3, r3, #3
 801c584:	4403      	add	r3, r0
 801c586:	3304      	adds	r3, #4
 801c588:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c58a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c58e:	490d      	ldr	r1, [pc, #52]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c590:	4613      	mov	r3, r2
 801c592:	005b      	lsls	r3, r3, #1
 801c594:	4413      	add	r3, r2
 801c596:	00db      	lsls	r3, r3, #3
 801c598:	440b      	add	r3, r1
 801c59a:	3312      	adds	r3, #18
 801c59c:	2200      	movs	r2, #0
 801c59e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c5a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c5a4:	4907      	ldr	r1, [pc, #28]	@ (801c5c4 <etharp_find_entry+0x2d4>)
 801c5a6:	4613      	mov	r3, r2
 801c5a8:	005b      	lsls	r3, r3, #1
 801c5aa:	4413      	add	r3, r2
 801c5ac:	00db      	lsls	r3, r3, #3
 801c5ae:	440b      	add	r3, r1
 801c5b0:	3308      	adds	r3, #8
 801c5b2:	687a      	ldr	r2, [r7, #4]
 801c5b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c5b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	3728      	adds	r7, #40	@ 0x28
 801c5be:	46bd      	mov	sp, r7
 801c5c0:	bd80      	pop	{r7, pc}
 801c5c2:	bf00      	nop
 801c5c4:	20025408 	.word	0x20025408
 801c5c8:	080241c4 	.word	0x080241c4
 801c5cc:	080241fc 	.word	0x080241fc
 801c5d0:	0802423c 	.word	0x0802423c
 801c5d4:	08024264 	.word	0x08024264
 801c5d8:	0802427c 	.word	0x0802427c
 801c5dc:	08024290 	.word	0x08024290

0801c5e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b088      	sub	sp, #32
 801c5e4:	af02      	add	r7, sp, #8
 801c5e6:	60f8      	str	r0, [r7, #12]
 801c5e8:	60b9      	str	r1, [r7, #8]
 801c5ea:	607a      	str	r2, [r7, #4]
 801c5ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c5f4:	2b06      	cmp	r3, #6
 801c5f6:	d006      	beq.n	801c606 <etharp_update_arp_entry+0x26>
 801c5f8:	4b48      	ldr	r3, [pc, #288]	@ (801c71c <etharp_update_arp_entry+0x13c>)
 801c5fa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801c5fe:	4948      	ldr	r1, [pc, #288]	@ (801c720 <etharp_update_arp_entry+0x140>)
 801c600:	4848      	ldr	r0, [pc, #288]	@ (801c724 <etharp_update_arp_entry+0x144>)
 801c602:	f003 fe51 	bl	80202a8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c606:	68bb      	ldr	r3, [r7, #8]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d012      	beq.n	801c632 <etharp_update_arp_entry+0x52>
 801c60c:	68bb      	ldr	r3, [r7, #8]
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	2b00      	cmp	r3, #0
 801c612:	d00e      	beq.n	801c632 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c614:	68bb      	ldr	r3, [r7, #8]
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	68f9      	ldr	r1, [r7, #12]
 801c61a:	4618      	mov	r0, r3
 801c61c:	f001 f9ee 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 801c620:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c622:	2b00      	cmp	r3, #0
 801c624:	d105      	bne.n	801c632 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c626:	68bb      	ldr	r3, [r7, #8]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c62e:	2be0      	cmp	r3, #224	@ 0xe0
 801c630:	d102      	bne.n	801c638 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c632:	f06f 030f 	mvn.w	r3, #15
 801c636:	e06c      	b.n	801c712 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c638:	78fb      	ldrb	r3, [r7, #3]
 801c63a:	68fa      	ldr	r2, [r7, #12]
 801c63c:	4619      	mov	r1, r3
 801c63e:	68b8      	ldr	r0, [r7, #8]
 801c640:	f7ff fe56 	bl	801c2f0 <etharp_find_entry>
 801c644:	4603      	mov	r3, r0
 801c646:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c648:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	da02      	bge.n	801c656 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c650:	8afb      	ldrh	r3, [r7, #22]
 801c652:	b25b      	sxtb	r3, r3
 801c654:	e05d      	b.n	801c712 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c656:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c65a:	4933      	ldr	r1, [pc, #204]	@ (801c728 <etharp_update_arp_entry+0x148>)
 801c65c:	4613      	mov	r3, r2
 801c65e:	005b      	lsls	r3, r3, #1
 801c660:	4413      	add	r3, r2
 801c662:	00db      	lsls	r3, r3, #3
 801c664:	440b      	add	r3, r1
 801c666:	3314      	adds	r3, #20
 801c668:	2202      	movs	r2, #2
 801c66a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c66c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c670:	492d      	ldr	r1, [pc, #180]	@ (801c728 <etharp_update_arp_entry+0x148>)
 801c672:	4613      	mov	r3, r2
 801c674:	005b      	lsls	r3, r3, #1
 801c676:	4413      	add	r3, r2
 801c678:	00db      	lsls	r3, r3, #3
 801c67a:	440b      	add	r3, r1
 801c67c:	3308      	adds	r3, #8
 801c67e:	68fa      	ldr	r2, [r7, #12]
 801c680:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c686:	4613      	mov	r3, r2
 801c688:	005b      	lsls	r3, r3, #1
 801c68a:	4413      	add	r3, r2
 801c68c:	00db      	lsls	r3, r3, #3
 801c68e:	3308      	adds	r3, #8
 801c690:	4a25      	ldr	r2, [pc, #148]	@ (801c728 <etharp_update_arp_entry+0x148>)
 801c692:	4413      	add	r3, r2
 801c694:	3304      	adds	r3, #4
 801c696:	2206      	movs	r2, #6
 801c698:	6879      	ldr	r1, [r7, #4]
 801c69a:	4618      	mov	r0, r3
 801c69c:	f004 f82f 	bl	80206fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c6a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c6a4:	4920      	ldr	r1, [pc, #128]	@ (801c728 <etharp_update_arp_entry+0x148>)
 801c6a6:	4613      	mov	r3, r2
 801c6a8:	005b      	lsls	r3, r3, #1
 801c6aa:	4413      	add	r3, r2
 801c6ac:	00db      	lsls	r3, r3, #3
 801c6ae:	440b      	add	r3, r1
 801c6b0:	3312      	adds	r3, #18
 801c6b2:	2200      	movs	r2, #0
 801c6b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c6b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c6ba:	491b      	ldr	r1, [pc, #108]	@ (801c728 <etharp_update_arp_entry+0x148>)
 801c6bc:	4613      	mov	r3, r2
 801c6be:	005b      	lsls	r3, r3, #1
 801c6c0:	4413      	add	r3, r2
 801c6c2:	00db      	lsls	r3, r3, #3
 801c6c4:	440b      	add	r3, r1
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d021      	beq.n	801c710 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c6cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c6d0:	4915      	ldr	r1, [pc, #84]	@ (801c728 <etharp_update_arp_entry+0x148>)
 801c6d2:	4613      	mov	r3, r2
 801c6d4:	005b      	lsls	r3, r3, #1
 801c6d6:	4413      	add	r3, r2
 801c6d8:	00db      	lsls	r3, r3, #3
 801c6da:	440b      	add	r3, r1
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c6e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c6e4:	4910      	ldr	r1, [pc, #64]	@ (801c728 <etharp_update_arp_entry+0x148>)
 801c6e6:	4613      	mov	r3, r2
 801c6e8:	005b      	lsls	r3, r3, #1
 801c6ea:	4413      	add	r3, r2
 801c6ec:	00db      	lsls	r3, r3, #3
 801c6ee:	440b      	add	r3, r1
 801c6f0:	2200      	movs	r2, #0
 801c6f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c6fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c6fe:	9300      	str	r3, [sp, #0]
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	6939      	ldr	r1, [r7, #16]
 801c704:	68f8      	ldr	r0, [r7, #12]
 801c706:	f002 f8d9 	bl	801e8bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c70a:	6938      	ldr	r0, [r7, #16]
 801c70c:	f7f8 fb1c 	bl	8014d48 <pbuf_free>
  }
  return ERR_OK;
 801c710:	2300      	movs	r3, #0
}
 801c712:	4618      	mov	r0, r3
 801c714:	3718      	adds	r7, #24
 801c716:	46bd      	mov	sp, r7
 801c718:	bd80      	pop	{r7, pc}
 801c71a:	bf00      	nop
 801c71c:	080241c4 	.word	0x080241c4
 801c720:	080242bc 	.word	0x080242bc
 801c724:	0802423c 	.word	0x0802423c
 801c728:	20025408 	.word	0x20025408

0801c72c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c72c:	b580      	push	{r7, lr}
 801c72e:	b084      	sub	sp, #16
 801c730:	af00      	add	r7, sp, #0
 801c732:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c734:	2300      	movs	r3, #0
 801c736:	60fb      	str	r3, [r7, #12]
 801c738:	e01e      	b.n	801c778 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c73a:	4913      	ldr	r1, [pc, #76]	@ (801c788 <etharp_cleanup_netif+0x5c>)
 801c73c:	68fa      	ldr	r2, [r7, #12]
 801c73e:	4613      	mov	r3, r2
 801c740:	005b      	lsls	r3, r3, #1
 801c742:	4413      	add	r3, r2
 801c744:	00db      	lsls	r3, r3, #3
 801c746:	440b      	add	r3, r1
 801c748:	3314      	adds	r3, #20
 801c74a:	781b      	ldrb	r3, [r3, #0]
 801c74c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c74e:	7afb      	ldrb	r3, [r7, #11]
 801c750:	2b00      	cmp	r3, #0
 801c752:	d00e      	beq.n	801c772 <etharp_cleanup_netif+0x46>
 801c754:	490c      	ldr	r1, [pc, #48]	@ (801c788 <etharp_cleanup_netif+0x5c>)
 801c756:	68fa      	ldr	r2, [r7, #12]
 801c758:	4613      	mov	r3, r2
 801c75a:	005b      	lsls	r3, r3, #1
 801c75c:	4413      	add	r3, r2
 801c75e:	00db      	lsls	r3, r3, #3
 801c760:	440b      	add	r3, r1
 801c762:	3308      	adds	r3, #8
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	687a      	ldr	r2, [r7, #4]
 801c768:	429a      	cmp	r2, r3
 801c76a:	d102      	bne.n	801c772 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c76c:	68f8      	ldr	r0, [r7, #12]
 801c76e:	f7ff fce5 	bl	801c13c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	3301      	adds	r3, #1
 801c776:	60fb      	str	r3, [r7, #12]
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	2b09      	cmp	r3, #9
 801c77c:	dddd      	ble.n	801c73a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c77e:	bf00      	nop
 801c780:	bf00      	nop
 801c782:	3710      	adds	r7, #16
 801c784:	46bd      	mov	sp, r7
 801c786:	bd80      	pop	{r7, pc}
 801c788:	20025408 	.word	0x20025408

0801c78c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c78c:	b5b0      	push	{r4, r5, r7, lr}
 801c78e:	b08a      	sub	sp, #40	@ 0x28
 801c790:	af04      	add	r7, sp, #16
 801c792:	6078      	str	r0, [r7, #4]
 801c794:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c796:	683b      	ldr	r3, [r7, #0]
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d107      	bne.n	801c7ac <etharp_input+0x20>
 801c79c:	4b49      	ldr	r3, [pc, #292]	@ (801c8c4 <etharp_input+0x138>)
 801c79e:	f240 228a 	movw	r2, #650	@ 0x28a
 801c7a2:	4949      	ldr	r1, [pc, #292]	@ (801c8c8 <etharp_input+0x13c>)
 801c7a4:	4849      	ldr	r0, [pc, #292]	@ (801c8cc <etharp_input+0x140>)
 801c7a6:	f003 fd7f 	bl	80202a8 <iprintf>
 801c7aa:	e088      	b.n	801c8be <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	685b      	ldr	r3, [r3, #4]
 801c7b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c7b2:	693b      	ldr	r3, [r7, #16]
 801c7b4:	881b      	ldrh	r3, [r3, #0]
 801c7b6:	b29b      	uxth	r3, r3
 801c7b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c7bc:	d10c      	bne.n	801c7d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c7be:	693b      	ldr	r3, [r7, #16]
 801c7c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c7c2:	2b06      	cmp	r3, #6
 801c7c4:	d108      	bne.n	801c7d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c7c6:	693b      	ldr	r3, [r7, #16]
 801c7c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c7ca:	2b04      	cmp	r3, #4
 801c7cc:	d104      	bne.n	801c7d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c7ce:	693b      	ldr	r3, [r7, #16]
 801c7d0:	885b      	ldrh	r3, [r3, #2]
 801c7d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c7d4:	2b08      	cmp	r3, #8
 801c7d6:	d00f      	beq.n	801c7f8 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801c7d8:	4b3d      	ldr	r3, [pc, #244]	@ (801c8d0 <etharp_input+0x144>)
 801c7da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c7dc:	3301      	adds	r3, #1
 801c7de:	b29a      	uxth	r2, r3
 801c7e0:	4b3b      	ldr	r3, [pc, #236]	@ (801c8d0 <etharp_input+0x144>)
 801c7e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801c7e4:	4b3a      	ldr	r3, [pc, #232]	@ (801c8d0 <etharp_input+0x144>)
 801c7e6:	8bdb      	ldrh	r3, [r3, #30]
 801c7e8:	3301      	adds	r3, #1
 801c7ea:	b29a      	uxth	r2, r3
 801c7ec:	4b38      	ldr	r3, [pc, #224]	@ (801c8d0 <etharp_input+0x144>)
 801c7ee:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801c7f0:	6878      	ldr	r0, [r7, #4]
 801c7f2:	f7f8 faa9 	bl	8014d48 <pbuf_free>
    return;
 801c7f6:	e062      	b.n	801c8be <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801c7f8:	4b35      	ldr	r3, [pc, #212]	@ (801c8d0 <etharp_input+0x144>)
 801c7fa:	8b5b      	ldrh	r3, [r3, #26]
 801c7fc:	3301      	adds	r3, #1
 801c7fe:	b29a      	uxth	r2, r3
 801c800:	4b33      	ldr	r3, [pc, #204]	@ (801c8d0 <etharp_input+0x144>)
 801c802:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c804:	693b      	ldr	r3, [r7, #16]
 801c806:	330e      	adds	r3, #14
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c80c:	693b      	ldr	r3, [r7, #16]
 801c80e:	3318      	adds	r3, #24
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c814:	683b      	ldr	r3, [r7, #0]
 801c816:	3304      	adds	r3, #4
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d102      	bne.n	801c824 <etharp_input+0x98>
    for_us = 0;
 801c81e:	2300      	movs	r3, #0
 801c820:	75fb      	strb	r3, [r7, #23]
 801c822:	e009      	b.n	801c838 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c824:	68ba      	ldr	r2, [r7, #8]
 801c826:	683b      	ldr	r3, [r7, #0]
 801c828:	3304      	adds	r3, #4
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	429a      	cmp	r2, r3
 801c82e:	bf0c      	ite	eq
 801c830:	2301      	moveq	r3, #1
 801c832:	2300      	movne	r3, #0
 801c834:	b2db      	uxtb	r3, r3
 801c836:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c838:	693b      	ldr	r3, [r7, #16]
 801c83a:	f103 0208 	add.w	r2, r3, #8
 801c83e:	7dfb      	ldrb	r3, [r7, #23]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d001      	beq.n	801c848 <etharp_input+0xbc>
 801c844:	2301      	movs	r3, #1
 801c846:	e000      	b.n	801c84a <etharp_input+0xbe>
 801c848:	2302      	movs	r3, #2
 801c84a:	f107 010c 	add.w	r1, r7, #12
 801c84e:	6838      	ldr	r0, [r7, #0]
 801c850:	f7ff fec6 	bl	801c5e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c854:	693b      	ldr	r3, [r7, #16]
 801c856:	88db      	ldrh	r3, [r3, #6]
 801c858:	b29b      	uxth	r3, r3
 801c85a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c85e:	d003      	beq.n	801c868 <etharp_input+0xdc>
 801c860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c864:	d025      	beq.n	801c8b2 <etharp_input+0x126>
 801c866:	e01d      	b.n	801c8a4 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801c868:	7dfb      	ldrb	r3, [r7, #23]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d023      	beq.n	801c8b6 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c86e:	683b      	ldr	r3, [r7, #0]
 801c870:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801c874:	693b      	ldr	r3, [r7, #16]
 801c876:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c87a:	683b      	ldr	r3, [r7, #0]
 801c87c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801c880:	683b      	ldr	r3, [r7, #0]
 801c882:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c884:	693a      	ldr	r2, [r7, #16]
 801c886:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c888:	2102      	movs	r1, #2
 801c88a:	9103      	str	r1, [sp, #12]
 801c88c:	f107 010c 	add.w	r1, r7, #12
 801c890:	9102      	str	r1, [sp, #8]
 801c892:	9201      	str	r2, [sp, #4]
 801c894:	9300      	str	r3, [sp, #0]
 801c896:	462b      	mov	r3, r5
 801c898:	4622      	mov	r2, r4
 801c89a:	4601      	mov	r1, r0
 801c89c:	6838      	ldr	r0, [r7, #0]
 801c89e:	f000 fb0b 	bl	801ceb8 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801c8a2:	e008      	b.n	801c8b6 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801c8a4:	4b0a      	ldr	r3, [pc, #40]	@ (801c8d0 <etharp_input+0x144>)
 801c8a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c8a8:	3301      	adds	r3, #1
 801c8aa:	b29a      	uxth	r2, r3
 801c8ac:	4b08      	ldr	r3, [pc, #32]	@ (801c8d0 <etharp_input+0x144>)
 801c8ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801c8b0:	e002      	b.n	801c8b8 <etharp_input+0x12c>
      break;
 801c8b2:	bf00      	nop
 801c8b4:	e000      	b.n	801c8b8 <etharp_input+0x12c>
      break;
 801c8b6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	f7f8 fa45 	bl	8014d48 <pbuf_free>
}
 801c8be:	3718      	adds	r7, #24
 801c8c0:	46bd      	mov	sp, r7
 801c8c2:	bdb0      	pop	{r4, r5, r7, pc}
 801c8c4:	080241c4 	.word	0x080241c4
 801c8c8:	08024314 	.word	0x08024314
 801c8cc:	0802423c 	.word	0x0802423c
 801c8d0:	200252ac 	.word	0x200252ac

0801c8d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b086      	sub	sp, #24
 801c8d8:	af02      	add	r7, sp, #8
 801c8da:	60f8      	str	r0, [r7, #12]
 801c8dc:	60b9      	str	r1, [r7, #8]
 801c8de:	4613      	mov	r3, r2
 801c8e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c8e2:	79fa      	ldrb	r2, [r7, #7]
 801c8e4:	4944      	ldr	r1, [pc, #272]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c8e6:	4613      	mov	r3, r2
 801c8e8:	005b      	lsls	r3, r3, #1
 801c8ea:	4413      	add	r3, r2
 801c8ec:	00db      	lsls	r3, r3, #3
 801c8ee:	440b      	add	r3, r1
 801c8f0:	3314      	adds	r3, #20
 801c8f2:	781b      	ldrb	r3, [r3, #0]
 801c8f4:	2b01      	cmp	r3, #1
 801c8f6:	d806      	bhi.n	801c906 <etharp_output_to_arp_index+0x32>
 801c8f8:	4b40      	ldr	r3, [pc, #256]	@ (801c9fc <etharp_output_to_arp_index+0x128>)
 801c8fa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801c8fe:	4940      	ldr	r1, [pc, #256]	@ (801ca00 <etharp_output_to_arp_index+0x12c>)
 801c900:	4840      	ldr	r0, [pc, #256]	@ (801ca04 <etharp_output_to_arp_index+0x130>)
 801c902:	f003 fcd1 	bl	80202a8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c906:	79fa      	ldrb	r2, [r7, #7]
 801c908:	493b      	ldr	r1, [pc, #236]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c90a:	4613      	mov	r3, r2
 801c90c:	005b      	lsls	r3, r3, #1
 801c90e:	4413      	add	r3, r2
 801c910:	00db      	lsls	r3, r3, #3
 801c912:	440b      	add	r3, r1
 801c914:	3314      	adds	r3, #20
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	2b02      	cmp	r3, #2
 801c91a:	d153      	bne.n	801c9c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c91c:	79fa      	ldrb	r2, [r7, #7]
 801c91e:	4936      	ldr	r1, [pc, #216]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c920:	4613      	mov	r3, r2
 801c922:	005b      	lsls	r3, r3, #1
 801c924:	4413      	add	r3, r2
 801c926:	00db      	lsls	r3, r3, #3
 801c928:	440b      	add	r3, r1
 801c92a:	3312      	adds	r3, #18
 801c92c:	881b      	ldrh	r3, [r3, #0]
 801c92e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801c932:	d919      	bls.n	801c968 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c934:	79fa      	ldrb	r2, [r7, #7]
 801c936:	4613      	mov	r3, r2
 801c938:	005b      	lsls	r3, r3, #1
 801c93a:	4413      	add	r3, r2
 801c93c:	00db      	lsls	r3, r3, #3
 801c93e:	4a2e      	ldr	r2, [pc, #184]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c940:	4413      	add	r3, r2
 801c942:	3304      	adds	r3, #4
 801c944:	4619      	mov	r1, r3
 801c946:	68f8      	ldr	r0, [r7, #12]
 801c948:	f000 fb72 	bl	801d030 <etharp_request>
 801c94c:	4603      	mov	r3, r0
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d138      	bne.n	801c9c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c952:	79fa      	ldrb	r2, [r7, #7]
 801c954:	4928      	ldr	r1, [pc, #160]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c956:	4613      	mov	r3, r2
 801c958:	005b      	lsls	r3, r3, #1
 801c95a:	4413      	add	r3, r2
 801c95c:	00db      	lsls	r3, r3, #3
 801c95e:	440b      	add	r3, r1
 801c960:	3314      	adds	r3, #20
 801c962:	2203      	movs	r2, #3
 801c964:	701a      	strb	r2, [r3, #0]
 801c966:	e02d      	b.n	801c9c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c968:	79fa      	ldrb	r2, [r7, #7]
 801c96a:	4923      	ldr	r1, [pc, #140]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c96c:	4613      	mov	r3, r2
 801c96e:	005b      	lsls	r3, r3, #1
 801c970:	4413      	add	r3, r2
 801c972:	00db      	lsls	r3, r3, #3
 801c974:	440b      	add	r3, r1
 801c976:	3312      	adds	r3, #18
 801c978:	881b      	ldrh	r3, [r3, #0]
 801c97a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801c97e:	d321      	bcc.n	801c9c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c980:	79fa      	ldrb	r2, [r7, #7]
 801c982:	4613      	mov	r3, r2
 801c984:	005b      	lsls	r3, r3, #1
 801c986:	4413      	add	r3, r2
 801c988:	00db      	lsls	r3, r3, #3
 801c98a:	4a1b      	ldr	r2, [pc, #108]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c98c:	4413      	add	r3, r2
 801c98e:	1d19      	adds	r1, r3, #4
 801c990:	79fa      	ldrb	r2, [r7, #7]
 801c992:	4613      	mov	r3, r2
 801c994:	005b      	lsls	r3, r3, #1
 801c996:	4413      	add	r3, r2
 801c998:	00db      	lsls	r3, r3, #3
 801c99a:	3308      	adds	r3, #8
 801c99c:	4a16      	ldr	r2, [pc, #88]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c99e:	4413      	add	r3, r2
 801c9a0:	3304      	adds	r3, #4
 801c9a2:	461a      	mov	r2, r3
 801c9a4:	68f8      	ldr	r0, [r7, #12]
 801c9a6:	f000 fb21 	bl	801cfec <etharp_request_dst>
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d109      	bne.n	801c9c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c9b0:	79fa      	ldrb	r2, [r7, #7]
 801c9b2:	4911      	ldr	r1, [pc, #68]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c9b4:	4613      	mov	r3, r2
 801c9b6:	005b      	lsls	r3, r3, #1
 801c9b8:	4413      	add	r3, r2
 801c9ba:	00db      	lsls	r3, r3, #3
 801c9bc:	440b      	add	r3, r1
 801c9be:	3314      	adds	r3, #20
 801c9c0:	2203      	movs	r2, #3
 801c9c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801c9ca:	79fa      	ldrb	r2, [r7, #7]
 801c9cc:	4613      	mov	r3, r2
 801c9ce:	005b      	lsls	r3, r3, #1
 801c9d0:	4413      	add	r3, r2
 801c9d2:	00db      	lsls	r3, r3, #3
 801c9d4:	3308      	adds	r3, #8
 801c9d6:	4a08      	ldr	r2, [pc, #32]	@ (801c9f8 <etharp_output_to_arp_index+0x124>)
 801c9d8:	4413      	add	r3, r2
 801c9da:	3304      	adds	r3, #4
 801c9dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c9e0:	9200      	str	r2, [sp, #0]
 801c9e2:	460a      	mov	r2, r1
 801c9e4:	68b9      	ldr	r1, [r7, #8]
 801c9e6:	68f8      	ldr	r0, [r7, #12]
 801c9e8:	f001 ff68 	bl	801e8bc <ethernet_output>
 801c9ec:	4603      	mov	r3, r0
}
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	3710      	adds	r7, #16
 801c9f2:	46bd      	mov	sp, r7
 801c9f4:	bd80      	pop	{r7, pc}
 801c9f6:	bf00      	nop
 801c9f8:	20025408 	.word	0x20025408
 801c9fc:	080241c4 	.word	0x080241c4
 801ca00:	08024334 	.word	0x08024334
 801ca04:	0802423c 	.word	0x0802423c

0801ca08 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ca08:	b580      	push	{r7, lr}
 801ca0a:	b08a      	sub	sp, #40	@ 0x28
 801ca0c:	af02      	add	r7, sp, #8
 801ca0e:	60f8      	str	r0, [r7, #12]
 801ca10:	60b9      	str	r1, [r7, #8]
 801ca12:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d106      	bne.n	801ca2c <etharp_output+0x24>
 801ca1e:	4b76      	ldr	r3, [pc, #472]	@ (801cbf8 <etharp_output+0x1f0>)
 801ca20:	f240 321e 	movw	r2, #798	@ 0x31e
 801ca24:	4975      	ldr	r1, [pc, #468]	@ (801cbfc <etharp_output+0x1f4>)
 801ca26:	4876      	ldr	r0, [pc, #472]	@ (801cc00 <etharp_output+0x1f8>)
 801ca28:	f003 fc3e 	bl	80202a8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ca2c:	68bb      	ldr	r3, [r7, #8]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d106      	bne.n	801ca40 <etharp_output+0x38>
 801ca32:	4b71      	ldr	r3, [pc, #452]	@ (801cbf8 <etharp_output+0x1f0>)
 801ca34:	f240 321f 	movw	r2, #799	@ 0x31f
 801ca38:	4972      	ldr	r1, [pc, #456]	@ (801cc04 <etharp_output+0x1fc>)
 801ca3a:	4871      	ldr	r0, [pc, #452]	@ (801cc00 <etharp_output+0x1f8>)
 801ca3c:	f003 fc34 	bl	80202a8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d106      	bne.n	801ca54 <etharp_output+0x4c>
 801ca46:	4b6c      	ldr	r3, [pc, #432]	@ (801cbf8 <etharp_output+0x1f0>)
 801ca48:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801ca4c:	496e      	ldr	r1, [pc, #440]	@ (801cc08 <etharp_output+0x200>)
 801ca4e:	486c      	ldr	r0, [pc, #432]	@ (801cc00 <etharp_output+0x1f8>)
 801ca50:	f003 fc2a 	bl	80202a8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	68f9      	ldr	r1, [r7, #12]
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	f000 ffce 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 801ca60:	4603      	mov	r3, r0
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d002      	beq.n	801ca6c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ca66:	4b69      	ldr	r3, [pc, #420]	@ (801cc0c <etharp_output+0x204>)
 801ca68:	61fb      	str	r3, [r7, #28]
 801ca6a:	e0b5      	b.n	801cbd8 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ca74:	2be0      	cmp	r3, #224	@ 0xe0
 801ca76:	d118      	bne.n	801caaa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ca78:	2301      	movs	r3, #1
 801ca7a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ca80:	235e      	movs	r3, #94	@ 0x5e
 801ca82:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	3301      	adds	r3, #1
 801ca88:	781b      	ldrb	r3, [r3, #0]
 801ca8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ca8e:	b2db      	uxtb	r3, r3
 801ca90:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	3302      	adds	r3, #2
 801ca96:	781b      	ldrb	r3, [r3, #0]
 801ca98:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	3303      	adds	r3, #3
 801ca9e:	781b      	ldrb	r3, [r3, #0]
 801caa0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801caa2:	f107 0310 	add.w	r3, r7, #16
 801caa6:	61fb      	str	r3, [r7, #28]
 801caa8:	e096      	b.n	801cbd8 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	681a      	ldr	r2, [r3, #0]
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	3304      	adds	r3, #4
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	405a      	eors	r2, r3
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	3308      	adds	r3, #8
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	4013      	ands	r3, r2
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d012      	beq.n	801cae8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801cac8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801cacc:	4293      	cmp	r3, r2
 801cace:	d00b      	beq.n	801cae8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801cad0:	68fb      	ldr	r3, [r7, #12]
 801cad2:	330c      	adds	r3, #12
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d003      	beq.n	801cae2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801cada:	68fb      	ldr	r3, [r7, #12]
 801cadc:	330c      	adds	r3, #12
 801cade:	61bb      	str	r3, [r7, #24]
 801cae0:	e002      	b.n	801cae8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801cae2:	f06f 0303 	mvn.w	r3, #3
 801cae6:	e083      	b.n	801cbf0 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801cae8:	4b49      	ldr	r3, [pc, #292]	@ (801cc10 <etharp_output+0x208>)
 801caea:	781b      	ldrb	r3, [r3, #0]
 801caec:	4619      	mov	r1, r3
 801caee:	4a49      	ldr	r2, [pc, #292]	@ (801cc14 <etharp_output+0x20c>)
 801caf0:	460b      	mov	r3, r1
 801caf2:	005b      	lsls	r3, r3, #1
 801caf4:	440b      	add	r3, r1
 801caf6:	00db      	lsls	r3, r3, #3
 801caf8:	4413      	add	r3, r2
 801cafa:	3314      	adds	r3, #20
 801cafc:	781b      	ldrb	r3, [r3, #0]
 801cafe:	2b01      	cmp	r3, #1
 801cb00:	d92b      	bls.n	801cb5a <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cb02:	4b43      	ldr	r3, [pc, #268]	@ (801cc10 <etharp_output+0x208>)
 801cb04:	781b      	ldrb	r3, [r3, #0]
 801cb06:	4619      	mov	r1, r3
 801cb08:	4a42      	ldr	r2, [pc, #264]	@ (801cc14 <etharp_output+0x20c>)
 801cb0a:	460b      	mov	r3, r1
 801cb0c:	005b      	lsls	r3, r3, #1
 801cb0e:	440b      	add	r3, r1
 801cb10:	00db      	lsls	r3, r3, #3
 801cb12:	4413      	add	r3, r2
 801cb14:	3308      	adds	r3, #8
 801cb16:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801cb18:	68fa      	ldr	r2, [r7, #12]
 801cb1a:	429a      	cmp	r2, r3
 801cb1c:	d11d      	bne.n	801cb5a <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801cb1e:	69bb      	ldr	r3, [r7, #24]
 801cb20:	681a      	ldr	r2, [r3, #0]
 801cb22:	4b3b      	ldr	r3, [pc, #236]	@ (801cc10 <etharp_output+0x208>)
 801cb24:	781b      	ldrb	r3, [r3, #0]
 801cb26:	4618      	mov	r0, r3
 801cb28:	493a      	ldr	r1, [pc, #232]	@ (801cc14 <etharp_output+0x20c>)
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	005b      	lsls	r3, r3, #1
 801cb2e:	4403      	add	r3, r0
 801cb30:	00db      	lsls	r3, r3, #3
 801cb32:	440b      	add	r3, r1
 801cb34:	3304      	adds	r3, #4
 801cb36:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cb38:	429a      	cmp	r2, r3
 801cb3a:	d10e      	bne.n	801cb5a <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801cb3c:	4b36      	ldr	r3, [pc, #216]	@ (801cc18 <etharp_output+0x210>)
 801cb3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801cb40:	3301      	adds	r3, #1
 801cb42:	b29a      	uxth	r2, r3
 801cb44:	4b34      	ldr	r3, [pc, #208]	@ (801cc18 <etharp_output+0x210>)
 801cb46:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801cb48:	4b31      	ldr	r3, [pc, #196]	@ (801cc10 <etharp_output+0x208>)
 801cb4a:	781b      	ldrb	r3, [r3, #0]
 801cb4c:	461a      	mov	r2, r3
 801cb4e:	68b9      	ldr	r1, [r7, #8]
 801cb50:	68f8      	ldr	r0, [r7, #12]
 801cb52:	f7ff febf 	bl	801c8d4 <etharp_output_to_arp_index>
 801cb56:	4603      	mov	r3, r0
 801cb58:	e04a      	b.n	801cbf0 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	75fb      	strb	r3, [r7, #23]
 801cb5e:	e031      	b.n	801cbc4 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cb60:	7dfa      	ldrb	r2, [r7, #23]
 801cb62:	492c      	ldr	r1, [pc, #176]	@ (801cc14 <etharp_output+0x20c>)
 801cb64:	4613      	mov	r3, r2
 801cb66:	005b      	lsls	r3, r3, #1
 801cb68:	4413      	add	r3, r2
 801cb6a:	00db      	lsls	r3, r3, #3
 801cb6c:	440b      	add	r3, r1
 801cb6e:	3314      	adds	r3, #20
 801cb70:	781b      	ldrb	r3, [r3, #0]
 801cb72:	2b01      	cmp	r3, #1
 801cb74:	d923      	bls.n	801cbbe <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801cb76:	7dfa      	ldrb	r2, [r7, #23]
 801cb78:	4926      	ldr	r1, [pc, #152]	@ (801cc14 <etharp_output+0x20c>)
 801cb7a:	4613      	mov	r3, r2
 801cb7c:	005b      	lsls	r3, r3, #1
 801cb7e:	4413      	add	r3, r2
 801cb80:	00db      	lsls	r3, r3, #3
 801cb82:	440b      	add	r3, r1
 801cb84:	3308      	adds	r3, #8
 801cb86:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cb88:	68fa      	ldr	r2, [r7, #12]
 801cb8a:	429a      	cmp	r2, r3
 801cb8c:	d117      	bne.n	801cbbe <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801cb8e:	69bb      	ldr	r3, [r7, #24]
 801cb90:	6819      	ldr	r1, [r3, #0]
 801cb92:	7dfa      	ldrb	r2, [r7, #23]
 801cb94:	481f      	ldr	r0, [pc, #124]	@ (801cc14 <etharp_output+0x20c>)
 801cb96:	4613      	mov	r3, r2
 801cb98:	005b      	lsls	r3, r3, #1
 801cb9a:	4413      	add	r3, r2
 801cb9c:	00db      	lsls	r3, r3, #3
 801cb9e:	4403      	add	r3, r0
 801cba0:	3304      	adds	r3, #4
 801cba2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801cba4:	4299      	cmp	r1, r3
 801cba6:	d10a      	bne.n	801cbbe <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801cba8:	4a19      	ldr	r2, [pc, #100]	@ (801cc10 <etharp_output+0x208>)
 801cbaa:	7dfb      	ldrb	r3, [r7, #23]
 801cbac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801cbae:	7dfb      	ldrb	r3, [r7, #23]
 801cbb0:	461a      	mov	r2, r3
 801cbb2:	68b9      	ldr	r1, [r7, #8]
 801cbb4:	68f8      	ldr	r0, [r7, #12]
 801cbb6:	f7ff fe8d 	bl	801c8d4 <etharp_output_to_arp_index>
 801cbba:	4603      	mov	r3, r0
 801cbbc:	e018      	b.n	801cbf0 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cbbe:	7dfb      	ldrb	r3, [r7, #23]
 801cbc0:	3301      	adds	r3, #1
 801cbc2:	75fb      	strb	r3, [r7, #23]
 801cbc4:	7dfb      	ldrb	r3, [r7, #23]
 801cbc6:	2b09      	cmp	r3, #9
 801cbc8:	d9ca      	bls.n	801cb60 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801cbca:	68ba      	ldr	r2, [r7, #8]
 801cbcc:	69b9      	ldr	r1, [r7, #24]
 801cbce:	68f8      	ldr	r0, [r7, #12]
 801cbd0:	f000 f824 	bl	801cc1c <etharp_query>
 801cbd4:	4603      	mov	r3, r0
 801cbd6:	e00b      	b.n	801cbf0 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801cbde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801cbe2:	9300      	str	r3, [sp, #0]
 801cbe4:	69fb      	ldr	r3, [r7, #28]
 801cbe6:	68b9      	ldr	r1, [r7, #8]
 801cbe8:	68f8      	ldr	r0, [r7, #12]
 801cbea:	f001 fe67 	bl	801e8bc <ethernet_output>
 801cbee:	4603      	mov	r3, r0
}
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	3720      	adds	r7, #32
 801cbf4:	46bd      	mov	sp, r7
 801cbf6:	bd80      	pop	{r7, pc}
 801cbf8:	080241c4 	.word	0x080241c4
 801cbfc:	08024314 	.word	0x08024314
 801cc00:	0802423c 	.word	0x0802423c
 801cc04:	08024364 	.word	0x08024364
 801cc08:	08024304 	.word	0x08024304
 801cc0c:	08025004 	.word	0x08025004
 801cc10:	200254f8 	.word	0x200254f8
 801cc14:	20025408 	.word	0x20025408
 801cc18:	200252ac 	.word	0x200252ac

0801cc1c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801cc1c:	b580      	push	{r7, lr}
 801cc1e:	b08c      	sub	sp, #48	@ 0x30
 801cc20:	af02      	add	r7, sp, #8
 801cc22:	60f8      	str	r0, [r7, #12]
 801cc24:	60b9      	str	r1, [r7, #8]
 801cc26:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801cc28:	68fb      	ldr	r3, [r7, #12]
 801cc2a:	3326      	adds	r3, #38	@ 0x26
 801cc2c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801cc2e:	23ff      	movs	r3, #255	@ 0xff
 801cc30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801cc34:	2300      	movs	r3, #0
 801cc36:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801cc38:	68bb      	ldr	r3, [r7, #8]
 801cc3a:	681b      	ldr	r3, [r3, #0]
 801cc3c:	68f9      	ldr	r1, [r7, #12]
 801cc3e:	4618      	mov	r0, r3
 801cc40:	f000 fedc 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 801cc44:	4603      	mov	r3, r0
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d10c      	bne.n	801cc64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801cc4a:	68bb      	ldr	r3, [r7, #8]
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801cc52:	2be0      	cmp	r3, #224	@ 0xe0
 801cc54:	d006      	beq.n	801cc64 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801cc56:	68bb      	ldr	r3, [r7, #8]
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d003      	beq.n	801cc64 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801cc5c:	68bb      	ldr	r3, [r7, #8]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d102      	bne.n	801cc6a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cc64:	f06f 030f 	mvn.w	r3, #15
 801cc68:	e110      	b.n	801ce8c <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801cc6a:	68fa      	ldr	r2, [r7, #12]
 801cc6c:	2101      	movs	r1, #1
 801cc6e:	68b8      	ldr	r0, [r7, #8]
 801cc70:	f7ff fb3e 	bl	801c2f0 <etharp_find_entry>
 801cc74:	4603      	mov	r3, r0
 801cc76:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801cc78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	da0b      	bge.n	801cc98 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d005      	beq.n	801cc92 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801cc86:	4b83      	ldr	r3, [pc, #524]	@ (801ce94 <etharp_query+0x278>)
 801cc88:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cc8a:	3301      	adds	r3, #1
 801cc8c:	b29a      	uxth	r2, r3
 801cc8e:	4b81      	ldr	r3, [pc, #516]	@ (801ce94 <etharp_query+0x278>)
 801cc90:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801cc92:	8a7b      	ldrh	r3, [r7, #18]
 801cc94:	b25b      	sxtb	r3, r3
 801cc96:	e0f9      	b.n	801ce8c <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801cc98:	8a7b      	ldrh	r3, [r7, #18]
 801cc9a:	2b7e      	cmp	r3, #126	@ 0x7e
 801cc9c:	d906      	bls.n	801ccac <etharp_query+0x90>
 801cc9e:	4b7e      	ldr	r3, [pc, #504]	@ (801ce98 <etharp_query+0x27c>)
 801cca0:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801cca4:	497d      	ldr	r1, [pc, #500]	@ (801ce9c <etharp_query+0x280>)
 801cca6:	487e      	ldr	r0, [pc, #504]	@ (801cea0 <etharp_query+0x284>)
 801cca8:	f003 fafe 	bl	80202a8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ccac:	8a7b      	ldrh	r3, [r7, #18]
 801ccae:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ccb0:	7c7a      	ldrb	r2, [r7, #17]
 801ccb2:	497c      	ldr	r1, [pc, #496]	@ (801cea4 <etharp_query+0x288>)
 801ccb4:	4613      	mov	r3, r2
 801ccb6:	005b      	lsls	r3, r3, #1
 801ccb8:	4413      	add	r3, r2
 801ccba:	00db      	lsls	r3, r3, #3
 801ccbc:	440b      	add	r3, r1
 801ccbe:	3314      	adds	r3, #20
 801ccc0:	781b      	ldrb	r3, [r3, #0]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d115      	bne.n	801ccf2 <etharp_query+0xd6>
    is_new_entry = 1;
 801ccc6:	2301      	movs	r3, #1
 801ccc8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ccca:	7c7a      	ldrb	r2, [r7, #17]
 801cccc:	4975      	ldr	r1, [pc, #468]	@ (801cea4 <etharp_query+0x288>)
 801ccce:	4613      	mov	r3, r2
 801ccd0:	005b      	lsls	r3, r3, #1
 801ccd2:	4413      	add	r3, r2
 801ccd4:	00db      	lsls	r3, r3, #3
 801ccd6:	440b      	add	r3, r1
 801ccd8:	3314      	adds	r3, #20
 801ccda:	2201      	movs	r2, #1
 801ccdc:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ccde:	7c7a      	ldrb	r2, [r7, #17]
 801cce0:	4970      	ldr	r1, [pc, #448]	@ (801cea4 <etharp_query+0x288>)
 801cce2:	4613      	mov	r3, r2
 801cce4:	005b      	lsls	r3, r3, #1
 801cce6:	4413      	add	r3, r2
 801cce8:	00db      	lsls	r3, r3, #3
 801ccea:	440b      	add	r3, r1
 801ccec:	3308      	adds	r3, #8
 801ccee:	68fa      	ldr	r2, [r7, #12]
 801ccf0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ccf2:	7c7a      	ldrb	r2, [r7, #17]
 801ccf4:	496b      	ldr	r1, [pc, #428]	@ (801cea4 <etharp_query+0x288>)
 801ccf6:	4613      	mov	r3, r2
 801ccf8:	005b      	lsls	r3, r3, #1
 801ccfa:	4413      	add	r3, r2
 801ccfc:	00db      	lsls	r3, r3, #3
 801ccfe:	440b      	add	r3, r1
 801cd00:	3314      	adds	r3, #20
 801cd02:	781b      	ldrb	r3, [r3, #0]
 801cd04:	2b01      	cmp	r3, #1
 801cd06:	d011      	beq.n	801cd2c <etharp_query+0x110>
 801cd08:	7c7a      	ldrb	r2, [r7, #17]
 801cd0a:	4966      	ldr	r1, [pc, #408]	@ (801cea4 <etharp_query+0x288>)
 801cd0c:	4613      	mov	r3, r2
 801cd0e:	005b      	lsls	r3, r3, #1
 801cd10:	4413      	add	r3, r2
 801cd12:	00db      	lsls	r3, r3, #3
 801cd14:	440b      	add	r3, r1
 801cd16:	3314      	adds	r3, #20
 801cd18:	781b      	ldrb	r3, [r3, #0]
 801cd1a:	2b01      	cmp	r3, #1
 801cd1c:	d806      	bhi.n	801cd2c <etharp_query+0x110>
 801cd1e:	4b5e      	ldr	r3, [pc, #376]	@ (801ce98 <etharp_query+0x27c>)
 801cd20:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801cd24:	4960      	ldr	r1, [pc, #384]	@ (801cea8 <etharp_query+0x28c>)
 801cd26:	485e      	ldr	r0, [pc, #376]	@ (801cea0 <etharp_query+0x284>)
 801cd28:	f003 fabe 	bl	80202a8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801cd2c:	6a3b      	ldr	r3, [r7, #32]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d102      	bne.n	801cd38 <etharp_query+0x11c>
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d10c      	bne.n	801cd52 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801cd38:	68b9      	ldr	r1, [r7, #8]
 801cd3a:	68f8      	ldr	r0, [r7, #12]
 801cd3c:	f000 f978 	bl	801d030 <etharp_request>
 801cd40:	4603      	mov	r3, r0
 801cd42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d102      	bne.n	801cd52 <etharp_query+0x136>
      return result;
 801cd4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cd50:	e09c      	b.n	801ce8c <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d106      	bne.n	801cd66 <etharp_query+0x14a>
 801cd58:	4b4f      	ldr	r3, [pc, #316]	@ (801ce98 <etharp_query+0x27c>)
 801cd5a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801cd5e:	4953      	ldr	r1, [pc, #332]	@ (801ceac <etharp_query+0x290>)
 801cd60:	484f      	ldr	r0, [pc, #316]	@ (801cea0 <etharp_query+0x284>)
 801cd62:	f003 faa1 	bl	80202a8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801cd66:	7c7a      	ldrb	r2, [r7, #17]
 801cd68:	494e      	ldr	r1, [pc, #312]	@ (801cea4 <etharp_query+0x288>)
 801cd6a:	4613      	mov	r3, r2
 801cd6c:	005b      	lsls	r3, r3, #1
 801cd6e:	4413      	add	r3, r2
 801cd70:	00db      	lsls	r3, r3, #3
 801cd72:	440b      	add	r3, r1
 801cd74:	3314      	adds	r3, #20
 801cd76:	781b      	ldrb	r3, [r3, #0]
 801cd78:	2b01      	cmp	r3, #1
 801cd7a:	d917      	bls.n	801cdac <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801cd7c:	4a4c      	ldr	r2, [pc, #304]	@ (801ceb0 <etharp_query+0x294>)
 801cd7e:	7c7b      	ldrb	r3, [r7, #17]
 801cd80:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801cd82:	7c7a      	ldrb	r2, [r7, #17]
 801cd84:	4613      	mov	r3, r2
 801cd86:	005b      	lsls	r3, r3, #1
 801cd88:	4413      	add	r3, r2
 801cd8a:	00db      	lsls	r3, r3, #3
 801cd8c:	3308      	adds	r3, #8
 801cd8e:	4a45      	ldr	r2, [pc, #276]	@ (801cea4 <etharp_query+0x288>)
 801cd90:	4413      	add	r3, r2
 801cd92:	3304      	adds	r3, #4
 801cd94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801cd98:	9200      	str	r2, [sp, #0]
 801cd9a:	697a      	ldr	r2, [r7, #20]
 801cd9c:	6879      	ldr	r1, [r7, #4]
 801cd9e:	68f8      	ldr	r0, [r7, #12]
 801cda0:	f001 fd8c 	bl	801e8bc <ethernet_output>
 801cda4:	4603      	mov	r3, r0
 801cda6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cdaa:	e06d      	b.n	801ce88 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cdac:	7c7a      	ldrb	r2, [r7, #17]
 801cdae:	493d      	ldr	r1, [pc, #244]	@ (801cea4 <etharp_query+0x288>)
 801cdb0:	4613      	mov	r3, r2
 801cdb2:	005b      	lsls	r3, r3, #1
 801cdb4:	4413      	add	r3, r2
 801cdb6:	00db      	lsls	r3, r3, #3
 801cdb8:	440b      	add	r3, r1
 801cdba:	3314      	adds	r3, #20
 801cdbc:	781b      	ldrb	r3, [r3, #0]
 801cdbe:	2b01      	cmp	r3, #1
 801cdc0:	d162      	bne.n	801ce88 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cdca:	e01c      	b.n	801ce06 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801cdcc:	69fb      	ldr	r3, [r7, #28]
 801cdce:	895a      	ldrh	r2, [r3, #10]
 801cdd0:	69fb      	ldr	r3, [r7, #28]
 801cdd2:	891b      	ldrh	r3, [r3, #8]
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	d10a      	bne.n	801cdee <etharp_query+0x1d2>
 801cdd8:	69fb      	ldr	r3, [r7, #28]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d006      	beq.n	801cdee <etharp_query+0x1d2>
 801cde0:	4b2d      	ldr	r3, [pc, #180]	@ (801ce98 <etharp_query+0x27c>)
 801cde2:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801cde6:	4933      	ldr	r1, [pc, #204]	@ (801ceb4 <etharp_query+0x298>)
 801cde8:	482d      	ldr	r0, [pc, #180]	@ (801cea0 <etharp_query+0x284>)
 801cdea:	f003 fa5d 	bl	80202a8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801cdee:	69fb      	ldr	r3, [r7, #28]
 801cdf0:	7b1b      	ldrb	r3, [r3, #12]
 801cdf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d002      	beq.n	801ce00 <etharp_query+0x1e4>
        copy_needed = 1;
 801cdfa:	2301      	movs	r3, #1
 801cdfc:	61bb      	str	r3, [r7, #24]
        break;
 801cdfe:	e005      	b.n	801ce0c <etharp_query+0x1f0>
      }
      p = p->next;
 801ce00:	69fb      	ldr	r3, [r7, #28]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ce06:	69fb      	ldr	r3, [r7, #28]
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d1df      	bne.n	801cdcc <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801ce0c:	69bb      	ldr	r3, [r7, #24]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d007      	beq.n	801ce22 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ce12:	687a      	ldr	r2, [r7, #4]
 801ce14:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801ce18:	200e      	movs	r0, #14
 801ce1a:	f7f8 fa0d 	bl	8015238 <pbuf_clone>
 801ce1e:	61f8      	str	r0, [r7, #28]
 801ce20:	e004      	b.n	801ce2c <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ce26:	69f8      	ldr	r0, [r7, #28]
 801ce28:	f7f8 f834 	bl	8014e94 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ce2c:	69fb      	ldr	r3, [r7, #28]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d021      	beq.n	801ce76 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ce32:	7c7a      	ldrb	r2, [r7, #17]
 801ce34:	491b      	ldr	r1, [pc, #108]	@ (801cea4 <etharp_query+0x288>)
 801ce36:	4613      	mov	r3, r2
 801ce38:	005b      	lsls	r3, r3, #1
 801ce3a:	4413      	add	r3, r2
 801ce3c:	00db      	lsls	r3, r3, #3
 801ce3e:	440b      	add	r3, r1
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d00a      	beq.n	801ce5c <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ce46:	7c7a      	ldrb	r2, [r7, #17]
 801ce48:	4916      	ldr	r1, [pc, #88]	@ (801cea4 <etharp_query+0x288>)
 801ce4a:	4613      	mov	r3, r2
 801ce4c:	005b      	lsls	r3, r3, #1
 801ce4e:	4413      	add	r3, r2
 801ce50:	00db      	lsls	r3, r3, #3
 801ce52:	440b      	add	r3, r1
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	4618      	mov	r0, r3
 801ce58:	f7f7 ff76 	bl	8014d48 <pbuf_free>
      }
      arp_table[i].q = p;
 801ce5c:	7c7a      	ldrb	r2, [r7, #17]
 801ce5e:	4911      	ldr	r1, [pc, #68]	@ (801cea4 <etharp_query+0x288>)
 801ce60:	4613      	mov	r3, r2
 801ce62:	005b      	lsls	r3, r3, #1
 801ce64:	4413      	add	r3, r2
 801ce66:	00db      	lsls	r3, r3, #3
 801ce68:	440b      	add	r3, r1
 801ce6a:	69fa      	ldr	r2, [r7, #28]
 801ce6c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ce6e:	2300      	movs	r3, #0
 801ce70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ce74:	e008      	b.n	801ce88 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801ce76:	4b07      	ldr	r3, [pc, #28]	@ (801ce94 <etharp_query+0x278>)
 801ce78:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ce7a:	3301      	adds	r3, #1
 801ce7c:	b29a      	uxth	r2, r3
 801ce7e:	4b05      	ldr	r3, [pc, #20]	@ (801ce94 <etharp_query+0x278>)
 801ce80:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ce82:	23ff      	movs	r3, #255	@ 0xff
 801ce84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ce88:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	3728      	adds	r7, #40	@ 0x28
 801ce90:	46bd      	mov	sp, r7
 801ce92:	bd80      	pop	{r7, pc}
 801ce94:	200252ac 	.word	0x200252ac
 801ce98:	080241c4 	.word	0x080241c4
 801ce9c:	08024370 	.word	0x08024370
 801cea0:	0802423c 	.word	0x0802423c
 801cea4:	20025408 	.word	0x20025408
 801cea8:	08024380 	.word	0x08024380
 801ceac:	08024364 	.word	0x08024364
 801ceb0:	200254f8 	.word	0x200254f8
 801ceb4:	080243a8 	.word	0x080243a8

0801ceb8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b08a      	sub	sp, #40	@ 0x28
 801cebc:	af02      	add	r7, sp, #8
 801cebe:	60f8      	str	r0, [r7, #12]
 801cec0:	60b9      	str	r1, [r7, #8]
 801cec2:	607a      	str	r2, [r7, #4]
 801cec4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801cec6:	2300      	movs	r3, #0
 801cec8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d106      	bne.n	801cede <etharp_raw+0x26>
 801ced0:	4b40      	ldr	r3, [pc, #256]	@ (801cfd4 <etharp_raw+0x11c>)
 801ced2:	f240 4257 	movw	r2, #1111	@ 0x457
 801ced6:	4940      	ldr	r1, [pc, #256]	@ (801cfd8 <etharp_raw+0x120>)
 801ced8:	4840      	ldr	r0, [pc, #256]	@ (801cfdc <etharp_raw+0x124>)
 801ceda:	f003 f9e5 	bl	80202a8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801cede:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cee2:	211c      	movs	r1, #28
 801cee4:	200e      	movs	r0, #14
 801cee6:	f7f7 fc4b 	bl	8014780 <pbuf_alloc>
 801ceea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ceec:	69bb      	ldr	r3, [r7, #24]
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d108      	bne.n	801cf04 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801cef2:	4b3b      	ldr	r3, [pc, #236]	@ (801cfe0 <etharp_raw+0x128>)
 801cef4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cef6:	3301      	adds	r3, #1
 801cef8:	b29a      	uxth	r2, r3
 801cefa:	4b39      	ldr	r3, [pc, #228]	@ (801cfe0 <etharp_raw+0x128>)
 801cefc:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801cefe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf02:	e063      	b.n	801cfcc <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801cf04:	69bb      	ldr	r3, [r7, #24]
 801cf06:	895b      	ldrh	r3, [r3, #10]
 801cf08:	2b1b      	cmp	r3, #27
 801cf0a:	d806      	bhi.n	801cf1a <etharp_raw+0x62>
 801cf0c:	4b31      	ldr	r3, [pc, #196]	@ (801cfd4 <etharp_raw+0x11c>)
 801cf0e:	f240 4262 	movw	r2, #1122	@ 0x462
 801cf12:	4934      	ldr	r1, [pc, #208]	@ (801cfe4 <etharp_raw+0x12c>)
 801cf14:	4831      	ldr	r0, [pc, #196]	@ (801cfdc <etharp_raw+0x124>)
 801cf16:	f003 f9c7 	bl	80202a8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801cf1a:	69bb      	ldr	r3, [r7, #24]
 801cf1c:	685b      	ldr	r3, [r3, #4]
 801cf1e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801cf20:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801cf22:	4618      	mov	r0, r3
 801cf24:	f7f6 fa52 	bl	80133cc <lwip_htons>
 801cf28:	4603      	mov	r3, r0
 801cf2a:	461a      	mov	r2, r3
 801cf2c:	697b      	ldr	r3, [r7, #20]
 801cf2e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cf36:	2b06      	cmp	r3, #6
 801cf38:	d006      	beq.n	801cf48 <etharp_raw+0x90>
 801cf3a:	4b26      	ldr	r3, [pc, #152]	@ (801cfd4 <etharp_raw+0x11c>)
 801cf3c:	f240 4269 	movw	r2, #1129	@ 0x469
 801cf40:	4929      	ldr	r1, [pc, #164]	@ (801cfe8 <etharp_raw+0x130>)
 801cf42:	4826      	ldr	r0, [pc, #152]	@ (801cfdc <etharp_raw+0x124>)
 801cf44:	f003 f9b0 	bl	80202a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801cf48:	697b      	ldr	r3, [r7, #20]
 801cf4a:	3308      	adds	r3, #8
 801cf4c:	2206      	movs	r2, #6
 801cf4e:	6839      	ldr	r1, [r7, #0]
 801cf50:	4618      	mov	r0, r3
 801cf52:	f003 fbd4 	bl	80206fe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801cf56:	697b      	ldr	r3, [r7, #20]
 801cf58:	3312      	adds	r3, #18
 801cf5a:	2206      	movs	r2, #6
 801cf5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cf5e:	4618      	mov	r0, r3
 801cf60:	f003 fbcd 	bl	80206fe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801cf64:	697b      	ldr	r3, [r7, #20]
 801cf66:	330e      	adds	r3, #14
 801cf68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cf6a:	6812      	ldr	r2, [r2, #0]
 801cf6c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801cf6e:	697b      	ldr	r3, [r7, #20]
 801cf70:	3318      	adds	r3, #24
 801cf72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cf74:	6812      	ldr	r2, [r2, #0]
 801cf76:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801cf78:	697b      	ldr	r3, [r7, #20]
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	701a      	strb	r2, [r3, #0]
 801cf7e:	2200      	movs	r2, #0
 801cf80:	f042 0201 	orr.w	r2, r2, #1
 801cf84:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801cf86:	697b      	ldr	r3, [r7, #20]
 801cf88:	2200      	movs	r2, #0
 801cf8a:	f042 0208 	orr.w	r2, r2, #8
 801cf8e:	709a      	strb	r2, [r3, #2]
 801cf90:	2200      	movs	r2, #0
 801cf92:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801cf94:	697b      	ldr	r3, [r7, #20]
 801cf96:	2206      	movs	r2, #6
 801cf98:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801cf9a:	697b      	ldr	r3, [r7, #20]
 801cf9c:	2204      	movs	r2, #4
 801cf9e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801cfa0:	f640 0306 	movw	r3, #2054	@ 0x806
 801cfa4:	9300      	str	r3, [sp, #0]
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	68ba      	ldr	r2, [r7, #8]
 801cfaa:	69b9      	ldr	r1, [r7, #24]
 801cfac:	68f8      	ldr	r0, [r7, #12]
 801cfae:	f001 fc85 	bl	801e8bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801cfb2:	4b0b      	ldr	r3, [pc, #44]	@ (801cfe0 <etharp_raw+0x128>)
 801cfb4:	8b1b      	ldrh	r3, [r3, #24]
 801cfb6:	3301      	adds	r3, #1
 801cfb8:	b29a      	uxth	r2, r3
 801cfba:	4b09      	ldr	r3, [pc, #36]	@ (801cfe0 <etharp_raw+0x128>)
 801cfbc:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801cfbe:	69b8      	ldr	r0, [r7, #24]
 801cfc0:	f7f7 fec2 	bl	8014d48 <pbuf_free>
  p = NULL;
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801cfc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cfcc:	4618      	mov	r0, r3
 801cfce:	3720      	adds	r7, #32
 801cfd0:	46bd      	mov	sp, r7
 801cfd2:	bd80      	pop	{r7, pc}
 801cfd4:	080241c4 	.word	0x080241c4
 801cfd8:	08024314 	.word	0x08024314
 801cfdc:	0802423c 	.word	0x0802423c
 801cfe0:	200252ac 	.word	0x200252ac
 801cfe4:	080243c4 	.word	0x080243c4
 801cfe8:	080243f8 	.word	0x080243f8

0801cfec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801cfec:	b580      	push	{r7, lr}
 801cfee:	b088      	sub	sp, #32
 801cff0:	af04      	add	r7, sp, #16
 801cff2:	60f8      	str	r0, [r7, #12]
 801cff4:	60b9      	str	r1, [r7, #8]
 801cff6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d008:	2201      	movs	r2, #1
 801d00a:	9203      	str	r2, [sp, #12]
 801d00c:	68ba      	ldr	r2, [r7, #8]
 801d00e:	9202      	str	r2, [sp, #8]
 801d010:	4a06      	ldr	r2, [pc, #24]	@ (801d02c <etharp_request_dst+0x40>)
 801d012:	9201      	str	r2, [sp, #4]
 801d014:	9300      	str	r3, [sp, #0]
 801d016:	4603      	mov	r3, r0
 801d018:	687a      	ldr	r2, [r7, #4]
 801d01a:	68f8      	ldr	r0, [r7, #12]
 801d01c:	f7ff ff4c 	bl	801ceb8 <etharp_raw>
 801d020:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d022:	4618      	mov	r0, r3
 801d024:	3710      	adds	r7, #16
 801d026:	46bd      	mov	sp, r7
 801d028:	bd80      	pop	{r7, pc}
 801d02a:	bf00      	nop
 801d02c:	0802500c 	.word	0x0802500c

0801d030 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d030:	b580      	push	{r7, lr}
 801d032:	b082      	sub	sp, #8
 801d034:	af00      	add	r7, sp, #0
 801d036:	6078      	str	r0, [r7, #4]
 801d038:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d03a:	4a05      	ldr	r2, [pc, #20]	@ (801d050 <etharp_request+0x20>)
 801d03c:	6839      	ldr	r1, [r7, #0]
 801d03e:	6878      	ldr	r0, [r7, #4]
 801d040:	f7ff ffd4 	bl	801cfec <etharp_request_dst>
 801d044:	4603      	mov	r3, r0
}
 801d046:	4618      	mov	r0, r3
 801d048:	3708      	adds	r7, #8
 801d04a:	46bd      	mov	sp, r7
 801d04c:	bd80      	pop	{r7, pc}
 801d04e:	bf00      	nop
 801d050:	08025004 	.word	0x08025004

0801d054 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d054:	b580      	push	{r7, lr}
 801d056:	b08e      	sub	sp, #56	@ 0x38
 801d058:	af04      	add	r7, sp, #16
 801d05a:	6078      	str	r0, [r7, #4]
 801d05c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801d05e:	4b92      	ldr	r3, [pc, #584]	@ (801d2a8 <icmp_input+0x254>)
 801d060:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801d064:	3301      	adds	r3, #1
 801d066:	b29a      	uxth	r2, r3
 801d068:	4b8f      	ldr	r3, [pc, #572]	@ (801d2a8 <icmp_input+0x254>)
 801d06a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d06e:	4b8f      	ldr	r3, [pc, #572]	@ (801d2ac <icmp_input+0x258>)
 801d070:	689b      	ldr	r3, [r3, #8]
 801d072:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d076:	781b      	ldrb	r3, [r3, #0]
 801d078:	f003 030f 	and.w	r3, r3, #15
 801d07c:	b2db      	uxtb	r3, r3
 801d07e:	009b      	lsls	r3, r3, #2
 801d080:	b2db      	uxtb	r3, r3
 801d082:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801d084:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d086:	2b13      	cmp	r3, #19
 801d088:	f240 80e6 	bls.w	801d258 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	895b      	ldrh	r3, [r3, #10]
 801d090:	2b03      	cmp	r3, #3
 801d092:	f240 80e3 	bls.w	801d25c <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	685b      	ldr	r3, [r3, #4]
 801d09a:	781b      	ldrb	r3, [r3, #0]
 801d09c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d0a0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	f000 80d0 	beq.w	801d24a <icmp_input+0x1f6>
 801d0aa:	2b08      	cmp	r3, #8
 801d0ac:	f040 80bc 	bne.w	801d228 <icmp_input+0x1d4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d0b0:	4b7f      	ldr	r3, [pc, #508]	@ (801d2b0 <icmp_input+0x25c>)
 801d0b2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d0b4:	4b7d      	ldr	r3, [pc, #500]	@ (801d2ac <icmp_input+0x258>)
 801d0b6:	695b      	ldr	r3, [r3, #20]
 801d0b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d0bc:	2be0      	cmp	r3, #224	@ 0xe0
 801d0be:	f000 80dc 	beq.w	801d27a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d0c2:	4b7a      	ldr	r3, [pc, #488]	@ (801d2ac <icmp_input+0x258>)
 801d0c4:	695b      	ldr	r3, [r3, #20]
 801d0c6:	4a79      	ldr	r2, [pc, #484]	@ (801d2ac <icmp_input+0x258>)
 801d0c8:	6812      	ldr	r2, [r2, #0]
 801d0ca:	4611      	mov	r1, r2
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	f000 fc95 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 801d0d2:	4603      	mov	r3, r0
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	f040 80d2 	bne.w	801d27e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	891b      	ldrh	r3, [r3, #8]
 801d0de:	2b07      	cmp	r3, #7
 801d0e0:	f240 80be 	bls.w	801d260 <icmp_input+0x20c>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d0e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d0e6:	330e      	adds	r3, #14
 801d0e8:	4619      	mov	r1, r3
 801d0ea:	6878      	ldr	r0, [r7, #4]
 801d0ec:	f7f7 fd96 	bl	8014c1c <pbuf_add_header>
 801d0f0:	4603      	mov	r3, r0
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d04b      	beq.n	801d18e <icmp_input+0x13a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	891a      	ldrh	r2, [r3, #8]
 801d0fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d0fc:	4413      	add	r3, r2
 801d0fe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	891b      	ldrh	r3, [r3, #8]
 801d104:	8b7a      	ldrh	r2, [r7, #26]
 801d106:	429a      	cmp	r2, r3
 801d108:	f0c0 80bb 	bcc.w	801d282 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d10c:	8b7b      	ldrh	r3, [r7, #26]
 801d10e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d112:	4619      	mov	r1, r3
 801d114:	200e      	movs	r0, #14
 801d116:	f7f7 fb33 	bl	8014780 <pbuf_alloc>
 801d11a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d11c:	697b      	ldr	r3, [r7, #20]
 801d11e:	2b00      	cmp	r3, #0
 801d120:	f000 80b1 	beq.w	801d286 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d124:	697b      	ldr	r3, [r7, #20]
 801d126:	895b      	ldrh	r3, [r3, #10]
 801d128:	461a      	mov	r2, r3
 801d12a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d12c:	3308      	adds	r3, #8
 801d12e:	429a      	cmp	r2, r3
 801d130:	d203      	bcs.n	801d13a <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d132:	6978      	ldr	r0, [r7, #20]
 801d134:	f7f7 fe08 	bl	8014d48 <pbuf_free>
          goto icmperr;
 801d138:	e0a6      	b.n	801d288 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d13a:	697b      	ldr	r3, [r7, #20]
 801d13c:	685b      	ldr	r3, [r3, #4]
 801d13e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801d140:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d142:	4618      	mov	r0, r3
 801d144:	f003 fadb 	bl	80206fe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d148:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d14a:	4619      	mov	r1, r3
 801d14c:	6978      	ldr	r0, [r7, #20]
 801d14e:	f7f7 fd75 	bl	8014c3c <pbuf_remove_header>
 801d152:	4603      	mov	r3, r0
 801d154:	2b00      	cmp	r3, #0
 801d156:	d009      	beq.n	801d16c <icmp_input+0x118>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d158:	4b56      	ldr	r3, [pc, #344]	@ (801d2b4 <icmp_input+0x260>)
 801d15a:	22b6      	movs	r2, #182	@ 0xb6
 801d15c:	4956      	ldr	r1, [pc, #344]	@ (801d2b8 <icmp_input+0x264>)
 801d15e:	4857      	ldr	r0, [pc, #348]	@ (801d2bc <icmp_input+0x268>)
 801d160:	f003 f8a2 	bl	80202a8 <iprintf>
          pbuf_free(r);
 801d164:	6978      	ldr	r0, [r7, #20]
 801d166:	f7f7 fdef 	bl	8014d48 <pbuf_free>
          goto icmperr;
 801d16a:	e08d      	b.n	801d288 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d16c:	6879      	ldr	r1, [r7, #4]
 801d16e:	6978      	ldr	r0, [r7, #20]
 801d170:	f7f7 ff1e 	bl	8014fb0 <pbuf_copy>
 801d174:	4603      	mov	r3, r0
 801d176:	2b00      	cmp	r3, #0
 801d178:	d003      	beq.n	801d182 <icmp_input+0x12e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d17a:	6978      	ldr	r0, [r7, #20]
 801d17c:	f7f7 fde4 	bl	8014d48 <pbuf_free>
          goto icmperr;
 801d180:	e082      	b.n	801d288 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 801d182:	6878      	ldr	r0, [r7, #4]
 801d184:	f7f7 fde0 	bl	8014d48 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d188:	697b      	ldr	r3, [r7, #20]
 801d18a:	607b      	str	r3, [r7, #4]
 801d18c:	e00f      	b.n	801d1ae <icmp_input+0x15a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d18e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d190:	330e      	adds	r3, #14
 801d192:	4619      	mov	r1, r3
 801d194:	6878      	ldr	r0, [r7, #4]
 801d196:	f7f7 fd51 	bl	8014c3c <pbuf_remove_header>
 801d19a:	4603      	mov	r3, r0
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	d006      	beq.n	801d1ae <icmp_input+0x15a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d1a0:	4b44      	ldr	r3, [pc, #272]	@ (801d2b4 <icmp_input+0x260>)
 801d1a2:	22c7      	movs	r2, #199	@ 0xc7
 801d1a4:	4946      	ldr	r1, [pc, #280]	@ (801d2c0 <icmp_input+0x26c>)
 801d1a6:	4845      	ldr	r0, [pc, #276]	@ (801d2bc <icmp_input+0x268>)
 801d1a8:	f003 f87e 	bl	80202a8 <iprintf>
          goto icmperr;
 801d1ac:	e06c      	b.n	801d288 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	685b      	ldr	r3, [r3, #4]
 801d1b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d1b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d1b6:	4619      	mov	r1, r3
 801d1b8:	6878      	ldr	r0, [r7, #4]
 801d1ba:	f7f7 fd2f 	bl	8014c1c <pbuf_add_header>
 801d1be:	4603      	mov	r3, r0
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d144      	bne.n	801d24e <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	685b      	ldr	r3, [r3, #4]
 801d1c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d1ca:	69fb      	ldr	r3, [r7, #28]
 801d1cc:	681a      	ldr	r2, [r3, #0]
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d1d2:	4b36      	ldr	r3, [pc, #216]	@ (801d2ac <icmp_input+0x258>)
 801d1d4:	691a      	ldr	r2, [r3, #16]
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d1da:	693b      	ldr	r3, [r7, #16]
 801d1dc:	2200      	movs	r2, #0
 801d1de:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d1e0:	693b      	ldr	r3, [r7, #16]
 801d1e2:	2200      	movs	r2, #0
 801d1e4:	709a      	strb	r2, [r3, #2]
 801d1e6:	2200      	movs	r2, #0
 801d1e8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d1ea:	68fb      	ldr	r3, [r7, #12]
 801d1ec:	22ff      	movs	r2, #255	@ 0xff
 801d1ee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	2200      	movs	r2, #0
 801d1f4:	729a      	strb	r2, [r3, #10]
 801d1f6:	2200      	movs	r2, #0
 801d1f8:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 801d1fa:	4b2b      	ldr	r3, [pc, #172]	@ (801d2a8 <icmp_input+0x254>)
 801d1fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d200:	3301      	adds	r3, #1
 801d202:	b29a      	uxth	r2, r3
 801d204:	4b28      	ldr	r3, [pc, #160]	@ (801d2a8 <icmp_input+0x254>)
 801d206:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	9302      	str	r3, [sp, #8]
 801d20e:	2301      	movs	r3, #1
 801d210:	9301      	str	r3, [sp, #4]
 801d212:	2300      	movs	r3, #0
 801d214:	9300      	str	r3, [sp, #0]
 801d216:	23ff      	movs	r3, #255	@ 0xff
 801d218:	2200      	movs	r2, #0
 801d21a:	69f9      	ldr	r1, [r7, #28]
 801d21c:	6878      	ldr	r0, [r7, #4]
 801d21e:	f000 fafb 	bl	801d818 <ip4_output_if>
 801d222:	4603      	mov	r3, r0
 801d224:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d226:	e012      	b.n	801d24e <icmp_input+0x1fa>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801d228:	4b1f      	ldr	r3, [pc, #124]	@ (801d2a8 <icmp_input+0x254>)
 801d22a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801d22e:	3301      	adds	r3, #1
 801d230:	b29a      	uxth	r2, r3
 801d232:	4b1d      	ldr	r3, [pc, #116]	@ (801d2a8 <icmp_input+0x254>)
 801d234:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801d238:	4b1b      	ldr	r3, [pc, #108]	@ (801d2a8 <icmp_input+0x254>)
 801d23a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d23e:	3301      	adds	r3, #1
 801d240:	b29a      	uxth	r2, r3
 801d242:	4b19      	ldr	r3, [pc, #100]	@ (801d2a8 <icmp_input+0x254>)
 801d244:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801d248:	e002      	b.n	801d250 <icmp_input+0x1fc>
      break;
 801d24a:	bf00      	nop
 801d24c:	e000      	b.n	801d250 <icmp_input+0x1fc>
      break;
 801d24e:	bf00      	nop
  }
  pbuf_free(p);
 801d250:	6878      	ldr	r0, [r7, #4]
 801d252:	f7f7 fd79 	bl	8014d48 <pbuf_free>
  return;
 801d256:	e023      	b.n	801d2a0 <icmp_input+0x24c>
    goto lenerr;
 801d258:	bf00      	nop
 801d25a:	e002      	b.n	801d262 <icmp_input+0x20e>
    goto lenerr;
 801d25c:	bf00      	nop
 801d25e:	e000      	b.n	801d262 <icmp_input+0x20e>
        goto lenerr;
 801d260:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d262:	6878      	ldr	r0, [r7, #4]
 801d264:	f7f7 fd70 	bl	8014d48 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801d268:	4b0f      	ldr	r3, [pc, #60]	@ (801d2a8 <icmp_input+0x254>)
 801d26a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801d26e:	3301      	adds	r3, #1
 801d270:	b29a      	uxth	r2, r3
 801d272:	4b0d      	ldr	r3, [pc, #52]	@ (801d2a8 <icmp_input+0x254>)
 801d274:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d278:	e012      	b.n	801d2a0 <icmp_input+0x24c>
        goto icmperr;
 801d27a:	bf00      	nop
 801d27c:	e004      	b.n	801d288 <icmp_input+0x234>
        goto icmperr;
 801d27e:	bf00      	nop
 801d280:	e002      	b.n	801d288 <icmp_input+0x234>
          goto icmperr;
 801d282:	bf00      	nop
 801d284:	e000      	b.n	801d288 <icmp_input+0x234>
          goto icmperr;
 801d286:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d288:	6878      	ldr	r0, [r7, #4]
 801d28a:	f7f7 fd5d 	bl	8014d48 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801d28e:	4b06      	ldr	r3, [pc, #24]	@ (801d2a8 <icmp_input+0x254>)
 801d290:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801d294:	3301      	adds	r3, #1
 801d296:	b29a      	uxth	r2, r3
 801d298:	4b03      	ldr	r3, [pc, #12]	@ (801d2a8 <icmp_input+0x254>)
 801d29a:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d29e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d2a0:	3728      	adds	r7, #40	@ 0x28
 801d2a2:	46bd      	mov	sp, r7
 801d2a4:	bd80      	pop	{r7, pc}
 801d2a6:	bf00      	nop
 801d2a8:	200252ac 	.word	0x200252ac
 801d2ac:	2001f0b0 	.word	0x2001f0b0
 801d2b0:	2001f0c4 	.word	0x2001f0c4
 801d2b4:	0802443c 	.word	0x0802443c
 801d2b8:	08024474 	.word	0x08024474
 801d2bc:	080244ac 	.word	0x080244ac
 801d2c0:	080244d4 	.word	0x080244d4

0801d2c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d2c4:	b580      	push	{r7, lr}
 801d2c6:	b082      	sub	sp, #8
 801d2c8:	af00      	add	r7, sp, #0
 801d2ca:	6078      	str	r0, [r7, #4]
 801d2cc:	460b      	mov	r3, r1
 801d2ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d2d0:	78fb      	ldrb	r3, [r7, #3]
 801d2d2:	461a      	mov	r2, r3
 801d2d4:	2103      	movs	r1, #3
 801d2d6:	6878      	ldr	r0, [r7, #4]
 801d2d8:	f000 f814 	bl	801d304 <icmp_send_response>
}
 801d2dc:	bf00      	nop
 801d2de:	3708      	adds	r7, #8
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	bd80      	pop	{r7, pc}

0801d2e4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d2e4:	b580      	push	{r7, lr}
 801d2e6:	b082      	sub	sp, #8
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]
 801d2ec:	460b      	mov	r3, r1
 801d2ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d2f0:	78fb      	ldrb	r3, [r7, #3]
 801d2f2:	461a      	mov	r2, r3
 801d2f4:	210b      	movs	r1, #11
 801d2f6:	6878      	ldr	r0, [r7, #4]
 801d2f8:	f000 f804 	bl	801d304 <icmp_send_response>
}
 801d2fc:	bf00      	nop
 801d2fe:	3708      	adds	r7, #8
 801d300:	46bd      	mov	sp, r7
 801d302:	bd80      	pop	{r7, pc}

0801d304 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d304:	b580      	push	{r7, lr}
 801d306:	b08c      	sub	sp, #48	@ 0x30
 801d308:	af04      	add	r7, sp, #16
 801d30a:	6078      	str	r0, [r7, #4]
 801d30c:	460b      	mov	r3, r1
 801d30e:	70fb      	strb	r3, [r7, #3]
 801d310:	4613      	mov	r3, r2
 801d312:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d314:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d318:	2124      	movs	r1, #36	@ 0x24
 801d31a:	2022      	movs	r0, #34	@ 0x22
 801d31c:	f7f7 fa30 	bl	8014780 <pbuf_alloc>
 801d320:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d322:	69fb      	ldr	r3, [r7, #28]
 801d324:	2b00      	cmp	r3, #0
 801d326:	d054      	beq.n	801d3d2 <icmp_send_response+0xce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d328:	69fb      	ldr	r3, [r7, #28]
 801d32a:	895b      	ldrh	r3, [r3, #10]
 801d32c:	2b23      	cmp	r3, #35	@ 0x23
 801d32e:	d806      	bhi.n	801d33e <icmp_send_response+0x3a>
 801d330:	4b2a      	ldr	r3, [pc, #168]	@ (801d3dc <icmp_send_response+0xd8>)
 801d332:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801d336:	492a      	ldr	r1, [pc, #168]	@ (801d3e0 <icmp_send_response+0xdc>)
 801d338:	482a      	ldr	r0, [pc, #168]	@ (801d3e4 <icmp_send_response+0xe0>)
 801d33a:	f002 ffb5 	bl	80202a8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	685b      	ldr	r3, [r3, #4]
 801d342:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d344:	69fb      	ldr	r3, [r7, #28]
 801d346:	685b      	ldr	r3, [r3, #4]
 801d348:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d34a:	697b      	ldr	r3, [r7, #20]
 801d34c:	78fa      	ldrb	r2, [r7, #3]
 801d34e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d350:	697b      	ldr	r3, [r7, #20]
 801d352:	78ba      	ldrb	r2, [r7, #2]
 801d354:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d356:	697b      	ldr	r3, [r7, #20]
 801d358:	2200      	movs	r2, #0
 801d35a:	711a      	strb	r2, [r3, #4]
 801d35c:	2200      	movs	r2, #0
 801d35e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d360:	697b      	ldr	r3, [r7, #20]
 801d362:	2200      	movs	r2, #0
 801d364:	719a      	strb	r2, [r3, #6]
 801d366:	2200      	movs	r2, #0
 801d368:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d36a:	69fb      	ldr	r3, [r7, #28]
 801d36c:	685b      	ldr	r3, [r3, #4]
 801d36e:	f103 0008 	add.w	r0, r3, #8
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	685b      	ldr	r3, [r3, #4]
 801d376:	221c      	movs	r2, #28
 801d378:	4619      	mov	r1, r3
 801d37a:	f003 f9c0 	bl	80206fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d37e:	69bb      	ldr	r3, [r7, #24]
 801d380:	68db      	ldr	r3, [r3, #12]
 801d382:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d384:	f107 030c 	add.w	r3, r7, #12
 801d388:	4618      	mov	r0, r3
 801d38a:	f000 f82f 	bl	801d3ec <ip4_route>
 801d38e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d390:	693b      	ldr	r3, [r7, #16]
 801d392:	2b00      	cmp	r3, #0
 801d394:	d019      	beq.n	801d3ca <icmp_send_response+0xc6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d396:	697b      	ldr	r3, [r7, #20]
 801d398:	2200      	movs	r2, #0
 801d39a:	709a      	strb	r2, [r3, #2]
 801d39c:	2200      	movs	r2, #0
 801d39e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801d3a0:	4b11      	ldr	r3, [pc, #68]	@ (801d3e8 <icmp_send_response+0xe4>)
 801d3a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d3a6:	3301      	adds	r3, #1
 801d3a8:	b29a      	uxth	r2, r3
 801d3aa:	4b0f      	ldr	r3, [pc, #60]	@ (801d3e8 <icmp_send_response+0xe4>)
 801d3ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d3b0:	f107 020c 	add.w	r2, r7, #12
 801d3b4:	693b      	ldr	r3, [r7, #16]
 801d3b6:	9302      	str	r3, [sp, #8]
 801d3b8:	2301      	movs	r3, #1
 801d3ba:	9301      	str	r3, [sp, #4]
 801d3bc:	2300      	movs	r3, #0
 801d3be:	9300      	str	r3, [sp, #0]
 801d3c0:	23ff      	movs	r3, #255	@ 0xff
 801d3c2:	2100      	movs	r1, #0
 801d3c4:	69f8      	ldr	r0, [r7, #28]
 801d3c6:	f000 fa27 	bl	801d818 <ip4_output_if>
  }
  pbuf_free(q);
 801d3ca:	69f8      	ldr	r0, [r7, #28]
 801d3cc:	f7f7 fcbc 	bl	8014d48 <pbuf_free>
 801d3d0:	e000      	b.n	801d3d4 <icmp_send_response+0xd0>
    return;
 801d3d2:	bf00      	nop
}
 801d3d4:	3720      	adds	r7, #32
 801d3d6:	46bd      	mov	sp, r7
 801d3d8:	bd80      	pop	{r7, pc}
 801d3da:	bf00      	nop
 801d3dc:	0802443c 	.word	0x0802443c
 801d3e0:	08024508 	.word	0x08024508
 801d3e4:	080244ac 	.word	0x080244ac
 801d3e8:	200252ac 	.word	0x200252ac

0801d3ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d3ec:	b480      	push	{r7}
 801d3ee:	b085      	sub	sp, #20
 801d3f0:	af00      	add	r7, sp, #0
 801d3f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d3f4:	4b37      	ldr	r3, [pc, #220]	@ (801d4d4 <ip4_route+0xe8>)
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	60fb      	str	r3, [r7, #12]
 801d3fa:	e036      	b.n	801d46a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d402:	f003 0301 	and.w	r3, r3, #1
 801d406:	b2db      	uxtb	r3, r3
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d02b      	beq.n	801d464 <ip4_route+0x78>
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d412:	089b      	lsrs	r3, r3, #2
 801d414:	f003 0301 	and.w	r3, r3, #1
 801d418:	b2db      	uxtb	r3, r3
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d022      	beq.n	801d464 <ip4_route+0x78>
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	3304      	adds	r3, #4
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d01d      	beq.n	801d464 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	681a      	ldr	r2, [r3, #0]
 801d42c:	68fb      	ldr	r3, [r7, #12]
 801d42e:	3304      	adds	r3, #4
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	405a      	eors	r2, r3
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	3308      	adds	r3, #8
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	4013      	ands	r3, r2
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d101      	bne.n	801d444 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	e040      	b.n	801d4c6 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d44a:	f003 0302 	and.w	r3, r3, #2
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d108      	bne.n	801d464 <ip4_route+0x78>
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	681a      	ldr	r2, [r3, #0]
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	330c      	adds	r3, #12
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	429a      	cmp	r2, r3
 801d45e:	d101      	bne.n	801d464 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	e030      	b.n	801d4c6 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	60fb      	str	r3, [r7, #12]
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d1c5      	bne.n	801d3fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d470:	4b19      	ldr	r3, [pc, #100]	@ (801d4d8 <ip4_route+0xec>)
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d01a      	beq.n	801d4ae <ip4_route+0xc2>
 801d478:	4b17      	ldr	r3, [pc, #92]	@ (801d4d8 <ip4_route+0xec>)
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d480:	f003 0301 	and.w	r3, r3, #1
 801d484:	2b00      	cmp	r3, #0
 801d486:	d012      	beq.n	801d4ae <ip4_route+0xc2>
 801d488:	4b13      	ldr	r3, [pc, #76]	@ (801d4d8 <ip4_route+0xec>)
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d490:	f003 0304 	and.w	r3, r3, #4
 801d494:	2b00      	cmp	r3, #0
 801d496:	d00a      	beq.n	801d4ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d498:	4b0f      	ldr	r3, [pc, #60]	@ (801d4d8 <ip4_route+0xec>)
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	3304      	adds	r3, #4
 801d49e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d004      	beq.n	801d4ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	b2db      	uxtb	r3, r3
 801d4aa:	2b7f      	cmp	r3, #127	@ 0x7f
 801d4ac:	d109      	bne.n	801d4c2 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801d4ae:	4b0b      	ldr	r3, [pc, #44]	@ (801d4dc <ip4_route+0xf0>)
 801d4b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801d4b4:	3301      	adds	r3, #1
 801d4b6:	b29a      	uxth	r2, r3
 801d4b8:	4b08      	ldr	r3, [pc, #32]	@ (801d4dc <ip4_route+0xf0>)
 801d4ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d4be:	2300      	movs	r3, #0
 801d4c0:	e001      	b.n	801d4c6 <ip4_route+0xda>
  }

  return netif_default;
 801d4c2:	4b05      	ldr	r3, [pc, #20]	@ (801d4d8 <ip4_route+0xec>)
 801d4c4:	681b      	ldr	r3, [r3, #0]
}
 801d4c6:	4618      	mov	r0, r3
 801d4c8:	3714      	adds	r7, #20
 801d4ca:	46bd      	mov	sp, r7
 801d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4d0:	4770      	bx	lr
 801d4d2:	bf00      	nop
 801d4d4:	200252a0 	.word	0x200252a0
 801d4d8:	200252a4 	.word	0x200252a4
 801d4dc:	200252ac 	.word	0x200252ac

0801d4e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d4e0:	b580      	push	{r7, lr}
 801d4e2:	b082      	sub	sp, #8
 801d4e4:	af00      	add	r7, sp, #0
 801d4e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d4ee:	f003 0301 	and.w	r3, r3, #1
 801d4f2:	b2db      	uxtb	r3, r3
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d016      	beq.n	801d526 <ip4_input_accept+0x46>
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	3304      	adds	r3, #4
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d011      	beq.n	801d526 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d502:	4b0b      	ldr	r3, [pc, #44]	@ (801d530 <ip4_input_accept+0x50>)
 801d504:	695a      	ldr	r2, [r3, #20]
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	3304      	adds	r3, #4
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	429a      	cmp	r2, r3
 801d50e:	d008      	beq.n	801d522 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d510:	4b07      	ldr	r3, [pc, #28]	@ (801d530 <ip4_input_accept+0x50>)
 801d512:	695b      	ldr	r3, [r3, #20]
 801d514:	6879      	ldr	r1, [r7, #4]
 801d516:	4618      	mov	r0, r3
 801d518:	f000 fa70 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 801d51c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d001      	beq.n	801d526 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d522:	2301      	movs	r3, #1
 801d524:	e000      	b.n	801d528 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d526:	2300      	movs	r3, #0
}
 801d528:	4618      	mov	r0, r3
 801d52a:	3708      	adds	r7, #8
 801d52c:	46bd      	mov	sp, r7
 801d52e:	bd80      	pop	{r7, pc}
 801d530:	2001f0b0 	.word	0x2001f0b0

0801d534 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d534:	b580      	push	{r7, lr}
 801d536:	b086      	sub	sp, #24
 801d538:	af00      	add	r7, sp, #0
 801d53a:	6078      	str	r0, [r7, #4]
 801d53c:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801d53e:	4b8f      	ldr	r3, [pc, #572]	@ (801d77c <ip4_input+0x248>)
 801d540:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801d544:	3301      	adds	r3, #1
 801d546:	b29a      	uxth	r2, r3
 801d548:	4b8c      	ldr	r3, [pc, #560]	@ (801d77c <ip4_input+0x248>)
 801d54a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	685b      	ldr	r3, [r3, #4]
 801d552:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801d554:	697b      	ldr	r3, [r7, #20]
 801d556:	781b      	ldrb	r3, [r3, #0]
 801d558:	091b      	lsrs	r3, r3, #4
 801d55a:	b2db      	uxtb	r3, r3
 801d55c:	2b04      	cmp	r3, #4
 801d55e:	d014      	beq.n	801d58a <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d560:	6878      	ldr	r0, [r7, #4]
 801d562:	f7f7 fbf1 	bl	8014d48 <pbuf_free>
    IP_STATS_INC(ip.err);
 801d566:	4b85      	ldr	r3, [pc, #532]	@ (801d77c <ip4_input+0x248>)
 801d568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d56c:	3301      	adds	r3, #1
 801d56e:	b29a      	uxth	r2, r3
 801d570:	4b82      	ldr	r3, [pc, #520]	@ (801d77c <ip4_input+0x248>)
 801d572:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801d576:	4b81      	ldr	r3, [pc, #516]	@ (801d77c <ip4_input+0x248>)
 801d578:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d57c:	3301      	adds	r3, #1
 801d57e:	b29a      	uxth	r2, r3
 801d580:	4b7e      	ldr	r3, [pc, #504]	@ (801d77c <ip4_input+0x248>)
 801d582:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d586:	2300      	movs	r3, #0
 801d588:	e13e      	b.n	801d808 <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d58a:	697b      	ldr	r3, [r7, #20]
 801d58c:	781b      	ldrb	r3, [r3, #0]
 801d58e:	f003 030f 	and.w	r3, r3, #15
 801d592:	b2db      	uxtb	r3, r3
 801d594:	009b      	lsls	r3, r3, #2
 801d596:	b2db      	uxtb	r3, r3
 801d598:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d59a:	697b      	ldr	r3, [r7, #20]
 801d59c:	885b      	ldrh	r3, [r3, #2]
 801d59e:	b29b      	uxth	r3, r3
 801d5a0:	4618      	mov	r0, r3
 801d5a2:	f7f5 ff13 	bl	80133cc <lwip_htons>
 801d5a6:	4603      	mov	r3, r0
 801d5a8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	891b      	ldrh	r3, [r3, #8]
 801d5ae:	89ba      	ldrh	r2, [r7, #12]
 801d5b0:	429a      	cmp	r2, r3
 801d5b2:	d204      	bcs.n	801d5be <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801d5b4:	89bb      	ldrh	r3, [r7, #12]
 801d5b6:	4619      	mov	r1, r3
 801d5b8:	6878      	ldr	r0, [r7, #4]
 801d5ba:	f7f7 fa3f 	bl	8014a3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	895b      	ldrh	r3, [r3, #10]
 801d5c2:	89fa      	ldrh	r2, [r7, #14]
 801d5c4:	429a      	cmp	r2, r3
 801d5c6:	d807      	bhi.n	801d5d8 <ip4_input+0xa4>
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	891b      	ldrh	r3, [r3, #8]
 801d5cc:	89ba      	ldrh	r2, [r7, #12]
 801d5ce:	429a      	cmp	r2, r3
 801d5d0:	d802      	bhi.n	801d5d8 <ip4_input+0xa4>
 801d5d2:	89fb      	ldrh	r3, [r7, #14]
 801d5d4:	2b13      	cmp	r3, #19
 801d5d6:	d814      	bhi.n	801d602 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d5d8:	6878      	ldr	r0, [r7, #4]
 801d5da:	f7f7 fbb5 	bl	8014d48 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801d5de:	4b67      	ldr	r3, [pc, #412]	@ (801d77c <ip4_input+0x248>)
 801d5e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801d5e4:	3301      	adds	r3, #1
 801d5e6:	b29a      	uxth	r2, r3
 801d5e8:	4b64      	ldr	r3, [pc, #400]	@ (801d77c <ip4_input+0x248>)
 801d5ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801d5ee:	4b63      	ldr	r3, [pc, #396]	@ (801d77c <ip4_input+0x248>)
 801d5f0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d5f4:	3301      	adds	r3, #1
 801d5f6:	b29a      	uxth	r2, r3
 801d5f8:	4b60      	ldr	r3, [pc, #384]	@ (801d77c <ip4_input+0x248>)
 801d5fa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d5fe:	2300      	movs	r3, #0
 801d600:	e102      	b.n	801d808 <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d602:	697b      	ldr	r3, [r7, #20]
 801d604:	691b      	ldr	r3, [r3, #16]
 801d606:	4a5e      	ldr	r2, [pc, #376]	@ (801d780 <ip4_input+0x24c>)
 801d608:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d60a:	697b      	ldr	r3, [r7, #20]
 801d60c:	68db      	ldr	r3, [r3, #12]
 801d60e:	4a5c      	ldr	r2, [pc, #368]	@ (801d780 <ip4_input+0x24c>)
 801d610:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d612:	4b5b      	ldr	r3, [pc, #364]	@ (801d780 <ip4_input+0x24c>)
 801d614:	695b      	ldr	r3, [r3, #20]
 801d616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d61a:	2be0      	cmp	r3, #224	@ 0xe0
 801d61c:	d112      	bne.n	801d644 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d61e:	683b      	ldr	r3, [r7, #0]
 801d620:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d624:	f003 0301 	and.w	r3, r3, #1
 801d628:	b2db      	uxtb	r3, r3
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d007      	beq.n	801d63e <ip4_input+0x10a>
 801d62e:	683b      	ldr	r3, [r7, #0]
 801d630:	3304      	adds	r3, #4
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	2b00      	cmp	r3, #0
 801d636:	d002      	beq.n	801d63e <ip4_input+0x10a>
      netif = inp;
 801d638:	683b      	ldr	r3, [r7, #0]
 801d63a:	613b      	str	r3, [r7, #16]
 801d63c:	e02a      	b.n	801d694 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d63e:	2300      	movs	r3, #0
 801d640:	613b      	str	r3, [r7, #16]
 801d642:	e027      	b.n	801d694 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d644:	6838      	ldr	r0, [r7, #0]
 801d646:	f7ff ff4b 	bl	801d4e0 <ip4_input_accept>
 801d64a:	4603      	mov	r3, r0
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d002      	beq.n	801d656 <ip4_input+0x122>
      netif = inp;
 801d650:	683b      	ldr	r3, [r7, #0]
 801d652:	613b      	str	r3, [r7, #16]
 801d654:	e01e      	b.n	801d694 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d656:	2300      	movs	r3, #0
 801d658:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d65a:	4b49      	ldr	r3, [pc, #292]	@ (801d780 <ip4_input+0x24c>)
 801d65c:	695b      	ldr	r3, [r3, #20]
 801d65e:	b2db      	uxtb	r3, r3
 801d660:	2b7f      	cmp	r3, #127	@ 0x7f
 801d662:	d017      	beq.n	801d694 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d664:	4b47      	ldr	r3, [pc, #284]	@ (801d784 <ip4_input+0x250>)
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	613b      	str	r3, [r7, #16]
 801d66a:	e00e      	b.n	801d68a <ip4_input+0x156>
          if (netif == inp) {
 801d66c:	693a      	ldr	r2, [r7, #16]
 801d66e:	683b      	ldr	r3, [r7, #0]
 801d670:	429a      	cmp	r2, r3
 801d672:	d006      	beq.n	801d682 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d674:	6938      	ldr	r0, [r7, #16]
 801d676:	f7ff ff33 	bl	801d4e0 <ip4_input_accept>
 801d67a:	4603      	mov	r3, r0
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d108      	bne.n	801d692 <ip4_input+0x15e>
 801d680:	e000      	b.n	801d684 <ip4_input+0x150>
            continue;
 801d682:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d684:	693b      	ldr	r3, [r7, #16]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	613b      	str	r3, [r7, #16]
 801d68a:	693b      	ldr	r3, [r7, #16]
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d1ed      	bne.n	801d66c <ip4_input+0x138>
 801d690:	e000      	b.n	801d694 <ip4_input+0x160>
            break;
 801d692:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d694:	4b3a      	ldr	r3, [pc, #232]	@ (801d780 <ip4_input+0x24c>)
 801d696:	691b      	ldr	r3, [r3, #16]
 801d698:	6839      	ldr	r1, [r7, #0]
 801d69a:	4618      	mov	r0, r3
 801d69c:	f000 f9ae 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 801d6a0:	4603      	mov	r3, r0
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d105      	bne.n	801d6b2 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d6a6:	4b36      	ldr	r3, [pc, #216]	@ (801d780 <ip4_input+0x24c>)
 801d6a8:	691b      	ldr	r3, [r3, #16]
 801d6aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d6ae:	2be0      	cmp	r3, #224	@ 0xe0
 801d6b0:	d10c      	bne.n	801d6cc <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d6b2:	6878      	ldr	r0, [r7, #4]
 801d6b4:	f7f7 fb48 	bl	8014d48 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801d6b8:	4b30      	ldr	r3, [pc, #192]	@ (801d77c <ip4_input+0x248>)
 801d6ba:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d6be:	3301      	adds	r3, #1
 801d6c0:	b29a      	uxth	r2, r3
 801d6c2:	4b2e      	ldr	r3, [pc, #184]	@ (801d77c <ip4_input+0x248>)
 801d6c4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	e09d      	b.n	801d808 <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d6cc:	693b      	ldr	r3, [r7, #16]
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d10c      	bne.n	801d6ec <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801d6d2:	4b2a      	ldr	r3, [pc, #168]	@ (801d77c <ip4_input+0x248>)
 801d6d4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d6d8:	3301      	adds	r3, #1
 801d6da:	b29a      	uxth	r2, r3
 801d6dc:	4b27      	ldr	r3, [pc, #156]	@ (801d77c <ip4_input+0x248>)
 801d6de:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d6e2:	6878      	ldr	r0, [r7, #4]
 801d6e4:	f7f7 fb30 	bl	8014d48 <pbuf_free>
    return ERR_OK;
 801d6e8:	2300      	movs	r3, #0
 801d6ea:	e08d      	b.n	801d808 <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d6ec:	697b      	ldr	r3, [r7, #20]
 801d6ee:	88db      	ldrh	r3, [r3, #6]
 801d6f0:	b29b      	uxth	r3, r3
 801d6f2:	461a      	mov	r2, r3
 801d6f4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801d6f8:	4013      	ands	r3, r2
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d00b      	beq.n	801d716 <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d6fe:	6878      	ldr	r0, [r7, #4]
 801d700:	f000 fcca 	bl	801e098 <ip4_reass>
 801d704:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d101      	bne.n	801d710 <ip4_input+0x1dc>
      return ERR_OK;
 801d70c:	2300      	movs	r3, #0
 801d70e:	e07b      	b.n	801d808 <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	685b      	ldr	r3, [r3, #4]
 801d714:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d716:	4a1a      	ldr	r2, [pc, #104]	@ (801d780 <ip4_input+0x24c>)
 801d718:	693b      	ldr	r3, [r7, #16]
 801d71a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d71c:	4a18      	ldr	r2, [pc, #96]	@ (801d780 <ip4_input+0x24c>)
 801d71e:	683b      	ldr	r3, [r7, #0]
 801d720:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d722:	4a17      	ldr	r2, [pc, #92]	@ (801d780 <ip4_input+0x24c>)
 801d724:	697b      	ldr	r3, [r7, #20]
 801d726:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d728:	697b      	ldr	r3, [r7, #20]
 801d72a:	781b      	ldrb	r3, [r3, #0]
 801d72c:	f003 030f 	and.w	r3, r3, #15
 801d730:	b2db      	uxtb	r3, r3
 801d732:	009b      	lsls	r3, r3, #2
 801d734:	b2db      	uxtb	r3, r3
 801d736:	461a      	mov	r2, r3
 801d738:	4b11      	ldr	r3, [pc, #68]	@ (801d780 <ip4_input+0x24c>)
 801d73a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d73c:	89fb      	ldrh	r3, [r7, #14]
 801d73e:	4619      	mov	r1, r3
 801d740:	6878      	ldr	r0, [r7, #4]
 801d742:	f7f7 fa7b 	bl	8014c3c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d746:	697b      	ldr	r3, [r7, #20]
 801d748:	7a5b      	ldrb	r3, [r3, #9]
 801d74a:	2b11      	cmp	r3, #17
 801d74c:	d006      	beq.n	801d75c <ip4_input+0x228>
 801d74e:	2b11      	cmp	r3, #17
 801d750:	dc1a      	bgt.n	801d788 <ip4_input+0x254>
 801d752:	2b01      	cmp	r3, #1
 801d754:	d00c      	beq.n	801d770 <ip4_input+0x23c>
 801d756:	2b06      	cmp	r3, #6
 801d758:	d005      	beq.n	801d766 <ip4_input+0x232>
 801d75a:	e015      	b.n	801d788 <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d75c:	6839      	ldr	r1, [r7, #0]
 801d75e:	6878      	ldr	r0, [r7, #4]
 801d760:	f7fe f862 	bl	801b828 <udp_input>
        break;
 801d764:	e03d      	b.n	801d7e2 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d766:	6839      	ldr	r1, [r7, #0]
 801d768:	6878      	ldr	r0, [r7, #4]
 801d76a:	f7f9 fb6d 	bl	8016e48 <tcp_input>
        break;
 801d76e:	e038      	b.n	801d7e2 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d770:	6839      	ldr	r1, [r7, #0]
 801d772:	6878      	ldr	r0, [r7, #4]
 801d774:	f7ff fc6e 	bl	801d054 <icmp_input>
        break;
 801d778:	e033      	b.n	801d7e2 <ip4_input+0x2ae>
 801d77a:	bf00      	nop
 801d77c:	200252ac 	.word	0x200252ac
 801d780:	2001f0b0 	.word	0x2001f0b0
 801d784:	200252a0 	.word	0x200252a0
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d788:	4b21      	ldr	r3, [pc, #132]	@ (801d810 <ip4_input+0x2dc>)
 801d78a:	695b      	ldr	r3, [r3, #20]
 801d78c:	6939      	ldr	r1, [r7, #16]
 801d78e:	4618      	mov	r0, r3
 801d790:	f000 f934 	bl	801d9fc <ip4_addr_isbroadcast_u32>
 801d794:	4603      	mov	r3, r0
 801d796:	2b00      	cmp	r3, #0
 801d798:	d10f      	bne.n	801d7ba <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d79a:	4b1d      	ldr	r3, [pc, #116]	@ (801d810 <ip4_input+0x2dc>)
 801d79c:	695b      	ldr	r3, [r3, #20]
 801d79e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d7a2:	2be0      	cmp	r3, #224	@ 0xe0
 801d7a4:	d009      	beq.n	801d7ba <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d7a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d7aa:	4619      	mov	r1, r3
 801d7ac:	6878      	ldr	r0, [r7, #4]
 801d7ae:	f7f7 fab8 	bl	8014d22 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d7b2:	2102      	movs	r1, #2
 801d7b4:	6878      	ldr	r0, [r7, #4]
 801d7b6:	f7ff fd85 	bl	801d2c4 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801d7ba:	4b16      	ldr	r3, [pc, #88]	@ (801d814 <ip4_input+0x2e0>)
 801d7bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801d7c0:	3301      	adds	r3, #1
 801d7c2:	b29a      	uxth	r2, r3
 801d7c4:	4b13      	ldr	r3, [pc, #76]	@ (801d814 <ip4_input+0x2e0>)
 801d7c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801d7ca:	4b12      	ldr	r3, [pc, #72]	@ (801d814 <ip4_input+0x2e0>)
 801d7cc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d7d0:	3301      	adds	r3, #1
 801d7d2:	b29a      	uxth	r2, r3
 801d7d4:	4b0f      	ldr	r3, [pc, #60]	@ (801d814 <ip4_input+0x2e0>)
 801d7d6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d7da:	6878      	ldr	r0, [r7, #4]
 801d7dc:	f7f7 fab4 	bl	8014d48 <pbuf_free>
        break;
 801d7e0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d7e2:	4b0b      	ldr	r3, [pc, #44]	@ (801d810 <ip4_input+0x2dc>)
 801d7e4:	2200      	movs	r2, #0
 801d7e6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d7e8:	4b09      	ldr	r3, [pc, #36]	@ (801d810 <ip4_input+0x2dc>)
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d7ee:	4b08      	ldr	r3, [pc, #32]	@ (801d810 <ip4_input+0x2dc>)
 801d7f0:	2200      	movs	r2, #0
 801d7f2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d7f4:	4b06      	ldr	r3, [pc, #24]	@ (801d810 <ip4_input+0x2dc>)
 801d7f6:	2200      	movs	r2, #0
 801d7f8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d7fa:	4b05      	ldr	r3, [pc, #20]	@ (801d810 <ip4_input+0x2dc>)
 801d7fc:	2200      	movs	r2, #0
 801d7fe:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d800:	4b03      	ldr	r3, [pc, #12]	@ (801d810 <ip4_input+0x2dc>)
 801d802:	2200      	movs	r2, #0
 801d804:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d806:	2300      	movs	r3, #0
}
 801d808:	4618      	mov	r0, r3
 801d80a:	3718      	adds	r7, #24
 801d80c:	46bd      	mov	sp, r7
 801d80e:	bd80      	pop	{r7, pc}
 801d810:	2001f0b0 	.word	0x2001f0b0
 801d814:	200252ac 	.word	0x200252ac

0801d818 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d818:	b580      	push	{r7, lr}
 801d81a:	b08a      	sub	sp, #40	@ 0x28
 801d81c:	af04      	add	r7, sp, #16
 801d81e:	60f8      	str	r0, [r7, #12]
 801d820:	60b9      	str	r1, [r7, #8]
 801d822:	607a      	str	r2, [r7, #4]
 801d824:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d826:	68bb      	ldr	r3, [r7, #8]
 801d828:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d009      	beq.n	801d844 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d830:	68bb      	ldr	r3, [r7, #8]
 801d832:	2b00      	cmp	r3, #0
 801d834:	d003      	beq.n	801d83e <ip4_output_if+0x26>
 801d836:	68bb      	ldr	r3, [r7, #8]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d102      	bne.n	801d844 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d840:	3304      	adds	r3, #4
 801d842:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d844:	78fa      	ldrb	r2, [r7, #3]
 801d846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d848:	9302      	str	r3, [sp, #8]
 801d84a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801d84e:	9301      	str	r3, [sp, #4]
 801d850:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d854:	9300      	str	r3, [sp, #0]
 801d856:	4613      	mov	r3, r2
 801d858:	687a      	ldr	r2, [r7, #4]
 801d85a:	6979      	ldr	r1, [r7, #20]
 801d85c:	68f8      	ldr	r0, [r7, #12]
 801d85e:	f000 f805 	bl	801d86c <ip4_output_if_src>
 801d862:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d864:	4618      	mov	r0, r3
 801d866:	3718      	adds	r7, #24
 801d868:	46bd      	mov	sp, r7
 801d86a:	bd80      	pop	{r7, pc}

0801d86c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d86c:	b580      	push	{r7, lr}
 801d86e:	b088      	sub	sp, #32
 801d870:	af00      	add	r7, sp, #0
 801d872:	60f8      	str	r0, [r7, #12]
 801d874:	60b9      	str	r1, [r7, #8]
 801d876:	607a      	str	r2, [r7, #4]
 801d878:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	7b9b      	ldrb	r3, [r3, #14]
 801d87e:	2b01      	cmp	r3, #1
 801d880:	d006      	beq.n	801d890 <ip4_output_if_src+0x24>
 801d882:	4b57      	ldr	r3, [pc, #348]	@ (801d9e0 <ip4_output_if_src+0x174>)
 801d884:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801d888:	4956      	ldr	r1, [pc, #344]	@ (801d9e4 <ip4_output_if_src+0x178>)
 801d88a:	4857      	ldr	r0, [pc, #348]	@ (801d9e8 <ip4_output_if_src+0x17c>)
 801d88c:	f002 fd0c 	bl	80202a8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	2b00      	cmp	r3, #0
 801d894:	d068      	beq.n	801d968 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801d896:	2314      	movs	r3, #20
 801d898:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d89a:	2114      	movs	r1, #20
 801d89c:	68f8      	ldr	r0, [r7, #12]
 801d89e:	f7f7 f9bd 	bl	8014c1c <pbuf_add_header>
 801d8a2:	4603      	mov	r3, r0
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d00a      	beq.n	801d8be <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801d8a8:	4b50      	ldr	r3, [pc, #320]	@ (801d9ec <ip4_output_if_src+0x180>)
 801d8aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d8ae:	3301      	adds	r3, #1
 801d8b0:	b29a      	uxth	r2, r3
 801d8b2:	4b4e      	ldr	r3, [pc, #312]	@ (801d9ec <ip4_output_if_src+0x180>)
 801d8b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d8b8:	f06f 0301 	mvn.w	r3, #1
 801d8bc:	e08c      	b.n	801d9d8 <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	685b      	ldr	r3, [r3, #4]
 801d8c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	895b      	ldrh	r3, [r3, #10]
 801d8c8:	2b13      	cmp	r3, #19
 801d8ca:	d806      	bhi.n	801d8da <ip4_output_if_src+0x6e>
 801d8cc:	4b44      	ldr	r3, [pc, #272]	@ (801d9e0 <ip4_output_if_src+0x174>)
 801d8ce:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801d8d2:	4947      	ldr	r1, [pc, #284]	@ (801d9f0 <ip4_output_if_src+0x184>)
 801d8d4:	4844      	ldr	r0, [pc, #272]	@ (801d9e8 <ip4_output_if_src+0x17c>)
 801d8d6:	f002 fce7 	bl	80202a8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d8da:	69fb      	ldr	r3, [r7, #28]
 801d8dc:	78fa      	ldrb	r2, [r7, #3]
 801d8de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d8e0:	69fb      	ldr	r3, [r7, #28]
 801d8e2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801d8e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	681a      	ldr	r2, [r3, #0]
 801d8ec:	69fb      	ldr	r3, [r7, #28]
 801d8ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d8f0:	8b7b      	ldrh	r3, [r7, #26]
 801d8f2:	089b      	lsrs	r3, r3, #2
 801d8f4:	b29b      	uxth	r3, r3
 801d8f6:	b2db      	uxtb	r3, r3
 801d8f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d8fc:	b2da      	uxtb	r2, r3
 801d8fe:	69fb      	ldr	r3, [r7, #28]
 801d900:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d902:	69fb      	ldr	r3, [r7, #28]
 801d904:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801d908:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	891b      	ldrh	r3, [r3, #8]
 801d90e:	4618      	mov	r0, r3
 801d910:	f7f5 fd5c 	bl	80133cc <lwip_htons>
 801d914:	4603      	mov	r3, r0
 801d916:	461a      	mov	r2, r3
 801d918:	69fb      	ldr	r3, [r7, #28]
 801d91a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d91c:	69fb      	ldr	r3, [r7, #28]
 801d91e:	2200      	movs	r2, #0
 801d920:	719a      	strb	r2, [r3, #6]
 801d922:	2200      	movs	r2, #0
 801d924:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d926:	4b33      	ldr	r3, [pc, #204]	@ (801d9f4 <ip4_output_if_src+0x188>)
 801d928:	881b      	ldrh	r3, [r3, #0]
 801d92a:	4618      	mov	r0, r3
 801d92c:	f7f5 fd4e 	bl	80133cc <lwip_htons>
 801d930:	4603      	mov	r3, r0
 801d932:	461a      	mov	r2, r3
 801d934:	69fb      	ldr	r3, [r7, #28]
 801d936:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d938:	4b2e      	ldr	r3, [pc, #184]	@ (801d9f4 <ip4_output_if_src+0x188>)
 801d93a:	881b      	ldrh	r3, [r3, #0]
 801d93c:	3301      	adds	r3, #1
 801d93e:	b29a      	uxth	r2, r3
 801d940:	4b2c      	ldr	r3, [pc, #176]	@ (801d9f4 <ip4_output_if_src+0x188>)
 801d942:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d944:	68bb      	ldr	r3, [r7, #8]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d104      	bne.n	801d954 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d94a:	4b2b      	ldr	r3, [pc, #172]	@ (801d9f8 <ip4_output_if_src+0x18c>)
 801d94c:	681a      	ldr	r2, [r3, #0]
 801d94e:	69fb      	ldr	r3, [r7, #28]
 801d950:	60da      	str	r2, [r3, #12]
 801d952:	e003      	b.n	801d95c <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d954:	68bb      	ldr	r3, [r7, #8]
 801d956:	681a      	ldr	r2, [r3, #0]
 801d958:	69fb      	ldr	r3, [r7, #28]
 801d95a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d95c:	69fb      	ldr	r3, [r7, #28]
 801d95e:	2200      	movs	r2, #0
 801d960:	729a      	strb	r2, [r3, #10]
 801d962:	2200      	movs	r2, #0
 801d964:	72da      	strb	r2, [r3, #11]
 801d966:	e017      	b.n	801d998 <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	895b      	ldrh	r3, [r3, #10]
 801d96c:	2b13      	cmp	r3, #19
 801d96e:	d80a      	bhi.n	801d986 <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801d970:	4b1e      	ldr	r3, [pc, #120]	@ (801d9ec <ip4_output_if_src+0x180>)
 801d972:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d976:	3301      	adds	r3, #1
 801d978:	b29a      	uxth	r2, r3
 801d97a:	4b1c      	ldr	r3, [pc, #112]	@ (801d9ec <ip4_output_if_src+0x180>)
 801d97c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d980:	f06f 0301 	mvn.w	r3, #1
 801d984:	e028      	b.n	801d9d8 <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	685b      	ldr	r3, [r3, #4]
 801d98a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d98c:	69fb      	ldr	r3, [r7, #28]
 801d98e:	691b      	ldr	r3, [r3, #16]
 801d990:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d992:	f107 0314 	add.w	r3, r7, #20
 801d996:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801d998:	4b14      	ldr	r3, [pc, #80]	@ (801d9ec <ip4_output_if_src+0x180>)
 801d99a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d99e:	3301      	adds	r3, #1
 801d9a0:	b29a      	uxth	r2, r3
 801d9a2:	4b12      	ldr	r3, [pc, #72]	@ (801d9ec <ip4_output_if_src+0x180>)
 801d9a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d00c      	beq.n	801d9ca <ip4_output_if_src+0x15e>
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	891a      	ldrh	r2, [r3, #8]
 801d9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d9b8:	429a      	cmp	r2, r3
 801d9ba:	d906      	bls.n	801d9ca <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801d9bc:	687a      	ldr	r2, [r7, #4]
 801d9be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d9c0:	68f8      	ldr	r0, [r7, #12]
 801d9c2:	f000 fd7b 	bl	801e4bc <ip4_frag>
 801d9c6:	4603      	mov	r3, r0
 801d9c8:	e006      	b.n	801d9d8 <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9cc:	695b      	ldr	r3, [r3, #20]
 801d9ce:	687a      	ldr	r2, [r7, #4]
 801d9d0:	68f9      	ldr	r1, [r7, #12]
 801d9d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d9d4:	4798      	blx	r3
 801d9d6:	4603      	mov	r3, r0
}
 801d9d8:	4618      	mov	r0, r3
 801d9da:	3720      	adds	r7, #32
 801d9dc:	46bd      	mov	sp, r7
 801d9de:	bd80      	pop	{r7, pc}
 801d9e0:	08024534 	.word	0x08024534
 801d9e4:	08024568 	.word	0x08024568
 801d9e8:	08024574 	.word	0x08024574
 801d9ec:	200252ac 	.word	0x200252ac
 801d9f0:	0802459c 	.word	0x0802459c
 801d9f4:	200254fa 	.word	0x200254fa
 801d9f8:	08025000 	.word	0x08025000

0801d9fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d9fc:	b480      	push	{r7}
 801d9fe:	b085      	sub	sp, #20
 801da00:	af00      	add	r7, sp, #0
 801da02:	6078      	str	r0, [r7, #4]
 801da04:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801da10:	d002      	beq.n	801da18 <ip4_addr_isbroadcast_u32+0x1c>
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	2b00      	cmp	r3, #0
 801da16:	d101      	bne.n	801da1c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801da18:	2301      	movs	r3, #1
 801da1a:	e02a      	b.n	801da72 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801da1c:	683b      	ldr	r3, [r7, #0]
 801da1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801da22:	f003 0302 	and.w	r3, r3, #2
 801da26:	2b00      	cmp	r3, #0
 801da28:	d101      	bne.n	801da2e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801da2a:	2300      	movs	r3, #0
 801da2c:	e021      	b.n	801da72 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801da2e:	683b      	ldr	r3, [r7, #0]
 801da30:	3304      	adds	r3, #4
 801da32:	681b      	ldr	r3, [r3, #0]
 801da34:	687a      	ldr	r2, [r7, #4]
 801da36:	429a      	cmp	r2, r3
 801da38:	d101      	bne.n	801da3e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801da3a:	2300      	movs	r3, #0
 801da3c:	e019      	b.n	801da72 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801da3e:	68fa      	ldr	r2, [r7, #12]
 801da40:	683b      	ldr	r3, [r7, #0]
 801da42:	3304      	adds	r3, #4
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	405a      	eors	r2, r3
 801da48:	683b      	ldr	r3, [r7, #0]
 801da4a:	3308      	adds	r3, #8
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	4013      	ands	r3, r2
 801da50:	2b00      	cmp	r3, #0
 801da52:	d10d      	bne.n	801da70 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801da54:	683b      	ldr	r3, [r7, #0]
 801da56:	3308      	adds	r3, #8
 801da58:	681b      	ldr	r3, [r3, #0]
 801da5a:	43da      	mvns	r2, r3
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801da60:	683b      	ldr	r3, [r7, #0]
 801da62:	3308      	adds	r3, #8
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801da68:	429a      	cmp	r2, r3
 801da6a:	d101      	bne.n	801da70 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801da6c:	2301      	movs	r3, #1
 801da6e:	e000      	b.n	801da72 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801da70:	2300      	movs	r3, #0
  }
}
 801da72:	4618      	mov	r0, r3
 801da74:	3714      	adds	r7, #20
 801da76:	46bd      	mov	sp, r7
 801da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da7c:	4770      	bx	lr
	...

0801da80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801da80:	b580      	push	{r7, lr}
 801da82:	b084      	sub	sp, #16
 801da84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801da86:	2300      	movs	r3, #0
 801da88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801da8a:	4b12      	ldr	r3, [pc, #72]	@ (801dad4 <ip_reass_tmr+0x54>)
 801da8c:	681b      	ldr	r3, [r3, #0]
 801da8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801da90:	e018      	b.n	801dac4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801da92:	68fb      	ldr	r3, [r7, #12]
 801da94:	7fdb      	ldrb	r3, [r3, #31]
 801da96:	2b00      	cmp	r3, #0
 801da98:	d00b      	beq.n	801dab2 <ip_reass_tmr+0x32>
      r->timer--;
 801da9a:	68fb      	ldr	r3, [r7, #12]
 801da9c:	7fdb      	ldrb	r3, [r3, #31]
 801da9e:	3b01      	subs	r3, #1
 801daa0:	b2da      	uxtb	r2, r3
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801daa6:	68fb      	ldr	r3, [r7, #12]
 801daa8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	60fb      	str	r3, [r7, #12]
 801dab0:	e008      	b.n	801dac4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801dabc:	68b9      	ldr	r1, [r7, #8]
 801dabe:	6878      	ldr	r0, [r7, #4]
 801dac0:	f000 f80a 	bl	801dad8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801dac4:	68fb      	ldr	r3, [r7, #12]
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d1e3      	bne.n	801da92 <ip_reass_tmr+0x12>
    }
  }
}
 801daca:	bf00      	nop
 801dacc:	bf00      	nop
 801dace:	3710      	adds	r7, #16
 801dad0:	46bd      	mov	sp, r7
 801dad2:	bd80      	pop	{r7, pc}
 801dad4:	200254fc 	.word	0x200254fc

0801dad8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801dad8:	b580      	push	{r7, lr}
 801dada:	b088      	sub	sp, #32
 801dadc:	af00      	add	r7, sp, #0
 801dade:	6078      	str	r0, [r7, #4]
 801dae0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801dae2:	2300      	movs	r3, #0
 801dae4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801dae6:	683a      	ldr	r2, [r7, #0]
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	429a      	cmp	r2, r3
 801daec:	d105      	bne.n	801dafa <ip_reass_free_complete_datagram+0x22>
 801daee:	4b45      	ldr	r3, [pc, #276]	@ (801dc04 <ip_reass_free_complete_datagram+0x12c>)
 801daf0:	22ab      	movs	r2, #171	@ 0xab
 801daf2:	4945      	ldr	r1, [pc, #276]	@ (801dc08 <ip_reass_free_complete_datagram+0x130>)
 801daf4:	4845      	ldr	r0, [pc, #276]	@ (801dc0c <ip_reass_free_complete_datagram+0x134>)
 801daf6:	f002 fbd7 	bl	80202a8 <iprintf>
  if (prev != NULL) {
 801dafa:	683b      	ldr	r3, [r7, #0]
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d00a      	beq.n	801db16 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801db00:	683b      	ldr	r3, [r7, #0]
 801db02:	681b      	ldr	r3, [r3, #0]
 801db04:	687a      	ldr	r2, [r7, #4]
 801db06:	429a      	cmp	r2, r3
 801db08:	d005      	beq.n	801db16 <ip_reass_free_complete_datagram+0x3e>
 801db0a:	4b3e      	ldr	r3, [pc, #248]	@ (801dc04 <ip_reass_free_complete_datagram+0x12c>)
 801db0c:	22ad      	movs	r2, #173	@ 0xad
 801db0e:	4940      	ldr	r1, [pc, #256]	@ (801dc10 <ip_reass_free_complete_datagram+0x138>)
 801db10:	483e      	ldr	r0, [pc, #248]	@ (801dc0c <ip_reass_free_complete_datagram+0x134>)
 801db12:	f002 fbc9 	bl	80202a8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	685b      	ldr	r3, [r3, #4]
 801db1a:	685b      	ldr	r3, [r3, #4]
 801db1c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801db1e:	697b      	ldr	r3, [r7, #20]
 801db20:	889b      	ldrh	r3, [r3, #4]
 801db22:	b29b      	uxth	r3, r3
 801db24:	2b00      	cmp	r3, #0
 801db26:	d12a      	bne.n	801db7e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	685b      	ldr	r3, [r3, #4]
 801db2c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801db2e:	697b      	ldr	r3, [r7, #20]
 801db30:	681a      	ldr	r2, [r3, #0]
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801db36:	69bb      	ldr	r3, [r7, #24]
 801db38:	6858      	ldr	r0, [r3, #4]
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	3308      	adds	r3, #8
 801db3e:	2214      	movs	r2, #20
 801db40:	4619      	mov	r1, r3
 801db42:	f002 fddc 	bl	80206fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801db46:	2101      	movs	r1, #1
 801db48:	69b8      	ldr	r0, [r7, #24]
 801db4a:	f7ff fbcb 	bl	801d2e4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801db4e:	69b8      	ldr	r0, [r7, #24]
 801db50:	f7f7 f988 	bl	8014e64 <pbuf_clen>
 801db54:	4603      	mov	r3, r0
 801db56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801db58:	8bfa      	ldrh	r2, [r7, #30]
 801db5a:	8a7b      	ldrh	r3, [r7, #18]
 801db5c:	4413      	add	r3, r2
 801db5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801db62:	db05      	blt.n	801db70 <ip_reass_free_complete_datagram+0x98>
 801db64:	4b27      	ldr	r3, [pc, #156]	@ (801dc04 <ip_reass_free_complete_datagram+0x12c>)
 801db66:	22bc      	movs	r2, #188	@ 0xbc
 801db68:	492a      	ldr	r1, [pc, #168]	@ (801dc14 <ip_reass_free_complete_datagram+0x13c>)
 801db6a:	4828      	ldr	r0, [pc, #160]	@ (801dc0c <ip_reass_free_complete_datagram+0x134>)
 801db6c:	f002 fb9c 	bl	80202a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801db70:	8bfa      	ldrh	r2, [r7, #30]
 801db72:	8a7b      	ldrh	r3, [r7, #18]
 801db74:	4413      	add	r3, r2
 801db76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801db78:	69b8      	ldr	r0, [r7, #24]
 801db7a:	f7f7 f8e5 	bl	8014d48 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	685b      	ldr	r3, [r3, #4]
 801db82:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801db84:	e01f      	b.n	801dbc6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801db86:	69bb      	ldr	r3, [r7, #24]
 801db88:	685b      	ldr	r3, [r3, #4]
 801db8a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801db8c:	69bb      	ldr	r3, [r7, #24]
 801db8e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801db90:	697b      	ldr	r3, [r7, #20]
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801db96:	68f8      	ldr	r0, [r7, #12]
 801db98:	f7f7 f964 	bl	8014e64 <pbuf_clen>
 801db9c:	4603      	mov	r3, r0
 801db9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801dba0:	8bfa      	ldrh	r2, [r7, #30]
 801dba2:	8a7b      	ldrh	r3, [r7, #18]
 801dba4:	4413      	add	r3, r2
 801dba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dbaa:	db05      	blt.n	801dbb8 <ip_reass_free_complete_datagram+0xe0>
 801dbac:	4b15      	ldr	r3, [pc, #84]	@ (801dc04 <ip_reass_free_complete_datagram+0x12c>)
 801dbae:	22cc      	movs	r2, #204	@ 0xcc
 801dbb0:	4918      	ldr	r1, [pc, #96]	@ (801dc14 <ip_reass_free_complete_datagram+0x13c>)
 801dbb2:	4816      	ldr	r0, [pc, #88]	@ (801dc0c <ip_reass_free_complete_datagram+0x134>)
 801dbb4:	f002 fb78 	bl	80202a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801dbb8:	8bfa      	ldrh	r2, [r7, #30]
 801dbba:	8a7b      	ldrh	r3, [r7, #18]
 801dbbc:	4413      	add	r3, r2
 801dbbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801dbc0:	68f8      	ldr	r0, [r7, #12]
 801dbc2:	f7f7 f8c1 	bl	8014d48 <pbuf_free>
  while (p != NULL) {
 801dbc6:	69bb      	ldr	r3, [r7, #24]
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d1dc      	bne.n	801db86 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801dbcc:	6839      	ldr	r1, [r7, #0]
 801dbce:	6878      	ldr	r0, [r7, #4]
 801dbd0:	f000 f8ca 	bl	801dd68 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801dbd4:	4b10      	ldr	r3, [pc, #64]	@ (801dc18 <ip_reass_free_complete_datagram+0x140>)
 801dbd6:	881b      	ldrh	r3, [r3, #0]
 801dbd8:	8bfa      	ldrh	r2, [r7, #30]
 801dbda:	429a      	cmp	r2, r3
 801dbdc:	d905      	bls.n	801dbea <ip_reass_free_complete_datagram+0x112>
 801dbde:	4b09      	ldr	r3, [pc, #36]	@ (801dc04 <ip_reass_free_complete_datagram+0x12c>)
 801dbe0:	22d2      	movs	r2, #210	@ 0xd2
 801dbe2:	490e      	ldr	r1, [pc, #56]	@ (801dc1c <ip_reass_free_complete_datagram+0x144>)
 801dbe4:	4809      	ldr	r0, [pc, #36]	@ (801dc0c <ip_reass_free_complete_datagram+0x134>)
 801dbe6:	f002 fb5f 	bl	80202a8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801dbea:	4b0b      	ldr	r3, [pc, #44]	@ (801dc18 <ip_reass_free_complete_datagram+0x140>)
 801dbec:	881a      	ldrh	r2, [r3, #0]
 801dbee:	8bfb      	ldrh	r3, [r7, #30]
 801dbf0:	1ad3      	subs	r3, r2, r3
 801dbf2:	b29a      	uxth	r2, r3
 801dbf4:	4b08      	ldr	r3, [pc, #32]	@ (801dc18 <ip_reass_free_complete_datagram+0x140>)
 801dbf6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801dbf8:	8bfb      	ldrh	r3, [r7, #30]
}
 801dbfa:	4618      	mov	r0, r3
 801dbfc:	3720      	adds	r7, #32
 801dbfe:	46bd      	mov	sp, r7
 801dc00:	bd80      	pop	{r7, pc}
 801dc02:	bf00      	nop
 801dc04:	080245cc 	.word	0x080245cc
 801dc08:	08024608 	.word	0x08024608
 801dc0c:	08024614 	.word	0x08024614
 801dc10:	0802463c 	.word	0x0802463c
 801dc14:	08024650 	.word	0x08024650
 801dc18:	20025500 	.word	0x20025500
 801dc1c:	08024670 	.word	0x08024670

0801dc20 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801dc20:	b580      	push	{r7, lr}
 801dc22:	b08a      	sub	sp, #40	@ 0x28
 801dc24:	af00      	add	r7, sp, #0
 801dc26:	6078      	str	r0, [r7, #4]
 801dc28:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801dc2e:	2300      	movs	r3, #0
 801dc30:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801dc32:	2300      	movs	r3, #0
 801dc34:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801dc36:	2300      	movs	r3, #0
 801dc38:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801dc3e:	4b28      	ldr	r3, [pc, #160]	@ (801dce0 <ip_reass_remove_oldest_datagram+0xc0>)
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801dc44:	e030      	b.n	801dca8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801dc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc48:	695a      	ldr	r2, [r3, #20]
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	68db      	ldr	r3, [r3, #12]
 801dc4e:	429a      	cmp	r2, r3
 801dc50:	d10c      	bne.n	801dc6c <ip_reass_remove_oldest_datagram+0x4c>
 801dc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc54:	699a      	ldr	r2, [r3, #24]
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	691b      	ldr	r3, [r3, #16]
 801dc5a:	429a      	cmp	r2, r3
 801dc5c:	d106      	bne.n	801dc6c <ip_reass_remove_oldest_datagram+0x4c>
 801dc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc60:	899a      	ldrh	r2, [r3, #12]
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	889b      	ldrh	r3, [r3, #4]
 801dc66:	b29b      	uxth	r3, r3
 801dc68:	429a      	cmp	r2, r3
 801dc6a:	d014      	beq.n	801dc96 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801dc6c:	693b      	ldr	r3, [r7, #16]
 801dc6e:	3301      	adds	r3, #1
 801dc70:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801dc72:	6a3b      	ldr	r3, [r7, #32]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d104      	bne.n	801dc82 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801dc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc7a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801dc7c:	69fb      	ldr	r3, [r7, #28]
 801dc7e:	61bb      	str	r3, [r7, #24]
 801dc80:	e009      	b.n	801dc96 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801dc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc84:	7fda      	ldrb	r2, [r3, #31]
 801dc86:	6a3b      	ldr	r3, [r7, #32]
 801dc88:	7fdb      	ldrb	r3, [r3, #31]
 801dc8a:	429a      	cmp	r2, r3
 801dc8c:	d803      	bhi.n	801dc96 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801dc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc90:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801dc92:	69fb      	ldr	r3, [r7, #28]
 801dc94:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801dc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	d001      	beq.n	801dca2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dca0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801dca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801dca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d1cb      	bne.n	801dc46 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801dcae:	6a3b      	ldr	r3, [r7, #32]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d008      	beq.n	801dcc6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801dcb4:	69b9      	ldr	r1, [r7, #24]
 801dcb6:	6a38      	ldr	r0, [r7, #32]
 801dcb8:	f7ff ff0e 	bl	801dad8 <ip_reass_free_complete_datagram>
 801dcbc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801dcbe:	697a      	ldr	r2, [r7, #20]
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	4413      	add	r3, r2
 801dcc4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801dcc6:	697a      	ldr	r2, [r7, #20]
 801dcc8:	683b      	ldr	r3, [r7, #0]
 801dcca:	429a      	cmp	r2, r3
 801dccc:	da02      	bge.n	801dcd4 <ip_reass_remove_oldest_datagram+0xb4>
 801dcce:	693b      	ldr	r3, [r7, #16]
 801dcd0:	2b01      	cmp	r3, #1
 801dcd2:	dcac      	bgt.n	801dc2e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801dcd4:	697b      	ldr	r3, [r7, #20]
}
 801dcd6:	4618      	mov	r0, r3
 801dcd8:	3728      	adds	r7, #40	@ 0x28
 801dcda:	46bd      	mov	sp, r7
 801dcdc:	bd80      	pop	{r7, pc}
 801dcde:	bf00      	nop
 801dce0:	200254fc 	.word	0x200254fc

0801dce4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801dce4:	b580      	push	{r7, lr}
 801dce6:	b084      	sub	sp, #16
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	6078      	str	r0, [r7, #4]
 801dcec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801dcee:	2004      	movs	r0, #4
 801dcf0:	f7f6 f90a 	bl	8013f08 <memp_malloc>
 801dcf4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d116      	bne.n	801dd2a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801dcfc:	6839      	ldr	r1, [r7, #0]
 801dcfe:	6878      	ldr	r0, [r7, #4]
 801dd00:	f7ff ff8e 	bl	801dc20 <ip_reass_remove_oldest_datagram>
 801dd04:	4602      	mov	r2, r0
 801dd06:	683b      	ldr	r3, [r7, #0]
 801dd08:	4293      	cmp	r3, r2
 801dd0a:	dc03      	bgt.n	801dd14 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801dd0c:	2004      	movs	r0, #4
 801dd0e:	f7f6 f8fb 	bl	8013f08 <memp_malloc>
 801dd12:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801dd14:	68fb      	ldr	r3, [r7, #12]
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d107      	bne.n	801dd2a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801dd1a:	4b11      	ldr	r3, [pc, #68]	@ (801dd60 <ip_reass_enqueue_new_datagram+0x7c>)
 801dd1c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801dd1e:	3301      	adds	r3, #1
 801dd20:	b29a      	uxth	r2, r3
 801dd22:	4b0f      	ldr	r3, [pc, #60]	@ (801dd60 <ip_reass_enqueue_new_datagram+0x7c>)
 801dd24:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801dd26:	2300      	movs	r3, #0
 801dd28:	e016      	b.n	801dd58 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801dd2a:	2220      	movs	r2, #32
 801dd2c:	2100      	movs	r1, #0
 801dd2e:	68f8      	ldr	r0, [r7, #12]
 801dd30:	f002 fc12 	bl	8020558 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	220f      	movs	r2, #15
 801dd38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801dd3a:	4b0a      	ldr	r3, [pc, #40]	@ (801dd64 <ip_reass_enqueue_new_datagram+0x80>)
 801dd3c:	681a      	ldr	r2, [r3, #0]
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801dd42:	4a08      	ldr	r2, [pc, #32]	@ (801dd64 <ip_reass_enqueue_new_datagram+0x80>)
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	3308      	adds	r3, #8
 801dd4c:	2214      	movs	r2, #20
 801dd4e:	6879      	ldr	r1, [r7, #4]
 801dd50:	4618      	mov	r0, r3
 801dd52:	f002 fcd4 	bl	80206fe <memcpy>
  return ipr;
 801dd56:	68fb      	ldr	r3, [r7, #12]
}
 801dd58:	4618      	mov	r0, r3
 801dd5a:	3710      	adds	r7, #16
 801dd5c:	46bd      	mov	sp, r7
 801dd5e:	bd80      	pop	{r7, pc}
 801dd60:	200252ac 	.word	0x200252ac
 801dd64:	200254fc 	.word	0x200254fc

0801dd68 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b082      	sub	sp, #8
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	6078      	str	r0, [r7, #4]
 801dd70:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801dd72:	4b10      	ldr	r3, [pc, #64]	@ (801ddb4 <ip_reass_dequeue_datagram+0x4c>)
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	687a      	ldr	r2, [r7, #4]
 801dd78:	429a      	cmp	r2, r3
 801dd7a:	d104      	bne.n	801dd86 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	681b      	ldr	r3, [r3, #0]
 801dd80:	4a0c      	ldr	r2, [pc, #48]	@ (801ddb4 <ip_reass_dequeue_datagram+0x4c>)
 801dd82:	6013      	str	r3, [r2, #0]
 801dd84:	e00d      	b.n	801dda2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801dd86:	683b      	ldr	r3, [r7, #0]
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d106      	bne.n	801dd9a <ip_reass_dequeue_datagram+0x32>
 801dd8c:	4b0a      	ldr	r3, [pc, #40]	@ (801ddb8 <ip_reass_dequeue_datagram+0x50>)
 801dd8e:	f240 1245 	movw	r2, #325	@ 0x145
 801dd92:	490a      	ldr	r1, [pc, #40]	@ (801ddbc <ip_reass_dequeue_datagram+0x54>)
 801dd94:	480a      	ldr	r0, [pc, #40]	@ (801ddc0 <ip_reass_dequeue_datagram+0x58>)
 801dd96:	f002 fa87 	bl	80202a8 <iprintf>
    prev->next = ipr->next;
 801dd9a:	687b      	ldr	r3, [r7, #4]
 801dd9c:	681a      	ldr	r2, [r3, #0]
 801dd9e:	683b      	ldr	r3, [r7, #0]
 801dda0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801dda2:	6879      	ldr	r1, [r7, #4]
 801dda4:	2004      	movs	r0, #4
 801dda6:	f7f6 f92b 	bl	8014000 <memp_free>
}
 801ddaa:	bf00      	nop
 801ddac:	3708      	adds	r7, #8
 801ddae:	46bd      	mov	sp, r7
 801ddb0:	bd80      	pop	{r7, pc}
 801ddb2:	bf00      	nop
 801ddb4:	200254fc 	.word	0x200254fc
 801ddb8:	080245cc 	.word	0x080245cc
 801ddbc:	08024694 	.word	0x08024694
 801ddc0:	08024614 	.word	0x08024614

0801ddc4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ddc4:	b580      	push	{r7, lr}
 801ddc6:	b08c      	sub	sp, #48	@ 0x30
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	60f8      	str	r0, [r7, #12]
 801ddcc:	60b9      	str	r1, [r7, #8]
 801ddce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ddd4:	2301      	movs	r3, #1
 801ddd6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ddd8:	68bb      	ldr	r3, [r7, #8]
 801ddda:	685b      	ldr	r3, [r3, #4]
 801dddc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ddde:	69fb      	ldr	r3, [r7, #28]
 801dde0:	885b      	ldrh	r3, [r3, #2]
 801dde2:	b29b      	uxth	r3, r3
 801dde4:	4618      	mov	r0, r3
 801dde6:	f7f5 faf1 	bl	80133cc <lwip_htons>
 801ddea:	4603      	mov	r3, r0
 801ddec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ddee:	69fb      	ldr	r3, [r7, #28]
 801ddf0:	781b      	ldrb	r3, [r3, #0]
 801ddf2:	f003 030f 	and.w	r3, r3, #15
 801ddf6:	b2db      	uxtb	r3, r3
 801ddf8:	009b      	lsls	r3, r3, #2
 801ddfa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ddfc:	7e7b      	ldrb	r3, [r7, #25]
 801ddfe:	b29b      	uxth	r3, r3
 801de00:	8b7a      	ldrh	r2, [r7, #26]
 801de02:	429a      	cmp	r2, r3
 801de04:	d202      	bcs.n	801de0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801de06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801de0a:	e135      	b.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801de0c:	7e7b      	ldrb	r3, [r7, #25]
 801de0e:	b29b      	uxth	r3, r3
 801de10:	8b7a      	ldrh	r2, [r7, #26]
 801de12:	1ad3      	subs	r3, r2, r3
 801de14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801de16:	69fb      	ldr	r3, [r7, #28]
 801de18:	88db      	ldrh	r3, [r3, #6]
 801de1a:	b29b      	uxth	r3, r3
 801de1c:	4618      	mov	r0, r3
 801de1e:	f7f5 fad5 	bl	80133cc <lwip_htons>
 801de22:	4603      	mov	r3, r0
 801de24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801de28:	b29b      	uxth	r3, r3
 801de2a:	00db      	lsls	r3, r3, #3
 801de2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801de2e:	68bb      	ldr	r3, [r7, #8]
 801de30:	685b      	ldr	r3, [r3, #4]
 801de32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801de34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de36:	2200      	movs	r2, #0
 801de38:	701a      	strb	r2, [r3, #0]
 801de3a:	2200      	movs	r2, #0
 801de3c:	705a      	strb	r2, [r3, #1]
 801de3e:	2200      	movs	r2, #0
 801de40:	709a      	strb	r2, [r3, #2]
 801de42:	2200      	movs	r2, #0
 801de44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801de46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de48:	8afa      	ldrh	r2, [r7, #22]
 801de4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801de4c:	8afa      	ldrh	r2, [r7, #22]
 801de4e:	8b7b      	ldrh	r3, [r7, #26]
 801de50:	4413      	add	r3, r2
 801de52:	b29a      	uxth	r2, r3
 801de54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801de58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de5a:	88db      	ldrh	r3, [r3, #6]
 801de5c:	b29b      	uxth	r3, r3
 801de5e:	8afa      	ldrh	r2, [r7, #22]
 801de60:	429a      	cmp	r2, r3
 801de62:	d902      	bls.n	801de6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801de64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801de68:	e106      	b.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801de6a:	68fb      	ldr	r3, [r7, #12]
 801de6c:	685b      	ldr	r3, [r3, #4]
 801de6e:	627b      	str	r3, [r7, #36]	@ 0x24
 801de70:	e068      	b.n	801df44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801de72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de74:	685b      	ldr	r3, [r3, #4]
 801de76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801de78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de7a:	889b      	ldrh	r3, [r3, #4]
 801de7c:	b29a      	uxth	r2, r3
 801de7e:	693b      	ldr	r3, [r7, #16]
 801de80:	889b      	ldrh	r3, [r3, #4]
 801de82:	b29b      	uxth	r3, r3
 801de84:	429a      	cmp	r2, r3
 801de86:	d235      	bcs.n	801def4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801de88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801de8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801de8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de90:	2b00      	cmp	r3, #0
 801de92:	d020      	beq.n	801ded6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801de94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de96:	889b      	ldrh	r3, [r3, #4]
 801de98:	b29a      	uxth	r2, r3
 801de9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de9c:	88db      	ldrh	r3, [r3, #6]
 801de9e:	b29b      	uxth	r3, r3
 801dea0:	429a      	cmp	r2, r3
 801dea2:	d307      	bcc.n	801deb4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801dea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dea6:	88db      	ldrh	r3, [r3, #6]
 801dea8:	b29a      	uxth	r2, r3
 801deaa:	693b      	ldr	r3, [r7, #16]
 801deac:	889b      	ldrh	r3, [r3, #4]
 801deae:	b29b      	uxth	r3, r3
 801deb0:	429a      	cmp	r2, r3
 801deb2:	d902      	bls.n	801deba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801deb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801deb8:	e0de      	b.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801deba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801debc:	68ba      	ldr	r2, [r7, #8]
 801debe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801dec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dec2:	88db      	ldrh	r3, [r3, #6]
 801dec4:	b29a      	uxth	r2, r3
 801dec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dec8:	889b      	ldrh	r3, [r3, #4]
 801deca:	b29b      	uxth	r3, r3
 801decc:	429a      	cmp	r2, r3
 801dece:	d03d      	beq.n	801df4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ded0:	2300      	movs	r3, #0
 801ded2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ded4:	e03a      	b.n	801df4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ded6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ded8:	88db      	ldrh	r3, [r3, #6]
 801deda:	b29a      	uxth	r2, r3
 801dedc:	693b      	ldr	r3, [r7, #16]
 801dede:	889b      	ldrh	r3, [r3, #4]
 801dee0:	b29b      	uxth	r3, r3
 801dee2:	429a      	cmp	r2, r3
 801dee4:	d902      	bls.n	801deec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dee6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801deea:	e0c5      	b.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	68ba      	ldr	r2, [r7, #8]
 801def0:	605a      	str	r2, [r3, #4]
      break;
 801def2:	e02b      	b.n	801df4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801def4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801def6:	889b      	ldrh	r3, [r3, #4]
 801def8:	b29a      	uxth	r2, r3
 801defa:	693b      	ldr	r3, [r7, #16]
 801defc:	889b      	ldrh	r3, [r3, #4]
 801defe:	b29b      	uxth	r3, r3
 801df00:	429a      	cmp	r2, r3
 801df02:	d102      	bne.n	801df0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801df04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801df08:	e0b6      	b.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801df0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df0c:	889b      	ldrh	r3, [r3, #4]
 801df0e:	b29a      	uxth	r2, r3
 801df10:	693b      	ldr	r3, [r7, #16]
 801df12:	88db      	ldrh	r3, [r3, #6]
 801df14:	b29b      	uxth	r3, r3
 801df16:	429a      	cmp	r2, r3
 801df18:	d202      	bcs.n	801df20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801df1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801df1e:	e0ab      	b.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801df20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df22:	2b00      	cmp	r3, #0
 801df24:	d009      	beq.n	801df3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801df26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df28:	88db      	ldrh	r3, [r3, #6]
 801df2a:	b29a      	uxth	r2, r3
 801df2c:	693b      	ldr	r3, [r7, #16]
 801df2e:	889b      	ldrh	r3, [r3, #4]
 801df30:	b29b      	uxth	r3, r3
 801df32:	429a      	cmp	r2, r3
 801df34:	d001      	beq.n	801df3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801df36:	2300      	movs	r3, #0
 801df38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801df3a:	693b      	ldr	r3, [r7, #16]
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801df40:	693b      	ldr	r3, [r7, #16]
 801df42:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801df44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df46:	2b00      	cmp	r3, #0
 801df48:	d193      	bne.n	801de72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801df4a:	e000      	b.n	801df4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801df4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801df4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df50:	2b00      	cmp	r3, #0
 801df52:	d12d      	bne.n	801dfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801df54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df56:	2b00      	cmp	r3, #0
 801df58:	d01c      	beq.n	801df94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801df5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df5c:	88db      	ldrh	r3, [r3, #6]
 801df5e:	b29a      	uxth	r2, r3
 801df60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df62:	889b      	ldrh	r3, [r3, #4]
 801df64:	b29b      	uxth	r3, r3
 801df66:	429a      	cmp	r2, r3
 801df68:	d906      	bls.n	801df78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801df6a:	4b45      	ldr	r3, [pc, #276]	@ (801e080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801df6c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801df70:	4944      	ldr	r1, [pc, #272]	@ (801e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801df72:	4845      	ldr	r0, [pc, #276]	@ (801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801df74:	f002 f998 	bl	80202a8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801df78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df7a:	68ba      	ldr	r2, [r7, #8]
 801df7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801df7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df80:	88db      	ldrh	r3, [r3, #6]
 801df82:	b29a      	uxth	r2, r3
 801df84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df86:	889b      	ldrh	r3, [r3, #4]
 801df88:	b29b      	uxth	r3, r3
 801df8a:	429a      	cmp	r2, r3
 801df8c:	d010      	beq.n	801dfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801df8e:	2300      	movs	r3, #0
 801df90:	623b      	str	r3, [r7, #32]
 801df92:	e00d      	b.n	801dfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	685b      	ldr	r3, [r3, #4]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d006      	beq.n	801dfaa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801df9c:	4b38      	ldr	r3, [pc, #224]	@ (801e080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801df9e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801dfa2:	493a      	ldr	r1, [pc, #232]	@ (801e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801dfa4:	4838      	ldr	r0, [pc, #224]	@ (801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dfa6:	f002 f97f 	bl	80202a8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	68ba      	ldr	r2, [r7, #8]
 801dfae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d105      	bne.n	801dfc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	7f9b      	ldrb	r3, [r3, #30]
 801dfba:	f003 0301 	and.w	r3, r3, #1
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d059      	beq.n	801e076 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801dfc2:	6a3b      	ldr	r3, [r7, #32]
 801dfc4:	2b00      	cmp	r3, #0
 801dfc6:	d04f      	beq.n	801e068 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	685b      	ldr	r3, [r3, #4]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	d006      	beq.n	801dfde <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	685b      	ldr	r3, [r3, #4]
 801dfd4:	685b      	ldr	r3, [r3, #4]
 801dfd6:	889b      	ldrh	r3, [r3, #4]
 801dfd8:	b29b      	uxth	r3, r3
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d002      	beq.n	801dfe4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801dfde:	2300      	movs	r3, #0
 801dfe0:	623b      	str	r3, [r7, #32]
 801dfe2:	e041      	b.n	801e068 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801dfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dfe6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801dfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801dfee:	e012      	b.n	801e016 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801dff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dff2:	685b      	ldr	r3, [r3, #4]
 801dff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801dff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dff8:	88db      	ldrh	r3, [r3, #6]
 801dffa:	b29a      	uxth	r2, r3
 801dffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dffe:	889b      	ldrh	r3, [r3, #4]
 801e000:	b29b      	uxth	r3, r3
 801e002:	429a      	cmp	r2, r3
 801e004:	d002      	beq.n	801e00c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e006:	2300      	movs	r3, #0
 801e008:	623b      	str	r3, [r7, #32]
            break;
 801e00a:	e007      	b.n	801e01c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e00e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801e010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801e016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d1e9      	bne.n	801dff0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e01c:	6a3b      	ldr	r3, [r7, #32]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d022      	beq.n	801e068 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	685b      	ldr	r3, [r3, #4]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d106      	bne.n	801e038 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e02a:	4b15      	ldr	r3, [pc, #84]	@ (801e080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e02c:	f240 12df 	movw	r2, #479	@ 0x1df
 801e030:	4917      	ldr	r1, [pc, #92]	@ (801e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e032:	4815      	ldr	r0, [pc, #84]	@ (801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e034:	f002 f938 	bl	80202a8 <iprintf>
          LWIP_ASSERT("sanity check",
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	685b      	ldr	r3, [r3, #4]
 801e03c:	685b      	ldr	r3, [r3, #4]
 801e03e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e040:	429a      	cmp	r2, r3
 801e042:	d106      	bne.n	801e052 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e044:	4b0e      	ldr	r3, [pc, #56]	@ (801e080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e046:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801e04a:	4911      	ldr	r1, [pc, #68]	@ (801e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e04c:	480e      	ldr	r0, [pc, #56]	@ (801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e04e:	f002 f92b 	bl	80202a8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	2b00      	cmp	r3, #0
 801e058:	d006      	beq.n	801e068 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e05a:	4b09      	ldr	r3, [pc, #36]	@ (801e080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e05c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801e060:	490c      	ldr	r1, [pc, #48]	@ (801e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e062:	4809      	ldr	r0, [pc, #36]	@ (801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e064:	f002 f920 	bl	80202a8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e068:	6a3b      	ldr	r3, [r7, #32]
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	bf14      	ite	ne
 801e06e:	2301      	movne	r3, #1
 801e070:	2300      	moveq	r3, #0
 801e072:	b2db      	uxtb	r3, r3
 801e074:	e000      	b.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e076:	2300      	movs	r3, #0
}
 801e078:	4618      	mov	r0, r3
 801e07a:	3730      	adds	r7, #48	@ 0x30
 801e07c:	46bd      	mov	sp, r7
 801e07e:	bd80      	pop	{r7, pc}
 801e080:	080245cc 	.word	0x080245cc
 801e084:	080246b0 	.word	0x080246b0
 801e088:	08024614 	.word	0x08024614
 801e08c:	080246d0 	.word	0x080246d0
 801e090:	08024708 	.word	0x08024708
 801e094:	08024718 	.word	0x08024718

0801e098 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e098:	b580      	push	{r7, lr}
 801e09a:	b08e      	sub	sp, #56	@ 0x38
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801e0a0:	4b9d      	ldr	r3, [pc, #628]	@ (801e318 <ip4_reass+0x280>)
 801e0a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e0a4:	3301      	adds	r3, #1
 801e0a6:	b29a      	uxth	r2, r3
 801e0a8:	4b9b      	ldr	r3, [pc, #620]	@ (801e318 <ip4_reass+0x280>)
 801e0aa:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	685b      	ldr	r3, [r3, #4]
 801e0b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0b4:	781b      	ldrb	r3, [r3, #0]
 801e0b6:	f003 030f 	and.w	r3, r3, #15
 801e0ba:	b2db      	uxtb	r3, r3
 801e0bc:	009b      	lsls	r3, r3, #2
 801e0be:	b2db      	uxtb	r3, r3
 801e0c0:	2b14      	cmp	r3, #20
 801e0c2:	d008      	beq.n	801e0d6 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801e0c4:	4b94      	ldr	r3, [pc, #592]	@ (801e318 <ip4_reass+0x280>)
 801e0c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801e0ca:	3301      	adds	r3, #1
 801e0cc:	b29a      	uxth	r2, r3
 801e0ce:	4b92      	ldr	r3, [pc, #584]	@ (801e318 <ip4_reass+0x280>)
 801e0d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801e0d4:	e17c      	b.n	801e3d0 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0d8:	88db      	ldrh	r3, [r3, #6]
 801e0da:	b29b      	uxth	r3, r3
 801e0dc:	4618      	mov	r0, r3
 801e0de:	f7f5 f975 	bl	80133cc <lwip_htons>
 801e0e2:	4603      	mov	r3, r0
 801e0e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e0e8:	b29b      	uxth	r3, r3
 801e0ea:	00db      	lsls	r3, r3, #3
 801e0ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0f0:	885b      	ldrh	r3, [r3, #2]
 801e0f2:	b29b      	uxth	r3, r3
 801e0f4:	4618      	mov	r0, r3
 801e0f6:	f7f5 f969 	bl	80133cc <lwip_htons>
 801e0fa:	4603      	mov	r3, r0
 801e0fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e100:	781b      	ldrb	r3, [r3, #0]
 801e102:	f003 030f 	and.w	r3, r3, #15
 801e106:	b2db      	uxtb	r3, r3
 801e108:	009b      	lsls	r3, r3, #2
 801e10a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801e10e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e112:	b29b      	uxth	r3, r3
 801e114:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e116:	429a      	cmp	r2, r3
 801e118:	f0c0 8157 	bcc.w	801e3ca <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e11c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e120:	b29b      	uxth	r3, r3
 801e122:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e124:	1ad3      	subs	r3, r2, r3
 801e126:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e128:	6878      	ldr	r0, [r7, #4]
 801e12a:	f7f6 fe9b 	bl	8014e64 <pbuf_clen>
 801e12e:	4603      	mov	r3, r0
 801e130:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e132:	4b7a      	ldr	r3, [pc, #488]	@ (801e31c <ip4_reass+0x284>)
 801e134:	881b      	ldrh	r3, [r3, #0]
 801e136:	461a      	mov	r2, r3
 801e138:	8c3b      	ldrh	r3, [r7, #32]
 801e13a:	4413      	add	r3, r2
 801e13c:	2b0a      	cmp	r3, #10
 801e13e:	dd15      	ble.n	801e16c <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e140:	8c3b      	ldrh	r3, [r7, #32]
 801e142:	4619      	mov	r1, r3
 801e144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e146:	f7ff fd6b 	bl	801dc20 <ip_reass_remove_oldest_datagram>
 801e14a:	4603      	mov	r3, r0
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d006      	beq.n	801e15e <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e150:	4b72      	ldr	r3, [pc, #456]	@ (801e31c <ip4_reass+0x284>)
 801e152:	881b      	ldrh	r3, [r3, #0]
 801e154:	461a      	mov	r2, r3
 801e156:	8c3b      	ldrh	r3, [r7, #32]
 801e158:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e15a:	2b0a      	cmp	r3, #10
 801e15c:	dd06      	ble.n	801e16c <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801e15e:	4b6e      	ldr	r3, [pc, #440]	@ (801e318 <ip4_reass+0x280>)
 801e160:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801e162:	3301      	adds	r3, #1
 801e164:	b29a      	uxth	r2, r3
 801e166:	4b6c      	ldr	r3, [pc, #432]	@ (801e318 <ip4_reass+0x280>)
 801e168:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801e16a:	e131      	b.n	801e3d0 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e16c:	4b6c      	ldr	r3, [pc, #432]	@ (801e320 <ip4_reass+0x288>)
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	633b      	str	r3, [r7, #48]	@ 0x30
 801e172:	e01e      	b.n	801e1b2 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e176:	695a      	ldr	r2, [r3, #20]
 801e178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e17a:	68db      	ldr	r3, [r3, #12]
 801e17c:	429a      	cmp	r2, r3
 801e17e:	d115      	bne.n	801e1ac <ip4_reass+0x114>
 801e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e182:	699a      	ldr	r2, [r3, #24]
 801e184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e186:	691b      	ldr	r3, [r3, #16]
 801e188:	429a      	cmp	r2, r3
 801e18a:	d10f      	bne.n	801e1ac <ip4_reass+0x114>
 801e18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e18e:	899a      	ldrh	r2, [r3, #12]
 801e190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e192:	889b      	ldrh	r3, [r3, #4]
 801e194:	b29b      	uxth	r3, r3
 801e196:	429a      	cmp	r2, r3
 801e198:	d108      	bne.n	801e1ac <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801e19a:	4b5f      	ldr	r3, [pc, #380]	@ (801e318 <ip4_reass+0x280>)
 801e19c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e1a0:	3301      	adds	r3, #1
 801e1a2:	b29a      	uxth	r2, r3
 801e1a4:	4b5c      	ldr	r3, [pc, #368]	@ (801e318 <ip4_reass+0x280>)
 801e1a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801e1aa:	e005      	b.n	801e1b8 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	633b      	str	r3, [r7, #48]	@ 0x30
 801e1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	d1dd      	bne.n	801e174 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801e1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d109      	bne.n	801e1d2 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e1be:	8c3b      	ldrh	r3, [r7, #32]
 801e1c0:	4619      	mov	r1, r3
 801e1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e1c4:	f7ff fd8e 	bl	801dce4 <ip_reass_enqueue_new_datagram>
 801e1c8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	d11c      	bne.n	801e20a <ip4_reass+0x172>
      goto nullreturn;
 801e1d0:	e0fe      	b.n	801e3d0 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e1d4:	88db      	ldrh	r3, [r3, #6]
 801e1d6:	b29b      	uxth	r3, r3
 801e1d8:	4618      	mov	r0, r3
 801e1da:	f7f5 f8f7 	bl	80133cc <lwip_htons>
 801e1de:	4603      	mov	r3, r0
 801e1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d110      	bne.n	801e20a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1ea:	89db      	ldrh	r3, [r3, #14]
 801e1ec:	4618      	mov	r0, r3
 801e1ee:	f7f5 f8ed 	bl	80133cc <lwip_htons>
 801e1f2:	4603      	mov	r3, r0
 801e1f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d006      	beq.n	801e20a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1fe:	3308      	adds	r3, #8
 801e200:	2214      	movs	r2, #20
 801e202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e204:	4618      	mov	r0, r3
 801e206:	f002 fa7a 	bl	80206fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e20c:	88db      	ldrh	r3, [r3, #6]
 801e20e:	b29b      	uxth	r3, r3
 801e210:	f003 0320 	and.w	r3, r3, #32
 801e214:	2b00      	cmp	r3, #0
 801e216:	bf0c      	ite	eq
 801e218:	2301      	moveq	r3, #1
 801e21a:	2300      	movne	r3, #0
 801e21c:	b2db      	uxtb	r3, r3
 801e21e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e220:	69fb      	ldr	r3, [r7, #28]
 801e222:	2b00      	cmp	r3, #0
 801e224:	d00e      	beq.n	801e244 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801e226:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e22a:	4413      	add	r3, r2
 801e22c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e22e:	8b7a      	ldrh	r2, [r7, #26]
 801e230:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801e232:	429a      	cmp	r2, r3
 801e234:	f0c0 80a7 	bcc.w	801e386 <ip4_reass+0x2ee>
 801e238:	8b7b      	ldrh	r3, [r7, #26]
 801e23a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801e23e:	4293      	cmp	r3, r2
 801e240:	f200 80a1 	bhi.w	801e386 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e244:	69fa      	ldr	r2, [r7, #28]
 801e246:	6879      	ldr	r1, [r7, #4]
 801e248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e24a:	f7ff fdbb 	bl	801ddc4 <ip_reass_chain_frag_into_datagram_and_validate>
 801e24e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e250:	697b      	ldr	r3, [r7, #20]
 801e252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e256:	f000 8098 	beq.w	801e38a <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e25a:	4b30      	ldr	r3, [pc, #192]	@ (801e31c <ip4_reass+0x284>)
 801e25c:	881a      	ldrh	r2, [r3, #0]
 801e25e:	8c3b      	ldrh	r3, [r7, #32]
 801e260:	4413      	add	r3, r2
 801e262:	b29a      	uxth	r2, r3
 801e264:	4b2d      	ldr	r3, [pc, #180]	@ (801e31c <ip4_reass+0x284>)
 801e266:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e268:	69fb      	ldr	r3, [r7, #28]
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d00d      	beq.n	801e28a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801e26e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e270:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e272:	4413      	add	r3, r2
 801e274:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e278:	8a7a      	ldrh	r2, [r7, #18]
 801e27a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e27e:	7f9b      	ldrb	r3, [r3, #30]
 801e280:	f043 0301 	orr.w	r3, r3, #1
 801e284:	b2da      	uxtb	r2, r3
 801e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e288:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e28a:	697b      	ldr	r3, [r7, #20]
 801e28c:	2b01      	cmp	r3, #1
 801e28e:	d178      	bne.n	801e382 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e292:	8b9b      	ldrh	r3, [r3, #28]
 801e294:	3314      	adds	r3, #20
 801e296:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e29a:	685b      	ldr	r3, [r3, #4]
 801e29c:	685b      	ldr	r3, [r3, #4]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2a4:	685b      	ldr	r3, [r3, #4]
 801e2a6:	685b      	ldr	r3, [r3, #4]
 801e2a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2ac:	3308      	adds	r3, #8
 801e2ae:	2214      	movs	r2, #20
 801e2b0:	4619      	mov	r1, r3
 801e2b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e2b4:	f002 fa23 	bl	80206fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e2b8:	8a3b      	ldrh	r3, [r7, #16]
 801e2ba:	4618      	mov	r0, r3
 801e2bc:	f7f5 f886 	bl	80133cc <lwip_htons>
 801e2c0:	4603      	mov	r3, r0
 801e2c2:	461a      	mov	r2, r3
 801e2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2ca:	2200      	movs	r2, #0
 801e2cc:	719a      	strb	r2, [r3, #6]
 801e2ce:	2200      	movs	r2, #0
 801e2d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	729a      	strb	r2, [r3, #10]
 801e2d8:	2200      	movs	r2, #0
 801e2da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2de:	685b      	ldr	r3, [r3, #4]
 801e2e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e2e2:	e00d      	b.n	801e300 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801e2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2e6:	685b      	ldr	r3, [r3, #4]
 801e2e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e2ea:	2114      	movs	r1, #20
 801e2ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e2ee:	f7f6 fca5 	bl	8014c3c <pbuf_remove_header>
      pbuf_cat(p, r);
 801e2f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e2f4:	6878      	ldr	r0, [r7, #4]
 801e2f6:	f7f6 fdf5 	bl	8014ee4 <pbuf_cat>
      r = iprh->next_pbuf;
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801e300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e302:	2b00      	cmp	r3, #0
 801e304:	d1ee      	bne.n	801e2e4 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e306:	4b06      	ldr	r3, [pc, #24]	@ (801e320 <ip4_reass+0x288>)
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e30c:	429a      	cmp	r2, r3
 801e30e:	d109      	bne.n	801e324 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801e310:	2300      	movs	r3, #0
 801e312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e314:	e017      	b.n	801e346 <ip4_reass+0x2ae>
 801e316:	bf00      	nop
 801e318:	200252ac 	.word	0x200252ac
 801e31c:	20025500 	.word	0x20025500
 801e320:	200254fc 	.word	0x200254fc
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e324:	4b31      	ldr	r3, [pc, #196]	@ (801e3ec <ip4_reass+0x354>)
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e32a:	e007      	b.n	801e33c <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801e32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e332:	429a      	cmp	r2, r3
 801e334:	d006      	beq.n	801e344 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d1f4      	bne.n	801e32c <ip4_reass+0x294>
 801e342:	e000      	b.n	801e346 <ip4_reass+0x2ae>
          break;
 801e344:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e34a:	f7ff fd0d 	bl	801dd68 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e34e:	6878      	ldr	r0, [r7, #4]
 801e350:	f7f6 fd88 	bl	8014e64 <pbuf_clen>
 801e354:	4603      	mov	r3, r0
 801e356:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e358:	4b25      	ldr	r3, [pc, #148]	@ (801e3f0 <ip4_reass+0x358>)
 801e35a:	881b      	ldrh	r3, [r3, #0]
 801e35c:	8c3a      	ldrh	r2, [r7, #32]
 801e35e:	429a      	cmp	r2, r3
 801e360:	d906      	bls.n	801e370 <ip4_reass+0x2d8>
 801e362:	4b24      	ldr	r3, [pc, #144]	@ (801e3f4 <ip4_reass+0x35c>)
 801e364:	f240 229b 	movw	r2, #667	@ 0x29b
 801e368:	4923      	ldr	r1, [pc, #140]	@ (801e3f8 <ip4_reass+0x360>)
 801e36a:	4824      	ldr	r0, [pc, #144]	@ (801e3fc <ip4_reass+0x364>)
 801e36c:	f001 ff9c 	bl	80202a8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e370:	4b1f      	ldr	r3, [pc, #124]	@ (801e3f0 <ip4_reass+0x358>)
 801e372:	881a      	ldrh	r2, [r3, #0]
 801e374:	8c3b      	ldrh	r3, [r7, #32]
 801e376:	1ad3      	subs	r3, r2, r3
 801e378:	b29a      	uxth	r2, r3
 801e37a:	4b1d      	ldr	r3, [pc, #116]	@ (801e3f0 <ip4_reass+0x358>)
 801e37c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	e030      	b.n	801e3e4 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e382:	2300      	movs	r3, #0
 801e384:	e02e      	b.n	801e3e4 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801e386:	bf00      	nop
 801e388:	e000      	b.n	801e38c <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801e38a:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e38e:	2b00      	cmp	r3, #0
 801e390:	d106      	bne.n	801e3a0 <ip4_reass+0x308>
 801e392:	4b18      	ldr	r3, [pc, #96]	@ (801e3f4 <ip4_reass+0x35c>)
 801e394:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801e398:	4919      	ldr	r1, [pc, #100]	@ (801e400 <ip4_reass+0x368>)
 801e39a:	4818      	ldr	r0, [pc, #96]	@ (801e3fc <ip4_reass+0x364>)
 801e39c:	f001 ff84 	bl	80202a8 <iprintf>
  if (ipr->p == NULL) {
 801e3a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e3a2:	685b      	ldr	r3, [r3, #4]
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d112      	bne.n	801e3ce <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e3a8:	4b10      	ldr	r3, [pc, #64]	@ (801e3ec <ip4_reass+0x354>)
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e3ae:	429a      	cmp	r2, r3
 801e3b0:	d006      	beq.n	801e3c0 <ip4_reass+0x328>
 801e3b2:	4b10      	ldr	r3, [pc, #64]	@ (801e3f4 <ip4_reass+0x35c>)
 801e3b4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801e3b8:	4912      	ldr	r1, [pc, #72]	@ (801e404 <ip4_reass+0x36c>)
 801e3ba:	4810      	ldr	r0, [pc, #64]	@ (801e3fc <ip4_reass+0x364>)
 801e3bc:	f001 ff74 	bl	80202a8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e3c0:	2100      	movs	r1, #0
 801e3c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e3c4:	f7ff fcd0 	bl	801dd68 <ip_reass_dequeue_datagram>
 801e3c8:	e002      	b.n	801e3d0 <ip4_reass+0x338>
    goto nullreturn;
 801e3ca:	bf00      	nop
 801e3cc:	e000      	b.n	801e3d0 <ip4_reass+0x338>
  }

nullreturn:
 801e3ce:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801e3d0:	4b0d      	ldr	r3, [pc, #52]	@ (801e408 <ip4_reass+0x370>)
 801e3d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801e3d4:	3301      	adds	r3, #1
 801e3d6:	b29a      	uxth	r2, r3
 801e3d8:	4b0b      	ldr	r3, [pc, #44]	@ (801e408 <ip4_reass+0x370>)
 801e3da:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801e3dc:	6878      	ldr	r0, [r7, #4]
 801e3de:	f7f6 fcb3 	bl	8014d48 <pbuf_free>
  return NULL;
 801e3e2:	2300      	movs	r3, #0
}
 801e3e4:	4618      	mov	r0, r3
 801e3e6:	3738      	adds	r7, #56	@ 0x38
 801e3e8:	46bd      	mov	sp, r7
 801e3ea:	bd80      	pop	{r7, pc}
 801e3ec:	200254fc 	.word	0x200254fc
 801e3f0:	20025500 	.word	0x20025500
 801e3f4:	080245cc 	.word	0x080245cc
 801e3f8:	0802473c 	.word	0x0802473c
 801e3fc:	08024614 	.word	0x08024614
 801e400:	08024758 	.word	0x08024758
 801e404:	08024764 	.word	0x08024764
 801e408:	200252ac 	.word	0x200252ac

0801e40c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e40c:	b580      	push	{r7, lr}
 801e40e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e410:	2005      	movs	r0, #5
 801e412:	f7f5 fd79 	bl	8013f08 <memp_malloc>
 801e416:	4603      	mov	r3, r0
}
 801e418:	4618      	mov	r0, r3
 801e41a:	bd80      	pop	{r7, pc}

0801e41c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e41c:	b580      	push	{r7, lr}
 801e41e:	b082      	sub	sp, #8
 801e420:	af00      	add	r7, sp, #0
 801e422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	2b00      	cmp	r3, #0
 801e428:	d106      	bne.n	801e438 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e42a:	4b07      	ldr	r3, [pc, #28]	@ (801e448 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e42c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801e430:	4906      	ldr	r1, [pc, #24]	@ (801e44c <ip_frag_free_pbuf_custom_ref+0x30>)
 801e432:	4807      	ldr	r0, [pc, #28]	@ (801e450 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e434:	f001 ff38 	bl	80202a8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e438:	6879      	ldr	r1, [r7, #4]
 801e43a:	2005      	movs	r0, #5
 801e43c:	f7f5 fde0 	bl	8014000 <memp_free>
}
 801e440:	bf00      	nop
 801e442:	3708      	adds	r7, #8
 801e444:	46bd      	mov	sp, r7
 801e446:	bd80      	pop	{r7, pc}
 801e448:	080245cc 	.word	0x080245cc
 801e44c:	08024784 	.word	0x08024784
 801e450:	08024614 	.word	0x08024614

0801e454 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e454:	b580      	push	{r7, lr}
 801e456:	b084      	sub	sp, #16
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	2b00      	cmp	r3, #0
 801e464:	d106      	bne.n	801e474 <ipfrag_free_pbuf_custom+0x20>
 801e466:	4b11      	ldr	r3, [pc, #68]	@ (801e4ac <ipfrag_free_pbuf_custom+0x58>)
 801e468:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801e46c:	4910      	ldr	r1, [pc, #64]	@ (801e4b0 <ipfrag_free_pbuf_custom+0x5c>)
 801e46e:	4811      	ldr	r0, [pc, #68]	@ (801e4b4 <ipfrag_free_pbuf_custom+0x60>)
 801e470:	f001 ff1a 	bl	80202a8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e474:	68fa      	ldr	r2, [r7, #12]
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	429a      	cmp	r2, r3
 801e47a:	d006      	beq.n	801e48a <ipfrag_free_pbuf_custom+0x36>
 801e47c:	4b0b      	ldr	r3, [pc, #44]	@ (801e4ac <ipfrag_free_pbuf_custom+0x58>)
 801e47e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801e482:	490d      	ldr	r1, [pc, #52]	@ (801e4b8 <ipfrag_free_pbuf_custom+0x64>)
 801e484:	480b      	ldr	r0, [pc, #44]	@ (801e4b4 <ipfrag_free_pbuf_custom+0x60>)
 801e486:	f001 ff0f 	bl	80202a8 <iprintf>
  if (pcr->original != NULL) {
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	695b      	ldr	r3, [r3, #20]
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d004      	beq.n	801e49c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	695b      	ldr	r3, [r3, #20]
 801e496:	4618      	mov	r0, r3
 801e498:	f7f6 fc56 	bl	8014d48 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e49c:	68f8      	ldr	r0, [r7, #12]
 801e49e:	f7ff ffbd 	bl	801e41c <ip_frag_free_pbuf_custom_ref>
}
 801e4a2:	bf00      	nop
 801e4a4:	3710      	adds	r7, #16
 801e4a6:	46bd      	mov	sp, r7
 801e4a8:	bd80      	pop	{r7, pc}
 801e4aa:	bf00      	nop
 801e4ac:	080245cc 	.word	0x080245cc
 801e4b0:	08024790 	.word	0x08024790
 801e4b4:	08024614 	.word	0x08024614
 801e4b8:	0802479c 	.word	0x0802479c

0801e4bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	b094      	sub	sp, #80	@ 0x50
 801e4c0:	af02      	add	r7, sp, #8
 801e4c2:	60f8      	str	r0, [r7, #12]
 801e4c4:	60b9      	str	r1, [r7, #8]
 801e4c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e4ce:	68bb      	ldr	r3, [r7, #8]
 801e4d0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e4d2:	3b14      	subs	r3, #20
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	da00      	bge.n	801e4da <ip4_frag+0x1e>
 801e4d8:	3307      	adds	r3, #7
 801e4da:	10db      	asrs	r3, r3, #3
 801e4dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e4de:	2314      	movs	r3, #20
 801e4e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e4e2:	68fb      	ldr	r3, [r7, #12]
 801e4e4:	685b      	ldr	r3, [r3, #4]
 801e4e6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801e4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e4ea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e4ee:	781b      	ldrb	r3, [r3, #0]
 801e4f0:	f003 030f 	and.w	r3, r3, #15
 801e4f4:	b2db      	uxtb	r3, r3
 801e4f6:	009b      	lsls	r3, r3, #2
 801e4f8:	b2db      	uxtb	r3, r3
 801e4fa:	2b14      	cmp	r3, #20
 801e4fc:	d002      	beq.n	801e504 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e4fe:	f06f 0305 	mvn.w	r3, #5
 801e502:	e116      	b.n	801e732 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e504:	68fb      	ldr	r3, [r7, #12]
 801e506:	895b      	ldrh	r3, [r3, #10]
 801e508:	2b13      	cmp	r3, #19
 801e50a:	d809      	bhi.n	801e520 <ip4_frag+0x64>
 801e50c:	4b8b      	ldr	r3, [pc, #556]	@ (801e73c <ip4_frag+0x280>)
 801e50e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801e512:	498b      	ldr	r1, [pc, #556]	@ (801e740 <ip4_frag+0x284>)
 801e514:	488b      	ldr	r0, [pc, #556]	@ (801e744 <ip4_frag+0x288>)
 801e516:	f001 fec7 	bl	80202a8 <iprintf>
 801e51a:	f06f 0305 	mvn.w	r3, #5
 801e51e:	e108      	b.n	801e732 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e522:	88db      	ldrh	r3, [r3, #6]
 801e524:	b29b      	uxth	r3, r3
 801e526:	4618      	mov	r0, r3
 801e528:	f7f4 ff50 	bl	80133cc <lwip_htons>
 801e52c:	4603      	mov	r3, r0
 801e52e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801e530:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e536:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e53a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e53c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801e540:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e542:	68fb      	ldr	r3, [r7, #12]
 801e544:	891b      	ldrh	r3, [r3, #8]
 801e546:	3b14      	subs	r3, #20
 801e548:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801e54c:	e0e7      	b.n	801e71e <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e54e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e550:	00db      	lsls	r3, r3, #3
 801e552:	b29b      	uxth	r3, r3
 801e554:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e558:	4293      	cmp	r3, r2
 801e55a:	bf28      	it	cs
 801e55c:	4613      	movcs	r3, r2
 801e55e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e560:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e564:	2114      	movs	r1, #20
 801e566:	200e      	movs	r0, #14
 801e568:	f7f6 f90a 	bl	8014780 <pbuf_alloc>
 801e56c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801e56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e570:	2b00      	cmp	r3, #0
 801e572:	f000 80db 	beq.w	801e72c <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e578:	895b      	ldrh	r3, [r3, #10]
 801e57a:	2b13      	cmp	r3, #19
 801e57c:	d806      	bhi.n	801e58c <ip4_frag+0xd0>
 801e57e:	4b6f      	ldr	r3, [pc, #444]	@ (801e73c <ip4_frag+0x280>)
 801e580:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801e584:	4970      	ldr	r1, [pc, #448]	@ (801e748 <ip4_frag+0x28c>)
 801e586:	486f      	ldr	r0, [pc, #444]	@ (801e744 <ip4_frag+0x288>)
 801e588:	f001 fe8e 	bl	80202a8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e58e:	685b      	ldr	r3, [r3, #4]
 801e590:	2214      	movs	r2, #20
 801e592:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e594:	4618      	mov	r0, r3
 801e596:	f002 f8b2 	bl	80206fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e59c:	685b      	ldr	r3, [r3, #4]
 801e59e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801e5a0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e5a2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801e5a6:	e064      	b.n	801e672 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	895a      	ldrh	r2, [r3, #10]
 801e5ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e5ae:	1ad3      	subs	r3, r2, r3
 801e5b0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e5b2:	68fb      	ldr	r3, [r7, #12]
 801e5b4:	895b      	ldrh	r3, [r3, #10]
 801e5b6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e5b8:	429a      	cmp	r2, r3
 801e5ba:	d906      	bls.n	801e5ca <ip4_frag+0x10e>
 801e5bc:	4b5f      	ldr	r3, [pc, #380]	@ (801e73c <ip4_frag+0x280>)
 801e5be:	f240 322d 	movw	r2, #813	@ 0x32d
 801e5c2:	4962      	ldr	r1, [pc, #392]	@ (801e74c <ip4_frag+0x290>)
 801e5c4:	485f      	ldr	r0, [pc, #380]	@ (801e744 <ip4_frag+0x288>)
 801e5c6:	f001 fe6f 	bl	80202a8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e5ca:	8bfa      	ldrh	r2, [r7, #30]
 801e5cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e5d0:	4293      	cmp	r3, r2
 801e5d2:	bf28      	it	cs
 801e5d4:	4613      	movcs	r3, r2
 801e5d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e5da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d105      	bne.n	801e5ee <ip4_frag+0x132>
        poff = 0;
 801e5e2:	2300      	movs	r3, #0
 801e5e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	60fb      	str	r3, [r7, #12]
        continue;
 801e5ec:	e041      	b.n	801e672 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e5ee:	f7ff ff0d 	bl	801e40c <ip_frag_alloc_pbuf_custom_ref>
 801e5f2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e5f4:	69bb      	ldr	r3, [r7, #24]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d103      	bne.n	801e602 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e5fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e5fc:	f7f6 fba4 	bl	8014d48 <pbuf_free>
        goto memerr;
 801e600:	e095      	b.n	801e72e <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e602:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e604:	68fb      	ldr	r3, [r7, #12]
 801e606:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e608:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e60a:	4413      	add	r3, r2
 801e60c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801e610:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801e614:	9201      	str	r2, [sp, #4]
 801e616:	9300      	str	r3, [sp, #0]
 801e618:	4603      	mov	r3, r0
 801e61a:	2241      	movs	r2, #65	@ 0x41
 801e61c:	2000      	movs	r0, #0
 801e61e:	f7f6 f9d9 	bl	80149d4 <pbuf_alloced_custom>
 801e622:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e624:	697b      	ldr	r3, [r7, #20]
 801e626:	2b00      	cmp	r3, #0
 801e628:	d106      	bne.n	801e638 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e62a:	69b8      	ldr	r0, [r7, #24]
 801e62c:	f7ff fef6 	bl	801e41c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e630:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e632:	f7f6 fb89 	bl	8014d48 <pbuf_free>
        goto memerr;
 801e636:	e07a      	b.n	801e72e <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801e638:	68f8      	ldr	r0, [r7, #12]
 801e63a:	f7f6 fc2b 	bl	8014e94 <pbuf_ref>
      pcr->original = p;
 801e63e:	69bb      	ldr	r3, [r7, #24]
 801e640:	68fa      	ldr	r2, [r7, #12]
 801e642:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e644:	69bb      	ldr	r3, [r7, #24]
 801e646:	4a42      	ldr	r2, [pc, #264]	@ (801e750 <ip4_frag+0x294>)
 801e648:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e64a:	6979      	ldr	r1, [r7, #20]
 801e64c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e64e:	f7f6 fc49 	bl	8014ee4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e652:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801e656:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e65a:	1ad3      	subs	r3, r2, r3
 801e65c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801e660:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e664:	2b00      	cmp	r3, #0
 801e666:	d004      	beq.n	801e672 <ip4_frag+0x1b6>
        poff = 0;
 801e668:	2300      	movs	r3, #0
 801e66a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e66c:	68fb      	ldr	r3, [r7, #12]
 801e66e:	681b      	ldr	r3, [r3, #0]
 801e670:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e672:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e676:	2b00      	cmp	r3, #0
 801e678:	d196      	bne.n	801e5a8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e67a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e67c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e680:	4413      	add	r3, r2
 801e682:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e684:	68bb      	ldr	r3, [r7, #8]
 801e686:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e688:	f1a3 0213 	sub.w	r2, r3, #19
 801e68c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e690:	429a      	cmp	r2, r3
 801e692:	bfcc      	ite	gt
 801e694:	2301      	movgt	r3, #1
 801e696:	2300      	movle	r3, #0
 801e698:	b2db      	uxtb	r3, r3
 801e69a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e69c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e6a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e6a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801e6a6:	6a3b      	ldr	r3, [r7, #32]
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d002      	beq.n	801e6b2 <ip4_frag+0x1f6>
 801e6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d003      	beq.n	801e6ba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e6b2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e6b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801e6b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e6ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e6bc:	4618      	mov	r0, r3
 801e6be:	f7f4 fe85 	bl	80133cc <lwip_htons>
 801e6c2:	4603      	mov	r3, r0
 801e6c4:	461a      	mov	r2, r3
 801e6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e6ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e6cc:	3314      	adds	r3, #20
 801e6ce:	b29b      	uxth	r3, r3
 801e6d0:	4618      	mov	r0, r3
 801e6d2:	f7f4 fe7b 	bl	80133cc <lwip_htons>
 801e6d6:	4603      	mov	r3, r0
 801e6d8:	461a      	mov	r2, r3
 801e6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6e0:	2200      	movs	r2, #0
 801e6e2:	729a      	strb	r2, [r3, #10]
 801e6e4:	2200      	movs	r2, #0
 801e6e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e6e8:	68bb      	ldr	r3, [r7, #8]
 801e6ea:	695b      	ldr	r3, [r3, #20]
 801e6ec:	687a      	ldr	r2, [r7, #4]
 801e6ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e6f0:	68b8      	ldr	r0, [r7, #8]
 801e6f2:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801e6f4:	4b17      	ldr	r3, [pc, #92]	@ (801e754 <ip4_frag+0x298>)
 801e6f6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801e6f8:	3301      	adds	r3, #1
 801e6fa:	b29a      	uxth	r2, r3
 801e6fc:	4b15      	ldr	r3, [pc, #84]	@ (801e754 <ip4_frag+0x298>)
 801e6fe:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e700:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e702:	f7f6 fb21 	bl	8014d48 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e706:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e70a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e70c:	1ad3      	subs	r3, r2, r3
 801e70e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801e712:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801e716:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e718:	4413      	add	r3, r2
 801e71a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801e71e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e722:	2b00      	cmp	r3, #0
 801e724:	f47f af13 	bne.w	801e54e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e728:	2300      	movs	r3, #0
 801e72a:	e002      	b.n	801e732 <ip4_frag+0x276>
      goto memerr;
 801e72c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e72e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801e732:	4618      	mov	r0, r3
 801e734:	3748      	adds	r7, #72	@ 0x48
 801e736:	46bd      	mov	sp, r7
 801e738:	bd80      	pop	{r7, pc}
 801e73a:	bf00      	nop
 801e73c:	080245cc 	.word	0x080245cc
 801e740:	080247a8 	.word	0x080247a8
 801e744:	08024614 	.word	0x08024614
 801e748:	080247c4 	.word	0x080247c4
 801e74c:	080247e4 	.word	0x080247e4
 801e750:	0801e455 	.word	0x0801e455
 801e754:	200252ac 	.word	0x200252ac

0801e758 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e758:	b580      	push	{r7, lr}
 801e75a:	b086      	sub	sp, #24
 801e75c:	af00      	add	r7, sp, #0
 801e75e:	6078      	str	r0, [r7, #4]
 801e760:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e762:	230e      	movs	r3, #14
 801e764:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e766:	687b      	ldr	r3, [r7, #4]
 801e768:	895b      	ldrh	r3, [r3, #10]
 801e76a:	2b0e      	cmp	r3, #14
 801e76c:	d80c      	bhi.n	801e788 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801e76e:	4b51      	ldr	r3, [pc, #324]	@ (801e8b4 <ethernet_input+0x15c>)
 801e770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e772:	3301      	adds	r3, #1
 801e774:	b29a      	uxth	r2, r3
 801e776:	4b4f      	ldr	r3, [pc, #316]	@ (801e8b4 <ethernet_input+0x15c>)
 801e778:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801e77a:	4b4e      	ldr	r3, [pc, #312]	@ (801e8b4 <ethernet_input+0x15c>)
 801e77c:	8bdb      	ldrh	r3, [r3, #30]
 801e77e:	3301      	adds	r3, #1
 801e780:	b29a      	uxth	r2, r3
 801e782:	4b4c      	ldr	r3, [pc, #304]	@ (801e8b4 <ethernet_input+0x15c>)
 801e784:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801e786:	e08d      	b.n	801e8a4 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e788:	687b      	ldr	r3, [r7, #4]
 801e78a:	7bdb      	ldrb	r3, [r3, #15]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d106      	bne.n	801e79e <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801e790:	683b      	ldr	r3, [r7, #0]
 801e792:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e796:	3301      	adds	r3, #1
 801e798:	b2da      	uxtb	r2, r3
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	685b      	ldr	r3, [r3, #4]
 801e7a2:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e7a4:	693b      	ldr	r3, [r7, #16]
 801e7a6:	7b1a      	ldrb	r2, [r3, #12]
 801e7a8:	7b5b      	ldrb	r3, [r3, #13]
 801e7aa:	021b      	lsls	r3, r3, #8
 801e7ac:	4313      	orrs	r3, r2
 801e7ae:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e7b0:	693b      	ldr	r3, [r7, #16]
 801e7b2:	781b      	ldrb	r3, [r3, #0]
 801e7b4:	f003 0301 	and.w	r3, r3, #1
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d023      	beq.n	801e804 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e7bc:	693b      	ldr	r3, [r7, #16]
 801e7be:	781b      	ldrb	r3, [r3, #0]
 801e7c0:	2b01      	cmp	r3, #1
 801e7c2:	d10f      	bne.n	801e7e4 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e7c4:	693b      	ldr	r3, [r7, #16]
 801e7c6:	785b      	ldrb	r3, [r3, #1]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d11b      	bne.n	801e804 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e7cc:	693b      	ldr	r3, [r7, #16]
 801e7ce:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e7d0:	2b5e      	cmp	r3, #94	@ 0x5e
 801e7d2:	d117      	bne.n	801e804 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	7b5b      	ldrb	r3, [r3, #13]
 801e7d8:	f043 0310 	orr.w	r3, r3, #16
 801e7dc:	b2da      	uxtb	r2, r3
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	735a      	strb	r2, [r3, #13]
 801e7e2:	e00f      	b.n	801e804 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e7e4:	693b      	ldr	r3, [r7, #16]
 801e7e6:	2206      	movs	r2, #6
 801e7e8:	4933      	ldr	r1, [pc, #204]	@ (801e8b8 <ethernet_input+0x160>)
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	f001 fea4 	bl	8020538 <memcmp>
 801e7f0:	4603      	mov	r3, r0
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d106      	bne.n	801e804 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	7b5b      	ldrb	r3, [r3, #13]
 801e7fa:	f043 0308 	orr.w	r3, r3, #8
 801e7fe:	b2da      	uxtb	r2, r3
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e804:	89fb      	ldrh	r3, [r7, #14]
 801e806:	2b08      	cmp	r3, #8
 801e808:	d003      	beq.n	801e812 <ethernet_input+0xba>
 801e80a:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801e80e:	d014      	beq.n	801e83a <ethernet_input+0xe2>
 801e810:	e034      	b.n	801e87c <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e812:	683b      	ldr	r3, [r7, #0]
 801e814:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e818:	f003 0308 	and.w	r3, r3, #8
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d03c      	beq.n	801e89a <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e820:	8afb      	ldrh	r3, [r7, #22]
 801e822:	4619      	mov	r1, r3
 801e824:	6878      	ldr	r0, [r7, #4]
 801e826:	f7f6 fa09 	bl	8014c3c <pbuf_remove_header>
 801e82a:	4603      	mov	r3, r0
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d136      	bne.n	801e89e <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801e830:	6839      	ldr	r1, [r7, #0]
 801e832:	6878      	ldr	r0, [r7, #4]
 801e834:	f7fe fe7e 	bl	801d534 <ip4_input>
      }
      break;
 801e838:	e02d      	b.n	801e896 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e83a:	683b      	ldr	r3, [r7, #0]
 801e83c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e840:	f003 0308 	and.w	r3, r3, #8
 801e844:	2b00      	cmp	r3, #0
 801e846:	d02c      	beq.n	801e8a2 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e848:	8afb      	ldrh	r3, [r7, #22]
 801e84a:	4619      	mov	r1, r3
 801e84c:	6878      	ldr	r0, [r7, #4]
 801e84e:	f7f6 f9f5 	bl	8014c3c <pbuf_remove_header>
 801e852:	4603      	mov	r3, r0
 801e854:	2b00      	cmp	r3, #0
 801e856:	d00c      	beq.n	801e872 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801e858:	4b16      	ldr	r3, [pc, #88]	@ (801e8b4 <ethernet_input+0x15c>)
 801e85a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801e85c:	3301      	adds	r3, #1
 801e85e:	b29a      	uxth	r2, r3
 801e860:	4b14      	ldr	r3, [pc, #80]	@ (801e8b4 <ethernet_input+0x15c>)
 801e862:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801e864:	4b13      	ldr	r3, [pc, #76]	@ (801e8b4 <ethernet_input+0x15c>)
 801e866:	8bdb      	ldrh	r3, [r3, #30]
 801e868:	3301      	adds	r3, #1
 801e86a:	b29a      	uxth	r2, r3
 801e86c:	4b11      	ldr	r3, [pc, #68]	@ (801e8b4 <ethernet_input+0x15c>)
 801e86e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801e870:	e018      	b.n	801e8a4 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801e872:	6839      	ldr	r1, [r7, #0]
 801e874:	6878      	ldr	r0, [r7, #4]
 801e876:	f7fd ff89 	bl	801c78c <etharp_input>
      }
      break;
 801e87a:	e00c      	b.n	801e896 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801e87c:	4b0d      	ldr	r3, [pc, #52]	@ (801e8b4 <ethernet_input+0x15c>)
 801e87e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e880:	3301      	adds	r3, #1
 801e882:	b29a      	uxth	r2, r3
 801e884:	4b0b      	ldr	r3, [pc, #44]	@ (801e8b4 <ethernet_input+0x15c>)
 801e886:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801e888:	4b0a      	ldr	r3, [pc, #40]	@ (801e8b4 <ethernet_input+0x15c>)
 801e88a:	8bdb      	ldrh	r3, [r3, #30]
 801e88c:	3301      	adds	r3, #1
 801e88e:	b29a      	uxth	r2, r3
 801e890:	4b08      	ldr	r3, [pc, #32]	@ (801e8b4 <ethernet_input+0x15c>)
 801e892:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e894:	e006      	b.n	801e8a4 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e896:	2300      	movs	r3, #0
 801e898:	e008      	b.n	801e8ac <ethernet_input+0x154>
        goto free_and_return;
 801e89a:	bf00      	nop
 801e89c:	e002      	b.n	801e8a4 <ethernet_input+0x14c>
        goto free_and_return;
 801e89e:	bf00      	nop
 801e8a0:	e000      	b.n	801e8a4 <ethernet_input+0x14c>
        goto free_and_return;
 801e8a2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e8a4:	6878      	ldr	r0, [r7, #4]
 801e8a6:	f7f6 fa4f 	bl	8014d48 <pbuf_free>
  return ERR_OK;
 801e8aa:	2300      	movs	r3, #0
}
 801e8ac:	4618      	mov	r0, r3
 801e8ae:	3718      	adds	r7, #24
 801e8b0:	46bd      	mov	sp, r7
 801e8b2:	bd80      	pop	{r7, pc}
 801e8b4:	200252ac 	.word	0x200252ac
 801e8b8:	08025004 	.word	0x08025004

0801e8bc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e8bc:	b580      	push	{r7, lr}
 801e8be:	b086      	sub	sp, #24
 801e8c0:	af00      	add	r7, sp, #0
 801e8c2:	60f8      	str	r0, [r7, #12]
 801e8c4:	60b9      	str	r1, [r7, #8]
 801e8c6:	607a      	str	r2, [r7, #4]
 801e8c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e8ca:	8c3b      	ldrh	r3, [r7, #32]
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	f7f4 fd7d 	bl	80133cc <lwip_htons>
 801e8d2:	4603      	mov	r3, r0
 801e8d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e8d6:	210e      	movs	r1, #14
 801e8d8:	68b8      	ldr	r0, [r7, #8]
 801e8da:	f7f6 f99f 	bl	8014c1c <pbuf_add_header>
 801e8de:	4603      	mov	r3, r0
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d125      	bne.n	801e930 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e8e4:	68bb      	ldr	r3, [r7, #8]
 801e8e6:	685b      	ldr	r3, [r3, #4]
 801e8e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e8ea:	693b      	ldr	r3, [r7, #16]
 801e8ec:	8afa      	ldrh	r2, [r7, #22]
 801e8ee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e8f0:	693b      	ldr	r3, [r7, #16]
 801e8f2:	2206      	movs	r2, #6
 801e8f4:	6839      	ldr	r1, [r7, #0]
 801e8f6:	4618      	mov	r0, r3
 801e8f8:	f001 ff01 	bl	80206fe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e8fc:	693b      	ldr	r3, [r7, #16]
 801e8fe:	3306      	adds	r3, #6
 801e900:	2206      	movs	r2, #6
 801e902:	6879      	ldr	r1, [r7, #4]
 801e904:	4618      	mov	r0, r3
 801e906:	f001 fefa 	bl	80206fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e90a:	68fb      	ldr	r3, [r7, #12]
 801e90c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e910:	2b06      	cmp	r3, #6
 801e912:	d006      	beq.n	801e922 <ethernet_output+0x66>
 801e914:	4b0d      	ldr	r3, [pc, #52]	@ (801e94c <ethernet_output+0x90>)
 801e916:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801e91a:	490d      	ldr	r1, [pc, #52]	@ (801e950 <ethernet_output+0x94>)
 801e91c:	480d      	ldr	r0, [pc, #52]	@ (801e954 <ethernet_output+0x98>)
 801e91e:	f001 fcc3 	bl	80202a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	699b      	ldr	r3, [r3, #24]
 801e926:	68b9      	ldr	r1, [r7, #8]
 801e928:	68f8      	ldr	r0, [r7, #12]
 801e92a:	4798      	blx	r3
 801e92c:	4603      	mov	r3, r0
 801e92e:	e008      	b.n	801e942 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801e930:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801e932:	4b09      	ldr	r3, [pc, #36]	@ (801e958 <ethernet_output+0x9c>)
 801e934:	895b      	ldrh	r3, [r3, #10]
 801e936:	3301      	adds	r3, #1
 801e938:	b29a      	uxth	r2, r3
 801e93a:	4b07      	ldr	r3, [pc, #28]	@ (801e958 <ethernet_output+0x9c>)
 801e93c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801e93e:	f06f 0301 	mvn.w	r3, #1
}
 801e942:	4618      	mov	r0, r3
 801e944:	3718      	adds	r7, #24
 801e946:	46bd      	mov	sp, r7
 801e948:	bd80      	pop	{r7, pc}
 801e94a:	bf00      	nop
 801e94c:	080247f4 	.word	0x080247f4
 801e950:	0802482c 	.word	0x0802482c
 801e954:	08024860 	.word	0x08024860
 801e958:	200252ac 	.word	0x200252ac

0801e95c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e95c:	b580      	push	{r7, lr}
 801e95e:	b082      	sub	sp, #8
 801e960:	af00      	add	r7, sp, #0
 801e962:	6078      	str	r0, [r7, #4]
 801e964:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801e966:	683b      	ldr	r3, [r7, #0]
 801e968:	2200      	movs	r2, #0
 801e96a:	2104      	movs	r1, #4
 801e96c:	4618      	mov	r0, r3
 801e96e:	f7ee ffed 	bl	800d94c <osMessageQueueNew>
 801e972:	4602      	mov	r2, r0
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801e978:	4b10      	ldr	r3, [pc, #64]	@ (801e9bc <sys_mbox_new+0x60>)
 801e97a:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e97e:	3301      	adds	r3, #1
 801e980:	b29a      	uxth	r2, r3
 801e982:	4b0e      	ldr	r3, [pc, #56]	@ (801e9bc <sys_mbox_new+0x60>)
 801e984:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801e988:	4b0c      	ldr	r3, [pc, #48]	@ (801e9bc <sys_mbox_new+0x60>)
 801e98a:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	@ 0xf6
 801e98e:	4b0b      	ldr	r3, [pc, #44]	@ (801e9bc <sys_mbox_new+0x60>)
 801e990:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e994:	429a      	cmp	r2, r3
 801e996:	d205      	bcs.n	801e9a4 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801e998:	4b08      	ldr	r3, [pc, #32]	@ (801e9bc <sys_mbox_new+0x60>)
 801e99a:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 801e99e:	4b07      	ldr	r3, [pc, #28]	@ (801e9bc <sys_mbox_new+0x60>)
 801e9a0:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d102      	bne.n	801e9b2 <sys_mbox_new+0x56>
    return ERR_MEM;
 801e9ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e9b0:	e000      	b.n	801e9b4 <sys_mbox_new+0x58>

  return ERR_OK;
 801e9b2:	2300      	movs	r3, #0
}
 801e9b4:	4618      	mov	r0, r3
 801e9b6:	3708      	adds	r7, #8
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	bd80      	pop	{r7, pc}
 801e9bc:	200252ac 	.word	0x200252ac

0801e9c0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e9c0:	b580      	push	{r7, lr}
 801e9c2:	b082      	sub	sp, #8
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	f7ef f929 	bl	800dc24 <osMessageQueueGetCount>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d007      	beq.n	801e9e8 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801e9d8:	4b0c      	ldr	r3, [pc, #48]	@ (801ea0c <sys_mbox_free+0x4c>)
 801e9da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801e9de:	3301      	adds	r3, #1
 801e9e0:	b29a      	uxth	r2, r3
 801e9e2:	4b0a      	ldr	r3, [pc, #40]	@ (801ea0c <sys_mbox_free+0x4c>)
 801e9e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	4618      	mov	r0, r3
 801e9ee:	f7ef f94b 	bl	800dc88 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801e9f2:	4b06      	ldr	r3, [pc, #24]	@ (801ea0c <sys_mbox_free+0x4c>)
 801e9f4:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e9f8:	3b01      	subs	r3, #1
 801e9fa:	b29a      	uxth	r2, r3
 801e9fc:	4b03      	ldr	r3, [pc, #12]	@ (801ea0c <sys_mbox_free+0x4c>)
 801e9fe:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
#endif /* SYS_STATS */
}
 801ea02:	bf00      	nop
 801ea04:	3708      	adds	r7, #8
 801ea06:	46bd      	mov	sp, r7
 801ea08:	bd80      	pop	{r7, pc}
 801ea0a:	bf00      	nop
 801ea0c:	200252ac 	.word	0x200252ac

0801ea10 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ea10:	b580      	push	{r7, lr}
 801ea12:	b084      	sub	sp, #16
 801ea14:	af00      	add	r7, sp, #0
 801ea16:	6078      	str	r0, [r7, #4]
 801ea18:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	6818      	ldr	r0, [r3, #0]
 801ea1e:	4639      	mov	r1, r7
 801ea20:	2300      	movs	r3, #0
 801ea22:	2200      	movs	r2, #0
 801ea24:	f7ef f818 	bl	800da58 <osMessageQueuePut>
 801ea28:	4603      	mov	r3, r0
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	d102      	bne.n	801ea34 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ea2e:	2300      	movs	r3, #0
 801ea30:	73fb      	strb	r3, [r7, #15]
 801ea32:	e009      	b.n	801ea48 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ea34:	23ff      	movs	r3, #255	@ 0xff
 801ea36:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801ea38:	4b06      	ldr	r3, [pc, #24]	@ (801ea54 <sys_mbox_trypost+0x44>)
 801ea3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801ea3e:	3301      	adds	r3, #1
 801ea40:	b29a      	uxth	r2, r3
 801ea42:	4b04      	ldr	r3, [pc, #16]	@ (801ea54 <sys_mbox_trypost+0x44>)
 801ea44:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
  }

  return result;
 801ea48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ea4c:	4618      	mov	r0, r3
 801ea4e:	3710      	adds	r7, #16
 801ea50:	46bd      	mov	sp, r7
 801ea52:	bd80      	pop	{r7, pc}
 801ea54:	200252ac 	.word	0x200252ac

0801ea58 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ea58:	b580      	push	{r7, lr}
 801ea5a:	b086      	sub	sp, #24
 801ea5c:	af00      	add	r7, sp, #0
 801ea5e:	60f8      	str	r0, [r7, #12]
 801ea60:	60b9      	str	r1, [r7, #8]
 801ea62:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ea64:	f7ee fb96 	bl	800d194 <osKernelGetTickCount>
 801ea68:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d013      	beq.n	801ea98 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	6818      	ldr	r0, [r3, #0]
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	2200      	movs	r2, #0
 801ea78:	68b9      	ldr	r1, [r7, #8]
 801ea7a:	f7ef f861 	bl	800db40 <osMessageQueueGet>
 801ea7e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801ea80:	693b      	ldr	r3, [r7, #16]
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d105      	bne.n	801ea92 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ea86:	f7ee fb85 	bl	800d194 <osKernelGetTickCount>
 801ea8a:	4602      	mov	r2, r0
 801ea8c:	697b      	ldr	r3, [r7, #20]
 801ea8e:	1ad3      	subs	r3, r2, r3
 801ea90:	e00f      	b.n	801eab2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ea92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ea96:	e00c      	b.n	801eab2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	6818      	ldr	r0, [r3, #0]
 801ea9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eaa0:	2200      	movs	r2, #0
 801eaa2:	68b9      	ldr	r1, [r7, #8]
 801eaa4:	f7ef f84c 	bl	800db40 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801eaa8:	f7ee fb74 	bl	800d194 <osKernelGetTickCount>
 801eaac:	4602      	mov	r2, r0
 801eaae:	697b      	ldr	r3, [r7, #20]
 801eab0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801eab2:	4618      	mov	r0, r3
 801eab4:	3718      	adds	r7, #24
 801eab6:	46bd      	mov	sp, r7
 801eab8:	bd80      	pop	{r7, pc}

0801eaba <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801eaba:	b580      	push	{r7, lr}
 801eabc:	b082      	sub	sp, #8
 801eabe:	af00      	add	r7, sp, #0
 801eac0:	6078      	str	r0, [r7, #4]
 801eac2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	6818      	ldr	r0, [r3, #0]
 801eac8:	2300      	movs	r3, #0
 801eaca:	2200      	movs	r2, #0
 801eacc:	6839      	ldr	r1, [r7, #0]
 801eace:	f7ef f837 	bl	800db40 <osMessageQueueGet>
 801ead2:	4603      	mov	r3, r0
 801ead4:	2b00      	cmp	r3, #0
 801ead6:	d101      	bne.n	801eadc <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801ead8:	2300      	movs	r3, #0
 801eada:	e001      	b.n	801eae0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801eadc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801eae0:	4618      	mov	r0, r3
 801eae2:	3708      	adds	r7, #8
 801eae4:	46bd      	mov	sp, r7
 801eae6:	bd80      	pop	{r7, pc}

0801eae8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801eae8:	b480      	push	{r7}
 801eaea:	b083      	sub	sp, #12
 801eaec:	af00      	add	r7, sp, #0
 801eaee:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d101      	bne.n	801eafc <sys_mbox_valid+0x14>
    return 0;
 801eaf8:	2300      	movs	r3, #0
 801eafa:	e000      	b.n	801eafe <sys_mbox_valid+0x16>
  else
    return 1;
 801eafc:	2301      	movs	r3, #1
}
 801eafe:	4618      	mov	r0, r3
 801eb00:	370c      	adds	r7, #12
 801eb02:	46bd      	mov	sp, r7
 801eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb08:	4770      	bx	lr

0801eb0a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801eb0a:	b480      	push	{r7}
 801eb0c:	b083      	sub	sp, #12
 801eb0e:	af00      	add	r7, sp, #0
 801eb10:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	2200      	movs	r2, #0
 801eb16:	601a      	str	r2, [r3, #0]
}
 801eb18:	bf00      	nop
 801eb1a:	370c      	adds	r7, #12
 801eb1c:	46bd      	mov	sp, r7
 801eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb22:	4770      	bx	lr

0801eb24 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801eb24:	b580      	push	{r7, lr}
 801eb26:	b082      	sub	sp, #8
 801eb28:	af00      	add	r7, sp, #0
 801eb2a:	6078      	str	r0, [r7, #4]
 801eb2c:	460b      	mov	r3, r1
 801eb2e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801eb30:	78fb      	ldrb	r3, [r7, #3]
 801eb32:	2200      	movs	r2, #0
 801eb34:	4619      	mov	r1, r3
 801eb36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801eb3a:	f7ee fd77 	bl	800d62c <osSemaphoreNew>
 801eb3e:	4602      	mov	r2, r0
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	681b      	ldr	r3, [r3, #0]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d10a      	bne.n	801eb62 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801eb4c:	4b17      	ldr	r3, [pc, #92]	@ (801ebac <sys_sem_new+0x88>)
 801eb4e:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801eb52:	3301      	adds	r3, #1
 801eb54:	b29a      	uxth	r2, r3
 801eb56:	4b15      	ldr	r3, [pc, #84]	@ (801ebac <sys_sem_new+0x88>)
 801eb58:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */
    return ERR_MEM;
 801eb5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eb60:	e01f      	b.n	801eba2 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 801eb62:	78fb      	ldrb	r3, [r7, #3]
 801eb64:	2b00      	cmp	r3, #0
 801eb66:	d105      	bne.n	801eb74 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	681b      	ldr	r3, [r3, #0]
 801eb6c:	2100      	movs	r1, #0
 801eb6e:	4618      	mov	r0, r3
 801eb70:	f7ee fdf8 	bl	800d764 <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801eb74:	4b0d      	ldr	r3, [pc, #52]	@ (801ebac <sys_sem_new+0x88>)
 801eb76:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801eb7a:	3301      	adds	r3, #1
 801eb7c:	b29a      	uxth	r2, r3
 801eb7e:	4b0b      	ldr	r3, [pc, #44]	@ (801ebac <sys_sem_new+0x88>)
 801eb80:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801eb84:	4b09      	ldr	r3, [pc, #36]	@ (801ebac <sys_sem_new+0x88>)
 801eb86:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	@ 0xea
 801eb8a:	4b08      	ldr	r3, [pc, #32]	@ (801ebac <sys_sem_new+0x88>)
 801eb8c:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801eb90:	429a      	cmp	r2, r3
 801eb92:	d205      	bcs.n	801eba0 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801eb94:	4b05      	ldr	r3, [pc, #20]	@ (801ebac <sys_sem_new+0x88>)
 801eb96:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 801eb9a:	4b04      	ldr	r3, [pc, #16]	@ (801ebac <sys_sem_new+0x88>)
 801eb9c:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801eba0:	2300      	movs	r3, #0
}
 801eba2:	4618      	mov	r0, r3
 801eba4:	3708      	adds	r7, #8
 801eba6:	46bd      	mov	sp, r7
 801eba8:	bd80      	pop	{r7, pc}
 801ebaa:	bf00      	nop
 801ebac:	200252ac 	.word	0x200252ac

0801ebb0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ebb0:	b580      	push	{r7, lr}
 801ebb2:	b084      	sub	sp, #16
 801ebb4:	af00      	add	r7, sp, #0
 801ebb6:	6078      	str	r0, [r7, #4]
 801ebb8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801ebba:	f7ee faeb 	bl	800d194 <osKernelGetTickCount>
 801ebbe:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801ebc0:	683b      	ldr	r3, [r7, #0]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d011      	beq.n	801ebea <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801ebc6:	687b      	ldr	r3, [r7, #4]
 801ebc8:	681b      	ldr	r3, [r3, #0]
 801ebca:	6839      	ldr	r1, [r7, #0]
 801ebcc:	4618      	mov	r0, r3
 801ebce:	f7ee fdc9 	bl	800d764 <osSemaphoreAcquire>
 801ebd2:	4603      	mov	r3, r0
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d105      	bne.n	801ebe4 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801ebd8:	f7ee fadc 	bl	800d194 <osKernelGetTickCount>
 801ebdc:	4602      	mov	r2, r0
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	1ad3      	subs	r3, r2, r3
 801ebe2:	e012      	b.n	801ec0a <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ebe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ebe8:	e00f      	b.n	801ec0a <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801ebea:	bf00      	nop
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	681b      	ldr	r3, [r3, #0]
 801ebf0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f7ee fdb5 	bl	800d764 <osSemaphoreAcquire>
 801ebfa:	4603      	mov	r3, r0
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d1f5      	bne.n	801ebec <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801ec00:	f7ee fac8 	bl	800d194 <osKernelGetTickCount>
 801ec04:	4602      	mov	r2, r0
 801ec06:	68fb      	ldr	r3, [r7, #12]
 801ec08:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ec0a:	4618      	mov	r0, r3
 801ec0c:	3710      	adds	r7, #16
 801ec0e:	46bd      	mov	sp, r7
 801ec10:	bd80      	pop	{r7, pc}

0801ec12 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801ec12:	b580      	push	{r7, lr}
 801ec14:	b082      	sub	sp, #8
 801ec16:	af00      	add	r7, sp, #0
 801ec18:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	681b      	ldr	r3, [r3, #0]
 801ec1e:	4618      	mov	r0, r3
 801ec20:	f7ee fe06 	bl	800d830 <osSemaphoreRelease>
}
 801ec24:	bf00      	nop
 801ec26:	3708      	adds	r7, #8
 801ec28:	46bd      	mov	sp, r7
 801ec2a:	bd80      	pop	{r7, pc}

0801ec2c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ec2c:	b580      	push	{r7, lr}
 801ec2e:	b082      	sub	sp, #8
 801ec30:	af00      	add	r7, sp, #0
 801ec32:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801ec34:	4b08      	ldr	r3, [pc, #32]	@ (801ec58 <sys_sem_free+0x2c>)
 801ec36:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801ec3a:	3b01      	subs	r3, #1
 801ec3c:	b29a      	uxth	r2, r3
 801ec3e:	4b06      	ldr	r3, [pc, #24]	@ (801ec58 <sys_sem_free+0x2c>)
 801ec40:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	4618      	mov	r0, r3
 801ec4a:	f7ee fe49 	bl	800d8e0 <osSemaphoreDelete>
}
 801ec4e:	bf00      	nop
 801ec50:	3708      	adds	r7, #8
 801ec52:	46bd      	mov	sp, r7
 801ec54:	bd80      	pop	{r7, pc}
 801ec56:	bf00      	nop
 801ec58:	200252ac 	.word	0x200252ac

0801ec5c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ec5c:	b480      	push	{r7}
 801ec5e:	b083      	sub	sp, #12
 801ec60:	af00      	add	r7, sp, #0
 801ec62:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	681b      	ldr	r3, [r3, #0]
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d101      	bne.n	801ec70 <sys_sem_valid+0x14>
    return 0;
 801ec6c:	2300      	movs	r3, #0
 801ec6e:	e000      	b.n	801ec72 <sys_sem_valid+0x16>
  else
    return 1;
 801ec70:	2301      	movs	r3, #1
}
 801ec72:	4618      	mov	r0, r3
 801ec74:	370c      	adds	r7, #12
 801ec76:	46bd      	mov	sp, r7
 801ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec7c:	4770      	bx	lr

0801ec7e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ec7e:	b480      	push	{r7}
 801ec80:	b083      	sub	sp, #12
 801ec82:	af00      	add	r7, sp, #0
 801ec84:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	2200      	movs	r2, #0
 801ec8a:	601a      	str	r2, [r3, #0]
}
 801ec8c:	bf00      	nop
 801ec8e:	370c      	adds	r7, #12
 801ec90:	46bd      	mov	sp, r7
 801ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec96:	4770      	bx	lr

0801ec98 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ec98:	b580      	push	{r7, lr}
 801ec9a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801ec9c:	2000      	movs	r0, #0
 801ec9e:	f7ee fb7d 	bl	800d39c <osMutexNew>
 801eca2:	4603      	mov	r3, r0
 801eca4:	4a01      	ldr	r2, [pc, #4]	@ (801ecac <sys_init+0x14>)
 801eca6:	6013      	str	r3, [r2, #0]
#endif
}
 801eca8:	bf00      	nop
 801ecaa:	bd80      	pop	{r7, pc}
 801ecac:	20025504 	.word	0x20025504

0801ecb0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ecb0:	b580      	push	{r7, lr}
 801ecb2:	b082      	sub	sp, #8
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801ecb8:	2000      	movs	r0, #0
 801ecba:	f7ee fb6f 	bl	800d39c <osMutexNew>
 801ecbe:	4602      	mov	r2, r0
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	d10a      	bne.n	801ece2 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801eccc:	4b12      	ldr	r3, [pc, #72]	@ (801ed18 <sys_mutex_new+0x68>)
 801ecce:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801ecd2:	3301      	adds	r3, #1
 801ecd4:	b29a      	uxth	r2, r3
 801ecd6:	4b10      	ldr	r3, [pc, #64]	@ (801ed18 <sys_mutex_new+0x68>)
 801ecd8:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
#endif /* SYS_STATS */
    return ERR_MEM;
 801ecdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ece0:	e016      	b.n	801ed10 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801ece2:	4b0d      	ldr	r3, [pc, #52]	@ (801ed18 <sys_mutex_new+0x68>)
 801ece4:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 801ece8:	3301      	adds	r3, #1
 801ecea:	b29a      	uxth	r2, r3
 801ecec:	4b0a      	ldr	r3, [pc, #40]	@ (801ed18 <sys_mutex_new+0x68>)
 801ecee:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801ecf2:	4b09      	ldr	r3, [pc, #36]	@ (801ed18 <sys_mutex_new+0x68>)
 801ecf4:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	@ 0xf0
 801ecf8:	4b07      	ldr	r3, [pc, #28]	@ (801ed18 <sys_mutex_new+0x68>)
 801ecfa:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 801ecfe:	429a      	cmp	r2, r3
 801ed00:	d205      	bcs.n	801ed0e <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801ed02:	4b05      	ldr	r3, [pc, #20]	@ (801ed18 <sys_mutex_new+0x68>)
 801ed04:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 801ed08:	4b03      	ldr	r3, [pc, #12]	@ (801ed18 <sys_mutex_new+0x68>)
 801ed0a:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ed0e:	2300      	movs	r3, #0
}
 801ed10:	4618      	mov	r0, r3
 801ed12:	3708      	adds	r7, #8
 801ed14:	46bd      	mov	sp, r7
 801ed16:	bd80      	pop	{r7, pc}
 801ed18:	200252ac 	.word	0x200252ac

0801ed1c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ed1c:	b580      	push	{r7, lr}
 801ed1e:	b082      	sub	sp, #8
 801ed20:	af00      	add	r7, sp, #0
 801ed22:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	681b      	ldr	r3, [r3, #0]
 801ed28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ed2c:	4618      	mov	r0, r3
 801ed2e:	f7ee fbcf 	bl	800d4d0 <osMutexAcquire>
#endif
}
 801ed32:	bf00      	nop
 801ed34:	3708      	adds	r7, #8
 801ed36:	46bd      	mov	sp, r7
 801ed38:	bd80      	pop	{r7, pc}

0801ed3a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ed3a:	b580      	push	{r7, lr}
 801ed3c:	b082      	sub	sp, #8
 801ed3e:	af00      	add	r7, sp, #0
 801ed40:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	4618      	mov	r0, r3
 801ed48:	f7ee fc20 	bl	800d58c <osMutexRelease>
}
 801ed4c:	bf00      	nop
 801ed4e:	3708      	adds	r7, #8
 801ed50:	46bd      	mov	sp, r7
 801ed52:	bd80      	pop	{r7, pc}

0801ed54 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ed54:	b580      	push	{r7, lr}
 801ed56:	b08e      	sub	sp, #56	@ 0x38
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	60f8      	str	r0, [r7, #12]
 801ed5c:	60b9      	str	r1, [r7, #8]
 801ed5e:	607a      	str	r2, [r7, #4]
 801ed60:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801ed62:	f107 0314 	add.w	r3, r7, #20
 801ed66:	2224      	movs	r2, #36	@ 0x24
 801ed68:	2100      	movs	r1, #0
 801ed6a:	4618      	mov	r0, r3
 801ed6c:	f001 fbf4 	bl	8020558 <memset>
 801ed70:	68fb      	ldr	r3, [r7, #12]
 801ed72:	617b      	str	r3, [r7, #20]
 801ed74:	683b      	ldr	r3, [r7, #0]
 801ed76:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ed78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ed7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801ed7c:	f107 0314 	add.w	r3, r7, #20
 801ed80:	461a      	mov	r2, r3
 801ed82:	6879      	ldr	r1, [r7, #4]
 801ed84:	68b8      	ldr	r0, [r7, #8]
 801ed86:	f7ee fa2d 	bl	800d1e4 <osThreadNew>
 801ed8a:	4603      	mov	r3, r0
#endif
}
 801ed8c:	4618      	mov	r0, r3
 801ed8e:	3738      	adds	r7, #56	@ 0x38
 801ed90:	46bd      	mov	sp, r7
 801ed92:	bd80      	pop	{r7, pc}

0801ed94 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ed94:	b580      	push	{r7, lr}
 801ed96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801ed98:	4b04      	ldr	r3, [pc, #16]	@ (801edac <sys_arch_protect+0x18>)
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801eda0:	4618      	mov	r0, r3
 801eda2:	f7ee fb95 	bl	800d4d0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801eda6:	2301      	movs	r3, #1
}
 801eda8:	4618      	mov	r0, r3
 801edaa:	bd80      	pop	{r7, pc}
 801edac:	20025504 	.word	0x20025504

0801edb0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801edb0:	b580      	push	{r7, lr}
 801edb2:	b082      	sub	sp, #8
 801edb4:	af00      	add	r7, sp, #0
 801edb6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801edb8:	4b04      	ldr	r3, [pc, #16]	@ (801edcc <sys_arch_unprotect+0x1c>)
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	4618      	mov	r0, r3
 801edbe:	f7ee fbe5 	bl	800d58c <osMutexRelease>
}
 801edc2:	bf00      	nop
 801edc4:	3708      	adds	r7, #8
 801edc6:	46bd      	mov	sp, r7
 801edc8:	bd80      	pop	{r7, pc}
 801edca:	bf00      	nop
 801edcc:	20025504 	.word	0x20025504

0801edd0 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801edd0:	b580      	push	{r7, lr}
 801edd2:	b0ca      	sub	sp, #296	@ 0x128
 801edd4:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;
	osStatus_t status;

	adcReadySem = osSemaphoreNew(1, 0, NULL);
 801edd6:	2200      	movs	r2, #0
 801edd8:	2100      	movs	r1, #0
 801edda:	2001      	movs	r0, #1
 801eddc:	f7ee fc26 	bl	800d62c <osSemaphoreNew>
 801ede0:	4603      	mov	r3, r0
 801ede2:	4a3c      	ldr	r2, [pc, #240]	@ (801eed4 <AdcTestTask+0x104>)
 801ede4:	6013      	str	r3, [r2, #0]

	while (1)
	{
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801ede6:	4b3c      	ldr	r3, [pc, #240]	@ (801eed8 <AdcTestTask+0x108>)
 801ede8:	6818      	ldr	r0, [r3, #0]
 801edea:	f107 0110 	add.w	r1, r7, #16
 801edee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801edf2:	2200      	movs	r2, #0
 801edf4:	f7ee fea4 	bl	800db40 <osMessageQueueGet>
 801edf8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 801edfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d155      	bne.n	801eeb0 <AdcTestTask+0xe0>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801ee04:	2300      	movs	r3, #0
 801ee06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ee0a:	e00d      	b.n	801ee28 <AdcTestTask+0x58>
			{
				result = ADC_Test_Perform();
 801ee0c:	f000 f870 	bl	801eef0 <ADC_Test_Perform>
 801ee10:	4603      	mov	r3, r0
 801ee12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801ee16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee1a:	2bff      	cmp	r3, #255	@ 0xff
 801ee1c:	d00e      	beq.n	801ee3c <AdcTestTask+0x6c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801ee1e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801ee22:	3301      	adds	r3, #1
 801ee24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ee28:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee2c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ee30:	7b1b      	ldrb	r3, [r3, #12]
 801ee32:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801ee36:	429a      	cmp	r2, r3
 801ee38:	d3e8      	bcc.n	801ee0c <AdcTestTask+0x3c>
 801ee3a:	e000      	b.n	801ee3e <AdcTestTask+0x6e>
					break;
 801ee3c:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801ee3e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee42:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ee46:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801ee4a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801ee4e:	6812      	ldr	r2, [r2, #0]
 801ee50:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801ee52:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee56:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ee5a:	889a      	ldrh	r2, [r3, #4]
 801ee5c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee60:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ee64:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801ee66:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee6a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ee6e:	689a      	ldr	r2, [r3, #8]
 801ee70:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee74:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ee78:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801ee7a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ee82:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801ee86:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("ADC test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801ee88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee8c:	2b01      	cmp	r3, #1
 801ee8e:	d101      	bne.n	801ee94 <AdcTestTask+0xc4>
 801ee90:	4b12      	ldr	r3, [pc, #72]	@ (801eedc <AdcTestTask+0x10c>)
 801ee92:	e000      	b.n	801ee96 <AdcTestTask+0xc6>
 801ee94:	4b12      	ldr	r3, [pc, #72]	@ (801eee0 <AdcTestTask+0x110>)
 801ee96:	4619      	mov	r1, r3
 801ee98:	4812      	ldr	r0, [pc, #72]	@ (801eee4 <AdcTestTask+0x114>)
 801ee9a:	f001 fa05 	bl	80202a8 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801ee9e:	4b12      	ldr	r3, [pc, #72]	@ (801eee8 <AdcTestTask+0x118>)
 801eea0:	6818      	ldr	r0, [r3, #0]
 801eea2:	4639      	mov	r1, r7
 801eea4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eea8:	2200      	movs	r2, #0
 801eeaa:	f7ee fdd5 	bl	800da58 <osMessageQueuePut>
 801eeae:	e79a      	b.n	801ede6 <AdcTestTask+0x16>
		}
		else if (status == osErrorTimeout)
 801eeb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801eeb4:	f113 0f02 	cmn.w	r3, #2
 801eeb8:	d103      	bne.n	801eec2 <AdcTestTask+0xf2>
		{
			osDelay(1);
 801eeba:	2001      	movs	r0, #1
 801eebc:	f7ee fa40 	bl	800d340 <osDelay>
 801eec0:	e791      	b.n	801ede6 <AdcTestTask+0x16>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 801eec2:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801eec6:	4809      	ldr	r0, [pc, #36]	@ (801eeec <AdcTestTask+0x11c>)
 801eec8:	f001 f9ee 	bl	80202a8 <iprintf>
			osDelay(1);
 801eecc:	2001      	movs	r0, #1
 801eece:	f7ee fa37 	bl	800d340 <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801eed2:	e788      	b.n	801ede6 <AdcTestTask+0x16>
 801eed4:	20025508 	.word	0x20025508
 801eed8:	200002ec 	.word	0x200002ec
 801eedc:	08024888 	.word	0x08024888
 801eee0:	08024890 	.word	0x08024890
 801eee4:	08024898 	.word	0x08024898
 801eee8:	200002dc 	.word	0x200002dc
 801eeec:	080248a8 	.word	0x080248a8

0801eef0 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 801eef0:	b580      	push	{r7, lr}
 801eef2:	b082      	sub	sp, #8
 801eef4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801eef6:	2201      	movs	r2, #1
 801eef8:	4917      	ldr	r1, [pc, #92]	@ (801ef58 <ADC_Test_Perform+0x68>)
 801eefa:	4818      	ldr	r0, [pc, #96]	@ (801ef5c <ADC_Test_Perform+0x6c>)
 801eefc:	f7e3 faa4 	bl	8002448 <HAL_ADC_Start_DMA>
 801ef00:	4603      	mov	r3, r0
 801ef02:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801ef04:	79fb      	ldrb	r3, [r7, #7]
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	d004      	beq.n	801ef14 <ADC_Test_Perform+0x24>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
 801ef0a:	4815      	ldr	r0, [pc, #84]	@ (801ef60 <ADC_Test_Perform+0x70>)
 801ef0c:	f001 fa34 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801ef10:	23ff      	movs	r3, #255	@ 0xff
 801ef12:	e01c      	b.n	801ef4e <ADC_Test_Perform+0x5e>
	}

	if (osSemaphoreAcquire(adcReadySem, 10) != osOK) {
 801ef14:	4b13      	ldr	r3, [pc, #76]	@ (801ef64 <ADC_Test_Perform+0x74>)
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	210a      	movs	r1, #10
 801ef1a:	4618      	mov	r0, r3
 801ef1c:	f7ee fc22 	bl	800d764 <osSemaphoreAcquire>
 801ef20:	4603      	mov	r3, r0
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	d004      	beq.n	801ef30 <ADC_Test_Perform+0x40>
#ifdef PRINT_TESTS_DEBUG
		printf("ADC semaphore timeout\n");
 801ef26:	4810      	ldr	r0, [pc, #64]	@ (801ef68 <ADC_Test_Perform+0x78>)
 801ef28:	f001 fa26 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801ef2c:	23ff      	movs	r3, #255	@ 0xff
 801ef2e:	e00e      	b.n	801ef4e <ADC_Test_Perform+0x5e>

#ifdef PRINT_TESTS_DEBUG2
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801ef30:	4b09      	ldr	r3, [pc, #36]	@ (801ef58 <ADC_Test_Perform+0x68>)
 801ef32:	881b      	ldrh	r3, [r3, #0]
 801ef34:	f640 7236 	movw	r2, #3894	@ 0xf36
 801ef38:	4293      	cmp	r3, r2
 801ef3a:	d901      	bls.n	801ef40 <ADC_Test_Perform+0x50>
 801ef3c:	2301      	movs	r3, #1
 801ef3e:	e006      	b.n	801ef4e <ADC_Test_Perform+0x5e>

#ifdef PRINT_TESTS_DEBUG
	else printf("bad adc value = %d\n",adc_buf[0]);
 801ef40:	4b05      	ldr	r3, [pc, #20]	@ (801ef58 <ADC_Test_Perform+0x68>)
 801ef42:	881b      	ldrh	r3, [r3, #0]
 801ef44:	4619      	mov	r1, r3
 801ef46:	4809      	ldr	r0, [pc, #36]	@ (801ef6c <ADC_Test_Perform+0x7c>)
 801ef48:	f001 f9ae 	bl	80202a8 <iprintf>
#endif

	return TEST_FAILED;
 801ef4c:	23ff      	movs	r3, #255	@ 0xff
}
 801ef4e:	4618      	mov	r0, r3
 801ef50:	3708      	adds	r7, #8
 801ef52:	46bd      	mov	sp, r7
 801ef54:	bd80      	pop	{r7, pc}
 801ef56:	bf00      	nop
 801ef58:	2002550c 	.word	0x2002550c
 801ef5c:	200001e8 	.word	0x200001e8
 801ef60:	080248c0 	.word	0x080248c0
 801ef64:	20025508 	.word	0x20025508
 801ef68:	080248d8 	.word	0x080248d8
 801ef6c:	080248f0 	.word	0x080248f0

0801ef70 <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ef70:	b580      	push	{r7, lr}
 801ef72:	b082      	sub	sp, #8
 801ef74:	af00      	add	r7, sp, #0
 801ef76:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(adcReadySem);
 801ef78:	4b09      	ldr	r3, [pc, #36]	@ (801efa0 <HAL_ADC_ConvCpltCallback+0x30>)
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	4618      	mov	r0, r3
 801ef7e:	f7ee fc57 	bl	800d830 <osSemaphoreRelease>
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801ef82:	4808      	ldr	r0, [pc, #32]	@ (801efa4 <HAL_ADC_ConvCpltCallback+0x34>)
 801ef84:	f7e3 fb5e 	bl	8002644 <HAL_ADC_Stop_DMA>
 801ef88:	4603      	mov	r3, r0
 801ef8a:	2b00      	cmp	r3, #0
 801ef8c:	d004      	beq.n	801ef98 <HAL_ADC_ConvCpltCallback+0x28>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
 801ef8e:	4806      	ldr	r0, [pc, #24]	@ (801efa8 <HAL_ADC_ConvCpltCallback+0x38>)
 801ef90:	f001 f9f2 	bl	8020378 <puts>
#endif
		Error_Handler();
 801ef94:	f7e2 f928 	bl	80011e8 <Error_Handler>
	}
}
 801ef98:	bf00      	nop
 801ef9a:	3708      	adds	r7, #8
 801ef9c:	46bd      	mov	sp, r7
 801ef9e:	bd80      	pop	{r7, pc}
 801efa0:	20025508 	.word	0x20025508
 801efa4:	200001e8 	.word	0x200001e8
 801efa8:	08024904 	.word	0x08024904

0801efac <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 801efac:	b580      	push	{r7, lr}
 801efae:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801efb2:	af00      	add	r7, sp, #0
	while(1)
	{
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801efb4:	4b53      	ldr	r3, [pc, #332]	@ (801f104 <TestDispatcher+0x158>)
 801efb6:	6818      	ldr	r0, [r3, #0]
 801efb8:	4639      	mov	r1, r7
 801efba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801efbe:	2200      	movs	r2, #0
 801efc0:	f7ee fdbe 	bl	800db40 <osMessageQueueGet>
 801efc4:	4603      	mov	r3, r0
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	d1f4      	bne.n	801efb4 <TestDispatcher+0x8>
		{
			// load test_data
			test_data.addr = in_msg.addr;
 801efca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801efd2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801efd6:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801efda:	6812      	ldr	r2, [r2, #0]
 801efdc:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801efde:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efe2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801efe6:	889a      	ldrh	r2, [r3, #4]
 801efe8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801eff0:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801eff2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801eff6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801effa:	689a      	ldr	r2, [r3, #8]
 801effc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f000:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f004:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801f006:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f00a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f00e:	7b5a      	ldrb	r2, [r3, #13]
 801f010:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f014:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f018:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801f01a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f01e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f022:	7b9a      	ldrb	r2, [r3, #14]
 801f024:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f028:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f02c:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801f02e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f032:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f036:	7b9b      	ldrb	r3, [r3, #14]
 801f038:	461a      	mov	r2, r3
 801f03a:	463b      	mov	r3, r7
 801f03c:	f103 010f 	add.w	r1, r3, #15
 801f040:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801f044:	330e      	adds	r3, #14
 801f046:	4618      	mov	r0, r3
 801f048:	f001 fb59 	bl	80206fe <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801f04c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f050:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f054:	7b1b      	ldrb	r3, [r3, #12]
 801f056:	f003 0302 	and.w	r3, r3, #2
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	d008      	beq.n	801f070 <TestDispatcher+0xc4>
			{
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801f05e:	4b2a      	ldr	r3, [pc, #168]	@ (801f108 <TestDispatcher+0x15c>)
 801f060:	6818      	ldr	r0, [r3, #0]
 801f062:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f06a:	2200      	movs	r2, #0
 801f06c:	f7ee fcf4 	bl	800da58 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801f070:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f074:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f078:	7b1b      	ldrb	r3, [r3, #12]
 801f07a:	f003 0308 	and.w	r3, r3, #8
 801f07e:	2b00      	cmp	r3, #0
 801f080:	d008      	beq.n	801f094 <TestDispatcher+0xe8>
			{
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801f082:	4b22      	ldr	r3, [pc, #136]	@ (801f10c <TestDispatcher+0x160>)
 801f084:	6818      	ldr	r0, [r3, #0]
 801f086:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f08a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f08e:	2200      	movs	r2, #0
 801f090:	f7ee fce2 	bl	800da58 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_SPI)
 801f094:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f098:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f09c:	7b1b      	ldrb	r3, [r3, #12]
 801f09e:	f003 0304 	and.w	r3, r3, #4
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	d008      	beq.n	801f0b8 <TestDispatcher+0x10c>
			{
				osMessageQueuePut(spiQueueHandle, &test_data, 0, osWaitForever);
 801f0a6:	4b1a      	ldr	r3, [pc, #104]	@ (801f110 <TestDispatcher+0x164>)
 801f0a8:	6818      	ldr	r0, [r3, #0]
 801f0aa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f0ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f0b2:	2200      	movs	r2, #0
 801f0b4:	f7ee fcd0 	bl	800da58 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_ADC)
 801f0b8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f0bc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f0c0:	7b1b      	ldrb	r3, [r3, #12]
 801f0c2:	f003 0310 	and.w	r3, r3, #16
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d008      	beq.n	801f0dc <TestDispatcher+0x130>
			{
				osMessageQueuePut(adcQueueHandle, &test_data, 0, osWaitForever);
 801f0ca:	4b12      	ldr	r3, [pc, #72]	@ (801f114 <TestDispatcher+0x168>)
 801f0cc:	6818      	ldr	r0, [r3, #0]
 801f0ce:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f0d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f0d6:	2200      	movs	r2, #0
 801f0d8:	f7ee fcbe 	bl	800da58 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_TIM)
 801f0dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f0e0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f0e4:	7b1b      	ldrb	r3, [r3, #12]
 801f0e6:	f003 0301 	and.w	r3, r3, #1
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	f43f af62 	beq.w	801efb4 <TestDispatcher+0x8>
			{
				osMessageQueuePut(timQueueHandle, &test_data, 0, osWaitForever);
 801f0f0:	4b09      	ldr	r3, [pc, #36]	@ (801f118 <TestDispatcher+0x16c>)
 801f0f2:	6818      	ldr	r0, [r3, #0]
 801f0f4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f0f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f0fc:	2200      	movs	r2, #0
 801f0fe:	f7ee fcab 	bl	800da58 <osMessageQueuePut>
	{
 801f102:	e757      	b.n	801efb4 <TestDispatcher+0x8>
 801f104:	200002d8 	.word	0x200002d8
 801f108:	200002e0 	.word	0x200002e0
 801f10c:	200002e4 	.word	0x200002e4
 801f110:	200002e8 	.word	0x200002e8
 801f114:	200002ec 	.word	0x200002ec
 801f118:	200002f0 	.word	0x200002f0

0801f11c <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801f11c:	b580      	push	{r7, lr}
 801f11e:	b086      	sub	sp, #24
 801f120:	af00      	add	r7, sp, #0
 801f122:	60f8      	str	r0, [r7, #12]
 801f124:	607a      	str	r2, [r7, #4]
 801f126:	461a      	mov	r2, r3
 801f128:	460b      	mov	r3, r1
 801f12a:	72fb      	strb	r3, [r7, #11]
 801f12c:	4613      	mov	r3, r2
 801f12e:	72bb      	strb	r3, [r7, #10]
	if (crcMutex == NULL) crcMutex = osMutexNew(NULL);
 801f130:	4b17      	ldr	r3, [pc, #92]	@ (801f190 <Match_CRC+0x74>)
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	2b00      	cmp	r3, #0
 801f136:	d105      	bne.n	801f144 <Match_CRC+0x28>
 801f138:	2000      	movs	r0, #0
 801f13a:	f7ee f92f 	bl	800d39c <osMutexNew>
 801f13e:	4603      	mov	r3, r0
 801f140:	4a13      	ldr	r2, [pc, #76]	@ (801f190 <Match_CRC+0x74>)
 801f142:	6013      	str	r3, [r2, #0]

	osMutexAcquire(crcMutex, osWaitForever);
 801f144:	4b12      	ldr	r3, [pc, #72]	@ (801f190 <Match_CRC+0x74>)
 801f146:	681b      	ldr	r3, [r3, #0]
 801f148:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f14c:	4618      	mov	r0, r3
 801f14e:	f7ee f9bf 	bl	800d4d0 <osMutexAcquire>
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801f152:	7afb      	ldrb	r3, [r7, #11]
 801f154:	461a      	mov	r2, r3
 801f156:	68f9      	ldr	r1, [r7, #12]
 801f158:	480e      	ldr	r0, [pc, #56]	@ (801f194 <Match_CRC+0x78>)
 801f15a:	f7e3 fefd 	bl	8002f58 <HAL_CRC_Calculate>
 801f15e:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801f160:	7abb      	ldrb	r3, [r7, #10]
 801f162:	461a      	mov	r2, r3
 801f164:	6879      	ldr	r1, [r7, #4]
 801f166:	480b      	ldr	r0, [pc, #44]	@ (801f194 <Match_CRC+0x78>)
 801f168:	f7e3 fef6 	bl	8002f58 <HAL_CRC_Calculate>
 801f16c:	6138      	str	r0, [r7, #16]
	osMutexRelease(crcMutex);
 801f16e:	4b08      	ldr	r3, [pc, #32]	@ (801f190 <Match_CRC+0x74>)
 801f170:	681b      	ldr	r3, [r3, #0]
 801f172:	4618      	mov	r0, r3
 801f174:	f7ee fa0a 	bl	800d58c <osMutexRelease>

	if(buf1_crc == buf2_crc)
 801f178:	697a      	ldr	r2, [r7, #20]
 801f17a:	693b      	ldr	r3, [r7, #16]
 801f17c:	429a      	cmp	r2, r3
 801f17e:	d101      	bne.n	801f184 <Match_CRC+0x68>
		return CRC_MATCH_OK;
 801f180:	2301      	movs	r3, #1
 801f182:	e000      	b.n	801f186 <Match_CRC+0x6a>

	return CRC_MATCH_FAIL;
 801f184:	2300      	movs	r3, #0
}
 801f186:	4618      	mov	r0, r3
 801f188:	3718      	adds	r7, #24
 801f18a:	46bd      	mov	sp, r7
 801f18c:	bd80      	pop	{r7, pc}
 801f18e:	bf00      	nop
 801f190:	2002570c 	.word	0x2002570c
 801f194:	20000290 	.word	0x20000290

0801f198 <UDP_Listen>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Listen(void)
{
 801f198:	b580      	push	{r7, lr}
 801f19a:	b0ca      	sub	sp, #296	@ 0x128
 801f19c:	af00      	add	r7, sp, #0
	void *raw_data;
	uint16_t len;
	InMsg_t in_msg;
	int n_read;

	conn_recv = netconn_new(NETCONN_UDP);
 801f19e:	2200      	movs	r2, #0
 801f1a0:	2100      	movs	r1, #0
 801f1a2:	2020      	movs	r0, #32
 801f1a4:	f7f2 f8cc 	bl	8011340 <netconn_new_with_proto_and_callback>
 801f1a8:	4603      	mov	r3, r0
 801f1aa:	4a57      	ldr	r2, [pc, #348]	@ (801f308 <UDP_Listen+0x170>)
 801f1ac:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 801f1ae:	4b56      	ldr	r3, [pc, #344]	@ (801f308 <UDP_Listen+0x170>)
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d104      	bne.n	801f1c0 <UDP_Listen+0x28>
	{
		printf("error initializing UDP receive netconn\n");
 801f1b6:	4855      	ldr	r0, [pc, #340]	@ (801f30c <UDP_Listen+0x174>)
 801f1b8:	f001 f8de 	bl	8020378 <puts>
		osThreadExit();
 801f1bc:	f7ee f8b8 	bl	800d330 <osThreadExit>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 801f1c0:	4b51      	ldr	r3, [pc, #324]	@ (801f308 <UDP_Listen+0x170>)
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801f1c8:	4951      	ldr	r1, [pc, #324]	@ (801f310 <UDP_Listen+0x178>)
 801f1ca:	4618      	mov	r0, r3
 801f1cc:	f7f2 f972 	bl	80114b4 <netconn_bind>
 801f1d0:	4603      	mov	r3, r0
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	d00c      	beq.n	801f1f0 <UDP_Listen+0x58>
	{
		printf("error binding UDP port\n");
 801f1d6:	484f      	ldr	r0, [pc, #316]	@ (801f314 <UDP_Listen+0x17c>)
 801f1d8:	f001 f8ce 	bl	8020378 <puts>
		netconn_delete(conn_recv);
 801f1dc:	4b4a      	ldr	r3, [pc, #296]	@ (801f308 <UDP_Listen+0x170>)
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	4618      	mov	r0, r3
 801f1e2:	f7f2 f94b 	bl	801147c <netconn_delete>
		conn_recv = NULL;
 801f1e6:	4b48      	ldr	r3, [pc, #288]	@ (801f308 <UDP_Listen+0x170>)
 801f1e8:	2200      	movs	r2, #0
 801f1ea:	601a      	str	r2, [r3, #0]
		osThreadExit();
 801f1ec:	f7ee f8a0 	bl	800d330 <osThreadExit>
	}

	while (1)
	{
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 801f1f0:	4b45      	ldr	r3, [pc, #276]	@ (801f308 <UDP_Listen+0x170>)
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 801f1f8:	4611      	mov	r1, r2
 801f1fa:	4618      	mov	r0, r3
 801f1fc:	f7f2 fb0e 	bl	801181c <netconn_recv>
 801f200:	4603      	mov	r3, r0
 801f202:	2b00      	cmp	r3, #0
 801f204:	d17c      	bne.n	801f300 <UDP_Listen+0x168>
		{
			// Load in_msg
			in_msg.addr = *netbuf_fromaddr(buf);
 801f206:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801f20a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f20e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f212:	6892      	ldr	r2, [r2, #8]
 801f214:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 801f216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f21a:	899a      	ldrh	r2, [r3, #12]
 801f21c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f220:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f224:	809a      	strh	r2, [r3, #4]

			netbuf_data(buf, &raw_data, &len);
 801f226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f22a:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 801f22e:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 801f232:	4618      	mov	r0, r3
 801f234:	f7f3 fec8 	bl	8012fc8 <netbuf_data>

			n_read = 0;
 801f238:	2300      	movs	r3, #0
 801f23a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 801f23e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	461a      	mov	r2, r3
 801f246:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f24a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f24e:	609a      	str	r2, [r3, #8]
			n_read += sizeof(in_msg.test_id);
 801f250:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f254:	3304      	adds	r3, #4
 801f256:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

			memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 801f25a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f25e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f262:	1c59      	adds	r1, r3, #1
 801f264:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f268:	4413      	add	r3, r2
 801f26a:	781a      	ldrb	r2, [r3, #0]
 801f26c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f270:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f274:	731a      	strb	r2, [r3, #12]
			memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 801f276:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f27a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f27e:	1c59      	adds	r1, r3, #1
 801f280:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f284:	4413      	add	r3, r2
 801f286:	781a      	ldrb	r2, [r3, #0]
 801f288:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f28c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f290:	735a      	strb	r2, [r3, #13]
			memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 801f292:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f296:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f29a:	1c59      	adds	r1, r3, #1
 801f29c:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f2a0:	4413      	add	r3, r2
 801f2a2:	781a      	ldrb	r2, [r3, #0]
 801f2a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f2ac:	739a      	strb	r2, [r3, #14]
			memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 801f2ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f2b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f2b6:	18d1      	adds	r1, r2, r3
 801f2b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f2c0:	7b9b      	ldrb	r3, [r3, #14]
 801f2c2:	461a      	mov	r2, r3
 801f2c4:	1d3b      	adds	r3, r7, #4
 801f2c6:	330f      	adds	r3, #15
 801f2c8:	4618      	mov	r0, r3
 801f2ca:	f001 fa18 	bl	80206fe <memcpy>

			// send in_msg to InMsgQueue
			osStatus_t status = osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801f2ce:	4b12      	ldr	r3, [pc, #72]	@ (801f318 <UDP_Listen+0x180>)
 801f2d0:	6818      	ldr	r0, [r3, #0]
 801f2d2:	1d39      	adds	r1, r7, #4
 801f2d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f2d8:	2200      	movs	r2, #0
 801f2da:	f7ee fbbd 	bl	800da58 <osMessageQueuePut>
 801f2de:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
			if (status != osOK)
 801f2e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d004      	beq.n	801f2f4 <UDP_Listen+0x15c>
			{
				printf("inMsg put error: %d\n", status);
 801f2ea:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801f2ee:	480b      	ldr	r0, [pc, #44]	@ (801f31c <UDP_Listen+0x184>)
 801f2f0:	f000 ffda 	bl	80202a8 <iprintf>
			}

			netbuf_delete(buf);
 801f2f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f2f8:	4618      	mov	r0, r3
 801f2fa:	f7f3 fdfb 	bl	8012ef4 <netbuf_delete>
 801f2fe:	e777      	b.n	801f1f0 <UDP_Listen+0x58>
		}
		else
		{
			printf("netconn_recv failed\n");
 801f300:	4807      	ldr	r0, [pc, #28]	@ (801f320 <UDP_Listen+0x188>)
 801f302:	f001 f839 	bl	8020378 <puts>
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 801f306:	e773      	b.n	801f1f0 <UDP_Listen+0x58>
 801f308:	20025710 	.word	0x20025710
 801f30c:	08024918 	.word	0x08024918
 801f310:	08025000 	.word	0x08025000
 801f314:	08024940 	.word	0x08024940
 801f318:	200002d8 	.word	0x200002d8
 801f31c:	08024958 	.word	0x08024958
 801f320:	08024970 	.word	0x08024970

0801f324 <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 801f324:	b580      	push	{r7, lr}
 801f326:	b086      	sub	sp, #24
 801f328:	af00      	add	r7, sp, #0
	struct netbuf *buf;
	OutMsg_t out_msg;

	conn_send = netconn_new(NETCONN_UDP);
 801f32a:	2200      	movs	r2, #0
 801f32c:	2100      	movs	r1, #0
 801f32e:	2020      	movs	r0, #32
 801f330:	f7f2 f806 	bl	8011340 <netconn_new_with_proto_and_callback>
 801f334:	4603      	mov	r3, r0
 801f336:	4a20      	ldr	r2, [pc, #128]	@ (801f3b8 <UDP_Response+0x94>)
 801f338:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 801f33a:	4b1f      	ldr	r3, [pc, #124]	@ (801f3b8 <UDP_Response+0x94>)
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	2b00      	cmp	r3, #0
 801f340:	d104      	bne.n	801f34c <UDP_Response+0x28>
	{
		printf("error initializing UDP send netconn\n");
 801f342:	481e      	ldr	r0, [pc, #120]	@ (801f3bc <UDP_Response+0x98>)
 801f344:	f001 f818 	bl	8020378 <puts>
		osThreadExit();
 801f348:	f7ed fff2 	bl	800d330 <osThreadExit>
	}

	while(1)
	{
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801f34c:	4b1c      	ldr	r3, [pc, #112]	@ (801f3c0 <UDP_Response+0x9c>)
 801f34e:	6818      	ldr	r0, [r3, #0]
 801f350:	4639      	mov	r1, r7
 801f352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f356:	2200      	movs	r2, #0
 801f358:	f7ee fbf2 	bl	800db40 <osMessageQueueGet>
 801f35c:	4603      	mov	r3, r0
 801f35e:	2b00      	cmp	r3, #0
 801f360:	d1f4      	bne.n	801f34c <UDP_Response+0x28>
		{
			//Load response buffer
			buf = netbuf_new();
 801f362:	f7f3 fdb3 	bl	8012ecc <netbuf_new>
 801f366:	6178      	str	r0, [r7, #20]
			if (!buf)
 801f368:	697b      	ldr	r3, [r7, #20]
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d103      	bne.n	801f376 <UDP_Response+0x52>
			{
				printf("responder netbuf_new() failed");
 801f36e:	4815      	ldr	r0, [pc, #84]	@ (801f3c4 <UDP_Response+0xa0>)
 801f370:	f000 ff9a 	bl	80202a8 <iprintf>
				continue;
 801f374:	e01f      	b.n	801f3b6 <UDP_Response+0x92>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 801f376:	2105      	movs	r1, #5
 801f378:	6978      	ldr	r0, [r7, #20]
 801f37a:	f7f3 fddb 	bl	8012f34 <netbuf_alloc>
 801f37e:	6138      	str	r0, [r7, #16]
			if (!data)
 801f380:	693b      	ldr	r3, [r7, #16]
 801f382:	2b00      	cmp	r3, #0
 801f384:	d106      	bne.n	801f394 <UDP_Response+0x70>
			{
				printf("responder netbuf_alloc() failed");
 801f386:	4810      	ldr	r0, [pc, #64]	@ (801f3c8 <UDP_Response+0xa4>)
 801f388:	f000 ff8e 	bl	80202a8 <iprintf>
			    netbuf_delete(buf);
 801f38c:	6978      	ldr	r0, [r7, #20]
 801f38e:	f7f3 fdb1 	bl	8012ef4 <netbuf_delete>
			    continue;
 801f392:	e010      	b.n	801f3b6 <UDP_Response+0x92>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 801f394:	68ba      	ldr	r2, [r7, #8]
 801f396:	693b      	ldr	r3, [r7, #16]
 801f398:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 801f39a:	693b      	ldr	r3, [r7, #16]
 801f39c:	3304      	adds	r3, #4
 801f39e:	7b3a      	ldrb	r2, [r7, #12]
 801f3a0:	701a      	strb	r2, [r3, #0]

			// Send response
			netconn_sendto(conn_send, buf, &out_msg.addr, out_msg.port);
 801f3a2:	4b05      	ldr	r3, [pc, #20]	@ (801f3b8 <UDP_Response+0x94>)
 801f3a4:	6818      	ldr	r0, [r3, #0]
 801f3a6:	88bb      	ldrh	r3, [r7, #4]
 801f3a8:	463a      	mov	r2, r7
 801f3aa:	6979      	ldr	r1, [r7, #20]
 801f3ac:	f7f2 fab0 	bl	8011910 <netconn_sendto>
			netbuf_delete(buf);
 801f3b0:	6978      	ldr	r0, [r7, #20]
 801f3b2:	f7f3 fd9f 	bl	8012ef4 <netbuf_delete>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801f3b6:	e7c9      	b.n	801f34c <UDP_Response+0x28>
 801f3b8:	20025714 	.word	0x20025714
 801f3bc:	08024984 	.word	0x08024984
 801f3c0:	200002dc 	.word	0x200002dc
 801f3c4:	080249a8 	.word	0x080249a8
 801f3c8:	080249c8 	.word	0x080249c8

0801f3cc <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801f3cc:	b580      	push	{r7, lr}
 801f3ce:	b0ca      	sub	sp, #296	@ 0x128
 801f3d0:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	i2c1TxSem = osSemaphoreNew(1, 0, NULL);
 801f3d2:	2200      	movs	r2, #0
 801f3d4:	2100      	movs	r1, #0
 801f3d6:	2001      	movs	r0, #1
 801f3d8:	f7ee f928 	bl	800d62c <osSemaphoreNew>
 801f3dc:	4603      	mov	r3, r0
 801f3de:	4a45      	ldr	r2, [pc, #276]	@ (801f4f4 <I2cTestTask+0x128>)
 801f3e0:	6013      	str	r3, [r2, #0]
	i2c1RxSem = osSemaphoreNew(1, 0, NULL);
 801f3e2:	2200      	movs	r2, #0
 801f3e4:	2100      	movs	r1, #0
 801f3e6:	2001      	movs	r0, #1
 801f3e8:	f7ee f920 	bl	800d62c <osSemaphoreNew>
 801f3ec:	4603      	mov	r3, r0
 801f3ee:	4a42      	ldr	r2, [pc, #264]	@ (801f4f8 <I2cTestTask+0x12c>)
 801f3f0:	6013      	str	r3, [r2, #0]
	i2c2TxSem = osSemaphoreNew(1, 0, NULL);
 801f3f2:	2200      	movs	r2, #0
 801f3f4:	2100      	movs	r1, #0
 801f3f6:	2001      	movs	r0, #1
 801f3f8:	f7ee f918 	bl	800d62c <osSemaphoreNew>
 801f3fc:	4603      	mov	r3, r0
 801f3fe:	4a3f      	ldr	r2, [pc, #252]	@ (801f4fc <I2cTestTask+0x130>)
 801f400:	6013      	str	r3, [r2, #0]
	i2c2RxSem = osSemaphoreNew(1, 0, NULL);
 801f402:	2200      	movs	r2, #0
 801f404:	2100      	movs	r1, #0
 801f406:	2001      	movs	r0, #1
 801f408:	f7ee f910 	bl	800d62c <osSemaphoreNew>
 801f40c:	4603      	mov	r3, r0
 801f40e:	4a3c      	ldr	r2, [pc, #240]	@ (801f500 <I2cTestTask+0x134>)
 801f410:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f412:	4b3c      	ldr	r3, [pc, #240]	@ (801f504 <I2cTestTask+0x138>)
 801f414:	6818      	ldr	r0, [r3, #0]
 801f416:	f107 0114 	add.w	r1, r7, #20
 801f41a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f41e:	2200      	movs	r2, #0
 801f420:	f7ee fb8e 	bl	800db40 <osMessageQueueGet>
 801f424:	4603      	mov	r3, r0
 801f426:	2b00      	cmp	r3, #0
 801f428:	d15f      	bne.n	801f4ea <I2cTestTask+0x11e>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f42a:	2300      	movs	r3, #0
 801f42c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f430:	e017      	b.n	801f462 <I2cTestTask+0x96>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f432:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f436:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f43a:	7b5a      	ldrb	r2, [r3, #13]
 801f43c:	f107 0314 	add.w	r3, r7, #20
 801f440:	330e      	adds	r3, #14
 801f442:	4611      	mov	r1, r2
 801f444:	4618      	mov	r0, r3
 801f446:	f000 f867 	bl	801f518 <I2C_Test_Perform>
 801f44a:	4603      	mov	r3, r0
 801f44c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f454:	2bff      	cmp	r3, #255	@ 0xff
 801f456:	d00e      	beq.n	801f476 <I2cTestTask+0xaa>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f458:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f45c:	3301      	adds	r3, #1
 801f45e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f462:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f466:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f46a:	7b1b      	ldrb	r3, [r3, #12]
 801f46c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f470:	429a      	cmp	r2, r3
 801f472:	d3de      	bcc.n	801f432 <I2cTestTask+0x66>
 801f474:	e000      	b.n	801f478 <I2cTestTask+0xac>
					break;
 801f476:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f478:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f47c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f480:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f484:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f488:	6812      	ldr	r2, [r2, #0]
 801f48a:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f48c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f490:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f494:	889a      	ldrh	r2, [r3, #4]
 801f496:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f49a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f49e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f4a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f4a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f4a8:	689a      	ldr	r2, [r3, #8]
 801f4aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f4ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f4b2:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f4b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f4b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f4bc:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f4c0:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("I2C test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801f4c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f4c6:	2b01      	cmp	r3, #1
 801f4c8:	d101      	bne.n	801f4ce <I2cTestTask+0x102>
 801f4ca:	4b0f      	ldr	r3, [pc, #60]	@ (801f508 <I2cTestTask+0x13c>)
 801f4cc:	e000      	b.n	801f4d0 <I2cTestTask+0x104>
 801f4ce:	4b0f      	ldr	r3, [pc, #60]	@ (801f50c <I2cTestTask+0x140>)
 801f4d0:	4619      	mov	r1, r3
 801f4d2:	480f      	ldr	r0, [pc, #60]	@ (801f510 <I2cTestTask+0x144>)
 801f4d4:	f000 fee8 	bl	80202a8 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f4d8:	4b0e      	ldr	r3, [pc, #56]	@ (801f514 <I2cTestTask+0x148>)
 801f4da:	6818      	ldr	r0, [r3, #0]
 801f4dc:	1d39      	adds	r1, r7, #4
 801f4de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	f7ee fab8 	bl	800da58 <osMessageQueuePut>
 801f4e8:	e793      	b.n	801f412 <I2cTestTask+0x46>
		}
		else osDelay(1);
 801f4ea:	2001      	movs	r0, #1
 801f4ec:	f7ed ff28 	bl	800d340 <osDelay>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f4f0:	e78f      	b.n	801f412 <I2cTestTask+0x46>
 801f4f2:	bf00      	nop
 801f4f4:	20025718 	.word	0x20025718
 801f4f8:	2002571c 	.word	0x2002571c
 801f4fc:	20025720 	.word	0x20025720
 801f500:	20025724 	.word	0x20025724
 801f504:	200002e4 	.word	0x200002e4
 801f508:	080249e8 	.word	0x080249e8
 801f50c:	080249f0 	.word	0x080249f0
 801f510:	080249f8 	.word	0x080249f8
 801f514:	200002dc 	.word	0x200002dc

0801f518 <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f518:	b590      	push	{r4, r7, lr}
 801f51a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f51e:	af00      	add	r7, sp, #0
 801f520:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f524:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f528:	6018      	str	r0, [r3, #0]
 801f52a:	460a      	mov	r2, r1
 801f52c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f530:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f534:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	osSemaphoreAcquire(i2c1TxSem, 0);
 801f536:	4b65      	ldr	r3, [pc, #404]	@ (801f6cc <I2C_Test_Perform+0x1b4>)
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	2100      	movs	r1, #0
 801f53c:	4618      	mov	r0, r3
 801f53e:	f7ee f911 	bl	800d764 <osSemaphoreAcquire>
	osSemaphoreAcquire(i2c1RxSem, 0);
 801f542:	4b63      	ldr	r3, [pc, #396]	@ (801f6d0 <I2C_Test_Perform+0x1b8>)
 801f544:	681b      	ldr	r3, [r3, #0]
 801f546:	2100      	movs	r1, #0
 801f548:	4618      	mov	r0, r3
 801f54a:	f7ee f90b 	bl	800d764 <osSemaphoreAcquire>
	osSemaphoreAcquire(i2c2TxSem, 0);
 801f54e:	4b61      	ldr	r3, [pc, #388]	@ (801f6d4 <I2C_Test_Perform+0x1bc>)
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	2100      	movs	r1, #0
 801f554:	4618      	mov	r0, r3
 801f556:	f7ee f905 	bl	800d764 <osSemaphoreAcquire>
	osSemaphoreAcquire(i2c2RxSem, 0);
 801f55a:	4b5f      	ldr	r3, [pc, #380]	@ (801f6d8 <I2C_Test_Perform+0x1c0>)
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	2100      	movs	r1, #0
 801f560:	4618      	mov	r0, r3
 801f562:	f7ee f8ff 	bl	800d764 <osSemaphoreAcquire>

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801f566:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f56a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f56e:	781b      	ldrb	r3, [r3, #0]
 801f570:	b29a      	uxth	r2, r3
 801f572:	f107 0308 	add.w	r3, r7, #8
 801f576:	4619      	mov	r1, r3
 801f578:	4858      	ldr	r0, [pc, #352]	@ (801f6dc <I2C_Test_Perform+0x1c4>)
 801f57a:	f7e6 fab9 	bl	8005af0 <HAL_I2C_Slave_Receive_DMA>
 801f57e:	4603      	mov	r3, r0
 801f580:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f584:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f588:	2b00      	cmp	r3, #0
 801f58a:	d004      	beq.n	801f596 <I2C_Test_Perform+0x7e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
 801f58c:	4854      	ldr	r0, [pc, #336]	@ (801f6e0 <I2C_Test_Perform+0x1c8>)
 801f58e:	f000 fef3 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f592:	23ff      	movs	r3, #255	@ 0xff
 801f594:	e095      	b.n	801f6c2 <I2C_Test_Perform+0x1aa>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801f596:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f59a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f59e:	781b      	ldrb	r3, [r3, #0]
 801f5a0:	b29b      	uxth	r3, r3
 801f5a2:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801f5a6:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801f5aa:	6812      	ldr	r2, [r2, #0]
 801f5ac:	2114      	movs	r1, #20
 801f5ae:	484d      	ldr	r0, [pc, #308]	@ (801f6e4 <I2C_Test_Perform+0x1cc>)
 801f5b0:	f7e5 ffae 	bl	8005510 <HAL_I2C_Master_Transmit_DMA>
 801f5b4:	4603      	mov	r3, r0
 801f5b6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f5ba:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	d004      	beq.n	801f5cc <I2C_Test_Perform+0xb4>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
 801f5c2:	4849      	ldr	r0, [pc, #292]	@ (801f6e8 <I2C_Test_Perform+0x1d0>)
 801f5c4:	f000 fed8 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f5c8:	23ff      	movs	r3, #255	@ 0xff
 801f5ca:	e07a      	b.n	801f6c2 <I2C_Test_Perform+0x1aa>
	}
	if (osSemaphoreAcquire(i2c1TxSem, 10) != osOK || osSemaphoreAcquire(i2c2RxSem, 10) != osOK)
 801f5cc:	4b3f      	ldr	r3, [pc, #252]	@ (801f6cc <I2C_Test_Perform+0x1b4>)
 801f5ce:	681b      	ldr	r3, [r3, #0]
 801f5d0:	210a      	movs	r1, #10
 801f5d2:	4618      	mov	r0, r3
 801f5d4:	f7ee f8c6 	bl	800d764 <osSemaphoreAcquire>
 801f5d8:	4603      	mov	r3, r0
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d108      	bne.n	801f5f0 <I2C_Test_Perform+0xd8>
 801f5de:	4b3e      	ldr	r3, [pc, #248]	@ (801f6d8 <I2C_Test_Perform+0x1c0>)
 801f5e0:	681b      	ldr	r3, [r3, #0]
 801f5e2:	210a      	movs	r1, #10
 801f5e4:	4618      	mov	r0, r3
 801f5e6:	f7ee f8bd 	bl	800d764 <osSemaphoreAcquire>
 801f5ea:	4603      	mov	r3, r0
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	d004      	beq.n	801f5fa <I2C_Test_Perform+0xe2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 semaphore timeout\n");
 801f5f0:	483e      	ldr	r0, [pc, #248]	@ (801f6ec <I2C_Test_Perform+0x1d4>)
 801f5f2:	f000 fec1 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f5f6:	23ff      	movs	r3, #255	@ 0xff
 801f5f8:	e063      	b.n	801f6c2 <I2C_Test_Perform+0x1aa>
	}

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801f5fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f5fe:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f602:	781b      	ldrb	r3, [r3, #0]
 801f604:	b29b      	uxth	r3, r3
 801f606:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f60a:	2114      	movs	r1, #20
 801f60c:	4835      	ldr	r0, [pc, #212]	@ (801f6e4 <I2C_Test_Perform+0x1cc>)
 801f60e:	f7e6 f893 	bl	8005738 <HAL_I2C_Master_Receive_DMA>
 801f612:	4603      	mov	r3, r0
 801f614:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f618:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d004      	beq.n	801f62a <I2C_Test_Perform+0x112>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
 801f620:	4833      	ldr	r0, [pc, #204]	@ (801f6f0 <I2C_Test_Perform+0x1d8>)
 801f622:	f000 fea9 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f626:	23ff      	movs	r3, #255	@ 0xff
 801f628:	e04b      	b.n	801f6c2 <I2C_Test_Perform+0x1aa>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801f62a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f62e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f632:	781b      	ldrb	r3, [r3, #0]
 801f634:	b29a      	uxth	r2, r3
 801f636:	f107 0308 	add.w	r3, r7, #8
 801f63a:	4619      	mov	r1, r3
 801f63c:	4827      	ldr	r0, [pc, #156]	@ (801f6dc <I2C_Test_Perform+0x1c4>)
 801f63e:	f7e6 f96b 	bl	8005918 <HAL_I2C_Slave_Transmit_DMA>
 801f642:	4603      	mov	r3, r0
 801f644:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f648:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f64c:	2b00      	cmp	r3, #0
 801f64e:	d004      	beq.n	801f65a <I2C_Test_Perform+0x142>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
 801f650:	4828      	ldr	r0, [pc, #160]	@ (801f6f4 <I2C_Test_Perform+0x1dc>)
 801f652:	f000 fe91 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f656:	23ff      	movs	r3, #255	@ 0xff
 801f658:	e033      	b.n	801f6c2 <I2C_Test_Perform+0x1aa>
	}
	if (osSemaphoreAcquire(i2c2TxSem, 10) != osOK || osSemaphoreAcquire(i2c1RxSem, 10) != osOK)
 801f65a:	4b1e      	ldr	r3, [pc, #120]	@ (801f6d4 <I2C_Test_Perform+0x1bc>)
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	210a      	movs	r1, #10
 801f660:	4618      	mov	r0, r3
 801f662:	f7ee f87f 	bl	800d764 <osSemaphoreAcquire>
 801f666:	4603      	mov	r3, r0
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d108      	bne.n	801f67e <I2C_Test_Perform+0x166>
 801f66c:	4b18      	ldr	r3, [pc, #96]	@ (801f6d0 <I2C_Test_Perform+0x1b8>)
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	210a      	movs	r1, #10
 801f672:	4618      	mov	r0, r3
 801f674:	f7ee f876 	bl	800d764 <osSemaphoreAcquire>
 801f678:	4603      	mov	r3, r0
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d004      	beq.n	801f688 <I2C_Test_Perform+0x170>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 semaphore timeout\n");
 801f67e:	481e      	ldr	r0, [pc, #120]	@ (801f6f8 <I2C_Test_Perform+0x1e0>)
 801f680:	f000 fe7a 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f684:	23ff      	movs	r3, #255	@ 0xff
 801f686:	e01c      	b.n	801f6c2 <I2C_Test_Perform+0x1aa>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801f688:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f68c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f690:	781c      	ldrb	r4, [r3, #0]
 801f692:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f696:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f69a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f69e:	7819      	ldrb	r1, [r3, #0]
 801f6a0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f6a4:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f6a8:	4623      	mov	r3, r4
 801f6aa:	6800      	ldr	r0, [r0, #0]
 801f6ac:	f7ff fd36 	bl	801f11c <Match_CRC>
 801f6b0:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f6b4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f6b8:	2b01      	cmp	r3, #1
 801f6ba:	d101      	bne.n	801f6c0 <I2C_Test_Perform+0x1a8>
 801f6bc:	2301      	movs	r3, #1
 801f6be:	e000      	b.n	801f6c2 <I2C_Test_Perform+0x1aa>

	return TEST_FAILED;
 801f6c0:	23ff      	movs	r3, #255	@ 0xff
}
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f6c8:	46bd      	mov	sp, r7
 801f6ca:	bd90      	pop	{r4, r7, pc}
 801f6cc:	20025718 	.word	0x20025718
 801f6d0:	2002571c 	.word	0x2002571c
 801f6d4:	20025720 	.word	0x20025720
 801f6d8:	20025724 	.word	0x20025724
 801f6dc:	20000348 	.word	0x20000348
 801f6e0:	08024a08 	.word	0x08024a08
 801f6e4:	200002f4 	.word	0x200002f4
 801f6e8:	08024a20 	.word	0x08024a20
 801f6ec:	08024a38 	.word	0x08024a38
 801f6f0:	08024a58 	.word	0x08024a58
 801f6f4:	08024a70 	.word	0x08024a70
 801f6f8:	08024a88 	.word	0x08024a88

0801f6fc <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f6fc:	b580      	push	{r7, lr}
 801f6fe:	b082      	sub	sp, #8
 801f700:	af00      	add	r7, sp, #0
 801f702:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1TxSem);
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	4a06      	ldr	r2, [pc, #24]	@ (801f720 <HAL_I2C_MasterTxCpltCallback+0x24>)
 801f708:	4293      	cmp	r3, r2
 801f70a:	d104      	bne.n	801f716 <HAL_I2C_MasterTxCpltCallback+0x1a>
 801f70c:	4b05      	ldr	r3, [pc, #20]	@ (801f724 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	4618      	mov	r0, r3
 801f712:	f7ee f88d 	bl	800d830 <osSemaphoreRelease>
}
 801f716:	bf00      	nop
 801f718:	3708      	adds	r7, #8
 801f71a:	46bd      	mov	sp, r7
 801f71c:	bd80      	pop	{r7, pc}
 801f71e:	bf00      	nop
 801f720:	200002f4 	.word	0x200002f4
 801f724:	20025718 	.word	0x20025718

0801f728 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f728:	b580      	push	{r7, lr}
 801f72a:	b082      	sub	sp, #8
 801f72c:	af00      	add	r7, sp, #0
 801f72e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1RxSem);
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	4a06      	ldr	r2, [pc, #24]	@ (801f74c <HAL_I2C_MasterRxCpltCallback+0x24>)
 801f734:	4293      	cmp	r3, r2
 801f736:	d104      	bne.n	801f742 <HAL_I2C_MasterRxCpltCallback+0x1a>
 801f738:	4b05      	ldr	r3, [pc, #20]	@ (801f750 <HAL_I2C_MasterRxCpltCallback+0x28>)
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	4618      	mov	r0, r3
 801f73e:	f7ee f877 	bl	800d830 <osSemaphoreRelease>
}
 801f742:	bf00      	nop
 801f744:	3708      	adds	r7, #8
 801f746:	46bd      	mov	sp, r7
 801f748:	bd80      	pop	{r7, pc}
 801f74a:	bf00      	nop
 801f74c:	200002f4 	.word	0x200002f4
 801f750:	2002571c 	.word	0x2002571c

0801f754 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f754:	b580      	push	{r7, lr}
 801f756:	b082      	sub	sp, #8
 801f758:	af00      	add	r7, sp, #0
 801f75a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2TxSem);
 801f75c:	687b      	ldr	r3, [r7, #4]
 801f75e:	4a06      	ldr	r2, [pc, #24]	@ (801f778 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801f760:	4293      	cmp	r3, r2
 801f762:	d104      	bne.n	801f76e <HAL_I2C_SlaveTxCpltCallback+0x1a>
 801f764:	4b05      	ldr	r3, [pc, #20]	@ (801f77c <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	4618      	mov	r0, r3
 801f76a:	f7ee f861 	bl	800d830 <osSemaphoreRelease>
}
 801f76e:	bf00      	nop
 801f770:	3708      	adds	r7, #8
 801f772:	46bd      	mov	sp, r7
 801f774:	bd80      	pop	{r7, pc}
 801f776:	bf00      	nop
 801f778:	20000348 	.word	0x20000348
 801f77c:	20025720 	.word	0x20025720

0801f780 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f780:	b580      	push	{r7, lr}
 801f782:	b082      	sub	sp, #8
 801f784:	af00      	add	r7, sp, #0
 801f786:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2RxSem);
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	4a06      	ldr	r2, [pc, #24]	@ (801f7a4 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801f78c:	4293      	cmp	r3, r2
 801f78e:	d104      	bne.n	801f79a <HAL_I2C_SlaveRxCpltCallback+0x1a>
 801f790:	4b05      	ldr	r3, [pc, #20]	@ (801f7a8 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	4618      	mov	r0, r3
 801f796:	f7ee f84b 	bl	800d830 <osSemaphoreRelease>
}
 801f79a:	bf00      	nop
 801f79c:	3708      	adds	r7, #8
 801f79e:	46bd      	mov	sp, r7
 801f7a0:	bd80      	pop	{r7, pc}
 801f7a2:	bf00      	nop
 801f7a4:	20000348 	.word	0x20000348
 801f7a8:	20025724 	.word	0x20025724

0801f7ac <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 801f7ac:	b580      	push	{r7, lr}
 801f7ae:	b0ca      	sub	sp, #296	@ 0x128
 801f7b0:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	spi1TxSem = osSemaphoreNew(1, 0, NULL);
 801f7b2:	2200      	movs	r2, #0
 801f7b4:	2100      	movs	r1, #0
 801f7b6:	2001      	movs	r0, #1
 801f7b8:	f7ed ff38 	bl	800d62c <osSemaphoreNew>
 801f7bc:	4603      	mov	r3, r0
 801f7be:	4a45      	ldr	r2, [pc, #276]	@ (801f8d4 <SpiTestTask+0x128>)
 801f7c0:	6013      	str	r3, [r2, #0]
	spi1RxSem = osSemaphoreNew(1, 0, NULL);
 801f7c2:	2200      	movs	r2, #0
 801f7c4:	2100      	movs	r1, #0
 801f7c6:	2001      	movs	r0, #1
 801f7c8:	f7ed ff30 	bl	800d62c <osSemaphoreNew>
 801f7cc:	4603      	mov	r3, r0
 801f7ce:	4a42      	ldr	r2, [pc, #264]	@ (801f8d8 <SpiTestTask+0x12c>)
 801f7d0:	6013      	str	r3, [r2, #0]
	spi4TxSem = osSemaphoreNew(1, 0, NULL);
 801f7d2:	2200      	movs	r2, #0
 801f7d4:	2100      	movs	r1, #0
 801f7d6:	2001      	movs	r0, #1
 801f7d8:	f7ed ff28 	bl	800d62c <osSemaphoreNew>
 801f7dc:	4603      	mov	r3, r0
 801f7de:	4a3f      	ldr	r2, [pc, #252]	@ (801f8dc <SpiTestTask+0x130>)
 801f7e0:	6013      	str	r3, [r2, #0]
	spi4RxSem = osSemaphoreNew(1, 0, NULL);
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	2100      	movs	r1, #0
 801f7e6:	2001      	movs	r0, #1
 801f7e8:	f7ed ff20 	bl	800d62c <osSemaphoreNew>
 801f7ec:	4603      	mov	r3, r0
 801f7ee:	4a3c      	ldr	r2, [pc, #240]	@ (801f8e0 <SpiTestTask+0x134>)
 801f7f0:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f7f2:	4b3c      	ldr	r3, [pc, #240]	@ (801f8e4 <SpiTestTask+0x138>)
 801f7f4:	6818      	ldr	r0, [r3, #0]
 801f7f6:	f107 0114 	add.w	r1, r7, #20
 801f7fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f7fe:	2200      	movs	r2, #0
 801f800:	f7ee f99e 	bl	800db40 <osMessageQueueGet>
 801f804:	4603      	mov	r3, r0
 801f806:	2b00      	cmp	r3, #0
 801f808:	d15f      	bne.n	801f8ca <SpiTestTask+0x11e>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f80a:	2300      	movs	r3, #0
 801f80c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f810:	e017      	b.n	801f842 <SpiTestTask+0x96>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f812:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f816:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f81a:	7b5a      	ldrb	r2, [r3, #13]
 801f81c:	f107 0314 	add.w	r3, r7, #20
 801f820:	330e      	adds	r3, #14
 801f822:	4611      	mov	r1, r2
 801f824:	4618      	mov	r0, r3
 801f826:	f000 f867 	bl	801f8f8 <SPI_Test_Perform>
 801f82a:	4603      	mov	r3, r0
 801f82c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f834:	2bff      	cmp	r3, #255	@ 0xff
 801f836:	d00e      	beq.n	801f856 <SpiTestTask+0xaa>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f838:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f83c:	3301      	adds	r3, #1
 801f83e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f842:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f846:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f84a:	7b1b      	ldrb	r3, [r3, #12]
 801f84c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f850:	429a      	cmp	r2, r3
 801f852:	d3de      	bcc.n	801f812 <SpiTestTask+0x66>
 801f854:	e000      	b.n	801f858 <SpiTestTask+0xac>
					break;
 801f856:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f858:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f85c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f860:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f864:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f868:	6812      	ldr	r2, [r2, #0]
 801f86a:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f86c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f870:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f874:	889a      	ldrh	r2, [r3, #4]
 801f876:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f87a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f87e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f880:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f884:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f888:	689a      	ldr	r2, [r3, #8]
 801f88a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f88e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f892:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f894:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f898:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f89c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f8a0:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("SPI test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801f8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f8a6:	2b01      	cmp	r3, #1
 801f8a8:	d101      	bne.n	801f8ae <SpiTestTask+0x102>
 801f8aa:	4b0f      	ldr	r3, [pc, #60]	@ (801f8e8 <SpiTestTask+0x13c>)
 801f8ac:	e000      	b.n	801f8b0 <SpiTestTask+0x104>
 801f8ae:	4b0f      	ldr	r3, [pc, #60]	@ (801f8ec <SpiTestTask+0x140>)
 801f8b0:	4619      	mov	r1, r3
 801f8b2:	480f      	ldr	r0, [pc, #60]	@ (801f8f0 <SpiTestTask+0x144>)
 801f8b4:	f000 fcf8 	bl	80202a8 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f8b8:	4b0e      	ldr	r3, [pc, #56]	@ (801f8f4 <SpiTestTask+0x148>)
 801f8ba:	6818      	ldr	r0, [r3, #0]
 801f8bc:	1d39      	adds	r1, r7, #4
 801f8be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8c2:	2200      	movs	r2, #0
 801f8c4:	f7ee f8c8 	bl	800da58 <osMessageQueuePut>
 801f8c8:	e793      	b.n	801f7f2 <SpiTestTask+0x46>
		}
		else osDelay(1);
 801f8ca:	2001      	movs	r0, #1
 801f8cc:	f7ed fd38 	bl	800d340 <osDelay>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f8d0:	e78f      	b.n	801f7f2 <SpiTestTask+0x46>
 801f8d2:	bf00      	nop
 801f8d4:	20025728 	.word	0x20025728
 801f8d8:	2002572c 	.word	0x2002572c
 801f8dc:	20025730 	.word	0x20025730
 801f8e0:	20025734 	.word	0x20025734
 801f8e4:	200002e8 	.word	0x200002e8
 801f8e8:	08024aa8 	.word	0x08024aa8
 801f8ec:	08024ab0 	.word	0x08024ab0
 801f8f0:	08024ab8 	.word	0x08024ab8
 801f8f4:	200002dc 	.word	0x200002dc

0801f8f8 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f8f8:	b590      	push	{r4, r7, lr}
 801f8fa:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f8fe:	af00      	add	r7, sp, #0
 801f900:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f904:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f908:	6018      	str	r0, [r3, #0]
 801f90a:	460a      	mov	r2, r1
 801f90c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f910:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f914:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	osSemaphoreAcquire(spi1TxSem, 0);
 801f916:	4b6b      	ldr	r3, [pc, #428]	@ (801fac4 <SPI_Test_Perform+0x1cc>)
 801f918:	681b      	ldr	r3, [r3, #0]
 801f91a:	2100      	movs	r1, #0
 801f91c:	4618      	mov	r0, r3
 801f91e:	f7ed ff21 	bl	800d764 <osSemaphoreAcquire>
	osSemaphoreAcquire(spi4RxSem, 0);
 801f922:	4b69      	ldr	r3, [pc, #420]	@ (801fac8 <SPI_Test_Perform+0x1d0>)
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	2100      	movs	r1, #0
 801f928:	4618      	mov	r0, r3
 801f92a:	f7ed ff1b 	bl	800d764 <osSemaphoreAcquire>
	osSemaphoreAcquire(spi4TxSem, 0);
 801f92e:	4b67      	ldr	r3, [pc, #412]	@ (801facc <SPI_Test_Perform+0x1d4>)
 801f930:	681b      	ldr	r3, [r3, #0]
 801f932:	2100      	movs	r1, #0
 801f934:	4618      	mov	r0, r3
 801f936:	f7ed ff15 	bl	800d764 <osSemaphoreAcquire>
	osSemaphoreAcquire(spi1RxSem, 0);
 801f93a:	4b65      	ldr	r3, [pc, #404]	@ (801fad0 <SPI_Test_Perform+0x1d8>)
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	2100      	movs	r1, #0
 801f940:	4618      	mov	r0, r3
 801f942:	f7ed ff0f 	bl	800d764 <osSemaphoreAcquire>

	// reset SPI before first Xfer
	HAL_SPI_Abort(&hspi1);
 801f946:	4863      	ldr	r0, [pc, #396]	@ (801fad4 <SPI_Test_Perform+0x1dc>)
 801f948:	f7e9 fcc6 	bl	80092d8 <HAL_SPI_Abort>
	HAL_SPI_Abort(&hspi4);
 801f94c:	4862      	ldr	r0, [pc, #392]	@ (801fad8 <SPI_Test_Perform+0x1e0>)
 801f94e:	f7e9 fcc3 	bl	80092d8 <HAL_SPI_Abort>

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 801f952:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f956:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f95a:	781b      	ldrb	r3, [r3, #0]
 801f95c:	b29a      	uxth	r2, r3
 801f95e:	f107 0308 	add.w	r3, r7, #8
 801f962:	4619      	mov	r1, r3
 801f964:	485c      	ldr	r0, [pc, #368]	@ (801fad8 <SPI_Test_Perform+0x1e0>)
 801f966:	f7e9 fa11 	bl	8008d8c <HAL_SPI_Receive_DMA>
 801f96a:	4603      	mov	r3, r0
 801f96c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f970:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f974:	2b00      	cmp	r3, #0
 801f976:	d004      	beq.n	801f982 <SPI_Test_Perform+0x8a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
 801f978:	4858      	ldr	r0, [pc, #352]	@ (801fadc <SPI_Test_Perform+0x1e4>)
 801f97a:	f000 fcfd 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f97e:	23ff      	movs	r3, #255	@ 0xff
 801f980:	e09a      	b.n	801fab8 <SPI_Test_Perform+0x1c0>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 801f982:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f986:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f98a:	781b      	ldrb	r3, [r3, #0]
 801f98c:	b29a      	uxth	r2, r3
 801f98e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f992:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f996:	6819      	ldr	r1, [r3, #0]
 801f998:	484e      	ldr	r0, [pc, #312]	@ (801fad4 <SPI_Test_Perform+0x1dc>)
 801f99a:	f7e9 f909 	bl	8008bb0 <HAL_SPI_Transmit_DMA>
 801f99e:	4603      	mov	r3, r0
 801f9a0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f9a4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d004      	beq.n	801f9b6 <SPI_Test_Perform+0xbe>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
 801f9ac:	484c      	ldr	r0, [pc, #304]	@ (801fae0 <SPI_Test_Perform+0x1e8>)
 801f9ae:	f000 fce3 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f9b2:	23ff      	movs	r3, #255	@ 0xff
 801f9b4:	e080      	b.n	801fab8 <SPI_Test_Perform+0x1c0>
	}
	if (osSemaphoreAcquire(spi1TxSem, 100) != osOK || osSemaphoreAcquire(spi4RxSem, 100) != osOK)
 801f9b6:	4b43      	ldr	r3, [pc, #268]	@ (801fac4 <SPI_Test_Perform+0x1cc>)
 801f9b8:	681b      	ldr	r3, [r3, #0]
 801f9ba:	2164      	movs	r1, #100	@ 0x64
 801f9bc:	4618      	mov	r0, r3
 801f9be:	f7ed fed1 	bl	800d764 <osSemaphoreAcquire>
 801f9c2:	4603      	mov	r3, r0
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	d108      	bne.n	801f9da <SPI_Test_Perform+0xe2>
 801f9c8:	4b3f      	ldr	r3, [pc, #252]	@ (801fac8 <SPI_Test_Perform+0x1d0>)
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	2164      	movs	r1, #100	@ 0x64
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	f7ed fec8 	bl	800d764 <osSemaphoreAcquire>
 801f9d4:	4603      	mov	r3, r0
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	d004      	beq.n	801f9e4 <SPI_Test_Perform+0xec>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 semaphore timeout\n");
 801f9da:	4842      	ldr	r0, [pc, #264]	@ (801fae4 <SPI_Test_Perform+0x1ec>)
 801f9dc:	f000 fccc 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801f9e0:	23ff      	movs	r3, #255	@ 0xff
 801f9e2:	e069      	b.n	801fab8 <SPI_Test_Perform+0x1c0>
	}

	// reset SPI before second Xfer
	HAL_SPI_Abort(&hspi1);
 801f9e4:	483b      	ldr	r0, [pc, #236]	@ (801fad4 <SPI_Test_Perform+0x1dc>)
 801f9e6:	f7e9 fc77 	bl	80092d8 <HAL_SPI_Abort>
	HAL_SPI_Abort(&hspi4);
 801f9ea:	483b      	ldr	r0, [pc, #236]	@ (801fad8 <SPI_Test_Perform+0x1e0>)
 801f9ec:	f7e9 fc74 	bl	80092d8 <HAL_SPI_Abort>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 801f9f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f9f4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f9f8:	781b      	ldrb	r3, [r3, #0]
 801f9fa:	b29a      	uxth	r2, r3
 801f9fc:	f107 0308 	add.w	r3, r7, #8
 801fa00:	4619      	mov	r1, r3
 801fa02:	4835      	ldr	r0, [pc, #212]	@ (801fad8 <SPI_Test_Perform+0x1e0>)
 801fa04:	f7e9 f8d4 	bl	8008bb0 <HAL_SPI_Transmit_DMA>
 801fa08:	4603      	mov	r3, r0
 801fa0a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fa0e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d004      	beq.n	801fa20 <SPI_Test_Perform+0x128>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
 801fa16:	4834      	ldr	r0, [pc, #208]	@ (801fae8 <SPI_Test_Perform+0x1f0>)
 801fa18:	f000 fcae 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801fa1c:	23ff      	movs	r3, #255	@ 0xff
 801fa1e:	e04b      	b.n	801fab8 <SPI_Test_Perform+0x1c0>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 801fa20:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa24:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fa28:	781b      	ldrb	r3, [r3, #0]
 801fa2a:	b29a      	uxth	r2, r3
 801fa2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801fa30:	4619      	mov	r1, r3
 801fa32:	4828      	ldr	r0, [pc, #160]	@ (801fad4 <SPI_Test_Perform+0x1dc>)
 801fa34:	f7e9 f9aa 	bl	8008d8c <HAL_SPI_Receive_DMA>
 801fa38:	4603      	mov	r3, r0
 801fa3a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fa3e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d004      	beq.n	801fa50 <SPI_Test_Perform+0x158>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
 801fa46:	4829      	ldr	r0, [pc, #164]	@ (801faec <SPI_Test_Perform+0x1f4>)
 801fa48:	f000 fc96 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801fa4c:	23ff      	movs	r3, #255	@ 0xff
 801fa4e:	e033      	b.n	801fab8 <SPI_Test_Perform+0x1c0>
	}
	if (osSemaphoreAcquire(spi4TxSem, 100) != osOK || osSemaphoreAcquire(spi1RxSem, 100) != osOK)
 801fa50:	4b1e      	ldr	r3, [pc, #120]	@ (801facc <SPI_Test_Perform+0x1d4>)
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	2164      	movs	r1, #100	@ 0x64
 801fa56:	4618      	mov	r0, r3
 801fa58:	f7ed fe84 	bl	800d764 <osSemaphoreAcquire>
 801fa5c:	4603      	mov	r3, r0
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	d108      	bne.n	801fa74 <SPI_Test_Perform+0x17c>
 801fa62:	4b1b      	ldr	r3, [pc, #108]	@ (801fad0 <SPI_Test_Perform+0x1d8>)
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	2164      	movs	r1, #100	@ 0x64
 801fa68:	4618      	mov	r0, r3
 801fa6a:	f7ed fe7b 	bl	800d764 <osSemaphoreAcquire>
 801fa6e:	4603      	mov	r3, r0
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	d004      	beq.n	801fa7e <SPI_Test_Perform+0x186>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 semaphore timeout\n");
 801fa74:	481e      	ldr	r0, [pc, #120]	@ (801faf0 <SPI_Test_Perform+0x1f8>)
 801fa76:	f000 fc7f 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801fa7a:	23ff      	movs	r3, #255	@ 0xff
 801fa7c:	e01c      	b.n	801fab8 <SPI_Test_Perform+0x1c0>
	}

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 801fa7e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa82:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fa86:	781c      	ldrb	r4, [r3, #0]
 801fa88:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801fa8c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa90:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fa94:	7819      	ldrb	r1, [r3, #0]
 801fa96:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa9a:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801fa9e:	4623      	mov	r3, r4
 801faa0:	6800      	ldr	r0, [r0, #0]
 801faa2:	f7ff fb3b 	bl	801f11c <Match_CRC>
 801faa6:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801faaa:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801faae:	2b01      	cmp	r3, #1
 801fab0:	d101      	bne.n	801fab6 <SPI_Test_Perform+0x1be>
 801fab2:	2301      	movs	r3, #1
 801fab4:	e000      	b.n	801fab8 <SPI_Test_Perform+0x1c0>

	return TEST_FAILED;
 801fab6:	23ff      	movs	r3, #255	@ 0xff
}
 801fab8:	4618      	mov	r0, r3
 801faba:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801fabe:	46bd      	mov	sp, r7
 801fac0:	bd90      	pop	{r4, r7, pc}
 801fac2:	bf00      	nop
 801fac4:	20025728 	.word	0x20025728
 801fac8:	20025734 	.word	0x20025734
 801facc:	20025730 	.word	0x20025730
 801fad0:	2002572c 	.word	0x2002572c
 801fad4:	2000051c 	.word	0x2000051c
 801fad8:	20000580 	.word	0x20000580
 801fadc:	08024ac8 	.word	0x08024ac8
 801fae0:	08024ae0 	.word	0x08024ae0
 801fae4:	08024af8 	.word	0x08024af8
 801fae8:	08024b18 	.word	0x08024b18
 801faec:	08024b30 	.word	0x08024b30
 801faf0:	08024b48 	.word	0x08024b48

0801faf4 <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801faf4:	b580      	push	{r7, lr}
 801faf6:	b082      	sub	sp, #8
 801faf8:	af00      	add	r7, sp, #0
 801fafa:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1TxSem);
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	4a0a      	ldr	r2, [pc, #40]	@ (801fb28 <HAL_SPI_TxCpltCallback+0x34>)
 801fb00:	4293      	cmp	r3, r2
 801fb02:	d104      	bne.n	801fb0e <HAL_SPI_TxCpltCallback+0x1a>
 801fb04:	4b09      	ldr	r3, [pc, #36]	@ (801fb2c <HAL_SPI_TxCpltCallback+0x38>)
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	4618      	mov	r0, r3
 801fb0a:	f7ed fe91 	bl	800d830 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4TxSem);
 801fb0e:	687b      	ldr	r3, [r7, #4]
 801fb10:	4a07      	ldr	r2, [pc, #28]	@ (801fb30 <HAL_SPI_TxCpltCallback+0x3c>)
 801fb12:	4293      	cmp	r3, r2
 801fb14:	d104      	bne.n	801fb20 <HAL_SPI_TxCpltCallback+0x2c>
 801fb16:	4b07      	ldr	r3, [pc, #28]	@ (801fb34 <HAL_SPI_TxCpltCallback+0x40>)
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	4618      	mov	r0, r3
 801fb1c:	f7ed fe88 	bl	800d830 <osSemaphoreRelease>
}
 801fb20:	bf00      	nop
 801fb22:	3708      	adds	r7, #8
 801fb24:	46bd      	mov	sp, r7
 801fb26:	bd80      	pop	{r7, pc}
 801fb28:	2000051c 	.word	0x2000051c
 801fb2c:	20025728 	.word	0x20025728
 801fb30:	20000580 	.word	0x20000580
 801fb34:	20025730 	.word	0x20025730

0801fb38 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801fb38:	b580      	push	{r7, lr}
 801fb3a:	b082      	sub	sp, #8
 801fb3c:	af00      	add	r7, sp, #0
 801fb3e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1RxSem);
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	4a0a      	ldr	r2, [pc, #40]	@ (801fb6c <HAL_SPI_RxCpltCallback+0x34>)
 801fb44:	4293      	cmp	r3, r2
 801fb46:	d104      	bne.n	801fb52 <HAL_SPI_RxCpltCallback+0x1a>
 801fb48:	4b09      	ldr	r3, [pc, #36]	@ (801fb70 <HAL_SPI_RxCpltCallback+0x38>)
 801fb4a:	681b      	ldr	r3, [r3, #0]
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	f7ed fe6f 	bl	800d830 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4RxSem);
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	4a07      	ldr	r2, [pc, #28]	@ (801fb74 <HAL_SPI_RxCpltCallback+0x3c>)
 801fb56:	4293      	cmp	r3, r2
 801fb58:	d104      	bne.n	801fb64 <HAL_SPI_RxCpltCallback+0x2c>
 801fb5a:	4b07      	ldr	r3, [pc, #28]	@ (801fb78 <HAL_SPI_RxCpltCallback+0x40>)
 801fb5c:	681b      	ldr	r3, [r3, #0]
 801fb5e:	4618      	mov	r0, r3
 801fb60:	f7ed fe66 	bl	800d830 <osSemaphoreRelease>
}
 801fb64:	bf00      	nop
 801fb66:	3708      	adds	r7, #8
 801fb68:	46bd      	mov	sp, r7
 801fb6a:	bd80      	pop	{r7, pc}
 801fb6c:	2000051c 	.word	0x2000051c
 801fb70:	2002572c 	.word	0x2002572c
 801fb74:	20000580 	.word	0x20000580
 801fb78:	20025734 	.word	0x20025734

0801fb7c <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 801fb7c:	b580      	push	{r7, lr}
 801fb7e:	b0ca      	sub	sp, #296	@ 0x128
 801fb80:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	testDoneSem = osSemaphoreNew(1, 0, NULL);
 801fb82:	2200      	movs	r2, #0
 801fb84:	2100      	movs	r1, #0
 801fb86:	2001      	movs	r0, #1
 801fb88:	f7ed fd50 	bl	800d62c <osSemaphoreNew>
 801fb8c:	4603      	mov	r3, r0
 801fb8e:	4a34      	ldr	r2, [pc, #208]	@ (801fc60 <TimTestTask+0xe4>)
 801fb90:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fb92:	4b34      	ldr	r3, [pc, #208]	@ (801fc64 <TimTestTask+0xe8>)
 801fb94:	6818      	ldr	r0, [r3, #0]
 801fb96:	f107 0114 	add.w	r1, r7, #20
 801fb9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fb9e:	2200      	movs	r2, #0
 801fba0:	f7ed ffce 	bl	800db40 <osMessageQueueGet>
 801fba4:	4603      	mov	r3, r0
 801fba6:	2b00      	cmp	r3, #0
 801fba8:	d155      	bne.n	801fc56 <TimTestTask+0xda>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fbaa:	2300      	movs	r3, #0
 801fbac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fbb0:	e00d      	b.n	801fbce <TimTestTask+0x52>
			{
				result = TIM_Test_Perform();
 801fbb2:	f000 f861 	bl	801fc78 <TIM_Test_Perform>
 801fbb6:	4603      	mov	r3, r0
 801fbb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fbbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fbc0:	2bff      	cmp	r3, #255	@ 0xff
 801fbc2:	d00e      	beq.n	801fbe2 <TimTestTask+0x66>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fbc4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fbc8:	3301      	adds	r3, #1
 801fbca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fbce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fbd2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fbd6:	7b1b      	ldrb	r3, [r3, #12]
 801fbd8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fbdc:	429a      	cmp	r2, r3
 801fbde:	d3e8      	bcc.n	801fbb2 <TimTestTask+0x36>
 801fbe0:	e000      	b.n	801fbe4 <TimTestTask+0x68>
					break;
 801fbe2:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fbe4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fbe8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fbec:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fbf0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fbf4:	6812      	ldr	r2, [r2, #0]
 801fbf6:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fbf8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fbfc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fc00:	889a      	ldrh	r2, [r3, #4]
 801fc02:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc06:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc0a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fc0c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fc14:	689a      	ldr	r2, [r3, #8]
 801fc16:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc1a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc1e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fc20:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc28:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fc2c:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("Timer test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801fc2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc32:	2b01      	cmp	r3, #1
 801fc34:	d101      	bne.n	801fc3a <TimTestTask+0xbe>
 801fc36:	4b0c      	ldr	r3, [pc, #48]	@ (801fc68 <TimTestTask+0xec>)
 801fc38:	e000      	b.n	801fc3c <TimTestTask+0xc0>
 801fc3a:	4b0c      	ldr	r3, [pc, #48]	@ (801fc6c <TimTestTask+0xf0>)
 801fc3c:	4619      	mov	r1, r3
 801fc3e:	480c      	ldr	r0, [pc, #48]	@ (801fc70 <TimTestTask+0xf4>)
 801fc40:	f000 fb32 	bl	80202a8 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fc44:	4b0b      	ldr	r3, [pc, #44]	@ (801fc74 <TimTestTask+0xf8>)
 801fc46:	6818      	ldr	r0, [r3, #0]
 801fc48:	1d39      	adds	r1, r7, #4
 801fc4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fc4e:	2200      	movs	r2, #0
 801fc50:	f7ed ff02 	bl	800da58 <osMessageQueuePut>
 801fc54:	e79d      	b.n	801fb92 <TimTestTask+0x16>
		}
		else osDelay(1);
 801fc56:	2001      	movs	r0, #1
 801fc58:	f7ed fb72 	bl	800d340 <osDelay>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fc5c:	e799      	b.n	801fb92 <TimTestTask+0x16>
 801fc5e:	bf00      	nop
 801fc60:	20025738 	.word	0x20025738
 801fc64:	200002f0 	.word	0x200002f0
 801fc68:	08024b68 	.word	0x08024b68
 801fc6c:	08024b70 	.word	0x08024b70
 801fc70:	08024b78 	.word	0x08024b78
 801fc74:	200002dc 	.word	0x200002dc

0801fc78 <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 801fc78:	b580      	push	{r7, lr}
 801fc7a:	b082      	sub	sp, #8
 801fc7c:	af00      	add	r7, sp, #0
	static uint8_t callback_registered = 0;

	if (!callback_registered)
 801fc7e:	4b38      	ldr	r3, [pc, #224]	@ (801fd60 <TIM_Test_Perform+0xe8>)
 801fc80:	781b      	ldrb	r3, [r3, #0]
 801fc82:	2b00      	cmp	r3, #0
 801fc84:	d107      	bne.n	801fc96 <TIM_Test_Perform+0x1e>
	{
		HAL_DMA_RegisterCallback(&hdma_tim6_up, HAL_DMA_XFER_CPLT_CB_ID, TIM6_UP_DMA_XferCplt);
 801fc86:	4a37      	ldr	r2, [pc, #220]	@ (801fd64 <TIM_Test_Perform+0xec>)
 801fc88:	2100      	movs	r1, #0
 801fc8a:	4837      	ldr	r0, [pc, #220]	@ (801fd68 <TIM_Test_Perform+0xf0>)
 801fc8c:	f7e3 fe34 	bl	80038f8 <HAL_DMA_RegisterCallback>
		callback_registered = 1;
 801fc90:	4b33      	ldr	r3, [pc, #204]	@ (801fd60 <TIM_Test_Perform+0xe8>)
 801fc92:	2201      	movs	r2, #1
 801fc94:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_Base_Start(&htim2);
 801fc96:	4835      	ldr	r0, [pc, #212]	@ (801fd6c <TIM_Test_Perform+0xf4>)
 801fc98:	f7ea fa20 	bl	800a0dc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 801fc9c:	4834      	ldr	r0, [pc, #208]	@ (801fd70 <TIM_Test_Perform+0xf8>)
 801fc9e:	f7ea fa1d 	bl	800a0dc <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 801fca2:	4b32      	ldr	r3, [pc, #200]	@ (801fd6c <TIM_Test_Perform+0xf4>)
 801fca4:	681b      	ldr	r3, [r3, #0]
 801fca6:	3324      	adds	r3, #36	@ 0x24
 801fca8:	4619      	mov	r1, r3
 801fcaa:	4a32      	ldr	r2, [pc, #200]	@ (801fd74 <TIM_Test_Perform+0xfc>)
 801fcac:	230a      	movs	r3, #10
 801fcae:	482e      	ldr	r0, [pc, #184]	@ (801fd68 <TIM_Test_Perform+0xf0>)
 801fcb0:	f7e3 fba6 	bl	8003400 <HAL_DMA_Start_IT>
 801fcb4:	4603      	mov	r3, r0
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	d004      	beq.n	801fcc4 <TIM_Test_Perform+0x4c>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
 801fcba:	482f      	ldr	r0, [pc, #188]	@ (801fd78 <TIM_Test_Perform+0x100>)
 801fcbc:	f000 fb5c 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801fcc0:	23ff      	movs	r3, #255	@ 0xff
 801fcc2:	e049      	b.n	801fd58 <TIM_Test_Perform+0xe0>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801fcc4:	4b2a      	ldr	r3, [pc, #168]	@ (801fd70 <TIM_Test_Perform+0xf8>)
 801fcc6:	681b      	ldr	r3, [r3, #0]
 801fcc8:	68da      	ldr	r2, [r3, #12]
 801fcca:	4b29      	ldr	r3, [pc, #164]	@ (801fd70 <TIM_Test_Perform+0xf8>)
 801fccc:	681b      	ldr	r3, [r3, #0]
 801fcce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801fcd2:	60da      	str	r2, [r3, #12]

    if (osSemaphoreAcquire(testDoneSem, 10) != osOK)
 801fcd4:	4b29      	ldr	r3, [pc, #164]	@ (801fd7c <TIM_Test_Perform+0x104>)
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	210a      	movs	r1, #10
 801fcda:	4618      	mov	r0, r3
 801fcdc:	f7ed fd42 	bl	800d764 <osSemaphoreAcquire>
 801fce0:	4603      	mov	r3, r0
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d00a      	beq.n	801fcfc <TIM_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("Timer test: timeout waiting for DMA complete\n");
 801fce6:	4826      	ldr	r0, [pc, #152]	@ (801fd80 <TIM_Test_Perform+0x108>)
 801fce8:	f000 fb46 	bl	8020378 <puts>
#endif
		HAL_TIM_Base_Stop(&htim6);
 801fcec:	4820      	ldr	r0, [pc, #128]	@ (801fd70 <TIM_Test_Perform+0xf8>)
 801fcee:	f7ea fa65 	bl	800a1bc <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim2);
 801fcf2:	481e      	ldr	r0, [pc, #120]	@ (801fd6c <TIM_Test_Perform+0xf4>)
 801fcf4:	f7ea fa62 	bl	800a1bc <HAL_TIM_Base_Stop>
		return TEST_FAILED;
 801fcf8:	23ff      	movs	r3, #255	@ 0xff
 801fcfa:	e02d      	b.n	801fd58 <TIM_Test_Perform+0xe0>
	}

	HAL_TIM_Base_Stop(&htim6);
 801fcfc:	481c      	ldr	r0, [pc, #112]	@ (801fd70 <TIM_Test_Perform+0xf8>)
 801fcfe:	f7ea fa5d 	bl	800a1bc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 801fd02:	481a      	ldr	r0, [pc, #104]	@ (801fd6c <TIM_Test_Perform+0xf4>)
 801fd04:	f7ea fa5a 	bl	800a1bc <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG2
	printf("Sampling complete\n");
#endif
	for (int i = 2; i < N_SAMPLES; i++)
 801fd08:	2302      	movs	r3, #2
 801fd0a:	607b      	str	r3, [r7, #4]
 801fd0c:	e020      	b.n	801fd50 <TIM_Test_Perform+0xd8>
#ifdef PRINT_TESTS_DEBUG2
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] < EXPECTED_INTERVAL - TIM_ERR_TOLERANCE ||
 801fd0e:	4a19      	ldr	r2, [pc, #100]	@ (801fd74 <TIM_Test_Perform+0xfc>)
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	3b01      	subs	r3, #1
 801fd1a:	4916      	ldr	r1, [pc, #88]	@ (801fd74 <TIM_Test_Perform+0xfc>)
 801fd1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fd20:	1ad3      	subs	r3, r2, r3
 801fd22:	f24d 228b 	movw	r2, #53899	@ 0xd28b
 801fd26:	4293      	cmp	r3, r2
 801fd28:	d90d      	bls.n	801fd46 <TIM_Test_Perform+0xce>
			tim2_samples[i] - tim2_samples[i-1] > EXPECTED_INTERVAL + TIM_ERR_TOLERANCE)
 801fd2a:	4a12      	ldr	r2, [pc, #72]	@ (801fd74 <TIM_Test_Perform+0xfc>)
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	3b01      	subs	r3, #1
 801fd36:	490f      	ldr	r1, [pc, #60]	@ (801fd74 <TIM_Test_Perform+0xfc>)
 801fd38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fd3c:	1ad3      	subs	r3, r2, r3
		if (tim2_samples[i] - tim2_samples[i-1] < EXPECTED_INTERVAL - TIM_ERR_TOLERANCE ||
 801fd3e:	f24d 3254 	movw	r2, #54100	@ 0xd354
 801fd42:	4293      	cmp	r3, r2
 801fd44:	d901      	bls.n	801fd4a <TIM_Test_Perform+0xd2>
			return TEST_FAILED;
 801fd46:	23ff      	movs	r3, #255	@ 0xff
 801fd48:	e006      	b.n	801fd58 <TIM_Test_Perform+0xe0>
	for (int i = 2; i < N_SAMPLES; i++)
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	3301      	adds	r3, #1
 801fd4e:	607b      	str	r3, [r7, #4]
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	2b09      	cmp	r3, #9
 801fd54:	dddb      	ble.n	801fd0e <TIM_Test_Perform+0x96>
	}

	return TEST_SUCCESS;
 801fd56:	2301      	movs	r3, #1
}
 801fd58:	4618      	mov	r0, r3
 801fd5a:	3708      	adds	r7, #8
 801fd5c:	46bd      	mov	sp, r7
 801fd5e:	bd80      	pop	{r7, pc}
 801fd60:	20025764 	.word	0x20025764
 801fd64:	0801fd85 	.word	0x0801fd85
 801fd68:	2000084c 	.word	0x2000084c
 801fd6c:	200007b4 	.word	0x200007b4
 801fd70:	20000800 	.word	0x20000800
 801fd74:	2002573c 	.word	0x2002573c
 801fd78:	08024b88 	.word	0x08024b88
 801fd7c:	20025738 	.word	0x20025738
 801fd80:	08024ba4 	.word	0x08024ba4

0801fd84 <TIM6_UP_DMA_XferCplt>:
 * Using the same strategy with FreeRTOS will break the code, so I implemented
 * here a different strategy.
 */

void TIM6_UP_DMA_XferCplt(DMA_HandleTypeDef *hdma)
{
 801fd84:	b580      	push	{r7, lr}
 801fd86:	b082      	sub	sp, #8
 801fd88:	af00      	add	r7, sp, #0
 801fd8a:	6078      	str	r0, [r7, #4]
    if (hdma == &hdma_tim6_up)
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	4a06      	ldr	r2, [pc, #24]	@ (801fda8 <TIM6_UP_DMA_XferCplt+0x24>)
 801fd90:	4293      	cmp	r3, r2
 801fd92:	d104      	bne.n	801fd9e <TIM6_UP_DMA_XferCplt+0x1a>
    {
    	osSemaphoreRelease(testDoneSem);
 801fd94:	4b05      	ldr	r3, [pc, #20]	@ (801fdac <TIM6_UP_DMA_XferCplt+0x28>)
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	4618      	mov	r0, r3
 801fd9a:	f7ed fd49 	bl	800d830 <osSemaphoreRelease>
    }
}
 801fd9e:	bf00      	nop
 801fda0:	3708      	adds	r7, #8
 801fda2:	46bd      	mov	sp, r7
 801fda4:	bd80      	pop	{r7, pc}
 801fda6:	bf00      	nop
 801fda8:	2000084c 	.word	0x2000084c
 801fdac:	20025738 	.word	0x20025738

0801fdb0 <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 801fdb0:	b580      	push	{r7, lr}
 801fdb2:	b0ca      	sub	sp, #296	@ 0x128
 801fdb4:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	uart4RxSem = osSemaphoreNew(1, 0, NULL);
 801fdb6:	2200      	movs	r2, #0
 801fdb8:	2100      	movs	r1, #0
 801fdba:	2001      	movs	r0, #1
 801fdbc:	f7ed fc36 	bl	800d62c <osSemaphoreNew>
 801fdc0:	4603      	mov	r3, r0
 801fdc2:	4a3b      	ldr	r2, [pc, #236]	@ (801feb0 <UartTestTask+0x100>)
 801fdc4:	6013      	str	r3, [r2, #0]
	uart5RxSem = osSemaphoreNew(1, 0, NULL);
 801fdc6:	2200      	movs	r2, #0
 801fdc8:	2100      	movs	r1, #0
 801fdca:	2001      	movs	r0, #1
 801fdcc:	f7ed fc2e 	bl	800d62c <osSemaphoreNew>
 801fdd0:	4603      	mov	r3, r0
 801fdd2:	4a38      	ldr	r2, [pc, #224]	@ (801feb4 <UartTestTask+0x104>)
 801fdd4:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fdd6:	4b38      	ldr	r3, [pc, #224]	@ (801feb8 <UartTestTask+0x108>)
 801fdd8:	6818      	ldr	r0, [r3, #0]
 801fdda:	f107 0114 	add.w	r1, r7, #20
 801fdde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fde2:	2200      	movs	r2, #0
 801fde4:	f7ed feac 	bl	800db40 <osMessageQueueGet>
 801fde8:	4603      	mov	r3, r0
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d1f3      	bne.n	801fdd6 <UartTestTask+0x26>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fdee:	2300      	movs	r3, #0
 801fdf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fdf4:	e017      	b.n	801fe26 <UartTestTask+0x76>
			{
                result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801fdf6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fdfa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fdfe:	7b5a      	ldrb	r2, [r3, #13]
 801fe00:	f107 0314 	add.w	r3, r7, #20
 801fe04:	330e      	adds	r3, #14
 801fe06:	4611      	mov	r1, r2
 801fe08:	4618      	mov	r0, r3
 801fe0a:	f000 f85f 	bl	801fecc <UART_Test_Perform>
 801fe0e:	4603      	mov	r3, r0
 801fe10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fe14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe18:	2bff      	cmp	r3, #255	@ 0xff
 801fe1a:	d00e      	beq.n	801fe3a <UartTestTask+0x8a>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fe1c:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fe20:	3301      	adds	r3, #1
 801fe22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fe26:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fe2e:	7b1b      	ldrb	r3, [r3, #12]
 801fe30:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fe34:	429a      	cmp	r2, r3
 801fe36:	d3de      	bcc.n	801fdf6 <UartTestTask+0x46>
 801fe38:	e000      	b.n	801fe3c <UartTestTask+0x8c>
					break;
 801fe3a:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fe3c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fe44:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fe48:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fe4c:	6812      	ldr	r2, [r2, #0]
 801fe4e:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fe50:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe54:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fe58:	889a      	ldrh	r2, [r3, #4]
 801fe5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe5e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fe62:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fe64:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe68:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fe6c:	689a      	ldr	r2, [r3, #8]
 801fe6e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe72:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fe76:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fe78:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fe80:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fe84:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("UART test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801fe86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe8a:	2b01      	cmp	r3, #1
 801fe8c:	d101      	bne.n	801fe92 <UartTestTask+0xe2>
 801fe8e:	4b0b      	ldr	r3, [pc, #44]	@ (801febc <UartTestTask+0x10c>)
 801fe90:	e000      	b.n	801fe94 <UartTestTask+0xe4>
 801fe92:	4b0b      	ldr	r3, [pc, #44]	@ (801fec0 <UartTestTask+0x110>)
 801fe94:	4619      	mov	r1, r3
 801fe96:	480b      	ldr	r0, [pc, #44]	@ (801fec4 <UartTestTask+0x114>)
 801fe98:	f000 fa06 	bl	80202a8 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fe9c:	4b0a      	ldr	r3, [pc, #40]	@ (801fec8 <UartTestTask+0x118>)
 801fe9e:	6818      	ldr	r0, [r3, #0]
 801fea0:	1d39      	adds	r1, r7, #4
 801fea2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fea6:	2200      	movs	r2, #0
 801fea8:	f7ed fdd6 	bl	800da58 <osMessageQueuePut>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801feac:	e793      	b.n	801fdd6 <UartTestTask+0x26>
 801feae:	bf00      	nop
 801feb0:	20025768 	.word	0x20025768
 801feb4:	2002576c 	.word	0x2002576c
 801feb8:	200002e0 	.word	0x200002e0
 801febc:	08024bd4 	.word	0x08024bd4
 801fec0:	08024bdc 	.word	0x08024bdc
 801fec4:	08024be4 	.word	0x08024be4
 801fec8:	200002dc 	.word	0x200002dc

0801fecc <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801fecc:	b590      	push	{r4, r7, lr}
 801fece:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801fed2:	af00      	add	r7, sp, #0
 801fed4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fed8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fedc:	6018      	str	r0, [r3, #0]
 801fede:	460a      	mov	r2, r1
 801fee0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fee4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fee8:	701a      	strb	r2, [r3, #0]
	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	osSemaphoreAcquire(uart4RxSem, 0);
 801feea:	4b54      	ldr	r3, [pc, #336]	@ (802003c <UART_Test_Perform+0x170>)
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	2100      	movs	r1, #0
 801fef0:	4618      	mov	r0, r3
 801fef2:	f7ed fc37 	bl	800d764 <osSemaphoreAcquire>
	osSemaphoreAcquire(uart5RxSem, 0);
 801fef6:	4b52      	ldr	r3, [pc, #328]	@ (8020040 <UART_Test_Perform+0x174>)
 801fef8:	681b      	ldr	r3, [r3, #0]
 801fefa:	2100      	movs	r1, #0
 801fefc:	4618      	mov	r0, r3
 801fefe:	f7ed fc31 	bl	800d764 <osSemaphoreAcquire>

	HAL_UART_Abort(&huart4);
 801ff02:	4850      	ldr	r0, [pc, #320]	@ (8020044 <UART_Test_Perform+0x178>)
 801ff04:	f7ea ff5a 	bl	800adbc <HAL_UART_Abort>
	HAL_UART_Abort(&huart5);
 801ff08:	484f      	ldr	r0, [pc, #316]	@ (8020048 <UART_Test_Perform+0x17c>)
 801ff0a:	f7ea ff57 	bl	800adbc <HAL_UART_Abort>

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 801ff0e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff12:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff16:	781b      	ldrb	r3, [r3, #0]
 801ff18:	b29a      	uxth	r2, r3
 801ff1a:	f107 030c 	add.w	r3, r7, #12
 801ff1e:	4619      	mov	r1, r3
 801ff20:	4849      	ldr	r0, [pc, #292]	@ (8020048 <UART_Test_Perform+0x17c>)
 801ff22:	f7ea ff07 	bl	800ad34 <HAL_UART_Receive_DMA>
 801ff26:	4603      	mov	r3, r0
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d004      	beq.n	801ff36 <UART_Test_Perform+0x6a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
 801ff2c:	4847      	ldr	r0, [pc, #284]	@ (802004c <UART_Test_Perform+0x180>)
 801ff2e:	f000 fa23 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801ff32:	23ff      	movs	r3, #255	@ 0xff
 801ff34:	e07c      	b.n	8020030 <UART_Test_Perform+0x164>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 801ff36:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff3a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff3e:	781b      	ldrb	r3, [r3, #0]
 801ff40:	b29a      	uxth	r2, r3
 801ff42:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff46:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801ff4a:	6819      	ldr	r1, [r3, #0]
 801ff4c:	483d      	ldr	r0, [pc, #244]	@ (8020044 <UART_Test_Perform+0x178>)
 801ff4e:	f7ea fe93 	bl	800ac78 <HAL_UART_Transmit_IT>
 801ff52:	4603      	mov	r3, r0
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	d004      	beq.n	801ff62 <UART_Test_Perform+0x96>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
 801ff58:	483d      	ldr	r0, [pc, #244]	@ (8020050 <UART_Test_Perform+0x184>)
 801ff5a:	f000 fa0d 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801ff5e:	23ff      	movs	r3, #255	@ 0xff
 801ff60:	e066      	b.n	8020030 <UART_Test_Perform+0x164>
	}
	if (osSemaphoreAcquire(uart5RxSem, 10) != osOK) {
 801ff62:	4b37      	ldr	r3, [pc, #220]	@ (8020040 <UART_Test_Perform+0x174>)
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	210a      	movs	r1, #10
 801ff68:	4618      	mov	r0, r3
 801ff6a:	f7ed fbfb 	bl	800d764 <osSemaphoreAcquire>
 801ff6e:	4603      	mov	r3, r0
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	d004      	beq.n	801ff7e <UART_Test_Perform+0xb2>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart5 RX semaphore timeout\n");
 801ff74:	4837      	ldr	r0, [pc, #220]	@ (8020054 <UART_Test_Perform+0x188>)
 801ff76:	f000 f9ff 	bl	8020378 <puts>
#endif
	    return TEST_FAILED;
 801ff7a:	23ff      	movs	r3, #255	@ 0xff
 801ff7c:	e058      	b.n	8020030 <UART_Test_Perform+0x164>
	}

	HAL_UART_Abort(&huart4);
 801ff7e:	4831      	ldr	r0, [pc, #196]	@ (8020044 <UART_Test_Perform+0x178>)
 801ff80:	f7ea ff1c 	bl	800adbc <HAL_UART_Abort>
	HAL_UART_Abort(&huart5);
 801ff84:	4830      	ldr	r0, [pc, #192]	@ (8020048 <UART_Test_Perform+0x17c>)
 801ff86:	f7ea ff19 	bl	800adbc <HAL_UART_Abort>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 801ff8a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff8e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff92:	781b      	ldrb	r3, [r3, #0]
 801ff94:	b29a      	uxth	r2, r3
 801ff96:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801ff9a:	4619      	mov	r1, r3
 801ff9c:	4829      	ldr	r0, [pc, #164]	@ (8020044 <UART_Test_Perform+0x178>)
 801ff9e:	f7ea fec9 	bl	800ad34 <HAL_UART_Receive_DMA>
 801ffa2:	4603      	mov	r3, r0
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d004      	beq.n	801ffb2 <UART_Test_Perform+0xe6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
 801ffa8:	482b      	ldr	r0, [pc, #172]	@ (8020058 <UART_Test_Perform+0x18c>)
 801ffaa:	f000 f9e5 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801ffae:	23ff      	movs	r3, #255	@ 0xff
 801ffb0:	e03e      	b.n	8020030 <UART_Test_Perform+0x164>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 801ffb2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ffb6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ffba:	781b      	ldrb	r3, [r3, #0]
 801ffbc:	b29a      	uxth	r2, r3
 801ffbe:	f107 030c 	add.w	r3, r7, #12
 801ffc2:	4619      	mov	r1, r3
 801ffc4:	4820      	ldr	r0, [pc, #128]	@ (8020048 <UART_Test_Perform+0x17c>)
 801ffc6:	f7ea fe57 	bl	800ac78 <HAL_UART_Transmit_IT>
 801ffca:	4603      	mov	r3, r0
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d004      	beq.n	801ffda <UART_Test_Perform+0x10e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
 801ffd0:	4822      	ldr	r0, [pc, #136]	@ (802005c <UART_Test_Perform+0x190>)
 801ffd2:	f000 f9d1 	bl	8020378 <puts>
#endif
		return TEST_FAILED;
 801ffd6:	23ff      	movs	r3, #255	@ 0xff
 801ffd8:	e02a      	b.n	8020030 <UART_Test_Perform+0x164>
	}
	if (osSemaphoreAcquire(uart4RxSem, 10) != osOK) {
 801ffda:	4b18      	ldr	r3, [pc, #96]	@ (802003c <UART_Test_Perform+0x170>)
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	210a      	movs	r1, #10
 801ffe0:	4618      	mov	r0, r3
 801ffe2:	f7ed fbbf 	bl	800d764 <osSemaphoreAcquire>
 801ffe6:	4603      	mov	r3, r0
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d004      	beq.n	801fff6 <UART_Test_Perform+0x12a>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart4 RX semaphore timeout\n");
 801ffec:	481c      	ldr	r0, [pc, #112]	@ (8020060 <UART_Test_Perform+0x194>)
 801ffee:	f000 f9c3 	bl	8020378 <puts>
#endif
	    return TEST_FAILED;
 801fff2:	23ff      	movs	r3, #255	@ 0xff
 801fff4:	e01c      	b.n	8020030 <UART_Test_Perform+0x164>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 801fff6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fffa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fffe:	781c      	ldrb	r4, [r3, #0]
 8020000:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8020004:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020008:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802000c:	7819      	ldrb	r1, [r3, #0]
 802000e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020012:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020016:	4623      	mov	r3, r4
 8020018:	6800      	ldr	r0, [r0, #0]
 802001a:	f7ff f87f 	bl	801f11c <Match_CRC>
 802001e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8020022:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020026:	2b01      	cmp	r3, #1
 8020028:	d101      	bne.n	802002e <UART_Test_Perform+0x162>
 802002a:	2301      	movs	r3, #1
 802002c:	e000      	b.n	8020030 <UART_Test_Perform+0x164>

	return TEST_FAILED;
 802002e:	23ff      	movs	r3, #255	@ 0xff
}
 8020030:	4618      	mov	r0, r3
 8020032:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020036:	46bd      	mov	sp, r7
 8020038:	bd90      	pop	{r4, r7, pc}
 802003a:	bf00      	nop
 802003c:	20025768 	.word	0x20025768
 8020040:	2002576c 	.word	0x2002576c
 8020044:	200008ac 	.word	0x200008ac
 8020048:	20000934 	.word	0x20000934
 802004c:	08024bf4 	.word	0x08024bf4
 8020050:	08024c10 	.word	0x08024c10
 8020054:	08024c2c 	.word	0x08024c2c
 8020058:	08024c48 	.word	0x08024c48
 802005c:	08024c64 	.word	0x08024c64
 8020060:	08024c80 	.word	0x08024c80

08020064 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8020064:	b580      	push	{r7, lr}
 8020066:	b082      	sub	sp, #8
 8020068:	af00      	add	r7, sp, #0
 802006a:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) osSemaphoreRelease(uart4RxSem);
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	4a0a      	ldr	r2, [pc, #40]	@ (8020098 <HAL_UART_RxCpltCallback+0x34>)
 8020070:	4293      	cmp	r3, r2
 8020072:	d104      	bne.n	802007e <HAL_UART_RxCpltCallback+0x1a>
 8020074:	4b09      	ldr	r3, [pc, #36]	@ (802009c <HAL_UART_RxCpltCallback+0x38>)
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	4618      	mov	r0, r3
 802007a:	f7ed fbd9 	bl	800d830 <osSemaphoreRelease>
    if (huart == &huart5) osSemaphoreRelease(uart5RxSem);
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	4a07      	ldr	r2, [pc, #28]	@ (80200a0 <HAL_UART_RxCpltCallback+0x3c>)
 8020082:	4293      	cmp	r3, r2
 8020084:	d104      	bne.n	8020090 <HAL_UART_RxCpltCallback+0x2c>
 8020086:	4b07      	ldr	r3, [pc, #28]	@ (80200a4 <HAL_UART_RxCpltCallback+0x40>)
 8020088:	681b      	ldr	r3, [r3, #0]
 802008a:	4618      	mov	r0, r3
 802008c:	f7ed fbd0 	bl	800d830 <osSemaphoreRelease>
}
 8020090:	bf00      	nop
 8020092:	3708      	adds	r7, #8
 8020094:	46bd      	mov	sp, r7
 8020096:	bd80      	pop	{r7, pc}
 8020098:	200008ac 	.word	0x200008ac
 802009c:	20025768 	.word	0x20025768
 80200a0:	20000934 	.word	0x20000934
 80200a4:	2002576c 	.word	0x2002576c

080200a8 <rand>:
 80200a8:	4b16      	ldr	r3, [pc, #88]	@ (8020104 <rand+0x5c>)
 80200aa:	b510      	push	{r4, lr}
 80200ac:	681c      	ldr	r4, [r3, #0]
 80200ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80200b0:	b9b3      	cbnz	r3, 80200e0 <rand+0x38>
 80200b2:	2018      	movs	r0, #24
 80200b4:	f000 fb9a 	bl	80207ec <malloc>
 80200b8:	4602      	mov	r2, r0
 80200ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80200bc:	b920      	cbnz	r0, 80200c8 <rand+0x20>
 80200be:	4b12      	ldr	r3, [pc, #72]	@ (8020108 <rand+0x60>)
 80200c0:	4812      	ldr	r0, [pc, #72]	@ (802010c <rand+0x64>)
 80200c2:	2152      	movs	r1, #82	@ 0x52
 80200c4:	f000 fb2a 	bl	802071c <__assert_func>
 80200c8:	4911      	ldr	r1, [pc, #68]	@ (8020110 <rand+0x68>)
 80200ca:	4b12      	ldr	r3, [pc, #72]	@ (8020114 <rand+0x6c>)
 80200cc:	e9c0 1300 	strd	r1, r3, [r0]
 80200d0:	4b11      	ldr	r3, [pc, #68]	@ (8020118 <rand+0x70>)
 80200d2:	6083      	str	r3, [r0, #8]
 80200d4:	230b      	movs	r3, #11
 80200d6:	8183      	strh	r3, [r0, #12]
 80200d8:	2100      	movs	r1, #0
 80200da:	2001      	movs	r0, #1
 80200dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80200e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80200e2:	480e      	ldr	r0, [pc, #56]	@ (802011c <rand+0x74>)
 80200e4:	690b      	ldr	r3, [r1, #16]
 80200e6:	694c      	ldr	r4, [r1, #20]
 80200e8:	4a0d      	ldr	r2, [pc, #52]	@ (8020120 <rand+0x78>)
 80200ea:	4358      	muls	r0, r3
 80200ec:	fb02 0004 	mla	r0, r2, r4, r0
 80200f0:	fba3 3202 	umull	r3, r2, r3, r2
 80200f4:	3301      	adds	r3, #1
 80200f6:	eb40 0002 	adc.w	r0, r0, r2
 80200fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80200fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8020102:	bd10      	pop	{r4, pc}
 8020104:	2000003c 	.word	0x2000003c
 8020108:	08025012 	.word	0x08025012
 802010c:	08025029 	.word	0x08025029
 8020110:	abcd330e 	.word	0xabcd330e
 8020114:	e66d1234 	.word	0xe66d1234
 8020118:	0005deec 	.word	0x0005deec
 802011c:	5851f42d 	.word	0x5851f42d
 8020120:	4c957f2d 	.word	0x4c957f2d

08020124 <std>:
 8020124:	2300      	movs	r3, #0
 8020126:	b510      	push	{r4, lr}
 8020128:	4604      	mov	r4, r0
 802012a:	e9c0 3300 	strd	r3, r3, [r0]
 802012e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020132:	6083      	str	r3, [r0, #8]
 8020134:	8181      	strh	r1, [r0, #12]
 8020136:	6643      	str	r3, [r0, #100]	@ 0x64
 8020138:	81c2      	strh	r2, [r0, #14]
 802013a:	6183      	str	r3, [r0, #24]
 802013c:	4619      	mov	r1, r3
 802013e:	2208      	movs	r2, #8
 8020140:	305c      	adds	r0, #92	@ 0x5c
 8020142:	f000 fa09 	bl	8020558 <memset>
 8020146:	4b0d      	ldr	r3, [pc, #52]	@ (802017c <std+0x58>)
 8020148:	6263      	str	r3, [r4, #36]	@ 0x24
 802014a:	4b0d      	ldr	r3, [pc, #52]	@ (8020180 <std+0x5c>)
 802014c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802014e:	4b0d      	ldr	r3, [pc, #52]	@ (8020184 <std+0x60>)
 8020150:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020152:	4b0d      	ldr	r3, [pc, #52]	@ (8020188 <std+0x64>)
 8020154:	6323      	str	r3, [r4, #48]	@ 0x30
 8020156:	4b0d      	ldr	r3, [pc, #52]	@ (802018c <std+0x68>)
 8020158:	6224      	str	r4, [r4, #32]
 802015a:	429c      	cmp	r4, r3
 802015c:	d006      	beq.n	802016c <std+0x48>
 802015e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020162:	4294      	cmp	r4, r2
 8020164:	d002      	beq.n	802016c <std+0x48>
 8020166:	33d0      	adds	r3, #208	@ 0xd0
 8020168:	429c      	cmp	r4, r3
 802016a:	d105      	bne.n	8020178 <std+0x54>
 802016c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020174:	f000 bac0 	b.w	80206f8 <__retarget_lock_init_recursive>
 8020178:	bd10      	pop	{r4, pc}
 802017a:	bf00      	nop
 802017c:	08020389 	.word	0x08020389
 8020180:	080203ab 	.word	0x080203ab
 8020184:	080203e3 	.word	0x080203e3
 8020188:	08020407 	.word	0x08020407
 802018c:	20025770 	.word	0x20025770

08020190 <stdio_exit_handler>:
 8020190:	4a02      	ldr	r2, [pc, #8]	@ (802019c <stdio_exit_handler+0xc>)
 8020192:	4903      	ldr	r1, [pc, #12]	@ (80201a0 <stdio_exit_handler+0x10>)
 8020194:	4803      	ldr	r0, [pc, #12]	@ (80201a4 <stdio_exit_handler+0x14>)
 8020196:	f000 b869 	b.w	802026c <_fwalk_sglue>
 802019a:	bf00      	nop
 802019c:	20000030 	.word	0x20000030
 80201a0:	08020ffd 	.word	0x08020ffd
 80201a4:	20000040 	.word	0x20000040

080201a8 <cleanup_stdio>:
 80201a8:	6841      	ldr	r1, [r0, #4]
 80201aa:	4b0c      	ldr	r3, [pc, #48]	@ (80201dc <cleanup_stdio+0x34>)
 80201ac:	4299      	cmp	r1, r3
 80201ae:	b510      	push	{r4, lr}
 80201b0:	4604      	mov	r4, r0
 80201b2:	d001      	beq.n	80201b8 <cleanup_stdio+0x10>
 80201b4:	f000 ff22 	bl	8020ffc <_fflush_r>
 80201b8:	68a1      	ldr	r1, [r4, #8]
 80201ba:	4b09      	ldr	r3, [pc, #36]	@ (80201e0 <cleanup_stdio+0x38>)
 80201bc:	4299      	cmp	r1, r3
 80201be:	d002      	beq.n	80201c6 <cleanup_stdio+0x1e>
 80201c0:	4620      	mov	r0, r4
 80201c2:	f000 ff1b 	bl	8020ffc <_fflush_r>
 80201c6:	68e1      	ldr	r1, [r4, #12]
 80201c8:	4b06      	ldr	r3, [pc, #24]	@ (80201e4 <cleanup_stdio+0x3c>)
 80201ca:	4299      	cmp	r1, r3
 80201cc:	d004      	beq.n	80201d8 <cleanup_stdio+0x30>
 80201ce:	4620      	mov	r0, r4
 80201d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80201d4:	f000 bf12 	b.w	8020ffc <_fflush_r>
 80201d8:	bd10      	pop	{r4, pc}
 80201da:	bf00      	nop
 80201dc:	20025770 	.word	0x20025770
 80201e0:	200257d8 	.word	0x200257d8
 80201e4:	20025840 	.word	0x20025840

080201e8 <global_stdio_init.part.0>:
 80201e8:	b510      	push	{r4, lr}
 80201ea:	4b0b      	ldr	r3, [pc, #44]	@ (8020218 <global_stdio_init.part.0+0x30>)
 80201ec:	4c0b      	ldr	r4, [pc, #44]	@ (802021c <global_stdio_init.part.0+0x34>)
 80201ee:	4a0c      	ldr	r2, [pc, #48]	@ (8020220 <global_stdio_init.part.0+0x38>)
 80201f0:	601a      	str	r2, [r3, #0]
 80201f2:	4620      	mov	r0, r4
 80201f4:	2200      	movs	r2, #0
 80201f6:	2104      	movs	r1, #4
 80201f8:	f7ff ff94 	bl	8020124 <std>
 80201fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020200:	2201      	movs	r2, #1
 8020202:	2109      	movs	r1, #9
 8020204:	f7ff ff8e 	bl	8020124 <std>
 8020208:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802020c:	2202      	movs	r2, #2
 802020e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020212:	2112      	movs	r1, #18
 8020214:	f7ff bf86 	b.w	8020124 <std>
 8020218:	200258a8 	.word	0x200258a8
 802021c:	20025770 	.word	0x20025770
 8020220:	08020191 	.word	0x08020191

08020224 <__sfp_lock_acquire>:
 8020224:	4801      	ldr	r0, [pc, #4]	@ (802022c <__sfp_lock_acquire+0x8>)
 8020226:	f000 ba68 	b.w	80206fa <__retarget_lock_acquire_recursive>
 802022a:	bf00      	nop
 802022c:	200258b1 	.word	0x200258b1

08020230 <__sfp_lock_release>:
 8020230:	4801      	ldr	r0, [pc, #4]	@ (8020238 <__sfp_lock_release+0x8>)
 8020232:	f000 ba63 	b.w	80206fc <__retarget_lock_release_recursive>
 8020236:	bf00      	nop
 8020238:	200258b1 	.word	0x200258b1

0802023c <__sinit>:
 802023c:	b510      	push	{r4, lr}
 802023e:	4604      	mov	r4, r0
 8020240:	f7ff fff0 	bl	8020224 <__sfp_lock_acquire>
 8020244:	6a23      	ldr	r3, [r4, #32]
 8020246:	b11b      	cbz	r3, 8020250 <__sinit+0x14>
 8020248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802024c:	f7ff bff0 	b.w	8020230 <__sfp_lock_release>
 8020250:	4b04      	ldr	r3, [pc, #16]	@ (8020264 <__sinit+0x28>)
 8020252:	6223      	str	r3, [r4, #32]
 8020254:	4b04      	ldr	r3, [pc, #16]	@ (8020268 <__sinit+0x2c>)
 8020256:	681b      	ldr	r3, [r3, #0]
 8020258:	2b00      	cmp	r3, #0
 802025a:	d1f5      	bne.n	8020248 <__sinit+0xc>
 802025c:	f7ff ffc4 	bl	80201e8 <global_stdio_init.part.0>
 8020260:	e7f2      	b.n	8020248 <__sinit+0xc>
 8020262:	bf00      	nop
 8020264:	080201a9 	.word	0x080201a9
 8020268:	200258a8 	.word	0x200258a8

0802026c <_fwalk_sglue>:
 802026c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020270:	4607      	mov	r7, r0
 8020272:	4688      	mov	r8, r1
 8020274:	4614      	mov	r4, r2
 8020276:	2600      	movs	r6, #0
 8020278:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802027c:	f1b9 0901 	subs.w	r9, r9, #1
 8020280:	d505      	bpl.n	802028e <_fwalk_sglue+0x22>
 8020282:	6824      	ldr	r4, [r4, #0]
 8020284:	2c00      	cmp	r4, #0
 8020286:	d1f7      	bne.n	8020278 <_fwalk_sglue+0xc>
 8020288:	4630      	mov	r0, r6
 802028a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802028e:	89ab      	ldrh	r3, [r5, #12]
 8020290:	2b01      	cmp	r3, #1
 8020292:	d907      	bls.n	80202a4 <_fwalk_sglue+0x38>
 8020294:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020298:	3301      	adds	r3, #1
 802029a:	d003      	beq.n	80202a4 <_fwalk_sglue+0x38>
 802029c:	4629      	mov	r1, r5
 802029e:	4638      	mov	r0, r7
 80202a0:	47c0      	blx	r8
 80202a2:	4306      	orrs	r6, r0
 80202a4:	3568      	adds	r5, #104	@ 0x68
 80202a6:	e7e9      	b.n	802027c <_fwalk_sglue+0x10>

080202a8 <iprintf>:
 80202a8:	b40f      	push	{r0, r1, r2, r3}
 80202aa:	b507      	push	{r0, r1, r2, lr}
 80202ac:	4906      	ldr	r1, [pc, #24]	@ (80202c8 <iprintf+0x20>)
 80202ae:	ab04      	add	r3, sp, #16
 80202b0:	6808      	ldr	r0, [r1, #0]
 80202b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80202b6:	6881      	ldr	r1, [r0, #8]
 80202b8:	9301      	str	r3, [sp, #4]
 80202ba:	f000 fb77 	bl	80209ac <_vfiprintf_r>
 80202be:	b003      	add	sp, #12
 80202c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80202c4:	b004      	add	sp, #16
 80202c6:	4770      	bx	lr
 80202c8:	2000003c 	.word	0x2000003c

080202cc <_puts_r>:
 80202cc:	6a03      	ldr	r3, [r0, #32]
 80202ce:	b570      	push	{r4, r5, r6, lr}
 80202d0:	6884      	ldr	r4, [r0, #8]
 80202d2:	4605      	mov	r5, r0
 80202d4:	460e      	mov	r6, r1
 80202d6:	b90b      	cbnz	r3, 80202dc <_puts_r+0x10>
 80202d8:	f7ff ffb0 	bl	802023c <__sinit>
 80202dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80202de:	07db      	lsls	r3, r3, #31
 80202e0:	d405      	bmi.n	80202ee <_puts_r+0x22>
 80202e2:	89a3      	ldrh	r3, [r4, #12]
 80202e4:	0598      	lsls	r0, r3, #22
 80202e6:	d402      	bmi.n	80202ee <_puts_r+0x22>
 80202e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80202ea:	f000 fa06 	bl	80206fa <__retarget_lock_acquire_recursive>
 80202ee:	89a3      	ldrh	r3, [r4, #12]
 80202f0:	0719      	lsls	r1, r3, #28
 80202f2:	d502      	bpl.n	80202fa <_puts_r+0x2e>
 80202f4:	6923      	ldr	r3, [r4, #16]
 80202f6:	2b00      	cmp	r3, #0
 80202f8:	d135      	bne.n	8020366 <_puts_r+0x9a>
 80202fa:	4621      	mov	r1, r4
 80202fc:	4628      	mov	r0, r5
 80202fe:	f000 f8c5 	bl	802048c <__swsetup_r>
 8020302:	b380      	cbz	r0, 8020366 <_puts_r+0x9a>
 8020304:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8020308:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802030a:	07da      	lsls	r2, r3, #31
 802030c:	d405      	bmi.n	802031a <_puts_r+0x4e>
 802030e:	89a3      	ldrh	r3, [r4, #12]
 8020310:	059b      	lsls	r3, r3, #22
 8020312:	d402      	bmi.n	802031a <_puts_r+0x4e>
 8020314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020316:	f000 f9f1 	bl	80206fc <__retarget_lock_release_recursive>
 802031a:	4628      	mov	r0, r5
 802031c:	bd70      	pop	{r4, r5, r6, pc}
 802031e:	2b00      	cmp	r3, #0
 8020320:	da04      	bge.n	802032c <_puts_r+0x60>
 8020322:	69a2      	ldr	r2, [r4, #24]
 8020324:	429a      	cmp	r2, r3
 8020326:	dc17      	bgt.n	8020358 <_puts_r+0x8c>
 8020328:	290a      	cmp	r1, #10
 802032a:	d015      	beq.n	8020358 <_puts_r+0x8c>
 802032c:	6823      	ldr	r3, [r4, #0]
 802032e:	1c5a      	adds	r2, r3, #1
 8020330:	6022      	str	r2, [r4, #0]
 8020332:	7019      	strb	r1, [r3, #0]
 8020334:	68a3      	ldr	r3, [r4, #8]
 8020336:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802033a:	3b01      	subs	r3, #1
 802033c:	60a3      	str	r3, [r4, #8]
 802033e:	2900      	cmp	r1, #0
 8020340:	d1ed      	bne.n	802031e <_puts_r+0x52>
 8020342:	2b00      	cmp	r3, #0
 8020344:	da11      	bge.n	802036a <_puts_r+0x9e>
 8020346:	4622      	mov	r2, r4
 8020348:	210a      	movs	r1, #10
 802034a:	4628      	mov	r0, r5
 802034c:	f000 f85f 	bl	802040e <__swbuf_r>
 8020350:	3001      	adds	r0, #1
 8020352:	d0d7      	beq.n	8020304 <_puts_r+0x38>
 8020354:	250a      	movs	r5, #10
 8020356:	e7d7      	b.n	8020308 <_puts_r+0x3c>
 8020358:	4622      	mov	r2, r4
 802035a:	4628      	mov	r0, r5
 802035c:	f000 f857 	bl	802040e <__swbuf_r>
 8020360:	3001      	adds	r0, #1
 8020362:	d1e7      	bne.n	8020334 <_puts_r+0x68>
 8020364:	e7ce      	b.n	8020304 <_puts_r+0x38>
 8020366:	3e01      	subs	r6, #1
 8020368:	e7e4      	b.n	8020334 <_puts_r+0x68>
 802036a:	6823      	ldr	r3, [r4, #0]
 802036c:	1c5a      	adds	r2, r3, #1
 802036e:	6022      	str	r2, [r4, #0]
 8020370:	220a      	movs	r2, #10
 8020372:	701a      	strb	r2, [r3, #0]
 8020374:	e7ee      	b.n	8020354 <_puts_r+0x88>
	...

08020378 <puts>:
 8020378:	4b02      	ldr	r3, [pc, #8]	@ (8020384 <puts+0xc>)
 802037a:	4601      	mov	r1, r0
 802037c:	6818      	ldr	r0, [r3, #0]
 802037e:	f7ff bfa5 	b.w	80202cc <_puts_r>
 8020382:	bf00      	nop
 8020384:	2000003c 	.word	0x2000003c

08020388 <__sread>:
 8020388:	b510      	push	{r4, lr}
 802038a:	460c      	mov	r4, r1
 802038c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020390:	f000 f96a 	bl	8020668 <_read_r>
 8020394:	2800      	cmp	r0, #0
 8020396:	bfab      	itete	ge
 8020398:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802039a:	89a3      	ldrhlt	r3, [r4, #12]
 802039c:	181b      	addge	r3, r3, r0
 802039e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80203a2:	bfac      	ite	ge
 80203a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80203a6:	81a3      	strhlt	r3, [r4, #12]
 80203a8:	bd10      	pop	{r4, pc}

080203aa <__swrite>:
 80203aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203ae:	461f      	mov	r7, r3
 80203b0:	898b      	ldrh	r3, [r1, #12]
 80203b2:	05db      	lsls	r3, r3, #23
 80203b4:	4605      	mov	r5, r0
 80203b6:	460c      	mov	r4, r1
 80203b8:	4616      	mov	r6, r2
 80203ba:	d505      	bpl.n	80203c8 <__swrite+0x1e>
 80203bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203c0:	2302      	movs	r3, #2
 80203c2:	2200      	movs	r2, #0
 80203c4:	f000 f93e 	bl	8020644 <_lseek_r>
 80203c8:	89a3      	ldrh	r3, [r4, #12]
 80203ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80203ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80203d2:	81a3      	strh	r3, [r4, #12]
 80203d4:	4632      	mov	r2, r6
 80203d6:	463b      	mov	r3, r7
 80203d8:	4628      	mov	r0, r5
 80203da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80203de:	f000 b955 	b.w	802068c <_write_r>

080203e2 <__sseek>:
 80203e2:	b510      	push	{r4, lr}
 80203e4:	460c      	mov	r4, r1
 80203e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203ea:	f000 f92b 	bl	8020644 <_lseek_r>
 80203ee:	1c43      	adds	r3, r0, #1
 80203f0:	89a3      	ldrh	r3, [r4, #12]
 80203f2:	bf15      	itete	ne
 80203f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80203f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80203fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80203fe:	81a3      	strheq	r3, [r4, #12]
 8020400:	bf18      	it	ne
 8020402:	81a3      	strhne	r3, [r4, #12]
 8020404:	bd10      	pop	{r4, pc}

08020406 <__sclose>:
 8020406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802040a:	f000 b8ad 	b.w	8020568 <_close_r>

0802040e <__swbuf_r>:
 802040e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020410:	460e      	mov	r6, r1
 8020412:	4614      	mov	r4, r2
 8020414:	4605      	mov	r5, r0
 8020416:	b118      	cbz	r0, 8020420 <__swbuf_r+0x12>
 8020418:	6a03      	ldr	r3, [r0, #32]
 802041a:	b90b      	cbnz	r3, 8020420 <__swbuf_r+0x12>
 802041c:	f7ff ff0e 	bl	802023c <__sinit>
 8020420:	69a3      	ldr	r3, [r4, #24]
 8020422:	60a3      	str	r3, [r4, #8]
 8020424:	89a3      	ldrh	r3, [r4, #12]
 8020426:	071a      	lsls	r2, r3, #28
 8020428:	d501      	bpl.n	802042e <__swbuf_r+0x20>
 802042a:	6923      	ldr	r3, [r4, #16]
 802042c:	b943      	cbnz	r3, 8020440 <__swbuf_r+0x32>
 802042e:	4621      	mov	r1, r4
 8020430:	4628      	mov	r0, r5
 8020432:	f000 f82b 	bl	802048c <__swsetup_r>
 8020436:	b118      	cbz	r0, 8020440 <__swbuf_r+0x32>
 8020438:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802043c:	4638      	mov	r0, r7
 802043e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020440:	6823      	ldr	r3, [r4, #0]
 8020442:	6922      	ldr	r2, [r4, #16]
 8020444:	1a98      	subs	r0, r3, r2
 8020446:	6963      	ldr	r3, [r4, #20]
 8020448:	b2f6      	uxtb	r6, r6
 802044a:	4283      	cmp	r3, r0
 802044c:	4637      	mov	r7, r6
 802044e:	dc05      	bgt.n	802045c <__swbuf_r+0x4e>
 8020450:	4621      	mov	r1, r4
 8020452:	4628      	mov	r0, r5
 8020454:	f000 fdd2 	bl	8020ffc <_fflush_r>
 8020458:	2800      	cmp	r0, #0
 802045a:	d1ed      	bne.n	8020438 <__swbuf_r+0x2a>
 802045c:	68a3      	ldr	r3, [r4, #8]
 802045e:	3b01      	subs	r3, #1
 8020460:	60a3      	str	r3, [r4, #8]
 8020462:	6823      	ldr	r3, [r4, #0]
 8020464:	1c5a      	adds	r2, r3, #1
 8020466:	6022      	str	r2, [r4, #0]
 8020468:	701e      	strb	r6, [r3, #0]
 802046a:	6962      	ldr	r2, [r4, #20]
 802046c:	1c43      	adds	r3, r0, #1
 802046e:	429a      	cmp	r2, r3
 8020470:	d004      	beq.n	802047c <__swbuf_r+0x6e>
 8020472:	89a3      	ldrh	r3, [r4, #12]
 8020474:	07db      	lsls	r3, r3, #31
 8020476:	d5e1      	bpl.n	802043c <__swbuf_r+0x2e>
 8020478:	2e0a      	cmp	r6, #10
 802047a:	d1df      	bne.n	802043c <__swbuf_r+0x2e>
 802047c:	4621      	mov	r1, r4
 802047e:	4628      	mov	r0, r5
 8020480:	f000 fdbc 	bl	8020ffc <_fflush_r>
 8020484:	2800      	cmp	r0, #0
 8020486:	d0d9      	beq.n	802043c <__swbuf_r+0x2e>
 8020488:	e7d6      	b.n	8020438 <__swbuf_r+0x2a>
	...

0802048c <__swsetup_r>:
 802048c:	b538      	push	{r3, r4, r5, lr}
 802048e:	4b29      	ldr	r3, [pc, #164]	@ (8020534 <__swsetup_r+0xa8>)
 8020490:	4605      	mov	r5, r0
 8020492:	6818      	ldr	r0, [r3, #0]
 8020494:	460c      	mov	r4, r1
 8020496:	b118      	cbz	r0, 80204a0 <__swsetup_r+0x14>
 8020498:	6a03      	ldr	r3, [r0, #32]
 802049a:	b90b      	cbnz	r3, 80204a0 <__swsetup_r+0x14>
 802049c:	f7ff fece 	bl	802023c <__sinit>
 80204a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204a4:	0719      	lsls	r1, r3, #28
 80204a6:	d422      	bmi.n	80204ee <__swsetup_r+0x62>
 80204a8:	06da      	lsls	r2, r3, #27
 80204aa:	d407      	bmi.n	80204bc <__swsetup_r+0x30>
 80204ac:	2209      	movs	r2, #9
 80204ae:	602a      	str	r2, [r5, #0]
 80204b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80204b4:	81a3      	strh	r3, [r4, #12]
 80204b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80204ba:	e033      	b.n	8020524 <__swsetup_r+0x98>
 80204bc:	0758      	lsls	r0, r3, #29
 80204be:	d512      	bpl.n	80204e6 <__swsetup_r+0x5a>
 80204c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80204c2:	b141      	cbz	r1, 80204d6 <__swsetup_r+0x4a>
 80204c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80204c8:	4299      	cmp	r1, r3
 80204ca:	d002      	beq.n	80204d2 <__swsetup_r+0x46>
 80204cc:	4628      	mov	r0, r5
 80204ce:	f000 f943 	bl	8020758 <_free_r>
 80204d2:	2300      	movs	r3, #0
 80204d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80204d6:	89a3      	ldrh	r3, [r4, #12]
 80204d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80204dc:	81a3      	strh	r3, [r4, #12]
 80204de:	2300      	movs	r3, #0
 80204e0:	6063      	str	r3, [r4, #4]
 80204e2:	6923      	ldr	r3, [r4, #16]
 80204e4:	6023      	str	r3, [r4, #0]
 80204e6:	89a3      	ldrh	r3, [r4, #12]
 80204e8:	f043 0308 	orr.w	r3, r3, #8
 80204ec:	81a3      	strh	r3, [r4, #12]
 80204ee:	6923      	ldr	r3, [r4, #16]
 80204f0:	b94b      	cbnz	r3, 8020506 <__swsetup_r+0x7a>
 80204f2:	89a3      	ldrh	r3, [r4, #12]
 80204f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80204f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80204fc:	d003      	beq.n	8020506 <__swsetup_r+0x7a>
 80204fe:	4621      	mov	r1, r4
 8020500:	4628      	mov	r0, r5
 8020502:	f000 fddb 	bl	80210bc <__smakebuf_r>
 8020506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802050a:	f013 0201 	ands.w	r2, r3, #1
 802050e:	d00a      	beq.n	8020526 <__swsetup_r+0x9a>
 8020510:	2200      	movs	r2, #0
 8020512:	60a2      	str	r2, [r4, #8]
 8020514:	6962      	ldr	r2, [r4, #20]
 8020516:	4252      	negs	r2, r2
 8020518:	61a2      	str	r2, [r4, #24]
 802051a:	6922      	ldr	r2, [r4, #16]
 802051c:	b942      	cbnz	r2, 8020530 <__swsetup_r+0xa4>
 802051e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020522:	d1c5      	bne.n	80204b0 <__swsetup_r+0x24>
 8020524:	bd38      	pop	{r3, r4, r5, pc}
 8020526:	0799      	lsls	r1, r3, #30
 8020528:	bf58      	it	pl
 802052a:	6962      	ldrpl	r2, [r4, #20]
 802052c:	60a2      	str	r2, [r4, #8]
 802052e:	e7f4      	b.n	802051a <__swsetup_r+0x8e>
 8020530:	2000      	movs	r0, #0
 8020532:	e7f7      	b.n	8020524 <__swsetup_r+0x98>
 8020534:	2000003c 	.word	0x2000003c

08020538 <memcmp>:
 8020538:	b510      	push	{r4, lr}
 802053a:	3901      	subs	r1, #1
 802053c:	4402      	add	r2, r0
 802053e:	4290      	cmp	r0, r2
 8020540:	d101      	bne.n	8020546 <memcmp+0xe>
 8020542:	2000      	movs	r0, #0
 8020544:	e005      	b.n	8020552 <memcmp+0x1a>
 8020546:	7803      	ldrb	r3, [r0, #0]
 8020548:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802054c:	42a3      	cmp	r3, r4
 802054e:	d001      	beq.n	8020554 <memcmp+0x1c>
 8020550:	1b18      	subs	r0, r3, r4
 8020552:	bd10      	pop	{r4, pc}
 8020554:	3001      	adds	r0, #1
 8020556:	e7f2      	b.n	802053e <memcmp+0x6>

08020558 <memset>:
 8020558:	4402      	add	r2, r0
 802055a:	4603      	mov	r3, r0
 802055c:	4293      	cmp	r3, r2
 802055e:	d100      	bne.n	8020562 <memset+0xa>
 8020560:	4770      	bx	lr
 8020562:	f803 1b01 	strb.w	r1, [r3], #1
 8020566:	e7f9      	b.n	802055c <memset+0x4>

08020568 <_close_r>:
 8020568:	b538      	push	{r3, r4, r5, lr}
 802056a:	4d06      	ldr	r5, [pc, #24]	@ (8020584 <_close_r+0x1c>)
 802056c:	2300      	movs	r3, #0
 802056e:	4604      	mov	r4, r0
 8020570:	4608      	mov	r0, r1
 8020572:	602b      	str	r3, [r5, #0]
 8020574:	f7e1 fa1c 	bl	80019b0 <_close>
 8020578:	1c43      	adds	r3, r0, #1
 802057a:	d102      	bne.n	8020582 <_close_r+0x1a>
 802057c:	682b      	ldr	r3, [r5, #0]
 802057e:	b103      	cbz	r3, 8020582 <_close_r+0x1a>
 8020580:	6023      	str	r3, [r4, #0]
 8020582:	bd38      	pop	{r3, r4, r5, pc}
 8020584:	200258ac 	.word	0x200258ac

08020588 <_reclaim_reent>:
 8020588:	4b2d      	ldr	r3, [pc, #180]	@ (8020640 <_reclaim_reent+0xb8>)
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	4283      	cmp	r3, r0
 802058e:	b570      	push	{r4, r5, r6, lr}
 8020590:	4604      	mov	r4, r0
 8020592:	d053      	beq.n	802063c <_reclaim_reent+0xb4>
 8020594:	69c3      	ldr	r3, [r0, #28]
 8020596:	b31b      	cbz	r3, 80205e0 <_reclaim_reent+0x58>
 8020598:	68db      	ldr	r3, [r3, #12]
 802059a:	b163      	cbz	r3, 80205b6 <_reclaim_reent+0x2e>
 802059c:	2500      	movs	r5, #0
 802059e:	69e3      	ldr	r3, [r4, #28]
 80205a0:	68db      	ldr	r3, [r3, #12]
 80205a2:	5959      	ldr	r1, [r3, r5]
 80205a4:	b9b1      	cbnz	r1, 80205d4 <_reclaim_reent+0x4c>
 80205a6:	3504      	adds	r5, #4
 80205a8:	2d80      	cmp	r5, #128	@ 0x80
 80205aa:	d1f8      	bne.n	802059e <_reclaim_reent+0x16>
 80205ac:	69e3      	ldr	r3, [r4, #28]
 80205ae:	4620      	mov	r0, r4
 80205b0:	68d9      	ldr	r1, [r3, #12]
 80205b2:	f000 f8d1 	bl	8020758 <_free_r>
 80205b6:	69e3      	ldr	r3, [r4, #28]
 80205b8:	6819      	ldr	r1, [r3, #0]
 80205ba:	b111      	cbz	r1, 80205c2 <_reclaim_reent+0x3a>
 80205bc:	4620      	mov	r0, r4
 80205be:	f000 f8cb 	bl	8020758 <_free_r>
 80205c2:	69e3      	ldr	r3, [r4, #28]
 80205c4:	689d      	ldr	r5, [r3, #8]
 80205c6:	b15d      	cbz	r5, 80205e0 <_reclaim_reent+0x58>
 80205c8:	4629      	mov	r1, r5
 80205ca:	4620      	mov	r0, r4
 80205cc:	682d      	ldr	r5, [r5, #0]
 80205ce:	f000 f8c3 	bl	8020758 <_free_r>
 80205d2:	e7f8      	b.n	80205c6 <_reclaim_reent+0x3e>
 80205d4:	680e      	ldr	r6, [r1, #0]
 80205d6:	4620      	mov	r0, r4
 80205d8:	f000 f8be 	bl	8020758 <_free_r>
 80205dc:	4631      	mov	r1, r6
 80205de:	e7e1      	b.n	80205a4 <_reclaim_reent+0x1c>
 80205e0:	6961      	ldr	r1, [r4, #20]
 80205e2:	b111      	cbz	r1, 80205ea <_reclaim_reent+0x62>
 80205e4:	4620      	mov	r0, r4
 80205e6:	f000 f8b7 	bl	8020758 <_free_r>
 80205ea:	69e1      	ldr	r1, [r4, #28]
 80205ec:	b111      	cbz	r1, 80205f4 <_reclaim_reent+0x6c>
 80205ee:	4620      	mov	r0, r4
 80205f0:	f000 f8b2 	bl	8020758 <_free_r>
 80205f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80205f6:	b111      	cbz	r1, 80205fe <_reclaim_reent+0x76>
 80205f8:	4620      	mov	r0, r4
 80205fa:	f000 f8ad 	bl	8020758 <_free_r>
 80205fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020600:	b111      	cbz	r1, 8020608 <_reclaim_reent+0x80>
 8020602:	4620      	mov	r0, r4
 8020604:	f000 f8a8 	bl	8020758 <_free_r>
 8020608:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802060a:	b111      	cbz	r1, 8020612 <_reclaim_reent+0x8a>
 802060c:	4620      	mov	r0, r4
 802060e:	f000 f8a3 	bl	8020758 <_free_r>
 8020612:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8020614:	b111      	cbz	r1, 802061c <_reclaim_reent+0x94>
 8020616:	4620      	mov	r0, r4
 8020618:	f000 f89e 	bl	8020758 <_free_r>
 802061c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802061e:	b111      	cbz	r1, 8020626 <_reclaim_reent+0x9e>
 8020620:	4620      	mov	r0, r4
 8020622:	f000 f899 	bl	8020758 <_free_r>
 8020626:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8020628:	b111      	cbz	r1, 8020630 <_reclaim_reent+0xa8>
 802062a:	4620      	mov	r0, r4
 802062c:	f000 f894 	bl	8020758 <_free_r>
 8020630:	6a23      	ldr	r3, [r4, #32]
 8020632:	b11b      	cbz	r3, 802063c <_reclaim_reent+0xb4>
 8020634:	4620      	mov	r0, r4
 8020636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802063a:	4718      	bx	r3
 802063c:	bd70      	pop	{r4, r5, r6, pc}
 802063e:	bf00      	nop
 8020640:	2000003c 	.word	0x2000003c

08020644 <_lseek_r>:
 8020644:	b538      	push	{r3, r4, r5, lr}
 8020646:	4d07      	ldr	r5, [pc, #28]	@ (8020664 <_lseek_r+0x20>)
 8020648:	4604      	mov	r4, r0
 802064a:	4608      	mov	r0, r1
 802064c:	4611      	mov	r1, r2
 802064e:	2200      	movs	r2, #0
 8020650:	602a      	str	r2, [r5, #0]
 8020652:	461a      	mov	r2, r3
 8020654:	f7e1 f9d3 	bl	80019fe <_lseek>
 8020658:	1c43      	adds	r3, r0, #1
 802065a:	d102      	bne.n	8020662 <_lseek_r+0x1e>
 802065c:	682b      	ldr	r3, [r5, #0]
 802065e:	b103      	cbz	r3, 8020662 <_lseek_r+0x1e>
 8020660:	6023      	str	r3, [r4, #0]
 8020662:	bd38      	pop	{r3, r4, r5, pc}
 8020664:	200258ac 	.word	0x200258ac

08020668 <_read_r>:
 8020668:	b538      	push	{r3, r4, r5, lr}
 802066a:	4d07      	ldr	r5, [pc, #28]	@ (8020688 <_read_r+0x20>)
 802066c:	4604      	mov	r4, r0
 802066e:	4608      	mov	r0, r1
 8020670:	4611      	mov	r1, r2
 8020672:	2200      	movs	r2, #0
 8020674:	602a      	str	r2, [r5, #0]
 8020676:	461a      	mov	r2, r3
 8020678:	f7e1 f97d 	bl	8001976 <_read>
 802067c:	1c43      	adds	r3, r0, #1
 802067e:	d102      	bne.n	8020686 <_read_r+0x1e>
 8020680:	682b      	ldr	r3, [r5, #0]
 8020682:	b103      	cbz	r3, 8020686 <_read_r+0x1e>
 8020684:	6023      	str	r3, [r4, #0]
 8020686:	bd38      	pop	{r3, r4, r5, pc}
 8020688:	200258ac 	.word	0x200258ac

0802068c <_write_r>:
 802068c:	b538      	push	{r3, r4, r5, lr}
 802068e:	4d07      	ldr	r5, [pc, #28]	@ (80206ac <_write_r+0x20>)
 8020690:	4604      	mov	r4, r0
 8020692:	4608      	mov	r0, r1
 8020694:	4611      	mov	r1, r2
 8020696:	2200      	movs	r2, #0
 8020698:	602a      	str	r2, [r5, #0]
 802069a:	461a      	mov	r2, r3
 802069c:	f7e0 fcdc 	bl	8001058 <_write>
 80206a0:	1c43      	adds	r3, r0, #1
 80206a2:	d102      	bne.n	80206aa <_write_r+0x1e>
 80206a4:	682b      	ldr	r3, [r5, #0]
 80206a6:	b103      	cbz	r3, 80206aa <_write_r+0x1e>
 80206a8:	6023      	str	r3, [r4, #0]
 80206aa:	bd38      	pop	{r3, r4, r5, pc}
 80206ac:	200258ac 	.word	0x200258ac

080206b0 <__libc_init_array>:
 80206b0:	b570      	push	{r4, r5, r6, lr}
 80206b2:	4d0d      	ldr	r5, [pc, #52]	@ (80206e8 <__libc_init_array+0x38>)
 80206b4:	4c0d      	ldr	r4, [pc, #52]	@ (80206ec <__libc_init_array+0x3c>)
 80206b6:	1b64      	subs	r4, r4, r5
 80206b8:	10a4      	asrs	r4, r4, #2
 80206ba:	2600      	movs	r6, #0
 80206bc:	42a6      	cmp	r6, r4
 80206be:	d109      	bne.n	80206d4 <__libc_init_array+0x24>
 80206c0:	4d0b      	ldr	r5, [pc, #44]	@ (80206f0 <__libc_init_array+0x40>)
 80206c2:	4c0c      	ldr	r4, [pc, #48]	@ (80206f4 <__libc_init_array+0x44>)
 80206c4:	f000 fdb4 	bl	8021230 <_init>
 80206c8:	1b64      	subs	r4, r4, r5
 80206ca:	10a4      	asrs	r4, r4, #2
 80206cc:	2600      	movs	r6, #0
 80206ce:	42a6      	cmp	r6, r4
 80206d0:	d105      	bne.n	80206de <__libc_init_array+0x2e>
 80206d2:	bd70      	pop	{r4, r5, r6, pc}
 80206d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80206d8:	4798      	blx	r3
 80206da:	3601      	adds	r6, #1
 80206dc:	e7ee      	b.n	80206bc <__libc_init_array+0xc>
 80206de:	f855 3b04 	ldr.w	r3, [r5], #4
 80206e2:	4798      	blx	r3
 80206e4:	3601      	adds	r6, #1
 80206e6:	e7f2      	b.n	80206ce <__libc_init_array+0x1e>
 80206e8:	080250f8 	.word	0x080250f8
 80206ec:	080250f8 	.word	0x080250f8
 80206f0:	080250f8 	.word	0x080250f8
 80206f4:	080250fc 	.word	0x080250fc

080206f8 <__retarget_lock_init_recursive>:
 80206f8:	4770      	bx	lr

080206fa <__retarget_lock_acquire_recursive>:
 80206fa:	4770      	bx	lr

080206fc <__retarget_lock_release_recursive>:
 80206fc:	4770      	bx	lr

080206fe <memcpy>:
 80206fe:	440a      	add	r2, r1
 8020700:	4291      	cmp	r1, r2
 8020702:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8020706:	d100      	bne.n	802070a <memcpy+0xc>
 8020708:	4770      	bx	lr
 802070a:	b510      	push	{r4, lr}
 802070c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020714:	4291      	cmp	r1, r2
 8020716:	d1f9      	bne.n	802070c <memcpy+0xe>
 8020718:	bd10      	pop	{r4, pc}
	...

0802071c <__assert_func>:
 802071c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802071e:	4614      	mov	r4, r2
 8020720:	461a      	mov	r2, r3
 8020722:	4b09      	ldr	r3, [pc, #36]	@ (8020748 <__assert_func+0x2c>)
 8020724:	681b      	ldr	r3, [r3, #0]
 8020726:	4605      	mov	r5, r0
 8020728:	68d8      	ldr	r0, [r3, #12]
 802072a:	b14c      	cbz	r4, 8020740 <__assert_func+0x24>
 802072c:	4b07      	ldr	r3, [pc, #28]	@ (802074c <__assert_func+0x30>)
 802072e:	9100      	str	r1, [sp, #0]
 8020730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020734:	4906      	ldr	r1, [pc, #24]	@ (8020750 <__assert_func+0x34>)
 8020736:	462b      	mov	r3, r5
 8020738:	f000 fc88 	bl	802104c <fiprintf>
 802073c:	f000 fd2c 	bl	8021198 <abort>
 8020740:	4b04      	ldr	r3, [pc, #16]	@ (8020754 <__assert_func+0x38>)
 8020742:	461c      	mov	r4, r3
 8020744:	e7f3      	b.n	802072e <__assert_func+0x12>
 8020746:	bf00      	nop
 8020748:	2000003c 	.word	0x2000003c
 802074c:	08025081 	.word	0x08025081
 8020750:	0802508e 	.word	0x0802508e
 8020754:	080250bc 	.word	0x080250bc

08020758 <_free_r>:
 8020758:	b538      	push	{r3, r4, r5, lr}
 802075a:	4605      	mov	r5, r0
 802075c:	2900      	cmp	r1, #0
 802075e:	d041      	beq.n	80207e4 <_free_r+0x8c>
 8020760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020764:	1f0c      	subs	r4, r1, #4
 8020766:	2b00      	cmp	r3, #0
 8020768:	bfb8      	it	lt
 802076a:	18e4      	addlt	r4, r4, r3
 802076c:	f000 f8e8 	bl	8020940 <__malloc_lock>
 8020770:	4a1d      	ldr	r2, [pc, #116]	@ (80207e8 <_free_r+0x90>)
 8020772:	6813      	ldr	r3, [r2, #0]
 8020774:	b933      	cbnz	r3, 8020784 <_free_r+0x2c>
 8020776:	6063      	str	r3, [r4, #4]
 8020778:	6014      	str	r4, [r2, #0]
 802077a:	4628      	mov	r0, r5
 802077c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020780:	f000 b8e4 	b.w	802094c <__malloc_unlock>
 8020784:	42a3      	cmp	r3, r4
 8020786:	d908      	bls.n	802079a <_free_r+0x42>
 8020788:	6820      	ldr	r0, [r4, #0]
 802078a:	1821      	adds	r1, r4, r0
 802078c:	428b      	cmp	r3, r1
 802078e:	bf01      	itttt	eq
 8020790:	6819      	ldreq	r1, [r3, #0]
 8020792:	685b      	ldreq	r3, [r3, #4]
 8020794:	1809      	addeq	r1, r1, r0
 8020796:	6021      	streq	r1, [r4, #0]
 8020798:	e7ed      	b.n	8020776 <_free_r+0x1e>
 802079a:	461a      	mov	r2, r3
 802079c:	685b      	ldr	r3, [r3, #4]
 802079e:	b10b      	cbz	r3, 80207a4 <_free_r+0x4c>
 80207a0:	42a3      	cmp	r3, r4
 80207a2:	d9fa      	bls.n	802079a <_free_r+0x42>
 80207a4:	6811      	ldr	r1, [r2, #0]
 80207a6:	1850      	adds	r0, r2, r1
 80207a8:	42a0      	cmp	r0, r4
 80207aa:	d10b      	bne.n	80207c4 <_free_r+0x6c>
 80207ac:	6820      	ldr	r0, [r4, #0]
 80207ae:	4401      	add	r1, r0
 80207b0:	1850      	adds	r0, r2, r1
 80207b2:	4283      	cmp	r3, r0
 80207b4:	6011      	str	r1, [r2, #0]
 80207b6:	d1e0      	bne.n	802077a <_free_r+0x22>
 80207b8:	6818      	ldr	r0, [r3, #0]
 80207ba:	685b      	ldr	r3, [r3, #4]
 80207bc:	6053      	str	r3, [r2, #4]
 80207be:	4408      	add	r0, r1
 80207c0:	6010      	str	r0, [r2, #0]
 80207c2:	e7da      	b.n	802077a <_free_r+0x22>
 80207c4:	d902      	bls.n	80207cc <_free_r+0x74>
 80207c6:	230c      	movs	r3, #12
 80207c8:	602b      	str	r3, [r5, #0]
 80207ca:	e7d6      	b.n	802077a <_free_r+0x22>
 80207cc:	6820      	ldr	r0, [r4, #0]
 80207ce:	1821      	adds	r1, r4, r0
 80207d0:	428b      	cmp	r3, r1
 80207d2:	bf04      	itt	eq
 80207d4:	6819      	ldreq	r1, [r3, #0]
 80207d6:	685b      	ldreq	r3, [r3, #4]
 80207d8:	6063      	str	r3, [r4, #4]
 80207da:	bf04      	itt	eq
 80207dc:	1809      	addeq	r1, r1, r0
 80207de:	6021      	streq	r1, [r4, #0]
 80207e0:	6054      	str	r4, [r2, #4]
 80207e2:	e7ca      	b.n	802077a <_free_r+0x22>
 80207e4:	bd38      	pop	{r3, r4, r5, pc}
 80207e6:	bf00      	nop
 80207e8:	200258b8 	.word	0x200258b8

080207ec <malloc>:
 80207ec:	4b02      	ldr	r3, [pc, #8]	@ (80207f8 <malloc+0xc>)
 80207ee:	4601      	mov	r1, r0
 80207f0:	6818      	ldr	r0, [r3, #0]
 80207f2:	f000 b825 	b.w	8020840 <_malloc_r>
 80207f6:	bf00      	nop
 80207f8:	2000003c 	.word	0x2000003c

080207fc <sbrk_aligned>:
 80207fc:	b570      	push	{r4, r5, r6, lr}
 80207fe:	4e0f      	ldr	r6, [pc, #60]	@ (802083c <sbrk_aligned+0x40>)
 8020800:	460c      	mov	r4, r1
 8020802:	6831      	ldr	r1, [r6, #0]
 8020804:	4605      	mov	r5, r0
 8020806:	b911      	cbnz	r1, 802080e <sbrk_aligned+0x12>
 8020808:	f000 fcb6 	bl	8021178 <_sbrk_r>
 802080c:	6030      	str	r0, [r6, #0]
 802080e:	4621      	mov	r1, r4
 8020810:	4628      	mov	r0, r5
 8020812:	f000 fcb1 	bl	8021178 <_sbrk_r>
 8020816:	1c43      	adds	r3, r0, #1
 8020818:	d103      	bne.n	8020822 <sbrk_aligned+0x26>
 802081a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802081e:	4620      	mov	r0, r4
 8020820:	bd70      	pop	{r4, r5, r6, pc}
 8020822:	1cc4      	adds	r4, r0, #3
 8020824:	f024 0403 	bic.w	r4, r4, #3
 8020828:	42a0      	cmp	r0, r4
 802082a:	d0f8      	beq.n	802081e <sbrk_aligned+0x22>
 802082c:	1a21      	subs	r1, r4, r0
 802082e:	4628      	mov	r0, r5
 8020830:	f000 fca2 	bl	8021178 <_sbrk_r>
 8020834:	3001      	adds	r0, #1
 8020836:	d1f2      	bne.n	802081e <sbrk_aligned+0x22>
 8020838:	e7ef      	b.n	802081a <sbrk_aligned+0x1e>
 802083a:	bf00      	nop
 802083c:	200258b4 	.word	0x200258b4

08020840 <_malloc_r>:
 8020840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020844:	1ccd      	adds	r5, r1, #3
 8020846:	f025 0503 	bic.w	r5, r5, #3
 802084a:	3508      	adds	r5, #8
 802084c:	2d0c      	cmp	r5, #12
 802084e:	bf38      	it	cc
 8020850:	250c      	movcc	r5, #12
 8020852:	2d00      	cmp	r5, #0
 8020854:	4606      	mov	r6, r0
 8020856:	db01      	blt.n	802085c <_malloc_r+0x1c>
 8020858:	42a9      	cmp	r1, r5
 802085a:	d904      	bls.n	8020866 <_malloc_r+0x26>
 802085c:	230c      	movs	r3, #12
 802085e:	6033      	str	r3, [r6, #0]
 8020860:	2000      	movs	r0, #0
 8020862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802093c <_malloc_r+0xfc>
 802086a:	f000 f869 	bl	8020940 <__malloc_lock>
 802086e:	f8d8 3000 	ldr.w	r3, [r8]
 8020872:	461c      	mov	r4, r3
 8020874:	bb44      	cbnz	r4, 80208c8 <_malloc_r+0x88>
 8020876:	4629      	mov	r1, r5
 8020878:	4630      	mov	r0, r6
 802087a:	f7ff ffbf 	bl	80207fc <sbrk_aligned>
 802087e:	1c43      	adds	r3, r0, #1
 8020880:	4604      	mov	r4, r0
 8020882:	d158      	bne.n	8020936 <_malloc_r+0xf6>
 8020884:	f8d8 4000 	ldr.w	r4, [r8]
 8020888:	4627      	mov	r7, r4
 802088a:	2f00      	cmp	r7, #0
 802088c:	d143      	bne.n	8020916 <_malloc_r+0xd6>
 802088e:	2c00      	cmp	r4, #0
 8020890:	d04b      	beq.n	802092a <_malloc_r+0xea>
 8020892:	6823      	ldr	r3, [r4, #0]
 8020894:	4639      	mov	r1, r7
 8020896:	4630      	mov	r0, r6
 8020898:	eb04 0903 	add.w	r9, r4, r3
 802089c:	f000 fc6c 	bl	8021178 <_sbrk_r>
 80208a0:	4581      	cmp	r9, r0
 80208a2:	d142      	bne.n	802092a <_malloc_r+0xea>
 80208a4:	6821      	ldr	r1, [r4, #0]
 80208a6:	1a6d      	subs	r5, r5, r1
 80208a8:	4629      	mov	r1, r5
 80208aa:	4630      	mov	r0, r6
 80208ac:	f7ff ffa6 	bl	80207fc <sbrk_aligned>
 80208b0:	3001      	adds	r0, #1
 80208b2:	d03a      	beq.n	802092a <_malloc_r+0xea>
 80208b4:	6823      	ldr	r3, [r4, #0]
 80208b6:	442b      	add	r3, r5
 80208b8:	6023      	str	r3, [r4, #0]
 80208ba:	f8d8 3000 	ldr.w	r3, [r8]
 80208be:	685a      	ldr	r2, [r3, #4]
 80208c0:	bb62      	cbnz	r2, 802091c <_malloc_r+0xdc>
 80208c2:	f8c8 7000 	str.w	r7, [r8]
 80208c6:	e00f      	b.n	80208e8 <_malloc_r+0xa8>
 80208c8:	6822      	ldr	r2, [r4, #0]
 80208ca:	1b52      	subs	r2, r2, r5
 80208cc:	d420      	bmi.n	8020910 <_malloc_r+0xd0>
 80208ce:	2a0b      	cmp	r2, #11
 80208d0:	d917      	bls.n	8020902 <_malloc_r+0xc2>
 80208d2:	1961      	adds	r1, r4, r5
 80208d4:	42a3      	cmp	r3, r4
 80208d6:	6025      	str	r5, [r4, #0]
 80208d8:	bf18      	it	ne
 80208da:	6059      	strne	r1, [r3, #4]
 80208dc:	6863      	ldr	r3, [r4, #4]
 80208de:	bf08      	it	eq
 80208e0:	f8c8 1000 	streq.w	r1, [r8]
 80208e4:	5162      	str	r2, [r4, r5]
 80208e6:	604b      	str	r3, [r1, #4]
 80208e8:	4630      	mov	r0, r6
 80208ea:	f000 f82f 	bl	802094c <__malloc_unlock>
 80208ee:	f104 000b 	add.w	r0, r4, #11
 80208f2:	1d23      	adds	r3, r4, #4
 80208f4:	f020 0007 	bic.w	r0, r0, #7
 80208f8:	1ac2      	subs	r2, r0, r3
 80208fa:	bf1c      	itt	ne
 80208fc:	1a1b      	subne	r3, r3, r0
 80208fe:	50a3      	strne	r3, [r4, r2]
 8020900:	e7af      	b.n	8020862 <_malloc_r+0x22>
 8020902:	6862      	ldr	r2, [r4, #4]
 8020904:	42a3      	cmp	r3, r4
 8020906:	bf0c      	ite	eq
 8020908:	f8c8 2000 	streq.w	r2, [r8]
 802090c:	605a      	strne	r2, [r3, #4]
 802090e:	e7eb      	b.n	80208e8 <_malloc_r+0xa8>
 8020910:	4623      	mov	r3, r4
 8020912:	6864      	ldr	r4, [r4, #4]
 8020914:	e7ae      	b.n	8020874 <_malloc_r+0x34>
 8020916:	463c      	mov	r4, r7
 8020918:	687f      	ldr	r7, [r7, #4]
 802091a:	e7b6      	b.n	802088a <_malloc_r+0x4a>
 802091c:	461a      	mov	r2, r3
 802091e:	685b      	ldr	r3, [r3, #4]
 8020920:	42a3      	cmp	r3, r4
 8020922:	d1fb      	bne.n	802091c <_malloc_r+0xdc>
 8020924:	2300      	movs	r3, #0
 8020926:	6053      	str	r3, [r2, #4]
 8020928:	e7de      	b.n	80208e8 <_malloc_r+0xa8>
 802092a:	230c      	movs	r3, #12
 802092c:	6033      	str	r3, [r6, #0]
 802092e:	4630      	mov	r0, r6
 8020930:	f000 f80c 	bl	802094c <__malloc_unlock>
 8020934:	e794      	b.n	8020860 <_malloc_r+0x20>
 8020936:	6005      	str	r5, [r0, #0]
 8020938:	e7d6      	b.n	80208e8 <_malloc_r+0xa8>
 802093a:	bf00      	nop
 802093c:	200258b8 	.word	0x200258b8

08020940 <__malloc_lock>:
 8020940:	4801      	ldr	r0, [pc, #4]	@ (8020948 <__malloc_lock+0x8>)
 8020942:	f7ff beda 	b.w	80206fa <__retarget_lock_acquire_recursive>
 8020946:	bf00      	nop
 8020948:	200258b0 	.word	0x200258b0

0802094c <__malloc_unlock>:
 802094c:	4801      	ldr	r0, [pc, #4]	@ (8020954 <__malloc_unlock+0x8>)
 802094e:	f7ff bed5 	b.w	80206fc <__retarget_lock_release_recursive>
 8020952:	bf00      	nop
 8020954:	200258b0 	.word	0x200258b0

08020958 <__sfputc_r>:
 8020958:	6893      	ldr	r3, [r2, #8]
 802095a:	3b01      	subs	r3, #1
 802095c:	2b00      	cmp	r3, #0
 802095e:	b410      	push	{r4}
 8020960:	6093      	str	r3, [r2, #8]
 8020962:	da08      	bge.n	8020976 <__sfputc_r+0x1e>
 8020964:	6994      	ldr	r4, [r2, #24]
 8020966:	42a3      	cmp	r3, r4
 8020968:	db01      	blt.n	802096e <__sfputc_r+0x16>
 802096a:	290a      	cmp	r1, #10
 802096c:	d103      	bne.n	8020976 <__sfputc_r+0x1e>
 802096e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020972:	f7ff bd4c 	b.w	802040e <__swbuf_r>
 8020976:	6813      	ldr	r3, [r2, #0]
 8020978:	1c58      	adds	r0, r3, #1
 802097a:	6010      	str	r0, [r2, #0]
 802097c:	7019      	strb	r1, [r3, #0]
 802097e:	4608      	mov	r0, r1
 8020980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020984:	4770      	bx	lr

08020986 <__sfputs_r>:
 8020986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020988:	4606      	mov	r6, r0
 802098a:	460f      	mov	r7, r1
 802098c:	4614      	mov	r4, r2
 802098e:	18d5      	adds	r5, r2, r3
 8020990:	42ac      	cmp	r4, r5
 8020992:	d101      	bne.n	8020998 <__sfputs_r+0x12>
 8020994:	2000      	movs	r0, #0
 8020996:	e007      	b.n	80209a8 <__sfputs_r+0x22>
 8020998:	f814 1b01 	ldrb.w	r1, [r4], #1
 802099c:	463a      	mov	r2, r7
 802099e:	4630      	mov	r0, r6
 80209a0:	f7ff ffda 	bl	8020958 <__sfputc_r>
 80209a4:	1c43      	adds	r3, r0, #1
 80209a6:	d1f3      	bne.n	8020990 <__sfputs_r+0xa>
 80209a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080209ac <_vfiprintf_r>:
 80209ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209b0:	460d      	mov	r5, r1
 80209b2:	b09d      	sub	sp, #116	@ 0x74
 80209b4:	4614      	mov	r4, r2
 80209b6:	4698      	mov	r8, r3
 80209b8:	4606      	mov	r6, r0
 80209ba:	b118      	cbz	r0, 80209c4 <_vfiprintf_r+0x18>
 80209bc:	6a03      	ldr	r3, [r0, #32]
 80209be:	b90b      	cbnz	r3, 80209c4 <_vfiprintf_r+0x18>
 80209c0:	f7ff fc3c 	bl	802023c <__sinit>
 80209c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209c6:	07d9      	lsls	r1, r3, #31
 80209c8:	d405      	bmi.n	80209d6 <_vfiprintf_r+0x2a>
 80209ca:	89ab      	ldrh	r3, [r5, #12]
 80209cc:	059a      	lsls	r2, r3, #22
 80209ce:	d402      	bmi.n	80209d6 <_vfiprintf_r+0x2a>
 80209d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80209d2:	f7ff fe92 	bl	80206fa <__retarget_lock_acquire_recursive>
 80209d6:	89ab      	ldrh	r3, [r5, #12]
 80209d8:	071b      	lsls	r3, r3, #28
 80209da:	d501      	bpl.n	80209e0 <_vfiprintf_r+0x34>
 80209dc:	692b      	ldr	r3, [r5, #16]
 80209de:	b99b      	cbnz	r3, 8020a08 <_vfiprintf_r+0x5c>
 80209e0:	4629      	mov	r1, r5
 80209e2:	4630      	mov	r0, r6
 80209e4:	f7ff fd52 	bl	802048c <__swsetup_r>
 80209e8:	b170      	cbz	r0, 8020a08 <_vfiprintf_r+0x5c>
 80209ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209ec:	07dc      	lsls	r4, r3, #31
 80209ee:	d504      	bpl.n	80209fa <_vfiprintf_r+0x4e>
 80209f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80209f4:	b01d      	add	sp, #116	@ 0x74
 80209f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209fa:	89ab      	ldrh	r3, [r5, #12]
 80209fc:	0598      	lsls	r0, r3, #22
 80209fe:	d4f7      	bmi.n	80209f0 <_vfiprintf_r+0x44>
 8020a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020a02:	f7ff fe7b 	bl	80206fc <__retarget_lock_release_recursive>
 8020a06:	e7f3      	b.n	80209f0 <_vfiprintf_r+0x44>
 8020a08:	2300      	movs	r3, #0
 8020a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a0c:	2320      	movs	r3, #32
 8020a0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8020a16:	2330      	movs	r3, #48	@ 0x30
 8020a18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020bc8 <_vfiprintf_r+0x21c>
 8020a1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020a20:	f04f 0901 	mov.w	r9, #1
 8020a24:	4623      	mov	r3, r4
 8020a26:	469a      	mov	sl, r3
 8020a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020a2c:	b10a      	cbz	r2, 8020a32 <_vfiprintf_r+0x86>
 8020a2e:	2a25      	cmp	r2, #37	@ 0x25
 8020a30:	d1f9      	bne.n	8020a26 <_vfiprintf_r+0x7a>
 8020a32:	ebba 0b04 	subs.w	fp, sl, r4
 8020a36:	d00b      	beq.n	8020a50 <_vfiprintf_r+0xa4>
 8020a38:	465b      	mov	r3, fp
 8020a3a:	4622      	mov	r2, r4
 8020a3c:	4629      	mov	r1, r5
 8020a3e:	4630      	mov	r0, r6
 8020a40:	f7ff ffa1 	bl	8020986 <__sfputs_r>
 8020a44:	3001      	adds	r0, #1
 8020a46:	f000 80a7 	beq.w	8020b98 <_vfiprintf_r+0x1ec>
 8020a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a4c:	445a      	add	r2, fp
 8020a4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8020a50:	f89a 3000 	ldrb.w	r3, [sl]
 8020a54:	2b00      	cmp	r3, #0
 8020a56:	f000 809f 	beq.w	8020b98 <_vfiprintf_r+0x1ec>
 8020a5a:	2300      	movs	r3, #0
 8020a5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020a64:	f10a 0a01 	add.w	sl, sl, #1
 8020a68:	9304      	str	r3, [sp, #16]
 8020a6a:	9307      	str	r3, [sp, #28]
 8020a6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020a70:	931a      	str	r3, [sp, #104]	@ 0x68
 8020a72:	4654      	mov	r4, sl
 8020a74:	2205      	movs	r2, #5
 8020a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a7a:	4853      	ldr	r0, [pc, #332]	@ (8020bc8 <_vfiprintf_r+0x21c>)
 8020a7c:	f7df fbc8 	bl	8000210 <memchr>
 8020a80:	9a04      	ldr	r2, [sp, #16]
 8020a82:	b9d8      	cbnz	r0, 8020abc <_vfiprintf_r+0x110>
 8020a84:	06d1      	lsls	r1, r2, #27
 8020a86:	bf44      	itt	mi
 8020a88:	2320      	movmi	r3, #32
 8020a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020a8e:	0713      	lsls	r3, r2, #28
 8020a90:	bf44      	itt	mi
 8020a92:	232b      	movmi	r3, #43	@ 0x2b
 8020a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020a98:	f89a 3000 	ldrb.w	r3, [sl]
 8020a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8020a9e:	d015      	beq.n	8020acc <_vfiprintf_r+0x120>
 8020aa0:	9a07      	ldr	r2, [sp, #28]
 8020aa2:	4654      	mov	r4, sl
 8020aa4:	2000      	movs	r0, #0
 8020aa6:	f04f 0c0a 	mov.w	ip, #10
 8020aaa:	4621      	mov	r1, r4
 8020aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020ab0:	3b30      	subs	r3, #48	@ 0x30
 8020ab2:	2b09      	cmp	r3, #9
 8020ab4:	d94b      	bls.n	8020b4e <_vfiprintf_r+0x1a2>
 8020ab6:	b1b0      	cbz	r0, 8020ae6 <_vfiprintf_r+0x13a>
 8020ab8:	9207      	str	r2, [sp, #28]
 8020aba:	e014      	b.n	8020ae6 <_vfiprintf_r+0x13a>
 8020abc:	eba0 0308 	sub.w	r3, r0, r8
 8020ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8020ac4:	4313      	orrs	r3, r2
 8020ac6:	9304      	str	r3, [sp, #16]
 8020ac8:	46a2      	mov	sl, r4
 8020aca:	e7d2      	b.n	8020a72 <_vfiprintf_r+0xc6>
 8020acc:	9b03      	ldr	r3, [sp, #12]
 8020ace:	1d19      	adds	r1, r3, #4
 8020ad0:	681b      	ldr	r3, [r3, #0]
 8020ad2:	9103      	str	r1, [sp, #12]
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	bfbb      	ittet	lt
 8020ad8:	425b      	neglt	r3, r3
 8020ada:	f042 0202 	orrlt.w	r2, r2, #2
 8020ade:	9307      	strge	r3, [sp, #28]
 8020ae0:	9307      	strlt	r3, [sp, #28]
 8020ae2:	bfb8      	it	lt
 8020ae4:	9204      	strlt	r2, [sp, #16]
 8020ae6:	7823      	ldrb	r3, [r4, #0]
 8020ae8:	2b2e      	cmp	r3, #46	@ 0x2e
 8020aea:	d10a      	bne.n	8020b02 <_vfiprintf_r+0x156>
 8020aec:	7863      	ldrb	r3, [r4, #1]
 8020aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8020af0:	d132      	bne.n	8020b58 <_vfiprintf_r+0x1ac>
 8020af2:	9b03      	ldr	r3, [sp, #12]
 8020af4:	1d1a      	adds	r2, r3, #4
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	9203      	str	r2, [sp, #12]
 8020afa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020afe:	3402      	adds	r4, #2
 8020b00:	9305      	str	r3, [sp, #20]
 8020b02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020bd8 <_vfiprintf_r+0x22c>
 8020b06:	7821      	ldrb	r1, [r4, #0]
 8020b08:	2203      	movs	r2, #3
 8020b0a:	4650      	mov	r0, sl
 8020b0c:	f7df fb80 	bl	8000210 <memchr>
 8020b10:	b138      	cbz	r0, 8020b22 <_vfiprintf_r+0x176>
 8020b12:	9b04      	ldr	r3, [sp, #16]
 8020b14:	eba0 000a 	sub.w	r0, r0, sl
 8020b18:	2240      	movs	r2, #64	@ 0x40
 8020b1a:	4082      	lsls	r2, r0
 8020b1c:	4313      	orrs	r3, r2
 8020b1e:	3401      	adds	r4, #1
 8020b20:	9304      	str	r3, [sp, #16]
 8020b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b26:	4829      	ldr	r0, [pc, #164]	@ (8020bcc <_vfiprintf_r+0x220>)
 8020b28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020b2c:	2206      	movs	r2, #6
 8020b2e:	f7df fb6f 	bl	8000210 <memchr>
 8020b32:	2800      	cmp	r0, #0
 8020b34:	d03f      	beq.n	8020bb6 <_vfiprintf_r+0x20a>
 8020b36:	4b26      	ldr	r3, [pc, #152]	@ (8020bd0 <_vfiprintf_r+0x224>)
 8020b38:	bb1b      	cbnz	r3, 8020b82 <_vfiprintf_r+0x1d6>
 8020b3a:	9b03      	ldr	r3, [sp, #12]
 8020b3c:	3307      	adds	r3, #7
 8020b3e:	f023 0307 	bic.w	r3, r3, #7
 8020b42:	3308      	adds	r3, #8
 8020b44:	9303      	str	r3, [sp, #12]
 8020b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b48:	443b      	add	r3, r7
 8020b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b4c:	e76a      	b.n	8020a24 <_vfiprintf_r+0x78>
 8020b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8020b52:	460c      	mov	r4, r1
 8020b54:	2001      	movs	r0, #1
 8020b56:	e7a8      	b.n	8020aaa <_vfiprintf_r+0xfe>
 8020b58:	2300      	movs	r3, #0
 8020b5a:	3401      	adds	r4, #1
 8020b5c:	9305      	str	r3, [sp, #20]
 8020b5e:	4619      	mov	r1, r3
 8020b60:	f04f 0c0a 	mov.w	ip, #10
 8020b64:	4620      	mov	r0, r4
 8020b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020b6a:	3a30      	subs	r2, #48	@ 0x30
 8020b6c:	2a09      	cmp	r2, #9
 8020b6e:	d903      	bls.n	8020b78 <_vfiprintf_r+0x1cc>
 8020b70:	2b00      	cmp	r3, #0
 8020b72:	d0c6      	beq.n	8020b02 <_vfiprintf_r+0x156>
 8020b74:	9105      	str	r1, [sp, #20]
 8020b76:	e7c4      	b.n	8020b02 <_vfiprintf_r+0x156>
 8020b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8020b7c:	4604      	mov	r4, r0
 8020b7e:	2301      	movs	r3, #1
 8020b80:	e7f0      	b.n	8020b64 <_vfiprintf_r+0x1b8>
 8020b82:	ab03      	add	r3, sp, #12
 8020b84:	9300      	str	r3, [sp, #0]
 8020b86:	462a      	mov	r2, r5
 8020b88:	4b12      	ldr	r3, [pc, #72]	@ (8020bd4 <_vfiprintf_r+0x228>)
 8020b8a:	a904      	add	r1, sp, #16
 8020b8c:	4630      	mov	r0, r6
 8020b8e:	f3af 8000 	nop.w
 8020b92:	4607      	mov	r7, r0
 8020b94:	1c78      	adds	r0, r7, #1
 8020b96:	d1d6      	bne.n	8020b46 <_vfiprintf_r+0x19a>
 8020b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020b9a:	07d9      	lsls	r1, r3, #31
 8020b9c:	d405      	bmi.n	8020baa <_vfiprintf_r+0x1fe>
 8020b9e:	89ab      	ldrh	r3, [r5, #12]
 8020ba0:	059a      	lsls	r2, r3, #22
 8020ba2:	d402      	bmi.n	8020baa <_vfiprintf_r+0x1fe>
 8020ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020ba6:	f7ff fda9 	bl	80206fc <__retarget_lock_release_recursive>
 8020baa:	89ab      	ldrh	r3, [r5, #12]
 8020bac:	065b      	lsls	r3, r3, #25
 8020bae:	f53f af1f 	bmi.w	80209f0 <_vfiprintf_r+0x44>
 8020bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020bb4:	e71e      	b.n	80209f4 <_vfiprintf_r+0x48>
 8020bb6:	ab03      	add	r3, sp, #12
 8020bb8:	9300      	str	r3, [sp, #0]
 8020bba:	462a      	mov	r2, r5
 8020bbc:	4b05      	ldr	r3, [pc, #20]	@ (8020bd4 <_vfiprintf_r+0x228>)
 8020bbe:	a904      	add	r1, sp, #16
 8020bc0:	4630      	mov	r0, r6
 8020bc2:	f000 f879 	bl	8020cb8 <_printf_i>
 8020bc6:	e7e4      	b.n	8020b92 <_vfiprintf_r+0x1e6>
 8020bc8:	080250bd 	.word	0x080250bd
 8020bcc:	080250c7 	.word	0x080250c7
 8020bd0:	00000000 	.word	0x00000000
 8020bd4:	08020987 	.word	0x08020987
 8020bd8:	080250c3 	.word	0x080250c3

08020bdc <_printf_common>:
 8020bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020be0:	4616      	mov	r6, r2
 8020be2:	4698      	mov	r8, r3
 8020be4:	688a      	ldr	r2, [r1, #8]
 8020be6:	690b      	ldr	r3, [r1, #16]
 8020be8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020bec:	4293      	cmp	r3, r2
 8020bee:	bfb8      	it	lt
 8020bf0:	4613      	movlt	r3, r2
 8020bf2:	6033      	str	r3, [r6, #0]
 8020bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020bf8:	4607      	mov	r7, r0
 8020bfa:	460c      	mov	r4, r1
 8020bfc:	b10a      	cbz	r2, 8020c02 <_printf_common+0x26>
 8020bfe:	3301      	adds	r3, #1
 8020c00:	6033      	str	r3, [r6, #0]
 8020c02:	6823      	ldr	r3, [r4, #0]
 8020c04:	0699      	lsls	r1, r3, #26
 8020c06:	bf42      	ittt	mi
 8020c08:	6833      	ldrmi	r3, [r6, #0]
 8020c0a:	3302      	addmi	r3, #2
 8020c0c:	6033      	strmi	r3, [r6, #0]
 8020c0e:	6825      	ldr	r5, [r4, #0]
 8020c10:	f015 0506 	ands.w	r5, r5, #6
 8020c14:	d106      	bne.n	8020c24 <_printf_common+0x48>
 8020c16:	f104 0a19 	add.w	sl, r4, #25
 8020c1a:	68e3      	ldr	r3, [r4, #12]
 8020c1c:	6832      	ldr	r2, [r6, #0]
 8020c1e:	1a9b      	subs	r3, r3, r2
 8020c20:	42ab      	cmp	r3, r5
 8020c22:	dc26      	bgt.n	8020c72 <_printf_common+0x96>
 8020c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020c28:	6822      	ldr	r2, [r4, #0]
 8020c2a:	3b00      	subs	r3, #0
 8020c2c:	bf18      	it	ne
 8020c2e:	2301      	movne	r3, #1
 8020c30:	0692      	lsls	r2, r2, #26
 8020c32:	d42b      	bmi.n	8020c8c <_printf_common+0xb0>
 8020c34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020c38:	4641      	mov	r1, r8
 8020c3a:	4638      	mov	r0, r7
 8020c3c:	47c8      	blx	r9
 8020c3e:	3001      	adds	r0, #1
 8020c40:	d01e      	beq.n	8020c80 <_printf_common+0xa4>
 8020c42:	6823      	ldr	r3, [r4, #0]
 8020c44:	6922      	ldr	r2, [r4, #16]
 8020c46:	f003 0306 	and.w	r3, r3, #6
 8020c4a:	2b04      	cmp	r3, #4
 8020c4c:	bf02      	ittt	eq
 8020c4e:	68e5      	ldreq	r5, [r4, #12]
 8020c50:	6833      	ldreq	r3, [r6, #0]
 8020c52:	1aed      	subeq	r5, r5, r3
 8020c54:	68a3      	ldr	r3, [r4, #8]
 8020c56:	bf0c      	ite	eq
 8020c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020c5c:	2500      	movne	r5, #0
 8020c5e:	4293      	cmp	r3, r2
 8020c60:	bfc4      	itt	gt
 8020c62:	1a9b      	subgt	r3, r3, r2
 8020c64:	18ed      	addgt	r5, r5, r3
 8020c66:	2600      	movs	r6, #0
 8020c68:	341a      	adds	r4, #26
 8020c6a:	42b5      	cmp	r5, r6
 8020c6c:	d11a      	bne.n	8020ca4 <_printf_common+0xc8>
 8020c6e:	2000      	movs	r0, #0
 8020c70:	e008      	b.n	8020c84 <_printf_common+0xa8>
 8020c72:	2301      	movs	r3, #1
 8020c74:	4652      	mov	r2, sl
 8020c76:	4641      	mov	r1, r8
 8020c78:	4638      	mov	r0, r7
 8020c7a:	47c8      	blx	r9
 8020c7c:	3001      	adds	r0, #1
 8020c7e:	d103      	bne.n	8020c88 <_printf_common+0xac>
 8020c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c88:	3501      	adds	r5, #1
 8020c8a:	e7c6      	b.n	8020c1a <_printf_common+0x3e>
 8020c8c:	18e1      	adds	r1, r4, r3
 8020c8e:	1c5a      	adds	r2, r3, #1
 8020c90:	2030      	movs	r0, #48	@ 0x30
 8020c92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020c96:	4422      	add	r2, r4
 8020c98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020c9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020ca0:	3302      	adds	r3, #2
 8020ca2:	e7c7      	b.n	8020c34 <_printf_common+0x58>
 8020ca4:	2301      	movs	r3, #1
 8020ca6:	4622      	mov	r2, r4
 8020ca8:	4641      	mov	r1, r8
 8020caa:	4638      	mov	r0, r7
 8020cac:	47c8      	blx	r9
 8020cae:	3001      	adds	r0, #1
 8020cb0:	d0e6      	beq.n	8020c80 <_printf_common+0xa4>
 8020cb2:	3601      	adds	r6, #1
 8020cb4:	e7d9      	b.n	8020c6a <_printf_common+0x8e>
	...

08020cb8 <_printf_i>:
 8020cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020cbc:	7e0f      	ldrb	r7, [r1, #24]
 8020cbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020cc0:	2f78      	cmp	r7, #120	@ 0x78
 8020cc2:	4691      	mov	r9, r2
 8020cc4:	4680      	mov	r8, r0
 8020cc6:	460c      	mov	r4, r1
 8020cc8:	469a      	mov	sl, r3
 8020cca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020cce:	d807      	bhi.n	8020ce0 <_printf_i+0x28>
 8020cd0:	2f62      	cmp	r7, #98	@ 0x62
 8020cd2:	d80a      	bhi.n	8020cea <_printf_i+0x32>
 8020cd4:	2f00      	cmp	r7, #0
 8020cd6:	f000 80d1 	beq.w	8020e7c <_printf_i+0x1c4>
 8020cda:	2f58      	cmp	r7, #88	@ 0x58
 8020cdc:	f000 80b8 	beq.w	8020e50 <_printf_i+0x198>
 8020ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020ce4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020ce8:	e03a      	b.n	8020d60 <_printf_i+0xa8>
 8020cea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020cee:	2b15      	cmp	r3, #21
 8020cf0:	d8f6      	bhi.n	8020ce0 <_printf_i+0x28>
 8020cf2:	a101      	add	r1, pc, #4	@ (adr r1, 8020cf8 <_printf_i+0x40>)
 8020cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020cf8:	08020d51 	.word	0x08020d51
 8020cfc:	08020d65 	.word	0x08020d65
 8020d00:	08020ce1 	.word	0x08020ce1
 8020d04:	08020ce1 	.word	0x08020ce1
 8020d08:	08020ce1 	.word	0x08020ce1
 8020d0c:	08020ce1 	.word	0x08020ce1
 8020d10:	08020d65 	.word	0x08020d65
 8020d14:	08020ce1 	.word	0x08020ce1
 8020d18:	08020ce1 	.word	0x08020ce1
 8020d1c:	08020ce1 	.word	0x08020ce1
 8020d20:	08020ce1 	.word	0x08020ce1
 8020d24:	08020e63 	.word	0x08020e63
 8020d28:	08020d8f 	.word	0x08020d8f
 8020d2c:	08020e1d 	.word	0x08020e1d
 8020d30:	08020ce1 	.word	0x08020ce1
 8020d34:	08020ce1 	.word	0x08020ce1
 8020d38:	08020e85 	.word	0x08020e85
 8020d3c:	08020ce1 	.word	0x08020ce1
 8020d40:	08020d8f 	.word	0x08020d8f
 8020d44:	08020ce1 	.word	0x08020ce1
 8020d48:	08020ce1 	.word	0x08020ce1
 8020d4c:	08020e25 	.word	0x08020e25
 8020d50:	6833      	ldr	r3, [r6, #0]
 8020d52:	1d1a      	adds	r2, r3, #4
 8020d54:	681b      	ldr	r3, [r3, #0]
 8020d56:	6032      	str	r2, [r6, #0]
 8020d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020d60:	2301      	movs	r3, #1
 8020d62:	e09c      	b.n	8020e9e <_printf_i+0x1e6>
 8020d64:	6833      	ldr	r3, [r6, #0]
 8020d66:	6820      	ldr	r0, [r4, #0]
 8020d68:	1d19      	adds	r1, r3, #4
 8020d6a:	6031      	str	r1, [r6, #0]
 8020d6c:	0606      	lsls	r6, r0, #24
 8020d6e:	d501      	bpl.n	8020d74 <_printf_i+0xbc>
 8020d70:	681d      	ldr	r5, [r3, #0]
 8020d72:	e003      	b.n	8020d7c <_printf_i+0xc4>
 8020d74:	0645      	lsls	r5, r0, #25
 8020d76:	d5fb      	bpl.n	8020d70 <_printf_i+0xb8>
 8020d78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020d7c:	2d00      	cmp	r5, #0
 8020d7e:	da03      	bge.n	8020d88 <_printf_i+0xd0>
 8020d80:	232d      	movs	r3, #45	@ 0x2d
 8020d82:	426d      	negs	r5, r5
 8020d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020d88:	4858      	ldr	r0, [pc, #352]	@ (8020eec <_printf_i+0x234>)
 8020d8a:	230a      	movs	r3, #10
 8020d8c:	e011      	b.n	8020db2 <_printf_i+0xfa>
 8020d8e:	6821      	ldr	r1, [r4, #0]
 8020d90:	6833      	ldr	r3, [r6, #0]
 8020d92:	0608      	lsls	r0, r1, #24
 8020d94:	f853 5b04 	ldr.w	r5, [r3], #4
 8020d98:	d402      	bmi.n	8020da0 <_printf_i+0xe8>
 8020d9a:	0649      	lsls	r1, r1, #25
 8020d9c:	bf48      	it	mi
 8020d9e:	b2ad      	uxthmi	r5, r5
 8020da0:	2f6f      	cmp	r7, #111	@ 0x6f
 8020da2:	4852      	ldr	r0, [pc, #328]	@ (8020eec <_printf_i+0x234>)
 8020da4:	6033      	str	r3, [r6, #0]
 8020da6:	bf14      	ite	ne
 8020da8:	230a      	movne	r3, #10
 8020daa:	2308      	moveq	r3, #8
 8020dac:	2100      	movs	r1, #0
 8020dae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020db2:	6866      	ldr	r6, [r4, #4]
 8020db4:	60a6      	str	r6, [r4, #8]
 8020db6:	2e00      	cmp	r6, #0
 8020db8:	db05      	blt.n	8020dc6 <_printf_i+0x10e>
 8020dba:	6821      	ldr	r1, [r4, #0]
 8020dbc:	432e      	orrs	r6, r5
 8020dbe:	f021 0104 	bic.w	r1, r1, #4
 8020dc2:	6021      	str	r1, [r4, #0]
 8020dc4:	d04b      	beq.n	8020e5e <_printf_i+0x1a6>
 8020dc6:	4616      	mov	r6, r2
 8020dc8:	fbb5 f1f3 	udiv	r1, r5, r3
 8020dcc:	fb03 5711 	mls	r7, r3, r1, r5
 8020dd0:	5dc7      	ldrb	r7, [r0, r7]
 8020dd2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020dd6:	462f      	mov	r7, r5
 8020dd8:	42bb      	cmp	r3, r7
 8020dda:	460d      	mov	r5, r1
 8020ddc:	d9f4      	bls.n	8020dc8 <_printf_i+0x110>
 8020dde:	2b08      	cmp	r3, #8
 8020de0:	d10b      	bne.n	8020dfa <_printf_i+0x142>
 8020de2:	6823      	ldr	r3, [r4, #0]
 8020de4:	07df      	lsls	r7, r3, #31
 8020de6:	d508      	bpl.n	8020dfa <_printf_i+0x142>
 8020de8:	6923      	ldr	r3, [r4, #16]
 8020dea:	6861      	ldr	r1, [r4, #4]
 8020dec:	4299      	cmp	r1, r3
 8020dee:	bfde      	ittt	le
 8020df0:	2330      	movle	r3, #48	@ 0x30
 8020df2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020df6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8020dfa:	1b92      	subs	r2, r2, r6
 8020dfc:	6122      	str	r2, [r4, #16]
 8020dfe:	f8cd a000 	str.w	sl, [sp]
 8020e02:	464b      	mov	r3, r9
 8020e04:	aa03      	add	r2, sp, #12
 8020e06:	4621      	mov	r1, r4
 8020e08:	4640      	mov	r0, r8
 8020e0a:	f7ff fee7 	bl	8020bdc <_printf_common>
 8020e0e:	3001      	adds	r0, #1
 8020e10:	d14a      	bne.n	8020ea8 <_printf_i+0x1f0>
 8020e12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020e16:	b004      	add	sp, #16
 8020e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e1c:	6823      	ldr	r3, [r4, #0]
 8020e1e:	f043 0320 	orr.w	r3, r3, #32
 8020e22:	6023      	str	r3, [r4, #0]
 8020e24:	4832      	ldr	r0, [pc, #200]	@ (8020ef0 <_printf_i+0x238>)
 8020e26:	2778      	movs	r7, #120	@ 0x78
 8020e28:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020e2c:	6823      	ldr	r3, [r4, #0]
 8020e2e:	6831      	ldr	r1, [r6, #0]
 8020e30:	061f      	lsls	r7, r3, #24
 8020e32:	f851 5b04 	ldr.w	r5, [r1], #4
 8020e36:	d402      	bmi.n	8020e3e <_printf_i+0x186>
 8020e38:	065f      	lsls	r7, r3, #25
 8020e3a:	bf48      	it	mi
 8020e3c:	b2ad      	uxthmi	r5, r5
 8020e3e:	6031      	str	r1, [r6, #0]
 8020e40:	07d9      	lsls	r1, r3, #31
 8020e42:	bf44      	itt	mi
 8020e44:	f043 0320 	orrmi.w	r3, r3, #32
 8020e48:	6023      	strmi	r3, [r4, #0]
 8020e4a:	b11d      	cbz	r5, 8020e54 <_printf_i+0x19c>
 8020e4c:	2310      	movs	r3, #16
 8020e4e:	e7ad      	b.n	8020dac <_printf_i+0xf4>
 8020e50:	4826      	ldr	r0, [pc, #152]	@ (8020eec <_printf_i+0x234>)
 8020e52:	e7e9      	b.n	8020e28 <_printf_i+0x170>
 8020e54:	6823      	ldr	r3, [r4, #0]
 8020e56:	f023 0320 	bic.w	r3, r3, #32
 8020e5a:	6023      	str	r3, [r4, #0]
 8020e5c:	e7f6      	b.n	8020e4c <_printf_i+0x194>
 8020e5e:	4616      	mov	r6, r2
 8020e60:	e7bd      	b.n	8020dde <_printf_i+0x126>
 8020e62:	6833      	ldr	r3, [r6, #0]
 8020e64:	6825      	ldr	r5, [r4, #0]
 8020e66:	6961      	ldr	r1, [r4, #20]
 8020e68:	1d18      	adds	r0, r3, #4
 8020e6a:	6030      	str	r0, [r6, #0]
 8020e6c:	062e      	lsls	r6, r5, #24
 8020e6e:	681b      	ldr	r3, [r3, #0]
 8020e70:	d501      	bpl.n	8020e76 <_printf_i+0x1be>
 8020e72:	6019      	str	r1, [r3, #0]
 8020e74:	e002      	b.n	8020e7c <_printf_i+0x1c4>
 8020e76:	0668      	lsls	r0, r5, #25
 8020e78:	d5fb      	bpl.n	8020e72 <_printf_i+0x1ba>
 8020e7a:	8019      	strh	r1, [r3, #0]
 8020e7c:	2300      	movs	r3, #0
 8020e7e:	6123      	str	r3, [r4, #16]
 8020e80:	4616      	mov	r6, r2
 8020e82:	e7bc      	b.n	8020dfe <_printf_i+0x146>
 8020e84:	6833      	ldr	r3, [r6, #0]
 8020e86:	1d1a      	adds	r2, r3, #4
 8020e88:	6032      	str	r2, [r6, #0]
 8020e8a:	681e      	ldr	r6, [r3, #0]
 8020e8c:	6862      	ldr	r2, [r4, #4]
 8020e8e:	2100      	movs	r1, #0
 8020e90:	4630      	mov	r0, r6
 8020e92:	f7df f9bd 	bl	8000210 <memchr>
 8020e96:	b108      	cbz	r0, 8020e9c <_printf_i+0x1e4>
 8020e98:	1b80      	subs	r0, r0, r6
 8020e9a:	6060      	str	r0, [r4, #4]
 8020e9c:	6863      	ldr	r3, [r4, #4]
 8020e9e:	6123      	str	r3, [r4, #16]
 8020ea0:	2300      	movs	r3, #0
 8020ea2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020ea6:	e7aa      	b.n	8020dfe <_printf_i+0x146>
 8020ea8:	6923      	ldr	r3, [r4, #16]
 8020eaa:	4632      	mov	r2, r6
 8020eac:	4649      	mov	r1, r9
 8020eae:	4640      	mov	r0, r8
 8020eb0:	47d0      	blx	sl
 8020eb2:	3001      	adds	r0, #1
 8020eb4:	d0ad      	beq.n	8020e12 <_printf_i+0x15a>
 8020eb6:	6823      	ldr	r3, [r4, #0]
 8020eb8:	079b      	lsls	r3, r3, #30
 8020eba:	d413      	bmi.n	8020ee4 <_printf_i+0x22c>
 8020ebc:	68e0      	ldr	r0, [r4, #12]
 8020ebe:	9b03      	ldr	r3, [sp, #12]
 8020ec0:	4298      	cmp	r0, r3
 8020ec2:	bfb8      	it	lt
 8020ec4:	4618      	movlt	r0, r3
 8020ec6:	e7a6      	b.n	8020e16 <_printf_i+0x15e>
 8020ec8:	2301      	movs	r3, #1
 8020eca:	4632      	mov	r2, r6
 8020ecc:	4649      	mov	r1, r9
 8020ece:	4640      	mov	r0, r8
 8020ed0:	47d0      	blx	sl
 8020ed2:	3001      	adds	r0, #1
 8020ed4:	d09d      	beq.n	8020e12 <_printf_i+0x15a>
 8020ed6:	3501      	adds	r5, #1
 8020ed8:	68e3      	ldr	r3, [r4, #12]
 8020eda:	9903      	ldr	r1, [sp, #12]
 8020edc:	1a5b      	subs	r3, r3, r1
 8020ede:	42ab      	cmp	r3, r5
 8020ee0:	dcf2      	bgt.n	8020ec8 <_printf_i+0x210>
 8020ee2:	e7eb      	b.n	8020ebc <_printf_i+0x204>
 8020ee4:	2500      	movs	r5, #0
 8020ee6:	f104 0619 	add.w	r6, r4, #25
 8020eea:	e7f5      	b.n	8020ed8 <_printf_i+0x220>
 8020eec:	080250ce 	.word	0x080250ce
 8020ef0:	080250df 	.word	0x080250df

08020ef4 <__sflush_r>:
 8020ef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020efc:	0716      	lsls	r6, r2, #28
 8020efe:	4605      	mov	r5, r0
 8020f00:	460c      	mov	r4, r1
 8020f02:	d454      	bmi.n	8020fae <__sflush_r+0xba>
 8020f04:	684b      	ldr	r3, [r1, #4]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	dc02      	bgt.n	8020f10 <__sflush_r+0x1c>
 8020f0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	dd48      	ble.n	8020fa2 <__sflush_r+0xae>
 8020f10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020f12:	2e00      	cmp	r6, #0
 8020f14:	d045      	beq.n	8020fa2 <__sflush_r+0xae>
 8020f16:	2300      	movs	r3, #0
 8020f18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020f1c:	682f      	ldr	r7, [r5, #0]
 8020f1e:	6a21      	ldr	r1, [r4, #32]
 8020f20:	602b      	str	r3, [r5, #0]
 8020f22:	d030      	beq.n	8020f86 <__sflush_r+0x92>
 8020f24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020f26:	89a3      	ldrh	r3, [r4, #12]
 8020f28:	0759      	lsls	r1, r3, #29
 8020f2a:	d505      	bpl.n	8020f38 <__sflush_r+0x44>
 8020f2c:	6863      	ldr	r3, [r4, #4]
 8020f2e:	1ad2      	subs	r2, r2, r3
 8020f30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020f32:	b10b      	cbz	r3, 8020f38 <__sflush_r+0x44>
 8020f34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020f36:	1ad2      	subs	r2, r2, r3
 8020f38:	2300      	movs	r3, #0
 8020f3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020f3c:	6a21      	ldr	r1, [r4, #32]
 8020f3e:	4628      	mov	r0, r5
 8020f40:	47b0      	blx	r6
 8020f42:	1c43      	adds	r3, r0, #1
 8020f44:	89a3      	ldrh	r3, [r4, #12]
 8020f46:	d106      	bne.n	8020f56 <__sflush_r+0x62>
 8020f48:	6829      	ldr	r1, [r5, #0]
 8020f4a:	291d      	cmp	r1, #29
 8020f4c:	d82b      	bhi.n	8020fa6 <__sflush_r+0xb2>
 8020f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8020ff8 <__sflush_r+0x104>)
 8020f50:	40ca      	lsrs	r2, r1
 8020f52:	07d6      	lsls	r6, r2, #31
 8020f54:	d527      	bpl.n	8020fa6 <__sflush_r+0xb2>
 8020f56:	2200      	movs	r2, #0
 8020f58:	6062      	str	r2, [r4, #4]
 8020f5a:	04d9      	lsls	r1, r3, #19
 8020f5c:	6922      	ldr	r2, [r4, #16]
 8020f5e:	6022      	str	r2, [r4, #0]
 8020f60:	d504      	bpl.n	8020f6c <__sflush_r+0x78>
 8020f62:	1c42      	adds	r2, r0, #1
 8020f64:	d101      	bne.n	8020f6a <__sflush_r+0x76>
 8020f66:	682b      	ldr	r3, [r5, #0]
 8020f68:	b903      	cbnz	r3, 8020f6c <__sflush_r+0x78>
 8020f6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8020f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020f6e:	602f      	str	r7, [r5, #0]
 8020f70:	b1b9      	cbz	r1, 8020fa2 <__sflush_r+0xae>
 8020f72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020f76:	4299      	cmp	r1, r3
 8020f78:	d002      	beq.n	8020f80 <__sflush_r+0x8c>
 8020f7a:	4628      	mov	r0, r5
 8020f7c:	f7ff fbec 	bl	8020758 <_free_r>
 8020f80:	2300      	movs	r3, #0
 8020f82:	6363      	str	r3, [r4, #52]	@ 0x34
 8020f84:	e00d      	b.n	8020fa2 <__sflush_r+0xae>
 8020f86:	2301      	movs	r3, #1
 8020f88:	4628      	mov	r0, r5
 8020f8a:	47b0      	blx	r6
 8020f8c:	4602      	mov	r2, r0
 8020f8e:	1c50      	adds	r0, r2, #1
 8020f90:	d1c9      	bne.n	8020f26 <__sflush_r+0x32>
 8020f92:	682b      	ldr	r3, [r5, #0]
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d0c6      	beq.n	8020f26 <__sflush_r+0x32>
 8020f98:	2b1d      	cmp	r3, #29
 8020f9a:	d001      	beq.n	8020fa0 <__sflush_r+0xac>
 8020f9c:	2b16      	cmp	r3, #22
 8020f9e:	d11e      	bne.n	8020fde <__sflush_r+0xea>
 8020fa0:	602f      	str	r7, [r5, #0]
 8020fa2:	2000      	movs	r0, #0
 8020fa4:	e022      	b.n	8020fec <__sflush_r+0xf8>
 8020fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020faa:	b21b      	sxth	r3, r3
 8020fac:	e01b      	b.n	8020fe6 <__sflush_r+0xf2>
 8020fae:	690f      	ldr	r7, [r1, #16]
 8020fb0:	2f00      	cmp	r7, #0
 8020fb2:	d0f6      	beq.n	8020fa2 <__sflush_r+0xae>
 8020fb4:	0793      	lsls	r3, r2, #30
 8020fb6:	680e      	ldr	r6, [r1, #0]
 8020fb8:	bf08      	it	eq
 8020fba:	694b      	ldreq	r3, [r1, #20]
 8020fbc:	600f      	str	r7, [r1, #0]
 8020fbe:	bf18      	it	ne
 8020fc0:	2300      	movne	r3, #0
 8020fc2:	eba6 0807 	sub.w	r8, r6, r7
 8020fc6:	608b      	str	r3, [r1, #8]
 8020fc8:	f1b8 0f00 	cmp.w	r8, #0
 8020fcc:	dde9      	ble.n	8020fa2 <__sflush_r+0xae>
 8020fce:	6a21      	ldr	r1, [r4, #32]
 8020fd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020fd2:	4643      	mov	r3, r8
 8020fd4:	463a      	mov	r2, r7
 8020fd6:	4628      	mov	r0, r5
 8020fd8:	47b0      	blx	r6
 8020fda:	2800      	cmp	r0, #0
 8020fdc:	dc08      	bgt.n	8020ff0 <__sflush_r+0xfc>
 8020fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020fe6:	81a3      	strh	r3, [r4, #12]
 8020fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ff0:	4407      	add	r7, r0
 8020ff2:	eba8 0800 	sub.w	r8, r8, r0
 8020ff6:	e7e7      	b.n	8020fc8 <__sflush_r+0xd4>
 8020ff8:	20400001 	.word	0x20400001

08020ffc <_fflush_r>:
 8020ffc:	b538      	push	{r3, r4, r5, lr}
 8020ffe:	690b      	ldr	r3, [r1, #16]
 8021000:	4605      	mov	r5, r0
 8021002:	460c      	mov	r4, r1
 8021004:	b913      	cbnz	r3, 802100c <_fflush_r+0x10>
 8021006:	2500      	movs	r5, #0
 8021008:	4628      	mov	r0, r5
 802100a:	bd38      	pop	{r3, r4, r5, pc}
 802100c:	b118      	cbz	r0, 8021016 <_fflush_r+0x1a>
 802100e:	6a03      	ldr	r3, [r0, #32]
 8021010:	b90b      	cbnz	r3, 8021016 <_fflush_r+0x1a>
 8021012:	f7ff f913 	bl	802023c <__sinit>
 8021016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802101a:	2b00      	cmp	r3, #0
 802101c:	d0f3      	beq.n	8021006 <_fflush_r+0xa>
 802101e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021020:	07d0      	lsls	r0, r2, #31
 8021022:	d404      	bmi.n	802102e <_fflush_r+0x32>
 8021024:	0599      	lsls	r1, r3, #22
 8021026:	d402      	bmi.n	802102e <_fflush_r+0x32>
 8021028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802102a:	f7ff fb66 	bl	80206fa <__retarget_lock_acquire_recursive>
 802102e:	4628      	mov	r0, r5
 8021030:	4621      	mov	r1, r4
 8021032:	f7ff ff5f 	bl	8020ef4 <__sflush_r>
 8021036:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021038:	07da      	lsls	r2, r3, #31
 802103a:	4605      	mov	r5, r0
 802103c:	d4e4      	bmi.n	8021008 <_fflush_r+0xc>
 802103e:	89a3      	ldrh	r3, [r4, #12]
 8021040:	059b      	lsls	r3, r3, #22
 8021042:	d4e1      	bmi.n	8021008 <_fflush_r+0xc>
 8021044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021046:	f7ff fb59 	bl	80206fc <__retarget_lock_release_recursive>
 802104a:	e7dd      	b.n	8021008 <_fflush_r+0xc>

0802104c <fiprintf>:
 802104c:	b40e      	push	{r1, r2, r3}
 802104e:	b503      	push	{r0, r1, lr}
 8021050:	4601      	mov	r1, r0
 8021052:	ab03      	add	r3, sp, #12
 8021054:	4805      	ldr	r0, [pc, #20]	@ (802106c <fiprintf+0x20>)
 8021056:	f853 2b04 	ldr.w	r2, [r3], #4
 802105a:	6800      	ldr	r0, [r0, #0]
 802105c:	9301      	str	r3, [sp, #4]
 802105e:	f7ff fca5 	bl	80209ac <_vfiprintf_r>
 8021062:	b002      	add	sp, #8
 8021064:	f85d eb04 	ldr.w	lr, [sp], #4
 8021068:	b003      	add	sp, #12
 802106a:	4770      	bx	lr
 802106c:	2000003c 	.word	0x2000003c

08021070 <__swhatbuf_r>:
 8021070:	b570      	push	{r4, r5, r6, lr}
 8021072:	460c      	mov	r4, r1
 8021074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021078:	2900      	cmp	r1, #0
 802107a:	b096      	sub	sp, #88	@ 0x58
 802107c:	4615      	mov	r5, r2
 802107e:	461e      	mov	r6, r3
 8021080:	da0d      	bge.n	802109e <__swhatbuf_r+0x2e>
 8021082:	89a3      	ldrh	r3, [r4, #12]
 8021084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021088:	f04f 0100 	mov.w	r1, #0
 802108c:	bf14      	ite	ne
 802108e:	2340      	movne	r3, #64	@ 0x40
 8021090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021094:	2000      	movs	r0, #0
 8021096:	6031      	str	r1, [r6, #0]
 8021098:	602b      	str	r3, [r5, #0]
 802109a:	b016      	add	sp, #88	@ 0x58
 802109c:	bd70      	pop	{r4, r5, r6, pc}
 802109e:	466a      	mov	r2, sp
 80210a0:	f000 f848 	bl	8021134 <_fstat_r>
 80210a4:	2800      	cmp	r0, #0
 80210a6:	dbec      	blt.n	8021082 <__swhatbuf_r+0x12>
 80210a8:	9901      	ldr	r1, [sp, #4]
 80210aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80210ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80210b2:	4259      	negs	r1, r3
 80210b4:	4159      	adcs	r1, r3
 80210b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80210ba:	e7eb      	b.n	8021094 <__swhatbuf_r+0x24>

080210bc <__smakebuf_r>:
 80210bc:	898b      	ldrh	r3, [r1, #12]
 80210be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80210c0:	079d      	lsls	r5, r3, #30
 80210c2:	4606      	mov	r6, r0
 80210c4:	460c      	mov	r4, r1
 80210c6:	d507      	bpl.n	80210d8 <__smakebuf_r+0x1c>
 80210c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80210cc:	6023      	str	r3, [r4, #0]
 80210ce:	6123      	str	r3, [r4, #16]
 80210d0:	2301      	movs	r3, #1
 80210d2:	6163      	str	r3, [r4, #20]
 80210d4:	b003      	add	sp, #12
 80210d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210d8:	ab01      	add	r3, sp, #4
 80210da:	466a      	mov	r2, sp
 80210dc:	f7ff ffc8 	bl	8021070 <__swhatbuf_r>
 80210e0:	9f00      	ldr	r7, [sp, #0]
 80210e2:	4605      	mov	r5, r0
 80210e4:	4639      	mov	r1, r7
 80210e6:	4630      	mov	r0, r6
 80210e8:	f7ff fbaa 	bl	8020840 <_malloc_r>
 80210ec:	b948      	cbnz	r0, 8021102 <__smakebuf_r+0x46>
 80210ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80210f2:	059a      	lsls	r2, r3, #22
 80210f4:	d4ee      	bmi.n	80210d4 <__smakebuf_r+0x18>
 80210f6:	f023 0303 	bic.w	r3, r3, #3
 80210fa:	f043 0302 	orr.w	r3, r3, #2
 80210fe:	81a3      	strh	r3, [r4, #12]
 8021100:	e7e2      	b.n	80210c8 <__smakebuf_r+0xc>
 8021102:	89a3      	ldrh	r3, [r4, #12]
 8021104:	6020      	str	r0, [r4, #0]
 8021106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802110a:	81a3      	strh	r3, [r4, #12]
 802110c:	9b01      	ldr	r3, [sp, #4]
 802110e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021112:	b15b      	cbz	r3, 802112c <__smakebuf_r+0x70>
 8021114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021118:	4630      	mov	r0, r6
 802111a:	f000 f81d 	bl	8021158 <_isatty_r>
 802111e:	b128      	cbz	r0, 802112c <__smakebuf_r+0x70>
 8021120:	89a3      	ldrh	r3, [r4, #12]
 8021122:	f023 0303 	bic.w	r3, r3, #3
 8021126:	f043 0301 	orr.w	r3, r3, #1
 802112a:	81a3      	strh	r3, [r4, #12]
 802112c:	89a3      	ldrh	r3, [r4, #12]
 802112e:	431d      	orrs	r5, r3
 8021130:	81a5      	strh	r5, [r4, #12]
 8021132:	e7cf      	b.n	80210d4 <__smakebuf_r+0x18>

08021134 <_fstat_r>:
 8021134:	b538      	push	{r3, r4, r5, lr}
 8021136:	4d07      	ldr	r5, [pc, #28]	@ (8021154 <_fstat_r+0x20>)
 8021138:	2300      	movs	r3, #0
 802113a:	4604      	mov	r4, r0
 802113c:	4608      	mov	r0, r1
 802113e:	4611      	mov	r1, r2
 8021140:	602b      	str	r3, [r5, #0]
 8021142:	f7e0 fc41 	bl	80019c8 <_fstat>
 8021146:	1c43      	adds	r3, r0, #1
 8021148:	d102      	bne.n	8021150 <_fstat_r+0x1c>
 802114a:	682b      	ldr	r3, [r5, #0]
 802114c:	b103      	cbz	r3, 8021150 <_fstat_r+0x1c>
 802114e:	6023      	str	r3, [r4, #0]
 8021150:	bd38      	pop	{r3, r4, r5, pc}
 8021152:	bf00      	nop
 8021154:	200258ac 	.word	0x200258ac

08021158 <_isatty_r>:
 8021158:	b538      	push	{r3, r4, r5, lr}
 802115a:	4d06      	ldr	r5, [pc, #24]	@ (8021174 <_isatty_r+0x1c>)
 802115c:	2300      	movs	r3, #0
 802115e:	4604      	mov	r4, r0
 8021160:	4608      	mov	r0, r1
 8021162:	602b      	str	r3, [r5, #0]
 8021164:	f7e0 fc40 	bl	80019e8 <_isatty>
 8021168:	1c43      	adds	r3, r0, #1
 802116a:	d102      	bne.n	8021172 <_isatty_r+0x1a>
 802116c:	682b      	ldr	r3, [r5, #0]
 802116e:	b103      	cbz	r3, 8021172 <_isatty_r+0x1a>
 8021170:	6023      	str	r3, [r4, #0]
 8021172:	bd38      	pop	{r3, r4, r5, pc}
 8021174:	200258ac 	.word	0x200258ac

08021178 <_sbrk_r>:
 8021178:	b538      	push	{r3, r4, r5, lr}
 802117a:	4d06      	ldr	r5, [pc, #24]	@ (8021194 <_sbrk_r+0x1c>)
 802117c:	2300      	movs	r3, #0
 802117e:	4604      	mov	r4, r0
 8021180:	4608      	mov	r0, r1
 8021182:	602b      	str	r3, [r5, #0]
 8021184:	f7e0 fc48 	bl	8001a18 <_sbrk>
 8021188:	1c43      	adds	r3, r0, #1
 802118a:	d102      	bne.n	8021192 <_sbrk_r+0x1a>
 802118c:	682b      	ldr	r3, [r5, #0]
 802118e:	b103      	cbz	r3, 8021192 <_sbrk_r+0x1a>
 8021190:	6023      	str	r3, [r4, #0]
 8021192:	bd38      	pop	{r3, r4, r5, pc}
 8021194:	200258ac 	.word	0x200258ac

08021198 <abort>:
 8021198:	b508      	push	{r3, lr}
 802119a:	2006      	movs	r0, #6
 802119c:	f000 f82c 	bl	80211f8 <raise>
 80211a0:	2001      	movs	r0, #1
 80211a2:	f7e0 fbdd 	bl	8001960 <_exit>

080211a6 <_raise_r>:
 80211a6:	291f      	cmp	r1, #31
 80211a8:	b538      	push	{r3, r4, r5, lr}
 80211aa:	4605      	mov	r5, r0
 80211ac:	460c      	mov	r4, r1
 80211ae:	d904      	bls.n	80211ba <_raise_r+0x14>
 80211b0:	2316      	movs	r3, #22
 80211b2:	6003      	str	r3, [r0, #0]
 80211b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80211b8:	bd38      	pop	{r3, r4, r5, pc}
 80211ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80211bc:	b112      	cbz	r2, 80211c4 <_raise_r+0x1e>
 80211be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80211c2:	b94b      	cbnz	r3, 80211d8 <_raise_r+0x32>
 80211c4:	4628      	mov	r0, r5
 80211c6:	f000 f831 	bl	802122c <_getpid_r>
 80211ca:	4622      	mov	r2, r4
 80211cc:	4601      	mov	r1, r0
 80211ce:	4628      	mov	r0, r5
 80211d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80211d4:	f000 b818 	b.w	8021208 <_kill_r>
 80211d8:	2b01      	cmp	r3, #1
 80211da:	d00a      	beq.n	80211f2 <_raise_r+0x4c>
 80211dc:	1c59      	adds	r1, r3, #1
 80211de:	d103      	bne.n	80211e8 <_raise_r+0x42>
 80211e0:	2316      	movs	r3, #22
 80211e2:	6003      	str	r3, [r0, #0]
 80211e4:	2001      	movs	r0, #1
 80211e6:	e7e7      	b.n	80211b8 <_raise_r+0x12>
 80211e8:	2100      	movs	r1, #0
 80211ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80211ee:	4620      	mov	r0, r4
 80211f0:	4798      	blx	r3
 80211f2:	2000      	movs	r0, #0
 80211f4:	e7e0      	b.n	80211b8 <_raise_r+0x12>
	...

080211f8 <raise>:
 80211f8:	4b02      	ldr	r3, [pc, #8]	@ (8021204 <raise+0xc>)
 80211fa:	4601      	mov	r1, r0
 80211fc:	6818      	ldr	r0, [r3, #0]
 80211fe:	f7ff bfd2 	b.w	80211a6 <_raise_r>
 8021202:	bf00      	nop
 8021204:	2000003c 	.word	0x2000003c

08021208 <_kill_r>:
 8021208:	b538      	push	{r3, r4, r5, lr}
 802120a:	4d07      	ldr	r5, [pc, #28]	@ (8021228 <_kill_r+0x20>)
 802120c:	2300      	movs	r3, #0
 802120e:	4604      	mov	r4, r0
 8021210:	4608      	mov	r0, r1
 8021212:	4611      	mov	r1, r2
 8021214:	602b      	str	r3, [r5, #0]
 8021216:	f7e0 fb91 	bl	800193c <_kill>
 802121a:	1c43      	adds	r3, r0, #1
 802121c:	d102      	bne.n	8021224 <_kill_r+0x1c>
 802121e:	682b      	ldr	r3, [r5, #0]
 8021220:	b103      	cbz	r3, 8021224 <_kill_r+0x1c>
 8021222:	6023      	str	r3, [r4, #0]
 8021224:	bd38      	pop	{r3, r4, r5, pc}
 8021226:	bf00      	nop
 8021228:	200258ac 	.word	0x200258ac

0802122c <_getpid_r>:
 802122c:	f7e0 bb7e 	b.w	800192c <_getpid>

08021230 <_init>:
 8021230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021232:	bf00      	nop
 8021234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021236:	bc08      	pop	{r3}
 8021238:	469e      	mov	lr, r3
 802123a:	4770      	bx	lr

0802123c <_fini>:
 802123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802123e:	bf00      	nop
 8021240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021242:	bc08      	pop	{r3}
 8021244:	469e      	mov	lr, r3
 8021246:	4770      	bx	lr
