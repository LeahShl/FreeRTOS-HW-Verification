
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000214dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051ac  080216ac  080216ac  000226ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026858  08026858  00028210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08026858  08026858  00027858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026860  08026860  00028210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026860  08026860  00027860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026864  08026864  00027864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08026868  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  08026938  000280d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  080269d8  00028170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002d780  20000210  08026a78  00028210  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  2002d990  08026a78  00028990  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045dcd  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000af87  00000000  00000000  0006e00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030b0  00000000  00000000  00078f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000262f  00000000  00000000  0007c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f73c  00000000  00000000  0007e677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ffb8  00000000  00000000  000bddb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123968  00000000  00000000  0010dd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002316d3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ce88  00000000  00000000  00231718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0023e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08021694 	.word	0x08021694

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08021694 	.word	0x08021694

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fee1 	bl	8002404 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fdf0 	bl	800122c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f881 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fde0 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fc99 	bl	800501c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fddb 	bl	80032e8 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fd78 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fba1 	bl	8002ed4 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd48 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fb2c 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fb45 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fb24 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fb3d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fb1c 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fb35 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fb14 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fb2d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 fb0c 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fb25 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 fb04 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fb1d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 fafc 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fb15 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 faf4 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 fb0d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 faec 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 fb05 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fae4 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 fafd 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fadc 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 faf5 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fad4 	bl	8002e80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 faed 	bl	8002eb8 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01f fecb 	bl	8020694 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08021788 	.word	0x08021788

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	4849      	ldr	r0, [pc, #292]	@ (8000a48 <MX_FREERTOS_Init+0x12c>)
 8000922:	f01f ff27 	bl	8020774 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000926:	4a49      	ldr	r2, [pc, #292]	@ (8000a4c <MX_FREERTOS_Init+0x130>)
 8000928:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800092c:	2010      	movs	r0, #16
 800092e:	f00c fcbf 	bl	800d2b0 <osMessageQueueNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a46      	ldr	r2, [pc, #280]	@ (8000a50 <MX_FREERTOS_Init+0x134>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000938:	4a46      	ldr	r2, [pc, #280]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 800093a:	2110      	movs	r1, #16
 800093c:	2010      	movs	r0, #16
 800093e:	f00c fcb7 	bl	800d2b0 <osMessageQueueNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a44      	ldr	r2, [pc, #272]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000948:	4a44      	ldr	r2, [pc, #272]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 800094a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800094e:	2008      	movs	r0, #8
 8000950:	f00c fcae 	bl	800d2b0 <osMessageQueueNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a42      	ldr	r2, [pc, #264]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 8000958:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 800095a:	4a42      	ldr	r2, [pc, #264]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 800095c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000960:	2008      	movs	r0, #8
 8000962:	f00c fca5 	bl	800d2b0 <osMessageQueueNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a3f      	ldr	r2, [pc, #252]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 800096c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 800096e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000972:	2008      	movs	r0, #8
 8000974:	f00c fc9c 	bl	800d2b0 <osMessageQueueNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800097e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 8000980:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000984:	2008      	movs	r0, #8
 8000986:	f00c fc93 	bl	800d2b0 <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 8000990:	4a3a      	ldr	r2, [pc, #232]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 8000992:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000996:	2008      	movs	r0, #8
 8000998:	f00c fc8a 	bl	800d2b0 <osMessageQueueNew>
 800099c:	4603      	mov	r3, r0
 800099e:	4a38      	ldr	r2, [pc, #224]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 80009a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a2:	4a38      	ldr	r2, [pc, #224]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4838      	ldr	r0, [pc, #224]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 80009a8:	f00c f8ce 	bl	800cb48 <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a37      	ldr	r2, [pc, #220]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009b2:	4a37      	ldr	r2, [pc, #220]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4837      	ldr	r0, [pc, #220]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009b8:	f00c f8c6 	bl	800cb48 <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a36      	ldr	r2, [pc, #216]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009c2:	4a36      	ldr	r2, [pc, #216]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4836      	ldr	r0, [pc, #216]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009c8:	f00c f8be 	bl	800cb48 <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a35      	ldr	r2, [pc, #212]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009d2:	4a35      	ldr	r2, [pc, #212]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4835      	ldr	r0, [pc, #212]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009d8:	f00c f8b6 	bl	800cb48 <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a34      	ldr	r2, [pc, #208]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009e2:	4a34      	ldr	r2, [pc, #208]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4834      	ldr	r0, [pc, #208]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009e8:	f00c f8ae 	bl	800cb48 <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a33      	ldr	r2, [pc, #204]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009f2:	4a33      	ldr	r2, [pc, #204]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4833      	ldr	r0, [pc, #204]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009f8:	f00c f8a6 	bl	800cb48 <osThreadNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a32      	ldr	r2, [pc, #200]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 8000a00:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a02:	4a32      	ldr	r2, [pc, #200]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4832      	ldr	r0, [pc, #200]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 8000a08:	f00c f89e 	bl	800cb48 <osThreadNew>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a31      	ldr	r2, [pc, #196]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 8000a10:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a12:	4a31      	ldr	r2, [pc, #196]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4831      	ldr	r0, [pc, #196]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 8000a18:	f00c f896 	bl	800cb48 <osThreadNew>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a30      	ldr	r2, [pc, #192]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a20:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a22:	4a30      	ldr	r2, [pc, #192]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4830      	ldr	r0, [pc, #192]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a28:	f00c f88e 	bl	800cb48 <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a32:	4a2f      	ldr	r2, [pc, #188]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	482f      	ldr	r0, [pc, #188]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a38:	f00c f886 	bl	800cb48 <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a40:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	080217a8 	.word	0x080217a8
 8000a4c:	08026510 	.word	0x08026510
 8000a50:	20000320 	.word	0x20000320
 8000a54:	08026528 	.word	0x08026528
 8000a58:	20000324 	.word	0x20000324
 8000a5c:	08026540 	.word	0x08026540
 8000a60:	20000328 	.word	0x20000328
 8000a64:	08026558 	.word	0x08026558
 8000a68:	2000032c 	.word	0x2000032c
 8000a6c:	08026570 	.word	0x08026570
 8000a70:	20000330 	.word	0x20000330
 8000a74:	08026588 	.word	0x08026588
 8000a78:	20000334 	.word	0x20000334
 8000a7c:	080265a0 	.word	0x080265a0
 8000a80:	20000338 	.word	0x20000338
 8000a84:	080263a8 	.word	0x080263a8
 8000a88:	08000afd 	.word	0x08000afd
 8000a8c:	200002f8 	.word	0x200002f8
 8000a90:	080263cc 	.word	0x080263cc
 8000a94:	08000b11 	.word	0x08000b11
 8000a98:	200002fc 	.word	0x200002fc
 8000a9c:	080263f0 	.word	0x080263f0
 8000aa0:	08000b31 	.word	0x08000b31
 8000aa4:	20000300 	.word	0x20000300
 8000aa8:	08026414 	.word	0x08026414
 8000aac:	08000b45 	.word	0x08000b45
 8000ab0:	20000304 	.word	0x20000304
 8000ab4:	08026438 	.word	0x08026438
 8000ab8:	08000b59 	.word	0x08000b59
 8000abc:	20000308 	.word	0x20000308
 8000ac0:	0802645c 	.word	0x0802645c
 8000ac4:	08000b6d 	.word	0x08000b6d
 8000ac8:	2000030c 	.word	0x2000030c
 8000acc:	08026480 	.word	0x08026480
 8000ad0:	08000b81 	.word	0x08000b81
 8000ad4:	20000310 	.word	0x20000310
 8000ad8:	080264a4 	.word	0x080264a4
 8000adc:	08000b95 	.word	0x08000b95
 8000ae0:	20000314 	.word	0x20000314
 8000ae4:	080264c8 	.word	0x080264c8
 8000ae8:	08000ba9 	.word	0x08000ba9
 8000aec:	20000318 	.word	0x20000318
 8000af0:	080264ec 	.word	0x080264ec
 8000af4:	08000bbd 	.word	0x08000bbd
 8000af8:	2000031c 	.word	0x2000031c

08000afc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b04:	f00b f92e 	bl	800bd64 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f00c f8cb 	bl	800cca4 <osDelay>
 8000b0e:	e7fb      	b.n	8000b08 <StartDefaultTask+0xc>

08000b10 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  printf("Starting UDP Listener...\n");
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <StartTaskUdpListener+0x1c>)
 8000b1a:	f01f fe2b 	bl	8020774 <puts>
  UDP_Listen(); // loops here
 8000b1e:	f01e fd5d 	bl	801f5dc <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	080217c0 	.word	0x080217c0

08000b30 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b38:	f01e fc48 	bl	801f3cc <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b4c:	f01f fb3c 	bl	80201c8 <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000b60:	f01e fea8 	bl	801f8b4 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000b74:	f01f f874 	bl	801fc60 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000b88:	f01e fb34 	bl	801f1f4 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000b9c:	f01f fa22 	bl	801ffe4 <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000bb0:	f01e fe16 	bl	801f7e0 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	printf("--------------------------------------\n");

	stats_display();
	osDelay(30000);
	*/
	  osDelay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f00c f86d 	bl	800cca4 <osDelay>
 8000bca:	e7fb      	b.n	8000bc4 <StartLoggerTask+0x8>

08000bcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd2:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a26      	ldr	r2, [pc, #152]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a20      	ldr	r2, [pc, #128]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a1a      	ldr	r2, [pc, #104]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_GPIO_Init+0xa4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

}
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <MX_I2C1_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c80:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf0 <MX_I2C1_Init+0x7c>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cae:	480e      	ldr	r0, [pc, #56]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cb0:	f004 fb60 	bl	8005374 <HAL_I2C_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cba:	f000 fab7 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4809      	ldr	r0, [pc, #36]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cc2:	f006 fd03 	bl	80076cc <HAL_I2CEx_ConfigAnalogFilter>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ccc:	f000 faae 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_I2C1_Init+0x74>)
 8000cd4:	f006 fd45 	bl	8007762 <HAL_I2CEx_ConfigDigitalFilter>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 faa5 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000033c 	.word	0x2000033c
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	20404768 	.word	0x20404768

08000cf4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <MX_I2C2_Init+0x78>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d00:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <MX_I2C2_Init+0x7c>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d06:	2214      	movs	r2, #20
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d16:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d2e:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d30:	f004 fb20 	bl	8005374 <HAL_I2C_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d3a:	f000 fa77 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d42:	f006 fcc3 	bl	80076cc <HAL_I2CEx_ConfigAnalogFilter>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d4c:	f000 fa6e 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d50:	2100      	movs	r1, #0
 8000d52:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_I2C2_Init+0x74>)
 8000d54:	f006 fd05 	bl	8007762 <HAL_I2CEx_ConfigDigitalFilter>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d5e:	f000 fa65 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000390 	.word	0x20000390
 8000d6c:	40005800 	.word	0x40005800
 8000d70:	20404768 	.word	0x20404768

08000d74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0ac      	sub	sp, #176	@ 0xb0
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	2284      	movs	r2, #132	@ 0x84
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f01f fddd 	bl	8020954 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a57      	ldr	r2, [pc, #348]	@ (8000efc <HAL_I2C_MspInit+0x188>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	f040 80b9 	bne.w	8000f18 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000daa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 fa2d 	bl	8008214 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000dc0:	f000 fa34 	bl	800122c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ddc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000de0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de4:	2312      	movs	r3, #18
 8000de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df6:	2304      	movs	r3, #4
 8000df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e00:	4619      	mov	r1, r3
 8000e02:	4840      	ldr	r0, [pc, #256]	@ (8000f04 <HAL_I2C_MspInit+0x190>)
 8000e04:	f004 f90a 	bl	800501c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e08:	4b3d      	ldr	r3, [pc, #244]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000e0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <HAL_I2C_MspInit+0x18c>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e20:	4b39      	ldr	r3, [pc, #228]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e22:	4a3a      	ldr	r2, [pc, #232]	@ (8000f0c <HAL_I2C_MspInit+0x198>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e26:	4b38      	ldr	r3, [pc, #224]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e2c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2e:	4b36      	ldr	r3, [pc, #216]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e34:	4b34      	ldr	r3, [pc, #208]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3a:	4b33      	ldr	r3, [pc, #204]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e40:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e42:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e48:	4b2f      	ldr	r3, [pc, #188]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e54:	4b2c      	ldr	r3, [pc, #176]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e60:	4829      	ldr	r0, [pc, #164]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e62:	f002 fa41 	bl	80032e8 <HAL_DMA_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000e6c:	f000 f9de 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a25      	ldr	r2, [pc, #148]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e76:	4a24      	ldr	r2, [pc, #144]	@ (8000f08 <HAL_I2C_MspInit+0x194>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e7e:	4a25      	ldr	r2, [pc, #148]	@ (8000f14 <HAL_I2C_MspInit+0x1a0>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e82:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e88:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e8c:	2240      	movs	r2, #64	@ 0x40
 8000e8e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000e98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e9c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000ebc:	4814      	ldr	r0, [pc, #80]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ebe:	f002 fa13 	bl	80032e8 <HAL_DMA_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000ec8:	f000 f9b0 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ed0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <HAL_I2C_MspInit+0x19c>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2105      	movs	r1, #5
 8000edc:	201f      	movs	r0, #31
 8000ede:	f001 ffcf 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ee2:	201f      	movs	r0, #31
 8000ee4:	f001 ffe8 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	2020      	movs	r0, #32
 8000eee:	f001 ffc7 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	f001 ffe0 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ef8:	e0be      	b.n	8001078 <HAL_I2C_MspInit+0x304>
 8000efa:	bf00      	nop
 8000efc:	40005400 	.word	0x40005400
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020400 	.word	0x40020400
 8000f08:	200003e4 	.word	0x200003e4
 8000f0c:	40026088 	.word	0x40026088
 8000f10:	20000444 	.word	0x20000444
 8000f14:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a58      	ldr	r2, [pc, #352]	@ (8001080 <HAL_I2C_MspInit+0x30c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f040 80aa 	bne.w	8001078 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 f96d 	bl	8008214 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000f40:	f000 f974 	bl	800122c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b4f      	ldr	r3, [pc, #316]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a4e      	ldr	r2, [pc, #312]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	4b4c      	ldr	r3, [pc, #304]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f5c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f76:	2304      	movs	r3, #4
 8000f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f80:	4619      	mov	r1, r3
 8000f82:	4841      	ldr	r0, [pc, #260]	@ (8001088 <HAL_I2C_MspInit+0x314>)
 8000f84:	f004 f84a 	bl	800501c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f88:	4b3e      	ldr	r3, [pc, #248]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b3b      	ldr	r3, [pc, #236]	@ (8001084 <HAL_I2C_MspInit+0x310>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8001090 <HAL_I2C_MspInit+0x31c>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000fa6:	4b39      	ldr	r3, [pc, #228]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fa8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fae:	4b37      	ldr	r3, [pc, #220]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b35      	ldr	r3, [pc, #212]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b34      	ldr	r3, [pc, #208]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc2:	4b32      	ldr	r3, [pc, #200]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000fe0:	482a      	ldr	r0, [pc, #168]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000fe2:	f002 f981 	bl	80032e8 <HAL_DMA_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000fec:	f000 f91e 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a26      	ldr	r2, [pc, #152]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff6:	4a25      	ldr	r2, [pc, #148]	@ (800108c <HAL_I2C_MspInit+0x318>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8000ffe:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <HAL_I2C_MspInit+0x324>)
 8001000:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001002:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001004:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001008:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 800100c:	2240      	movs	r2, #64	@ 0x40
 800100e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001010:	4b20      	ldr	r3, [pc, #128]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800101c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800103c:	4815      	ldr	r0, [pc, #84]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 800103e:	f002 f953 	bl	80032e8 <HAL_DMA_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001048:	f000 f8f0 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38
 8001052:	4a10      	ldr	r2, [pc, #64]	@ (8001094 <HAL_I2C_MspInit+0x320>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2105      	movs	r1, #5
 800105c:	2021      	movs	r0, #33	@ 0x21
 800105e:	f001 ff0f 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001062:	2021      	movs	r0, #33	@ 0x21
 8001064:	f001 ff28 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2105      	movs	r1, #5
 800106c:	2022      	movs	r0, #34	@ 0x22
 800106e:	f001 ff07 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001072:	2022      	movs	r0, #34	@ 0x22
 8001074:	f001 ff20 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 8001078:	bf00      	nop
 800107a:	37b0      	adds	r7, #176	@ 0xb0
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005800 	.word	0x40005800
 8001084:	40023800 	.word	0x40023800
 8001088:	40020400 	.word	0x40020400
 800108c:	200004a4 	.word	0x200004a4
 8001090:	40026058 	.word	0x40026058
 8001094:	20000504 	.word	0x20000504
 8001098:	400260b8 	.word	0x400260b8

0800109c <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <_write+0x3c>)
 80010aa:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	4809      	ldr	r0, [pc, #36]	@ (80010dc <_write+0x40>)
 80010b8:	f009 fb00 	bl	800a6bc <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 80010bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010c0:	2201      	movs	r2, #1
 80010c2:	6979      	ldr	r1, [r7, #20]
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <_write+0x40>)
 80010c6:	f009 faf9 	bl	800a6bc <HAL_UART_Transmit>
	return len + 1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3301      	adds	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	080217dc 	.word	0x080217dc
 80010dc:	20000a04 	.word	0x20000a04

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f001 f93d 	bl	8002362 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f822 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f7ff fd6e 	bl	8000bcc <MX_GPIO_Init>
  MX_DMA_Init();
 80010f0:	f7ff fb7a 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80010f4:	f000 fe4c 	bl	8001d90 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80010f8:	f7ff fb34 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 80010fc:	f000 fde8 	bl	8001cd0 <MX_UART4_Init>
  MX_UART5_Init();
 8001100:	f000 fe16 	bl	8001d30 <MX_UART5_Init>
  MX_I2C1_Init();
 8001104:	f7ff fdb6 	bl	8000c74 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001108:	f7ff fdf4 	bl	8000cf4 <MX_I2C2_Init>
  MX_SPI1_Init();
 800110c:	f000 f894 	bl	8001238 <MX_SPI1_Init>
  MX_SPI4_Init();
 8001110:	f000 f8d0 	bl	80012b4 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001114:	f7ff fa62 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001118:	f000 fd38 	bl	8001b8c <MX_TIM6_Init>
  MX_TIM2_Init();
 800111c:	f000 fce8 	bl	8001af0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001120:	f00b fc80 	bl	800ca24 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001124:	f7ff fbfa 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001128:	f00b fcb0 	bl	800ca8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <main+0x4c>

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	@ 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	@ 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f01f fc08 	bl	8020954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	4b2a      	ldr	r3, [pc, #168]	@ (8001200 <SystemClock_Config+0xd0>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a29      	ldr	r2, [pc, #164]	@ (8001200 <SystemClock_Config+0xd0>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <SystemClock_Config+0xd0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <SystemClock_Config+0xd4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a24      	ldr	r2, [pc, #144]	@ (8001204 <SystemClock_Config+0xd4>)
 8001172:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <SystemClock_Config+0xd4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2310      	movs	r3, #16
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001190:	2302      	movs	r3, #2
 8001192:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001198:	2308      	movs	r3, #8
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800119c:	23d8      	movs	r3, #216	@ 0xd8
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 fb75 	bl	800789c <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b8:	f000 f838 	bl	800122c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011bc:	f006 fb1e 	bl	80077fc <HAL_PWREx_EnableOverDrive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011c6:	f000 f831 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2302      	movs	r3, #2
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2107      	movs	r1, #7
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fdfb 	bl	8007de4 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011f4:	f000 f81a 	bl	800122c <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	@ 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800121a:	f001 f8af 	bl	800237c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40001400 	.word	0x40001400

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <Error_Handler+0x8>

08001238 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_SPI1_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <MX_SPI1_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001252:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001256:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_SPI1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001266:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800126a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_SPI1_Init+0x74>)
 800126e:	2218      	movs	r2, #24
 8001270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_SPI1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001284:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001286:	2207      	movs	r2, #7
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <MX_SPI1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001292:	2208      	movs	r2, #8
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_SPI1_Init+0x74>)
 8001298:	f007 fbac 	bl	80089f4 <HAL_SPI_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f7ff ffc3 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000564 	.word	0x20000564
 80012b0:	40013000 	.word	0x40013000

080012b4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80012b8:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_SPI4_Init+0x68>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <MX_SPI4_Init+0x6c>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_SPI4_Init+0x68>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_SPI4_Init+0x68>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_SPI4_Init+0x68>)
 80012cc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012d0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_SPI4_Init+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <MX_SPI4_Init+0x68>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_SPI4_Init+0x68>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	@ (800131c <MX_SPI4_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_SPI4_Init+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <MX_SPI4_Init+0x68>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_SPI4_Init+0x68>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <MX_SPI4_Init+0x68>)
 80012fe:	2200      	movs	r2, #0
 8001300:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_SPI4_Init+0x68>)
 8001304:	2200      	movs	r2, #0
 8001306:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_SPI4_Init+0x68>)
 800130a:	f007 fb73 	bl	80089f4 <HAL_SPI_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001314:	f7ff ff8a 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200005c8 	.word	0x200005c8
 8001320:	40013400 	.word	0x40013400

08001324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	@ 0x30
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4aa1      	ldr	r2, [pc, #644]	@ (80015c8 <HAL_SPI_MspInit+0x2a4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	f040 80a9 	bne.w	800149a <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001348:	4ba0      	ldr	r3, [pc, #640]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800134a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134c:	4a9f      	ldr	r2, [pc, #636]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800134e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001352:	6453      	str	r3, [r2, #68]	@ 0x44
 8001354:	4b9d      	ldr	r3, [pc, #628]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b9a      	ldr	r3, [pc, #616]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a99      	ldr	r2, [pc, #612]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b97      	ldr	r3, [pc, #604]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	4b94      	ldr	r3, [pc, #592]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	4a93      	ldr	r2, [pc, #588]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	6313      	str	r3, [r2, #48]	@ 0x30
 8001384:	4b91      	ldr	r3, [pc, #580]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001390:	2370      	movs	r3, #112	@ 0x70
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a0:	2305      	movs	r3, #5
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4889      	ldr	r0, [pc, #548]	@ (80015d0 <HAL_SPI_MspInit+0x2ac>)
 80013ac:	f003 fe36 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013b0:	2320      	movs	r3, #32
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c0:	2305      	movs	r3, #5
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4882      	ldr	r0, [pc, #520]	@ (80015d4 <HAL_SPI_MspInit+0x2b0>)
 80013cc:	f003 fe26 	bl	800501c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80013d0:	4b81      	ldr	r3, [pc, #516]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013d2:	4a82      	ldr	r2, [pc, #520]	@ (80015dc <HAL_SPI_MspInit+0x2b8>)
 80013d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80013d6:	4b80      	ldr	r3, [pc, #512]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013d8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013dc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013de:	4b7e      	ldr	r3, [pc, #504]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e4:	4b7c      	ldr	r3, [pc, #496]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ea:	4b7b      	ldr	r3, [pc, #492]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f2:	4b79      	ldr	r3, [pc, #484]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f8:	4b77      	ldr	r3, [pc, #476]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013fe:	4b76      	ldr	r3, [pc, #472]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001404:	4b74      	ldr	r3, [pc, #464]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800140a:	4b73      	ldr	r3, [pc, #460]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001410:	4871      	ldr	r0, [pc, #452]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001412:	f001 ff69 	bl	80032e8 <HAL_DMA_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 800141c:	f7ff ff06 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a6d      	ldr	r2, [pc, #436]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001424:	659a      	str	r2, [r3, #88]	@ 0x58
 8001426:	4a6c      	ldr	r2, [pc, #432]	@ (80015d8 <HAL_SPI_MspInit+0x2b4>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800142c:	4b6c      	ldr	r3, [pc, #432]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 800142e:	4a6d      	ldr	r2, [pc, #436]	@ (80015e4 <HAL_SPI_MspInit+0x2c0>)
 8001430:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001432:	4b6b      	ldr	r3, [pc, #428]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001434:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001438:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800143a:	4b69      	ldr	r3, [pc, #420]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 800143c:	2240      	movs	r2, #64	@ 0x40
 800143e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b67      	ldr	r3, [pc, #412]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b66      	ldr	r3, [pc, #408]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001448:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800144c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144e:	4b64      	ldr	r3, [pc, #400]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001454:	4b62      	ldr	r3, [pc, #392]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800145a:	4b61      	ldr	r3, [pc, #388]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001460:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001466:	4b5e      	ldr	r3, [pc, #376]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800146c:	485c      	ldr	r0, [pc, #368]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 800146e:	f001 ff3b 	bl	80032e8 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001478:	f7ff fed8 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a58      	ldr	r2, [pc, #352]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54
 8001482:	4a57      	ldr	r2, [pc, #348]	@ (80015e0 <HAL_SPI_MspInit+0x2bc>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2105      	movs	r1, #5
 800148c:	2023      	movs	r0, #35	@ 0x23
 800148e:	f001 fcf7 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001492:	2023      	movs	r0, #35	@ 0x23
 8001494:	f001 fd10 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001498:	e091      	b.n	80015be <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a52      	ldr	r2, [pc, #328]	@ (80015e8 <HAL_SPI_MspInit+0x2c4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	f040 808c 	bne.w	80015be <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a48      	ldr	r2, [pc, #288]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4b43      	ldr	r3, [pc, #268]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a42      	ldr	r2, [pc, #264]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b40      	ldr	r3, [pc, #256]	@ (80015cc <HAL_SPI_MspInit+0x2a8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014d6:	2374      	movs	r3, #116	@ 0x74
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014e6:	2305      	movs	r3, #5
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	483e      	ldr	r0, [pc, #248]	@ (80015ec <HAL_SPI_MspInit+0x2c8>)
 80014f2:	f003 fd93 	bl	800501c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 80014f8:	4a3e      	ldr	r2, [pc, #248]	@ (80015f4 <HAL_SPI_MspInit+0x2d0>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80014fc:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 80014fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001502:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001504:	4b3a      	ldr	r3, [pc, #232]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150a:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001510:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001516:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001518:	4b35      	ldr	r3, [pc, #212]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151e:	4b34      	ldr	r3, [pc, #208]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001524:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800152a:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001530:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001536:	482e      	ldr	r0, [pc, #184]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 8001538:	f001 fed6 	bl	80032e8 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001542:	f7ff fe73 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a29      	ldr	r2, [pc, #164]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800154a:	659a      	str	r2, [r3, #88]	@ 0x58
 800154c:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <HAL_SPI_MspInit+0x2cc>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001554:	4a29      	ldr	r2, [pc, #164]	@ (80015fc <HAL_SPI_MspInit+0x2d8>)
 8001556:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001558:	4b27      	ldr	r3, [pc, #156]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 800155a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800155e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001562:	2240      	movs	r2, #64	@ 0x40
 8001564:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 800156e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001572:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001574:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001592:	4819      	ldr	r0, [pc, #100]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 8001594:	f001 fea8 	bl	80032e8 <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 800159e:	f7ff fe45 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 80015a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80015a8:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <HAL_SPI_MspInit+0x2d4>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	2054      	movs	r0, #84	@ 0x54
 80015b4:	f001 fc64 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80015b8:	2054      	movs	r0, #84	@ 0x54
 80015ba:	f001 fc7d 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 80015be:	bf00      	nop
 80015c0:	3730      	adds	r7, #48	@ 0x30
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40013000 	.word	0x40013000
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	2000062c 	.word	0x2000062c
 80015dc:	40026440 	.word	0x40026440
 80015e0:	2000068c 	.word	0x2000068c
 80015e4:	40026458 	.word	0x40026458
 80015e8:	40013400 	.word	0x40013400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	200006ec 	.word	0x200006ec
 80015f4:	40026410 	.word	0x40026410
 80015f8:	2000074c 	.word	0x2000074c
 80015fc:	40026428 	.word	0x40026428

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a10      	ldr	r2, [pc, #64]	@ (800164c <HAL_MspInit+0x4c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <HAL_MspInit+0x4c>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	f06f 0001 	mvn.w	r0, #1
 800163e:	f001 fc1f 	bl	8002e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	@ 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001660:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <HAL_InitTick+0xe0>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <HAL_InitTick+0xe0>)
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	6413      	str	r3, [r2, #64]	@ 0x40
 800166c:	4b30      	ldr	r3, [pc, #192]	@ (8001730 <HAL_InitTick+0xe0>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001678:	f107 0210 	add.w	r2, r7, #16
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f006 fd94 	bl	80081b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800168c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001692:	f006 fd65 	bl	8008160 <HAL_RCC_GetPCLK1Freq>
 8001696:	6378      	str	r0, [r7, #52]	@ 0x34
 8001698:	e004      	b.n	80016a4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800169a:	f006 fd61 	bl	8008160 <HAL_RCC_GetPCLK1Freq>
 800169e:	4603      	mov	r3, r0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a6:	4a23      	ldr	r2, [pc, #140]	@ (8001734 <HAL_InitTick+0xe4>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	3b01      	subs	r3, #1
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <HAL_InitTick+0xe8>)
 80016b4:	4a21      	ldr	r2, [pc, #132]	@ (800173c <HAL_InitTick+0xec>)
 80016b6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <HAL_InitTick+0xe8>)
 80016ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016be:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_InitTick+0xe8>)
 80016c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_InitTick+0xe8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_InitTick+0xe8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_InitTick+0xe8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80016d8:	4817      	ldr	r0, [pc, #92]	@ (8001738 <HAL_InitTick+0xe8>)
 80016da:	f008 fa53 	bl	8009b84 <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80016ec:	4812      	ldr	r0, [pc, #72]	@ (8001738 <HAL_InitTick+0xe8>)
 80016ee:	f008 fb39 	bl	8009d64 <HAL_TIM_Base_Start_IT>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d111      	bne.n	8001724 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001700:	2037      	movs	r0, #55	@ 0x37
 8001702:	f001 fbd9 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d808      	bhi.n	800171e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2037      	movs	r0, #55	@ 0x37
 8001712:	f001 fbb5 	bl	8002e80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_InitTick+0xf0>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e002      	b.n	8001724 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001724:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001728:	4618      	mov	r0, r3
 800172a:	3738      	adds	r7, #56	@ 0x38
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	431bde83 	.word	0x431bde83
 8001738:	200007ac 	.word	0x200007ac
 800173c:	40001400 	.word	0x40001400
 8001740:	20000004 	.word	0x20000004

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <UsageFault_Handler+0x4>

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <DMA1_Stream0_IRQHandler+0x10>)
 8001782:	f001 ff51 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000aec 	.word	0x20000aec

08001790 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001796:	f001 ff47 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000894 	.word	0x20000894

080017a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <DMA1_Stream2_IRQHandler+0x10>)
 80017aa:	f001 ff3d 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000a8c 	.word	0x20000a8c

080017b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <DMA1_Stream3_IRQHandler+0x10>)
 80017be:	f001 ff33 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200004a4 	.word	0x200004a4

080017cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <DMA1_Stream5_IRQHandler+0x10>)
 80017d2:	f001 ff29 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200003e4 	.word	0x200003e4

080017e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <DMA1_Stream6_IRQHandler+0x10>)
 80017e6:	f001 ff1f 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000444 	.word	0x20000444

080017f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <I2C1_EV_IRQHandler+0x10>)
 80017fa:	f004 f9fd 	bl	8005bf8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000033c 	.word	0x2000033c

08001808 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <I2C1_ER_IRQHandler+0x10>)
 800180e:	f004 fa0d 	bl	8005c2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000033c 	.word	0x2000033c

0800181c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <I2C2_EV_IRQHandler+0x10>)
 8001822:	f004 f9e9 	bl	8005bf8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000390 	.word	0x20000390

08001830 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <I2C2_ER_IRQHandler+0x10>)
 8001836:	f004 f9f9 	bl	8005c2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000390 	.word	0x20000390

08001844 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <SPI1_IRQHandler+0x10>)
 800184a:	f007 fd13 	bl	8009274 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000564 	.word	0x20000564

08001858 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <USART3_IRQHandler+0x10>)
 800185e:	f009 f859 	bl	800a914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000a04 	.word	0x20000a04

0800186c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <DMA1_Stream7_IRQHandler+0x10>)
 8001872:	f001 fed9 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000504 	.word	0x20000504

08001880 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <UART4_IRQHandler+0x10>)
 8001886:	f009 f845 	bl	800a914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200008f4 	.word	0x200008f4

08001894 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <UART5_IRQHandler+0x10>)
 800189a:	f009 f83b 	bl	800a914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000097c 	.word	0x2000097c

080018a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <TIM6_DAC_IRQHandler+0x10>)
 80018ae:	f008 fad1 	bl	8009e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000848 	.word	0x20000848

080018bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <TIM7_IRQHandler+0x10>)
 80018c2:	f008 fac7 	bl	8009e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200007ac 	.word	0x200007ac

080018d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <DMA2_Stream0_IRQHandler+0x10>)
 80018d6:	f001 fea7 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200006ec 	.word	0x200006ec

080018e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <DMA2_Stream1_IRQHandler+0x10>)
 80018ea:	f001 fe9d 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000074c 	.word	0x2000074c

080018f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <DMA2_Stream2_IRQHandler+0x10>)
 80018fe:	f001 fe93 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000062c 	.word	0x2000062c

0800190c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA2_Stream3_IRQHandler+0x10>)
 8001912:	f001 fe89 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000068c 	.word	0x2000068c

08001920 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <DMA2_Stream4_IRQHandler+0x10>)
 8001926:	f001 fe7f 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000274 	.word	0x20000274

08001934 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <ETH_IRQHandler+0x10>)
 800193a:	f002 fc87 	bl	800424c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000cfe4 	.word	0x2000cfe4

08001948 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <ETH_WKUP_IRQHandler+0x10>)
 800194e:	f002 fc7d 	bl	800424c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000cfe4 	.word	0x2000cfe4

0800195c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <SPI4_IRQHandler+0x10>)
 8001962:	f007 fc87 	bl	8009274 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200005c8 	.word	0x200005c8

08001970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <_kill+0x20>)
 800198c:	2216      	movs	r2, #22
 800198e:	601a      	str	r2, [r3, #0]
  return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	2002d980 	.word	0x2002d980

080019a4 <_exit>:

void _exit (int status)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe5 	bl	8001980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019b6:	bf00      	nop
 80019b8:	e7fd      	b.n	80019b6 <_exit+0x12>

080019ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e00a      	b.n	80019e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019cc:	f3af 8000 	nop.w
 80019d0:	4601      	mov	r1, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	60ba      	str	r2, [r7, #8]
 80019d8:	b2ca      	uxtb	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbf0      	blt.n	80019cc <_read+0x12>
  }

  return len;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_isatty>:

int _isatty(int file)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	@ (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d205      	bcs.n	8001a98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <_sbrk+0x6c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a96:	e009      	b.n	8001aac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <_sbrk+0x64>)
 8001aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20050000 	.word	0x20050000
 8001abc:	00002000 	.word	0x00002000
 8001ac0:	200007f8 	.word	0x200007f8
 8001ac4:	2002d990 	.word	0x2002d990
 8001ac8:	2002d980 	.word	0x2002d980

08001acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0310 	add.w	r3, r7, #16
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b36:	4814      	ldr	r0, [pc, #80]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b38:	f008 f824 	bl	8009b84 <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b42:	f7ff fb73 	bl	800122c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b54:	f008 fa86 	bl	800a064 <HAL_TIM_ConfigClockSource>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b5e:	f7ff fb65 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <MX_TIM2_Init+0x98>)
 8001b70:	f008 fcaa 	bl	800a4c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b7a:	f7ff fb57 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200007fc 	.word	0x200007fc

08001b8c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001b9e:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <MX_TIM6_Init+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001ba4:	f240 221b 	movw	r2, #539	@ 0x21b
 8001ba8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bb2:	2263      	movs	r2, #99	@ 0x63
 8001bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bbe:	f007 ffe1 	bl	8009b84 <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bc8:	f7ff fb30 	bl	800122c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <MX_TIM6_Init+0x64>)
 8001bda:	f008 fc75 	bl	800a4c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001be4:	f7ff fb22 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000848 	.word	0x20000848
 8001bf4:	40001000 	.word	0x40001000

08001bf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c08:	d10c      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c22:	e049      	b.n	8001cb8 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <HAL_TIM_Base_MspInit+0xcc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d144      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4a23      	ldr	r2, [pc, #140]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc8>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c46:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c48:	4a20      	ldr	r2, [pc, #128]	@ (8001ccc <HAL_TIM_Base_MspInit+0xd4>)
 8001c4a:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c4e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c52:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c66:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c68:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c70:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c76:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c84:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001c8c:	480e      	ldr	r0, [pc, #56]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001c8e:	f001 fb2b 	bl	80032e8 <HAL_DMA_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001c98:	f7ff fac8 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca0:	621a      	str	r2, [r3, #32]
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2105      	movs	r1, #5
 8001cac:	2036      	movs	r0, #54	@ 0x36
 8001cae:	f001 f8e7 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cb2:	2036      	movs	r0, #54	@ 0x36
 8001cb4:	f001 f900 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40001000 	.word	0x40001000
 8001cc8:	20000894 	.word	0x20000894
 8001ccc:	40026028 	.word	0x40026028

08001cd0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cd6:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <MX_UART4_Init+0x5c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_UART4_Init+0x58>)
 8001d14:	f008 fc84 	bl	800a620 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d1e:	f7ff fa85 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200008f4 	.word	0x200008f4
 8001d2c:	40004c00 	.word	0x40004c00

08001d30 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d36:	4a15      	ldr	r2, [pc, #84]	@ (8001d8c <MX_UART5_Init+0x5c>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <MX_UART5_Init+0x58>)
 8001d74:	f008 fc54 	bl	800a620 <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d7e:	f7ff fa55 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000097c 	.word	0x2000097c
 8001d8c:	40005000 	.word	0x40005000

08001d90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d96:	4a15      	ldr	r2, [pc, #84]	@ (8001dec <MX_USART3_UART_Init+0x5c>)
 8001d98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001d9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001db6:	220c      	movs	r2, #12
 8001db8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_USART3_UART_Init+0x58>)
 8001dd4:	f008 fc24 	bl	800a620 <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dde:	f7ff fa25 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000a04 	.word	0x20000a04
 8001dec:	40004800 	.word	0x40004800

08001df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0b0      	sub	sp, #192	@ 0xc0
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e0c:	2284      	movs	r2, #132	@ 0x84
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f01e fd9f 	bl	8020954 <memset>
  if(uartHandle->Instance==UART4)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4ab0      	ldr	r2, [pc, #704]	@ (80020dc <HAL_UART_MspInit+0x2ec>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d173      	bne.n	8001f08 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f006 f9f0 	bl	8008214 <HAL_RCCEx_PeriphCLKConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e3a:	f7ff f9f7 	bl	800122c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e3e:	4ba8      	ldr	r3, [pc, #672]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4aa7      	ldr	r2, [pc, #668]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4a:	4ba5      	ldr	r3, [pc, #660]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e56:	4ba2      	ldr	r3, [pc, #648]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4aa1      	ldr	r2, [pc, #644]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b9f      	ldr	r3, [pc, #636]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e92:	4619      	mov	r1, r3
 8001e94:	4893      	ldr	r0, [pc, #588]	@ (80020e4 <HAL_UART_MspInit+0x2f4>)
 8001e96:	f003 f8c1 	bl	800501c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001e9a:	4b93      	ldr	r3, [pc, #588]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001e9c:	4a93      	ldr	r2, [pc, #588]	@ (80020ec <HAL_UART_MspInit+0x2fc>)
 8001e9e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ea0:	4b91      	ldr	r3, [pc, #580]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ea2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ea6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea8:	4b8f      	ldr	r3, [pc, #572]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eae:	4b8e      	ldr	r3, [pc, #568]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eba:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec2:	4b89      	ldr	r3, [pc, #548]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001ec8:	4b87      	ldr	r3, [pc, #540]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ece:	4b86      	ldr	r3, [pc, #536]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed4:	4b84      	ldr	r3, [pc, #528]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001eda:	4883      	ldr	r0, [pc, #524]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001edc:	f001 fa04 	bl	80032e8 <HAL_DMA_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ee6:	f7ff f9a1 	bl	800122c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a7e      	ldr	r2, [pc, #504]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001eee:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ef0:	4a7d      	ldr	r2, [pc, #500]	@ (80020e8 <HAL_UART_MspInit+0x2f8>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2105      	movs	r1, #5
 8001efa:	2034      	movs	r0, #52	@ 0x34
 8001efc:	f000 ffc0 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f00:	2034      	movs	r0, #52	@ 0x34
 8001f02:	f000 ffd9 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f06:	e0e4      	b.n	80020d2 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a78      	ldr	r2, [pc, #480]	@ (80020f0 <HAL_UART_MspInit+0x300>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	f040 8095 	bne.w	800203e <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f22:	4618      	mov	r0, r3
 8001f24:	f006 f976 	bl	8008214 <HAL_RCCEx_PeriphCLKConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f2e:	f7ff f97d 	bl	800122c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f32:	4b6b      	ldr	r3, [pc, #428]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a6a      	ldr	r2, [pc, #424]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b68      	ldr	r3, [pc, #416]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	4b65      	ldr	r3, [pc, #404]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a64      	ldr	r2, [pc, #400]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b62      	ldr	r3, [pc, #392]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f62:	4b5f      	ldr	r3, [pc, #380]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a5e      	ldr	r2, [pc, #376]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f94:	2308      	movs	r3, #8
 8001f96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4850      	ldr	r0, [pc, #320]	@ (80020e4 <HAL_UART_MspInit+0x2f4>)
 8001fa2:	f003 f83b 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fc8:	4619      	mov	r1, r3
 8001fca:	484a      	ldr	r0, [pc, #296]	@ (80020f4 <HAL_UART_MspInit+0x304>)
 8001fcc:	f003 f826 	bl	800501c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001fd0:	4b49      	ldr	r3, [pc, #292]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80020fc <HAL_UART_MspInit+0x30c>)
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001fd6:	4b48      	ldr	r3, [pc, #288]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fd8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fdc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fde:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe4:	4b44      	ldr	r3, [pc, #272]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fea:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001fec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ff0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff2:	4b41      	ldr	r3, [pc, #260]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002000:	2200      	movs	r2, #0
 8002002:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002004:	4b3c      	ldr	r3, [pc, #240]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800200a:	4b3b      	ldr	r3, [pc, #236]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 800200c:	2200      	movs	r2, #0
 800200e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002010:	4839      	ldr	r0, [pc, #228]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002012:	f001 f969 	bl	80032e8 <HAL_DMA_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_UART_MspInit+0x230>
      Error_Handler();
 800201c:	f7ff f906 	bl	800122c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a35      	ldr	r2, [pc, #212]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002024:	675a      	str	r2, [r3, #116]	@ 0x74
 8002026:	4a34      	ldr	r2, [pc, #208]	@ (80020f8 <HAL_UART_MspInit+0x308>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2105      	movs	r1, #5
 8002030:	2035      	movs	r0, #53	@ 0x35
 8002032:	f000 ff25 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002036:	2035      	movs	r0, #53	@ 0x35
 8002038:	f000 ff3e 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 800203c:	e049      	b.n	80020d2 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2f      	ldr	r2, [pc, #188]	@ (8002100 <HAL_UART_MspInit+0x310>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d144      	bne.n	80020d2 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800204e:	2300      	movs	r3, #0
 8002050:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002056:	4618      	mov	r0, r3
 8002058:	f006 f8dc 	bl	8008214 <HAL_RCCEx_PeriphCLKConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_MspInit+0x276>
      Error_Handler();
 8002062:	f7ff f8e3 	bl	800122c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6413      	str	r3, [r2, #64]	@ 0x40
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	4a17      	ldr	r2, [pc, #92]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	6313      	str	r3, [r2, #48]	@ 0x30
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_UART_MspInit+0x2f0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002096:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800209a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b0:	2307      	movs	r3, #7
 80020b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020ba:	4619      	mov	r1, r3
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <HAL_UART_MspInit+0x304>)
 80020be:	f002 ffad 	bl	800501c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2105      	movs	r1, #5
 80020c6:	2027      	movs	r0, #39	@ 0x27
 80020c8:	f000 feda 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020cc:	2027      	movs	r0, #39	@ 0x27
 80020ce:	f000 fef3 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	37c0      	adds	r7, #192	@ 0xc0
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40004c00 	.word	0x40004c00
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020800 	.word	0x40020800
 80020e8:	20000a8c 	.word	0x20000a8c
 80020ec:	40026040 	.word	0x40026040
 80020f0:	40005000 	.word	0x40005000
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	20000aec 	.word	0x20000aec
 80020fc:	40026010 	.word	0x40026010
 8002100:	40004800 	.word	0x40004800

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800213c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002108:	f7ff fce0 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	@ (8002140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	@ (8002144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	@ (8002150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002132:	f01e fcbb 	bl	8020aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7fe ffd3 	bl	80010e0 <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800213c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002148:	08026868 	.word	0x08026868
  ldr r2, =_sbss
 800214c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002150:	2002d990 	.word	0x2002d990

08002154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC_IRQHandler>

08002156 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <LAN8742_RegisterBusIO+0x28>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <LAN8742_RegisterBusIO+0x28>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <LAN8742_RegisterBusIO+0x28>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002182:	e014      	b.n	80021ae <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d139      	bne.n	800224a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e01c      	b.n	800222a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	2112      	movs	r1, #18
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	4798      	blx	r3
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	da03      	bge.n	800220c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002204:	f06f 0304 	mvn.w	r3, #4
 8002208:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800220a:	e00b      	b.n	8002224 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	d105      	bne.n	8002224 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
         break;
 8002222:	e005      	b.n	8002230 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b1f      	cmp	r3, #31
 800222e:	d9df      	bls.n	80021f0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b1f      	cmp	r3, #31
 8002236:	d902      	bls.n	800223e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002238:	f06f 0302 	mvn.w	r3, #2
 800223c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800224a:	693b      	ldr	r3, [r7, #16]
 }
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6810      	ldr	r0, [r2, #0]
 8002268:	f107 020c 	add.w	r2, r7, #12
 800226c:	2101      	movs	r1, #1
 800226e:	4798      	blx	r3
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	da02      	bge.n	800227c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002276:	f06f 0304 	mvn.w	r3, #4
 800227a:	e06e      	b.n	800235a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6810      	ldr	r0, [r2, #0]
 8002284:	f107 020c 	add.w	r2, r7, #12
 8002288:	2101      	movs	r1, #1
 800228a:	4798      	blx	r3
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	da02      	bge.n	8002298 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002292:	f06f 0304 	mvn.w	r3, #4
 8002296:	e060      	b.n	800235a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e059      	b.n	800235a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6810      	ldr	r0, [r2, #0]
 80022ae:	f107 020c 	add.w	r2, r7, #12
 80022b2:	2100      	movs	r1, #0
 80022b4:	4798      	blx	r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da02      	bge.n	80022c2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022bc:	f06f 0304 	mvn.w	r3, #4
 80022c0:	e04b      	b.n	800235a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d11b      	bne.n	8002304 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <LAN8742_GetLinkState+0x90>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022e0:	2302      	movs	r3, #2
 80022e2:	e03a      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e033      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022fc:	2304      	movs	r3, #4
 80022fe:	e02c      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002300:	2305      	movs	r3, #5
 8002302:	e02a      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6810      	ldr	r0, [r2, #0]
 800230c:	f107 020c 	add.w	r2, r7, #12
 8002310:	211f      	movs	r1, #31
 8002312:	4798      	blx	r3
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	da02      	bge.n	8002320 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800231a:	f06f 0304 	mvn.w	r3, #4
 800231e:	e01c      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800232a:	2306      	movs	r3, #6
 800232c:	e015      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 031c 	and.w	r3, r3, #28
 8002334:	2b18      	cmp	r3, #24
 8002336:	d101      	bne.n	800233c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002338:	2302      	movs	r3, #2
 800233a:	e00e      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 031c 	and.w	r3, r3, #28
 8002342:	2b08      	cmp	r3, #8
 8002344:	d101      	bne.n	800234a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002346:	2303      	movs	r3, #3
 8002348:	e007      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 031c 	and.w	r3, r3, #28
 8002350:	2b14      	cmp	r3, #20
 8002352:	d101      	bne.n	8002358 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002354:	2304      	movs	r3, #4
 8002356:	e000      	b.n	800235a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002358:	2305      	movs	r3, #5
    }
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002366:	2003      	movs	r0, #3
 8002368:	f000 fd7f 	bl	8002e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236c:	200f      	movs	r0, #15
 800236e:	f7ff f96f 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002372:	f7ff f945 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000b4c 	.word	0x20000b4c

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000b4c 	.word	0x20000b4c

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000008 	.word	0x20000008

08002404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e031      	b.n	800247e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe f92c 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002446:	4b10      	ldr	r3, [pc, #64]	@ (8002488 <HAL_ADC_Init+0x84>)
 8002448:	4013      	ands	r3, r2
 800244a:	f043 0202 	orr.w	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fae0 	bl	8002a18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f023 0303 	bic.w	r3, r3, #3
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
 800246e:	e001      	b.n	8002474 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	ffffeefd 	.word	0xffffeefd

0800248c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Start_DMA+0x22>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0d6      	b.n	800265c <HAL_ADC_Start_DMA+0x1d0>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d018      	beq.n	80024f6 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024d4:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_ADC_Start_DMA+0x1d8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a63      	ldr	r2, [pc, #396]	@ (8002668 <HAL_ADC_Start_DMA+0x1dc>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9a      	lsrs	r2, r3, #18
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 809e 	bne.w	8002642 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800250a:	4b58      	ldr	r3, [pc, #352]	@ (800266c <HAL_ADC_Start_DMA+0x1e0>)
 800250c:	4013      	ands	r3, r2
 800250e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800252c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800253c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002540:	d106      	bne.n	8002550 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f023 0206 	bic.w	r2, r3, #6
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44
 800254e:	e002      	b.n	8002556 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002562:	4a43      	ldr	r2, [pc, #268]	@ (8002670 <HAL_ADC_Start_DMA+0x1e4>)
 8002564:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256a:	4a42      	ldr	r2, [pc, #264]	@ (8002674 <HAL_ADC_Start_DMA+0x1e8>)
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	4a41      	ldr	r2, [pc, #260]	@ (8002678 <HAL_ADC_Start_DMA+0x1ec>)
 8002574:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800257e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800258e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	334c      	adds	r3, #76	@ 0x4c
 80025aa:	4619      	mov	r1, r3
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f000 ff48 	bl	8003444 <HAL_DMA_Start_IT>
 80025b4:	4603      	mov	r3, r0
 80025b6:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025b8:	4b30      	ldr	r3, [pc, #192]	@ (800267c <HAL_ADC_Start_DMA+0x1f0>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10f      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d143      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	e03a      	b.n	800265a <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a25      	ldr	r2, [pc, #148]	@ (8002680 <HAL_ADC_Start_DMA+0x1f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_ADC_Start_DMA+0x180>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d107      	bne.n	800260c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800260a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800260c:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_ADC_Start_DMA+0x1f0>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d120      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a19      	ldr	r2, [pc, #100]	@ (8002684 <HAL_ADC_Start_DMA+0x1f8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11b      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ce>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d114      	bne.n	800265a <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	e00b      	b.n	800265a <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800265a:	7dfb      	ldrb	r3, [r7, #23]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000000 	.word	0x20000000
 8002668:	431bde83 	.word	0x431bde83
 800266c:	fffff8fe 	.word	0xfffff8fe
 8002670:	08002c0d 	.word	0x08002c0d
 8002674:	08002cc7 	.word	0x08002cc7
 8002678:	08002ce3 	.word	0x08002ce3
 800267c:	40012300 	.word	0x40012300
 8002680:	40012000 	.word	0x40012000
 8002684:	40012200 	.word	0x40012200

08002688 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Stop_DMA+0x1a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e046      	b.n	8002730 <HAL_ADC_Stop_DMA+0xa8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d12e      	bne.n	8002726 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026d6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d10f      	bne.n	8002706 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 ff0a 	bl	8003504 <HAL_DMA_Abort>
 80026f0:	4603      	mov	r3, r0
 80026f2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002714:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <HAL_ADC_Stop_DMA+0xb0>)
 800271c:	4013      	ands	r3, r2
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ffffeefe 	.word	0xffffeefe

0800273c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c>
 800277c:	2302      	movs	r3, #2
 800277e:	e13a      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x292>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d93a      	bls.n	8002806 <HAL_ADC_ConfigChannel+0xa2>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002798:	d035      	beq.n	8002806 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	3b1e      	subs	r3, #30
 80027b0:	2207      	movs	r2, #7
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a8f      	ldr	r2, [pc, #572]	@ (8002a04 <HAL_ADC_ConfigChannel+0x2a0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10a      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	061a      	lsls	r2, r3, #24
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027de:	e039      	b.n	8002854 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4403      	add	r3, r0
 80027f8:	3b1e      	subs	r3, #30
 80027fa:	409a      	lsls	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002804:	e026      	b.n	8002854 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6919      	ldr	r1, [r3, #16]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2207      	movs	r2, #7
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43da      	mvns	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	400a      	ands	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	4618      	mov	r0, r3
 8002840:	4603      	mov	r3, r0
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4403      	add	r3, r0
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	409a      	lsls	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b06      	cmp	r3, #6
 800285a:	d824      	bhi.n	80028a6 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b05      	subs	r3, #5
 800286e:	221f      	movs	r2, #31
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43da      	mvns	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	400a      	ands	r2, r1
 800287c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b05      	subs	r3, #5
 8002898:	fa00 f203 	lsl.w	r2, r0, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80028a4:	e04c      	b.n	8002940 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d824      	bhi.n	80028f8 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	3b23      	subs	r3, #35	@ 0x23
 80028c0:	221f      	movs	r2, #31
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	400a      	ands	r2, r1
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4618      	mov	r0, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3b23      	subs	r3, #35	@ 0x23
 80028ea:	fa00 f203 	lsl.w	r2, r0, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80028f6:	e023      	b.n	8002940 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	3b41      	subs	r3, #65	@ 0x41
 800290a:	221f      	movs	r2, #31
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43da      	mvns	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	400a      	ands	r2, r1
 8002918:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	4618      	mov	r0, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3b41      	subs	r3, #65	@ 0x41
 8002934:	fa00 f203 	lsl.w	r2, r0, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <HAL_ADC_ConfigChannel+0x2a4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10a      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1fc>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002952:	d105      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002954:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a2c      	ldr	r2, [pc, #176]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 800295a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800295e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a28      	ldr	r2, [pc, #160]	@ (8002a08 <HAL_ADC_ConfigChannel+0x2a4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10f      	bne.n	800298a <HAL_ADC_ConfigChannel+0x226>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b12      	cmp	r3, #18
 8002970:	d10b      	bne.n	800298a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002972:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a25      	ldr	r2, [pc, #148]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002978:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800297c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800297e:	4b23      	ldr	r3, [pc, #140]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a22      	ldr	r2, [pc, #136]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 8002984:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002988:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a08 <HAL_ADC_ConfigChannel+0x2a4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d12b      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x288>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <HAL_ADC_ConfigChannel+0x2a0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x242>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b11      	cmp	r3, #17
 80029a4:	d122      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a18      	ldr	r2, [pc, #96]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80029ac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80029b0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029b2:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <HAL_ADC_ConfigChannel+0x2a8>)
 80029b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <HAL_ADC_ConfigChannel+0x2a0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d111      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029c8:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <HAL_ADC_ConfigChannel+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a11      	ldr	r2, [pc, #68]	@ (8002a14 <HAL_ADC_ConfigChannel+0x2b0>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9a      	lsrs	r2, r3, #18
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029de:	e002      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	10000012 	.word	0x10000012
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	40012300 	.word	0x40012300
 8002a10:	20000000 	.word	0x20000000
 8002a14:	431bde83 	.word	0x431bde83

08002a18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a20:	4b78      	ldr	r3, [pc, #480]	@ (8002c04 <ADC_Init+0x1ec>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a77      	ldr	r2, [pc, #476]	@ (8002c04 <ADC_Init+0x1ec>)
 8002a26:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a2a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a2c:	4b75      	ldr	r3, [pc, #468]	@ (8002c04 <ADC_Init+0x1ec>)
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4973      	ldr	r1, [pc, #460]	@ (8002c04 <ADC_Init+0x1ec>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa6:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <ADC_Init+0x1f0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6899      	ldr	r1, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	e00f      	b.n	8002b12 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0202 	bic.w	r2, r2, #2
 8002b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	005a      	lsls	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01b      	beq.n	8002b78 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	035a      	lsls	r2, r3, #13
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	e007      	b.n	8002b88 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	051a      	lsls	r2, r3, #20
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bca:	025a      	lsls	r2, r3, #9
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	029a      	lsls	r2, r3, #10
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40012300 	.word	0x40012300
 8002c08:	0f000001 	.word	0x0f000001

08002c0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d13c      	bne.n	8002ca0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12b      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d127      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d119      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0220 	bic.w	r2, r2, #32
 8002c72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f01c fb79 	bl	801f390 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c9e:	e00e      	b.n	8002cbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff fd4f 	bl	8002750 <HAL_ADC_ErrorCallback>
}
 8002cb2:	e004      	b.n	8002cbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fd31 	bl	800273c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2240      	movs	r2, #64	@ 0x40
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f7ff fd24 	bl	8002750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <__NVIC_SetPriorityGrouping+0x40>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <__NVIC_SetPriorityGrouping+0x40>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00
 8002d54:	05fa0000 	.word	0x05fa0000

08002d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d5c:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <__NVIC_GetPriorityGrouping+0x18>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	f003 0307 	and.w	r3, r3, #7
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db0b      	blt.n	8002d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4907      	ldr	r1, [pc, #28]	@ (8002dac <__NVIC_EnableIRQ+0x38>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2001      	movs	r0, #1
 8002d96:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	@ (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	@ (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	@ 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	@ 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff4c 	bl	8002d10 <__NVIC_SetPriorityGrouping>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e92:	f7ff ff61 	bl	8002d58 <__NVIC_GetPriorityGrouping>
 8002e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	6978      	ldr	r0, [r7, #20]
 8002e9e:	f7ff ffb1 	bl	8002e04 <NVIC_EncodePriority>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff80 	bl	8002db0 <__NVIC_SetPriority>
}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff54 	bl	8002d74 <__NVIC_EnableIRQ>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e054      	b.n	8002f90 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7f5b      	ldrb	r3, [r3, #29]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fc56 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	791b      	ldrb	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10c      	bne.n	8002f24 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	@ (8002f98 <HAL_CRC_Init+0xc4>)
 8002f10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0218 	bic.w	r2, r2, #24
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	e00c      	b.n	8002f3e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f94c 	bl	80031cc <HAL_CRCEx_Polynomial_Set>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e028      	b.n	8002f90 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	795b      	ldrb	r3, [r3, #5]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f4e:	611a      	str	r2, [r3, #16]
 8002f50:	e004      	b.n	8002f5c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6912      	ldr	r2, [r2, #16]
 8002f5a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	04c11db7 	.word	0x04c11db7

08002f9c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d006      	beq.n	8002fd8 <HAL_CRC_Calculate+0x3c>
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d829      	bhi.n	8003022 <HAL_CRC_Calculate+0x86>
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d019      	beq.n	8003006 <HAL_CRC_Calculate+0x6a>
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d01e      	beq.n	8003014 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002fd6:	e024      	b.n	8003022 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e00a      	b.n	8002ff4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	441a      	add	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d3f0      	bcc.n	8002fde <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	613b      	str	r3, [r7, #16]
      break;
 8003004:	e00e      	b.n	8003024 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f812 	bl	8003034 <CRC_Handle_8>
 8003010:	6138      	str	r0, [r7, #16]
      break;
 8003012:	e007      	b.n	8003024 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f89d 	bl	8003158 <CRC_Handle_16>
 800301e:	6138      	str	r0, [r7, #16]
      break;
 8003020:	e000      	b.n	8003024 <HAL_CRC_Calculate+0x88>
      break;
 8003022:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800302a:	693b      	ldr	r3, [r7, #16]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	e023      	b.n	800308e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3301      	adds	r3, #1
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	440b      	add	r3, r1
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003060:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	3302      	adds	r3, #2
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	440b      	add	r3, r1
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003070:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	3303      	adds	r3, #3
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	440b      	add	r3, r1
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003084:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	429a      	cmp	r2, r3
 8003096:	d3d6      	bcc.n	8003046 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d051      	beq.n	8003146 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d108      	bne.n	80030be <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	4413      	add	r3, r2
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	7013      	strb	r3, [r2, #0]
 80030bc:	e043      	b.n	8003146 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d118      	bne.n	80030fa <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	b21a      	sxth	r2, r3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	3301      	adds	r3, #1
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	440b      	add	r3, r1
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	8b7a      	ldrh	r2, [r7, #26]
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e025      	b.n	8003146 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b03      	cmp	r3, #3
 8003102:	d120      	bne.n	8003146 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4413      	add	r3, r2
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b21b      	sxth	r3, r3
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	b21a      	sxth	r2, r3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	3301      	adds	r3, #1
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	440b      	add	r3, r1
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b21b      	sxth	r3, r3
 8003122:	4313      	orrs	r3, r2
 8003124:	b21b      	sxth	r3, r3
 8003126:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	8b7a      	ldrh	r2, [r7, #26]
 8003132:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3724      	adds	r7, #36	@ 0x24
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	e013      	b.n	8003192 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	4413      	add	r3, r2
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	041a      	lsls	r2, r3, #16
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	440b      	add	r3, r1
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	4619      	mov	r1, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3301      	adds	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3e6      	bcc.n	800316a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4413      	add	r3, r2
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031dc:	231f      	movs	r3, #31
 80031de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
 80031ee:	e063      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031f0:	bf00      	nop
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	613a      	str	r2, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_CRCEx_Polynomial_Set+0x44>
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b18      	cmp	r3, #24
 8003214:	d846      	bhi.n	80032a4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003216:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	080032ab 	.word	0x080032ab
 8003220:	080032a5 	.word	0x080032a5
 8003224:	080032a5 	.word	0x080032a5
 8003228:	080032a5 	.word	0x080032a5
 800322c:	080032a5 	.word	0x080032a5
 8003230:	080032a5 	.word	0x080032a5
 8003234:	080032a5 	.word	0x080032a5
 8003238:	080032a5 	.word	0x080032a5
 800323c:	08003299 	.word	0x08003299
 8003240:	080032a5 	.word	0x080032a5
 8003244:	080032a5 	.word	0x080032a5
 8003248:	080032a5 	.word	0x080032a5
 800324c:	080032a5 	.word	0x080032a5
 8003250:	080032a5 	.word	0x080032a5
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080032a5 	.word	0x080032a5
 800325c:	0800328d 	.word	0x0800328d
 8003260:	080032a5 	.word	0x080032a5
 8003264:	080032a5 	.word	0x080032a5
 8003268:	080032a5 	.word	0x080032a5
 800326c:	080032a5 	.word	0x080032a5
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080032a5 	.word	0x080032a5
 8003278:	080032a5 	.word	0x080032a5
 800327c:	08003281 	.word	0x08003281
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b06      	cmp	r3, #6
 8003284:	d913      	bls.n	80032ae <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800328a:	e010      	b.n	80032ae <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b07      	cmp	r3, #7
 8003290:	d90f      	bls.n	80032b2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003296:	e00c      	b.n	80032b2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b0f      	cmp	r3, #15
 800329c:	d90b      	bls.n	80032b6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80032a2:	e008      	b.n	80032b6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
        break;
 80032a8:	e006      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032aa:	bf00      	nop
 80032ac:	e004      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80032b6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10d      	bne.n	80032da <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 0118 	bic.w	r1, r3, #24
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff f856 	bl	80023a4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e099      	b.n	8003438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003324:	e00f      	b.n	8003346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003326:	f7ff f83d 	bl	80023a4 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b05      	cmp	r3, #5
 8003332:	d908      	bls.n	8003346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2203      	movs	r2, #3
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e078      	b.n	8003438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e8      	bne.n	8003326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4b38      	ldr	r3, [pc, #224]	@ (8003440 <HAL_DMA_Init+0x158>)
 8003360:	4013      	ands	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a8:	4313      	orrs	r3, r2
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d117      	bne.n	800340a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fb23 	bl	8003a38 <DMA_CheckFifoParam>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003406:	2301      	movs	r3, #1
 8003408:	e016      	b.n	8003438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fada 	bl	80039cc <DMA_CalcBaseAndBitshift>
 8003418:	4603      	mov	r3, r0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003420:	223f      	movs	r2, #63	@ 0x3f
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	f010803f 	.word	0xf010803f

08003444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_DMA_Start_IT+0x26>
 8003466:	2302      	movs	r3, #2
 8003468:	e048      	b.n	80034fc <HAL_DMA_Start_IT+0xb8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d137      	bne.n	80034ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fa6c 	bl	8003970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0216 	orr.w	r2, r2, #22
 80034b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0208 	orr.w	r2, r2, #8
 80034da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e005      	b.n	80034fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003512:	f7fe ff47 	bl	80023a4 <HAL_GetTick>
 8003516:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d008      	beq.n	8003536 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2280      	movs	r2, #128	@ 0x80
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e052      	b.n	80035dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003554:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_Abort+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003586:	e013      	b.n	80035b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003588:	f7fe ff0c 	bl	80023a4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b05      	cmp	r3, #5
 8003594:	d90c      	bls.n	80035b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2203      	movs	r2, #3
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e015      	b.n	80035dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e4      	bne.n	8003588 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	223f      	movs	r2, #63	@ 0x3f
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	@ 0x80
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00c      	b.n	800361c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2205      	movs	r2, #5
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003634:	4b8e      	ldr	r3, [pc, #568]	@ (8003870 <HAL_DMA_IRQHandler+0x248>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a8e      	ldr	r2, [pc, #568]	@ (8003874 <HAL_DMA_IRQHandler+0x24c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003652:	2208      	movs	r2, #8
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01a      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2208      	movs	r2, #8
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	2204      	movs	r2, #4
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	2210      	movs	r2, #16
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d043      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003722:	2210      	movs	r2, #16
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
 8003756:	e01f      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e016      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0208 	bic.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	2220      	movs	r2, #32
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 808f 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8087 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d136      	bne.n	8003840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0216 	bic.w	r2, r2, #22
 80037e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_DMA_IRQHandler+0x1da>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	223f      	movs	r2, #63	@ 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07e      	beq.n	8003934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
        }
        return;
 800383e:	e079      	b.n	8003934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01d      	beq.n	800388a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	2b00      	cmp	r3, #0
 8003862:	d031      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e02c      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000
 8003874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e01e      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0210 	bic.w	r2, r2, #16
 80038a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d032      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2205      	movs	r2, #5
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3301      	adds	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d307      	bcc.n	8003910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f2      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x2cc>
 800390e:	e000      	b.n	8003912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e000      	b.n	8003936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003934:	bf00      	nop
    }
  }
}
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800394a:	b2db      	uxtb	r3, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800398c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b40      	cmp	r3, #64	@ 0x40
 800399c:	d108      	bne.n	80039b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ae:	e007      	b.n	80039c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3b10      	subs	r3, #16
 80039dc:	4a13      	ldr	r2, [pc, #76]	@ (8003a2c <DMA_CalcBaseAndBitshift+0x60>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039e6:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <DMA_CalcBaseAndBitshift+0x64>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d908      	bls.n	8003a0c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <DMA_CalcBaseAndBitshift+0x68>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	1d1a      	adds	r2, r3, #4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a0a:	e006      	b.n	8003a1a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <DMA_CalcBaseAndBitshift+0x68>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	aaaaaaab 	.word	0xaaaaaaab
 8003a30:	080265d0 	.word	0x080265d0
 8003a34:	fffffc00 	.word	0xfffffc00

08003a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11f      	bne.n	8003a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d856      	bhi.n	8003b06 <DMA_CheckFifoParam+0xce>
 8003a58:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <DMA_CheckFifoParam+0x28>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a83 	.word	0x08003a83
 8003a68:	08003a71 	.word	0x08003a71
 8003a6c:	08003b07 	.word	0x08003b07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d046      	beq.n	8003b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e043      	b.n	8003b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a8a:	d140      	bne.n	8003b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a90:	e03d      	b.n	8003b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9a:	d121      	bne.n	8003ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d837      	bhi.n	8003b12 <DMA_CheckFifoParam+0xda>
 8003aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa8 <DMA_CheckFifoParam+0x70>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003abf 	.word	0x08003abf
 8003ab0:	08003ab9 	.word	0x08003ab9
 8003ab4:	08003ad1 	.word	0x08003ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e030      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d025      	beq.n	8003b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ace:	e022      	b.n	8003b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ad8:	d11f      	bne.n	8003b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ade:	e01c      	b.n	8003b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d903      	bls.n	8003aee <DMA_CheckFifoParam+0xb6>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d003      	beq.n	8003af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aec:	e018      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      break;
 8003af2:	e015      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e00b      	b.n	8003b1e <DMA_CheckFifoParam+0xe6>
      break;
 8003b06:	bf00      	nop
 8003b08:	e00a      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e008      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e006      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
 8003b14:	e004      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e086      	b.n	8003c50 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f008 fd3d 	bl	800c5d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c58 <HAL_ETH_Init+0x128>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c58 <HAL_ETH_Init+0x128>)
 8003b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b66:	4b3c      	ldr	r3, [pc, #240]	@ (8003c58 <HAL_ETH_Init+0x128>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b72:	4b3a      	ldr	r3, [pc, #232]	@ (8003c5c <HAL_ETH_Init+0x12c>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a39      	ldr	r2, [pc, #228]	@ (8003c5c <HAL_ETH_Init+0x12c>)
 8003b78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b7c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b7e:	4b37      	ldr	r3, [pc, #220]	@ (8003c5c <HAL_ETH_Init+0x12c>)
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4935      	ldr	r1, [pc, #212]	@ (8003c5c <HAL_ETH_Init+0x12c>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003b8c:	4b33      	ldr	r3, [pc, #204]	@ (8003c5c <HAL_ETH_Init+0x12c>)
 8003b8e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ba6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba8:	f7fe fbfc 	bl	80023a4 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bae:	e011      	b.n	8003bd4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003bb0:	f7fe fbf8 	bl	80023a4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003bbe:	d909      	bls.n	8003bd4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	22e0      	movs	r2, #224	@ 0xe0
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e03d      	b.n	8003c50 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e4      	bne.n	8003bb0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 ff5c 	bl	8004aa4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 f807 	bl	8004c00 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f001 f85d 	bl	8004cb2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2100      	movs	r1, #0
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 ffc5 	bl	8004b90 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003c14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b0f      	ldr	r3, [pc, #60]	@ (8003c60 <HAL_ETH_Init+0x130>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003c3a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40013800 	.word	0x40013800
 8003c60:	00020060 	.word	0x00020060

08003c64 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d15f      	bne.n	8003d36 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2204      	movs	r2, #4
 8003c88:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f9f6 	bl	800407c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f7fe fb8f 	bl	80023bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cbc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cd4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fd80 	bl	80047dc <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0208 	orr.w	r2, r2, #8
 8003cea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f7fe fb61 	bl	80023bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0204 	orr.w	r2, r2, #4
 8003d10:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d1a:	69d9      	ldr	r1, [r3, #28]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b07      	ldr	r3, [pc, #28]	@ (8003d40 <HAL_ETH_Start_IT+0xdc>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d28:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2240      	movs	r2, #64	@ 0x40
 8003d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e000      	b.n	8003d38 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0001a0c1 	.word	0x0001a0c1

08003d44 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d16e      	bne.n	8003e34 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b34      	ldr	r3, [pc, #208]	@ (8003e40 <HAL_ETH_Stop_IT+0xfc>)
 8003d6e:	400b      	ands	r3, r1
 8003d70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d74:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d8c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	f023 0302 	bic.w	r3, r3, #2
 8003da0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003da4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0204 	bic.w	r2, r2, #4
 8003db4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	f7fe fafc 	bl	80023bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fd05 	bl	80047dc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dea:	2001      	movs	r0, #1
 8003dec:	f7fe fae6 	bl	80023bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e00e      	b.n	8003e1c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	3212      	adds	r2, #18
 8003e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e08:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d9ed      	bls.n	8003dfe <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	fffe5f3e 	.word	0xfffe5f3e

08003e44 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e045      	b.n	8003ef4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e6e:	2b40      	cmp	r3, #64	@ 0x40
 8003e70:	d13f      	bne.n	8003ef2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 ff86 	bl	8004d90 <ETH_Prepare_Tx_Descriptors>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e02a      	b.n	8003ef4 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e9e:	f3bf 8f4f 	dsb	sy
}
 8003ea2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	629a      	str	r2, [r3, #40]	@ 0x28
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d904      	bls.n	8003ec0 <HAL_ETH_Transmit_IT+0x7c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	1f1a      	subs	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eda:	461a      	mov	r2, r3
 8003edc:	2304      	movs	r3, #4
 8003ede:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2300      	movs	r3, #0
 8003eec:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0a4      	b.n	8004072 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f2e:	2b40      	cmp	r3, #64	@ 0x40
 8003f30:	d001      	beq.n	8003f36 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e09d      	b.n	8004072 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	3212      	adds	r2, #18
 8003f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f46:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f4c:	f1c3 0304 	rsb	r3, r3, #4
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003f52:	e066      	b.n	8004022 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <HAL_ETH_ReadData+0x88>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d03c      	beq.n	8003ffe <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003fa6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f008 fccd 	bl	800c97c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d902      	bls.n	8004010 <HAL_ETH_ReadData+0x114>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3b04      	subs	r3, #4
 800400e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	3212      	adds	r2, #18
 8004016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3301      	adds	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004026:	2b00      	cmp	r3, #0
 8004028:	db06      	blt.n	8004038 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	429a      	cmp	r2, r3
 8004030:	d202      	bcs.n	8004038 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d08d      	beq.n	8003f54 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	441a      	add	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f815 	bl	800407c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d108      	bne.n	8004070 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004088:	2301      	movs	r3, #1
 800408a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004090:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	3212      	adds	r2, #18
 8004098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040a2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80040a4:	e042      	b.n	800412c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d112      	bne.n	80040d4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	4618      	mov	r0, r3
 80040b4:	f008 fc32 	bl	800c91c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	74fb      	strb	r3, [r7, #19]
 80040c2:	e007      	b.n	80040d4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	461a      	mov	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	461a      	mov	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d028      	beq.n	800412c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	4b26      	ldr	r3, [pc, #152]	@ (8004180 <ETH_UpdateDescriptor+0x104>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	6053      	str	r3, [r2, #4]
 80040ee:	e005      	b.n	80040fc <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3301      	adds	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b03      	cmp	r3, #3
 8004112:	d902      	bls.n	800411a <ETH_UpdateDescriptor+0x9e>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	3b04      	subs	r3, #4
 8004118:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69fa      	ldr	r2, [r7, #28]
 800411e:	3212      	adds	r2, #18
 8004120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004124:	617b      	str	r3, [r7, #20]
      desccount--;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	3b01      	subs	r3, #1
 800412a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <ETH_UpdateDescriptor+0xbc>
 8004132:	7cfb      	ldrb	r3, [r7, #19]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1b6      	bne.n	80040a6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	429a      	cmp	r2, r3
 8004140:	d01a      	beq.n	8004178 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3303      	adds	r3, #3
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800414c:	f3bf 8f5f 	dmb	sy
}
 8004150:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6919      	ldr	r1, [r3, #16]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	18ca      	adds	r2, r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800416a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004178:	bf00      	nop
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	80004000 	.word	0x80004000

08004184 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3318      	adds	r3, #24
 8004190:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80041a2:	e047      	b.n	8004234 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	3304      	adds	r3, #4
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	3301      	adds	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d902      	bls.n	80041d0 <HAL_ETH_ReleaseTxPacket+0x4c>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80041d4:	7bbb      	ldrb	r3, [r7, #14]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d02c      	beq.n	8004234 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68d9      	ldr	r1, [r3, #12]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	440b      	add	r3, r1
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db1f      	blt.n	8004230 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3304      	adds	r3, #4
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f008 fbff 	bl	800ca00 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	3304      	adds	r3, #4
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	2200      	movs	r2, #0
 800420e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3301      	adds	r3, #1
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d902      	bls.n	8004222 <HAL_ETH_ReleaseTxPacket+0x9e>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3b04      	subs	r3, #4
 8004220:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800422e:	e001      	b.n	8004234 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_ETH_ReleaseTxPacket+0xbc>
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1b1      	bne.n	80041a4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004274:	4b4b      	ldr	r3, [pc, #300]	@ (80043a4 <HAL_ETH_IRQHandler+0x158>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <HAL_ETH_IRQHandler+0x56>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004296:	461a      	mov	r2, r3
 8004298:	4b43      	ldr	r3, [pc, #268]	@ (80043a8 <HAL_ETH_IRQHandler+0x15c>)
 800429a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f007 fed9 	bl	800c054 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00f      	beq.n	80042cc <HAL_ETH_IRQHandler+0x80>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042be:	461a      	mov	r2, r3
 80042c0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80042c4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f007 fed4 	bl	800c074 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d042      	beq.n	800435c <HAL_ETH_IRQHandler+0x110>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d03d      	beq.n	800435c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e6:	f043 0208 	orr.w	r2, r3, #8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01a      	beq.n	8004330 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	4b29      	ldr	r3, [pc, #164]	@ (80043ac <HAL_ETH_IRQHandler+0x160>)
 8004306:	4013      	ands	r3, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004320:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004324:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	22e0      	movs	r2, #224	@ 0xe0
 800432a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800432e:	e012      	b.n	8004356 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800433e:	4013      	ands	r3, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434e:	461a      	mov	r2, r3
 8004350:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004354:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f007 fe9c 	bl	800c094 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00e      	beq.n	8004384 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f81a 	bl	80043b0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d006      	beq.n	800439c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800438e:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <HAL_ETH_IRQHandler+0x158>)
 8004390:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004394:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f814 	bl	80043c4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800439c:	bf00      	nop
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40013c00 	.word	0x40013c00
 80043a8:	00010040 	.word	0x00010040
 80043ac:	007e2000 	.word	0x007e2000

080043b0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 031c 	and.w	r3, r3, #28
 80043f4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	02db      	lsls	r3, r3, #11
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	019b      	lsls	r3, r3, #6
 8004406:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0302 	bic.w	r3, r3, #2
 8004416:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004428:	f7fd ffbc 	bl	80023a4 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800442e:	e00d      	b.n	800444c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004430:	f7fd ffb8 	bl	80023a4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800443e:	d301      	bcc.n	8004444 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e010      	b.n	8004466 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ec      	bne.n	8004430 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	b29b      	uxth	r3, r3
 800445e:	461a      	mov	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b086      	sub	sp, #24
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 031c 	and.w	r3, r3, #28
 800448a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	02db      	lsls	r3, r3, #11
 8004490:	b29b      	uxth	r3, r3
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	019b      	lsls	r3, r3, #6
 800449c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f043 0302 	orr.w	r3, r3, #2
 80044ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c8:	f7fd ff6c 	bl	80023a4 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044ce:	e00d      	b.n	80044ec <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80044d0:	f7fd ff68 	bl	80023a4 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044de:	d301      	bcc.n	80044e4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e009      	b.n	80044f8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ec      	bne.n	80044d0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e0e6      	b.n	80046e2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004602:	2b00      	cmp	r3, #0
 8004604:	bf14      	ite	ne
 8004606:	2301      	movne	r3, #1
 8004608:	2300      	moveq	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf14      	ite	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	2300      	moveq	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e00b      	b.n	800471a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004708:	2b10      	cmp	r3, #16
 800470a:	d105      	bne.n	8004718 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f88a 	bl	8004828 <ETH_SetMACConfig>

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 031c 	bic.w	r3, r3, #28
 800473a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800473c:	f003 fd04 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8004740:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a14      	ldr	r2, [pc, #80]	@ (8004798 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d804      	bhi.n	8004754 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f043 0308 	orr.w	r3, r3, #8
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e019      	b.n	8004788 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a11      	ldr	r2, [pc, #68]	@ (800479c <HAL_ETH_SetMDIOClockRange+0x78>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d204      	bcs.n	8004766 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f043 030c 	orr.w	r3, r3, #12
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e010      	b.n	8004788 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a0d      	ldr	r2, [pc, #52]	@ (80047a0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d90c      	bls.n	8004788 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d804      	bhi.n	8004780 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f043 0304 	orr.w	r3, r3, #4
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e003      	b.n	8004788 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f043 0310 	orr.w	r3, r3, #16
 8004786:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	611a      	str	r2, [r3, #16]
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	02160ebf 	.word	0x02160ebf
 800479c:	03938700 	.word	0x03938700
 80047a0:	05f5e0ff 	.word	0x05f5e0ff
 80047a4:	08f0d17f 	.word	0x08f0d17f

080047a8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047fe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800480c:	2001      	movs	r0, #1
 800480e:	f7fd fdd5 	bl	80023bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800481c:	6193      	str	r3, [r2, #24]
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4b53      	ldr	r3, [pc, #332]	@ (800498c <ETH_SetMACConfig+0x164>)
 800483e:	4013      	ands	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	7b9b      	ldrb	r3, [r3, #14]
 8004846:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	7c12      	ldrb	r2, [r2, #16]
 800484c:	2a00      	cmp	r2, #0
 800484e:	d102      	bne.n	8004856 <ETH_SetMACConfig+0x2e>
 8004850:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004854:	e000      	b.n	8004858 <ETH_SetMACConfig+0x30>
 8004856:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004858:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	7c52      	ldrb	r2, [r2, #17]
 800485e:	2a00      	cmp	r2, #0
 8004860:	d102      	bne.n	8004868 <ETH_SetMACConfig+0x40>
 8004862:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004866:	e000      	b.n	800486a <ETH_SetMACConfig+0x42>
 8004868:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800486a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004870:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	7fdb      	ldrb	r3, [r3, #31]
 8004876:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004878:	431a      	orrs	r2, r3
                        macconf->Speed |
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800487e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	7f92      	ldrb	r2, [r2, #30]
 8004884:	2a00      	cmp	r2, #0
 8004886:	d102      	bne.n	800488e <ETH_SetMACConfig+0x66>
 8004888:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800488c:	e000      	b.n	8004890 <ETH_SetMACConfig+0x68>
 800488e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004890:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	7f1b      	ldrb	r3, [r3, #28]
 8004896:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004898:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800489e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	791b      	ldrb	r3, [r3, #4]
 80048a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80048a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	d102      	bne.n	80048b8 <ETH_SetMACConfig+0x90>
 80048b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048b6:	e000      	b.n	80048ba <ETH_SetMACConfig+0x92>
 80048b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80048ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	7bdb      	ldrb	r3, [r3, #15]
 80048c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80048c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80048c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048d2:	4313      	orrs	r3, r2
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048ea:	2001      	movs	r0, #1
 80048ec:	f7fd fd66 	bl	80023bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004906:	4013      	ands	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004916:	2a00      	cmp	r2, #0
 8004918:	d101      	bne.n	800491e <ETH_SetMACConfig+0xf6>
 800491a:	2280      	movs	r2, #128	@ 0x80
 800491c:	e000      	b.n	8004920 <ETH_SetMACConfig+0xf8>
 800491e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004920:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004926:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800492e:	2a01      	cmp	r2, #1
 8004930:	d101      	bne.n	8004936 <ETH_SetMACConfig+0x10e>
 8004932:	2208      	movs	r2, #8
 8004934:	e000      	b.n	8004938 <ETH_SetMACConfig+0x110>
 8004936:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004938:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004940:	2a01      	cmp	r2, #1
 8004942:	d101      	bne.n	8004948 <ETH_SetMACConfig+0x120>
 8004944:	2204      	movs	r2, #4
 8004946:	e000      	b.n	800494a <ETH_SetMACConfig+0x122>
 8004948:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800494a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004952:	2a01      	cmp	r2, #1
 8004954:	d101      	bne.n	800495a <ETH_SetMACConfig+0x132>
 8004956:	2202      	movs	r2, #2
 8004958:	e000      	b.n	800495c <ETH_SetMACConfig+0x134>
 800495a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800495c:	4313      	orrs	r3, r2
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004974:	2001      	movs	r0, #1
 8004976:	f7fd fd21 	bl	80023bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	619a      	str	r2, [r3, #24]
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	fd20810f 	.word	0xfd20810f

08004990 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa0 <ETH_SetDMAConfig+0x110>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	7b1b      	ldrb	r3, [r3, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <ETH_SetDMAConfig+0x2c>
 80049b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80049ba:	e000      	b.n	80049be <ETH_SetDMAConfig+0x2e>
 80049bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	7b5b      	ldrb	r3, [r3, #13]
 80049c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80049c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	7f52      	ldrb	r2, [r2, #29]
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	d102      	bne.n	80049d4 <ETH_SetDMAConfig+0x44>
 80049ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80049d2:	e000      	b.n	80049d6 <ETH_SetDMAConfig+0x46>
 80049d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80049d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	7b9b      	ldrb	r3, [r3, #14]
 80049dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80049de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80049e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	7f1b      	ldrb	r3, [r3, #28]
 80049ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80049ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	7f9b      	ldrb	r3, [r3, #30]
 80049f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80049f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80049fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a02:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a04:	4313      	orrs	r3, r2
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a14:	461a      	mov	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a26:	2001      	movs	r0, #1
 8004a28:	f7fd fcc8 	bl	80023bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a34:	461a      	mov	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	791b      	ldrb	r3, [r3, #4]
 8004a3e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a44:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004a4a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004a50:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a58:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004a5a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004a62:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004a68:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a76:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a84:	2001      	movs	r0, #1
 8004a86:	f7fd fc99 	bl	80023bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6013      	str	r3, [r2, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	f8de3f23 	.word	0xf8de3f23

08004aa4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b0a6      	sub	sp, #152	@ 0x98
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b10:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fe7f 	bl	8004828 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004b32:	2301      	movs	r3, #1
 8004b34:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004b56:	2301      	movs	r3, #1
 8004b58:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004b5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004b60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b64:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b6a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004b7a:	f107 0308 	add.w	r3, r7, #8
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff05 	bl	8004990 <ETH_SetDMAConfig>
}
 8004b86:	bf00      	nop
 8004b88:	3798      	adds	r7, #152	@ 0x98
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3305      	adds	r3, #5
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	3204      	adds	r2, #4
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	4b11      	ldr	r3, [pc, #68]	@ (8004bf8 <ETH_MACAddressConfig+0x68>)
 8004bb2:	4413      	add	r3, r2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3303      	adds	r3, #3
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	061a      	lsls	r2, r3, #24
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4b06      	ldr	r3, [pc, #24]	@ (8004bfc <ETH_MACAddressConfig+0x6c>)
 8004be2:	4413      	add	r3, r2
 8004be4:	461a      	mov	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	6013      	str	r3, [r2, #0]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40028040 	.word	0x40028040
 8004bfc:	40028044 	.word	0x40028044

08004c00 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e03e      	b.n	8004c8c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68d9      	ldr	r1, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	440b      	add	r3, r1
 8004c1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	3206      	adds	r2, #6
 8004c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d80c      	bhi.n	8004c70 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68d9      	ldr	r1, [r3, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	440b      	add	r3, r1
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e004      	b.n	8004c7a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	461a      	mov	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d9bd      	bls.n	8004c0e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ca4:	611a      	str	r2, [r3, #16]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e048      	b.n	8004d52 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6919      	ldr	r1, [r3, #16]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	440b      	add	r3, r1
 8004cd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2200      	movs	r2, #0
 8004cee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004cfc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	3212      	adds	r2, #18
 8004d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d80c      	bhi.n	8004d42 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6919      	ldr	r1, [r3, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	440b      	add	r3, r1
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	60da      	str	r2, [r3, #12]
 8004d40:	e004      	b.n	8004d4c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d9b3      	bls.n	8004cc0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d82:	60da      	str	r2, [r3, #12]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b091      	sub	sp, #68	@ 0x44
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3318      	adds	r3, #24
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dba:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd2:	d007      	beq.n	8004de4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd8:	3304      	adds	r3, #4
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004de4:	2302      	movs	r3, #2
 8004de6:	e111      	b.n	800500c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dea:	3301      	adds	r3, #1
 8004dec:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	4b86      	ldr	r3, [pc, #536]	@ (8005018 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e02:	6852      	ldr	r2, [r2, #4]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e26:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004e6a:	e082      	b.n	8004f72 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	e005      	b.n	8004e98 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d902      	bls.n	8004eaa <ETH_Prepare_Tx_Descriptors+0x11a>
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea6:	3b04      	subs	r3, #4
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ec0:	d007      	beq.n	8004ed2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d029      	beq.n	8004f26 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ede:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ee4:	e019      	b.n	8004f1a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004ee6:	f3bf 8f5f 	dmb	sy
}
 8004eea:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004efa:	3301      	adds	r3, #1
 8004efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d902      	bls.n	8004f0a <ETH_Prepare_Tx_Descriptors+0x17a>
 8004f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f06:	3b04      	subs	r3, #4
 8004f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f12:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	3301      	adds	r3, #1
 8004f18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d3e1      	bcc.n	8004ee6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004f22:	2302      	movs	r3, #2
 8004f24:	e072      	b.n	800500c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f34:	3301      	adds	r3, #1
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4b32      	ldr	r3, [pc, #200]	@ (8005018 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f52:	6852      	ldr	r2, [r2, #4]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004f60:	f3bf 8f5f 	dmb	sy
}
 8004f64:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f47f af78 	bne.w	8004e6c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e005      	b.n	8004f9c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004faa:	6a3a      	ldr	r2, [r7, #32]
 8004fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004fb2:	f3bf 8f5f 	dmb	sy
}
 8004fb6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fcc:	3304      	adds	r3, #4
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fd8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fda:	f3ef 8310 	mrs	r3, PRIMASK
 8004fde:	613b      	str	r3, [r7, #16]
  return(result);
 8004fe0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f383 8810 	msr	PRIMASK, r3
}
 8004fee:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	4413      	add	r3, r2
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f383 8810 	msr	PRIMASK, r3
}
 8005008:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3744      	adds	r7, #68	@ 0x44
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	ffffe000 	.word	0xffffe000

0800501c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	@ 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	e175      	b.n	8005328 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800503c:	2201      	movs	r2, #1
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4013      	ands	r3, r2
 800504e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	429a      	cmp	r2, r3
 8005056:	f040 8164 	bne.w	8005322 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b01      	cmp	r3, #1
 8005064:	d005      	beq.n	8005072 <HAL_GPIO_Init+0x56>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d130      	bne.n	80050d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2203      	movs	r2, #3
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4013      	ands	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050a8:	2201      	movs	r2, #1
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 0201 	and.w	r2, r3, #1
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d017      	beq.n	8005110 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	2203      	movs	r2, #3
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4313      	orrs	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d123      	bne.n	8005164 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	08da      	lsrs	r2, r3, #3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3208      	adds	r2, #8
 8005124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	220f      	movs	r2, #15
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	08da      	lsrs	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3208      	adds	r2, #8
 800515e:	69b9      	ldr	r1, [r7, #24]
 8005160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	2203      	movs	r2, #3
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f003 0203 	and.w	r2, r3, #3
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 80be 	beq.w	8005322 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a6:	4b66      	ldr	r3, [pc, #408]	@ (8005340 <HAL_GPIO_Init+0x324>)
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	4a65      	ldr	r2, [pc, #404]	@ (8005340 <HAL_GPIO_Init+0x324>)
 80051ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80051b2:	4b63      	ldr	r3, [pc, #396]	@ (8005340 <HAL_GPIO_Init+0x324>)
 80051b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80051be:	4a61      	ldr	r2, [pc, #388]	@ (8005344 <HAL_GPIO_Init+0x328>)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	3302      	adds	r3, #2
 80051c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	220f      	movs	r2, #15
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a58      	ldr	r2, [pc, #352]	@ (8005348 <HAL_GPIO_Init+0x32c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d037      	beq.n	800525a <HAL_GPIO_Init+0x23e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a57      	ldr	r2, [pc, #348]	@ (800534c <HAL_GPIO_Init+0x330>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_GPIO_Init+0x23a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a56      	ldr	r2, [pc, #344]	@ (8005350 <HAL_GPIO_Init+0x334>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02b      	beq.n	8005252 <HAL_GPIO_Init+0x236>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a55      	ldr	r2, [pc, #340]	@ (8005354 <HAL_GPIO_Init+0x338>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d025      	beq.n	800524e <HAL_GPIO_Init+0x232>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a54      	ldr	r2, [pc, #336]	@ (8005358 <HAL_GPIO_Init+0x33c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01f      	beq.n	800524a <HAL_GPIO_Init+0x22e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a53      	ldr	r2, [pc, #332]	@ (800535c <HAL_GPIO_Init+0x340>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d019      	beq.n	8005246 <HAL_GPIO_Init+0x22a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a52      	ldr	r2, [pc, #328]	@ (8005360 <HAL_GPIO_Init+0x344>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_GPIO_Init+0x226>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a51      	ldr	r2, [pc, #324]	@ (8005364 <HAL_GPIO_Init+0x348>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00d      	beq.n	800523e <HAL_GPIO_Init+0x222>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a50      	ldr	r2, [pc, #320]	@ (8005368 <HAL_GPIO_Init+0x34c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <HAL_GPIO_Init+0x21e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a4f      	ldr	r2, [pc, #316]	@ (800536c <HAL_GPIO_Init+0x350>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_GPIO_Init+0x21a>
 8005232:	2309      	movs	r3, #9
 8005234:	e012      	b.n	800525c <HAL_GPIO_Init+0x240>
 8005236:	230a      	movs	r3, #10
 8005238:	e010      	b.n	800525c <HAL_GPIO_Init+0x240>
 800523a:	2308      	movs	r3, #8
 800523c:	e00e      	b.n	800525c <HAL_GPIO_Init+0x240>
 800523e:	2307      	movs	r3, #7
 8005240:	e00c      	b.n	800525c <HAL_GPIO_Init+0x240>
 8005242:	2306      	movs	r3, #6
 8005244:	e00a      	b.n	800525c <HAL_GPIO_Init+0x240>
 8005246:	2305      	movs	r3, #5
 8005248:	e008      	b.n	800525c <HAL_GPIO_Init+0x240>
 800524a:	2304      	movs	r3, #4
 800524c:	e006      	b.n	800525c <HAL_GPIO_Init+0x240>
 800524e:	2303      	movs	r3, #3
 8005250:	e004      	b.n	800525c <HAL_GPIO_Init+0x240>
 8005252:	2302      	movs	r3, #2
 8005254:	e002      	b.n	800525c <HAL_GPIO_Init+0x240>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_GPIO_Init+0x240>
 800525a:	2300      	movs	r3, #0
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	f002 0203 	and.w	r2, r2, #3
 8005262:	0092      	lsls	r2, r2, #2
 8005264:	4093      	lsls	r3, r2
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800526c:	4935      	ldr	r1, [pc, #212]	@ (8005344 <HAL_GPIO_Init+0x328>)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	3302      	adds	r3, #2
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800527a:	4b3d      	ldr	r3, [pc, #244]	@ (8005370 <HAL_GPIO_Init+0x354>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800529e:	4a34      	ldr	r2, [pc, #208]	@ (8005370 <HAL_GPIO_Init+0x354>)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052a4:	4b32      	ldr	r3, [pc, #200]	@ (8005370 <HAL_GPIO_Init+0x354>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052c8:	4a29      	ldr	r2, [pc, #164]	@ (8005370 <HAL_GPIO_Init+0x354>)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052ce:	4b28      	ldr	r3, [pc, #160]	@ (8005370 <HAL_GPIO_Init+0x354>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005370 <HAL_GPIO_Init+0x354>)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005370 <HAL_GPIO_Init+0x354>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800531c:	4a14      	ldr	r2, [pc, #80]	@ (8005370 <HAL_GPIO_Init+0x354>)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3301      	adds	r3, #1
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b0f      	cmp	r3, #15
 800532c:	f67f ae86 	bls.w	800503c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	3724      	adds	r7, #36	@ 0x24
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	40013800 	.word	0x40013800
 8005348:	40020000 	.word	0x40020000
 800534c:	40020400 	.word	0x40020400
 8005350:	40020800 	.word	0x40020800
 8005354:	40020c00 	.word	0x40020c00
 8005358:	40021000 	.word	0x40021000
 800535c:	40021400 	.word	0x40021400
 8005360:	40021800 	.word	0x40021800
 8005364:	40021c00 	.word	0x40021c00
 8005368:	40022000 	.word	0x40022000
 800536c:	40022400 	.word	0x40022400
 8005370:	40013c00 	.word	0x40013c00

08005374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e08b      	b.n	800549e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fb fcea 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	@ 0x24
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d107      	bne.n	80053ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	e006      	b.n	80053fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d108      	bne.n	8005416 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	e007      	b.n	8005426 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <HAL_I2C_Init+0x134>)
 8005432:	430b      	orrs	r3, r1
 8005434:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005444:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69d9      	ldr	r1, [r3, #28]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1a      	ldr	r2, [r3, #32]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	02008000 	.word	0x02008000

080054ac <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	@ 0x28
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	607a      	str	r2, [r7, #4]
 80054b6:	461a      	mov	r2, r3
 80054b8:	460b      	mov	r3, r1
 80054ba:	817b      	strh	r3, [r7, #10]
 80054bc:	4613      	mov	r3, r2
 80054be:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	f040 80ef 	bne.w	80056b0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e0:	d101      	bne.n	80054e6 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80054e2:	2302      	movs	r3, #2
 80054e4:	e0e5      	b.n	80056b2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_I2C_Master_Transmit_DMA+0x48>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e0de      	b.n	80056b2 <HAL_I2C_Master_Transmit_DMA+0x206>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2221      	movs	r2, #33	@ 0x21
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2210      	movs	r2, #16
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	893a      	ldrh	r2, [r7, #8]
 800551c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4a66      	ldr	r2, [pc, #408]	@ (80056bc <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005522:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a66      	ldr	r2, [pc, #408]	@ (80056c0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8005528:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552e:	b29b      	uxth	r3, r3
 8005530:	2bff      	cmp	r3, #255	@ 0xff
 8005532:	d906      	bls.n	8005542 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	22ff      	movs	r2, #255	@ 0xff
 8005538:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800553a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	e007      	b.n	8005552 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800554c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005550:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01a      	beq.n	8005590 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005574:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005594:	2b00      	cmp	r3, #0
 8005596:	d074      	beq.n	8005682 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	d022      	beq.n	80055e6 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	4a47      	ldr	r2, [pc, #284]	@ (80056c4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80055a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	4a46      	ldr	r2, [pc, #280]	@ (80056c8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80055ae:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055bc:	2200      	movs	r2, #0
 80055be:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80055d0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80055d6:	f7fd ff35 	bl	8003444 <HAL_DMA_Start_IT>
 80055da:	4603      	mov	r3, r0
 80055dc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d13a      	bne.n	800565a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80055e4:	e013      	b.n	800560e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e051      	b.n	80056b2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3301      	adds	r3, #1
 8005616:	b2da      	uxtb	r2, r3
 8005618:	8979      	ldrh	r1, [r7, #10]
 800561a:	4b2c      	ldr	r3, [pc, #176]	@ (80056cc <HAL_I2C_Master_Transmit_DMA+0x220>)
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f001 ff3f 	bl	80074a4 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005640:	2110      	movs	r1, #16
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f001 ff60 	bl	8007508 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e028      	b.n	80056ac <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566e:	f043 0210 	orr.w	r2, r3, #16
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e017      	b.n	80056b2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a12      	ldr	r2, [pc, #72]	@ (80056d0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005686:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	b2da      	uxtb	r2, r3
 800568c:	8979      	ldrh	r1, [r7, #10]
 800568e:	4b0f      	ldr	r3, [pc, #60]	@ (80056cc <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f001 ff04 	bl	80074a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056a4:	2101      	movs	r1, #1
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f001 ff2e 	bl	8007508 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e000      	b.n	80056b2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80056b0:	2302      	movs	r3, #2
  }
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	ffff0000 	.word	0xffff0000
 80056c0:	080061fb 	.word	0x080061fb
 80056c4:	08007227 	.word	0x08007227
 80056c8:	080073f5 	.word	0x080073f5
 80056cc:	80002000 	.word	0x80002000
 80056d0:	08005d6f 	.word	0x08005d6f

080056d4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	461a      	mov	r2, r3
 80056e0:	460b      	mov	r3, r1
 80056e2:	817b      	strh	r3, [r7, #10]
 80056e4:	4613      	mov	r3, r2
 80056e6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	f040 80cd 	bne.w	8005890 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005704:	d101      	bne.n	800570a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
 8005708:	e0c3      	b.n	8005892 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_I2C_Master_Receive_DMA+0x44>
 8005714:	2302      	movs	r3, #2
 8005716:	e0bc      	b.n	8005892 <HAL_I2C_Master_Receive_DMA+0x1be>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2222      	movs	r2, #34	@ 0x22
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2210      	movs	r2, #16
 800572c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	893a      	ldrh	r2, [r7, #8]
 8005740:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a55      	ldr	r2, [pc, #340]	@ (800589c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005746:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4a55      	ldr	r2, [pc, #340]	@ (80058a0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800574c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	2bff      	cmp	r3, #255	@ 0xff
 8005756:	d906      	bls.n	8005766 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800575e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e007      	b.n	8005776 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005774:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d070      	beq.n	8005860 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d020      	beq.n	80057c8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578a:	4a46      	ldr	r2, [pc, #280]	@ (80058a4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800578c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005792:	4a45      	ldr	r2, [pc, #276]	@ (80058a8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005794:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579a:	2200      	movs	r2, #0
 800579c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	2200      	movs	r2, #0
 80057a4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3324      	adds	r3, #36	@ 0x24
 80057b0:	4619      	mov	r1, r3
 80057b2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80057b8:	f7fd fe44 	bl	8003444 <HAL_DMA_Start_IT>
 80057bc:	4603      	mov	r3, r0
 80057be:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d138      	bne.n	8005838 <HAL_I2C_Master_Receive_DMA+0x164>
 80057c6:	e013      	b.n	80057f0 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e050      	b.n	8005892 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	8979      	ldrh	r1, [r7, #10]
 80057f8:	4b2c      	ldr	r3, [pc, #176]	@ (80058ac <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f001 fe50 	bl	80074a4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800581e:	2110      	movs	r1, #16
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f001 fe71 	bl	8007508 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e029      	b.n	800588c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800584c:	f043 0210 	orr.w	r2, r3, #16
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e018      	b.n	8005892 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a13      	ldr	r2, [pc, #76]	@ (80058b0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005864:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586a:	b2da      	uxtb	r2, r3
 800586c:	8979      	ldrh	r1, [r7, #10]
 800586e:	4b0f      	ldr	r3, [pc, #60]	@ (80058ac <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f001 fe14 	bl	80074a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005884:	2102      	movs	r1, #2
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f001 fe3e 	bl	8007508 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	ffff0000 	.word	0xffff0000
 80058a0:	080061fb 	.word	0x080061fb
 80058a4:	080072fd 	.word	0x080072fd
 80058a8:	080073f5 	.word	0x080073f5
 80058ac:	80002400 	.word	0x80002400
 80058b0:	08005d6f 	.word	0x08005d6f

080058b4 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	f040 80d1 	bne.w	8005a72 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_I2C_Slave_Transmit_DMA+0x28>
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d105      	bne.n	80058e8 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0c5      	b.n	8005a74 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_I2C_Slave_Transmit_DMA+0x42>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e0be      	b.n	8005a74 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2221      	movs	r2, #33	@ 0x21
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	88fa      	ldrh	r2, [r7, #6]
 800591e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a53      	ldr	r2, [pc, #332]	@ (8005a7c <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 800592e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a53      	ldr	r2, [pc, #332]	@ (8005a80 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 8005934:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593e:	d117      	bne.n	8005970 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	781a      	ldrb	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d068      	beq.n	8005a4c <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	2b00      	cmp	r3, #0
 8005980:	d022      	beq.n	80059c8 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	4a3f      	ldr	r2, [pc, #252]	@ (8005a84 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005988:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a88 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005990:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	2200      	movs	r2, #0
 8005998:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599e:	2200      	movs	r2, #0
 80059a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80059aa:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80059b2:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80059b8:	f7fd fd44 	bl	8003444 <HAL_DMA_Start_IT>
 80059bc:	4603      	mov	r3, r0
 80059be:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d12e      	bne.n	8005a24 <HAL_I2C_Slave_Transmit_DMA+0x170>
 80059c6:	e013      	b.n	80059f0 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2228      	movs	r2, #40	@ 0x28
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e041      	b.n	8005a74 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059fe:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f001 fd7b 	bl	8007508 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	e024      	b.n	8005a6e <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2228      	movs	r2, #40	@ 0x28
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a38:	f043 0210 	orr.w	r2, r3, #16
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e013      	b.n	8005a74 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a5a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f001 fd4d 	bl	8007508 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	ffff0000 	.word	0xffff0000
 8005a80:	0800669d 	.word	0x0800669d
 8005a84:	080072bd 	.word	0x080072bd
 8005a88:	080073f5 	.word	0x080073f5

08005a8c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	f040 809b 	bne.w	8005bde <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e08f      	b.n	8005be0 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_I2C_Slave_Receive_DMA+0x42>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e088      	b.n	8005be0 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2222      	movs	r2, #34	@ 0x22
 8005ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	88fa      	ldrh	r2, [r7, #6]
 8005af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a38      	ldr	r2, [pc, #224]	@ (8005be8 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005b06:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a38      	ldr	r2, [pc, #224]	@ (8005bec <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d020      	beq.n	8005b58 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1a:	4a35      	ldr	r2, [pc, #212]	@ (8005bf0 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b22:	4a34      	ldr	r2, [pc, #208]	@ (8005bf4 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005b24:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	2200      	movs	r2, #0
 8005b34:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3324      	adds	r3, #36	@ 0x24
 8005b40:	4619      	mov	r1, r3
 8005b42:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b48:	f7fd fc7c 	bl	8003444 <HAL_DMA_Start_IT>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d12f      	bne.n	8005bb6 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005b56:	e013      	b.n	8005b80 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2228      	movs	r2, #40	@ 0x28
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e02f      	b.n	8005be0 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b8e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f001 fcb3 	bl	8007508 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bb0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e014      	b.n	8005be0 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2228      	movs	r2, #40	@ 0x28
 8005bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bca:	f043 0210 	orr.w	r2, r3, #16
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	ffff0000 	.word	0xffff0000
 8005bec:	0800669d 	.word	0x0800669d
 8005bf0:	080073af 	.word	0x080073af
 8005bf4:	080073f5 	.word	0x080073f5

08005bf8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	68f9      	ldr	r1, [r7, #12]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
  }
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	0a1b      	lsrs	r3, r3, #8
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d010      	beq.n	8005c72 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	09db      	lsrs	r3, r3, #7
 8005c54:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	0a9b      	lsrs	r3, r3, #10
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d010      	beq.n	8005ca0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	09db      	lsrs	r3, r3, #7
 8005c82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8e:	f043 0208 	orr.w	r2, r3, #8
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	0a5b      	lsrs	r3, r3, #9
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d010      	beq.n	8005cce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbc:	f043 0202 	orr.w	r2, r3, #2
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ccc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 030b 	and.w	r3, r3, #11
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f965 	bl	8006fb0 <I2C_ITError>
  }
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	70fb      	strb	r3, [r7, #3]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b088      	sub	sp, #32
 8005d72:	af02      	add	r7, sp, #8
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <I2C_Master_ISR_IT+0x1e>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e12e      	b.n	8005fea <I2C_Master_ISR_IT+0x27c>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d013      	beq.n	8005dc8 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	091b      	lsrs	r3, r3, #4
 8005da4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db8:	f043 0204 	orr.w	r2, r3, #4
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f001 fa0c 	bl	80071de <I2C_Flush_TXDR>
 8005dc6:	e0fb      	b.n	8005fc0 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	089b      	lsrs	r3, r3, #2
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d023      	beq.n	8005e1c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	089b      	lsrs	r3, r3, #2
 8005dd8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01d      	beq.n	8005e1c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0304 	bic.w	r3, r3, #4
 8005de6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e1a:	e0d1      	b.n	8005fc0 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	099b      	lsrs	r3, r3, #6
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d12a      	bne.n	8005e7e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	085b      	lsrs	r3, r3, #1
 8005e2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d024      	beq.n	8005e7e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 80ba 	beq.w	8005fc0 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005e7c:	e0a0      	b.n	8005fc0 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	09db      	lsrs	r3, r3, #7
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d06b      	beq.n	8005f62 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	099b      	lsrs	r3, r3, #6
 8005e8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d065      	beq.n	8005f62 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d04e      	beq.n	8005f3e <I2C_Master_ISR_IT+0x1d0>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d14a      	bne.n	8005f3e <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2bff      	cmp	r3, #255	@ 0xff
 8005ebe:	d91c      	bls.n	8005efa <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d103      	bne.n	8005edc <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005eda:	e002      	b.n	8005ee2 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	22ff      	movs	r2, #255	@ 0xff
 8005ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	8a79      	ldrh	r1, [r7, #18]
 8005eea:	2300      	movs	r3, #0
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f001 fad6 	bl	80074a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef8:	e032      	b.n	8005f60 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f0c:	d00b      	beq.n	8005f26 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f12:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f18:	8a79      	ldrh	r1, [r7, #18]
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	9000      	str	r0, [sp, #0]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f001 fac0 	bl	80074a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f24:	e01c      	b.n	8005f60 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	8a79      	ldrh	r1, [r7, #18]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f001 fab4 	bl	80074a4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f3c:	e010      	b.n	8005f60 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f4c:	d003      	beq.n	8005f56 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fd09 	bl	8006966 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f54:	e034      	b.n	8005fc0 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f56:	2140      	movs	r1, #64	@ 0x40
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 f829 	bl	8006fb0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f5e:	e02f      	b.n	8005fc0 <I2C_Master_ISR_IT+0x252>
 8005f60:	e02e      	b.n	8005fc0 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	099b      	lsrs	r3, r3, #6
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d028      	beq.n	8005fc0 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	099b      	lsrs	r3, r3, #6
 8005f72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d022      	beq.n	8005fc0 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d119      	bne.n	8005fb8 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f92:	d015      	beq.n	8005fc0 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f9c:	d108      	bne.n	8005fb0 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	e007      	b.n	8005fc0 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fcd8 	bl	8006966 <I2C_ITMasterSeqCplt>
 8005fb6:	e003      	b.n	8005fc0 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fb8:	2140      	movs	r1, #64	@ 0x40
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fff8 	bl	8006fb0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005fd8:	6979      	ldr	r1, [r7, #20]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fd5e 	bl	8006a9c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <I2C_Slave_ISR_IT+0x24>
 8006012:	2302      	movs	r3, #2
 8006014:	e0ed      	b.n	80061f2 <I2C_Slave_ISR_IT+0x200>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006032:	2b00      	cmp	r3, #0
 8006034:	d004      	beq.n	8006040 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006036:	6939      	ldr	r1, [r7, #16]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fdf9 	bl	8006c30 <I2C_ITSlaveCplt>
 800603e:	e0d3      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d04d      	beq.n	80060e8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006054:	2b00      	cmp	r3, #0
 8006056:	d047      	beq.n	80060e8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d128      	bne.n	80060b4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b28      	cmp	r3, #40	@ 0x28
 800606c:	d108      	bne.n	8006080 <I2C_Slave_ISR_IT+0x8e>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006074:	d104      	bne.n	8006080 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006076:	6939      	ldr	r1, [r7, #16]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 ff43 	bl	8006f04 <I2C_ITListenCplt>
 800607e:	e032      	b.n	80060e6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b29      	cmp	r3, #41	@ 0x29
 800608a:	d10e      	bne.n	80060aa <I2C_Slave_ISR_IT+0xb8>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006092:	d00a      	beq.n	80060aa <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2210      	movs	r2, #16
 800609a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f001 f89e 	bl	80071de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 fc9c 	bl	80069e0 <I2C_ITSlaveSeqCplt>
 80060a8:	e01d      	b.n	80060e6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2210      	movs	r2, #16
 80060b0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80060b2:	e096      	b.n	80061e2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2210      	movs	r2, #16
 80060ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c0:	f043 0204 	orr.w	r2, r3, #4
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <I2C_Slave_ISR_IT+0xe6>
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060d4:	f040 8085 	bne.w	80061e2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060dc:	4619      	mov	r1, r3
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 ff66 	bl	8006fb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80060e4:	e07d      	b.n	80061e2 <I2C_Slave_ISR_IT+0x1f0>
 80060e6:	e07c      	b.n	80061e2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	089b      	lsrs	r3, r3, #2
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d030      	beq.n	8006156 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02a      	beq.n	8006156 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d018      	beq.n	800613c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d14f      	bne.n	80061e6 <I2C_Slave_ISR_IT+0x1f4>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800614c:	d04b      	beq.n	80061e6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fc46 	bl	80069e0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006154:	e047      	b.n	80061e6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	08db      	lsrs	r3, r3, #3
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	08db      	lsrs	r3, r3, #3
 8006166:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800616e:	6939      	ldr	r1, [r7, #16]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fb74 	bl	800685e <I2C_ITAddrCplt>
 8006176:	e037      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d031      	beq.n	80061e8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800618c:	2b00      	cmp	r3, #0
 800618e:	d02b      	beq.n	80061e8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80061ca:	e00d      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061d2:	d002      	beq.n	80061da <I2C_Slave_ISR_IT+0x1e8>
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fc00 	bl	80069e0 <I2C_ITSlaveSeqCplt>
 80061e0:	e002      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80061e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b088      	sub	sp, #32
 80061fe:	af02      	add	r7, sp, #8
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <I2C_Master_ISR_DMA+0x1a>
 8006210:	2302      	movs	r3, #2
 8006212:	e0f0      	b.n	80063f6 <I2C_Master_ISR_DMA+0x1fc>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	091b      	lsrs	r3, r3, #4
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d017      	beq.n	8006258 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006230:	2b00      	cmp	r3, #0
 8006232:	d011      	beq.n	8006258 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2210      	movs	r2, #16
 800623a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006240:	f043 0204 	orr.w	r2, r3, #4
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006248:	2120      	movs	r1, #32
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f001 f95c 	bl	8007508 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 ffc4 	bl	80071de <I2C_Flush_TXDR>
 8006256:	e0c9      	b.n	80063ec <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	09db      	lsrs	r3, r3, #7
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8081 	beq.w	8006368 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	099b      	lsrs	r3, r3, #6
 800626a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800626e:	2b00      	cmp	r3, #0
 8006270:	d07a      	beq.n	8006368 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006280:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d05c      	beq.n	8006346 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006298:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2bff      	cmp	r3, #255	@ 0xff
 80062a2:	d914      	bls.n	80062ce <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d103      	bne.n	80062c0 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80062be:	e002      	b.n	80062c6 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	22ff      	movs	r2, #255	@ 0xff
 80062c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80062c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	e010      	b.n	80062f0 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062e0:	d003      	beq.n	80062ea <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e002      	b.n	80062f0 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80062ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062ee:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	8a79      	ldrh	r1, [r7, #18]
 80062f8:	2300      	movs	r3, #0
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f001 f8d0 	bl	80074a4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b22      	cmp	r3, #34	@ 0x22
 8006320:	d108      	bne.n	8006334 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006330:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006332:	e05b      	b.n	80063ec <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006342:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006344:	e052      	b.n	80063ec <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006350:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006354:	d003      	beq.n	800635e <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fb05 	bl	8006966 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800635c:	e046      	b.n	80063ec <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800635e:	2140      	movs	r1, #64	@ 0x40
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fe25 	bl	8006fb0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006366:	e041      	b.n	80063ec <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	099b      	lsrs	r3, r3, #6
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d029      	beq.n	80063c8 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800637c:	2b00      	cmp	r3, #0
 800637e:	d023      	beq.n	80063c8 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d119      	bne.n	80063be <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006398:	d027      	beq.n	80063ea <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063a2:	d108      	bne.n	80063b6 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80063b4:	e019      	b.n	80063ea <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fad5 	bl	8006966 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80063bc:	e015      	b.n	80063ea <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063be:	2140      	movs	r1, #64	@ 0x40
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fdf5 	bl	8006fb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80063c6:	e010      	b.n	80063ea <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fb5a 	bl	8006a9c <I2C_ITMasterCplt>
 80063e8:	e000      	b.n	80063ec <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 80063ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800640c:	4b94      	ldr	r3, [pc, #592]	@ (8006660 <I2C_Mem_ISR_DMA+0x260>)
 800640e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <I2C_Mem_ISR_DMA+0x1e>
 800641a:	2302      	movs	r3, #2
 800641c:	e139      	b.n	8006692 <I2C_Mem_ISR_DMA+0x292>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	091b      	lsrs	r3, r3, #4
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d017      	beq.n	8006462 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800643a:	2b00      	cmp	r3, #0
 800643c:	d011      	beq.n	8006462 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2210      	movs	r2, #16
 8006444:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f043 0204 	orr.w	r2, r3, #4
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006452:	2120      	movs	r1, #32
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f001 f857 	bl	8007508 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 febf 	bl	80071de <I2C_Flush_TXDR>
 8006460:	e112      	b.n	8006688 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	085b      	lsrs	r3, r3, #1
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00f      	beq.n	800648e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006482:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800648a:	651a      	str	r2, [r3, #80]	@ 0x50
 800648c:	e0fc      	b.n	8006688 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	09db      	lsrs	r3, r3, #7
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d06e      	beq.n	8006578 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	099b      	lsrs	r3, r3, #6
 800649e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d068      	beq.n	8006578 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064a6:	2101      	movs	r1, #1
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f001 f8b1 	bl	8007610 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80064ae:	2110      	movs	r1, #16
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f001 f829 	bl	8007508 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d056      	beq.n	800656e <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2bff      	cmp	r3, #255	@ 0xff
 80064c8:	d91e      	bls.n	8006508 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	0c1b      	lsrs	r3, r3, #16
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d103      	bne.n	80064e6 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80064e4:	e002      	b.n	80064ec <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	22ff      	movs	r2, #255	@ 0xff
 80064ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f0:	b299      	uxth	r1, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	2300      	movs	r3, #0
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 ffcf 	bl	80074a4 <I2C_TransferConfig>
 8006506:	e011      	b.n	800652c <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006516:	b299      	uxth	r1, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800651c:	b2da      	uxtb	r2, r3
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 ffbc 	bl	80074a4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b22      	cmp	r3, #34	@ 0x22
 8006548:	d108      	bne.n	800655c <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006558:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800655a:	e095      	b.n	8006688 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800656a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800656c:	e08c      	b.n	8006688 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800656e:	2140      	movs	r1, #64	@ 0x40
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fd1d 	bl	8006fb0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006576:	e087      	b.n	8006688 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	099b      	lsrs	r3, r3, #6
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d071      	beq.n	8006668 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800658c:	2b00      	cmp	r3, #0
 800658e:	d06b      	beq.n	8006668 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006590:	2101      	movs	r1, #1
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f001 f83c 	bl	8007610 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006598:	2110      	movs	r1, #16
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 ffb4 	bl	8007508 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b22      	cmp	r3, #34	@ 0x22
 80065aa:	d101      	bne.n	80065b0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 80065ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006664 <I2C_Mem_ISR_DMA+0x264>)
 80065ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2bff      	cmp	r3, #255	@ 0xff
 80065b8:	d91e      	bls.n	80065f8 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d103      	bne.n	80065d6 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80065d4:	e002      	b.n	80065dc <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	@ 0xff
 80065da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065e0:	b299      	uxth	r1, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 ff57 	bl	80074a4 <I2C_TransferConfig>
 80065f6:	e011      	b.n	800661c <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006606:	b299      	uxth	r1, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800660c:	b2da      	uxtb	r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 ff44 	bl	80074a4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	b29a      	uxth	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b22      	cmp	r3, #34	@ 0x22
 8006638:	d108      	bne.n	800664c <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006648:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800664a:	e01d      	b.n	8006688 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800665a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800665c:	e014      	b.n	8006688 <I2C_Mem_ISR_DMA+0x288>
 800665e:	bf00      	nop
 8006660:	80002000 	.word	0x80002000
 8006664:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	095b      	lsrs	r3, r3, #5
 8006678:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fa0a 	bl	8006a9c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop

0800669c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <I2C_Slave_ISR_DMA+0x24>
 80066bc:	2302      	movs	r3, #2
 80066be:	e0ca      	b.n	8006856 <I2C_Slave_ISR_DMA+0x1ba>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d004      	beq.n	80066ea <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 faa4 	bl	8006c30 <I2C_ITSlaveCplt>
 80066e8:	e0b0      	b.n	800684c <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 809a 	beq.w	800682c <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8093 	beq.w	800682c <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	0b9b      	lsrs	r3, r3, #14
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	0bdb      	lsrs	r3, r3, #15
 8006716:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800671a:	2b00      	cmp	r3, #0
 800671c:	d07f      	beq.n	800681e <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	0bdb      	lsrs	r3, r3, #15
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d007      	beq.n	8006742 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800673e:	2301      	movs	r3, #1
 8006740:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00d      	beq.n	8006766 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	0b9b      	lsrs	r3, r3, #14
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8006762:	2301      	movs	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d128      	bne.n	80067be <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b28      	cmp	r3, #40	@ 0x28
 8006776:	d108      	bne.n	800678a <I2C_Slave_ISR_DMA+0xee>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800677e:	d104      	bne.n	800678a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 fbbe 	bl	8006f04 <I2C_ITListenCplt>
 8006788:	e048      	b.n	800681c <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b29      	cmp	r3, #41	@ 0x29
 8006794:	d10e      	bne.n	80067b4 <I2C_Slave_ISR_DMA+0x118>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800679c:	d00a      	beq.n	80067b4 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2210      	movs	r2, #16
 80067a4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fd19 	bl	80071de <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f917 	bl	80069e0 <I2C_ITSlaveSeqCplt>
 80067b2:	e033      	b.n	800681c <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2210      	movs	r2, #16
 80067ba:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80067bc:	e034      	b.n	8006828 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2210      	movs	r2, #16
 80067c4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ca:	f043 0204 	orr.w	r2, r3, #4
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067d8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <I2C_Slave_ISR_DMA+0x14c>
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067e6:	d11f      	bne.n	8006828 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b21      	cmp	r3, #33	@ 0x21
 80067ec:	d002      	beq.n	80067f4 <I2C_Slave_ISR_DMA+0x158>
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	2b29      	cmp	r3, #41	@ 0x29
 80067f2:	d103      	bne.n	80067fc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2221      	movs	r2, #33	@ 0x21
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80067fa:	e008      	b.n	800680e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	2b22      	cmp	r3, #34	@ 0x22
 8006800:	d002      	beq.n	8006808 <I2C_Slave_ISR_DMA+0x16c>
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	2b2a      	cmp	r3, #42	@ 0x2a
 8006806:	d102      	bne.n	800680e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2222      	movs	r2, #34	@ 0x22
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006812:	4619      	mov	r1, r3
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fbcb 	bl	8006fb0 <I2C_ITError>
      if (treatdmanack == 1U)
 800681a:	e005      	b.n	8006828 <I2C_Slave_ISR_DMA+0x18c>
 800681c:	e004      	b.n	8006828 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2210      	movs	r2, #16
 8006824:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006826:	e011      	b.n	800684c <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8006828:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800682a:	e00f      	b.n	800684c <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	08db      	lsrs	r3, r3, #3
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	08db      	lsrs	r3, r3, #3
 800683c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f809 	bl	800685e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006874:	2b28      	cmp	r3, #40	@ 0x28
 8006876:	d16a      	bne.n	800694e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	b29b      	uxth	r3, r3
 8006892:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006896:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068a4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80068b2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d138      	bne.n	800692e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80068bc:	897b      	ldrh	r3, [r7, #10]
 80068be:	09db      	lsrs	r3, r3, #7
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	89bb      	ldrh	r3, [r7, #12]
 80068c4:	4053      	eors	r3, r2
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f003 0306 	and.w	r3, r3, #6
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11c      	bne.n	800690a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80068d0:	897b      	ldrh	r3, [r7, #10]
 80068d2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d13b      	bne.n	800695e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2208      	movs	r2, #8
 80068f2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068fc:	89ba      	ldrh	r2, [r7, #12]
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff f9f3 	bl	8005cee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006908:	e029      	b.n	800695e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800690a:	893b      	ldrh	r3, [r7, #8]
 800690c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800690e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fe7c 	bl	8007610 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006920:	89ba      	ldrh	r2, [r7, #12]
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff f9e1 	bl	8005cee <HAL_I2C_AddrCallback>
}
 800692c:	e017      	b.n	800695e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800692e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fe6c 	bl	8007610 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006940:	89ba      	ldrh	r2, [r7, #12]
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff f9d1 	bl	8005cee <HAL_I2C_AddrCallback>
}
 800694c:	e007      	b.n	800695e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2208      	movs	r2, #8
 8006954:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b21      	cmp	r3, #33	@ 0x21
 8006980:	d115      	bne.n	80069ae <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2211      	movs	r2, #17
 800698e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006996:	2101      	movs	r1, #1
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fe39 	bl	8007610 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f019 f902 	bl	801fbb0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069ac:	e014      	b.n	80069d8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2212      	movs	r2, #18
 80069ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80069c2:	2102      	movs	r1, #2
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fe23 	bl	8007610 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f019 f902 	bl	801fbdc <HAL_I2C_MasterRxCpltCallback>
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	0b9b      	lsrs	r3, r3, #14
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e00d      	b.n	8006a32 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	0bdb      	lsrs	r3, r3, #15
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b29      	cmp	r3, #41	@ 0x29
 8006a3c:	d112      	bne.n	8006a64 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2228      	movs	r2, #40	@ 0x28
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2221      	movs	r2, #33	@ 0x21
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fdde 	bl	8007610 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f019 f8d3 	bl	801fc08 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a62:	e017      	b.n	8006a94 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a6e:	d111      	bne.n	8006a94 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2228      	movs	r2, #40	@ 0x28
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2222      	movs	r2, #34	@ 0x22
 8006a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a7e:	2102      	movs	r1, #2
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fdc5 	bl	8007610 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f019 f8d0 	bl	801fc34 <HAL_I2C_SlaveRxCpltCallback>
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b21      	cmp	r3, #33	@ 0x21
 8006abc:	d107      	bne.n	8006ace <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006abe:	2101      	movs	r1, #1
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fda5 	bl	8007610 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2211      	movs	r2, #17
 8006aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8006acc:	e00c      	b.n	8006ae8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b22      	cmp	r3, #34	@ 0x22
 8006ad8:	d106      	bne.n	8006ae8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ada:	2102      	movs	r1, #2
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fd97 	bl	8007610 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2212      	movs	r2, #18
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6859      	ldr	r1, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4b4d      	ldr	r3, [pc, #308]	@ (8006c28 <I2C_ITMasterCplt+0x18c>)
 8006af4:	400b      	ands	r3, r1
 8006af6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a4a      	ldr	r2, [pc, #296]	@ (8006c2c <I2C_ITMasterCplt+0x190>)
 8006b02:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	091b      	lsrs	r3, r3, #4
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d009      	beq.n	8006b24 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2210      	movs	r2, #16
 8006b16:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b1c:	f043 0204 	orr.w	r2, r3, #4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b60      	cmp	r3, #96	@ 0x60
 8006b2e:	d10b      	bne.n	8006b48 <I2C_ITMasterCplt+0xac>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	089b      	lsrs	r3, r3, #2
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006b46:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fb48 	bl	80071de <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b52:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b60      	cmp	r3, #96	@ 0x60
 8006b5e:	d002      	beq.n	8006b66 <I2C_ITMasterCplt+0xca>
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d006      	beq.n	8006b74 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fa1f 	bl	8006fb0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b72:	e054      	b.n	8006c1e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b21      	cmp	r3, #33	@ 0x21
 8006b7e:	d124      	bne.n	8006bca <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b40      	cmp	r3, #64	@ 0x40
 8006b98:	d10b      	bne.n	8006bb2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff f8b7 	bl	8005d1e <HAL_I2C_MemTxCpltCallback>
}
 8006bb0:	e035      	b.n	8006c1e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f018 fff4 	bl	801fbb0 <HAL_I2C_MasterTxCpltCallback>
}
 8006bc8:	e029      	b.n	8006c1e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b22      	cmp	r3, #34	@ 0x22
 8006bd4:	d123      	bne.n	8006c1e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b40      	cmp	r3, #64	@ 0x40
 8006bee:	d10b      	bne.n	8006c08 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff f896 	bl	8005d32 <HAL_I2C_MemRxCpltCallback>
}
 8006c06:	e00a      	b.n	8006c1e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f018 ffdf 	bl	801fbdc <HAL_I2C_MasterRxCpltCallback>
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	fe00e800 	.word	0xfe00e800
 8006c2c:	ffff0000 	.word	0xffff0000

08006c30 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c52:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c5c:	7afb      	ldrb	r3, [r7, #11]
 8006c5e:	2b21      	cmp	r3, #33	@ 0x21
 8006c60:	d002      	beq.n	8006c68 <I2C_ITSlaveCplt+0x38>
 8006c62:	7afb      	ldrb	r3, [r7, #11]
 8006c64:	2b29      	cmp	r3, #41	@ 0x29
 8006c66:	d108      	bne.n	8006c7a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006c68:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fccf 	bl	8007610 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2221      	movs	r2, #33	@ 0x21
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c78:	e019      	b.n	8006cae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	2b22      	cmp	r3, #34	@ 0x22
 8006c7e:	d002      	beq.n	8006c86 <I2C_ITSlaveCplt+0x56>
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c84:	d108      	bne.n	8006c98 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006c86:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fcc0 	bl	8007610 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2222      	movs	r2, #34	@ 0x22
 8006c94:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c96:	e00a      	b.n	8006cae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006c98:	7afb      	ldrb	r3, [r7, #11]
 8006c9a:	2b28      	cmp	r3, #40	@ 0x28
 8006c9c:	d107      	bne.n	8006cae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006c9e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fcb4 	bl	8007610 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8006efc <I2C_ITSlaveCplt+0x2cc>)
 8006cca:	400b      	ands	r3, r1
 8006ccc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa85 	bl	80071de <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	0b9b      	lsrs	r3, r3, #14
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d013      	beq.n	8006d08 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d020      	beq.n	8006d3a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d06:	e018      	b.n	8006d3a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	0bdb      	lsrs	r3, r3, #15
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d012      	beq.n	8006d3a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d22:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	089b      	lsrs	r3, r3, #2
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d020      	beq.n	8006d88 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f023 0304 	bic.w	r3, r3, #4
 8006d4c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d96:	f043 0204 	orr.w	r2, r3, #4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d04a      	beq.n	8006e40 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d044      	beq.n	8006e40 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d128      	bne.n	8006e12 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b28      	cmp	r3, #40	@ 0x28
 8006dca:	d108      	bne.n	8006dde <I2C_ITSlaveCplt+0x1ae>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dd2:	d104      	bne.n	8006dde <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006dd4:	6979      	ldr	r1, [r7, #20]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f894 	bl	8006f04 <I2C_ITListenCplt>
 8006ddc:	e030      	b.n	8006e40 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b29      	cmp	r3, #41	@ 0x29
 8006de8:	d10e      	bne.n	8006e08 <I2C_ITSlaveCplt+0x1d8>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006df0:	d00a      	beq.n	8006e08 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2210      	movs	r2, #16
 8006df8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f9ef 	bl	80071de <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fded 	bl	80069e0 <I2C_ITSlaveSeqCplt>
 8006e06:	e01b      	b.n	8006e40 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2210      	movs	r2, #16
 8006e0e:	61da      	str	r2, [r3, #28]
 8006e10:	e016      	b.n	8006e40 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2210      	movs	r2, #16
 8006e18:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1e:	f043 0204 	orr.w	r2, r3, #4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <I2C_ITSlaveCplt+0x204>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e32:	d105      	bne.n	8006e40 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f8b8 	bl	8006fb0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d010      	beq.n	8006e78 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f8a7 	bl	8006fb0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b28      	cmp	r3, #40	@ 0x28
 8006e6c:	d141      	bne.n	8006ef2 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e6e:	6979      	ldr	r1, [r7, #20]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f847 	bl	8006f04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e76:	e03c      	b.n	8006ef2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e80:	d014      	beq.n	8006eac <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff fdac 	bl	80069e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8006f00 <I2C_ITSlaveCplt+0x2d0>)
 8006e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fe ff30 	bl	8005d0a <HAL_I2C_ListenCpltCallback>
}
 8006eaa:	e022      	b.n	8006ef2 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b22      	cmp	r3, #34	@ 0x22
 8006eb6:	d10e      	bne.n	8006ed6 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f018 feb0 	bl	801fc34 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ed4:	e00d      	b.n	8006ef2 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f018 fe8b 	bl	801fc08 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ef2:	bf00      	nop
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	fe00e800 	.word	0xfe00e800
 8006f00:	ffff0000 	.word	0xffff0000

08006f04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a26      	ldr	r2, [pc, #152]	@ (8006fac <I2C_ITListenCplt+0xa8>)
 8006f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	089b      	lsrs	r3, r3, #2
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d022      	beq.n	8006f82 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d012      	beq.n	8006f82 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7a:	f043 0204 	orr.w	r2, r3, #4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f82:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fb42 	bl	8007610 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2210      	movs	r2, #16
 8006f92:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fe feb4 	bl	8005d0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	ffff0000 	.word	0xffff0000

08006fb0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fc0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a6d      	ldr	r2, [pc, #436]	@ (8007184 <I2C_ITError+0x1d4>)
 8006fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	2b28      	cmp	r3, #40	@ 0x28
 8006fe6:	d005      	beq.n	8006ff4 <I2C_ITError+0x44>
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b29      	cmp	r3, #41	@ 0x29
 8006fec:	d002      	beq.n	8006ff4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ff2:	d10b      	bne.n	800700c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ff4:	2103      	movs	r1, #3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fb0a 	bl	8007610 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2228      	movs	r2, #40	@ 0x28
 8007000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a60      	ldr	r2, [pc, #384]	@ (8007188 <I2C_ITError+0x1d8>)
 8007008:	635a      	str	r2, [r3, #52]	@ 0x34
 800700a:	e030      	b.n	800706e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800700c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fafd 	bl	8007610 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f8e1 	bl	80071de <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b60      	cmp	r3, #96	@ 0x60
 8007026:	d01f      	beq.n	8007068 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b20      	cmp	r3, #32
 800703c:	d114      	bne.n	8007068 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b10      	cmp	r3, #16
 800704a:	d109      	bne.n	8007060 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2210      	movs	r2, #16
 8007052:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007058:	f043 0204 	orr.w	r2, r3, #4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2220      	movs	r2, #32
 8007066:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007072:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007078:	2b00      	cmp	r3, #0
 800707a:	d039      	beq.n	80070f0 <I2C_ITError+0x140>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b11      	cmp	r3, #17
 8007080:	d002      	beq.n	8007088 <I2C_ITError+0xd8>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b21      	cmp	r3, #33	@ 0x21
 8007086:	d133      	bne.n	80070f0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007092:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007096:	d107      	bne.n	80070a8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fc fc45 	bl	800393c <HAL_DMA_GetState>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d017      	beq.n	80070e8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070bc:	4a33      	ldr	r2, [pc, #204]	@ (800718c <I2C_ITError+0x1dc>)
 80070be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fc fa89 	bl	80035e4 <HAL_DMA_Abort_IT>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d04d      	beq.n	8007174 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80070e2:	4610      	mov	r0, r2
 80070e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070e6:	e045      	b.n	8007174 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f851 	bl	8007190 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070ee:	e041      	b.n	8007174 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d039      	beq.n	800716c <I2C_ITError+0x1bc>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b12      	cmp	r3, #18
 80070fc:	d002      	beq.n	8007104 <I2C_ITError+0x154>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b22      	cmp	r3, #34	@ 0x22
 8007102:	d133      	bne.n	800716c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800710e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007112:	d107      	bne.n	8007124 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007122:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007128:	4618      	mov	r0, r3
 800712a:	f7fc fc07 	bl	800393c <HAL_DMA_GetState>
 800712e:	4603      	mov	r3, r0
 8007130:	2b01      	cmp	r3, #1
 8007132:	d017      	beq.n	8007164 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007138:	4a14      	ldr	r2, [pc, #80]	@ (800718c <I2C_ITError+0x1dc>)
 800713a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007148:	4618      	mov	r0, r3
 800714a:	f7fc fa4b 	bl	80035e4 <HAL_DMA_Abort_IT>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d011      	beq.n	8007178 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800715e:	4610      	mov	r0, r2
 8007160:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007162:	e009      	b.n	8007178 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f813 	bl	8007190 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800716a:	e005      	b.n	8007178 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f80f 	bl	8007190 <I2C_TreatErrorCallback>
  }
}
 8007172:	e002      	b.n	800717a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007174:	bf00      	nop
 8007176:	e000      	b.n	800717a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007178:	bf00      	nop
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	ffff0000 	.word	0xffff0000
 8007188:	08005ff3 	.word	0x08005ff3
 800718c:	08007469 	.word	0x08007469

08007190 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b60      	cmp	r3, #96	@ 0x60
 80071a2:	d10e      	bne.n	80071c2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fe fdcd 	bl	8005d5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071c0:	e009      	b.n	80071d6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fe fdb8 	bl	8005d46 <HAL_I2C_ErrorCallback>
}
 80071d6:	bf00      	nop
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d103      	bne.n	80071fc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2200      	movs	r2, #0
 80071fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d007      	beq.n	800721a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0201 	orr.w	r2, r2, #1
 8007218:	619a      	str	r2, [r3, #24]
  }
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007232:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007242:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800724e:	2120      	movs	r1, #32
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f959 	bl	8007508 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007256:	e02d      	b.n	80072b4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007260:	441a      	add	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726a:	b29b      	uxth	r3, r3
 800726c:	2bff      	cmp	r3, #255	@ 0xff
 800726e:	d903      	bls.n	8007278 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	22ff      	movs	r2, #255	@ 0xff
 8007274:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007276:	e004      	b.n	8007282 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728a:	4619      	mov	r1, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3328      	adds	r3, #40	@ 0x28
 8007292:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007298:	f7fc f8d4 	bl	8003444 <HAL_DMA_Start_IT>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d004      	beq.n	80072ac <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80072a2:	2110      	movs	r1, #16
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fe83 	bl	8006fb0 <I2C_ITError>
}
 80072aa:	e003      	b.n	80072b4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80072ac:	2140      	movs	r1, #64	@ 0x40
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f92a 	bl	8007508 <I2C_Enable_IRQ>
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ce:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072d6:	d002      	beq.n	80072de <I2C_DMASlaveTransmitCplt+0x22>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072ec:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff fb76 	bl	80069e0 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007308:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007318:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007324:	2120      	movs	r1, #32
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f8ee 	bl	8007508 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800732c:	e03b      	b.n	80073a6 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007336:	441a      	add	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007340:	b29b      	uxth	r3, r3
 8007342:	2bff      	cmp	r3, #255	@ 0xff
 8007344:	d911      	bls.n	800736a <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	0c1b      	lsrs	r3, r3, #16
 800734e:	b2db      	uxtb	r3, r3
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b01      	cmp	r3, #1
 8007358:	d103      	bne.n	8007362 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007360:	e008      	b.n	8007374 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	22ff      	movs	r2, #255	@ 0xff
 8007366:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007368:	e004      	b.n	8007374 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3324      	adds	r3, #36	@ 0x24
 800737e:	4619      	mov	r1, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007384:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800738a:	f7fc f85b 	bl	8003444 <HAL_DMA_Start_IT>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007394:	2110      	movs	r1, #16
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fe0a 	bl	8006fb0 <I2C_ITError>
}
 800739c:	e003      	b.n	80073a6 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800739e:	2140      	movs	r1, #64	@ 0x40
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f8b1 	bl	8007508 <I2C_Enable_IRQ>
}
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10e      	bne.n	80073ec <I2C_DMASlaveReceiveCplt+0x3e>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80073d4:	d00a      	beq.n	80073ec <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073e4:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fafa 	bl	80069e0 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007404:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800741a:	2301      	movs	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007432:	2301      	movs	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fc fa8e 	bl	8003958 <HAL_DMA_GetError>
 800743c:	4603      	mov	r3, r0
 800743e:	2b02      	cmp	r3, #2
 8007440:	d00e      	beq.n	8007460 <I2C_DMAError+0x6c>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007456:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007458:	2110      	movs	r1, #16
 800745a:	68b8      	ldr	r0, [r7, #8]
 800745c:	f7ff fda8 	bl	8006fb0 <I2C_ITError>
  }
}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007474:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007482:	2200      	movs	r2, #0
 8007484:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007492:	2200      	movs	r2, #0
 8007494:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff fe7a 	bl	8007190 <I2C_TreatErrorCallback>
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	607b      	str	r3, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	817b      	strh	r3, [r7, #10]
 80074b2:	4613      	mov	r3, r2
 80074b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074b6:	897b      	ldrh	r3, [r7, #10]
 80074b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074bc:	7a7b      	ldrb	r3, [r7, #9]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074c4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074d2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	0d5b      	lsrs	r3, r3, #21
 80074de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80074e2:	4b08      	ldr	r3, [pc, #32]	@ (8007504 <I2C_TransferConfig+0x60>)
 80074e4:	430b      	orrs	r3, r1
 80074e6:	43db      	mvns	r3, r3
 80074e8:	ea02 0103 	and.w	r1, r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	03ff63ff 	.word	0x03ff63ff

08007508 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007514:	2300      	movs	r3, #0
 8007516:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751c:	4a39      	ldr	r2, [pc, #228]	@ (8007604 <I2C_Enable_IRQ+0xfc>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d032      	beq.n	8007588 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007526:	4a38      	ldr	r2, [pc, #224]	@ (8007608 <I2C_Enable_IRQ+0x100>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d02d      	beq.n	8007588 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007530:	4a36      	ldr	r2, [pc, #216]	@ (800760c <I2C_Enable_IRQ+0x104>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d028      	beq.n	8007588 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800753a:	2b00      	cmp	r3, #0
 800753c:	da03      	bge.n	8007546 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007544:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007546:	887b      	ldrh	r3, [r7, #2]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007556:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007558:	887b      	ldrh	r3, [r7, #2]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007568:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800756a:	887b      	ldrh	r3, [r7, #2]
 800756c:	2b10      	cmp	r3, #16
 800756e:	d103      	bne.n	8007578 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007576:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	2b20      	cmp	r3, #32
 800757c:	d133      	bne.n	80075e6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007586:	e02e      	b.n	80075e6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007588:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800758c:	2b00      	cmp	r3, #0
 800758e:	da03      	bge.n	8007598 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007596:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007598:	887b      	ldrh	r3, [r7, #2]
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075aa:	887b      	ldrh	r3, [r7, #2]
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	2b10      	cmp	r3, #16
 80075c0:	d103      	bne.n	80075ca <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80075c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075ca:	887b      	ldrh	r3, [r7, #2]
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d103      	bne.n	80075d8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80075d8:	887b      	ldrh	r3, [r7, #2]
 80075da:	2b40      	cmp	r3, #64	@ 0x40
 80075dc:	d103      	bne.n	80075e6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075e4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6819      	ldr	r1, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	601a      	str	r2, [r3, #0]
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	080061fb 	.word	0x080061fb
 8007608:	0800669d 	.word	0x0800669d
 800760c:	08006401 	.word	0x08006401

08007610 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007620:	887b      	ldrh	r3, [r7, #2]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00f      	beq.n	800764a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007630:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800763e:	2b28      	cmp	r3, #40	@ 0x28
 8007640:	d003      	beq.n	800764a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007648:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800764a:	887b      	ldrh	r3, [r7, #2]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00f      	beq.n	8007674 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800765a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007668:	2b28      	cmp	r3, #40	@ 0x28
 800766a:	d003      	beq.n	8007674 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007672:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007674:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007678:	2b00      	cmp	r3, #0
 800767a:	da03      	bge.n	8007684 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007682:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007684:	887b      	ldrh	r3, [r7, #2]
 8007686:	2b10      	cmp	r3, #16
 8007688:	d103      	bne.n	8007692 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007690:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007692:	887b      	ldrh	r3, [r7, #2]
 8007694:	2b20      	cmp	r3, #32
 8007696:	d103      	bne.n	80076a0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f043 0320 	orr.w	r3, r3, #32
 800769e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80076a0:	887b      	ldrh	r3, [r7, #2]
 80076a2:	2b40      	cmp	r3, #64	@ 0x40
 80076a4:	d103      	bne.n	80076ae <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ac:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6819      	ldr	r1, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	43da      	mvns	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	400a      	ands	r2, r1
 80076be:	601a      	str	r2, [r3, #0]
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b20      	cmp	r3, #32
 80076e0:	d138      	bne.n	8007754 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e032      	b.n	8007756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2224      	movs	r2, #36	@ 0x24
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0201 	bic.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800771e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6819      	ldr	r1, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	e000      	b.n	8007756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007754:	2302      	movs	r3, #2
  }
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007762:	b480      	push	{r7}
 8007764:	b085      	sub	sp, #20
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b20      	cmp	r3, #32
 8007776:	d139      	bne.n	80077ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007782:	2302      	movs	r3, #2
 8007784:	e033      	b.n	80077ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2224      	movs	r2, #36	@ 0x24
 8007792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80077b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e000      	b.n	80077ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
  }
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
	...

080077fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007806:	4b23      	ldr	r3, [pc, #140]	@ (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780a:	4a22      	ldr	r2, [pc, #136]	@ (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 800780c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007810:	6413      	str	r3, [r2, #64]	@ 0x40
 8007812:	4b20      	ldr	r3, [pc, #128]	@ (8007894 <HAL_PWREx_EnableOverDrive+0x98>)
 8007814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800781e:	4b1e      	ldr	r3, [pc, #120]	@ (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1d      	ldr	r2, [pc, #116]	@ (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007828:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800782a:	f7fa fdbb 	bl	80023a4 <HAL_GetTick>
 800782e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007830:	e009      	b.n	8007846 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007832:	f7fa fdb7 	bl	80023a4 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007840:	d901      	bls.n	8007846 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e022      	b.n	800788c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007846:	4b14      	ldr	r3, [pc, #80]	@ (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007852:	d1ee      	bne.n	8007832 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007854:	4b10      	ldr	r3, [pc, #64]	@ (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a0f      	ldr	r2, [pc, #60]	@ (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800785a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800785e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007860:	f7fa fda0 	bl	80023a4 <HAL_GetTick>
 8007864:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007866:	e009      	b.n	800787c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007868:	f7fa fd9c 	bl	80023a4 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007876:	d901      	bls.n	800787c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e007      	b.n	800788c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800787c:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007888:	d1ee      	bne.n	8007868 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40023800 	.word	0x40023800
 8007898:	40007000 	.word	0x40007000

0800789c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078a4:	2300      	movs	r3, #0
 80078a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e291      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 8087 	beq.w	80079ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078c0:	4b96      	ldr	r3, [pc, #600]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 030c 	and.w	r3, r3, #12
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d00c      	beq.n	80078e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078cc:	4b93      	ldr	r3, [pc, #588]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 030c 	and.w	r3, r3, #12
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d112      	bne.n	80078fe <HAL_RCC_OscConfig+0x62>
 80078d8:	4b90      	ldr	r3, [pc, #576]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078e4:	d10b      	bne.n	80078fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078e6:	4b8d      	ldr	r3, [pc, #564]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d06c      	beq.n	80079cc <HAL_RCC_OscConfig+0x130>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d168      	bne.n	80079cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e26b      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007906:	d106      	bne.n	8007916 <HAL_RCC_OscConfig+0x7a>
 8007908:	4b84      	ldr	r3, [pc, #528]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a83      	ldr	r2, [pc, #524]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 800790e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	e02e      	b.n	8007974 <HAL_RCC_OscConfig+0xd8>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <HAL_RCC_OscConfig+0x9c>
 800791e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a7e      	ldr	r2, [pc, #504]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	4b7c      	ldr	r3, [pc, #496]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a7b      	ldr	r2, [pc, #492]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	e01d      	b.n	8007974 <HAL_RCC_OscConfig+0xd8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007940:	d10c      	bne.n	800795c <HAL_RCC_OscConfig+0xc0>
 8007942:	4b76      	ldr	r3, [pc, #472]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a75      	ldr	r2, [pc, #468]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	4b73      	ldr	r3, [pc, #460]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a72      	ldr	r2, [pc, #456]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	e00b      	b.n	8007974 <HAL_RCC_OscConfig+0xd8>
 800795c:	4b6f      	ldr	r3, [pc, #444]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a6e      	ldr	r2, [pc, #440]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	4b6c      	ldr	r3, [pc, #432]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a6b      	ldr	r2, [pc, #428]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 800796e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d013      	beq.n	80079a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797c:	f7fa fd12 	bl	80023a4 <HAL_GetTick>
 8007980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007984:	f7fa fd0e 	bl	80023a4 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b64      	cmp	r3, #100	@ 0x64
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e21f      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007996:	4b61      	ldr	r3, [pc, #388]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0f0      	beq.n	8007984 <HAL_RCC_OscConfig+0xe8>
 80079a2:	e014      	b.n	80079ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7fa fcfe 	bl	80023a4 <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079ac:	f7fa fcfa 	bl	80023a4 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b64      	cmp	r3, #100	@ 0x64
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e20b      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079be:	4b57      	ldr	r3, [pc, #348]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1f0      	bne.n	80079ac <HAL_RCC_OscConfig+0x110>
 80079ca:	e000      	b.n	80079ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d069      	beq.n	8007aae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80079da:	4b50      	ldr	r3, [pc, #320]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 030c 	and.w	r3, r3, #12
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079e6:	4b4d      	ldr	r3, [pc, #308]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 030c 	and.w	r3, r3, #12
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d11c      	bne.n	8007a2c <HAL_RCC_OscConfig+0x190>
 80079f2:	4b4a      	ldr	r3, [pc, #296]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d116      	bne.n	8007a2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079fe:	4b47      	ldr	r3, [pc, #284]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_RCC_OscConfig+0x17a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d001      	beq.n	8007a16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e1df      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a16:	4b41      	ldr	r3, [pc, #260]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	493d      	ldr	r1, [pc, #244]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a2a:	e040      	b.n	8007aae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d023      	beq.n	8007a7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a34:	4b39      	ldr	r3, [pc, #228]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a38      	ldr	r2, [pc, #224]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a40:	f7fa fcb0 	bl	80023a4 <HAL_GetTick>
 8007a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a48:	f7fa fcac 	bl	80023a4 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e1bd      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5a:	4b30      	ldr	r3, [pc, #192]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a66:	4b2d      	ldr	r3, [pc, #180]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	4929      	ldr	r1, [pc, #164]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	600b      	str	r3, [r1, #0]
 8007a7a:	e018      	b.n	8007aae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a7c:	4b27      	ldr	r3, [pc, #156]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a26      	ldr	r2, [pc, #152]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007a82:	f023 0301 	bic.w	r3, r3, #1
 8007a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7fa fc8c 	bl	80023a4 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a90:	f7fa fc88 	bl	80023a4 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e199      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f0      	bne.n	8007a90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d038      	beq.n	8007b2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d019      	beq.n	8007af6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ac2:	4b16      	ldr	r3, [pc, #88]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac6:	4a15      	ldr	r2, [pc, #84]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ace:	f7fa fc69 	bl	80023a4 <HAL_GetTick>
 8007ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ad6:	f7fa fc65 	bl	80023a4 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e176      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x23a>
 8007af4:	e01a      	b.n	8007b2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007af6:	4b09      	ldr	r3, [pc, #36]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007afa:	4a08      	ldr	r2, [pc, #32]	@ (8007b1c <HAL_RCC_OscConfig+0x280>)
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b02:	f7fa fc4f 	bl	80023a4 <HAL_GetTick>
 8007b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b08:	e00a      	b.n	8007b20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b0a:	f7fa fc4b 	bl	80023a4 <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d903      	bls.n	8007b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e15c      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
 8007b1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b20:	4b91      	ldr	r3, [pc, #580]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1ee      	bne.n	8007b0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80a4 	beq.w	8007c82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b3a:	4b8b      	ldr	r3, [pc, #556]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10d      	bne.n	8007b62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b46:	4b88      	ldr	r3, [pc, #544]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4a:	4a87      	ldr	r2, [pc, #540]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b52:	4b85      	ldr	r3, [pc, #532]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b5a:	60bb      	str	r3, [r7, #8]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b62:	4b82      	ldr	r3, [pc, #520]	@ (8007d6c <HAL_RCC_OscConfig+0x4d0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d118      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d6c <HAL_RCC_OscConfig+0x4d0>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a7e      	ldr	r2, [pc, #504]	@ (8007d6c <HAL_RCC_OscConfig+0x4d0>)
 8007b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b7a:	f7fa fc13 	bl	80023a4 <HAL_GetTick>
 8007b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b80:	e008      	b.n	8007b94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b82:	f7fa fc0f 	bl	80023a4 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	2b64      	cmp	r3, #100	@ 0x64
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e120      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b94:	4b75      	ldr	r3, [pc, #468]	@ (8007d6c <HAL_RCC_OscConfig+0x4d0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0f0      	beq.n	8007b82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d106      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x31a>
 8007ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bac:	4a6e      	ldr	r2, [pc, #440]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bae:	f043 0301 	orr.w	r3, r3, #1
 8007bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bb4:	e02d      	b.n	8007c12 <HAL_RCC_OscConfig+0x376>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10c      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x33c>
 8007bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc2:	4a69      	ldr	r2, [pc, #420]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bca:	4b67      	ldr	r3, [pc, #412]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bce:	4a66      	ldr	r2, [pc, #408]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bd0:	f023 0304 	bic.w	r3, r3, #4
 8007bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bd6:	e01c      	b.n	8007c12 <HAL_RCC_OscConfig+0x376>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b05      	cmp	r3, #5
 8007bde:	d10c      	bne.n	8007bfa <HAL_RCC_OscConfig+0x35e>
 8007be0:	4b61      	ldr	r3, [pc, #388]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be4:	4a60      	ldr	r2, [pc, #384]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007be6:	f043 0304 	orr.w	r3, r3, #4
 8007bea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bec:	4b5e      	ldr	r3, [pc, #376]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bf8:	e00b      	b.n	8007c12 <HAL_RCC_OscConfig+0x376>
 8007bfa:	4b5b      	ldr	r3, [pc, #364]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfe:	4a5a      	ldr	r2, [pc, #360]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c06:	4b58      	ldr	r3, [pc, #352]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c0a:	4a57      	ldr	r2, [pc, #348]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c0c:	f023 0304 	bic.w	r3, r3, #4
 8007c10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d015      	beq.n	8007c46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c1a:	f7fa fbc3 	bl	80023a4 <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c20:	e00a      	b.n	8007c38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c22:	f7fa fbbf 	bl	80023a4 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e0ce      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c38:	4b4b      	ldr	r3, [pc, #300]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0ee      	beq.n	8007c22 <HAL_RCC_OscConfig+0x386>
 8007c44:	e014      	b.n	8007c70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c46:	f7fa fbad 	bl	80023a4 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c4c:	e00a      	b.n	8007c64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4e:	f7fa fba9 	bl	80023a4 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e0b8      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c64:	4b40      	ldr	r3, [pc, #256]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1ee      	bne.n	8007c4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c76:	4b3c      	ldr	r3, [pc, #240]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7a:	4a3b      	ldr	r2, [pc, #236]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c80:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80a4 	beq.w	8007dd4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c8c:	4b36      	ldr	r3, [pc, #216]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 030c 	and.w	r3, r3, #12
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d06b      	beq.n	8007d70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d149      	bne.n	8007d34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ca0:	4b31      	ldr	r3, [pc, #196]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a30      	ldr	r2, [pc, #192]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cac:	f7fa fb7a 	bl	80023a4 <HAL_GetTick>
 8007cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cb2:	e008      	b.n	8007cc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cb4:	f7fa fb76 	bl	80023a4 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e087      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc6:	4b28      	ldr	r3, [pc, #160]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1f0      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69da      	ldr	r2, [r3, #28]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	019b      	lsls	r3, r3, #6
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce8:	085b      	lsrs	r3, r3, #1
 8007cea:	3b01      	subs	r3, #1
 8007cec:	041b      	lsls	r3, r3, #16
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf4:	061b      	lsls	r3, r3, #24
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007cfa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007cfe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d00:	4b19      	ldr	r3, [pc, #100]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a18      	ldr	r2, [pc, #96]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0c:	f7fa fb4a 	bl	80023a4 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d14:	f7fa fb46 	bl	80023a4 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e057      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d26:	4b10      	ldr	r3, [pc, #64]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f0      	beq.n	8007d14 <HAL_RCC_OscConfig+0x478>
 8007d32:	e04f      	b.n	8007dd4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d34:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a0b      	ldr	r2, [pc, #44]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fa fb30 	bl	80023a4 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d48:	f7fa fb2c 	bl	80023a4 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e03d      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d5a:	4b03      	ldr	r3, [pc, #12]	@ (8007d68 <HAL_RCC_OscConfig+0x4cc>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f0      	bne.n	8007d48 <HAL_RCC_OscConfig+0x4ac>
 8007d66:	e035      	b.n	8007dd4 <HAL_RCC_OscConfig+0x538>
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d70:	4b1b      	ldr	r3, [pc, #108]	@ (8007de0 <HAL_RCC_OscConfig+0x544>)
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d028      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d121      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d11a      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007da0:	4013      	ands	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007da6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d111      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	3b01      	subs	r3, #1
 8007dba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d107      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d001      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40023800 	.word	0x40023800

08007de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e0d0      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d910      	bls.n	8007e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e0a:	4b67      	ldr	r3, [pc, #412]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f023 020f 	bic.w	r2, r3, #15
 8007e12:	4965      	ldr	r1, [pc, #404]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1a:	4b63      	ldr	r3, [pc, #396]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d001      	beq.n	8007e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0b8      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d020      	beq.n	8007e7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e44:	4b59      	ldr	r3, [pc, #356]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4a58      	ldr	r2, [pc, #352]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e5c:	4b53      	ldr	r3, [pc, #332]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4a52      	ldr	r2, [pc, #328]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007e66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e68:	4b50      	ldr	r3, [pc, #320]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	494d      	ldr	r1, [pc, #308]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d040      	beq.n	8007f08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e8e:	4b47      	ldr	r3, [pc, #284]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d115      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e07f      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d107      	bne.n	8007eb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ea6:	4b41      	ldr	r3, [pc, #260]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d109      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e073      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e06b      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ec6:	4b39      	ldr	r3, [pc, #228]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f023 0203 	bic.w	r2, r3, #3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	4936      	ldr	r1, [pc, #216]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed8:	f7fa fa64 	bl	80023a4 <HAL_GetTick>
 8007edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ede:	e00a      	b.n	8007ef6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ee0:	f7fa fa60 	bl	80023a4 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e053      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 020c 	and.w	r2, r3, #12
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d1eb      	bne.n	8007ee0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f08:	4b27      	ldr	r3, [pc, #156]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 030f 	and.w	r3, r3, #15
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d210      	bcs.n	8007f38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f16:	4b24      	ldr	r3, [pc, #144]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 020f 	bic.w	r2, r3, #15
 8007f1e:	4922      	ldr	r1, [pc, #136]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	4b20      	ldr	r3, [pc, #128]	@ (8007fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e032      	b.n	8007f9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d008      	beq.n	8007f56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f44:	4b19      	ldr	r3, [pc, #100]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	4916      	ldr	r1, [pc, #88]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f62:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	490e      	ldr	r1, [pc, #56]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f76:	f000 f821 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007fac <HAL_RCC_ClockConfig+0x1c8>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	091b      	lsrs	r3, r3, #4
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	490a      	ldr	r1, [pc, #40]	@ (8007fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8007f88:	5ccb      	ldrb	r3, [r1, r3]
 8007f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8e:	4a09      	ldr	r2, [pc, #36]	@ (8007fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8007f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f92:	4b09      	ldr	r3, [pc, #36]	@ (8007fb8 <HAL_RCC_ClockConfig+0x1d4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7f9 fb5a 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	40023c00 	.word	0x40023c00
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	080265b8 	.word	0x080265b8
 8007fb4:	20000000 	.word	0x20000000
 8007fb8:	20000004 	.word	0x20000004

08007fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc0:	b090      	sub	sp, #64	@ 0x40
 8007fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc8:	2300      	movs	r3, #0
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fcc:	2300      	movs	r3, #0
 8007fce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd4:	4b59      	ldr	r3, [pc, #356]	@ (800813c <HAL_RCC_GetSysClockFreq+0x180>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 030c 	and.w	r3, r3, #12
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d00d      	beq.n	8007ffc <HAL_RCC_GetSysClockFreq+0x40>
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	f200 80a1 	bhi.w	8008128 <HAL_RCC_GetSysClockFreq+0x16c>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d003      	beq.n	8007ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007fee:	e09b      	b.n	8008128 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ff0:	4b53      	ldr	r3, [pc, #332]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ff4:	e09b      	b.n	800812e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ff6:	4b53      	ldr	r3, [pc, #332]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ffa:	e098      	b.n	800812e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800813c <HAL_RCC_GetSysClockFreq+0x180>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008004:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008006:	4b4d      	ldr	r3, [pc, #308]	@ (800813c <HAL_RCC_GetSysClockFreq+0x180>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d028      	beq.n	8008064 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008012:	4b4a      	ldr	r3, [pc, #296]	@ (800813c <HAL_RCC_GetSysClockFreq+0x180>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	099b      	lsrs	r3, r3, #6
 8008018:	2200      	movs	r2, #0
 800801a:	623b      	str	r3, [r7, #32]
 800801c:	627a      	str	r2, [r7, #36]	@ 0x24
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008024:	2100      	movs	r1, #0
 8008026:	4b47      	ldr	r3, [pc, #284]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x188>)
 8008028:	fb03 f201 	mul.w	r2, r3, r1
 800802c:	2300      	movs	r3, #0
 800802e:	fb00 f303 	mul.w	r3, r0, r3
 8008032:	4413      	add	r3, r2
 8008034:	4a43      	ldr	r2, [pc, #268]	@ (8008144 <HAL_RCC_GetSysClockFreq+0x188>)
 8008036:	fba0 1202 	umull	r1, r2, r0, r2
 800803a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800803c:	460a      	mov	r2, r1
 800803e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008042:	4413      	add	r3, r2
 8008044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008048:	2200      	movs	r2, #0
 800804a:	61bb      	str	r3, [r7, #24]
 800804c:	61fa      	str	r2, [r7, #28]
 800804e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008052:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008056:	f7f8 f92b 	bl	80002b0 <__aeabi_uldivmod>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4613      	mov	r3, r2
 8008060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008062:	e053      	b.n	800810c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008064:	4b35      	ldr	r3, [pc, #212]	@ (800813c <HAL_RCC_GetSysClockFreq+0x180>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	099b      	lsrs	r3, r3, #6
 800806a:	2200      	movs	r2, #0
 800806c:	613b      	str	r3, [r7, #16]
 800806e:	617a      	str	r2, [r7, #20]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008076:	f04f 0b00 	mov.w	fp, #0
 800807a:	4652      	mov	r2, sl
 800807c:	465b      	mov	r3, fp
 800807e:	f04f 0000 	mov.w	r0, #0
 8008082:	f04f 0100 	mov.w	r1, #0
 8008086:	0159      	lsls	r1, r3, #5
 8008088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800808c:	0150      	lsls	r0, r2, #5
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	ebb2 080a 	subs.w	r8, r2, sl
 8008096:	eb63 090b 	sbc.w	r9, r3, fp
 800809a:	f04f 0200 	mov.w	r2, #0
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080ae:	ebb2 0408 	subs.w	r4, r2, r8
 80080b2:	eb63 0509 	sbc.w	r5, r3, r9
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	00eb      	lsls	r3, r5, #3
 80080c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080c4:	00e2      	lsls	r2, r4, #3
 80080c6:	4614      	mov	r4, r2
 80080c8:	461d      	mov	r5, r3
 80080ca:	eb14 030a 	adds.w	r3, r4, sl
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	eb45 030b 	adc.w	r3, r5, fp
 80080d4:	607b      	str	r3, [r7, #4]
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	f04f 0300 	mov.w	r3, #0
 80080de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080e2:	4629      	mov	r1, r5
 80080e4:	028b      	lsls	r3, r1, #10
 80080e6:	4621      	mov	r1, r4
 80080e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080ec:	4621      	mov	r1, r4
 80080ee:	028a      	lsls	r2, r1, #10
 80080f0:	4610      	mov	r0, r2
 80080f2:	4619      	mov	r1, r3
 80080f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f6:	2200      	movs	r2, #0
 80080f8:	60bb      	str	r3, [r7, #8]
 80080fa:	60fa      	str	r2, [r7, #12]
 80080fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008100:	f7f8 f8d6 	bl	80002b0 <__aeabi_uldivmod>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4613      	mov	r3, r2
 800810a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800810c:	4b0b      	ldr	r3, [pc, #44]	@ (800813c <HAL_RCC_GetSysClockFreq+0x180>)
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	0c1b      	lsrs	r3, r3, #16
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	3301      	adds	r3, #1
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800811c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008126:	e002      	b.n	800812e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <HAL_RCC_GetSysClockFreq+0x184>)
 800812a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800812c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008130:	4618      	mov	r0, r3
 8008132:	3740      	adds	r7, #64	@ 0x40
 8008134:	46bd      	mov	sp, r7
 8008136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800813a:	bf00      	nop
 800813c:	40023800 	.word	0x40023800
 8008140:	00f42400 	.word	0x00f42400
 8008144:	017d7840 	.word	0x017d7840

08008148 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800814c:	4b03      	ldr	r3, [pc, #12]	@ (800815c <HAL_RCC_GetHCLKFreq+0x14>)
 800814e:	681b      	ldr	r3, [r3, #0]
}
 8008150:	4618      	mov	r0, r3
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000000 	.word	0x20000000

08008160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008164:	f7ff fff0 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8008168:	4602      	mov	r2, r0
 800816a:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	0a9b      	lsrs	r3, r3, #10
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	4903      	ldr	r1, [pc, #12]	@ (8008184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008176:	5ccb      	ldrb	r3, [r1, r3]
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800817c:	4618      	mov	r0, r3
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40023800 	.word	0x40023800
 8008184:	080265c8 	.word	0x080265c8

08008188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800818c:	f7ff ffdc 	bl	8008148 <HAL_RCC_GetHCLKFreq>
 8008190:	4602      	mov	r2, r0
 8008192:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	0b5b      	lsrs	r3, r3, #13
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	4903      	ldr	r1, [pc, #12]	@ (80081ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800819e:	5ccb      	ldrb	r3, [r1, r3]
 80081a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	40023800 	.word	0x40023800
 80081ac:	080265c8 	.word	0x080265c8

080081b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	220f      	movs	r2, #15
 80081be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80081c0:	4b12      	ldr	r3, [pc, #72]	@ (800820c <HAL_RCC_GetClockConfig+0x5c>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f003 0203 	and.w	r2, r3, #3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80081cc:	4b0f      	ldr	r3, [pc, #60]	@ (800820c <HAL_RCC_GetClockConfig+0x5c>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80081d8:	4b0c      	ldr	r3, [pc, #48]	@ (800820c <HAL_RCC_GetClockConfig+0x5c>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80081e4:	4b09      	ldr	r3, [pc, #36]	@ (800820c <HAL_RCC_GetClockConfig+0x5c>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	08db      	lsrs	r3, r3, #3
 80081ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081f2:	4b07      	ldr	r3, [pc, #28]	@ (8008210 <HAL_RCC_GetClockConfig+0x60>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 020f 	and.w	r2, r3, #15
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	601a      	str	r2, [r3, #0]
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	40023800 	.word	0x40023800
 8008210:	40023c00 	.word	0x40023c00

08008214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800822c:	2300      	movs	r3, #0
 800822e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d012      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800823c:	4b69      	ldr	r3, [pc, #420]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	4a68      	ldr	r2, [pc, #416]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008242:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008246:	6093      	str	r3, [r2, #8]
 8008248:	4b66      	ldr	r3, [pc, #408]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008250:	4964      	ldr	r1, [pc, #400]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008252:	4313      	orrs	r3, r2
 8008254:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800825e:	2301      	movs	r3, #1
 8008260:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d017      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800826e:	4b5d      	ldr	r3, [pc, #372]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008274:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800827c:	4959      	ldr	r1, [pc, #356]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827e:	4313      	orrs	r3, r2
 8008280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800828c:	d101      	bne.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800828e:	2301      	movs	r3, #1
 8008290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800829a:	2301      	movs	r3, #1
 800829c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d017      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082aa:	4b4e      	ldr	r3, [pc, #312]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b8:	494a      	ldr	r1, [pc, #296]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082c8:	d101      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80082ca:	2301      	movs	r3, #1
 80082cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80082d6:	2301      	movs	r3, #1
 80082d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 808b 	beq.w	800840e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80082f8:	4b3a      	ldr	r3, [pc, #232]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082fc:	4a39      	ldr	r2, [pc, #228]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008302:	6413      	str	r3, [r2, #64]	@ 0x40
 8008304:	4b37      	ldr	r3, [pc, #220]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800830c:	60bb      	str	r3, [r7, #8]
 800830e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008310:	4b35      	ldr	r3, [pc, #212]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a34      	ldr	r2, [pc, #208]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800831a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800831c:	f7fa f842 	bl	80023a4 <HAL_GetTick>
 8008320:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008322:	e008      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008324:	f7fa f83e 	bl	80023a4 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b64      	cmp	r3, #100	@ 0x64
 8008330:	d901      	bls.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e357      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008336:	4b2c      	ldr	r3, [pc, #176]	@ (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f0      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008342:	4b28      	ldr	r3, [pc, #160]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800834a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d035      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	429a      	cmp	r2, r3
 800835e:	d02e      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008360:	4b20      	ldr	r3, [pc, #128]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008368:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800836a:	4b1e      	ldr	r3, [pc, #120]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800836e:	4a1d      	ldr	r2, [pc, #116]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008374:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008376:	4b1b      	ldr	r3, [pc, #108]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800837a:	4a1a      	ldr	r2, [pc, #104]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008380:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008382:	4a18      	ldr	r2, [pc, #96]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008388:	4b16      	ldr	r3, [pc, #88]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800838c:	f003 0301 	and.w	r3, r3, #1
 8008390:	2b01      	cmp	r3, #1
 8008392:	d114      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008394:	f7fa f806 	bl	80023a4 <HAL_GetTick>
 8008398:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800839a:	e00a      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800839c:	f7fa f802 	bl	80023a4 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e319      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b2:	4b0c      	ldr	r3, [pc, #48]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0ee      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ca:	d111      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80083d8:	4b04      	ldr	r3, [pc, #16]	@ (80083ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80083da:	400b      	ands	r3, r1
 80083dc:	4901      	ldr	r1, [pc, #4]	@ (80083e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]
 80083e2:	e00b      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40007000 	.word	0x40007000
 80083ec:	0ffffcff 	.word	0x0ffffcff
 80083f0:	4baa      	ldr	r3, [pc, #680]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	4aa9      	ldr	r2, [pc, #676]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80083fa:	6093      	str	r3, [r2, #8]
 80083fc:	4ba7      	ldr	r3, [pc, #668]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008408:	49a4      	ldr	r1, [pc, #656]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840a:	4313      	orrs	r3, r2
 800840c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	d010      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800841a:	4ba0      	ldr	r3, [pc, #640]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008420:	4a9e      	ldr	r2, [pc, #632]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008426:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800842a:	4b9c      	ldr	r3, [pc, #624]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800842c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008434:	4999      	ldr	r1, [pc, #612]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008436:	4313      	orrs	r3, r2
 8008438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00a      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008448:	4b94      	ldr	r3, [pc, #592]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008456:	4991      	ldr	r1, [pc, #580]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008458:	4313      	orrs	r3, r2
 800845a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800846a:	4b8c      	ldr	r3, [pc, #560]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008470:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008478:	4988      	ldr	r1, [pc, #544]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800848c:	4b83      	ldr	r3, [pc, #524]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008492:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800849a:	4980      	ldr	r1, [pc, #512]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849c:	4313      	orrs	r3, r2
 800849e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084ae:	4b7b      	ldr	r3, [pc, #492]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084bc:	4977      	ldr	r1, [pc, #476]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084d0:	4b72      	ldr	r3, [pc, #456]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d6:	f023 0203 	bic.w	r2, r3, #3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084de:	496f      	ldr	r1, [pc, #444]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e0:	4313      	orrs	r3, r2
 80084e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084f2:	4b6a      	ldr	r3, [pc, #424]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f8:	f023 020c 	bic.w	r2, r3, #12
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008500:	4966      	ldr	r1, [pc, #408]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008502:	4313      	orrs	r3, r2
 8008504:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00a      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008514:	4b61      	ldr	r3, [pc, #388]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800851a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008522:	495e      	ldr	r1, [pc, #376]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008524:	4313      	orrs	r3, r2
 8008526:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008536:	4b59      	ldr	r3, [pc, #356]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800853c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008544:	4955      	ldr	r1, [pc, #340]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008546:	4313      	orrs	r3, r2
 8008548:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00a      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008558:	4b50      	ldr	r3, [pc, #320]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800855e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008566:	494d      	ldr	r1, [pc, #308]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008568:	4313      	orrs	r3, r2
 800856a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800857a:	4b48      	ldr	r3, [pc, #288]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008580:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008588:	4944      	ldr	r1, [pc, #272]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800859c:	4b3f      	ldr	r3, [pc, #252]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085aa:	493c      	ldr	r1, [pc, #240]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80085be:	4b37      	ldr	r3, [pc, #220]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085cc:	4933      	ldr	r1, [pc, #204]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085e0:	4b2e      	ldr	r3, [pc, #184]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085ee:	492b      	ldr	r1, [pc, #172]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d011      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008602:	4b26      	ldr	r3, [pc, #152]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008608:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008610:	4922      	ldr	r1, [pc, #136]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800861c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008620:	d101      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008622:	2301      	movs	r3, #1
 8008624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008632:	2301      	movs	r3, #1
 8008634:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008642:	4b16      	ldr	r3, [pc, #88]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008648:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008650:	4912      	ldr	r1, [pc, #72]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008664:	4b0d      	ldr	r3, [pc, #52]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008674:	4909      	ldr	r1, [pc, #36]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d006      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 80d9 	beq.w	8008842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008690:	4b02      	ldr	r3, [pc, #8]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a01      	ldr	r2, [pc, #4]	@ (800869c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008696:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800869a:	e001      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800869c:	40023800 	.word	0x40023800
 80086a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086a2:	f7f9 fe7f 	bl	80023a4 <HAL_GetTick>
 80086a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086a8:	e008      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086aa:	f7f9 fe7b 	bl	80023a4 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b64      	cmp	r3, #100	@ 0x64
 80086b6:	d901      	bls.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e194      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f0      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d021      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d11d      	bne.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086dc:	4b64      	ldr	r3, [pc, #400]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086e2:	0c1b      	lsrs	r3, r3, #16
 80086e4:	f003 0303 	and.w	r3, r3, #3
 80086e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80086ea:	4b61      	ldr	r3, [pc, #388]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f0:	0e1b      	lsrs	r3, r3, #24
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	019a      	lsls	r2, r3, #6
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	431a      	orrs	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	061b      	lsls	r3, r3, #24
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	071b      	lsls	r3, r3, #28
 8008710:	4957      	ldr	r1, [pc, #348]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008712:	4313      	orrs	r3, r2
 8008714:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d004      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800872c:	d00a      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008736:	2b00      	cmp	r3, #0
 8008738:	d02e      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008742:	d129      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008744:	4b4a      	ldr	r3, [pc, #296]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800874a:	0c1b      	lsrs	r3, r3, #16
 800874c:	f003 0303 	and.w	r3, r3, #3
 8008750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008752:	4b47      	ldr	r3, [pc, #284]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008758:	0f1b      	lsrs	r3, r3, #28
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	019a      	lsls	r2, r3, #6
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	041b      	lsls	r3, r3, #16
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	061b      	lsls	r3, r3, #24
 8008772:	431a      	orrs	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	071b      	lsls	r3, r3, #28
 8008778:	493d      	ldr	r1, [pc, #244]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800877a:	4313      	orrs	r3, r2
 800877c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008780:	4b3b      	ldr	r3, [pc, #236]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008782:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008786:	f023 021f 	bic.w	r2, r3, #31
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878e:	3b01      	subs	r3, #1
 8008790:	4937      	ldr	r1, [pc, #220]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008792:	4313      	orrs	r3, r2
 8008794:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01d      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80087a4:	4b32      	ldr	r3, [pc, #200]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087aa:	0e1b      	lsrs	r3, r3, #24
 80087ac:	f003 030f 	and.w	r3, r3, #15
 80087b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087b2:	4b2f      	ldr	r3, [pc, #188]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087b8:	0f1b      	lsrs	r3, r3, #28
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	019a      	lsls	r2, r3, #6
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	431a      	orrs	r2, r3
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	431a      	orrs	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	071b      	lsls	r3, r3, #28
 80087d8:	4925      	ldr	r1, [pc, #148]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d011      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	019a      	lsls	r2, r3, #6
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	041b      	lsls	r3, r3, #16
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	061b      	lsls	r3, r3, #24
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	071b      	lsls	r3, r3, #28
 8008808:	4919      	ldr	r1, [pc, #100]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800880a:	4313      	orrs	r3, r2
 800880c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008810:	4b17      	ldr	r3, [pc, #92]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a16      	ldr	r2, [pc, #88]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008816:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800881a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881c:	f7f9 fdc2 	bl	80023a4 <HAL_GetTick>
 8008820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008824:	f7f9 fdbe 	bl	80023a4 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b64      	cmp	r3, #100	@ 0x64
 8008830:	d901      	bls.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e0d7      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008836:	4b0e      	ldr	r3, [pc, #56]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b01      	cmp	r3, #1
 8008846:	f040 80cd 	bne.w	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800884a:	4b09      	ldr	r3, [pc, #36]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a08      	ldr	r2, [pc, #32]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008856:	f7f9 fda5 	bl	80023a4 <HAL_GetTick>
 800885a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800885c:	e00a      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800885e:	f7f9 fda1 	bl	80023a4 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b64      	cmp	r3, #100	@ 0x64
 800886a:	d903      	bls.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e0ba      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008870:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008874:	4b5e      	ldr	r3, [pc, #376]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800887c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008880:	d0ed      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d02e      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d12a      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088aa:	4b51      	ldr	r3, [pc, #324]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b0:	0c1b      	lsrs	r3, r3, #16
 80088b2:	f003 0303 	and.w	r3, r3, #3
 80088b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088b8:	4b4d      	ldr	r3, [pc, #308]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088be:	0f1b      	lsrs	r3, r3, #28
 80088c0:	f003 0307 	and.w	r3, r3, #7
 80088c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	019a      	lsls	r2, r3, #6
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	041b      	lsls	r3, r3, #16
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	061b      	lsls	r3, r3, #24
 80088d8:	431a      	orrs	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	071b      	lsls	r3, r3, #28
 80088de:	4944      	ldr	r1, [pc, #272]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80088e6:	4b42      	ldr	r3, [pc, #264]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f4:	3b01      	subs	r3, #1
 80088f6:	021b      	lsls	r3, r3, #8
 80088f8:	493d      	ldr	r1, [pc, #244]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d022      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008914:	d11d      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008916:	4b36      	ldr	r3, [pc, #216]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891c:	0e1b      	lsrs	r3, r3, #24
 800891e:	f003 030f 	and.w	r3, r3, #15
 8008922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008924:	4b32      	ldr	r3, [pc, #200]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800892a:	0f1b      	lsrs	r3, r3, #28
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	019a      	lsls	r2, r3, #6
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	041b      	lsls	r3, r3, #16
 800893e:	431a      	orrs	r2, r3
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	061b      	lsls	r3, r3, #24
 8008944:	431a      	orrs	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	071b      	lsls	r3, r3, #28
 800894a:	4929      	ldr	r1, [pc, #164]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894c:	4313      	orrs	r3, r2
 800894e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d028      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800895e:	4b24      	ldr	r3, [pc, #144]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008964:	0e1b      	lsrs	r3, r3, #24
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800896c:	4b20      	ldr	r3, [pc, #128]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800896e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	019a      	lsls	r2, r3, #6
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	431a      	orrs	r2, r3
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	061b      	lsls	r3, r3, #24
 800898a:	431a      	orrs	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	071b      	lsls	r3, r3, #28
 8008992:	4917      	ldr	r1, [pc, #92]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008994:	4313      	orrs	r3, r2
 8008996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800899a:	4b15      	ldr	r3, [pc, #84]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800899c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a8:	4911      	ldr	r1, [pc, #68]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80089b0:	4b0f      	ldr	r3, [pc, #60]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a0e      	ldr	r2, [pc, #56]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089bc:	f7f9 fcf2 	bl	80023a4 <HAL_GetTick>
 80089c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80089c2:	e008      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089c4:	f7f9 fcee 	bl	80023a4 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b64      	cmp	r3, #100	@ 0x64
 80089d0:	d901      	bls.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e007      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80089d6:	4b06      	ldr	r3, [pc, #24]	@ (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089e2:	d1ef      	bne.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3720      	adds	r7, #32
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	40023800 	.word	0x40023800

080089f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e09d      	b.n	8008b42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d108      	bne.n	8008a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a16:	d009      	beq.n	8008a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	61da      	str	r2, [r3, #28]
 8008a1e:	e005      	b.n	8008a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7f8 fc6c 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a6c:	d902      	bls.n	8008a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	e002      	b.n	8008a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008a82:	d007      	beq.n	8008a94 <HAL_SPI_Init+0xa0>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008a8c:	d002      	beq.n	8008a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad6:	ea42 0103 	orr.w	r1, r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ade:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	0c1b      	lsrs	r3, r3, #16
 8008af0:	f003 0204 	and.w	r2, r3, #4
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af8:	f003 0310 	and.w	r3, r3, #16
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b10:	ea42 0103 	orr.w	r1, r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d001      	beq.n	8008b6a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008b66:	2302      	movs	r3, #2
 8008b68:	e0d4      	b.n	8008d14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <HAL_SPI_Transmit_DMA+0x2a>
 8008b70:	88fb      	ldrh	r3, [r7, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e0cc      	b.n	8008d14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d101      	bne.n	8008b88 <HAL_SPI_Transmit_DMA+0x3c>
 8008b84:	2302      	movs	r3, #2
 8008b86:	e0c5      	b.n	8008d14 <HAL_SPI_Transmit_DMA+0x1c8>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2203      	movs	r2, #3
 8008b94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	88fa      	ldrh	r2, [r7, #6]
 8008ba8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	88fa      	ldrh	r2, [r7, #6]
 8008bae:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bda:	d10f      	bne.n	8008bfc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008bea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c00:	4a46      	ldr	r2, [pc, #280]	@ (8008d1c <HAL_SPI_Transmit_DMA+0x1d0>)
 8008c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c08:	4a45      	ldr	r2, [pc, #276]	@ (8008d20 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008c0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c10:	4a44      	ldr	r2, [pc, #272]	@ (8008d24 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008c12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c18:	2200      	movs	r2, #0
 8008c1a:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c2a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c34:	d82d      	bhi.n	8008c92 <HAL_SPI_Transmit_DMA+0x146>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c40:	d127      	bne.n	8008c92 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10f      	bne.n	8008c70 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c5e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	085b      	lsrs	r3, r3, #1
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c6e:	e010      	b.n	8008c92 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c7e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	330c      	adds	r3, #12
 8008ca2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ca8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008caa:	f7fa fbcb 	bl	8003444 <HAL_DMA_Start_IT>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cb8:	f043 0210 	orr.w	r2, r3, #16
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e023      	b.n	8008d14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd6:	2b40      	cmp	r3, #64	@ 0x40
 8008cd8:	d007      	beq.n	8008cea <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ce8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f042 0220 	orr.w	r2, r2, #32
 8008d00:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f042 0202 	orr.w	r2, r2, #2
 8008d10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	080096bd 	.word	0x080096bd
 8008d20:	080094d9 	.word	0x080094d9
 8008d24:	08009711 	.word	0x08009711

08008d28 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d001      	beq.n	8008d46 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008d42:	2302      	movs	r3, #2
 8008d44:	e105      	b.n	8008f52 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <HAL_SPI_Receive_DMA+0x2a>
 8008d4c:	88fb      	ldrh	r3, [r7, #6]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e0fd      	b.n	8008f52 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d110      	bne.n	8008d80 <HAL_SPI_Receive_DMA+0x58>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d66:	d10b      	bne.n	8008d80 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2204      	movs	r2, #4
 8008d6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 f8f6 	bl	8008f68 <HAL_SPI_TransmitReceive_DMA>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	e0e8      	b.n	8008f52 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d101      	bne.n	8008d8e <HAL_SPI_Receive_DMA+0x66>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e0e1      	b.n	8008f52 <HAL_SPI_Receive_DMA+0x22a>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2204      	movs	r2, #4
 8008d9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	88fa      	ldrh	r2, [r7, #6]
 8008dae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	88fa      	ldrh	r2, [r7, #6]
 8008db6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dda:	d10f      	bne.n	8008dfc <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008dfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e0a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e14:	d908      	bls.n	8008e28 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e24:	605a      	str	r2, [r3, #4]
 8008e26:	e042      	b.n	8008eae <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e36:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e42:	d134      	bne.n	8008eae <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e52:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d111      	bne.n	8008e88 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e72:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008e86:	e012      	b.n	8008eae <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e96:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	085b      	lsrs	r3, r3, #1
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f5c <HAL_SPI_Receive_DMA+0x234>)
 8008eb4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eba:	4a29      	ldr	r2, [pc, #164]	@ (8008f60 <HAL_SPI_Receive_DMA+0x238>)
 8008ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec2:	4a28      	ldr	r2, [pc, #160]	@ (8008f64 <HAL_SPI_Receive_DMA+0x23c>)
 8008ec4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eca:	2200      	movs	r2, #0
 8008ecc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	330c      	adds	r3, #12
 8008ed8:	4619      	mov	r1, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ede:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ee6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008ee8:	f7fa faac 	bl	8003444 <HAL_DMA_Start_IT>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ef6:	f043 0210 	orr.w	r2, r3, #16
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e023      	b.n	8008f52 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f14:	2b40      	cmp	r3, #64	@ 0x40
 8008f16:	d007      	beq.n	8008f28 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f26:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0220 	orr.w	r2, r2, #32
 8008f3e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0201 	orr.w	r2, r2, #1
 8008f4e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	080096d9 	.word	0x080096d9
 8008f60:	08009581 	.word	0x08009581
 8008f64:	08009711 	.word	0x08009711

08008f68 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f7c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d00c      	beq.n	8008fa4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f90:	d106      	bne.n	8008fa0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d001      	beq.n	8008fa4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e158      	b.n	8009256 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008fb0:	887b      	ldrh	r3, [r7, #2]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e14d      	b.n	8009256 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d101      	bne.n	8008fc8 <HAL_SPI_TransmitReceive_DMA+0x60>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e146      	b.n	8009256 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d003      	beq.n	8008fe4 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2205      	movs	r2, #5
 8008fe0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	887a      	ldrh	r2, [r7, #2]
 8008ff4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	887a      	ldrh	r2, [r7, #2]
 8008ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	887a      	ldrh	r2, [r7, #2]
 8009006:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	887a      	ldrh	r2, [r7, #2]
 800900e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800902c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009036:	d908      	bls.n	800904a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009046:	605a      	str	r2, [r3, #4]
 8009048:	e06f      	b.n	800912a <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009058:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009064:	d126      	bne.n	80090b4 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10f      	bne.n	8009092 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009080:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009086:	b29b      	uxth	r3, r3
 8009088:	085b      	lsrs	r3, r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009090:	e010      	b.n	80090b4 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090a0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	085b      	lsrs	r3, r3, #1
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3301      	adds	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090be:	d134      	bne.n	800912a <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090ce:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d111      	bne.n	8009104 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090ee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009102:	e012      	b.n	800912a <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009112:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800911a:	b29b      	uxth	r3, r3
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	b29b      	uxth	r3, r3
 8009120:	3301      	adds	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b04      	cmp	r3, #4
 8009134:	d108      	bne.n	8009148 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913a:	4a49      	ldr	r2, [pc, #292]	@ (8009260 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800913c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009142:	4a48      	ldr	r2, [pc, #288]	@ (8009264 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8009144:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009146:	e007      	b.n	8009158 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800914c:	4a46      	ldr	r2, [pc, #280]	@ (8009268 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800914e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009154:	4a45      	ldr	r2, [pc, #276]	@ (800926c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8009156:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800915c:	4a44      	ldr	r2, [pc, #272]	@ (8009270 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800915e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009164:	2200      	movs	r2, #0
 8009166:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	4619      	mov	r1, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009178:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009180:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009182:	f7fa f95f 	bl	8003444 <HAL_DMA_Start_IT>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009190:	f043 0210 	orr.w	r2, r3, #16
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e058      	b.n	8009256 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0201 	orr.w	r2, r2, #1
 80091b2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b8:	2200      	movs	r2, #0
 80091ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c0:	2200      	movs	r2, #0
 80091c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c8:	2200      	movs	r2, #0
 80091ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091d0:	2200      	movs	r2, #0
 80091d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091dc:	4619      	mov	r1, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	330c      	adds	r3, #12
 80091e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80091ec:	f7fa f92a 	bl	8003444 <HAL_DMA_Start_IT>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091fa:	f043 0210 	orr.w	r2, r3, #16
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e023      	b.n	8009256 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009218:	2b40      	cmp	r3, #64	@ 0x40
 800921a:	d007      	beq.n	800922c <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800922a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0220 	orr.w	r2, r2, #32
 8009242:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0202 	orr.w	r2, r2, #2
 8009252:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	080096d9 	.word	0x080096d9
 8009264:	08009581 	.word	0x08009581
 8009268:	080096f5 	.word	0x080096f5
 800926c:	0800962b 	.word	0x0800962b
 8009270:	08009711 	.word	0x08009711

08009274 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	099b      	lsrs	r3, r3, #6
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10f      	bne.n	80092b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	099b      	lsrs	r3, r3, #6
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d004      	beq.n	80092b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	4798      	blx	r3
    return;
 80092b6:	e0d7      	b.n	8009468 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	f003 0301 	and.w	r3, r3, #1
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <HAL_SPI_IRQHandler+0x66>
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	09db      	lsrs	r3, r3, #7
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
    return;
 80092d8:	e0c6      	b.n	8009468 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10c      	bne.n	8009300 <HAL_SPI_IRQHandler+0x8c>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	099b      	lsrs	r3, r3, #6
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d106      	bne.n	8009300 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	0a1b      	lsrs	r3, r3, #8
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 80b4 	beq.w	8009468 <HAL_SPI_IRQHandler+0x1f4>
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 80ad 	beq.w	8009468 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	099b      	lsrs	r3, r3, #6
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d023      	beq.n	8009362 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b03      	cmp	r3, #3
 8009324:	d011      	beq.n	800934a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800932a:	f043 0204 	orr.w	r2, r3, #4
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	e00b      	b.n	8009362 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800934a:	2300      	movs	r3, #0
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	613b      	str	r3, [r7, #16]
 800935e:	693b      	ldr	r3, [r7, #16]
        return;
 8009360:	e082      	b.n	8009468 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	095b      	lsrs	r3, r3, #5
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d014      	beq.n	8009398 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009372:	f043 0201 	orr.w	r2, r3, #1
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800937a:	2300      	movs	r3, #0
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00c      	beq.n	80093be <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093a8:	f043 0208 	orr.w	r2, r3, #8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80093b0:	2300      	movs	r3, #0
 80093b2:	60bb      	str	r3, [r7, #8]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	60bb      	str	r3, [r7, #8]
 80093bc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d04f      	beq.n	8009466 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <HAL_SPI_IRQHandler+0x17e>
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d034      	beq.n	800945c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f022 0203 	bic.w	r2, r2, #3
 8009400:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009406:	2b00      	cmp	r3, #0
 8009408:	d011      	beq.n	800942e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940e:	4a18      	ldr	r2, [pc, #96]	@ (8009470 <HAL_SPI_IRQHandler+0x1fc>)
 8009410:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009416:	4618      	mov	r0, r3
 8009418:	f7fa f8e4 	bl	80035e4 <HAL_DMA_Abort_IT>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009426:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009432:	2b00      	cmp	r3, #0
 8009434:	d016      	beq.n	8009464 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943a:	4a0d      	ldr	r2, [pc, #52]	@ (8009470 <HAL_SPI_IRQHandler+0x1fc>)
 800943c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009442:	4618      	mov	r0, r3
 8009444:	f7fa f8ce 	bl	80035e4 <HAL_DMA_Abort_IT>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009452:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800945a:	e003      	b.n	8009464 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f831 	bl	80094c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009462:	e000      	b.n	8009466 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009464:	bf00      	nop
    return;
 8009466:	bf00      	nop
  }
}
 8009468:	3720      	adds	r7, #32
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	08009751 	.word	0x08009751

08009474 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094e6:	f7f8 ff5d 	bl	80023a4 <HAL_GetTick>
 80094ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094fa:	d03b      	beq.n	8009574 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 0220 	bic.w	r2, r2, #32
 800950a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f022 0202 	bic.w	r2, r2, #2
 800951a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	2164      	movs	r1, #100	@ 0x64
 8009520:	6978      	ldr	r0, [r7, #20]
 8009522:	f000 fac5 	bl	8009ab0 <SPI_EndRxTxTransaction>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d005      	beq.n	8009538 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009530:	f043 0220 	orr.w	r2, r3, #32
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009540:	2300      	movs	r3, #0
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2200      	movs	r2, #0
 800955a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800956c:	6978      	ldr	r0, [r7, #20]
 800956e:	f7ff ffa9 	bl	80094c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009572:	e002      	b.n	800957a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009574:	6978      	ldr	r0, [r7, #20]
 8009576:	f016 fcf1 	bl	801ff5c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800958c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800958e:	f7f8 ff09 	bl	80023a4 <HAL_GetTick>
 8009592:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800959e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095a2:	d03c      	beq.n	800961e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 0220 	bic.w	r2, r2, #32
 80095b2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10d      	bne.n	80095d8 <SPI_DMAReceiveCplt+0x58>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095c4:	d108      	bne.n	80095d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 0203 	bic.w	r2, r2, #3
 80095d4:	605a      	str	r2, [r3, #4]
 80095d6:	e007      	b.n	80095e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0201 	bic.w	r2, r2, #1
 80095e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	2164      	movs	r1, #100	@ 0x64
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f9e3 	bl	80099b8 <SPI_EndRxTransaction>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2220      	movs	r2, #32
 80095fc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7ff ff54 	bl	80094c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800961c:	e002      	b.n	8009624 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f016 fcbe 	bl	801ffa0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009636:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009638:	f7f8 feb4 	bl	80023a4 <HAL_GetTick>
 800963c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800964c:	d030      	beq.n	80096b0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0220 	bic.w	r2, r2, #32
 800965c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	2164      	movs	r1, #100	@ 0x64
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 fa24 	bl	8009ab0 <SPI_EndRxTxTransaction>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d005      	beq.n	800967a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009672:	f043 0220 	orr.w	r2, r3, #32
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0203 	bic.w	r2, r2, #3
 8009688:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff ff0b 	bl	80094c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096ae:	e002      	b.n	80096b6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff fedf 	bl	8009474 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff fedc 	bl	8009488 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096d0:	bf00      	nop
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff fed8 	bl	800949c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096ec:	bf00      	nop
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009700:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff fed4 	bl	80094b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009708:	bf00      	nop
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 0203 	bic.w	r2, r2, #3
 800972c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009732:	f043 0210 	orr.w	r2, r3, #16
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff febe 	bl	80094c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800975c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7ff fea9 	bl	80094c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009772:	bf00      	nop
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	4613      	mov	r3, r2
 800978a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800978c:	f7f8 fe0a 	bl	80023a4 <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	4413      	add	r3, r2
 800979a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800979c:	f7f8 fe02 	bl	80023a4 <HAL_GetTick>
 80097a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097a2:	4b39      	ldr	r3, [pc, #228]	@ (8009888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	015b      	lsls	r3, r3, #5
 80097a8:	0d1b      	lsrs	r3, r3, #20
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	fb02 f303 	mul.w	r3, r2, r3
 80097b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097b2:	e055      	b.n	8009860 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097ba:	d051      	beq.n	8009860 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097bc:	f7f8 fdf2 	bl	80023a4 <HAL_GetTick>
 80097c0:	4602      	mov	r2, r0
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d902      	bls.n	80097d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d13d      	bne.n	800984e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80097e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097ea:	d111      	bne.n	8009810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097f4:	d004      	beq.n	8009800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097fe:	d107      	bne.n	8009810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800980e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009818:	d10f      	bne.n	800983a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e018      	b.n	8009880 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	61fb      	str	r3, [r7, #28]
 8009858:	e002      	b.n	8009860 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	3b01      	subs	r3, #1
 800985e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	4013      	ands	r3, r2
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	429a      	cmp	r2, r3
 800986e:	bf0c      	ite	eq
 8009870:	2301      	moveq	r3, #1
 8009872:	2300      	movne	r3, #0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	461a      	mov	r2, r3
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	429a      	cmp	r2, r3
 800987c:	d19a      	bne.n	80097b4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3720      	adds	r7, #32
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20000000 	.word	0x20000000

0800988c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	@ 0x28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800989e:	f7f8 fd81 	bl	80023a4 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a6:	1a9b      	subs	r3, r3, r2
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	4413      	add	r3, r2
 80098ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80098ae:	f7f8 fd79 	bl	80023a4 <HAL_GetTick>
 80098b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	330c      	adds	r3, #12
 80098ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80098bc:	4b3d      	ldr	r3, [pc, #244]	@ (80099b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	00da      	lsls	r2, r3, #3
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	0d1b      	lsrs	r3, r3, #20
 80098cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098ce:	fb02 f303 	mul.w	r3, r2, r3
 80098d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80098d4:	e061      	b.n	800999a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80098dc:	d107      	bne.n	80098ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d104      	bne.n	80098ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098f4:	d051      	beq.n	800999a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098f6:	f7f8 fd55 	bl	80023a4 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009902:	429a      	cmp	r2, r3
 8009904:	d902      	bls.n	800990c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009908:	2b00      	cmp	r3, #0
 800990a:	d13d      	bne.n	8009988 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800991a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009924:	d111      	bne.n	800994a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800992e:	d004      	beq.n	800993a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009938:	d107      	bne.n	800994a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009948:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009952:	d10f      	bne.n	8009974 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009972:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e011      	b.n	80099ac <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	627b      	str	r3, [r7, #36]	@ 0x24
 8009992:	e002      	b.n	800999a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	3b01      	subs	r3, #1
 8009998:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	4013      	ands	r3, r2
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d195      	bne.n	80098d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3728      	adds	r7, #40	@ 0x28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	20000000 	.word	0x20000000

080099b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af02      	add	r7, sp, #8
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099cc:	d111      	bne.n	80099f2 <SPI_EndRxTransaction+0x3a>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d6:	d004      	beq.n	80099e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e0:	d107      	bne.n	80099f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099fa:	d112      	bne.n	8009a22 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2200      	movs	r2, #0
 8009a04:	2180      	movs	r1, #128	@ 0x80
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f7ff feb8 	bl	800977c <SPI_WaitFlagStateUntilTimeout>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d021      	beq.n	8009a56 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a16:	f043 0220 	orr.w	r2, r3, #32
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e03d      	b.n	8009a9e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a22:	4b21      	ldr	r3, [pc, #132]	@ (8009aa8 <SPI_EndRxTransaction+0xf0>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a21      	ldr	r2, [pc, #132]	@ (8009aac <SPI_EndRxTransaction+0xf4>)
 8009a28:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2c:	0d5b      	lsrs	r3, r3, #21
 8009a2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a32:	fb02 f303 	mul.w	r3, r2, r3
 8009a36:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00a      	beq.n	8009a54 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a4e:	2b80      	cmp	r3, #128	@ 0x80
 8009a50:	d0f2      	beq.n	8009a38 <SPI_EndRxTransaction+0x80>
 8009a52:	e000      	b.n	8009a56 <SPI_EndRxTransaction+0x9e>
        break;
 8009a54:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a5e:	d11d      	bne.n	8009a9c <SPI_EndRxTransaction+0xe4>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a68:	d004      	beq.n	8009a74 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a72:	d113      	bne.n	8009a9c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff ff03 	bl	800988c <SPI_WaitFifoStateUntilTimeout>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d007      	beq.n	8009a9c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a90:	f043 0220 	orr.w	r2, r3, #32
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e000      	b.n	8009a9e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3718      	adds	r7, #24
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20000000 	.word	0x20000000
 8009aac:	165e9f81 	.word	0x165e9f81

08009ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af02      	add	r7, sp, #8
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7ff fedf 	bl	800988c <SPI_WaitFifoStateUntilTimeout>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d007      	beq.n	8009ae4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ad8:	f043 0220 	orr.w	r2, r3, #32
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e046      	b.n	8009b72 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ae4:	4b25      	ldr	r3, [pc, #148]	@ (8009b7c <SPI_EndRxTxTransaction+0xcc>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a25      	ldr	r2, [pc, #148]	@ (8009b80 <SPI_EndRxTxTransaction+0xd0>)
 8009aea:	fba2 2303 	umull	r2, r3, r2, r3
 8009aee:	0d5b      	lsrs	r3, r3, #21
 8009af0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009af4:	fb02 f303 	mul.w	r3, r2, r3
 8009af8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b02:	d112      	bne.n	8009b2a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2180      	movs	r1, #128	@ 0x80
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f7ff fe34 	bl	800977c <SPI_WaitFlagStateUntilTimeout>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d016      	beq.n	8009b48 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b1e:	f043 0220 	orr.w	r2, r3, #32
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e023      	b.n	8009b72 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00a      	beq.n	8009b46 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b40:	2b80      	cmp	r3, #128	@ 0x80
 8009b42:	d0f2      	beq.n	8009b2a <SPI_EndRxTxTransaction+0x7a>
 8009b44:	e000      	b.n	8009b48 <SPI_EndRxTxTransaction+0x98>
        break;
 8009b46:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff fe99 	bl	800988c <SPI_WaitFifoStateUntilTimeout>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d007      	beq.n	8009b70 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b64:	f043 0220 	orr.w	r2, r3, #32
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e000      	b.n	8009b72 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000000 	.word	0x20000000
 8009b80:	165e9f81 	.word	0x165e9f81

08009b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e049      	b.n	8009c2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d106      	bne.n	8009bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7f8 f824 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	f000 fb40 	bl	800a248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d001      	beq.n	8009c4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e04c      	b.n	8009ce6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a26      	ldr	r2, [pc, #152]	@ (8009cf4 <HAL_TIM_Base_Start+0xc0>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d022      	beq.n	8009ca4 <HAL_TIM_Base_Start+0x70>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c66:	d01d      	beq.n	8009ca4 <HAL_TIM_Base_Start+0x70>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a22      	ldr	r2, [pc, #136]	@ (8009cf8 <HAL_TIM_Base_Start+0xc4>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d018      	beq.n	8009ca4 <HAL_TIM_Base_Start+0x70>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a21      	ldr	r2, [pc, #132]	@ (8009cfc <HAL_TIM_Base_Start+0xc8>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d013      	beq.n	8009ca4 <HAL_TIM_Base_Start+0x70>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a1f      	ldr	r2, [pc, #124]	@ (8009d00 <HAL_TIM_Base_Start+0xcc>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d00e      	beq.n	8009ca4 <HAL_TIM_Base_Start+0x70>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8009d04 <HAL_TIM_Base_Start+0xd0>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d009      	beq.n	8009ca4 <HAL_TIM_Base_Start+0x70>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a1c      	ldr	r2, [pc, #112]	@ (8009d08 <HAL_TIM_Base_Start+0xd4>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d004      	beq.n	8009ca4 <HAL_TIM_Base_Start+0x70>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8009d0c <HAL_TIM_Base_Start+0xd8>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d115      	bne.n	8009cd0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689a      	ldr	r2, [r3, #8]
 8009caa:	4b19      	ldr	r3, [pc, #100]	@ (8009d10 <HAL_TIM_Base_Start+0xdc>)
 8009cac:	4013      	ands	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b06      	cmp	r3, #6
 8009cb4:	d015      	beq.n	8009ce2 <HAL_TIM_Base_Start+0xae>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cbc:	d011      	beq.n	8009ce2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f042 0201 	orr.w	r2, r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cce:	e008      	b.n	8009ce2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0201 	orr.w	r2, r2, #1
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	e000      	b.n	8009ce4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	40000400 	.word	0x40000400
 8009cfc:	40000800 	.word	0x40000800
 8009d00:	40000c00 	.word	0x40000c00
 8009d04:	40010400 	.word	0x40010400
 8009d08:	40014000 	.word	0x40014000
 8009d0c:	40001800 	.word	0x40001800
 8009d10:	00010007 	.word	0x00010007

08009d14 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6a1a      	ldr	r2, [r3, #32]
 8009d22:	4b0f      	ldr	r3, [pc, #60]	@ (8009d60 <HAL_TIM_Base_Stop+0x4c>)
 8009d24:	4013      	ands	r3, r2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10f      	bne.n	8009d4a <HAL_TIM_Base_Stop+0x36>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6a1a      	ldr	r2, [r3, #32]
 8009d30:	f240 4344 	movw	r3, #1092	@ 0x444
 8009d34:	4013      	ands	r3, r2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d107      	bne.n	8009d4a <HAL_TIM_Base_Stop+0x36>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0201 	bic.w	r2, r2, #1
 8009d48:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	00111111 	.word	0x00111111

08009d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d001      	beq.n	8009d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e054      	b.n	8009e26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0201 	orr.w	r2, r2, #1
 8009d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a26      	ldr	r2, [pc, #152]	@ (8009e34 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d022      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x80>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009da6:	d01d      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x80>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a22      	ldr	r2, [pc, #136]	@ (8009e38 <HAL_TIM_Base_Start_IT+0xd4>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d018      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x80>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a21      	ldr	r2, [pc, #132]	@ (8009e3c <HAL_TIM_Base_Start_IT+0xd8>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d013      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x80>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009e40 <HAL_TIM_Base_Start_IT+0xdc>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d00e      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x80>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a1e      	ldr	r2, [pc, #120]	@ (8009e44 <HAL_TIM_Base_Start_IT+0xe0>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d009      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x80>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e48 <HAL_TIM_Base_Start_IT+0xe4>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d004      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x80>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a1b      	ldr	r2, [pc, #108]	@ (8009e4c <HAL_TIM_Base_Start_IT+0xe8>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d115      	bne.n	8009e10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689a      	ldr	r2, [r3, #8]
 8009dea:	4b19      	ldr	r3, [pc, #100]	@ (8009e50 <HAL_TIM_Base_Start_IT+0xec>)
 8009dec:	4013      	ands	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b06      	cmp	r3, #6
 8009df4:	d015      	beq.n	8009e22 <HAL_TIM_Base_Start_IT+0xbe>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dfc:	d011      	beq.n	8009e22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f042 0201 	orr.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0e:	e008      	b.n	8009e22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f042 0201 	orr.w	r2, r2, #1
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	e000      	b.n	8009e24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	40010000 	.word	0x40010000
 8009e38:	40000400 	.word	0x40000400
 8009e3c:	40000800 	.word	0x40000800
 8009e40:	40000c00 	.word	0x40000c00
 8009e44:	40010400 	.word	0x40010400
 8009e48:	40014000 	.word	0x40014000
 8009e4c:	40001800 	.word	0x40001800
 8009e50:	00010007 	.word	0x00010007

08009e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d020      	beq.n	8009eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01b      	beq.n	8009eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f06f 0202 	mvn.w	r2, #2
 8009e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	699b      	ldr	r3, [r3, #24]
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f9b4 	bl	800a20c <HAL_TIM_IC_CaptureCallback>
 8009ea4:	e005      	b.n	8009eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f9a6 	bl	800a1f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f9b7 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d020      	beq.n	8009f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01b      	beq.n	8009f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f06f 0204 	mvn.w	r2, #4
 8009ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f98e 	bl	800a20c <HAL_TIM_IC_CaptureCallback>
 8009ef0:	e005      	b.n	8009efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f980 	bl	800a1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f991 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f003 0308 	and.w	r3, r3, #8
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d020      	beq.n	8009f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f003 0308 	and.w	r3, r3, #8
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01b      	beq.n	8009f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f06f 0208 	mvn.w	r2, #8
 8009f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2204      	movs	r2, #4
 8009f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	f003 0303 	and.w	r3, r3, #3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f968 	bl	800a20c <HAL_TIM_IC_CaptureCallback>
 8009f3c:	e005      	b.n	8009f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f95a 	bl	800a1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f96b 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f003 0310 	and.w	r3, r3, #16
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d020      	beq.n	8009f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f003 0310 	and.w	r3, r3, #16
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01b      	beq.n	8009f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0210 	mvn.w	r2, #16
 8009f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2208      	movs	r2, #8
 8009f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f942 	bl	800a20c <HAL_TIM_IC_CaptureCallback>
 8009f88:	e005      	b.n	8009f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f934 	bl	800a1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f945 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00c      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d007      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f06f 0201 	mvn.w	r2, #1
 8009fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7f7 f924 	bl	8001208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00c      	beq.n	8009fee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d007      	beq.n	8009fee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fb05 	bl	800a5f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00c      	beq.n	800a012 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d007      	beq.n	800a012 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fafd 	bl	800a60c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00c      	beq.n	800a036 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a022:	2b00      	cmp	r3, #0
 800a024:	d007      	beq.n	800a036 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a02e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f8ff 	bl	800a234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f003 0320 	and.w	r3, r3, #32
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00c      	beq.n	800a05a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f06f 0220 	mvn.w	r2, #32
 800a052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fac5 	bl	800a5e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a05a:	bf00      	nop
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d101      	bne.n	800a080 <HAL_TIM_ConfigClockSource+0x1c>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e0b4      	b.n	800a1ea <HAL_TIM_ConfigClockSource+0x186>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2202      	movs	r2, #2
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	4b56      	ldr	r3, [pc, #344]	@ (800a1f4 <HAL_TIM_ConfigClockSource+0x190>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0b8:	d03e      	beq.n	800a138 <HAL_TIM_ConfigClockSource+0xd4>
 800a0ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0be:	f200 8087 	bhi.w	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0c6:	f000 8086 	beq.w	800a1d6 <HAL_TIM_ConfigClockSource+0x172>
 800a0ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0ce:	d87f      	bhi.n	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0d0:	2b70      	cmp	r3, #112	@ 0x70
 800a0d2:	d01a      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0xa6>
 800a0d4:	2b70      	cmp	r3, #112	@ 0x70
 800a0d6:	d87b      	bhi.n	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0d8:	2b60      	cmp	r3, #96	@ 0x60
 800a0da:	d050      	beq.n	800a17e <HAL_TIM_ConfigClockSource+0x11a>
 800a0dc:	2b60      	cmp	r3, #96	@ 0x60
 800a0de:	d877      	bhi.n	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0e0:	2b50      	cmp	r3, #80	@ 0x50
 800a0e2:	d03c      	beq.n	800a15e <HAL_TIM_ConfigClockSource+0xfa>
 800a0e4:	2b50      	cmp	r3, #80	@ 0x50
 800a0e6:	d873      	bhi.n	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0e8:	2b40      	cmp	r3, #64	@ 0x40
 800a0ea:	d058      	beq.n	800a19e <HAL_TIM_ConfigClockSource+0x13a>
 800a0ec:	2b40      	cmp	r3, #64	@ 0x40
 800a0ee:	d86f      	bhi.n	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f0:	2b30      	cmp	r3, #48	@ 0x30
 800a0f2:	d064      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0x15a>
 800a0f4:	2b30      	cmp	r3, #48	@ 0x30
 800a0f6:	d86b      	bhi.n	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	d060      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0x15a>
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d867      	bhi.n	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d05c      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0x15a>
 800a104:	2b10      	cmp	r3, #16
 800a106:	d05a      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0x15a>
 800a108:	e062      	b.n	800a1d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a11a:	f000 f9b5 	bl	800a488 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a12c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	609a      	str	r2, [r3, #8]
      break;
 800a136:	e04f      	b.n	800a1d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a148:	f000 f99e 	bl	800a488 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a15a:	609a      	str	r2, [r3, #8]
      break;
 800a15c:	e03c      	b.n	800a1d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a16a:	461a      	mov	r2, r3
 800a16c:	f000 f912 	bl	800a394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2150      	movs	r1, #80	@ 0x50
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f96b 	bl	800a452 <TIM_ITRx_SetConfig>
      break;
 800a17c:	e02c      	b.n	800a1d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a18a:	461a      	mov	r2, r3
 800a18c:	f000 f931 	bl	800a3f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2160      	movs	r1, #96	@ 0x60
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f95b 	bl	800a452 <TIM_ITRx_SetConfig>
      break;
 800a19c:	e01c      	b.n	800a1d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f000 f8f2 	bl	800a394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2140      	movs	r1, #64	@ 0x40
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f94b 	bl	800a452 <TIM_ITRx_SetConfig>
      break;
 800a1bc:	e00c      	b.n	800a1d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	f000 f942 	bl	800a452 <TIM_ITRx_SetConfig>
      break;
 800a1ce:	e003      	b.n	800a1d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d4:	e000      	b.n	800a1d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a1d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	fffeff88 	.word	0xfffeff88

0800a1f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a43      	ldr	r2, [pc, #268]	@ (800a368 <TIM_Base_SetConfig+0x120>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d013      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a266:	d00f      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a40      	ldr	r2, [pc, #256]	@ (800a36c <TIM_Base_SetConfig+0x124>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00b      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a3f      	ldr	r2, [pc, #252]	@ (800a370 <TIM_Base_SetConfig+0x128>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d007      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a3e      	ldr	r2, [pc, #248]	@ (800a374 <TIM_Base_SetConfig+0x12c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d003      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a3d      	ldr	r2, [pc, #244]	@ (800a378 <TIM_Base_SetConfig+0x130>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d108      	bne.n	800a29a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a28e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a32      	ldr	r2, [pc, #200]	@ (800a368 <TIM_Base_SetConfig+0x120>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d02b      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a8:	d027      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a2f      	ldr	r2, [pc, #188]	@ (800a36c <TIM_Base_SetConfig+0x124>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d023      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a2e      	ldr	r2, [pc, #184]	@ (800a370 <TIM_Base_SetConfig+0x128>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d01f      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a2d      	ldr	r2, [pc, #180]	@ (800a374 <TIM_Base_SetConfig+0x12c>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d01b      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a2c      	ldr	r2, [pc, #176]	@ (800a378 <TIM_Base_SetConfig+0x130>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d017      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a2b      	ldr	r2, [pc, #172]	@ (800a37c <TIM_Base_SetConfig+0x134>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d013      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a2a      	ldr	r2, [pc, #168]	@ (800a380 <TIM_Base_SetConfig+0x138>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00f      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a29      	ldr	r2, [pc, #164]	@ (800a384 <TIM_Base_SetConfig+0x13c>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d00b      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a28      	ldr	r2, [pc, #160]	@ (800a388 <TIM_Base_SetConfig+0x140>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d007      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a27      	ldr	r2, [pc, #156]	@ (800a38c <TIM_Base_SetConfig+0x144>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d003      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a26      	ldr	r2, [pc, #152]	@ (800a390 <TIM_Base_SetConfig+0x148>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d108      	bne.n	800a30c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4313      	orrs	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	689a      	ldr	r2, [r3, #8]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a0e      	ldr	r2, [pc, #56]	@ (800a368 <TIM_Base_SetConfig+0x120>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d003      	beq.n	800a33a <TIM_Base_SetConfig+0xf2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a10      	ldr	r2, [pc, #64]	@ (800a378 <TIM_Base_SetConfig+0x130>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d103      	bne.n	800a342 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	691a      	ldr	r2, [r3, #16]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f043 0204 	orr.w	r2, r3, #4
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	601a      	str	r2, [r3, #0]
}
 800a35a:	bf00      	nop
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	40010000 	.word	0x40010000
 800a36c:	40000400 	.word	0x40000400
 800a370:	40000800 	.word	0x40000800
 800a374:	40000c00 	.word	0x40000c00
 800a378:	40010400 	.word	0x40010400
 800a37c:	40014000 	.word	0x40014000
 800a380:	40014400 	.word	0x40014400
 800a384:	40014800 	.word	0x40014800
 800a388:	40001800 	.word	0x40001800
 800a38c:	40001c00 	.word	0x40001c00
 800a390:	40002000 	.word	0x40002000

0800a394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
 800a3a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a1b      	ldr	r3, [r3, #32]
 800a3aa:	f023 0201 	bic.w	r2, r3, #1
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a3be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f023 030a 	bic.w	r3, r3, #10
 800a3d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	621a      	str	r2, [r3, #32]
}
 800a3e6:	bf00      	nop
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b087      	sub	sp, #28
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	f023 0210 	bic.w	r2, r3, #16
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a41c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	031b      	lsls	r3, r3, #12
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	4313      	orrs	r3, r2
 800a426:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a42e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	4313      	orrs	r3, r2
 800a438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	621a      	str	r2, [r3, #32]
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a452:	b480      	push	{r7}
 800a454:	b085      	sub	sp, #20
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4313      	orrs	r3, r2
 800a470:	f043 0307 	orr.w	r3, r3, #7
 800a474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	609a      	str	r2, [r3, #8]
}
 800a47c:	bf00      	nop
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	021a      	lsls	r2, r3, #8
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	609a      	str	r2, [r3, #8]
}
 800a4bc:	bf00      	nop
 800a4be:	371c      	adds	r7, #28
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d101      	bne.n	800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	e06d      	b.n	800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a30      	ldr	r2, [pc, #192]	@ (800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d004      	beq.n	800a514 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a2f      	ldr	r2, [pc, #188]	@ (800a5cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d108      	bne.n	800a526 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a51a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4313      	orrs	r3, r2
 800a524:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a52c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a20      	ldr	r2, [pc, #128]	@ (800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d022      	beq.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a552:	d01d      	beq.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d018      	beq.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d013      	beq.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a1a      	ldr	r2, [pc, #104]	@ (800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d00e      	beq.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a15      	ldr	r2, [pc, #84]	@ (800a5cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d009      	beq.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a16      	ldr	r2, [pc, #88]	@ (800a5dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d004      	beq.n	800a590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a15      	ldr	r2, [pc, #84]	@ (800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d10c      	bne.n	800a5aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	40010000 	.word	0x40010000
 800a5cc:	40010400 	.word	0x40010400
 800a5d0:	40000400 	.word	0x40000400
 800a5d4:	40000800 	.word	0x40000800
 800a5d8:	40000c00 	.word	0x40000c00
 800a5dc:	40014000 	.word	0x40014000
 800a5e0:	40001800 	.word	0x40001800

0800a5e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e040      	b.n	800a6b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a636:	2b00      	cmp	r3, #0
 800a638:	d106      	bne.n	800a648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7f7 fbd4 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2224      	movs	r2, #36	@ 0x24
 800a64c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0201 	bic.w	r2, r2, #1
 800a65c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 fece 	bl	800b408 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fc67 	bl	800af40 <UART_SetConfig>
 800a672:	4603      	mov	r3, r0
 800a674:	2b01      	cmp	r3, #1
 800a676:	d101      	bne.n	800a67c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e01b      	b.n	800a6b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a68a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	689a      	ldr	r2, [r3, #8]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a69a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f042 0201 	orr.w	r2, r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 ff4d 	bl	800b54c <UART_CheckIdleState>
 800a6b2:	4603      	mov	r3, r0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08a      	sub	sp, #40	@ 0x28
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6d0:	2b20      	cmp	r3, #32
 800a6d2:	d177      	bne.n	800a7c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <HAL_UART_Transmit+0x24>
 800a6da:	88fb      	ldrh	r3, [r7, #6]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e070      	b.n	800a7c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2221      	movs	r2, #33	@ 0x21
 800a6f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6f2:	f7f7 fe57 	bl	80023a4 <HAL_GetTick>
 800a6f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	88fa      	ldrh	r2, [r7, #6]
 800a6fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	88fa      	ldrh	r2, [r7, #6]
 800a704:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a710:	d108      	bne.n	800a724 <HAL_UART_Transmit+0x68>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d104      	bne.n	800a724 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	61bb      	str	r3, [r7, #24]
 800a722:	e003      	b.n	800a72c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a728:	2300      	movs	r3, #0
 800a72a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a72c:	e02f      	b.n	800a78e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2200      	movs	r2, #0
 800a736:	2180      	movs	r1, #128	@ 0x80
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 ff5e 	bl	800b5fa <UART_WaitOnFlagUntilTimeout>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d004      	beq.n	800a74e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2220      	movs	r2, #32
 800a748:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e03b      	b.n	800a7c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10b      	bne.n	800a76c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	461a      	mov	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a762:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	3302      	adds	r3, #2
 800a768:	61bb      	str	r3, [r7, #24]
 800a76a:	e007      	b.n	800a77c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	781a      	ldrb	r2, [r3, #0]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	3301      	adds	r3, #1
 800a77a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a782:	b29b      	uxth	r3, r3
 800a784:	3b01      	subs	r3, #1
 800a786:	b29a      	uxth	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a794:	b29b      	uxth	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1c9      	bne.n	800a72e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2140      	movs	r1, #64	@ 0x40
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 ff28 	bl	800b5fa <UART_WaitOnFlagUntilTimeout>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d004      	beq.n	800a7ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2220      	movs	r2, #32
 800a7b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e005      	b.n	800a7c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e000      	b.n	800a7c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a7c4:	2302      	movs	r3, #2
  }
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b08b      	sub	sp, #44	@ 0x2c
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7e2:	2b20      	cmp	r3, #32
 800a7e4:	d147      	bne.n	800a876 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <HAL_UART_Transmit_IT+0x22>
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e040      	b.n	800a878 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	88fa      	ldrh	r2, [r7, #6]
 800a800:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	88fa      	ldrh	r2, [r7, #6]
 800a808:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2221      	movs	r2, #33	@ 0x21
 800a81e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a828:	d107      	bne.n	800a83a <HAL_UART_Transmit_IT+0x6a>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d103      	bne.n	800a83a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	4a13      	ldr	r2, [pc, #76]	@ (800a884 <HAL_UART_Transmit_IT+0xb4>)
 800a836:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a838:	e002      	b.n	800a840 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4a12      	ldr	r2, [pc, #72]	@ (800a888 <HAL_UART_Transmit_IT+0xb8>)
 800a83e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	e853 3f00 	ldrex	r3, [r3]
 800a84c:	613b      	str	r3, [r7, #16]
   return(result);
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a854:	627b      	str	r3, [r7, #36]	@ 0x24
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85e:	623b      	str	r3, [r7, #32]
 800a860:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a862:	69f9      	ldr	r1, [r7, #28]
 800a864:	6a3a      	ldr	r2, [r7, #32]
 800a866:	e841 2300 	strex	r3, r2, [r1]
 800a86a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1e6      	bne.n	800a840 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	e000      	b.n	800a878 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a876:	2302      	movs	r3, #2
  }
}
 800a878:	4618      	mov	r0, r3
 800a87a:	372c      	adds	r7, #44	@ 0x2c
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	0800bc51 	.word	0x0800bc51
 800a888:	0800bb9b 	.word	0x0800bb9b

0800a88c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08a      	sub	sp, #40	@ 0x28
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	4613      	mov	r3, r2
 800a898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8a0:	2b20      	cmp	r3, #32
 800a8a2:	d132      	bne.n	800a90a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d002      	beq.n	800a8b0 <HAL_UART_Receive_DMA+0x24>
 800a8aa:	88fb      	ldrh	r3, [r7, #6]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e02b      	b.n	800a90c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d018      	beq.n	800a8fa <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	e853 3f00 	ldrex	r3, [r3]
 800a8d4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a8dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e6:	623b      	str	r3, [r7, #32]
 800a8e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	69f9      	ldr	r1, [r7, #28]
 800a8ec:	6a3a      	ldr	r2, [r7, #32]
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e6      	bne.n	800a8c8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a8fa:	88fb      	ldrh	r3, [r7, #6]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	68b9      	ldr	r1, [r7, #8]
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f000 fee7 	bl	800b6d4 <UART_Start_Receive_DMA>
 800a906:	4603      	mov	r3, r0
 800a908:	e000      	b.n	800a90c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a90a:	2302      	movs	r3, #2
  }
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3728      	adds	r7, #40	@ 0x28
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b0ba      	sub	sp, #232	@ 0xe8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a93a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a93e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a942:	4013      	ands	r3, r2
 800a944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d115      	bne.n	800a97c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a954:	f003 0320 	and.w	r3, r3, #32
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00f      	beq.n	800a97c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a960:	f003 0320 	and.w	r3, r3, #32
 800a964:	2b00      	cmp	r3, #0
 800a966:	d009      	beq.n	800a97c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 82b1 	beq.w	800aed4 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	4798      	blx	r3
      }
      return;
 800a97a:	e2ab      	b.n	800aed4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a97c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 8117 	beq.w	800abb4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d106      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a996:	4b85      	ldr	r3, [pc, #532]	@ (800abac <HAL_UART_IRQHandler+0x298>)
 800a998:	4013      	ands	r3, r2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 810a 	beq.w	800abb4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d011      	beq.n	800a9d0 <HAL_UART_IRQHandler+0xbc>
 800a9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00b      	beq.n	800a9d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9c6:	f043 0201 	orr.w	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d011      	beq.n	800aa00 <HAL_UART_IRQHandler+0xec>
 800a9dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00b      	beq.n	800aa00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9f6:	f043 0204 	orr.w	r2, r3, #4
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d011      	beq.n	800aa30 <HAL_UART_IRQHandler+0x11c>
 800aa0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa26:	f043 0202 	orr.w	r2, r3, #2
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa34:	f003 0308 	and.w	r3, r3, #8
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d017      	beq.n	800aa6c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa40:	f003 0320 	and.w	r3, r3, #32
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d105      	bne.n	800aa54 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aa48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa4c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2208      	movs	r2, #8
 800aa5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa62:	f043 0208 	orr.w	r2, r3, #8
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d012      	beq.n	800aa9e <HAL_UART_IRQHandler+0x18a>
 800aa78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00c      	beq.n	800aa9e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa94:	f043 0220 	orr.w	r2, r3, #32
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8217 	beq.w	800aed8 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aaaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaae:	f003 0320 	and.w	r3, r3, #32
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00d      	beq.n	800aad2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaba:	f003 0320 	and.w	r3, r3, #32
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d007      	beq.n	800aad2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d003      	beq.n	800aad2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aad8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aae6:	2b40      	cmp	r3, #64	@ 0x40
 800aae8:	d005      	beq.n	800aaf6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aaea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aaee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d04f      	beq.n	800ab96 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 feb2 	bl	800b860 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab06:	2b40      	cmp	r3, #64	@ 0x40
 800ab08:	d141      	bne.n	800ab8e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3308      	adds	r3, #8
 800ab10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab18:	e853 3f00 	ldrex	r3, [r3]
 800ab1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ab20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3308      	adds	r3, #8
 800ab32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ab36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ab3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ab42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ab4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1d9      	bne.n	800ab0a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d013      	beq.n	800ab86 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab62:	4a13      	ldr	r2, [pc, #76]	@ (800abb0 <HAL_UART_IRQHandler+0x29c>)
 800ab64:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f8 fd3a 	bl	80035e4 <HAL_DMA_Abort_IT>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d017      	beq.n	800aba6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ab80:	4610      	mov	r0, r2
 800ab82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab84:	e00f      	b.n	800aba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f9c4 	bl	800af14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab8c:	e00b      	b.n	800aba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f9c0 	bl	800af14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab94:	e007      	b.n	800aba6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f9bc 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800aba4:	e198      	b.n	800aed8 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba6:	bf00      	nop
    return;
 800aba8:	e196      	b.n	800aed8 <HAL_UART_IRQHandler+0x5c4>
 800abaa:	bf00      	nop
 800abac:	04000120 	.word	0x04000120
 800abb0:	0800bb77 	.word	0x0800bb77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abb8:	2b01      	cmp	r3, #1
 800abba:	f040 8166 	bne.w	800ae8a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800abbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc2:	f003 0310 	and.w	r3, r3, #16
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f000 815f 	beq.w	800ae8a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800abcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abd0:	f003 0310 	and.w	r3, r3, #16
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 8158 	beq.w	800ae8a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2210      	movs	r2, #16
 800abe0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abec:	2b40      	cmp	r3, #64	@ 0x40
 800abee:	f040 80d0 	bne.w	800ad92 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800abfe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f000 80ab 	beq.w	800ad5e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac12:	429a      	cmp	r2, r3
 800ac14:	f080 80a3 	bcs.w	800ad5e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac2c:	f000 8086 	beq.w	800ad3c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac3c:	e853 3f00 	ldrex	r3, [r3]
 800ac40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ac44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ac5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ac66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac6a:	e841 2300 	strex	r3, r2, [r1]
 800ac6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ac72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1da      	bne.n	800ac30 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3308      	adds	r3, #8
 800ac80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac84:	e853 3f00 	ldrex	r3, [r3]
 800ac88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ac8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac8c:	f023 0301 	bic.w	r3, r3, #1
 800ac90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3308      	adds	r3, #8
 800ac9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ac9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aca2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800aca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800acb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e1      	bne.n	800ac7a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3308      	adds	r3, #8
 800acbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acc0:	e853 3f00 	ldrex	r3, [r3]
 800acc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800acc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800accc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	3308      	adds	r3, #8
 800acd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800acda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800acdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ace0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ace2:	e841 2300 	strex	r3, r2, [r1]
 800ace6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ace8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1e3      	bne.n	800acb6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad04:	e853 3f00 	ldrex	r3, [r3]
 800ad08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad0c:	f023 0310 	bic.w	r3, r3, #16
 800ad10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e4      	bne.n	800acfc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f8 fbe4 	bl	8003504 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f8e6 	bl	800af28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ad5c:	e0be      	b.n	800aedc <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ad64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	f040 80b7 	bne.w	800aedc <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad78:	f040 80b0 	bne.w	800aedc <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f8cc 	bl	800af28 <HAL_UARTEx_RxEventCallback>
      return;
 800ad90:	e0a4      	b.n	800aedc <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adac:	b29b      	uxth	r3, r3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f000 8096 	beq.w	800aee0 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800adb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 8091 	beq.w	800aee0 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc6:	e853 3f00 	ldrex	r3, [r3]
 800adca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800add2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ade0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ade2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ade6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ade8:	e841 2300 	strex	r3, r2, [r1]
 800adec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e4      	bne.n	800adbe <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3308      	adds	r3, #8
 800adfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfe:	e853 3f00 	ldrex	r3, [r3]
 800ae02:	623b      	str	r3, [r7, #32]
   return(result);
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	f023 0301 	bic.w	r3, r3, #1
 800ae0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae18:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae20:	e841 2300 	strex	r3, r2, [r1]
 800ae24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1e3      	bne.n	800adf4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2220      	movs	r2, #32
 800ae30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	e853 3f00 	ldrex	r3, [r3]
 800ae4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f023 0310 	bic.w	r3, r3, #16
 800ae54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ae62:	61fb      	str	r3, [r7, #28]
 800ae64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	69b9      	ldr	r1, [r7, #24]
 800ae68:	69fa      	ldr	r2, [r7, #28]
 800ae6a:	e841 2300 	strex	r3, r2, [r1]
 800ae6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1e4      	bne.n	800ae40 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2202      	movs	r2, #2
 800ae7a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f850 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae88:	e02a      	b.n	800aee0 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ae8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00e      	beq.n	800aeb4 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ae96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d008      	beq.n	800aeb4 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d01c      	beq.n	800aee4 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	4798      	blx	r3
    }
    return;
 800aeb2:	e017      	b.n	800aee4 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aeb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d012      	beq.n	800aee6 <HAL_UART_IRQHandler+0x5d2>
 800aec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00c      	beq.n	800aee6 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 ff1f 	bl	800bd10 <UART_EndTransmit_IT>
    return;
 800aed2:	e008      	b.n	800aee6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aed4:	bf00      	nop
 800aed6:	e006      	b.n	800aee6 <HAL_UART_IRQHandler+0x5d2>
    return;
 800aed8:	bf00      	nop
 800aeda:	e004      	b.n	800aee6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aedc:	bf00      	nop
 800aede:	e002      	b.n	800aee6 <HAL_UART_IRQHandler+0x5d2>
      return;
 800aee0:	bf00      	nop
 800aee2:	e000      	b.n	800aee6 <HAL_UART_IRQHandler+0x5d2>
    return;
 800aee4:	bf00      	nop
  }

}
 800aee6:	37e8      	adds	r7, #232	@ 0xe8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689a      	ldr	r2, [r3, #8]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	431a      	orrs	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	4313      	orrs	r3, r2
 800af62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	4ba6      	ldr	r3, [pc, #664]	@ (800b204 <UART_SetConfig+0x2c4>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	6812      	ldr	r2, [r2, #0]
 800af72:	6979      	ldr	r1, [r7, #20]
 800af74:	430b      	orrs	r3, r1
 800af76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	430a      	orrs	r2, r1
 800af8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	430a      	orrs	r2, r1
 800afb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a94      	ldr	r2, [pc, #592]	@ (800b208 <UART_SetConfig+0x2c8>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d120      	bne.n	800affe <UART_SetConfig+0xbe>
 800afbc:	4b93      	ldr	r3, [pc, #588]	@ (800b20c <UART_SetConfig+0x2cc>)
 800afbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afc2:	f003 0303 	and.w	r3, r3, #3
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d816      	bhi.n	800aff8 <UART_SetConfig+0xb8>
 800afca:	a201      	add	r2, pc, #4	@ (adr r2, 800afd0 <UART_SetConfig+0x90>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800afe1 	.word	0x0800afe1
 800afd4:	0800afed 	.word	0x0800afed
 800afd8:	0800afe7 	.word	0x0800afe7
 800afdc:	0800aff3 	.word	0x0800aff3
 800afe0:	2301      	movs	r3, #1
 800afe2:	77fb      	strb	r3, [r7, #31]
 800afe4:	e150      	b.n	800b288 <UART_SetConfig+0x348>
 800afe6:	2302      	movs	r3, #2
 800afe8:	77fb      	strb	r3, [r7, #31]
 800afea:	e14d      	b.n	800b288 <UART_SetConfig+0x348>
 800afec:	2304      	movs	r3, #4
 800afee:	77fb      	strb	r3, [r7, #31]
 800aff0:	e14a      	b.n	800b288 <UART_SetConfig+0x348>
 800aff2:	2308      	movs	r3, #8
 800aff4:	77fb      	strb	r3, [r7, #31]
 800aff6:	e147      	b.n	800b288 <UART_SetConfig+0x348>
 800aff8:	2310      	movs	r3, #16
 800affa:	77fb      	strb	r3, [r7, #31]
 800affc:	e144      	b.n	800b288 <UART_SetConfig+0x348>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a83      	ldr	r2, [pc, #524]	@ (800b210 <UART_SetConfig+0x2d0>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d132      	bne.n	800b06e <UART_SetConfig+0x12e>
 800b008:	4b80      	ldr	r3, [pc, #512]	@ (800b20c <UART_SetConfig+0x2cc>)
 800b00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b00e:	f003 030c 	and.w	r3, r3, #12
 800b012:	2b0c      	cmp	r3, #12
 800b014:	d828      	bhi.n	800b068 <UART_SetConfig+0x128>
 800b016:	a201      	add	r2, pc, #4	@ (adr r2, 800b01c <UART_SetConfig+0xdc>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b051 	.word	0x0800b051
 800b020:	0800b069 	.word	0x0800b069
 800b024:	0800b069 	.word	0x0800b069
 800b028:	0800b069 	.word	0x0800b069
 800b02c:	0800b05d 	.word	0x0800b05d
 800b030:	0800b069 	.word	0x0800b069
 800b034:	0800b069 	.word	0x0800b069
 800b038:	0800b069 	.word	0x0800b069
 800b03c:	0800b057 	.word	0x0800b057
 800b040:	0800b069 	.word	0x0800b069
 800b044:	0800b069 	.word	0x0800b069
 800b048:	0800b069 	.word	0x0800b069
 800b04c:	0800b063 	.word	0x0800b063
 800b050:	2300      	movs	r3, #0
 800b052:	77fb      	strb	r3, [r7, #31]
 800b054:	e118      	b.n	800b288 <UART_SetConfig+0x348>
 800b056:	2302      	movs	r3, #2
 800b058:	77fb      	strb	r3, [r7, #31]
 800b05a:	e115      	b.n	800b288 <UART_SetConfig+0x348>
 800b05c:	2304      	movs	r3, #4
 800b05e:	77fb      	strb	r3, [r7, #31]
 800b060:	e112      	b.n	800b288 <UART_SetConfig+0x348>
 800b062:	2308      	movs	r3, #8
 800b064:	77fb      	strb	r3, [r7, #31]
 800b066:	e10f      	b.n	800b288 <UART_SetConfig+0x348>
 800b068:	2310      	movs	r3, #16
 800b06a:	77fb      	strb	r3, [r7, #31]
 800b06c:	e10c      	b.n	800b288 <UART_SetConfig+0x348>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a68      	ldr	r2, [pc, #416]	@ (800b214 <UART_SetConfig+0x2d4>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d120      	bne.n	800b0ba <UART_SetConfig+0x17a>
 800b078:	4b64      	ldr	r3, [pc, #400]	@ (800b20c <UART_SetConfig+0x2cc>)
 800b07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b07e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b082:	2b30      	cmp	r3, #48	@ 0x30
 800b084:	d013      	beq.n	800b0ae <UART_SetConfig+0x16e>
 800b086:	2b30      	cmp	r3, #48	@ 0x30
 800b088:	d814      	bhi.n	800b0b4 <UART_SetConfig+0x174>
 800b08a:	2b20      	cmp	r3, #32
 800b08c:	d009      	beq.n	800b0a2 <UART_SetConfig+0x162>
 800b08e:	2b20      	cmp	r3, #32
 800b090:	d810      	bhi.n	800b0b4 <UART_SetConfig+0x174>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d002      	beq.n	800b09c <UART_SetConfig+0x15c>
 800b096:	2b10      	cmp	r3, #16
 800b098:	d006      	beq.n	800b0a8 <UART_SetConfig+0x168>
 800b09a:	e00b      	b.n	800b0b4 <UART_SetConfig+0x174>
 800b09c:	2300      	movs	r3, #0
 800b09e:	77fb      	strb	r3, [r7, #31]
 800b0a0:	e0f2      	b.n	800b288 <UART_SetConfig+0x348>
 800b0a2:	2302      	movs	r3, #2
 800b0a4:	77fb      	strb	r3, [r7, #31]
 800b0a6:	e0ef      	b.n	800b288 <UART_SetConfig+0x348>
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	77fb      	strb	r3, [r7, #31]
 800b0ac:	e0ec      	b.n	800b288 <UART_SetConfig+0x348>
 800b0ae:	2308      	movs	r3, #8
 800b0b0:	77fb      	strb	r3, [r7, #31]
 800b0b2:	e0e9      	b.n	800b288 <UART_SetConfig+0x348>
 800b0b4:	2310      	movs	r3, #16
 800b0b6:	77fb      	strb	r3, [r7, #31]
 800b0b8:	e0e6      	b.n	800b288 <UART_SetConfig+0x348>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a56      	ldr	r2, [pc, #344]	@ (800b218 <UART_SetConfig+0x2d8>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d120      	bne.n	800b106 <UART_SetConfig+0x1c6>
 800b0c4:	4b51      	ldr	r3, [pc, #324]	@ (800b20c <UART_SetConfig+0x2cc>)
 800b0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b0ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0d0:	d013      	beq.n	800b0fa <UART_SetConfig+0x1ba>
 800b0d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0d4:	d814      	bhi.n	800b100 <UART_SetConfig+0x1c0>
 800b0d6:	2b80      	cmp	r3, #128	@ 0x80
 800b0d8:	d009      	beq.n	800b0ee <UART_SetConfig+0x1ae>
 800b0da:	2b80      	cmp	r3, #128	@ 0x80
 800b0dc:	d810      	bhi.n	800b100 <UART_SetConfig+0x1c0>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <UART_SetConfig+0x1a8>
 800b0e2:	2b40      	cmp	r3, #64	@ 0x40
 800b0e4:	d006      	beq.n	800b0f4 <UART_SetConfig+0x1b4>
 800b0e6:	e00b      	b.n	800b100 <UART_SetConfig+0x1c0>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	77fb      	strb	r3, [r7, #31]
 800b0ec:	e0cc      	b.n	800b288 <UART_SetConfig+0x348>
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	77fb      	strb	r3, [r7, #31]
 800b0f2:	e0c9      	b.n	800b288 <UART_SetConfig+0x348>
 800b0f4:	2304      	movs	r3, #4
 800b0f6:	77fb      	strb	r3, [r7, #31]
 800b0f8:	e0c6      	b.n	800b288 <UART_SetConfig+0x348>
 800b0fa:	2308      	movs	r3, #8
 800b0fc:	77fb      	strb	r3, [r7, #31]
 800b0fe:	e0c3      	b.n	800b288 <UART_SetConfig+0x348>
 800b100:	2310      	movs	r3, #16
 800b102:	77fb      	strb	r3, [r7, #31]
 800b104:	e0c0      	b.n	800b288 <UART_SetConfig+0x348>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a44      	ldr	r2, [pc, #272]	@ (800b21c <UART_SetConfig+0x2dc>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d125      	bne.n	800b15c <UART_SetConfig+0x21c>
 800b110:	4b3e      	ldr	r3, [pc, #248]	@ (800b20c <UART_SetConfig+0x2cc>)
 800b112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b11a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b11e:	d017      	beq.n	800b150 <UART_SetConfig+0x210>
 800b120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b124:	d817      	bhi.n	800b156 <UART_SetConfig+0x216>
 800b126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b12a:	d00b      	beq.n	800b144 <UART_SetConfig+0x204>
 800b12c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b130:	d811      	bhi.n	800b156 <UART_SetConfig+0x216>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <UART_SetConfig+0x1fe>
 800b136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b13a:	d006      	beq.n	800b14a <UART_SetConfig+0x20a>
 800b13c:	e00b      	b.n	800b156 <UART_SetConfig+0x216>
 800b13e:	2300      	movs	r3, #0
 800b140:	77fb      	strb	r3, [r7, #31]
 800b142:	e0a1      	b.n	800b288 <UART_SetConfig+0x348>
 800b144:	2302      	movs	r3, #2
 800b146:	77fb      	strb	r3, [r7, #31]
 800b148:	e09e      	b.n	800b288 <UART_SetConfig+0x348>
 800b14a:	2304      	movs	r3, #4
 800b14c:	77fb      	strb	r3, [r7, #31]
 800b14e:	e09b      	b.n	800b288 <UART_SetConfig+0x348>
 800b150:	2308      	movs	r3, #8
 800b152:	77fb      	strb	r3, [r7, #31]
 800b154:	e098      	b.n	800b288 <UART_SetConfig+0x348>
 800b156:	2310      	movs	r3, #16
 800b158:	77fb      	strb	r3, [r7, #31]
 800b15a:	e095      	b.n	800b288 <UART_SetConfig+0x348>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a2f      	ldr	r2, [pc, #188]	@ (800b220 <UART_SetConfig+0x2e0>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d125      	bne.n	800b1b2 <UART_SetConfig+0x272>
 800b166:	4b29      	ldr	r3, [pc, #164]	@ (800b20c <UART_SetConfig+0x2cc>)
 800b168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b16c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b170:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b174:	d017      	beq.n	800b1a6 <UART_SetConfig+0x266>
 800b176:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b17a:	d817      	bhi.n	800b1ac <UART_SetConfig+0x26c>
 800b17c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b180:	d00b      	beq.n	800b19a <UART_SetConfig+0x25a>
 800b182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b186:	d811      	bhi.n	800b1ac <UART_SetConfig+0x26c>
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d003      	beq.n	800b194 <UART_SetConfig+0x254>
 800b18c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b190:	d006      	beq.n	800b1a0 <UART_SetConfig+0x260>
 800b192:	e00b      	b.n	800b1ac <UART_SetConfig+0x26c>
 800b194:	2301      	movs	r3, #1
 800b196:	77fb      	strb	r3, [r7, #31]
 800b198:	e076      	b.n	800b288 <UART_SetConfig+0x348>
 800b19a:	2302      	movs	r3, #2
 800b19c:	77fb      	strb	r3, [r7, #31]
 800b19e:	e073      	b.n	800b288 <UART_SetConfig+0x348>
 800b1a0:	2304      	movs	r3, #4
 800b1a2:	77fb      	strb	r3, [r7, #31]
 800b1a4:	e070      	b.n	800b288 <UART_SetConfig+0x348>
 800b1a6:	2308      	movs	r3, #8
 800b1a8:	77fb      	strb	r3, [r7, #31]
 800b1aa:	e06d      	b.n	800b288 <UART_SetConfig+0x348>
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	77fb      	strb	r3, [r7, #31]
 800b1b0:	e06a      	b.n	800b288 <UART_SetConfig+0x348>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a1b      	ldr	r2, [pc, #108]	@ (800b224 <UART_SetConfig+0x2e4>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d138      	bne.n	800b22e <UART_SetConfig+0x2ee>
 800b1bc:	4b13      	ldr	r3, [pc, #76]	@ (800b20c <UART_SetConfig+0x2cc>)
 800b1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b1c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b1ca:	d017      	beq.n	800b1fc <UART_SetConfig+0x2bc>
 800b1cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b1d0:	d82a      	bhi.n	800b228 <UART_SetConfig+0x2e8>
 800b1d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1d6:	d00b      	beq.n	800b1f0 <UART_SetConfig+0x2b0>
 800b1d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1dc:	d824      	bhi.n	800b228 <UART_SetConfig+0x2e8>
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <UART_SetConfig+0x2aa>
 800b1e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1e6:	d006      	beq.n	800b1f6 <UART_SetConfig+0x2b6>
 800b1e8:	e01e      	b.n	800b228 <UART_SetConfig+0x2e8>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	77fb      	strb	r3, [r7, #31]
 800b1ee:	e04b      	b.n	800b288 <UART_SetConfig+0x348>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	77fb      	strb	r3, [r7, #31]
 800b1f4:	e048      	b.n	800b288 <UART_SetConfig+0x348>
 800b1f6:	2304      	movs	r3, #4
 800b1f8:	77fb      	strb	r3, [r7, #31]
 800b1fa:	e045      	b.n	800b288 <UART_SetConfig+0x348>
 800b1fc:	2308      	movs	r3, #8
 800b1fe:	77fb      	strb	r3, [r7, #31]
 800b200:	e042      	b.n	800b288 <UART_SetConfig+0x348>
 800b202:	bf00      	nop
 800b204:	efff69f3 	.word	0xefff69f3
 800b208:	40011000 	.word	0x40011000
 800b20c:	40023800 	.word	0x40023800
 800b210:	40004400 	.word	0x40004400
 800b214:	40004800 	.word	0x40004800
 800b218:	40004c00 	.word	0x40004c00
 800b21c:	40005000 	.word	0x40005000
 800b220:	40011400 	.word	0x40011400
 800b224:	40007800 	.word	0x40007800
 800b228:	2310      	movs	r3, #16
 800b22a:	77fb      	strb	r3, [r7, #31]
 800b22c:	e02c      	b.n	800b288 <UART_SetConfig+0x348>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a72      	ldr	r2, [pc, #456]	@ (800b3fc <UART_SetConfig+0x4bc>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d125      	bne.n	800b284 <UART_SetConfig+0x344>
 800b238:	4b71      	ldr	r3, [pc, #452]	@ (800b400 <UART_SetConfig+0x4c0>)
 800b23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b23e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b242:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b246:	d017      	beq.n	800b278 <UART_SetConfig+0x338>
 800b248:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b24c:	d817      	bhi.n	800b27e <UART_SetConfig+0x33e>
 800b24e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b252:	d00b      	beq.n	800b26c <UART_SetConfig+0x32c>
 800b254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b258:	d811      	bhi.n	800b27e <UART_SetConfig+0x33e>
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <UART_SetConfig+0x326>
 800b25e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b262:	d006      	beq.n	800b272 <UART_SetConfig+0x332>
 800b264:	e00b      	b.n	800b27e <UART_SetConfig+0x33e>
 800b266:	2300      	movs	r3, #0
 800b268:	77fb      	strb	r3, [r7, #31]
 800b26a:	e00d      	b.n	800b288 <UART_SetConfig+0x348>
 800b26c:	2302      	movs	r3, #2
 800b26e:	77fb      	strb	r3, [r7, #31]
 800b270:	e00a      	b.n	800b288 <UART_SetConfig+0x348>
 800b272:	2304      	movs	r3, #4
 800b274:	77fb      	strb	r3, [r7, #31]
 800b276:	e007      	b.n	800b288 <UART_SetConfig+0x348>
 800b278:	2308      	movs	r3, #8
 800b27a:	77fb      	strb	r3, [r7, #31]
 800b27c:	e004      	b.n	800b288 <UART_SetConfig+0x348>
 800b27e:	2310      	movs	r3, #16
 800b280:	77fb      	strb	r3, [r7, #31]
 800b282:	e001      	b.n	800b288 <UART_SetConfig+0x348>
 800b284:	2310      	movs	r3, #16
 800b286:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b290:	d15b      	bne.n	800b34a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b292:	7ffb      	ldrb	r3, [r7, #31]
 800b294:	2b08      	cmp	r3, #8
 800b296:	d828      	bhi.n	800b2ea <UART_SetConfig+0x3aa>
 800b298:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a0 <UART_SetConfig+0x360>)
 800b29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29e:	bf00      	nop
 800b2a0:	0800b2c5 	.word	0x0800b2c5
 800b2a4:	0800b2cd 	.word	0x0800b2cd
 800b2a8:	0800b2d5 	.word	0x0800b2d5
 800b2ac:	0800b2eb 	.word	0x0800b2eb
 800b2b0:	0800b2db 	.word	0x0800b2db
 800b2b4:	0800b2eb 	.word	0x0800b2eb
 800b2b8:	0800b2eb 	.word	0x0800b2eb
 800b2bc:	0800b2eb 	.word	0x0800b2eb
 800b2c0:	0800b2e3 	.word	0x0800b2e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2c4:	f7fc ff4c 	bl	8008160 <HAL_RCC_GetPCLK1Freq>
 800b2c8:	61b8      	str	r0, [r7, #24]
        break;
 800b2ca:	e013      	b.n	800b2f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2cc:	f7fc ff5c 	bl	8008188 <HAL_RCC_GetPCLK2Freq>
 800b2d0:	61b8      	str	r0, [r7, #24]
        break;
 800b2d2:	e00f      	b.n	800b2f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2d4:	4b4b      	ldr	r3, [pc, #300]	@ (800b404 <UART_SetConfig+0x4c4>)
 800b2d6:	61bb      	str	r3, [r7, #24]
        break;
 800b2d8:	e00c      	b.n	800b2f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2da:	f7fc fe6f 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800b2de:	61b8      	str	r0, [r7, #24]
        break;
 800b2e0:	e008      	b.n	800b2f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2e6:	61bb      	str	r3, [r7, #24]
        break;
 800b2e8:	e004      	b.n	800b2f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	77bb      	strb	r3, [r7, #30]
        break;
 800b2f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d074      	beq.n	800b3e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	005a      	lsls	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	085b      	lsrs	r3, r3, #1
 800b304:	441a      	add	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b30e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	2b0f      	cmp	r3, #15
 800b314:	d916      	bls.n	800b344 <UART_SetConfig+0x404>
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b31c:	d212      	bcs.n	800b344 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	b29b      	uxth	r3, r3
 800b322:	f023 030f 	bic.w	r3, r3, #15
 800b326:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	085b      	lsrs	r3, r3, #1
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	f003 0307 	and.w	r3, r3, #7
 800b332:	b29a      	uxth	r2, r3
 800b334:	89fb      	ldrh	r3, [r7, #14]
 800b336:	4313      	orrs	r3, r2
 800b338:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	89fa      	ldrh	r2, [r7, #14]
 800b340:	60da      	str	r2, [r3, #12]
 800b342:	e04f      	b.n	800b3e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	77bb      	strb	r3, [r7, #30]
 800b348:	e04c      	b.n	800b3e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b34a:	7ffb      	ldrb	r3, [r7, #31]
 800b34c:	2b08      	cmp	r3, #8
 800b34e:	d828      	bhi.n	800b3a2 <UART_SetConfig+0x462>
 800b350:	a201      	add	r2, pc, #4	@ (adr r2, 800b358 <UART_SetConfig+0x418>)
 800b352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b356:	bf00      	nop
 800b358:	0800b37d 	.word	0x0800b37d
 800b35c:	0800b385 	.word	0x0800b385
 800b360:	0800b38d 	.word	0x0800b38d
 800b364:	0800b3a3 	.word	0x0800b3a3
 800b368:	0800b393 	.word	0x0800b393
 800b36c:	0800b3a3 	.word	0x0800b3a3
 800b370:	0800b3a3 	.word	0x0800b3a3
 800b374:	0800b3a3 	.word	0x0800b3a3
 800b378:	0800b39b 	.word	0x0800b39b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b37c:	f7fc fef0 	bl	8008160 <HAL_RCC_GetPCLK1Freq>
 800b380:	61b8      	str	r0, [r7, #24]
        break;
 800b382:	e013      	b.n	800b3ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b384:	f7fc ff00 	bl	8008188 <HAL_RCC_GetPCLK2Freq>
 800b388:	61b8      	str	r0, [r7, #24]
        break;
 800b38a:	e00f      	b.n	800b3ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b38c:	4b1d      	ldr	r3, [pc, #116]	@ (800b404 <UART_SetConfig+0x4c4>)
 800b38e:	61bb      	str	r3, [r7, #24]
        break;
 800b390:	e00c      	b.n	800b3ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b392:	f7fc fe13 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800b396:	61b8      	str	r0, [r7, #24]
        break;
 800b398:	e008      	b.n	800b3ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b39a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b39e:	61bb      	str	r3, [r7, #24]
        break;
 800b3a0:	e004      	b.n	800b3ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	77bb      	strb	r3, [r7, #30]
        break;
 800b3aa:	bf00      	nop
    }

    if (pclk != 0U)
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d018      	beq.n	800b3e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	085a      	lsrs	r2, r3, #1
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	441a      	add	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b0f      	cmp	r3, #15
 800b3ca:	d909      	bls.n	800b3e0 <UART_SetConfig+0x4a0>
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3d2:	d205      	bcs.n	800b3e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	60da      	str	r2, [r3, #12]
 800b3de:	e001      	b.n	800b3e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b3f0:	7fbb      	ldrb	r3, [r7, #30]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	40007c00 	.word	0x40007c00
 800b400:	40023800 	.word	0x40023800
 800b404:	00f42400 	.word	0x00f42400

0800b408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b414:	f003 0308 	and.w	r3, r3, #8
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00a      	beq.n	800b432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00a      	beq.n	800b454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	430a      	orrs	r2, r1
 800b452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b458:	f003 0302 	and.w	r3, r3, #2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00a      	beq.n	800b476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	430a      	orrs	r2, r1
 800b474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47a:	f003 0304 	and.w	r3, r3, #4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00a      	beq.n	800b498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	430a      	orrs	r2, r1
 800b496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49c:	f003 0310 	and.w	r3, r3, #16
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00a      	beq.n	800b4ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	430a      	orrs	r2, r1
 800b4b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4be:	f003 0320 	and.w	r3, r3, #32
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	430a      	orrs	r2, r1
 800b4da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d01a      	beq.n	800b51e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	430a      	orrs	r2, r1
 800b4fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b506:	d10a      	bne.n	800b51e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	430a      	orrs	r2, r1
 800b51c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	430a      	orrs	r2, r1
 800b53e:	605a      	str	r2, [r3, #4]
  }
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08c      	sub	sp, #48	@ 0x30
 800b550:	af02      	add	r7, sp, #8
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b55c:	f7f6 ff22 	bl	80023a4 <HAL_GetTick>
 800b560:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0308 	and.w	r3, r3, #8
 800b56c:	2b08      	cmp	r3, #8
 800b56e:	d12e      	bne.n	800b5ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b570:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	2200      	movs	r2, #0
 800b57a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f83b 	bl	800b5fa <UART_WaitOnFlagUntilTimeout>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d021      	beq.n	800b5ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	60fb      	str	r3, [r7, #12]
   return(result);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b59e:	623b      	str	r3, [r7, #32]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	69b9      	ldr	r1, [r7, #24]
 800b5ae:	69fa      	ldr	r2, [r7, #28]
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e6      	bne.n	800b58a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2220      	movs	r2, #32
 800b5c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e011      	b.n	800b5f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2220      	movs	r2, #32
 800b5d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3728      	adds	r7, #40	@ 0x28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	603b      	str	r3, [r7, #0]
 800b606:	4613      	mov	r3, r2
 800b608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b60a:	e04f      	b.n	800b6ac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b612:	d04b      	beq.n	800b6ac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b614:	f7f6 fec6 	bl	80023a4 <HAL_GetTick>
 800b618:	4602      	mov	r2, r0
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	69ba      	ldr	r2, [r7, #24]
 800b620:	429a      	cmp	r2, r3
 800b622:	d302      	bcc.n	800b62a <UART_WaitOnFlagUntilTimeout+0x30>
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e04e      	b.n	800b6cc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 0304 	and.w	r3, r3, #4
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d037      	beq.n	800b6ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2b80      	cmp	r3, #128	@ 0x80
 800b640:	d034      	beq.n	800b6ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b40      	cmp	r3, #64	@ 0x40
 800b646:	d031      	beq.n	800b6ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	f003 0308 	and.w	r3, r3, #8
 800b652:	2b08      	cmp	r3, #8
 800b654:	d110      	bne.n	800b678 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2208      	movs	r2, #8
 800b65c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 f8fe 	bl	800b860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2208      	movs	r2, #8
 800b668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e029      	b.n	800b6cc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b682:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b686:	d111      	bne.n	800b6ac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b690:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f000 f8e4 	bl	800b860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e00f      	b.n	800b6cc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	69da      	ldr	r2, [r3, #28]
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	bf0c      	ite	eq
 800b6bc:	2301      	moveq	r3, #1
 800b6be:	2300      	movne	r3, #0
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	79fb      	ldrb	r3, [r7, #7]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d0a0      	beq.n	800b60c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b096      	sub	sp, #88	@ 0x58
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	88fa      	ldrh	r2, [r7, #6]
 800b6ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2222      	movs	r2, #34	@ 0x22
 800b6fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b704:	2b00      	cmp	r3, #0
 800b706:	d028      	beq.n	800b75a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b70c:	4a3e      	ldr	r2, [pc, #248]	@ (800b808 <UART_Start_Receive_DMA+0x134>)
 800b70e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b714:	4a3d      	ldr	r2, [pc, #244]	@ (800b80c <UART_Start_Receive_DMA+0x138>)
 800b716:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b71c:	4a3c      	ldr	r2, [pc, #240]	@ (800b810 <UART_Start_Receive_DMA+0x13c>)
 800b71e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b724:	2200      	movs	r2, #0
 800b726:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	3324      	adds	r3, #36	@ 0x24
 800b732:	4619      	mov	r1, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b738:	461a      	mov	r2, r3
 800b73a:	88fb      	ldrh	r3, [r7, #6]
 800b73c:	f7f7 fe82 	bl	8003444 <HAL_DMA_Start_IT>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d009      	beq.n	800b75a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2210      	movs	r2, #16
 800b74a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2220      	movs	r2, #32
 800b752:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e051      	b.n	800b7fe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d018      	beq.n	800b794 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76a:	e853 3f00 	ldrex	r3, [r3]
 800b76e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b776:	657b      	str	r3, [r7, #84]	@ 0x54
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	461a      	mov	r2, r3
 800b77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b780:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b782:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b784:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b788:	e841 2300 	strex	r3, r2, [r1]
 800b78c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b78e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1e6      	bne.n	800b762 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3308      	adds	r3, #8
 800b79a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b79e:	e853 3f00 	ldrex	r3, [r3]
 800b7a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a6:	f043 0301 	orr.w	r3, r3, #1
 800b7aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b7b4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b7b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b7ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e5      	bne.n	800b794 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	e853 3f00 	ldrex	r3, [r3]
 800b7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b7e8:	623a      	str	r2, [r7, #32]
 800b7ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ec:	69f9      	ldr	r1, [r7, #28]
 800b7ee:	6a3a      	ldr	r2, [r7, #32]
 800b7f0:	e841 2300 	strex	r3, r2, [r1]
 800b7f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1e5      	bne.n	800b7c8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3758      	adds	r7, #88	@ 0x58
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	0800b929 	.word	0x0800b929
 800b80c:	0800ba87 	.word	0x0800ba87
 800b810:	0800baf9 	.word	0x0800baf9

0800b814 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b814:	b480      	push	{r7}
 800b816:	b089      	sub	sp, #36	@ 0x24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	e853 3f00 	ldrex	r3, [r3]
 800b828:	60bb      	str	r3, [r7, #8]
   return(result);
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b830:	61fb      	str	r3, [r7, #28]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	461a      	mov	r2, r3
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	61bb      	str	r3, [r7, #24]
 800b83c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83e:	6979      	ldr	r1, [r7, #20]
 800b840:	69ba      	ldr	r2, [r7, #24]
 800b842:	e841 2300 	strex	r3, r2, [r1]
 800b846:	613b      	str	r3, [r7, #16]
   return(result);
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1e6      	bne.n	800b81c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2220      	movs	r2, #32
 800b852:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b854:	bf00      	nop
 800b856:	3724      	adds	r7, #36	@ 0x24
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b860:	b480      	push	{r7}
 800b862:	b095      	sub	sp, #84	@ 0x54
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b87c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b886:	643b      	str	r3, [r7, #64]	@ 0x40
 800b888:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b88c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b88e:	e841 2300 	strex	r3, r2, [r1]
 800b892:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1e6      	bne.n	800b868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3308      	adds	r3, #8
 800b8a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	e853 3f00 	ldrex	r3, [r3]
 800b8a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	f023 0301 	bic.w	r3, r3, #1
 800b8b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8c2:	e841 2300 	strex	r3, r2, [r1]
 800b8c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e5      	bne.n	800b89a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d118      	bne.n	800b908 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	e853 3f00 	ldrex	r3, [r3]
 800b8e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f023 0310 	bic.w	r3, r3, #16
 800b8ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8f4:	61bb      	str	r3, [r7, #24]
 800b8f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f8:	6979      	ldr	r1, [r7, #20]
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	e841 2300 	strex	r3, r2, [r1]
 800b900:	613b      	str	r3, [r7, #16]
   return(result);
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1e6      	bne.n	800b8d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2220      	movs	r2, #32
 800b90c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b91c:	bf00      	nop
 800b91e:	3754      	adds	r7, #84	@ 0x54
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b09c      	sub	sp, #112	@ 0x70
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b934:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	69db      	ldr	r3, [r3, #28]
 800b93a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b93e:	d071      	beq.n	800ba24 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b942:	2200      	movs	r2, #0
 800b944:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b950:	e853 3f00 	ldrex	r3, [r3]
 800b954:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b95c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b95e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	461a      	mov	r2, r3
 800b964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b966:	657b      	str	r3, [r7, #84]	@ 0x54
 800b968:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b96c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b96e:	e841 2300 	strex	r3, r2, [r1]
 800b972:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1e6      	bne.n	800b948 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b97a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3308      	adds	r3, #8
 800b980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98c:	f023 0301 	bic.w	r3, r3, #1
 800b990:	667b      	str	r3, [r7, #100]	@ 0x64
 800b992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3308      	adds	r3, #8
 800b998:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b99a:	643a      	str	r2, [r7, #64]	@ 0x40
 800b99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9a2:	e841 2300 	strex	r3, r2, [r1]
 800b9a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1e5      	bne.n	800b97a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b9ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e5      	bne.n	800b9ae <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b9e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d118      	bne.n	800ba24 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	e853 3f00 	ldrex	r3, [r3]
 800b9fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	f023 0310 	bic.w	r3, r3, #16
 800ba06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba10:	61bb      	str	r3, [r7, #24]
 800ba12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba14:	6979      	ldr	r1, [r7, #20]
 800ba16:	69ba      	ldr	r2, [r7, #24]
 800ba18:	e841 2300 	strex	r3, r2, [r1]
 800ba1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e6      	bne.n	800b9f2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba26:	2200      	movs	r2, #0
 800ba28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d122      	bne.n	800ba78 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800ba32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba34:	2200      	movs	r2, #0
 800ba36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800ba44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ba4a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d204      	bcs.n	800ba5c <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800ba52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba54:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800ba58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ba62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba72:	f7ff fa59 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba76:	e002      	b.n	800ba7e <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800ba78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ba7a:	f014 fce9 	bl	8020450 <HAL_UART_RxCpltCallback>
}
 800ba7e:	bf00      	nop
 800ba80:	3770      	adds	r7, #112	@ 0x70
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2201      	movs	r2, #1
 800ba98:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d123      	bne.n	800baea <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800baa8:	085b      	lsrs	r3, r3, #1
 800baaa:	b29a      	uxth	r2, r3
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bac0:	897a      	ldrh	r2, [r7, #10]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d803      	bhi.n	800bace <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	897a      	ldrh	r2, [r7, #10]
 800baca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bada:	b29b      	uxth	r3, r3
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	b29b      	uxth	r3, r3
 800bae0:	4619      	mov	r1, r3
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff fa20 	bl	800af28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bae8:	e002      	b.n	800baf0 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff fa08 	bl	800af00 <HAL_UART_RxHalfCpltCallback>
}
 800baf0:	bf00      	nop
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb0a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb1e:	2b80      	cmp	r3, #128	@ 0x80
 800bb20:	d109      	bne.n	800bb36 <UART_DMAError+0x3e>
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	2b21      	cmp	r3, #33	@ 0x21
 800bb26:	d106      	bne.n	800bb36 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bb30:	6978      	ldr	r0, [r7, #20]
 800bb32:	f7ff fe6f 	bl	800b814 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb40:	2b40      	cmp	r3, #64	@ 0x40
 800bb42:	d109      	bne.n	800bb58 <UART_DMAError+0x60>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b22      	cmp	r3, #34	@ 0x22
 800bb48:	d106      	bne.n	800bb58 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff fe84 	bl	800b860 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb5e:	f043 0210 	orr.w	r2, r3, #16
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb68:	6978      	ldr	r0, [r7, #20]
 800bb6a:	f7ff f9d3 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb6e:	bf00      	nop
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f7ff f9c1 	bl	800af14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb92:	bf00      	nop
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b08f      	sub	sp, #60	@ 0x3c
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bba6:	2b21      	cmp	r3, #33	@ 0x21
 800bba8:	d14c      	bne.n	800bc44 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d132      	bne.n	800bc1c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbc:	6a3b      	ldr	r3, [r7, #32]
 800bbbe:	e853 3f00 	ldrex	r3, [r3]
 800bbc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bbca:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbd6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbdc:	e841 2300 	strex	r3, r2, [r1]
 800bbe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1e6      	bne.n	800bbb6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	e853 3f00 	ldrex	r3, [r3]
 800bbf4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbfc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc06:	61bb      	str	r3, [r7, #24]
 800bc08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0a:	6979      	ldr	r1, [r7, #20]
 800bc0c:	69ba      	ldr	r2, [r7, #24]
 800bc0e:	e841 2300 	strex	r3, r2, [r1]
 800bc12:	613b      	str	r3, [r7, #16]
   return(result);
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1e6      	bne.n	800bbe8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bc1a:	e013      	b.n	800bc44 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc20:	781a      	ldrb	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bc44:	bf00      	nop
 800bc46:	373c      	adds	r7, #60	@ 0x3c
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b091      	sub	sp, #68	@ 0x44
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc5c:	2b21      	cmp	r3, #33	@ 0x21
 800bc5e:	d151      	bne.n	800bd04 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d132      	bne.n	800bcd2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc74:	e853 3f00 	ldrex	r3, [r3]
 800bc78:	623b      	str	r3, [r7, #32]
   return(result);
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	461a      	mov	r2, r3
 800bc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bc90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc92:	e841 2300 	strex	r3, r2, [r1]
 800bc96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1e6      	bne.n	800bc6c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	e853 3f00 	ldrex	r3, [r3]
 800bcaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcbc:	61fb      	str	r3, [r7, #28]
 800bcbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc0:	69b9      	ldr	r1, [r7, #24]
 800bcc2:	69fa      	ldr	r2, [r7, #28]
 800bcc4:	e841 2300 	strex	r3, r2, [r1]
 800bcc8:	617b      	str	r3, [r7, #20]
   return(result);
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1e6      	bne.n	800bc9e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bcd0:	e018      	b.n	800bd04 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bcd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bce6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcec:	1c9a      	adds	r2, r3, #2
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bd04:	bf00      	nop
 800bd06:	3744      	adds	r7, #68	@ 0x44
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b088      	sub	sp, #32
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	e853 3f00 	ldrex	r3, [r3]
 800bd24:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd2c:	61fb      	str	r3, [r7, #28]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	61bb      	str	r3, [r7, #24]
 800bd38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3a:	6979      	ldr	r1, [r7, #20]
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	e841 2300 	strex	r3, r2, [r1]
 800bd42:	613b      	str	r3, [r7, #16]
   return(result);
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1e6      	bne.n	800bd18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2220      	movs	r2, #32
 800bd4e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7ff f8c8 	bl	800aeec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd5c:	bf00      	nop
 800bd5e:	3720      	adds	r7, #32
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800bd6a:	4b92      	ldr	r3, [pc, #584]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bd6c:	220a      	movs	r2, #10
 800bd6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800bd70:	4b90      	ldr	r3, [pc, #576]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800bd76:	4b8f      	ldr	r3, [pc, #572]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bd78:	2201      	movs	r2, #1
 800bd7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800bd7c:	4b8d      	ldr	r3, [pc, #564]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bd7e:	2264      	movs	r2, #100	@ 0x64
 800bd80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800bd82:	4b8d      	ldr	r3, [pc, #564]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800bd84:	22ff      	movs	r2, #255	@ 0xff
 800bd86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800bd88:	4b8b      	ldr	r3, [pc, #556]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800bd8a:	22ff      	movs	r2, #255	@ 0xff
 800bd8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800bd8e:	4b8a      	ldr	r3, [pc, #552]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800bd90:	22ff      	movs	r2, #255	@ 0xff
 800bd92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800bd94:	4b88      	ldr	r3, [pc, #544]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800bd96:	2200      	movs	r2, #0
 800bd98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800bd9a:	4b88      	ldr	r3, [pc, #544]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bd9c:	220a      	movs	r2, #10
 800bd9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800bda0:	4b86      	ldr	r3, [pc, #536]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800bda6:	4b85      	ldr	r3, [pc, #532]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bda8:	2201      	movs	r2, #1
 800bdaa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800bdac:	4b83      	ldr	r3, [pc, #524]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bdae:	2265      	movs	r2, #101	@ 0x65
 800bdb0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	2000      	movs	r0, #0
 800bdb6:	f006 ff99 	bl	8012cec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bdba:	4b7e      	ldr	r3, [pc, #504]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	061a      	lsls	r2, r3, #24
 800bdc0:	4b7c      	ldr	r3, [pc, #496]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bdc2:	785b      	ldrb	r3, [r3, #1]
 800bdc4:	041b      	lsls	r3, r3, #16
 800bdc6:	431a      	orrs	r2, r3
 800bdc8:	4b7a      	ldr	r3, [pc, #488]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bdca:	789b      	ldrb	r3, [r3, #2]
 800bdcc:	021b      	lsls	r3, r3, #8
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	4a78      	ldr	r2, [pc, #480]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bdd2:	78d2      	ldrb	r2, [r2, #3]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	061a      	lsls	r2, r3, #24
 800bdd8:	4b76      	ldr	r3, [pc, #472]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	0619      	lsls	r1, r3, #24
 800bdde:	4b75      	ldr	r3, [pc, #468]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bde0:	785b      	ldrb	r3, [r3, #1]
 800bde2:	041b      	lsls	r3, r3, #16
 800bde4:	4319      	orrs	r1, r3
 800bde6:	4b73      	ldr	r3, [pc, #460]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bde8:	789b      	ldrb	r3, [r3, #2]
 800bdea:	021b      	lsls	r3, r3, #8
 800bdec:	430b      	orrs	r3, r1
 800bdee:	4971      	ldr	r1, [pc, #452]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bdf0:	78c9      	ldrb	r1, [r1, #3]
 800bdf2:	430b      	orrs	r3, r1
 800bdf4:	021b      	lsls	r3, r3, #8
 800bdf6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bdfa:	431a      	orrs	r2, r3
 800bdfc:	4b6d      	ldr	r3, [pc, #436]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	0619      	lsls	r1, r3, #24
 800be02:	4b6c      	ldr	r3, [pc, #432]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800be04:	785b      	ldrb	r3, [r3, #1]
 800be06:	041b      	lsls	r3, r3, #16
 800be08:	4319      	orrs	r1, r3
 800be0a:	4b6a      	ldr	r3, [pc, #424]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800be0c:	789b      	ldrb	r3, [r3, #2]
 800be0e:	021b      	lsls	r3, r3, #8
 800be10:	430b      	orrs	r3, r1
 800be12:	4968      	ldr	r1, [pc, #416]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800be14:	78c9      	ldrb	r1, [r1, #3]
 800be16:	430b      	orrs	r3, r1
 800be18:	0a1b      	lsrs	r3, r3, #8
 800be1a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800be1e:	431a      	orrs	r2, r3
 800be20:	4b64      	ldr	r3, [pc, #400]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	0619      	lsls	r1, r3, #24
 800be26:	4b63      	ldr	r3, [pc, #396]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	041b      	lsls	r3, r3, #16
 800be2c:	4319      	orrs	r1, r3
 800be2e:	4b61      	ldr	r3, [pc, #388]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800be30:	789b      	ldrb	r3, [r3, #2]
 800be32:	021b      	lsls	r3, r3, #8
 800be34:	430b      	orrs	r3, r1
 800be36:	495f      	ldr	r1, [pc, #380]	@ (800bfb4 <MX_LWIP_Init+0x250>)
 800be38:	78c9      	ldrb	r1, [r1, #3]
 800be3a:	430b      	orrs	r3, r1
 800be3c:	0e1b      	lsrs	r3, r3, #24
 800be3e:	4313      	orrs	r3, r2
 800be40:	4a5f      	ldr	r2, [pc, #380]	@ (800bfc0 <MX_LWIP_Init+0x25c>)
 800be42:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800be44:	4b5c      	ldr	r3, [pc, #368]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	061a      	lsls	r2, r3, #24
 800be4a:	4b5b      	ldr	r3, [pc, #364]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be4c:	785b      	ldrb	r3, [r3, #1]
 800be4e:	041b      	lsls	r3, r3, #16
 800be50:	431a      	orrs	r2, r3
 800be52:	4b59      	ldr	r3, [pc, #356]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be54:	789b      	ldrb	r3, [r3, #2]
 800be56:	021b      	lsls	r3, r3, #8
 800be58:	4313      	orrs	r3, r2
 800be5a:	4a57      	ldr	r2, [pc, #348]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be5c:	78d2      	ldrb	r2, [r2, #3]
 800be5e:	4313      	orrs	r3, r2
 800be60:	061a      	lsls	r2, r3, #24
 800be62:	4b55      	ldr	r3, [pc, #340]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	0619      	lsls	r1, r3, #24
 800be68:	4b53      	ldr	r3, [pc, #332]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be6a:	785b      	ldrb	r3, [r3, #1]
 800be6c:	041b      	lsls	r3, r3, #16
 800be6e:	4319      	orrs	r1, r3
 800be70:	4b51      	ldr	r3, [pc, #324]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be72:	789b      	ldrb	r3, [r3, #2]
 800be74:	021b      	lsls	r3, r3, #8
 800be76:	430b      	orrs	r3, r1
 800be78:	494f      	ldr	r1, [pc, #316]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be7a:	78c9      	ldrb	r1, [r1, #3]
 800be7c:	430b      	orrs	r3, r1
 800be7e:	021b      	lsls	r3, r3, #8
 800be80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be84:	431a      	orrs	r2, r3
 800be86:	4b4c      	ldr	r3, [pc, #304]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	0619      	lsls	r1, r3, #24
 800be8c:	4b4a      	ldr	r3, [pc, #296]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be8e:	785b      	ldrb	r3, [r3, #1]
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	4319      	orrs	r1, r3
 800be94:	4b48      	ldr	r3, [pc, #288]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be96:	789b      	ldrb	r3, [r3, #2]
 800be98:	021b      	lsls	r3, r3, #8
 800be9a:	430b      	orrs	r3, r1
 800be9c:	4946      	ldr	r1, [pc, #280]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800be9e:	78c9      	ldrb	r1, [r1, #3]
 800bea0:	430b      	orrs	r3, r1
 800bea2:	0a1b      	lsrs	r3, r3, #8
 800bea4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bea8:	431a      	orrs	r2, r3
 800beaa:	4b43      	ldr	r3, [pc, #268]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	0619      	lsls	r1, r3, #24
 800beb0:	4b41      	ldr	r3, [pc, #260]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800beb2:	785b      	ldrb	r3, [r3, #1]
 800beb4:	041b      	lsls	r3, r3, #16
 800beb6:	4319      	orrs	r1, r3
 800beb8:	4b3f      	ldr	r3, [pc, #252]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800beba:	789b      	ldrb	r3, [r3, #2]
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	430b      	orrs	r3, r1
 800bec0:	493d      	ldr	r1, [pc, #244]	@ (800bfb8 <MX_LWIP_Init+0x254>)
 800bec2:	78c9      	ldrb	r1, [r1, #3]
 800bec4:	430b      	orrs	r3, r1
 800bec6:	0e1b      	lsrs	r3, r3, #24
 800bec8:	4313      	orrs	r3, r2
 800beca:	4a3e      	ldr	r2, [pc, #248]	@ (800bfc4 <MX_LWIP_Init+0x260>)
 800becc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bece:	4b3b      	ldr	r3, [pc, #236]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	061a      	lsls	r2, r3, #24
 800bed4:	4b39      	ldr	r3, [pc, #228]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bed6:	785b      	ldrb	r3, [r3, #1]
 800bed8:	041b      	lsls	r3, r3, #16
 800beda:	431a      	orrs	r2, r3
 800bedc:	4b37      	ldr	r3, [pc, #220]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bede:	789b      	ldrb	r3, [r3, #2]
 800bee0:	021b      	lsls	r3, r3, #8
 800bee2:	4313      	orrs	r3, r2
 800bee4:	4a35      	ldr	r2, [pc, #212]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bee6:	78d2      	ldrb	r2, [r2, #3]
 800bee8:	4313      	orrs	r3, r2
 800beea:	061a      	lsls	r2, r3, #24
 800beec:	4b33      	ldr	r3, [pc, #204]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	0619      	lsls	r1, r3, #24
 800bef2:	4b32      	ldr	r3, [pc, #200]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	041b      	lsls	r3, r3, #16
 800bef8:	4319      	orrs	r1, r3
 800befa:	4b30      	ldr	r3, [pc, #192]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800befc:	789b      	ldrb	r3, [r3, #2]
 800befe:	021b      	lsls	r3, r3, #8
 800bf00:	430b      	orrs	r3, r1
 800bf02:	492e      	ldr	r1, [pc, #184]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf04:	78c9      	ldrb	r1, [r1, #3]
 800bf06:	430b      	orrs	r3, r1
 800bf08:	021b      	lsls	r3, r3, #8
 800bf0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	4b2a      	ldr	r3, [pc, #168]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	0619      	lsls	r1, r3, #24
 800bf16:	4b29      	ldr	r3, [pc, #164]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf18:	785b      	ldrb	r3, [r3, #1]
 800bf1a:	041b      	lsls	r3, r3, #16
 800bf1c:	4319      	orrs	r1, r3
 800bf1e:	4b27      	ldr	r3, [pc, #156]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf20:	789b      	ldrb	r3, [r3, #2]
 800bf22:	021b      	lsls	r3, r3, #8
 800bf24:	430b      	orrs	r3, r1
 800bf26:	4925      	ldr	r1, [pc, #148]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf28:	78c9      	ldrb	r1, [r1, #3]
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	0a1b      	lsrs	r3, r3, #8
 800bf2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf32:	431a      	orrs	r2, r3
 800bf34:	4b21      	ldr	r3, [pc, #132]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	0619      	lsls	r1, r3, #24
 800bf3a:	4b20      	ldr	r3, [pc, #128]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf3c:	785b      	ldrb	r3, [r3, #1]
 800bf3e:	041b      	lsls	r3, r3, #16
 800bf40:	4319      	orrs	r1, r3
 800bf42:	4b1e      	ldr	r3, [pc, #120]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf44:	789b      	ldrb	r3, [r3, #2]
 800bf46:	021b      	lsls	r3, r3, #8
 800bf48:	430b      	orrs	r3, r1
 800bf4a:	491c      	ldr	r1, [pc, #112]	@ (800bfbc <MX_LWIP_Init+0x258>)
 800bf4c:	78c9      	ldrb	r1, [r1, #3]
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	0e1b      	lsrs	r3, r3, #24
 800bf52:	4313      	orrs	r3, r2
 800bf54:	4a1c      	ldr	r2, [pc, #112]	@ (800bfc8 <MX_LWIP_Init+0x264>)
 800bf56:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bf58:	4b1c      	ldr	r3, [pc, #112]	@ (800bfcc <MX_LWIP_Init+0x268>)
 800bf5a:	9302      	str	r3, [sp, #8]
 800bf5c:	4b1c      	ldr	r3, [pc, #112]	@ (800bfd0 <MX_LWIP_Init+0x26c>)
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	2300      	movs	r3, #0
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	4b18      	ldr	r3, [pc, #96]	@ (800bfc8 <MX_LWIP_Init+0x264>)
 800bf66:	4a17      	ldr	r2, [pc, #92]	@ (800bfc4 <MX_LWIP_Init+0x260>)
 800bf68:	4915      	ldr	r1, [pc, #84]	@ (800bfc0 <MX_LWIP_Init+0x25c>)
 800bf6a:	481a      	ldr	r0, [pc, #104]	@ (800bfd4 <MX_LWIP_Init+0x270>)
 800bf6c:	f007 fd82 	bl	8013a74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bf70:	4818      	ldr	r0, [pc, #96]	@ (800bfd4 <MX_LWIP_Init+0x270>)
 800bf72:	f008 f813 	bl	8013f9c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bf76:	4817      	ldr	r0, [pc, #92]	@ (800bfd4 <MX_LWIP_Init+0x270>)
 800bf78:	f008 f834 	bl	8013fe4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bf7c:	4916      	ldr	r1, [pc, #88]	@ (800bfd8 <MX_LWIP_Init+0x274>)
 800bf7e:	4815      	ldr	r0, [pc, #84]	@ (800bfd4 <MX_LWIP_Init+0x270>)
 800bf80:	f008 f932 	bl	80141e8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bf84:	2224      	movs	r2, #36	@ 0x24
 800bf86:	2100      	movs	r1, #0
 800bf88:	4814      	ldr	r0, [pc, #80]	@ (800bfdc <MX_LWIP_Init+0x278>)
 800bf8a:	f014 fce3 	bl	8020954 <memset>
  attributes.name = "EthLink";
 800bf8e:	4b13      	ldr	r3, [pc, #76]	@ (800bfdc <MX_LWIP_Init+0x278>)
 800bf90:	4a13      	ldr	r2, [pc, #76]	@ (800bfe0 <MX_LWIP_Init+0x27c>)
 800bf92:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bf94:	4b11      	ldr	r3, [pc, #68]	@ (800bfdc <MX_LWIP_Init+0x278>)
 800bf96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bf9a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bf9c:	4b0f      	ldr	r3, [pc, #60]	@ (800bfdc <MX_LWIP_Init+0x278>)
 800bf9e:	2210      	movs	r2, #16
 800bfa0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bfa2:	4a0e      	ldr	r2, [pc, #56]	@ (800bfdc <MX_LWIP_Init+0x278>)
 800bfa4:	490b      	ldr	r1, [pc, #44]	@ (800bfd4 <MX_LWIP_Init+0x270>)
 800bfa6:	480f      	ldr	r0, [pc, #60]	@ (800bfe4 <MX_LWIP_Init+0x280>)
 800bfa8:	f000 fdce 	bl	800cb48 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bfac:	bf00      	nop
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20000b90 	.word	0x20000b90
 800bfb8:	20000b94 	.word	0x20000b94
 800bfbc:	20000b98 	.word	0x20000b98
 800bfc0:	20000b84 	.word	0x20000b84
 800bfc4:	20000b88 	.word	0x20000b88
 800bfc8:	20000b8c 	.word	0x20000b8c
 800bfcc:	08012bfd 	.word	0x08012bfd
 800bfd0:	0800c529 	.word	0x0800c529
 800bfd4:	20000b50 	.word	0x20000b50
 800bfd8:	0800bfe9 	.word	0x0800bfe9
 800bfdc:	20000b9c 	.word	0x20000b9c
 800bfe0:	080217e0 	.word	0x080217e0
 800bfe4:	0800c801 	.word	0x0800c801

0800bfe8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c00e:	2320      	movs	r3, #32
 800c010:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c012:	f3bf 8f4f 	dsb	sy
}
 800c016:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c018:	e00b      	b.n	800c032 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c01a:	4a0d      	ldr	r2, [pc, #52]	@ (800c050 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	4413      	add	r3, r2
 800c028:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c02a:	697a      	ldr	r2, [r7, #20]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	1ad3      	subs	r3, r2, r3
 800c030:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2b00      	cmp	r3, #0
 800c036:	dcf0      	bgt.n	800c01a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c038:	f3bf 8f4f 	dsb	sy
}
 800c03c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c03e:	f3bf 8f6f 	isb	sy
}
 800c042:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c044:	bf00      	nop
 800c046:	371c      	adds	r7, #28
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	e000ed00 	.word	0xe000ed00

0800c054 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c05c:	4b04      	ldr	r3, [pc, #16]	@ (800c070 <HAL_ETH_RxCpltCallback+0x1c>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4618      	mov	r0, r3
 800c062:	f001 f897 	bl	800d194 <osSemaphoreRelease>
}
 800c066:	bf00      	nop
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	2000cfdc 	.word	0x2000cfdc

0800c074 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c07c:	4b04      	ldr	r3, [pc, #16]	@ (800c090 <HAL_ETH_TxCpltCallback+0x1c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	f001 f887 	bl	800d194 <osSemaphoreRelease>
}
 800c086:	bf00      	nop
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	2000cfe0 	.word	0x2000cfe0

0800c094 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7f8 fb90 	bl	80047c2 <HAL_ETH_GetDMAError>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0a8:	2b80      	cmp	r3, #128	@ 0x80
 800c0aa:	d104      	bne.n	800c0b6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c0ac:	4b04      	ldr	r3, [pc, #16]	@ (800c0c0 <HAL_ETH_ErrorCallback+0x2c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f001 f86f 	bl	800d194 <osSemaphoreRelease>
  }
}
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	2000cfdc 	.word	0x2000cfdc

0800c0c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b0aa      	sub	sp, #168	@ 0xa8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c0de:	f107 0310 	add.w	r3, r7, #16
 800c0e2:	2264      	movs	r2, #100	@ 0x64
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f014 fc34 	bl	8020954 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c0ec:	4b89      	ldr	r3, [pc, #548]	@ (800c314 <low_level_init+0x250>)
 800c0ee:	4a8a      	ldr	r2, [pc, #552]	@ (800c318 <low_level_init+0x254>)
 800c0f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c0f6:	2380      	movs	r3, #128	@ 0x80
 800c0f8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c0fa:	23e1      	movs	r3, #225	@ 0xe1
 800c0fc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c0fe:	2300      	movs	r3, #0
 800c100:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c102:	2300      	movs	r3, #0
 800c104:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c106:	2300      	movs	r3, #0
 800c108:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c10a:	4a82      	ldr	r2, [pc, #520]	@ (800c314 <low_level_init+0x250>)
 800c10c:	f107 0308 	add.w	r3, r7, #8
 800c110:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c112:	4b80      	ldr	r3, [pc, #512]	@ (800c314 <low_level_init+0x250>)
 800c114:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c118:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c11a:	4b7e      	ldr	r3, [pc, #504]	@ (800c314 <low_level_init+0x250>)
 800c11c:	4a7f      	ldr	r2, [pc, #508]	@ (800c31c <low_level_init+0x258>)
 800c11e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c120:	4b7c      	ldr	r3, [pc, #496]	@ (800c314 <low_level_init+0x250>)
 800c122:	4a7f      	ldr	r2, [pc, #508]	@ (800c320 <low_level_init+0x25c>)
 800c124:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c126:	4b7b      	ldr	r3, [pc, #492]	@ (800c314 <low_level_init+0x250>)
 800c128:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c12c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c12e:	4879      	ldr	r0, [pc, #484]	@ (800c314 <low_level_init+0x250>)
 800c130:	f7f7 fcfe 	bl	8003b30 <HAL_ETH_Init>
 800c134:	4603      	mov	r3, r0
 800c136:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c13a:	2238      	movs	r2, #56	@ 0x38
 800c13c:	2100      	movs	r1, #0
 800c13e:	4879      	ldr	r0, [pc, #484]	@ (800c324 <low_level_init+0x260>)
 800c140:	f014 fc08 	bl	8020954 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c144:	4b77      	ldr	r3, [pc, #476]	@ (800c324 <low_level_init+0x260>)
 800c146:	2221      	movs	r2, #33	@ 0x21
 800c148:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c14a:	4b76      	ldr	r3, [pc, #472]	@ (800c324 <low_level_init+0x260>)
 800c14c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c150:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c152:	4b74      	ldr	r3, [pc, #464]	@ (800c324 <low_level_init+0x260>)
 800c154:	2200      	movs	r2, #0
 800c156:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c158:	4873      	ldr	r0, [pc, #460]	@ (800c328 <low_level_init+0x264>)
 800c15a:	f007 fb07 	bl	801376c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2206      	movs	r2, #6
 800c162:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c166:	4b6b      	ldr	r3, [pc, #428]	@ (800c314 <low_level_init+0x250>)
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	781a      	ldrb	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c172:	4b68      	ldr	r3, [pc, #416]	@ (800c314 <low_level_init+0x250>)
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	785a      	ldrb	r2, [r3, #1]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c17e:	4b65      	ldr	r3, [pc, #404]	@ (800c314 <low_level_init+0x250>)
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	789a      	ldrb	r2, [r3, #2]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c18a:	4b62      	ldr	r3, [pc, #392]	@ (800c314 <low_level_init+0x250>)
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	78da      	ldrb	r2, [r3, #3]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c196:	4b5f      	ldr	r3, [pc, #380]	@ (800c314 <low_level_init+0x250>)
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	791a      	ldrb	r2, [r3, #4]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c1a2:	4b5c      	ldr	r3, [pc, #368]	@ (800c314 <low_level_init+0x250>)
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	795a      	ldrb	r2, [r3, #5]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c1b4:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1bc:	f043 030a 	orr.w	r3, r3, #10
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2100      	movs	r1, #0
 800c1cc:	2001      	movs	r0, #1
 800c1ce:	f000 fedf 	bl	800cf90 <osSemaphoreNew>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	4a55      	ldr	r2, [pc, #340]	@ (800c32c <low_level_init+0x268>)
 800c1d6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2100      	movs	r1, #0
 800c1dc:	2001      	movs	r0, #1
 800c1de:	f000 fed7 	bl	800cf90 <osSemaphoreNew>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	4a52      	ldr	r2, [pc, #328]	@ (800c330 <low_level_init+0x26c>)
 800c1e6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c1e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c1ec:	2224      	movs	r2, #36	@ 0x24
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f014 fbaf 	bl	8020954 <memset>
  attributes.name = "EthIf";
 800c1f6:	4b4f      	ldr	r3, [pc, #316]	@ (800c334 <low_level_init+0x270>)
 800c1f8:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c1fa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c1fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c202:	2330      	movs	r3, #48	@ 0x30
 800c204:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c208:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c20c:	461a      	mov	r2, r3
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	4849      	ldr	r0, [pc, #292]	@ (800c338 <low_level_init+0x274>)
 800c212:	f000 fc99 	bl	800cb48 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c216:	4949      	ldr	r1, [pc, #292]	@ (800c33c <low_level_init+0x278>)
 800c218:	4849      	ldr	r0, [pc, #292]	@ (800c340 <low_level_init+0x27c>)
 800c21a:	f7f5 ff9c 	bl	8002156 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c21e:	4848      	ldr	r0, [pc, #288]	@ (800c340 <low_level_init+0x27c>)
 800c220:	f7f5 ffcb 	bl	80021ba <LAN8742_Init>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d006      	beq.n	800c238 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f007 ffac 	bl	8014188 <netif_set_link_down>
    netif_set_down(netif);
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f007 ff43 	bl	80140bc <netif_set_down>
 800c236:	e06a      	b.n	800c30e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c238:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d164      	bne.n	800c30a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c240:	483f      	ldr	r0, [pc, #252]	@ (800c340 <low_level_init+0x27c>)
 800c242:	f7f6 f807 	bl	8002254 <LAN8742_GetLinkState>
 800c246:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c24a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c24e:	2b01      	cmp	r3, #1
 800c250:	dc06      	bgt.n	800c260 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f007 ff98 	bl	8014188 <netif_set_link_down>
      netif_set_down(netif);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f007 ff2f 	bl	80140bc <netif_set_down>
 800c25e:	e056      	b.n	800c30e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c264:	3b02      	subs	r3, #2
 800c266:	2b03      	cmp	r3, #3
 800c268:	d82a      	bhi.n	800c2c0 <low_level_init+0x1fc>
 800c26a:	a201      	add	r2, pc, #4	@ (adr r2, 800c270 <low_level_init+0x1ac>)
 800c26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c270:	0800c281 	.word	0x0800c281
 800c274:	0800c293 	.word	0x0800c293
 800c278:	0800c2a3 	.word	0x0800c2a3
 800c27c:	0800c2b3 	.word	0x0800c2b3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c280:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c288:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c28c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c290:	e01f      	b.n	800c2d2 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c292:	2300      	movs	r3, #0
 800c294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c298:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c29c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c2a0:	e017      	b.n	800c2d2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c2a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c2b0:	e00f      	b.n	800c2d2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c2be:	e008      	b.n	800c2d2 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c2c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c2c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c2d0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c2d2:	f107 0310 	add.w	r3, r7, #16
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	480e      	ldr	r0, [pc, #56]	@ (800c314 <low_level_init+0x250>)
 800c2da:	f7f8 f911 	bl	8004500 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c2de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c2e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c2e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c2ea:	f107 0310 	add.w	r3, r7, #16
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4808      	ldr	r0, [pc, #32]	@ (800c314 <low_level_init+0x250>)
 800c2f2:	f7f8 f9fc 	bl	80046ee <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c2f6:	4807      	ldr	r0, [pc, #28]	@ (800c314 <low_level_init+0x250>)
 800c2f8:	f7f7 fcb4 	bl	8003c64 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f007 fe71 	bl	8013fe4 <netif_set_up>
    netif_set_link_up(netif);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f007 ff0c 	bl	8014120 <netif_set_link_up>
 800c308:	e001      	b.n	800c30e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c30a:	f7f4 ff8f 	bl	800122c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c30e:	37a8      	adds	r7, #168	@ 0xa8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	2000cfe4 	.word	0x2000cfe4
 800c318:	40028000 	.word	0x40028000
 800c31c:	20000170 	.word	0x20000170
 800c320:	200000d0 	.word	0x200000d0
 800c324:	2000d094 	.word	0x2000d094
 800c328:	080265d8 	.word	0x080265d8
 800c32c:	2000cfdc 	.word	0x2000cfdc
 800c330:	2000cfe0 	.word	0x2000cfe0
 800c334:	08021800 	.word	0x08021800
 800c338:	0800c4d5 	.word	0x0800c4d5
 800c33c:	2000000c 	.word	0x2000000c
 800c340:	2000d0cc 	.word	0x2000d0cc

0800c344 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b092      	sub	sp, #72	@ 0x48
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c34e:	2300      	movs	r3, #0
 800c350:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c35c:	f107 030c 	add.w	r3, r7, #12
 800c360:	2230      	movs	r2, #48	@ 0x30
 800c362:	2100      	movs	r1, #0
 800c364:	4618      	mov	r0, r3
 800c366:	f014 faf5 	bl	8020954 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c36a:	f107 030c 	add.w	r3, r7, #12
 800c36e:	2230      	movs	r2, #48	@ 0x30
 800c370:	2100      	movs	r1, #0
 800c372:	4618      	mov	r0, r3
 800c374:	f014 faee 	bl	8020954 <memset>

  for(q = p; q != NULL; q = q->next)
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c37c:	e045      	b.n	800c40a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c37e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c380:	2b03      	cmp	r3, #3
 800c382:	d902      	bls.n	800c38a <low_level_output+0x46>
      return ERR_IF;
 800c384:	f06f 030b 	mvn.w	r3, #11
 800c388:	e07f      	b.n	800c48a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c38a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c38c:	6859      	ldr	r1, [r3, #4]
 800c38e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c390:	4613      	mov	r3, r2
 800c392:	005b      	lsls	r3, r3, #1
 800c394:	4413      	add	r3, r2
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	3348      	adds	r3, #72	@ 0x48
 800c39a:	443b      	add	r3, r7
 800c39c:	3b3c      	subs	r3, #60	@ 0x3c
 800c39e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3a2:	895b      	ldrh	r3, [r3, #10]
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	005b      	lsls	r3, r3, #1
 800c3ac:	4413      	add	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	3348      	adds	r3, #72	@ 0x48
 800c3b2:	443b      	add	r3, r7
 800c3b4:	3b38      	subs	r3, #56	@ 0x38
 800c3b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c3b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d011      	beq.n	800c3e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3c0:	1e5a      	subs	r2, r3, #1
 800c3c2:	f107 000c 	add.w	r0, r7, #12
 800c3c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	440b      	add	r3, r1
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	18c1      	adds	r1, r0, r3
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	4413      	add	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	3348      	adds	r3, #72	@ 0x48
 800c3dc:	443b      	add	r3, r7
 800c3de:	3b34      	subs	r3, #52	@ 0x34
 800c3e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d109      	bne.n	800c3fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c3ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	4413      	add	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	3348      	adds	r3, #72	@ 0x48
 800c3f6:	443b      	add	r3, r7
 800c3f8:	3b34      	subs	r3, #52	@ 0x34
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c3fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c400:	3301      	adds	r3, #1
 800c402:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	643b      	str	r3, [r7, #64]	@ 0x40
 800c40a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1b6      	bne.n	800c37e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	891b      	ldrh	r3, [r3, #8]
 800c414:	461a      	mov	r2, r3
 800c416:	4b1f      	ldr	r3, [pc, #124]	@ (800c494 <low_level_output+0x150>)
 800c418:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c41a:	4a1e      	ldr	r2, [pc, #120]	@ (800c494 <low_level_output+0x150>)
 800c41c:	f107 030c 	add.w	r3, r7, #12
 800c420:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c422:	4a1c      	ldr	r2, [pc, #112]	@ (800c494 <low_level_output+0x150>)
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c428:	6838      	ldr	r0, [r7, #0]
 800c42a:	f008 fb95 	bl	8014b58 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c42e:	4919      	ldr	r1, [pc, #100]	@ (800c494 <low_level_output+0x150>)
 800c430:	4819      	ldr	r0, [pc, #100]	@ (800c498 <low_level_output+0x154>)
 800c432:	f7f7 fd07 	bl	8003e44 <HAL_ETH_Transmit_IT>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d103      	bne.n	800c444 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c442:	e01b      	b.n	800c47c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c444:	4814      	ldr	r0, [pc, #80]	@ (800c498 <low_level_output+0x154>)
 800c446:	f7f8 f9af 	bl	80047a8 <HAL_ETH_GetError>
 800c44a:	4603      	mov	r3, r0
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00d      	beq.n	800c470 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c454:	4b11      	ldr	r3, [pc, #68]	@ (800c49c <low_level_output+0x158>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fe33 	bl	800d0c8 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c462:	480d      	ldr	r0, [pc, #52]	@ (800c498 <low_level_output+0x154>)
 800c464:	f7f7 fe8e 	bl	8004184 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c468:	23fe      	movs	r3, #254	@ 0xfe
 800c46a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c46e:	e005      	b.n	800c47c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c470:	6838      	ldr	r0, [r7, #0]
 800c472:	f008 fab3 	bl	80149dc <pbuf_free>
        errval =  ERR_IF;
 800c476:	23f4      	movs	r3, #244	@ 0xf4
 800c478:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c47c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c480:	f113 0f02 	cmn.w	r3, #2
 800c484:	d0d3      	beq.n	800c42e <low_level_output+0xea>

  return errval;
 800c486:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3748      	adds	r7, #72	@ 0x48
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	2000d094 	.word	0x2000d094
 800c498:	2000cfe4 	.word	0x2000cfe4
 800c49c:	2000cfe0 	.word	0x2000cfe0

0800c4a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c4ac:	4b07      	ldr	r3, [pc, #28]	@ (800c4cc <low_level_input+0x2c>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c4b4:	f107 030c 	add.w	r3, r7, #12
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4805      	ldr	r0, [pc, #20]	@ (800c4d0 <low_level_input+0x30>)
 800c4bc:	f7f7 fd1e 	bl	8003efc <HAL_ETH_ReadData>
  }

  return p;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	2000cfd8 	.word	0x2000cfd8
 800c4d0:	2000cfe4 	.word	0x2000cfe4

0800c4d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c4e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c524 <ethernetif_input+0x50>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 fdeb 	bl	800d0c8 <osSemaphoreAcquire>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1f5      	bne.n	800c4e4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c4f8:	68b8      	ldr	r0, [r7, #8]
 800c4fa:	f7ff ffd1 	bl	800c4a0 <low_level_input>
 800c4fe:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00a      	beq.n	800c51c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	68b9      	ldr	r1, [r7, #8]
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	4798      	blx	r3
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d002      	beq.n	800c51c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f008 fa60 	bl	80149dc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1ea      	bne.n	800c4f8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c522:	e7df      	b.n	800c4e4 <ethernetif_input+0x10>
 800c524:	2000cfdc 	.word	0x2000cfdc

0800c528 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d106      	bne.n	800c544 <ethernetif_init+0x1c>
 800c536:	4b0e      	ldr	r3, [pc, #56]	@ (800c570 <ethernetif_init+0x48>)
 800c538:	f240 220d 	movw	r2, #525	@ 0x20d
 800c53c:	490d      	ldr	r1, [pc, #52]	@ (800c574 <ethernetif_init+0x4c>)
 800c53e:	480e      	ldr	r0, [pc, #56]	@ (800c578 <ethernetif_init+0x50>)
 800c540:	f014 f8a8 	bl	8020694 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2273      	movs	r2, #115	@ 0x73
 800c548:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2274      	movs	r2, #116	@ 0x74
 800c550:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a09      	ldr	r2, [pc, #36]	@ (800c57c <ethernetif_init+0x54>)
 800c558:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a08      	ldr	r2, [pc, #32]	@ (800c580 <ethernetif_init+0x58>)
 800c55e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f7ff fdaf 	bl	800c0c4 <low_level_init>

  return ERR_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	08021808 	.word	0x08021808
 800c574:	08021824 	.word	0x08021824
 800c578:	08021834 	.word	0x08021834
 800c57c:	0801cbe9 	.word	0x0801cbe9
 800c580:	0800c345 	.word	0x0800c345

0800c584 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c590:	68f9      	ldr	r1, [r7, #12]
 800c592:	4809      	ldr	r0, [pc, #36]	@ (800c5b8 <pbuf_free_custom+0x34>)
 800c594:	f007 fa18 	bl	80139c8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c598:	4b08      	ldr	r3, [pc, #32]	@ (800c5bc <pbuf_free_custom+0x38>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d107      	bne.n	800c5b0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c5a0:	4b06      	ldr	r3, [pc, #24]	@ (800c5bc <pbuf_free_custom+0x38>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c5a6:	4b06      	ldr	r3, [pc, #24]	@ (800c5c0 <pbuf_free_custom+0x3c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 fdf2 	bl	800d194 <osSemaphoreRelease>
  }
}
 800c5b0:	bf00      	nop
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	080265d8 	.word	0x080265d8
 800c5bc:	2000cfd8 	.word	0x2000cfd8
 800c5c0:	2000cfdc 	.word	0x2000cfdc

0800c5c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c5c8:	f7f5 feec 	bl	80023a4 <HAL_GetTick>
 800c5cc:	4603      	mov	r3, r0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	bd80      	pop	{r7, pc}
	...

0800c5d4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08e      	sub	sp, #56	@ 0x38
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	601a      	str	r2, [r3, #0]
 800c5e4:	605a      	str	r2, [r3, #4]
 800c5e6:	609a      	str	r2, [r3, #8]
 800c5e8:	60da      	str	r2, [r3, #12]
 800c5ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a56      	ldr	r2, [pc, #344]	@ (800c74c <HAL_ETH_MspInit+0x178>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	f040 80a6 	bne.w	800c744 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c5f8:	4b55      	ldr	r3, [pc, #340]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c5fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5fc:	4a54      	ldr	r2, [pc, #336]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c5fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c602:	6313      	str	r3, [r2, #48]	@ 0x30
 800c604:	4b52      	ldr	r3, [pc, #328]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c60c:	623b      	str	r3, [r7, #32]
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	4b4f      	ldr	r3, [pc, #316]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c614:	4a4e      	ldr	r2, [pc, #312]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c616:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c61a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c61c:	4b4c      	ldr	r3, [pc, #304]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c620:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	4b49      	ldr	r3, [pc, #292]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c62a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c62c:	4a48      	ldr	r2, [pc, #288]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c62e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c632:	6313      	str	r3, [r2, #48]	@ 0x30
 800c634:	4b46      	ldr	r3, [pc, #280]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c63c:	61bb      	str	r3, [r7, #24]
 800c63e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c640:	4b43      	ldr	r3, [pc, #268]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c644:	4a42      	ldr	r2, [pc, #264]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c646:	f043 0304 	orr.w	r3, r3, #4
 800c64a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c64c:	4b40      	ldr	r3, [pc, #256]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c64e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c650:	f003 0304 	and.w	r3, r3, #4
 800c654:	617b      	str	r3, [r7, #20]
 800c656:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c658:	4b3d      	ldr	r3, [pc, #244]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c65a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c65c:	4a3c      	ldr	r2, [pc, #240]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c65e:	f043 0301 	orr.w	r3, r3, #1
 800c662:	6313      	str	r3, [r2, #48]	@ 0x30
 800c664:	4b3a      	ldr	r3, [pc, #232]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c668:	f003 0301 	and.w	r3, r3, #1
 800c66c:	613b      	str	r3, [r7, #16]
 800c66e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c670:	4b37      	ldr	r3, [pc, #220]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c674:	4a36      	ldr	r2, [pc, #216]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c676:	f043 0302 	orr.w	r3, r3, #2
 800c67a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c67c:	4b34      	ldr	r3, [pc, #208]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c67e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c680:	f003 0302 	and.w	r3, r3, #2
 800c684:	60fb      	str	r3, [r7, #12]
 800c686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c688:	4b31      	ldr	r3, [pc, #196]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c68a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c68c:	4a30      	ldr	r2, [pc, #192]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c692:	6313      	str	r3, [r2, #48]	@ 0x30
 800c694:	4b2e      	ldr	r3, [pc, #184]	@ (800c750 <HAL_ETH_MspInit+0x17c>)
 800c696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c69c:	60bb      	str	r3, [r7, #8]
 800c69e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c6a0:	2332      	movs	r3, #50	@ 0x32
 800c6a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c6b0:	230b      	movs	r3, #11
 800c6b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c6b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	4826      	ldr	r0, [pc, #152]	@ (800c754 <HAL_ETH_MspInit+0x180>)
 800c6bc:	f7f8 fcae 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c6c0:	2386      	movs	r3, #134	@ 0x86
 800c6c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c6d0:	230b      	movs	r3, #11
 800c6d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6d8:	4619      	mov	r1, r3
 800c6da:	481f      	ldr	r0, [pc, #124]	@ (800c758 <HAL_ETH_MspInit+0x184>)
 800c6dc:	f7f8 fc9e 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c6e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c6e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c6f2:	230b      	movs	r3, #11
 800c6f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4817      	ldr	r0, [pc, #92]	@ (800c75c <HAL_ETH_MspInit+0x188>)
 800c6fe:	f7f8 fc8d 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c702:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c706:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c708:	2302      	movs	r3, #2
 800c70a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c70c:	2300      	movs	r3, #0
 800c70e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c710:	2303      	movs	r3, #3
 800c712:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c714:	230b      	movs	r3, #11
 800c716:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c71c:	4619      	mov	r1, r3
 800c71e:	4810      	ldr	r0, [pc, #64]	@ (800c760 <HAL_ETH_MspInit+0x18c>)
 800c720:	f7f8 fc7c 	bl	800501c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c724:	2200      	movs	r2, #0
 800c726:	2105      	movs	r1, #5
 800c728:	203d      	movs	r0, #61	@ 0x3d
 800c72a:	f7f6 fba9 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c72e:	203d      	movs	r0, #61	@ 0x3d
 800c730:	f7f6 fbc2 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c734:	2200      	movs	r2, #0
 800c736:	2105      	movs	r1, #5
 800c738:	203e      	movs	r0, #62	@ 0x3e
 800c73a:	f7f6 fba1 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c73e:	203e      	movs	r0, #62	@ 0x3e
 800c740:	f7f6 fbba 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c744:	bf00      	nop
 800c746:	3738      	adds	r7, #56	@ 0x38
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	40028000 	.word	0x40028000
 800c750:	40023800 	.word	0x40023800
 800c754:	40020800 	.word	0x40020800
 800c758:	40020000 	.word	0x40020000
 800c75c:	40020400 	.word	0x40020400
 800c760:	40021800 	.word	0x40021800

0800c764 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c768:	4802      	ldr	r0, [pc, #8]	@ (800c774 <ETH_PHY_IO_Init+0x10>)
 800c76a:	f7f7 ffdb 	bl	8004724 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	bd80      	pop	{r7, pc}
 800c774:	2000cfe4 	.word	0x2000cfe4

0800c778 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c778:	b480      	push	{r7}
 800c77a:	af00      	add	r7, sp, #0
  return 0;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	68f9      	ldr	r1, [r7, #12]
 800c79a:	4807      	ldr	r0, [pc, #28]	@ (800c7b8 <ETH_PHY_IO_ReadReg+0x30>)
 800c79c:	f7f7 fe1c 	bl	80043d8 <HAL_ETH_ReadPHYRegister>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c7a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7aa:	e000      	b.n	800c7ae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	2000cfe4 	.word	0x2000cfe4

0800c7bc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	68f9      	ldr	r1, [r7, #12]
 800c7ce:	4807      	ldr	r0, [pc, #28]	@ (800c7ec <ETH_PHY_IO_WriteReg+0x30>)
 800c7d0:	f7f7 fe4d 	bl	800446e <HAL_ETH_WritePHYRegister>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c7da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7de:	e000      	b.n	800c7e2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	2000cfe4 	.word	0x2000cfe4

0800c7f0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c7f4:	f7f5 fdd6 	bl	80023a4 <HAL_GetTick>
 800c7f8:	4603      	mov	r3, r0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	bd80      	pop	{r7, pc}
	...

0800c800 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b0a0      	sub	sp, #128	@ 0x80
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c808:	f107 0308 	add.w	r3, r7, #8
 800c80c:	2264      	movs	r2, #100	@ 0x64
 800c80e:	2100      	movs	r1, #0
 800c810:	4618      	mov	r0, r3
 800c812:	f014 f89f 	bl	8020954 <memset>
  int32_t PHYLinkState = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c81a:	2300      	movs	r3, #0
 800c81c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c81e:	2300      	movs	r3, #0
 800c820:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c822:	2300      	movs	r3, #0
 800c824:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c82a:	483a      	ldr	r0, [pc, #232]	@ (800c914 <ethernet_link_thread+0x114>)
 800c82c:	f7f5 fd12 	bl	8002254 <LAN8742_GetLinkState>
 800c830:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c834:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c838:	089b      	lsrs	r3, r3, #2
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00c      	beq.n	800c85e <ethernet_link_thread+0x5e>
 800c844:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c846:	2b01      	cmp	r3, #1
 800c848:	dc09      	bgt.n	800c85e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c84a:	4833      	ldr	r0, [pc, #204]	@ (800c918 <ethernet_link_thread+0x118>)
 800c84c:	f7f7 fa7a 	bl	8003d44 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c850:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c852:	f007 fc33 	bl	80140bc <netif_set_down>
    netif_set_link_down(netif);
 800c856:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c858:	f007 fc96 	bl	8014188 <netif_set_link_down>
 800c85c:	e055      	b.n	800c90a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c85e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c860:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c864:	f003 0304 	and.w	r3, r3, #4
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d14e      	bne.n	800c90a <ethernet_link_thread+0x10a>
 800c86c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c86e:	2b01      	cmp	r3, #1
 800c870:	dd4b      	ble.n	800c90a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c874:	3b02      	subs	r3, #2
 800c876:	2b03      	cmp	r3, #3
 800c878:	d82a      	bhi.n	800c8d0 <ethernet_link_thread+0xd0>
 800c87a:	a201      	add	r2, pc, #4	@ (adr r2, 800c880 <ethernet_link_thread+0x80>)
 800c87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c880:	0800c891 	.word	0x0800c891
 800c884:	0800c8a3 	.word	0x0800c8a3
 800c888:	0800c8b3 	.word	0x0800c8b3
 800c88c:	0800c8c3 	.word	0x0800c8c3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c890:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c894:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c896:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c89a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c89c:	2301      	movs	r3, #1
 800c89e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c8a0:	e017      	b.n	800c8d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c8a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c8aa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c8b0:	e00f      	b.n	800c8d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c8b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c8b6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c8c0:	e007      	b.n	800c8d2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c8ce:	e000      	b.n	800c8d2 <ethernet_link_thread+0xd2>
    default:
      break;
 800c8d0:	bf00      	nop
    }

    if(linkchanged)
 800c8d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d018      	beq.n	800c90a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c8d8:	f107 0308 	add.w	r3, r7, #8
 800c8dc:	4619      	mov	r1, r3
 800c8de:	480e      	ldr	r0, [pc, #56]	@ (800c918 <ethernet_link_thread+0x118>)
 800c8e0:	f7f7 fe0e 	bl	8004500 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c8e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8e6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c8e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8ea:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c8ec:	f107 0308 	add.w	r3, r7, #8
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4809      	ldr	r0, [pc, #36]	@ (800c918 <ethernet_link_thread+0x118>)
 800c8f4:	f7f7 fefb 	bl	80046ee <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c8f8:	4807      	ldr	r0, [pc, #28]	@ (800c918 <ethernet_link_thread+0x118>)
 800c8fa:	f7f7 f9b3 	bl	8003c64 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c8fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c900:	f007 fb70 	bl	8013fe4 <netif_set_up>
      netif_set_link_up(netif);
 800c904:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c906:	f007 fc0b 	bl	8014120 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c90a:	2064      	movs	r0, #100	@ 0x64
 800c90c:	f000 f9ca 	bl	800cca4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c910:	e78b      	b.n	800c82a <ethernet_link_thread+0x2a>
 800c912:	bf00      	nop
 800c914:	2000d0cc 	.word	0x2000d0cc
 800c918:	2000cfe4 	.word	0x2000cfe4

0800c91c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af02      	add	r7, sp, #8
 800c922:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c924:	4812      	ldr	r0, [pc, #72]	@ (800c970 <HAL_ETH_RxAllocateCallback+0x54>)
 800c926:	f006 ffd5 	bl	80138d4 <memp_malloc_pool>
 800c92a:	60f8      	str	r0, [r7, #12]
  if (p)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d014      	beq.n	800c95c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f103 0220 	add.w	r2, r3, #32
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4a0d      	ldr	r2, [pc, #52]	@ (800c974 <HAL_ETH_RxAllocateCallback+0x58>)
 800c940:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c94a:	9201      	str	r2, [sp, #4]
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2241      	movs	r2, #65	@ 0x41
 800c952:	2100      	movs	r1, #0
 800c954:	2000      	movs	r0, #0
 800c956:	f007 fe5f 	bl	8014618 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c95a:	e005      	b.n	800c968 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c95c:	4b06      	ldr	r3, [pc, #24]	@ (800c978 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c95e:	2201      	movs	r2, #1
 800c960:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	601a      	str	r2, [r3, #0]
}
 800c968:	bf00      	nop
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	080265d8 	.word	0x080265d8
 800c974:	0800c585 	.word	0x0800c585
 800c978:	2000cfd8 	.word	0x2000cfd8

0800c97c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
 800c988:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c992:	2300      	movs	r3, #0
 800c994:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	3b20      	subs	r3, #32
 800c99a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	887a      	ldrh	r2, [r7, #2]
 800c9ac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d103      	bne.n	800c9be <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	69fa      	ldr	r2, [r7, #28]
 800c9ba:	601a      	str	r2, [r3, #0]
 800c9bc:	e003      	b.n	800c9c6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	69fa      	ldr	r2, [r7, #28]
 800c9c4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	69fa      	ldr	r2, [r7, #28]
 800c9ca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	61fb      	str	r3, [r7, #28]
 800c9d2:	e009      	b.n	800c9e8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	891a      	ldrh	r2, [r3, #8]
 800c9d8:	887b      	ldrh	r3, [r7, #2]
 800c9da:	4413      	add	r3, r2
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	69fb      	ldr	r3, [r7, #28]
 800c9e0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	61fb      	str	r3, [r7, #28]
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1f2      	bne.n	800c9d4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c9ee:	887b      	ldrh	r3, [r7, #2]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff fb02 	bl	800bffc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c9f8:	bf00      	nop
 800c9fa:	3720      	adds	r7, #32
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f007 ffe7 	bl	80149dc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ca16:	b480      	push	{r7}
 800ca18:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ca1a:	bf00      	nop
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca2a:	f3ef 8305 	mrs	r3, IPSR
 800ca2e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10f      	bne.n	800ca56 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca36:	f3ef 8310 	mrs	r3, PRIMASK
 800ca3a:	607b      	str	r3, [r7, #4]
  return(result);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d105      	bne.n	800ca4e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ca42:	f3ef 8311 	mrs	r3, BASEPRI
 800ca46:	603b      	str	r3, [r7, #0]
  return(result);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d007      	beq.n	800ca5e <osKernelInitialize+0x3a>
 800ca4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ca88 <osKernelInitialize+0x64>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d103      	bne.n	800ca5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ca56:	f06f 0305 	mvn.w	r3, #5
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	e00c      	b.n	800ca78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ca5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ca88 <osKernelInitialize+0x64>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d105      	bne.n	800ca72 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ca66:	4b08      	ldr	r3, [pc, #32]	@ (800ca88 <osKernelInitialize+0x64>)
 800ca68:	2201      	movs	r2, #1
 800ca6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	e002      	b.n	800ca78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ca72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ca76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ca78:	68fb      	ldr	r3, [r7, #12]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	2000d0ec 	.word	0x2000d0ec

0800ca8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca92:	f3ef 8305 	mrs	r3, IPSR
 800ca96:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10f      	bne.n	800cabe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca9e:	f3ef 8310 	mrs	r3, PRIMASK
 800caa2:	607b      	str	r3, [r7, #4]
  return(result);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d105      	bne.n	800cab6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800caaa:	f3ef 8311 	mrs	r3, BASEPRI
 800caae:	603b      	str	r3, [r7, #0]
  return(result);
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d007      	beq.n	800cac6 <osKernelStart+0x3a>
 800cab6:	4b0f      	ldr	r3, [pc, #60]	@ (800caf4 <osKernelStart+0x68>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d103      	bne.n	800cac6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800cabe:	f06f 0305 	mvn.w	r3, #5
 800cac2:	60fb      	str	r3, [r7, #12]
 800cac4:	e010      	b.n	800cae8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cac6:	4b0b      	ldr	r3, [pc, #44]	@ (800caf4 <osKernelStart+0x68>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d109      	bne.n	800cae2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cace:	f7ff ffa2 	bl	800ca16 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cad2:	4b08      	ldr	r3, [pc, #32]	@ (800caf4 <osKernelStart+0x68>)
 800cad4:	2202      	movs	r2, #2
 800cad6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cad8:	f002 fa8c 	bl	800eff4 <vTaskStartScheduler>
      stat = osOK;
 800cadc:	2300      	movs	r3, #0
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	e002      	b.n	800cae8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cae6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cae8:	68fb      	ldr	r3, [r7, #12]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	2000d0ec 	.word	0x2000d0ec

0800caf8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cafe:	f3ef 8305 	mrs	r3, IPSR
 800cb02:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb04:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d10f      	bne.n	800cb2a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb0e:	607b      	str	r3, [r7, #4]
  return(result);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d105      	bne.n	800cb22 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb16:	f3ef 8311 	mrs	r3, BASEPRI
 800cb1a:	603b      	str	r3, [r7, #0]
  return(result);
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d007      	beq.n	800cb32 <osKernelGetTickCount+0x3a>
 800cb22:	4b08      	ldr	r3, [pc, #32]	@ (800cb44 <osKernelGetTickCount+0x4c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d103      	bne.n	800cb32 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cb2a:	f002 fb95 	bl	800f258 <xTaskGetTickCountFromISR>
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	e002      	b.n	800cb38 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cb32:	f002 fb81 	bl	800f238 <xTaskGetTickCount>
 800cb36:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cb38:	68fb      	ldr	r3, [r7, #12]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	2000d0ec 	.word	0x2000d0ec

0800cb48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b090      	sub	sp, #64	@ 0x40
 800cb4c:	af04      	add	r7, sp, #16
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb58:	f3ef 8305 	mrs	r3, IPSR
 800cb5c:	61fb      	str	r3, [r7, #28]
  return(result);
 800cb5e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f040 8090 	bne.w	800cc86 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb66:	f3ef 8310 	mrs	r3, PRIMASK
 800cb6a:	61bb      	str	r3, [r7, #24]
  return(result);
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d105      	bne.n	800cb7e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb72:	f3ef 8311 	mrs	r3, BASEPRI
 800cb76:	617b      	str	r3, [r7, #20]
  return(result);
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <osThreadNew+0x3e>
 800cb7e:	4b44      	ldr	r3, [pc, #272]	@ (800cc90 <osThreadNew+0x148>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b02      	cmp	r3, #2
 800cb84:	d07f      	beq.n	800cc86 <osThreadNew+0x13e>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d07c      	beq.n	800cc86 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800cb8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb90:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cb92:	2318      	movs	r3, #24
 800cb94:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800cb96:	2300      	movs	r3, #0
 800cb98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800cb9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb9e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d045      	beq.n	800cc32 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <osThreadNew+0x6c>
        name = attr->name;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d008      	beq.n	800cbda <osThreadNew+0x92>
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbca:	2b38      	cmp	r3, #56	@ 0x38
 800cbcc:	d805      	bhi.n	800cbda <osThreadNew+0x92>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	f003 0301 	and.w	r3, r3, #1
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <osThreadNew+0x96>
        return (NULL);
 800cbda:	2300      	movs	r3, #0
 800cbdc:	e054      	b.n	800cc88 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d003      	beq.n	800cbee <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	089b      	lsrs	r3, r3, #2
 800cbec:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00e      	beq.n	800cc14 <osThreadNew+0xcc>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	2ba7      	cmp	r3, #167	@ 0xa7
 800cbfc:	d90a      	bls.n	800cc14 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d006      	beq.n	800cc14 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d002      	beq.n	800cc14 <osThreadNew+0xcc>
        mem = 1;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	623b      	str	r3, [r7, #32]
 800cc12:	e010      	b.n	800cc36 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10c      	bne.n	800cc36 <osThreadNew+0xee>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d108      	bne.n	800cc36 <osThreadNew+0xee>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d104      	bne.n	800cc36 <osThreadNew+0xee>
          mem = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	623b      	str	r3, [r7, #32]
 800cc30:	e001      	b.n	800cc36 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800cc32:	2300      	movs	r3, #0
 800cc34:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d110      	bne.n	800cc5e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cc44:	9202      	str	r2, [sp, #8]
 800cc46:	9301      	str	r3, [sp, #4]
 800cc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f001 ff5a 	bl	800eb0c <xTaskCreateStatic>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	613b      	str	r3, [r7, #16]
 800cc5c:	e013      	b.n	800cc86 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d110      	bne.n	800cc86 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc66:	b29a      	uxth	r2, r3
 800cc68:	f107 0310 	add.w	r3, r7, #16
 800cc6c:	9301      	str	r3, [sp, #4]
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f001 ffae 	bl	800ebd8 <xTaskCreate>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d001      	beq.n	800cc86 <osThreadNew+0x13e>
          hTask = NULL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cc86:	693b      	ldr	r3, [r7, #16]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3730      	adds	r7, #48	@ 0x30
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	2000d0ec 	.word	0x2000d0ec

0800cc94 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800cc94:	b580      	push	{r7, lr}
 800cc96:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800cc98:	2000      	movs	r0, #0
 800cc9a:	f002 f8fd 	bl	800ee98 <vTaskDelete>
#endif
  for (;;);
 800cc9e:	bf00      	nop
 800cca0:	e7fd      	b.n	800cc9e <osThreadExit+0xa>
	...

0800cca4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccac:	f3ef 8305 	mrs	r3, IPSR
 800ccb0:	613b      	str	r3, [r7, #16]
  return(result);
 800ccb2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10f      	bne.n	800ccd8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccb8:	f3ef 8310 	mrs	r3, PRIMASK
 800ccbc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d105      	bne.n	800ccd0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccc4:	f3ef 8311 	mrs	r3, BASEPRI
 800ccc8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d007      	beq.n	800cce0 <osDelay+0x3c>
 800ccd0:	4b0a      	ldr	r3, [pc, #40]	@ (800ccfc <osDelay+0x58>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d103      	bne.n	800cce0 <osDelay+0x3c>
    stat = osErrorISR;
 800ccd8:	f06f 0305 	mvn.w	r3, #5
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	e007      	b.n	800ccf0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f002 f94a 	bl	800ef84 <vTaskDelay>
    }
  }

  return (stat);
 800ccf0:	697b      	ldr	r3, [r7, #20]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3718      	adds	r7, #24
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	2000d0ec 	.word	0x2000d0ec

0800cd00 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b08a      	sub	sp, #40	@ 0x28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd0c:	f3ef 8305 	mrs	r3, IPSR
 800cd10:	613b      	str	r3, [r7, #16]
  return(result);
 800cd12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f040 8085 	bne.w	800ce24 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd1a:	f3ef 8310 	mrs	r3, PRIMASK
 800cd1e:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d105      	bne.n	800cd32 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd26:	f3ef 8311 	mrs	r3, BASEPRI
 800cd2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <osMutexNew+0x3a>
 800cd32:	4b3f      	ldr	r3, [pc, #252]	@ (800ce30 <osMutexNew+0x130>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d074      	beq.n	800ce24 <osMutexNew+0x124>
    if (attr != NULL) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d003      	beq.n	800cd48 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	623b      	str	r3, [r7, #32]
 800cd46:	e001      	b.n	800cd4c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	f003 0301 	and.w	r3, r3, #1
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <osMutexNew+0x5c>
      rmtx = 1U;
 800cd56:	2301      	movs	r3, #1
 800cd58:	61fb      	str	r3, [r7, #28]
 800cd5a:	e001      	b.n	800cd60 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	f003 0308 	and.w	r3, r3, #8
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d15c      	bne.n	800ce24 <osMutexNew+0x124>
      mem = -1;
 800cd6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd6e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d015      	beq.n	800cda2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d006      	beq.n	800cd8c <osMutexNew+0x8c>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	2b4f      	cmp	r3, #79	@ 0x4f
 800cd84:	d902      	bls.n	800cd8c <osMutexNew+0x8c>
          mem = 1;
 800cd86:	2301      	movs	r3, #1
 800cd88:	61bb      	str	r3, [r7, #24]
 800cd8a:	e00c      	b.n	800cda6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d108      	bne.n	800cda6 <osMutexNew+0xa6>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d104      	bne.n	800cda6 <osMutexNew+0xa6>
            mem = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61bb      	str	r3, [r7, #24]
 800cda0:	e001      	b.n	800cda6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d112      	bne.n	800cdd2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d007      	beq.n	800cdc2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	2004      	movs	r0, #4
 800cdba:	f000 fec0 	bl	800db3e <xQueueCreateMutexStatic>
 800cdbe:	6278      	str	r0, [r7, #36]	@ 0x24
 800cdc0:	e016      	b.n	800cdf0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	2001      	movs	r0, #1
 800cdca:	f000 feb8 	bl	800db3e <xQueueCreateMutexStatic>
 800cdce:	6278      	str	r0, [r7, #36]	@ 0x24
 800cdd0:	e00e      	b.n	800cdf0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d10b      	bne.n	800cdf0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d004      	beq.n	800cde8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cdde:	2004      	movs	r0, #4
 800cde0:	f000 fe95 	bl	800db0e <xQueueCreateMutex>
 800cde4:	6278      	str	r0, [r7, #36]	@ 0x24
 800cde6:	e003      	b.n	800cdf0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800cde8:	2001      	movs	r0, #1
 800cdea:	f000 fe90 	bl	800db0e <xQueueCreateMutex>
 800cdee:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00c      	beq.n	800ce10 <osMutexNew+0x110>
        if (attr != NULL) {
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d003      	beq.n	800ce04 <osMutexNew+0x104>
          name = attr->name;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	e001      	b.n	800ce08 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ce04:	2300      	movs	r3, #0
 800ce06:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ce08:	6979      	ldr	r1, [r7, #20]
 800ce0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce0c:	f001 fdf6 	bl	800e9fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ce10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d006      	beq.n	800ce24 <osMutexNew+0x124>
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d003      	beq.n	800ce24 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1e:	f043 0301 	orr.w	r3, r3, #1
 800ce22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3728      	adds	r7, #40	@ 0x28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	2000d0ec 	.word	0x2000d0ec

0800ce34 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f023 0301 	bic.w	r3, r3, #1
 800ce44:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce52:	f3ef 8305 	mrs	r3, IPSR
 800ce56:	613b      	str	r3, [r7, #16]
  return(result);
 800ce58:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10f      	bne.n	800ce7e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce62:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce6a:	f3ef 8311 	mrs	r3, BASEPRI
 800ce6e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d007      	beq.n	800ce86 <osMutexAcquire+0x52>
 800ce76:	4b1d      	ldr	r3, [pc, #116]	@ (800ceec <osMutexAcquire+0xb8>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d103      	bne.n	800ce86 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ce7e:	f06f 0305 	mvn.w	r3, #5
 800ce82:	61fb      	str	r3, [r7, #28]
 800ce84:	e02c      	b.n	800cee0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d103      	bne.n	800ce94 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ce8c:	f06f 0303 	mvn.w	r3, #3
 800ce90:	61fb      	str	r3, [r7, #28]
 800ce92:	e025      	b.n	800cee0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d011      	beq.n	800cebe <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ce9a:	6839      	ldr	r1, [r7, #0]
 800ce9c:	69b8      	ldr	r0, [r7, #24]
 800ce9e:	f000 fea0 	bl	800dbe2 <xQueueTakeMutexRecursive>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d01b      	beq.n	800cee0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ceae:	f06f 0301 	mvn.w	r3, #1
 800ceb2:	61fb      	str	r3, [r7, #28]
 800ceb4:	e014      	b.n	800cee0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ceb6:	f06f 0302 	mvn.w	r3, #2
 800ceba:	61fb      	str	r3, [r7, #28]
 800cebc:	e010      	b.n	800cee0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	69b8      	ldr	r0, [r7, #24]
 800cec2:	f001 fa6b 	bl	800e39c <xQueueSemaphoreTake>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d009      	beq.n	800cee0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ced2:	f06f 0301 	mvn.w	r3, #1
 800ced6:	61fb      	str	r3, [r7, #28]
 800ced8:	e002      	b.n	800cee0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ceda:	f06f 0302 	mvn.w	r3, #2
 800cede:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cee0:	69fb      	ldr	r3, [r7, #28]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3720      	adds	r7, #32
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	2000d0ec 	.word	0x2000d0ec

0800cef0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b088      	sub	sp, #32
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f023 0301 	bic.w	r3, r3, #1
 800cefe:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf0c:	f3ef 8305 	mrs	r3, IPSR
 800cf10:	613b      	str	r3, [r7, #16]
  return(result);
 800cf12:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10f      	bne.n	800cf38 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf18:	f3ef 8310 	mrs	r3, PRIMASK
 800cf1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d105      	bne.n	800cf30 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf24:	f3ef 8311 	mrs	r3, BASEPRI
 800cf28:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <osMutexRelease+0x50>
 800cf30:	4b16      	ldr	r3, [pc, #88]	@ (800cf8c <osMutexRelease+0x9c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d103      	bne.n	800cf40 <osMutexRelease+0x50>
    stat = osErrorISR;
 800cf38:	f06f 0305 	mvn.w	r3, #5
 800cf3c:	61fb      	str	r3, [r7, #28]
 800cf3e:	e01f      	b.n	800cf80 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d103      	bne.n	800cf4e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800cf46:	f06f 0303 	mvn.w	r3, #3
 800cf4a:	61fb      	str	r3, [r7, #28]
 800cf4c:	e018      	b.n	800cf80 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d009      	beq.n	800cf68 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cf54:	69b8      	ldr	r0, [r7, #24]
 800cf56:	f000 fe0d 	bl	800db74 <xQueueGiveMutexRecursive>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d00f      	beq.n	800cf80 <osMutexRelease+0x90>
        stat = osErrorResource;
 800cf60:	f06f 0302 	mvn.w	r3, #2
 800cf64:	61fb      	str	r3, [r7, #28]
 800cf66:	e00b      	b.n	800cf80 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cf68:	2300      	movs	r3, #0
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	69b8      	ldr	r0, [r7, #24]
 800cf70:	f000 fee6 	bl	800dd40 <xQueueGenericSend>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d002      	beq.n	800cf80 <osMutexRelease+0x90>
        stat = osErrorResource;
 800cf7a:	f06f 0302 	mvn.w	r3, #2
 800cf7e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800cf80:	69fb      	ldr	r3, [r7, #28]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3720      	adds	r7, #32
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	2000d0ec 	.word	0x2000d0ec

0800cf90 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b08c      	sub	sp, #48	@ 0x30
 800cf94:	af02      	add	r7, sp, #8
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfa0:	f3ef 8305 	mrs	r3, IPSR
 800cfa4:	61bb      	str	r3, [r7, #24]
  return(result);
 800cfa6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f040 8086 	bne.w	800d0ba <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfae:	f3ef 8310 	mrs	r3, PRIMASK
 800cfb2:	617b      	str	r3, [r7, #20]
  return(result);
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d105      	bne.n	800cfc6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfba:	f3ef 8311 	mrs	r3, BASEPRI
 800cfbe:	613b      	str	r3, [r7, #16]
  return(result);
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <osSemaphoreNew+0x3e>
 800cfc6:	4b3f      	ldr	r3, [pc, #252]	@ (800d0c4 <osSemaphoreNew+0x134>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d075      	beq.n	800d0ba <osSemaphoreNew+0x12a>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d072      	beq.n	800d0ba <osSemaphoreNew+0x12a>
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d86e      	bhi.n	800d0ba <osSemaphoreNew+0x12a>
    mem = -1;
 800cfdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfe0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d015      	beq.n	800d014 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d006      	beq.n	800cffe <osSemaphoreNew+0x6e>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	2b4f      	cmp	r3, #79	@ 0x4f
 800cff6:	d902      	bls.n	800cffe <osSemaphoreNew+0x6e>
        mem = 1;
 800cff8:	2301      	movs	r3, #1
 800cffa:	623b      	str	r3, [r7, #32]
 800cffc:	e00c      	b.n	800d018 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d108      	bne.n	800d018 <osSemaphoreNew+0x88>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d104      	bne.n	800d018 <osSemaphoreNew+0x88>
          mem = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	623b      	str	r3, [r7, #32]
 800d012:	e001      	b.n	800d018 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d01e:	d04c      	beq.n	800d0ba <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b01      	cmp	r3, #1
 800d024:	d128      	bne.n	800d078 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d10a      	bne.n	800d042 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	2203      	movs	r2, #3
 800d032:	9200      	str	r2, [sp, #0]
 800d034:	2200      	movs	r2, #0
 800d036:	2100      	movs	r1, #0
 800d038:	2001      	movs	r0, #1
 800d03a:	f000 fc61 	bl	800d900 <xQueueGenericCreateStatic>
 800d03e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d040:	e005      	b.n	800d04e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d042:	2203      	movs	r2, #3
 800d044:	2100      	movs	r1, #0
 800d046:	2001      	movs	r0, #1
 800d048:	f000 fce1 	bl	800da0e <xQueueGenericCreate>
 800d04c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d050:	2b00      	cmp	r3, #0
 800d052:	d022      	beq.n	800d09a <osSemaphoreNew+0x10a>
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d01f      	beq.n	800d09a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d05a:	2300      	movs	r3, #0
 800d05c:	2200      	movs	r2, #0
 800d05e:	2100      	movs	r1, #0
 800d060:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d062:	f000 fe6d 	bl	800dd40 <xQueueGenericSend>
 800d066:	4603      	mov	r3, r0
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d016      	beq.n	800d09a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d06c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d06e:	f001 fb77 	bl	800e760 <vQueueDelete>
            hSemaphore = NULL;
 800d072:	2300      	movs	r3, #0
 800d074:	627b      	str	r3, [r7, #36]	@ 0x24
 800d076:	e010      	b.n	800d09a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d078:	6a3b      	ldr	r3, [r7, #32]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d108      	bne.n	800d090 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	461a      	mov	r2, r3
 800d084:	68b9      	ldr	r1, [r7, #8]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f000 fde4 	bl	800dc54 <xQueueCreateCountingSemaphoreStatic>
 800d08c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d08e:	e004      	b.n	800d09a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d090:	68b9      	ldr	r1, [r7, #8]
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f000 fe1b 	bl	800dcce <xQueueCreateCountingSemaphore>
 800d098:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00c      	beq.n	800d0ba <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d003      	beq.n	800d0ae <osSemaphoreNew+0x11e>
          name = attr->name;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	61fb      	str	r3, [r7, #28]
 800d0ac:	e001      	b.n	800d0b2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d0b2:	69f9      	ldr	r1, [r7, #28]
 800d0b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0b6:	f001 fca1 	bl	800e9fc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3728      	adds	r7, #40	@ 0x28
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	2000d0ec 	.word	0x2000d0ec

0800d0c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b088      	sub	sp, #32
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d103      	bne.n	800d0e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d0e0:	f06f 0303 	mvn.w	r3, #3
 800d0e4:	61fb      	str	r3, [r7, #28]
 800d0e6:	e04b      	b.n	800d180 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e8:	f3ef 8305 	mrs	r3, IPSR
 800d0ec:	617b      	str	r3, [r7, #20]
  return(result);
 800d0ee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10f      	bne.n	800d114 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d0f8:	613b      	str	r3, [r7, #16]
  return(result);
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d105      	bne.n	800d10c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d100:	f3ef 8311 	mrs	r3, BASEPRI
 800d104:	60fb      	str	r3, [r7, #12]
  return(result);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d026      	beq.n	800d15a <osSemaphoreAcquire+0x92>
 800d10c:	4b1f      	ldr	r3, [pc, #124]	@ (800d18c <osSemaphoreAcquire+0xc4>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d122      	bne.n	800d15a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d003      	beq.n	800d122 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d11a:	f06f 0303 	mvn.w	r3, #3
 800d11e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d120:	e02d      	b.n	800d17e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d122:	2300      	movs	r3, #0
 800d124:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d126:	f107 0308 	add.w	r3, r7, #8
 800d12a:	461a      	mov	r2, r3
 800d12c:	2100      	movs	r1, #0
 800d12e:	69b8      	ldr	r0, [r7, #24]
 800d130:	f001 fa4c 	bl	800e5cc <xQueueReceiveFromISR>
 800d134:	4603      	mov	r3, r0
 800d136:	2b01      	cmp	r3, #1
 800d138:	d003      	beq.n	800d142 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d13a:	f06f 0302 	mvn.w	r3, #2
 800d13e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d140:	e01d      	b.n	800d17e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d01a      	beq.n	800d17e <osSemaphoreAcquire+0xb6>
 800d148:	4b11      	ldr	r3, [pc, #68]	@ (800d190 <osSemaphoreAcquire+0xc8>)
 800d14a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d14e:	601a      	str	r2, [r3, #0]
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d158:	e011      	b.n	800d17e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d15a:	6839      	ldr	r1, [r7, #0]
 800d15c:	69b8      	ldr	r0, [r7, #24]
 800d15e:	f001 f91d 	bl	800e39c <xQueueSemaphoreTake>
 800d162:	4603      	mov	r3, r0
 800d164:	2b01      	cmp	r3, #1
 800d166:	d00b      	beq.n	800d180 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d003      	beq.n	800d176 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d16e:	f06f 0301 	mvn.w	r3, #1
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	e004      	b.n	800d180 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d176:	f06f 0302 	mvn.w	r3, #2
 800d17a:	61fb      	str	r3, [r7, #28]
 800d17c:	e000      	b.n	800d180 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d17e:	bf00      	nop
      }
    }
  }

  return (stat);
 800d180:	69fb      	ldr	r3, [r7, #28]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3720      	adds	r7, #32
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	2000d0ec 	.word	0x2000d0ec
 800d190:	e000ed04 	.word	0xe000ed04

0800d194 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d194:	b580      	push	{r7, lr}
 800d196:	b088      	sub	sp, #32
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d103      	bne.n	800d1b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d1aa:	f06f 0303 	mvn.w	r3, #3
 800d1ae:	61fb      	str	r3, [r7, #28]
 800d1b0:	e03e      	b.n	800d230 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1b2:	f3ef 8305 	mrs	r3, IPSR
 800d1b6:	617b      	str	r3, [r7, #20]
  return(result);
 800d1b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10f      	bne.n	800d1de <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1be:	f3ef 8310 	mrs	r3, PRIMASK
 800d1c2:	613b      	str	r3, [r7, #16]
  return(result);
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d105      	bne.n	800d1d6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d1ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d01e      	beq.n	800d214 <osSemaphoreRelease+0x80>
 800d1d6:	4b19      	ldr	r3, [pc, #100]	@ (800d23c <osSemaphoreRelease+0xa8>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d11a      	bne.n	800d214 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d1e2:	f107 0308 	add.w	r3, r7, #8
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	69b8      	ldr	r0, [r7, #24]
 800d1ea:	f000 ff56 	bl	800e09a <xQueueGiveFromISR>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d003      	beq.n	800d1fc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d1f4:	f06f 0302 	mvn.w	r3, #2
 800d1f8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d1fa:	e018      	b.n	800d22e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d015      	beq.n	800d22e <osSemaphoreRelease+0x9a>
 800d202:	4b0f      	ldr	r3, [pc, #60]	@ (800d240 <osSemaphoreRelease+0xac>)
 800d204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d208:	601a      	str	r2, [r3, #0]
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d212:	e00c      	b.n	800d22e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d214:	2300      	movs	r3, #0
 800d216:	2200      	movs	r2, #0
 800d218:	2100      	movs	r1, #0
 800d21a:	69b8      	ldr	r0, [r7, #24]
 800d21c:	f000 fd90 	bl	800dd40 <xQueueGenericSend>
 800d220:	4603      	mov	r3, r0
 800d222:	2b01      	cmp	r3, #1
 800d224:	d004      	beq.n	800d230 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d226:	f06f 0302 	mvn.w	r3, #2
 800d22a:	61fb      	str	r3, [r7, #28]
 800d22c:	e000      	b.n	800d230 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d22e:	bf00      	nop
    }
  }

  return (stat);
 800d230:	69fb      	ldr	r3, [r7, #28]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	2000d0ec 	.word	0x2000d0ec
 800d240:	e000ed04 	.word	0xe000ed04

0800d244 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d250:	f3ef 8305 	mrs	r3, IPSR
 800d254:	617b      	str	r3, [r7, #20]
  return(result);
 800d256:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10f      	bne.n	800d27c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d25c:	f3ef 8310 	mrs	r3, PRIMASK
 800d260:	613b      	str	r3, [r7, #16]
  return(result);
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d105      	bne.n	800d274 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d268:	f3ef 8311 	mrs	r3, BASEPRI
 800d26c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d007      	beq.n	800d284 <osSemaphoreDelete+0x40>
 800d274:	4b0d      	ldr	r3, [pc, #52]	@ (800d2ac <osSemaphoreDelete+0x68>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d103      	bne.n	800d284 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d27c:	f06f 0305 	mvn.w	r3, #5
 800d280:	61fb      	str	r3, [r7, #28]
 800d282:	e00e      	b.n	800d2a2 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d103      	bne.n	800d292 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d28a:	f06f 0303 	mvn.w	r3, #3
 800d28e:	61fb      	str	r3, [r7, #28]
 800d290:	e007      	b.n	800d2a2 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d292:	69b8      	ldr	r0, [r7, #24]
 800d294:	f001 fbdc 	bl	800ea50 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d298:	2300      	movs	r3, #0
 800d29a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d29c:	69b8      	ldr	r0, [r7, #24]
 800d29e:	f001 fa5f 	bl	800e760 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d2a2:	69fb      	ldr	r3, [r7, #28]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3720      	adds	r7, #32
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	2000d0ec 	.word	0x2000d0ec

0800d2b0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08c      	sub	sp, #48	@ 0x30
 800d2b4:	af02      	add	r7, sp, #8
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2c0:	f3ef 8305 	mrs	r3, IPSR
 800d2c4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d2c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d16f      	bne.n	800d3ac <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d2d0:	617b      	str	r3, [r7, #20]
  return(result);
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d105      	bne.n	800d2e4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2d8:	f3ef 8311 	mrs	r3, BASEPRI
 800d2dc:	613b      	str	r3, [r7, #16]
  return(result);
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d003      	beq.n	800d2ec <osMessageQueueNew+0x3c>
 800d2e4:	4b34      	ldr	r3, [pc, #208]	@ (800d3b8 <osMessageQueueNew+0x108>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d05f      	beq.n	800d3ac <osMessageQueueNew+0xfc>
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d05c      	beq.n	800d3ac <osMessageQueueNew+0xfc>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d059      	beq.n	800d3ac <osMessageQueueNew+0xfc>
    mem = -1;
 800d2f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d029      	beq.n	800d358 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d012      	beq.n	800d332 <osMessageQueueNew+0x82>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	2b4f      	cmp	r3, #79	@ 0x4f
 800d312:	d90e      	bls.n	800d332 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00a      	beq.n	800d332 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	695a      	ldr	r2, [r3, #20]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	fb01 f303 	mul.w	r3, r1, r3
 800d328:	429a      	cmp	r2, r3
 800d32a:	d302      	bcc.n	800d332 <osMessageQueueNew+0x82>
        mem = 1;
 800d32c:	2301      	movs	r3, #1
 800d32e:	623b      	str	r3, [r7, #32]
 800d330:	e014      	b.n	800d35c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d110      	bne.n	800d35c <osMessageQueueNew+0xac>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10c      	bne.n	800d35c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d346:	2b00      	cmp	r3, #0
 800d348:	d108      	bne.n	800d35c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	695b      	ldr	r3, [r3, #20]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d104      	bne.n	800d35c <osMessageQueueNew+0xac>
          mem = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	623b      	str	r3, [r7, #32]
 800d356:	e001      	b.n	800d35c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d35c:	6a3b      	ldr	r3, [r7, #32]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d10b      	bne.n	800d37a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	691a      	ldr	r2, [r3, #16]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	689b      	ldr	r3, [r3, #8]
 800d36a:	2100      	movs	r1, #0
 800d36c:	9100      	str	r1, [sp, #0]
 800d36e:	68b9      	ldr	r1, [r7, #8]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 fac5 	bl	800d900 <xQueueGenericCreateStatic>
 800d376:	6278      	str	r0, [r7, #36]	@ 0x24
 800d378:	e008      	b.n	800d38c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d37a:	6a3b      	ldr	r3, [r7, #32]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d105      	bne.n	800d38c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d380:	2200      	movs	r2, #0
 800d382:	68b9      	ldr	r1, [r7, #8]
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f000 fb42 	bl	800da0e <xQueueGenericCreate>
 800d38a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00c      	beq.n	800d3ac <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d003      	beq.n	800d3a0 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	61fb      	str	r3, [r7, #28]
 800d39e:	e001      	b.n	800d3a4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d3a4:	69f9      	ldr	r1, [r7, #28]
 800d3a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3a8:	f001 fb28 	bl	800e9fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3728      	adds	r7, #40	@ 0x28
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	2000d0ec 	.word	0x2000d0ec

0800d3bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08a      	sub	sp, #40	@ 0x28
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	603b      	str	r3, [r7, #0]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3d4:	f3ef 8305 	mrs	r3, IPSR
 800d3d8:	61fb      	str	r3, [r7, #28]
  return(result);
 800d3da:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10f      	bne.n	800d400 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d105      	bne.n	800d3f8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3ec:	f3ef 8311 	mrs	r3, BASEPRI
 800d3f0:	617b      	str	r3, [r7, #20]
  return(result);
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d02c      	beq.n	800d452 <osMessageQueuePut+0x96>
 800d3f8:	4b28      	ldr	r3, [pc, #160]	@ (800d49c <osMessageQueuePut+0xe0>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d128      	bne.n	800d452 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d400:	6a3b      	ldr	r3, [r7, #32]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d005      	beq.n	800d412 <osMessageQueuePut+0x56>
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d002      	beq.n	800d412 <osMessageQueuePut+0x56>
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d412:	f06f 0303 	mvn.w	r3, #3
 800d416:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d418:	e039      	b.n	800d48e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d41a:	2300      	movs	r3, #0
 800d41c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d41e:	f107 0210 	add.w	r2, r7, #16
 800d422:	2300      	movs	r3, #0
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	6a38      	ldr	r0, [r7, #32]
 800d428:	f000 fd94 	bl	800df54 <xQueueGenericSendFromISR>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d003      	beq.n	800d43a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d432:	f06f 0302 	mvn.w	r3, #2
 800d436:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d438:	e029      	b.n	800d48e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d026      	beq.n	800d48e <osMessageQueuePut+0xd2>
 800d440:	4b17      	ldr	r3, [pc, #92]	@ (800d4a0 <osMessageQueuePut+0xe4>)
 800d442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d450:	e01d      	b.n	800d48e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <osMessageQueuePut+0xa2>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d103      	bne.n	800d466 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d45e:	f06f 0303 	mvn.w	r3, #3
 800d462:	627b      	str	r3, [r7, #36]	@ 0x24
 800d464:	e014      	b.n	800d490 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d466:	2300      	movs	r3, #0
 800d468:	683a      	ldr	r2, [r7, #0]
 800d46a:	68b9      	ldr	r1, [r7, #8]
 800d46c:	6a38      	ldr	r0, [r7, #32]
 800d46e:	f000 fc67 	bl	800dd40 <xQueueGenericSend>
 800d472:	4603      	mov	r3, r0
 800d474:	2b01      	cmp	r3, #1
 800d476:	d00b      	beq.n	800d490 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d003      	beq.n	800d486 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d47e:	f06f 0301 	mvn.w	r3, #1
 800d482:	627b      	str	r3, [r7, #36]	@ 0x24
 800d484:	e004      	b.n	800d490 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d486:	f06f 0302 	mvn.w	r3, #2
 800d48a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d48c:	e000      	b.n	800d490 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d48e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d492:	4618      	mov	r0, r3
 800d494:	3728      	adds	r7, #40	@ 0x28
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	2000d0ec 	.word	0x2000d0ec
 800d4a0:	e000ed04 	.word	0xe000ed04

0800d4a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08a      	sub	sp, #40	@ 0x28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4ba:	f3ef 8305 	mrs	r3, IPSR
 800d4be:	61fb      	str	r3, [r7, #28]
  return(result);
 800d4c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10f      	bne.n	800d4e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4c6:	f3ef 8310 	mrs	r3, PRIMASK
 800d4ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d105      	bne.n	800d4de <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4d2:	f3ef 8311 	mrs	r3, BASEPRI
 800d4d6:	617b      	str	r3, [r7, #20]
  return(result);
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d02c      	beq.n	800d538 <osMessageQueueGet+0x94>
 800d4de:	4b28      	ldr	r3, [pc, #160]	@ (800d580 <osMessageQueueGet+0xdc>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	d128      	bne.n	800d538 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d005      	beq.n	800d4f8 <osMessageQueueGet+0x54>
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d002      	beq.n	800d4f8 <osMessageQueueGet+0x54>
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d003      	beq.n	800d500 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d4f8:	f06f 0303 	mvn.w	r3, #3
 800d4fc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4fe:	e038      	b.n	800d572 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d500:	2300      	movs	r3, #0
 800d502:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d504:	f107 0310 	add.w	r3, r7, #16
 800d508:	461a      	mov	r2, r3
 800d50a:	68b9      	ldr	r1, [r7, #8]
 800d50c:	6a38      	ldr	r0, [r7, #32]
 800d50e:	f001 f85d 	bl	800e5cc <xQueueReceiveFromISR>
 800d512:	4603      	mov	r3, r0
 800d514:	2b01      	cmp	r3, #1
 800d516:	d003      	beq.n	800d520 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d518:	f06f 0302 	mvn.w	r3, #2
 800d51c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d51e:	e028      	b.n	800d572 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d025      	beq.n	800d572 <osMessageQueueGet+0xce>
 800d526:	4b17      	ldr	r3, [pc, #92]	@ (800d584 <osMessageQueueGet+0xe0>)
 800d528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d52c:	601a      	str	r2, [r3, #0]
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d536:	e01c      	b.n	800d572 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <osMessageQueueGet+0xa0>
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d103      	bne.n	800d54c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d544:	f06f 0303 	mvn.w	r3, #3
 800d548:	627b      	str	r3, [r7, #36]	@ 0x24
 800d54a:	e013      	b.n	800d574 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	68b9      	ldr	r1, [r7, #8]
 800d550:	6a38      	ldr	r0, [r7, #32]
 800d552:	f000 fe3b 	bl	800e1cc <xQueueReceive>
 800d556:	4603      	mov	r3, r0
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d00b      	beq.n	800d574 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d562:	f06f 0301 	mvn.w	r3, #1
 800d566:	627b      	str	r3, [r7, #36]	@ 0x24
 800d568:	e004      	b.n	800d574 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d56a:	f06f 0302 	mvn.w	r3, #2
 800d56e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d570:	e000      	b.n	800d574 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d572:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d576:	4618      	mov	r0, r3
 800d578:	3728      	adds	r7, #40	@ 0x28
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	2000d0ec 	.word	0x2000d0ec
 800d584:	e000ed04 	.word	0xe000ed04

0800d588 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d102      	bne.n	800d5a0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	61fb      	str	r3, [r7, #28]
 800d59e:	e01e      	b.n	800d5de <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5a0:	f3ef 8305 	mrs	r3, IPSR
 800d5a4:	617b      	str	r3, [r7, #20]
  return(result);
 800d5a6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d10f      	bne.n	800d5cc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d5b0:	613b      	str	r3, [r7, #16]
  return(result);
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d105      	bne.n	800d5c4 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5b8:	f3ef 8311 	mrs	r3, BASEPRI
 800d5bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d008      	beq.n	800d5d6 <osMessageQueueGetCount+0x4e>
 800d5c4:	4b08      	ldr	r3, [pc, #32]	@ (800d5e8 <osMessageQueueGetCount+0x60>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	d104      	bne.n	800d5d6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d5cc:	69b8      	ldr	r0, [r7, #24]
 800d5ce:	f001 f8a6 	bl	800e71e <uxQueueMessagesWaitingFromISR>
 800d5d2:	61f8      	str	r0, [r7, #28]
 800d5d4:	e003      	b.n	800d5de <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d5d6:	69b8      	ldr	r0, [r7, #24]
 800d5d8:	f001 f880 	bl	800e6dc <uxQueueMessagesWaiting>
 800d5dc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d5de:	69fb      	ldr	r3, [r7, #28]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3720      	adds	r7, #32
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	2000d0ec 	.word	0x2000d0ec

0800d5ec <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b088      	sub	sp, #32
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5f8:	f3ef 8305 	mrs	r3, IPSR
 800d5fc:	617b      	str	r3, [r7, #20]
  return(result);
 800d5fe:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10f      	bne.n	800d624 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d604:	f3ef 8310 	mrs	r3, PRIMASK
 800d608:	613b      	str	r3, [r7, #16]
  return(result);
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d105      	bne.n	800d61c <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d610:	f3ef 8311 	mrs	r3, BASEPRI
 800d614:	60fb      	str	r3, [r7, #12]
  return(result);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d007      	beq.n	800d62c <osMessageQueueDelete+0x40>
 800d61c:	4b0d      	ldr	r3, [pc, #52]	@ (800d654 <osMessageQueueDelete+0x68>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b02      	cmp	r3, #2
 800d622:	d103      	bne.n	800d62c <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800d624:	f06f 0305 	mvn.w	r3, #5
 800d628:	61fb      	str	r3, [r7, #28]
 800d62a:	e00e      	b.n	800d64a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d103      	bne.n	800d63a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800d632:	f06f 0303 	mvn.w	r3, #3
 800d636:	61fb      	str	r3, [r7, #28]
 800d638:	e007      	b.n	800d64a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d63a:	69b8      	ldr	r0, [r7, #24]
 800d63c:	f001 fa08 	bl	800ea50 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d640:	2300      	movs	r3, #0
 800d642:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800d644:	69b8      	ldr	r0, [r7, #24]
 800d646:	f001 f88b 	bl	800e760 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d64a:	69fb      	ldr	r3, [r7, #28]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3720      	adds	r7, #32
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	2000d0ec 	.word	0x2000d0ec

0800d658 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	4a07      	ldr	r2, [pc, #28]	@ (800d684 <vApplicationGetIdleTaskMemory+0x2c>)
 800d668:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	4a06      	ldr	r2, [pc, #24]	@ (800d688 <vApplicationGetIdleTaskMemory+0x30>)
 800d66e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d676:	601a      	str	r2, [r3, #0]
}
 800d678:	bf00      	nop
 800d67a:	3714      	adds	r7, #20
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	2000d0f0 	.word	0x2000d0f0
 800d688:	2000d198 	.word	0x2000d198

0800d68c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4a07      	ldr	r2, [pc, #28]	@ (800d6b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d69c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	4a06      	ldr	r2, [pc, #24]	@ (800d6bc <vApplicationGetTimerTaskMemory+0x30>)
 800d6a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d6aa:	601a      	str	r2, [r3, #0]
}
 800d6ac:	bf00      	nop
 800d6ae:	3714      	adds	r7, #20
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr
 800d6b8:	2000d998 	.word	0x2000d998
 800d6bc:	2000da40 	.word	0x2000da40

0800d6c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f103 0208 	add.w	r2, r3, #8
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f103 0208 	add.w	r2, r3, #8
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f103 0208 	add.w	r2, r3, #8
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d70e:	bf00      	nop
 800d710:	370c      	adds	r7, #12
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr

0800d71a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d71a:	b480      	push	{r7}
 800d71c:	b085      	sub	sp, #20
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	689a      	ldr	r2, [r3, #8]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	683a      	ldr	r2, [r7, #0]
 800d73e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	683a      	ldr	r2, [r7, #0]
 800d744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	1c5a      	adds	r2, r3, #1
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	601a      	str	r2, [r3, #0]
}
 800d756:	bf00      	nop
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d762:	b480      	push	{r7}
 800d764:	b085      	sub	sp, #20
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d778:	d103      	bne.n	800d782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	691b      	ldr	r3, [r3, #16]
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	e00c      	b.n	800d79c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	3308      	adds	r3, #8
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	e002      	b.n	800d790 <vListInsert+0x2e>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d2f6      	bcs.n	800d78a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	685a      	ldr	r2, [r3, #4]
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	601a      	str	r2, [r3, #0]
}
 800d7c8:	bf00      	nop
 800d7ca:	3714      	adds	r7, #20
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	6892      	ldr	r2, [r2, #8]
 800d7ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	6852      	ldr	r2, [r2, #4]
 800d7f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d103      	bne.n	800d808 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	689a      	ldr	r2, [r3, #8]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	1e5a      	subs	r2, r3, #1
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3714      	adds	r7, #20
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10d      	bne.n	800d858 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d840:	b672      	cpsid	i
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	b662      	cpsie	i
 800d850:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d852:	bf00      	nop
 800d854:	bf00      	nop
 800d856:	e7fd      	b.n	800d854 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d858:	f002 fef0 	bl	801063c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d864:	68f9      	ldr	r1, [r7, #12]
 800d866:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d868:	fb01 f303 	mul.w	r3, r1, r3
 800d86c:	441a      	add	r2, r3
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d888:	3b01      	subs	r3, #1
 800d88a:	68f9      	ldr	r1, [r7, #12]
 800d88c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d88e:	fb01 f303 	mul.w	r3, r1, r3
 800d892:	441a      	add	r2, r3
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	22ff      	movs	r2, #255	@ 0xff
 800d89c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	22ff      	movs	r2, #255	@ 0xff
 800d8a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d114      	bne.n	800d8d8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d01a      	beq.n	800d8ec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	3310      	adds	r3, #16
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f001 fe7c 	bl	800f5b8 <xTaskRemoveFromEventList>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d012      	beq.n	800d8ec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d8fc <xQueueGenericReset+0xd4>)
 800d8c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	e009      	b.n	800d8ec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	3310      	adds	r3, #16
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7ff feef 	bl	800d6c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	3324      	adds	r3, #36	@ 0x24
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7ff feea 	bl	800d6c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d8ec:	f002 fedc 	bl	80106a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d8f0:	2301      	movs	r3, #1
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	e000ed04 	.word	0xe000ed04

0800d900 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d900:	b580      	push	{r7, lr}
 800d902:	b08e      	sub	sp, #56	@ 0x38
 800d904:	af02      	add	r7, sp, #8
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
 800d90c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10d      	bne.n	800d930 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800d914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d918:	b672      	cpsid	i
 800d91a:	f383 8811 	msr	BASEPRI, r3
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	f3bf 8f4f 	dsb	sy
 800d926:	b662      	cpsie	i
 800d928:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d92a:	bf00      	nop
 800d92c:	bf00      	nop
 800d92e:	e7fd      	b.n	800d92c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d10d      	bne.n	800d952 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800d936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93a:	b672      	cpsid	i
 800d93c:	f383 8811 	msr	BASEPRI, r3
 800d940:	f3bf 8f6f 	isb	sy
 800d944:	f3bf 8f4f 	dsb	sy
 800d948:	b662      	cpsie	i
 800d94a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d94c:	bf00      	nop
 800d94e:	bf00      	nop
 800d950:	e7fd      	b.n	800d94e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d002      	beq.n	800d95e <xQueueGenericCreateStatic+0x5e>
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <xQueueGenericCreateStatic+0x62>
 800d95e:	2301      	movs	r3, #1
 800d960:	e000      	b.n	800d964 <xQueueGenericCreateStatic+0x64>
 800d962:	2300      	movs	r3, #0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10d      	bne.n	800d984 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800d968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96c:	b672      	cpsid	i
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	b662      	cpsie	i
 800d97c:	623b      	str	r3, [r7, #32]
}
 800d97e:	bf00      	nop
 800d980:	bf00      	nop
 800d982:	e7fd      	b.n	800d980 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d102      	bne.n	800d990 <xQueueGenericCreateStatic+0x90>
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <xQueueGenericCreateStatic+0x94>
 800d990:	2301      	movs	r3, #1
 800d992:	e000      	b.n	800d996 <xQueueGenericCreateStatic+0x96>
 800d994:	2300      	movs	r3, #0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10d      	bne.n	800d9b6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800d99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d99e:	b672      	cpsid	i
 800d9a0:	f383 8811 	msr	BASEPRI, r3
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	b662      	cpsie	i
 800d9ae:	61fb      	str	r3, [r7, #28]
}
 800d9b0:	bf00      	nop
 800d9b2:	bf00      	nop
 800d9b4:	e7fd      	b.n	800d9b2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d9b6:	2350      	movs	r3, #80	@ 0x50
 800d9b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	2b50      	cmp	r3, #80	@ 0x50
 800d9be:	d00d      	beq.n	800d9dc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800d9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c4:	b672      	cpsid	i
 800d9c6:	f383 8811 	msr	BASEPRI, r3
 800d9ca:	f3bf 8f6f 	isb	sy
 800d9ce:	f3bf 8f4f 	dsb	sy
 800d9d2:	b662      	cpsie	i
 800d9d4:	61bb      	str	r3, [r7, #24]
}
 800d9d6:	bf00      	nop
 800d9d8:	bf00      	nop
 800d9da:	e7fd      	b.n	800d9d8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d9dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00d      	beq.n	800da04 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d9f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	68b9      	ldr	r1, [r7, #8]
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f000 f848 	bl	800da94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800da06:	4618      	mov	r0, r3
 800da08:	3730      	adds	r7, #48	@ 0x30
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b08a      	sub	sp, #40	@ 0x28
 800da12:	af02      	add	r7, sp, #8
 800da14:	60f8      	str	r0, [r7, #12]
 800da16:	60b9      	str	r1, [r7, #8]
 800da18:	4613      	mov	r3, r2
 800da1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10d      	bne.n	800da3e <xQueueGenericCreate+0x30>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da26:	b672      	cpsid	i
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	b662      	cpsie	i
 800da36:	613b      	str	r3, [r7, #16]
}
 800da38:	bf00      	nop
 800da3a:	bf00      	nop
 800da3c:	e7fd      	b.n	800da3a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d102      	bne.n	800da4a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800da44:	2300      	movs	r3, #0
 800da46:	61fb      	str	r3, [r7, #28]
 800da48:	e004      	b.n	800da54 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	68ba      	ldr	r2, [r7, #8]
 800da4e:	fb02 f303 	mul.w	r3, r2, r3
 800da52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	3350      	adds	r3, #80	@ 0x50
 800da58:	4618      	mov	r0, r3
 800da5a:	f002 ff1d 	bl	8010898 <pvPortMalloc>
 800da5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d011      	beq.n	800da8a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	3350      	adds	r3, #80	@ 0x50
 800da6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	2200      	movs	r2, #0
 800da74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da78:	79fa      	ldrb	r2, [r7, #7]
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4613      	mov	r3, r2
 800da80:	697a      	ldr	r2, [r7, #20]
 800da82:	68b9      	ldr	r1, [r7, #8]
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 f805 	bl	800da94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da8a:	69bb      	ldr	r3, [r7, #24]
	}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3720      	adds	r7, #32
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	607a      	str	r2, [r7, #4]
 800daa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d103      	bne.n	800dab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	601a      	str	r2, [r3, #0]
 800daae:	e002      	b.n	800dab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dac2:	2101      	movs	r1, #1
 800dac4:	69b8      	ldr	r0, [r7, #24]
 800dac6:	f7ff feaf 	bl	800d828 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	78fa      	ldrb	r2, [r7, #3]
 800dace:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b082      	sub	sp, #8
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00e      	beq.n	800db06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dafa:	2300      	movs	r3, #0
 800dafc:	2200      	movs	r2, #0
 800dafe:	2100      	movs	r1, #0
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f91d 	bl	800dd40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b086      	sub	sp, #24
 800db12:	af00      	add	r7, sp, #0
 800db14:	4603      	mov	r3, r0
 800db16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db18:	2301      	movs	r3, #1
 800db1a:	617b      	str	r3, [r7, #20]
 800db1c:	2300      	movs	r3, #0
 800db1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800db20:	79fb      	ldrb	r3, [r7, #7]
 800db22:	461a      	mov	r2, r3
 800db24:	6939      	ldr	r1, [r7, #16]
 800db26:	6978      	ldr	r0, [r7, #20]
 800db28:	f7ff ff71 	bl	800da0e <xQueueGenericCreate>
 800db2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	f7ff ffd3 	bl	800dada <prvInitialiseMutex>

		return xNewQueue;
 800db34:	68fb      	ldr	r3, [r7, #12]
	}
 800db36:	4618      	mov	r0, r3
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b088      	sub	sp, #32
 800db42:	af02      	add	r7, sp, #8
 800db44:	4603      	mov	r3, r0
 800db46:	6039      	str	r1, [r7, #0]
 800db48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db4a:	2301      	movs	r3, #1
 800db4c:	617b      	str	r3, [r7, #20]
 800db4e:	2300      	movs	r3, #0
 800db50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	2200      	movs	r2, #0
 800db5a:	6939      	ldr	r1, [r7, #16]
 800db5c:	6978      	ldr	r0, [r7, #20]
 800db5e:	f7ff fecf 	bl	800d900 <xQueueGenericCreateStatic>
 800db62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f7ff ffb8 	bl	800dada <prvInitialiseMutex>

		return xNewQueue;
 800db6a:	68fb      	ldr	r3, [r7, #12]
	}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3718      	adds	r7, #24
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800db74:	b590      	push	{r4, r7, lr}
 800db76:	b087      	sub	sp, #28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10d      	bne.n	800dba2 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800db86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8a:	b672      	cpsid	i
 800db8c:	f383 8811 	msr	BASEPRI, r3
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	b662      	cpsie	i
 800db9a:	60fb      	str	r3, [r7, #12]
}
 800db9c:	bf00      	nop
 800db9e:	bf00      	nop
 800dba0:	e7fd      	b.n	800db9e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	689c      	ldr	r4, [r3, #8]
 800dba6:	f001 fed5 	bl	800f954 <xTaskGetCurrentTaskHandle>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	429c      	cmp	r4, r3
 800dbae:	d111      	bne.n	800dbd4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	1e5a      	subs	r2, r3, #1
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d105      	bne.n	800dbce <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2100      	movs	r1, #0
 800dbc8:	6938      	ldr	r0, [r7, #16]
 800dbca:	f000 f8b9 	bl	800dd40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	617b      	str	r3, [r7, #20]
 800dbd2:	e001      	b.n	800dbd8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dbd8:	697b      	ldr	r3, [r7, #20]
	}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	371c      	adds	r7, #28
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd90      	pop	{r4, r7, pc}

0800dbe2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dbe2:	b590      	push	{r4, r7, lr}
 800dbe4:	b087      	sub	sp, #28
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10d      	bne.n	800dc12 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfa:	b672      	cpsid	i
 800dbfc:	f383 8811 	msr	BASEPRI, r3
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	b662      	cpsie	i
 800dc0a:	60fb      	str	r3, [r7, #12]
}
 800dc0c:	bf00      	nop
 800dc0e:	bf00      	nop
 800dc10:	e7fd      	b.n	800dc0e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	689c      	ldr	r4, [r3, #8]
 800dc16:	f001 fe9d 	bl	800f954 <xTaskGetCurrentTaskHandle>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	429c      	cmp	r4, r3
 800dc1e:	d107      	bne.n	800dc30 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	1c5a      	adds	r2, r3, #1
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	e00c      	b.n	800dc4a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dc30:	6839      	ldr	r1, [r7, #0]
 800dc32:	6938      	ldr	r0, [r7, #16]
 800dc34:	f000 fbb2 	bl	800e39c <xQueueSemaphoreTake>
 800dc38:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d004      	beq.n	800dc4a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	1c5a      	adds	r2, r3, #1
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dc4a:	697b      	ldr	r3, [r7, #20]
	}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	371c      	adds	r7, #28
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd90      	pop	{r4, r7, pc}

0800dc54 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08a      	sub	sp, #40	@ 0x28
 800dc58:	af02      	add	r7, sp, #8
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10d      	bne.n	800dc82 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800dc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc6a:	b672      	cpsid	i
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	b662      	cpsie	i
 800dc7a:	61bb      	str	r3, [r7, #24]
}
 800dc7c:	bf00      	nop
 800dc7e:	bf00      	nop
 800dc80:	e7fd      	b.n	800dc7e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d90d      	bls.n	800dca6 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800dc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8e:	b672      	cpsid	i
 800dc90:	f383 8811 	msr	BASEPRI, r3
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	b662      	cpsie	i
 800dc9e:	617b      	str	r3, [r7, #20]
}
 800dca0:	bf00      	nop
 800dca2:	bf00      	nop
 800dca4:	e7fd      	b.n	800dca2 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dca6:	2302      	movs	r3, #2
 800dca8:	9300      	str	r3, [sp, #0]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	2100      	movs	r1, #0
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f7ff fe25 	bl	800d900 <xQueueGenericCreateStatic>
 800dcb6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d002      	beq.n	800dcc4 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dcc4:	69fb      	ldr	r3, [r7, #28]
	}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3720      	adds	r7, #32
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b086      	sub	sp, #24
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10d      	bne.n	800dcfa <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce2:	b672      	cpsid	i
 800dce4:	f383 8811 	msr	BASEPRI, r3
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	b662      	cpsie	i
 800dcf2:	613b      	str	r3, [r7, #16]
}
 800dcf4:	bf00      	nop
 800dcf6:	bf00      	nop
 800dcf8:	e7fd      	b.n	800dcf6 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d90d      	bls.n	800dd1e <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800dd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd06:	b672      	cpsid	i
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	b662      	cpsie	i
 800dd16:	60fb      	str	r3, [r7, #12]
}
 800dd18:	bf00      	nop
 800dd1a:	bf00      	nop
 800dd1c:	e7fd      	b.n	800dd1a <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd1e:	2202      	movs	r2, #2
 800dd20:	2100      	movs	r1, #0
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff fe73 	bl	800da0e <xQueueGenericCreate>
 800dd28:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d002      	beq.n	800dd36 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	683a      	ldr	r2, [r7, #0]
 800dd34:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dd36:	697b      	ldr	r3, [r7, #20]
	}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3718      	adds	r7, #24
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08e      	sub	sp, #56	@ 0x38
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
 800dd4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10d      	bne.n	800dd78 <xQueueGenericSend+0x38>
	__asm volatile
 800dd5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd60:	b672      	cpsid	i
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	b662      	cpsie	i
 800dd70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dd72:	bf00      	nop
 800dd74:	bf00      	nop
 800dd76:	e7fd      	b.n	800dd74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d103      	bne.n	800dd86 <xQueueGenericSend+0x46>
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <xQueueGenericSend+0x4a>
 800dd86:	2301      	movs	r3, #1
 800dd88:	e000      	b.n	800dd8c <xQueueGenericSend+0x4c>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d10d      	bne.n	800ddac <xQueueGenericSend+0x6c>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd94:	b672      	cpsid	i
 800dd96:	f383 8811 	msr	BASEPRI, r3
 800dd9a:	f3bf 8f6f 	isb	sy
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	b662      	cpsie	i
 800dda4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dda6:	bf00      	nop
 800dda8:	bf00      	nop
 800ddaa:	e7fd      	b.n	800dda8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	d103      	bne.n	800ddba <xQueueGenericSend+0x7a>
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d101      	bne.n	800ddbe <xQueueGenericSend+0x7e>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e000      	b.n	800ddc0 <xQueueGenericSend+0x80>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10d      	bne.n	800dde0 <xQueueGenericSend+0xa0>
	__asm volatile
 800ddc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc8:	b672      	cpsid	i
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	b662      	cpsie	i
 800ddd8:	623b      	str	r3, [r7, #32]
}
 800ddda:	bf00      	nop
 800dddc:	bf00      	nop
 800ddde:	e7fd      	b.n	800dddc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dde0:	f001 fdc8 	bl	800f974 <xTaskGetSchedulerState>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d102      	bne.n	800ddf0 <xQueueGenericSend+0xb0>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <xQueueGenericSend+0xb4>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e000      	b.n	800ddf6 <xQueueGenericSend+0xb6>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10d      	bne.n	800de16 <xQueueGenericSend+0xd6>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfe:	b672      	cpsid	i
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	b662      	cpsie	i
 800de0e:	61fb      	str	r3, [r7, #28]
}
 800de10:	bf00      	nop
 800de12:	bf00      	nop
 800de14:	e7fd      	b.n	800de12 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de16:	f002 fc11 	bl	801063c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de22:	429a      	cmp	r2, r3
 800de24:	d302      	bcc.n	800de2c <xQueueGenericSend+0xec>
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d129      	bne.n	800de80 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	68b9      	ldr	r1, [r7, #8]
 800de30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de32:	f000 fcd3 	bl	800e7dc <prvCopyDataToQueue>
 800de36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d010      	beq.n	800de62 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de42:	3324      	adds	r3, #36	@ 0x24
 800de44:	4618      	mov	r0, r3
 800de46:	f001 fbb7 	bl	800f5b8 <xTaskRemoveFromEventList>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d013      	beq.n	800de78 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800de50:	4b3f      	ldr	r3, [pc, #252]	@ (800df50 <xQueueGenericSend+0x210>)
 800de52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	e00a      	b.n	800de78 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800de62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de64:	2b00      	cmp	r3, #0
 800de66:	d007      	beq.n	800de78 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800de68:	4b39      	ldr	r3, [pc, #228]	@ (800df50 <xQueueGenericSend+0x210>)
 800de6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800de78:	f002 fc16 	bl	80106a8 <vPortExitCritical>
				return pdPASS;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e063      	b.n	800df48 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d103      	bne.n	800de8e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de86:	f002 fc0f 	bl	80106a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800de8a:	2300      	movs	r3, #0
 800de8c:	e05c      	b.n	800df48 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de90:	2b00      	cmp	r3, #0
 800de92:	d106      	bne.n	800dea2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de94:	f107 0314 	add.w	r3, r7, #20
 800de98:	4618      	mov	r0, r3
 800de9a:	f001 fbf3 	bl	800f684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de9e:	2301      	movs	r3, #1
 800dea0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dea2:	f002 fc01 	bl	80106a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dea6:	f001 f919 	bl	800f0dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800deaa:	f002 fbc7 	bl	801063c <vPortEnterCritical>
 800deae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800deb4:	b25b      	sxtb	r3, r3
 800deb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800deba:	d103      	bne.n	800dec4 <xQueueGenericSend+0x184>
 800debc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debe:	2200      	movs	r2, #0
 800dec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800deca:	b25b      	sxtb	r3, r3
 800decc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ded0:	d103      	bne.n	800deda <xQueueGenericSend+0x19a>
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800deda:	f002 fbe5 	bl	80106a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dede:	1d3a      	adds	r2, r7, #4
 800dee0:	f107 0314 	add.w	r3, r7, #20
 800dee4:	4611      	mov	r1, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f001 fbe2 	bl	800f6b0 <xTaskCheckForTimeOut>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d124      	bne.n	800df3c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800def2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800def4:	f000 fd6a 	bl	800e9cc <prvIsQueueFull>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d018      	beq.n	800df30 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800defe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df00:	3310      	adds	r3, #16
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	4611      	mov	r1, r2
 800df06:	4618      	mov	r0, r3
 800df08:	f001 fb00 	bl	800f50c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800df0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df0e:	f000 fcf5 	bl	800e8fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800df12:	f001 f8f1 	bl	800f0f8 <xTaskResumeAll>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f47f af7c 	bne.w	800de16 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800df1e:	4b0c      	ldr	r3, [pc, #48]	@ (800df50 <xQueueGenericSend+0x210>)
 800df20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	e772      	b.n	800de16 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800df30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df32:	f000 fce3 	bl	800e8fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df36:	f001 f8df 	bl	800f0f8 <xTaskResumeAll>
 800df3a:	e76c      	b.n	800de16 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800df3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df3e:	f000 fcdd 	bl	800e8fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df42:	f001 f8d9 	bl	800f0f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800df46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3738      	adds	r7, #56	@ 0x38
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	e000ed04 	.word	0xe000ed04

0800df54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b08e      	sub	sp, #56	@ 0x38
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
 800df60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800df66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d10d      	bne.n	800df88 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800df6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df70:	b672      	cpsid	i
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	b662      	cpsie	i
 800df80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800df82:	bf00      	nop
 800df84:	bf00      	nop
 800df86:	e7fd      	b.n	800df84 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d103      	bne.n	800df96 <xQueueGenericSendFromISR+0x42>
 800df8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df92:	2b00      	cmp	r3, #0
 800df94:	d101      	bne.n	800df9a <xQueueGenericSendFromISR+0x46>
 800df96:	2301      	movs	r3, #1
 800df98:	e000      	b.n	800df9c <xQueueGenericSendFromISR+0x48>
 800df9a:	2300      	movs	r3, #0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d10d      	bne.n	800dfbc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800dfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa4:	b672      	cpsid	i
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	b662      	cpsie	i
 800dfb4:	623b      	str	r3, [r7, #32]
}
 800dfb6:	bf00      	nop
 800dfb8:	bf00      	nop
 800dfba:	e7fd      	b.n	800dfb8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	d103      	bne.n	800dfca <xQueueGenericSendFromISR+0x76>
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d101      	bne.n	800dfce <xQueueGenericSendFromISR+0x7a>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e000      	b.n	800dfd0 <xQueueGenericSendFromISR+0x7c>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10d      	bne.n	800dff0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800dfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd8:	b672      	cpsid	i
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	b662      	cpsie	i
 800dfe8:	61fb      	str	r3, [r7, #28]
}
 800dfea:	bf00      	nop
 800dfec:	bf00      	nop
 800dfee:	e7fd      	b.n	800dfec <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dff0:	f002 fc0c 	bl	801080c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dff4:	f3ef 8211 	mrs	r2, BASEPRI
 800dff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffc:	b672      	cpsid	i
 800dffe:	f383 8811 	msr	BASEPRI, r3
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	b662      	cpsie	i
 800e00c:	61ba      	str	r2, [r7, #24]
 800e00e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e010:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e012:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d302      	bcc.n	800e026 <xQueueGenericSendFromISR+0xd2>
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2b02      	cmp	r3, #2
 800e024:	d12c      	bne.n	800e080 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e028:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e02c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e030:	683a      	ldr	r2, [r7, #0]
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e036:	f000 fbd1 	bl	800e7dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e03a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e03e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e042:	d112      	bne.n	800e06a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d016      	beq.n	800e07a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04e:	3324      	adds	r3, #36	@ 0x24
 800e050:	4618      	mov	r0, r3
 800e052:	f001 fab1 	bl	800f5b8 <xTaskRemoveFromEventList>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00e      	beq.n	800e07a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00b      	beq.n	800e07a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	e007      	b.n	800e07a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e06a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e06e:	3301      	adds	r3, #1
 800e070:	b2db      	uxtb	r3, r3
 800e072:	b25a      	sxtb	r2, r3
 800e074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e07a:	2301      	movs	r3, #1
 800e07c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e07e:	e001      	b.n	800e084 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e080:	2300      	movs	r3, #0
 800e082:	637b      	str	r3, [r7, #52]	@ 0x34
 800e084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e086:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e08e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e092:	4618      	mov	r0, r3
 800e094:	3738      	adds	r7, #56	@ 0x38
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b08e      	sub	sp, #56	@ 0x38
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10d      	bne.n	800e0ca <xQueueGiveFromISR+0x30>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b2:	b672      	cpsid	i
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	b662      	cpsie	i
 800e0c2:	623b      	str	r3, [r7, #32]
}
 800e0c4:	bf00      	nop
 800e0c6:	bf00      	nop
 800e0c8:	e7fd      	b.n	800e0c6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00d      	beq.n	800e0ee <xQueueGiveFromISR+0x54>
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d6:	b672      	cpsid	i
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	b662      	cpsie	i
 800e0e6:	61fb      	str	r3, [r7, #28]
}
 800e0e8:	bf00      	nop
 800e0ea:	bf00      	nop
 800e0ec:	e7fd      	b.n	800e0ea <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d103      	bne.n	800e0fe <xQueueGiveFromISR+0x64>
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f8:	689b      	ldr	r3, [r3, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d101      	bne.n	800e102 <xQueueGiveFromISR+0x68>
 800e0fe:	2301      	movs	r3, #1
 800e100:	e000      	b.n	800e104 <xQueueGiveFromISR+0x6a>
 800e102:	2300      	movs	r3, #0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10d      	bne.n	800e124 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10c:	b672      	cpsid	i
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	b662      	cpsie	i
 800e11c:	61bb      	str	r3, [r7, #24]
}
 800e11e:	bf00      	nop
 800e120:	bf00      	nop
 800e122:	e7fd      	b.n	800e120 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e124:	f002 fb72 	bl	801080c <vPortValidateInterruptPriority>
	__asm volatile
 800e128:	f3ef 8211 	mrs	r2, BASEPRI
 800e12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e130:	b672      	cpsid	i
 800e132:	f383 8811 	msr	BASEPRI, r3
 800e136:	f3bf 8f6f 	isb	sy
 800e13a:	f3bf 8f4f 	dsb	sy
 800e13e:	b662      	cpsie	i
 800e140:	617a      	str	r2, [r7, #20]
 800e142:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e144:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e146:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e14c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e154:	429a      	cmp	r2, r3
 800e156:	d22b      	bcs.n	800e1b0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e164:	1c5a      	adds	r2, r3, #1
 800e166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e168:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e16a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e16e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e172:	d112      	bne.n	800e19a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d016      	beq.n	800e1aa <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17e:	3324      	adds	r3, #36	@ 0x24
 800e180:	4618      	mov	r0, r3
 800e182:	f001 fa19 	bl	800f5b8 <xTaskRemoveFromEventList>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00e      	beq.n	800e1aa <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00b      	beq.n	800e1aa <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	2201      	movs	r2, #1
 800e196:	601a      	str	r2, [r3, #0]
 800e198:	e007      	b.n	800e1aa <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e19a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e19e:	3301      	adds	r3, #1
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	b25a      	sxtb	r2, r3
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1ae:	e001      	b.n	800e1b4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f383 8811 	msr	BASEPRI, r3
}
 800e1be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3738      	adds	r7, #56	@ 0x38
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
	...

0800e1cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08c      	sub	sp, #48	@ 0x30
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10d      	bne.n	800e202 <xQueueReceive+0x36>
	__asm volatile
 800e1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ea:	b672      	cpsid	i
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	b662      	cpsie	i
 800e1fa:	623b      	str	r3, [r7, #32]
}
 800e1fc:	bf00      	nop
 800e1fe:	bf00      	nop
 800e200:	e7fd      	b.n	800e1fe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d103      	bne.n	800e210 <xQueueReceive+0x44>
 800e208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d101      	bne.n	800e214 <xQueueReceive+0x48>
 800e210:	2301      	movs	r3, #1
 800e212:	e000      	b.n	800e216 <xQueueReceive+0x4a>
 800e214:	2300      	movs	r3, #0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10d      	bne.n	800e236 <xQueueReceive+0x6a>
	__asm volatile
 800e21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21e:	b672      	cpsid	i
 800e220:	f383 8811 	msr	BASEPRI, r3
 800e224:	f3bf 8f6f 	isb	sy
 800e228:	f3bf 8f4f 	dsb	sy
 800e22c:	b662      	cpsie	i
 800e22e:	61fb      	str	r3, [r7, #28]
}
 800e230:	bf00      	nop
 800e232:	bf00      	nop
 800e234:	e7fd      	b.n	800e232 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e236:	f001 fb9d 	bl	800f974 <xTaskGetSchedulerState>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d102      	bne.n	800e246 <xQueueReceive+0x7a>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d101      	bne.n	800e24a <xQueueReceive+0x7e>
 800e246:	2301      	movs	r3, #1
 800e248:	e000      	b.n	800e24c <xQueueReceive+0x80>
 800e24a:	2300      	movs	r3, #0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10d      	bne.n	800e26c <xQueueReceive+0xa0>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e254:	b672      	cpsid	i
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	b662      	cpsie	i
 800e264:	61bb      	str	r3, [r7, #24]
}
 800e266:	bf00      	nop
 800e268:	bf00      	nop
 800e26a:	e7fd      	b.n	800e268 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e26c:	f002 f9e6 	bl	801063c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e274:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d01f      	beq.n	800e2bc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e27c:	68b9      	ldr	r1, [r7, #8]
 800e27e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e280:	f000 fb16 	bl	800e8b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e286:	1e5a      	subs	r2, r3, #1
 800e288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28e:	691b      	ldr	r3, [r3, #16]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d00f      	beq.n	800e2b4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e296:	3310      	adds	r3, #16
 800e298:	4618      	mov	r0, r3
 800e29a:	f001 f98d 	bl	800f5b8 <xTaskRemoveFromEventList>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d007      	beq.n	800e2b4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e2a4:	4b3c      	ldr	r3, [pc, #240]	@ (800e398 <xQueueReceive+0x1cc>)
 800e2a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2aa:	601a      	str	r2, [r3, #0]
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e2b4:	f002 f9f8 	bl	80106a8 <vPortExitCritical>
				return pdPASS;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e069      	b.n	800e390 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d103      	bne.n	800e2ca <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e2c2:	f002 f9f1 	bl	80106a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e062      	b.n	800e390 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d106      	bne.n	800e2de <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2d0:	f107 0310 	add.w	r3, r7, #16
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f001 f9d5 	bl	800f684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2de:	f002 f9e3 	bl	80106a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2e2:	f000 fefb 	bl	800f0dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2e6:	f002 f9a9 	bl	801063c <vPortEnterCritical>
 800e2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2f0:	b25b      	sxtb	r3, r3
 800e2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e2f6:	d103      	bne.n	800e300 <xQueueReceive+0x134>
 800e2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e306:	b25b      	sxtb	r3, r3
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e30c:	d103      	bne.n	800e316 <xQueueReceive+0x14a>
 800e30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e310:	2200      	movs	r2, #0
 800e312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e316:	f002 f9c7 	bl	80106a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e31a:	1d3a      	adds	r2, r7, #4
 800e31c:	f107 0310 	add.w	r3, r7, #16
 800e320:	4611      	mov	r1, r2
 800e322:	4618      	mov	r0, r3
 800e324:	f001 f9c4 	bl	800f6b0 <xTaskCheckForTimeOut>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d123      	bne.n	800e376 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e32e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e330:	f000 fb36 	bl	800e9a0 <prvIsQueueEmpty>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d017      	beq.n	800e36a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e33c:	3324      	adds	r3, #36	@ 0x24
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	4611      	mov	r1, r2
 800e342:	4618      	mov	r0, r3
 800e344:	f001 f8e2 	bl	800f50c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e34a:	f000 fad7 	bl	800e8fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e34e:	f000 fed3 	bl	800f0f8 <xTaskResumeAll>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d189      	bne.n	800e26c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e358:	4b0f      	ldr	r3, [pc, #60]	@ (800e398 <xQueueReceive+0x1cc>)
 800e35a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e35e:	601a      	str	r2, [r3, #0]
 800e360:	f3bf 8f4f 	dsb	sy
 800e364:	f3bf 8f6f 	isb	sy
 800e368:	e780      	b.n	800e26c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e36a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e36c:	f000 fac6 	bl	800e8fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e370:	f000 fec2 	bl	800f0f8 <xTaskResumeAll>
 800e374:	e77a      	b.n	800e26c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e378:	f000 fac0 	bl	800e8fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e37c:	f000 febc 	bl	800f0f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e382:	f000 fb0d 	bl	800e9a0 <prvIsQueueEmpty>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f43f af6f 	beq.w	800e26c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e38e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e390:	4618      	mov	r0, r3
 800e392:	3730      	adds	r7, #48	@ 0x30
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	e000ed04 	.word	0xe000ed04

0800e39c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08e      	sub	sp, #56	@ 0x38
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10d      	bne.n	800e3d4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3bc:	b672      	cpsid	i
 800e3be:	f383 8811 	msr	BASEPRI, r3
 800e3c2:	f3bf 8f6f 	isb	sy
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	b662      	cpsie	i
 800e3cc:	623b      	str	r3, [r7, #32]
}
 800e3ce:	bf00      	nop
 800e3d0:	bf00      	nop
 800e3d2:	e7fd      	b.n	800e3d0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00d      	beq.n	800e3f8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e0:	b672      	cpsid	i
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	b662      	cpsie	i
 800e3f0:	61fb      	str	r3, [r7, #28]
}
 800e3f2:	bf00      	nop
 800e3f4:	bf00      	nop
 800e3f6:	e7fd      	b.n	800e3f4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3f8:	f001 fabc 	bl	800f974 <xTaskGetSchedulerState>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d102      	bne.n	800e408 <xQueueSemaphoreTake+0x6c>
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d101      	bne.n	800e40c <xQueueSemaphoreTake+0x70>
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <xQueueSemaphoreTake+0x72>
 800e40c:	2300      	movs	r3, #0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10d      	bne.n	800e42e <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e416:	b672      	cpsid	i
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	b662      	cpsie	i
 800e426:	61bb      	str	r3, [r7, #24]
}
 800e428:	bf00      	nop
 800e42a:	bf00      	nop
 800e42c:	e7fd      	b.n	800e42a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e42e:	f002 f905 	bl	801063c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e436:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d024      	beq.n	800e488 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e440:	1e5a      	subs	r2, r3, #1
 800e442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e444:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d104      	bne.n	800e458 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e44e:	f001 fc13 	bl	800fc78 <pvTaskIncrementMutexHeldCount>
 800e452:	4602      	mov	r2, r0
 800e454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e456:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d00f      	beq.n	800e480 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e462:	3310      	adds	r3, #16
 800e464:	4618      	mov	r0, r3
 800e466:	f001 f8a7 	bl	800f5b8 <xTaskRemoveFromEventList>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d007      	beq.n	800e480 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e470:	4b55      	ldr	r3, [pc, #340]	@ (800e5c8 <xQueueSemaphoreTake+0x22c>)
 800e472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e476:	601a      	str	r2, [r3, #0]
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e480:	f002 f912 	bl	80106a8 <vPortExitCritical>
				return pdPASS;
 800e484:	2301      	movs	r3, #1
 800e486:	e09a      	b.n	800e5be <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d114      	bne.n	800e4b8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00d      	beq.n	800e4b0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e498:	b672      	cpsid	i
 800e49a:	f383 8811 	msr	BASEPRI, r3
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f3bf 8f4f 	dsb	sy
 800e4a6:	b662      	cpsie	i
 800e4a8:	617b      	str	r3, [r7, #20]
}
 800e4aa:	bf00      	nop
 800e4ac:	bf00      	nop
 800e4ae:	e7fd      	b.n	800e4ac <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e4b0:	f002 f8fa 	bl	80106a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	e082      	b.n	800e5be <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d106      	bne.n	800e4cc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4be:	f107 030c 	add.w	r3, r7, #12
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f001 f8de 	bl	800f684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4cc:	f002 f8ec 	bl	80106a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4d0:	f000 fe04 	bl	800f0dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4d4:	f002 f8b2 	bl	801063c <vPortEnterCritical>
 800e4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e4de:	b25b      	sxtb	r3, r3
 800e4e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4e4:	d103      	bne.n	800e4ee <xQueueSemaphoreTake+0x152>
 800e4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e4f4:	b25b      	sxtb	r3, r3
 800e4f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e4fa:	d103      	bne.n	800e504 <xQueueSemaphoreTake+0x168>
 800e4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fe:	2200      	movs	r2, #0
 800e500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e504:	f002 f8d0 	bl	80106a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e508:	463a      	mov	r2, r7
 800e50a:	f107 030c 	add.w	r3, r7, #12
 800e50e:	4611      	mov	r1, r2
 800e510:	4618      	mov	r0, r3
 800e512:	f001 f8cd 	bl	800f6b0 <xTaskCheckForTimeOut>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d132      	bne.n	800e582 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e51c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e51e:	f000 fa3f 	bl	800e9a0 <prvIsQueueEmpty>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d026      	beq.n	800e576 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d109      	bne.n	800e544 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e530:	f002 f884 	bl	801063c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e536:	689b      	ldr	r3, [r3, #8]
 800e538:	4618      	mov	r0, r3
 800e53a:	f001 fa39 	bl	800f9b0 <xTaskPriorityInherit>
 800e53e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e540:	f002 f8b2 	bl	80106a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e546:	3324      	adds	r3, #36	@ 0x24
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	4611      	mov	r1, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 ffdd 	bl	800f50c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e552:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e554:	f000 f9d2 	bl	800e8fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e558:	f000 fdce 	bl	800f0f8 <xTaskResumeAll>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f47f af65 	bne.w	800e42e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e564:	4b18      	ldr	r3, [pc, #96]	@ (800e5c8 <xQueueSemaphoreTake+0x22c>)
 800e566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e56a:	601a      	str	r2, [r3, #0]
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	f3bf 8f6f 	isb	sy
 800e574:	e75b      	b.n	800e42e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e576:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e578:	f000 f9c0 	bl	800e8fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e57c:	f000 fdbc 	bl	800f0f8 <xTaskResumeAll>
 800e580:	e755      	b.n	800e42e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e582:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e584:	f000 f9ba 	bl	800e8fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e588:	f000 fdb6 	bl	800f0f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e58c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e58e:	f000 fa07 	bl	800e9a0 <prvIsQueueEmpty>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	f43f af4a 	beq.w	800e42e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d00d      	beq.n	800e5bc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e5a0:	f002 f84c 	bl	801063c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e5a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5a6:	f000 f901 	bl	800e7ac <prvGetDisinheritPriorityAfterTimeout>
 800e5aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ae:	689b      	ldr	r3, [r3, #8]
 800e5b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f001 fad8 	bl	800fb68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e5b8:	f002 f876 	bl	80106a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e5bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3738      	adds	r7, #56	@ 0x38
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	e000ed04 	.word	0xe000ed04

0800e5cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08e      	sub	sp, #56	@ 0x38
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d10d      	bne.n	800e5fe <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e6:	b672      	cpsid	i
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	b662      	cpsie	i
 800e5f6:	623b      	str	r3, [r7, #32]
}
 800e5f8:	bf00      	nop
 800e5fa:	bf00      	nop
 800e5fc:	e7fd      	b.n	800e5fa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d103      	bne.n	800e60c <xQueueReceiveFromISR+0x40>
 800e604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d101      	bne.n	800e610 <xQueueReceiveFromISR+0x44>
 800e60c:	2301      	movs	r3, #1
 800e60e:	e000      	b.n	800e612 <xQueueReceiveFromISR+0x46>
 800e610:	2300      	movs	r3, #0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10d      	bne.n	800e632 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	b672      	cpsid	i
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	b662      	cpsie	i
 800e62a:	61fb      	str	r3, [r7, #28]
}
 800e62c:	bf00      	nop
 800e62e:	bf00      	nop
 800e630:	e7fd      	b.n	800e62e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e632:	f002 f8eb 	bl	801080c <vPortValidateInterruptPriority>
	__asm volatile
 800e636:	f3ef 8211 	mrs	r2, BASEPRI
 800e63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e63e:	b672      	cpsid	i
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	b662      	cpsie	i
 800e64e:	61ba      	str	r2, [r7, #24]
 800e650:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e652:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e654:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e65a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d02f      	beq.n	800e6c2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e664:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e66c:	68b9      	ldr	r1, [r7, #8]
 800e66e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e670:	f000 f91e 	bl	800e8b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e676:	1e5a      	subs	r2, r3, #1
 800e678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e67c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e684:	d112      	bne.n	800e6ac <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d016      	beq.n	800e6bc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e690:	3310      	adds	r3, #16
 800e692:	4618      	mov	r0, r3
 800e694:	f000 ff90 	bl	800f5b8 <xTaskRemoveFromEventList>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00e      	beq.n	800e6bc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00b      	beq.n	800e6bc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	e007      	b.n	800e6bc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	b25a      	sxtb	r2, r3
 800e6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6c0:	e001      	b.n	800e6c6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f383 8811 	msr	BASEPRI, r3
}
 800e6d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3738      	adds	r7, #56	@ 0x38
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d10d      	bne.n	800e706 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800e6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ee:	b672      	cpsid	i
 800e6f0:	f383 8811 	msr	BASEPRI, r3
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	b662      	cpsie	i
 800e6fe:	60bb      	str	r3, [r7, #8]
}
 800e700:	bf00      	nop
 800e702:	bf00      	nop
 800e704:	e7fd      	b.n	800e702 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800e706:	f001 ff99 	bl	801063c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e70e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e710:	f001 ffca 	bl	80106a8 <vPortExitCritical>

	return uxReturn;
 800e714:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e71e:	b480      	push	{r7}
 800e720:	b087      	sub	sp, #28
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10d      	bne.n	800e74c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800e730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e734:	b672      	cpsid	i
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	b662      	cpsie	i
 800e744:	60fb      	str	r3, [r7, #12]
}
 800e746:	bf00      	nop
 800e748:	bf00      	nop
 800e74a:	e7fd      	b.n	800e748 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e750:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e752:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e754:	4618      	mov	r0, r3
 800e756:	371c      	adds	r7, #28
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10d      	bne.n	800e78e <vQueueDelete+0x2e>
	__asm volatile
 800e772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e776:	b672      	cpsid	i
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	b662      	cpsie	i
 800e786:	60bb      	str	r3, [r7, #8]
}
 800e788:	bf00      	nop
 800e78a:	bf00      	nop
 800e78c:	e7fd      	b.n	800e78a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f000 f95e 	bl	800ea50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d102      	bne.n	800e7a4 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f002 f94c 	bl	8010a3c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e7a4:	bf00      	nop
 800e7a6:	3710      	adds	r7, #16
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b085      	sub	sp, #20
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d006      	beq.n	800e7ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e7c6:	60fb      	str	r3, [r7, #12]
 800e7c8:	e001      	b.n	800e7ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
	}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3714      	adds	r7, #20
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b086      	sub	sp, #24
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d10d      	bne.n	800e816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d14d      	bne.n	800e89e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	4618      	mov	r0, r3
 800e808:	f001 f93a 	bl	800fa80 <xTaskPriorityDisinherit>
 800e80c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2200      	movs	r2, #0
 800e812:	609a      	str	r2, [r3, #8]
 800e814:	e043      	b.n	800e89e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d119      	bne.n	800e850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	6858      	ldr	r0, [r3, #4]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e824:	461a      	mov	r2, r3
 800e826:	68b9      	ldr	r1, [r7, #8]
 800e828:	f012 f967 	bl	8020afa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	685a      	ldr	r2, [r3, #4]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e834:	441a      	add	r2, r3
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	689b      	ldr	r3, [r3, #8]
 800e842:	429a      	cmp	r2, r3
 800e844:	d32b      	bcc.n	800e89e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	605a      	str	r2, [r3, #4]
 800e84e:	e026      	b.n	800e89e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	68d8      	ldr	r0, [r3, #12]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e858:	461a      	mov	r2, r3
 800e85a:	68b9      	ldr	r1, [r7, #8]
 800e85c:	f012 f94d 	bl	8020afa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	68da      	ldr	r2, [r3, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e868:	425b      	negs	r3, r3
 800e86a:	441a      	add	r2, r3
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d207      	bcs.n	800e88c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e884:	425b      	negs	r3, r3
 800e886:	441a      	add	r2, r3
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2b02      	cmp	r3, #2
 800e890:	d105      	bne.n	800e89e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	3b01      	subs	r3, #1
 800e89c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e8a6:	697b      	ldr	r3, [r7, #20]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3718      	adds	r7, #24
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d018      	beq.n	800e8f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	68da      	ldr	r2, [r3, #12]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8ca:	441a      	add	r2, r3
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	68da      	ldr	r2, [r3, #12]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d303      	bcc.n	800e8e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	68d9      	ldr	r1, [r3, #12]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	6838      	ldr	r0, [r7, #0]
 800e8f0:	f012 f903 	bl	8020afa <memcpy>
	}
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e904:	f001 fe9a 	bl	801063c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e90e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e910:	e011      	b.n	800e936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e916:	2b00      	cmp	r3, #0
 800e918:	d012      	beq.n	800e940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	3324      	adds	r3, #36	@ 0x24
 800e91e:	4618      	mov	r0, r3
 800e920:	f000 fe4a 	bl	800f5b8 <xTaskRemoveFromEventList>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e92a:	f000 ff29 	bl	800f780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e92e:	7bfb      	ldrb	r3, [r7, #15]
 800e930:	3b01      	subs	r3, #1
 800e932:	b2db      	uxtb	r3, r3
 800e934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dce9      	bgt.n	800e912 <prvUnlockQueue+0x16>
 800e93e:	e000      	b.n	800e942 <prvUnlockQueue+0x46>
					break;
 800e940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	22ff      	movs	r2, #255	@ 0xff
 800e946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e94a:	f001 fead 	bl	80106a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e94e:	f001 fe75 	bl	801063c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e95a:	e011      	b.n	800e980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d012      	beq.n	800e98a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	3310      	adds	r3, #16
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 fe25 	bl	800f5b8 <xTaskRemoveFromEventList>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d001      	beq.n	800e978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e974:	f000 ff04 	bl	800f780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e978:	7bbb      	ldrb	r3, [r7, #14]
 800e97a:	3b01      	subs	r3, #1
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e984:	2b00      	cmp	r3, #0
 800e986:	dce9      	bgt.n	800e95c <prvUnlockQueue+0x60>
 800e988:	e000      	b.n	800e98c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e98a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	22ff      	movs	r2, #255	@ 0xff
 800e990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e994:	f001 fe88 	bl	80106a8 <vPortExitCritical>
}
 800e998:	bf00      	nop
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e9a8:	f001 fe48 	bl	801063c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d102      	bne.n	800e9ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	e001      	b.n	800e9be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e9be:	f001 fe73 	bl	80106a8 <vPortExitCritical>

	return xReturn;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e9d4:	f001 fe32 	bl	801063c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d102      	bne.n	800e9ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	60fb      	str	r3, [r7, #12]
 800e9e8:	e001      	b.n	800e9ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e9ee:	f001 fe5b 	bl	80106a8 <vPortExitCritical>

	return xReturn;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea06:	2300      	movs	r3, #0
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	e014      	b.n	800ea36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ea0c:	4a0f      	ldr	r2, [pc, #60]	@ (800ea4c <vQueueAddToRegistry+0x50>)
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d10b      	bne.n	800ea30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ea18:	490c      	ldr	r1, [pc, #48]	@ (800ea4c <vQueueAddToRegistry+0x50>)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ea22:	4a0a      	ldr	r2, [pc, #40]	@ (800ea4c <vQueueAddToRegistry+0x50>)
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	00db      	lsls	r3, r3, #3
 800ea28:	4413      	add	r3, r2
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ea2e:	e006      	b.n	800ea3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	3301      	adds	r3, #1
 800ea34:	60fb      	str	r3, [r7, #12]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2b0b      	cmp	r3, #11
 800ea3a:	d9e7      	bls.n	800ea0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ea3c:	bf00      	nop
 800ea3e:	bf00      	nop
 800ea40:	3714      	adds	r7, #20
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop
 800ea4c:	2000ea40 	.word	0x2000ea40

0800ea50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea58:	2300      	movs	r3, #0
 800ea5a:	60fb      	str	r3, [r7, #12]
 800ea5c:	e016      	b.n	800ea8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ea5e:	4a10      	ldr	r2, [pc, #64]	@ (800eaa0 <vQueueUnregisterQueue+0x50>)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	4413      	add	r3, r2
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d10b      	bne.n	800ea86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ea6e:	4a0c      	ldr	r2, [pc, #48]	@ (800eaa0 <vQueueUnregisterQueue+0x50>)
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2100      	movs	r1, #0
 800ea74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ea78:	4a09      	ldr	r2, [pc, #36]	@ (800eaa0 <vQueueUnregisterQueue+0x50>)
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	00db      	lsls	r3, r3, #3
 800ea7e:	4413      	add	r3, r2
 800ea80:	2200      	movs	r2, #0
 800ea82:	605a      	str	r2, [r3, #4]
				break;
 800ea84:	e006      	b.n	800ea94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	60fb      	str	r3, [r7, #12]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2b0b      	cmp	r3, #11
 800ea90:	d9e5      	bls.n	800ea5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ea92:	bf00      	nop
 800ea94:	bf00      	nop
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	2000ea40 	.word	0x2000ea40

0800eaa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eab4:	f001 fdc2 	bl	801063c <vPortEnterCritical>
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eabe:	b25b      	sxtb	r3, r3
 800eac0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eac4:	d103      	bne.n	800eace <vQueueWaitForMessageRestricted+0x2a>
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ead4:	b25b      	sxtb	r3, r3
 800ead6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eada:	d103      	bne.n	800eae4 <vQueueWaitForMessageRestricted+0x40>
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	2200      	movs	r2, #0
 800eae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eae4:	f001 fde0 	bl	80106a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d106      	bne.n	800eafe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	3324      	adds	r3, #36	@ 0x24
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	68b9      	ldr	r1, [r7, #8]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f000 fd2f 	bl	800f55c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eafe:	6978      	ldr	r0, [r7, #20]
 800eb00:	f7ff fefc 	bl	800e8fc <prvUnlockQueue>
	}
 800eb04:	bf00      	nop
 800eb06:	3718      	adds	r7, #24
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08e      	sub	sp, #56	@ 0x38
 800eb10:	af04      	add	r7, sp, #16
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	607a      	str	r2, [r7, #4]
 800eb18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d10d      	bne.n	800eb3c <xTaskCreateStatic+0x30>
	__asm volatile
 800eb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb24:	b672      	cpsid	i
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	b662      	cpsie	i
 800eb34:	623b      	str	r3, [r7, #32]
}
 800eb36:	bf00      	nop
 800eb38:	bf00      	nop
 800eb3a:	e7fd      	b.n	800eb38 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d10d      	bne.n	800eb5e <xTaskCreateStatic+0x52>
	__asm volatile
 800eb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb46:	b672      	cpsid	i
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	b662      	cpsie	i
 800eb56:	61fb      	str	r3, [r7, #28]
}
 800eb58:	bf00      	nop
 800eb5a:	bf00      	nop
 800eb5c:	e7fd      	b.n	800eb5a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eb5e:	23a8      	movs	r3, #168	@ 0xa8
 800eb60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	2ba8      	cmp	r3, #168	@ 0xa8
 800eb66:	d00d      	beq.n	800eb84 <xTaskCreateStatic+0x78>
	__asm volatile
 800eb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6c:	b672      	cpsid	i
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	b662      	cpsie	i
 800eb7c:	61bb      	str	r3, [r7, #24]
}
 800eb7e:	bf00      	nop
 800eb80:	bf00      	nop
 800eb82:	e7fd      	b.n	800eb80 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eb84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d01e      	beq.n	800ebca <xTaskCreateStatic+0xbe>
 800eb8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d01b      	beq.n	800ebca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9e:	2202      	movs	r2, #2
 800eba0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eba4:	2300      	movs	r3, #0
 800eba6:	9303      	str	r3, [sp, #12]
 800eba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebaa:	9302      	str	r3, [sp, #8]
 800ebac:	f107 0314 	add.w	r3, r7, #20
 800ebb0:	9301      	str	r3, [sp, #4]
 800ebb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f000 f851 	bl	800ec64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebc4:	f000 f8f8 	bl	800edb8 <prvAddNewTaskToReadyList>
 800ebc8:	e001      	b.n	800ebce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ebce:	697b      	ldr	r3, [r7, #20]
	}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3728      	adds	r7, #40	@ 0x28
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08c      	sub	sp, #48	@ 0x30
 800ebdc:	af04      	add	r7, sp, #16
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	603b      	str	r3, [r7, #0]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ebe8:	88fb      	ldrh	r3, [r7, #6]
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	4618      	mov	r0, r3
 800ebee:	f001 fe53 	bl	8010898 <pvPortMalloc>
 800ebf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00e      	beq.n	800ec18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ebfa:	20a8      	movs	r0, #168	@ 0xa8
 800ebfc:	f001 fe4c 	bl	8010898 <pvPortMalloc>
 800ec00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d003      	beq.n	800ec10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	697a      	ldr	r2, [r7, #20]
 800ec0c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ec0e:	e005      	b.n	800ec1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec10:	6978      	ldr	r0, [r7, #20]
 800ec12:	f001 ff13 	bl	8010a3c <vPortFree>
 800ec16:	e001      	b.n	800ec1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d017      	beq.n	800ec52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec2a:	88fa      	ldrh	r2, [r7, #6]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	9303      	str	r3, [sp, #12]
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	9302      	str	r3, [sp, #8]
 800ec34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec36:	9301      	str	r3, [sp, #4]
 800ec38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec3a:	9300      	str	r3, [sp, #0]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	68b9      	ldr	r1, [r7, #8]
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f000 f80f 	bl	800ec64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec46:	69f8      	ldr	r0, [r7, #28]
 800ec48:	f000 f8b6 	bl	800edb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	61bb      	str	r3, [r7, #24]
 800ec50:	e002      	b.n	800ec58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ec56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ec58:	69bb      	ldr	r3, [r7, #24]
	}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3720      	adds	r7, #32
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
	...

0800ec64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b088      	sub	sp, #32
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ec72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	21a5      	movs	r1, #165	@ 0xa5
 800ec7e:	f011 fe69 	bl	8020954 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ec82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec86:	6879      	ldr	r1, [r7, #4]
 800ec88:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ec8c:	440b      	add	r3, r1
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	4413      	add	r3, r2
 800ec92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	f023 0307 	bic.w	r3, r3, #7
 800ec9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	f003 0307 	and.w	r3, r3, #7
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00d      	beq.n	800ecc2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecaa:	b672      	cpsid	i
 800ecac:	f383 8811 	msr	BASEPRI, r3
 800ecb0:	f3bf 8f6f 	isb	sy
 800ecb4:	f3bf 8f4f 	dsb	sy
 800ecb8:	b662      	cpsie	i
 800ecba:	617b      	str	r3, [r7, #20]
}
 800ecbc:	bf00      	nop
 800ecbe:	bf00      	nop
 800ecc0:	e7fd      	b.n	800ecbe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d01f      	beq.n	800ed08 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ecc8:	2300      	movs	r3, #0
 800ecca:	61fb      	str	r3, [r7, #28]
 800eccc:	e012      	b.n	800ecf4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ecce:	68ba      	ldr	r2, [r7, #8]
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	7819      	ldrb	r1, [r3, #0]
 800ecd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	4413      	add	r3, r2
 800ecdc:	3334      	adds	r3, #52	@ 0x34
 800ecde:	460a      	mov	r2, r1
 800ece0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	4413      	add	r3, r2
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d006      	beq.n	800ecfc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	61fb      	str	r3, [r7, #28]
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	2b0f      	cmp	r3, #15
 800ecf8:	d9e9      	bls.n	800ecce <prvInitialiseNewTask+0x6a>
 800ecfa:	e000      	b.n	800ecfe <prvInitialiseNewTask+0x9a>
			{
				break;
 800ecfc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ed06:	e003      	b.n	800ed10 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed12:	2b37      	cmp	r3, #55	@ 0x37
 800ed14:	d901      	bls.n	800ed1a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed16:	2337      	movs	r3, #55	@ 0x37
 800ed18:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed24:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed28:	2200      	movs	r2, #0
 800ed2a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed2e:	3304      	adds	r3, #4
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fe fce5 	bl	800d700 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed38:	3318      	adds	r3, #24
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fe fce0 	bl	800d700 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed54:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ed56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed60:	2200      	movs	r2, #0
 800ed62:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ed66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed68:	3354      	adds	r3, #84	@ 0x54
 800ed6a:	224c      	movs	r2, #76	@ 0x4c
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f011 fdf0 	bl	8020954 <memset>
 800ed74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed76:	4a0d      	ldr	r2, [pc, #52]	@ (800edac <prvInitialiseNewTask+0x148>)
 800ed78:	659a      	str	r2, [r3, #88]	@ 0x58
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed7c:	4a0c      	ldr	r2, [pc, #48]	@ (800edb0 <prvInitialiseNewTask+0x14c>)
 800ed7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ed80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed82:	4a0c      	ldr	r2, [pc, #48]	@ (800edb4 <prvInitialiseNewTask+0x150>)
 800ed84:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ed86:	683a      	ldr	r2, [r7, #0]
 800ed88:	68f9      	ldr	r1, [r7, #12]
 800ed8a:	69b8      	ldr	r0, [r7, #24]
 800ed8c:	f001 fb44 	bl	8010418 <pxPortInitialiseStack>
 800ed90:	4602      	mov	r2, r0
 800ed92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ed96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d002      	beq.n	800eda2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ed9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eda0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eda2:	bf00      	nop
 800eda4:	3720      	adds	r7, #32
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	2002d844 	.word	0x2002d844
 800edb0:	2002d8ac 	.word	0x2002d8ac
 800edb4:	2002d914 	.word	0x2002d914

0800edb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800edc0:	f001 fc3c 	bl	801063c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800edc4:	4b2d      	ldr	r3, [pc, #180]	@ (800ee7c <prvAddNewTaskToReadyList+0xc4>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	3301      	adds	r3, #1
 800edca:	4a2c      	ldr	r2, [pc, #176]	@ (800ee7c <prvAddNewTaskToReadyList+0xc4>)
 800edcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800edce:	4b2c      	ldr	r3, [pc, #176]	@ (800ee80 <prvAddNewTaskToReadyList+0xc8>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d109      	bne.n	800edea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800edd6:	4a2a      	ldr	r2, [pc, #168]	@ (800ee80 <prvAddNewTaskToReadyList+0xc8>)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eddc:	4b27      	ldr	r3, [pc, #156]	@ (800ee7c <prvAddNewTaskToReadyList+0xc4>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d110      	bne.n	800ee06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ede4:	f000 fcf0 	bl	800f7c8 <prvInitialiseTaskLists>
 800ede8:	e00d      	b.n	800ee06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800edea:	4b26      	ldr	r3, [pc, #152]	@ (800ee84 <prvAddNewTaskToReadyList+0xcc>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d109      	bne.n	800ee06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800edf2:	4b23      	ldr	r3, [pc, #140]	@ (800ee80 <prvAddNewTaskToReadyList+0xc8>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d802      	bhi.n	800ee06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee00:	4a1f      	ldr	r2, [pc, #124]	@ (800ee80 <prvAddNewTaskToReadyList+0xc8>)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee06:	4b20      	ldr	r3, [pc, #128]	@ (800ee88 <prvAddNewTaskToReadyList+0xd0>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	4a1e      	ldr	r2, [pc, #120]	@ (800ee88 <prvAddNewTaskToReadyList+0xd0>)
 800ee0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee10:	4b1d      	ldr	r3, [pc, #116]	@ (800ee88 <prvAddNewTaskToReadyList+0xd0>)
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee1c:	4b1b      	ldr	r3, [pc, #108]	@ (800ee8c <prvAddNewTaskToReadyList+0xd4>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d903      	bls.n	800ee2c <prvAddNewTaskToReadyList+0x74>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee28:	4a18      	ldr	r2, [pc, #96]	@ (800ee8c <prvAddNewTaskToReadyList+0xd4>)
 800ee2a:	6013      	str	r3, [r2, #0]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee30:	4613      	mov	r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	4413      	add	r3, r2
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	4a15      	ldr	r2, [pc, #84]	@ (800ee90 <prvAddNewTaskToReadyList+0xd8>)
 800ee3a:	441a      	add	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	3304      	adds	r3, #4
 800ee40:	4619      	mov	r1, r3
 800ee42:	4610      	mov	r0, r2
 800ee44:	f7fe fc69 	bl	800d71a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee48:	f001 fc2e 	bl	80106a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ee84 <prvAddNewTaskToReadyList+0xcc>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00e      	beq.n	800ee72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee54:	4b0a      	ldr	r3, [pc, #40]	@ (800ee80 <prvAddNewTaskToReadyList+0xc8>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d207      	bcs.n	800ee72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee62:	4b0c      	ldr	r3, [pc, #48]	@ (800ee94 <prvAddNewTaskToReadyList+0xdc>)
 800ee64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee72:	bf00      	nop
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	2000ef74 	.word	0x2000ef74
 800ee80:	2000eaa0 	.word	0x2000eaa0
 800ee84:	2000ef80 	.word	0x2000ef80
 800ee88:	2000ef90 	.word	0x2000ef90
 800ee8c:	2000ef7c 	.word	0x2000ef7c
 800ee90:	2000eaa4 	.word	0x2000eaa4
 800ee94:	e000ed04 	.word	0xe000ed04

0800ee98 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800eea0:	f001 fbcc 	bl	801063c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d102      	bne.n	800eeb0 <vTaskDelete+0x18>
 800eeaa:	4b2e      	ldr	r3, [pc, #184]	@ (800ef64 <vTaskDelete+0xcc>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	e000      	b.n	800eeb2 <vTaskDelete+0x1a>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fe fc8b 	bl	800d7d4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d004      	beq.n	800eed0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	3318      	adds	r3, #24
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe fc82 	bl	800d7d4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800eed0:	4b25      	ldr	r3, [pc, #148]	@ (800ef68 <vTaskDelete+0xd0>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	3301      	adds	r3, #1
 800eed6:	4a24      	ldr	r2, [pc, #144]	@ (800ef68 <vTaskDelete+0xd0>)
 800eed8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800eeda:	4b22      	ldr	r3, [pc, #136]	@ (800ef64 <vTaskDelete+0xcc>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d10b      	bne.n	800eefc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	3304      	adds	r3, #4
 800eee8:	4619      	mov	r1, r3
 800eeea:	4820      	ldr	r0, [pc, #128]	@ (800ef6c <vTaskDelete+0xd4>)
 800eeec:	f7fe fc15 	bl	800d71a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800eef0:	4b1f      	ldr	r3, [pc, #124]	@ (800ef70 <vTaskDelete+0xd8>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	3301      	adds	r3, #1
 800eef6:	4a1e      	ldr	r2, [pc, #120]	@ (800ef70 <vTaskDelete+0xd8>)
 800eef8:	6013      	str	r3, [r2, #0]
 800eefa:	e009      	b.n	800ef10 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800eefc:	4b1d      	ldr	r3, [pc, #116]	@ (800ef74 <vTaskDelete+0xdc>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	4a1c      	ldr	r2, [pc, #112]	@ (800ef74 <vTaskDelete+0xdc>)
 800ef04:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f000 fccc 	bl	800f8a4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ef0c:	f000 fd02 	bl	800f914 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800ef10:	f001 fbca 	bl	80106a8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ef14:	4b18      	ldr	r3, [pc, #96]	@ (800ef78 <vTaskDelete+0xe0>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d01e      	beq.n	800ef5a <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 800ef1c:	4b11      	ldr	r3, [pc, #68]	@ (800ef64 <vTaskDelete+0xcc>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d119      	bne.n	800ef5a <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ef26:	4b15      	ldr	r3, [pc, #84]	@ (800ef7c <vTaskDelete+0xe4>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00d      	beq.n	800ef4a <vTaskDelete+0xb2>
	__asm volatile
 800ef2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef32:	b672      	cpsid	i
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	b662      	cpsie	i
 800ef42:	60bb      	str	r3, [r7, #8]
}
 800ef44:	bf00      	nop
 800ef46:	bf00      	nop
 800ef48:	e7fd      	b.n	800ef46 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800ef4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef80 <vTaskDelete+0xe8>)
 800ef4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef50:	601a      	str	r2, [r3, #0]
 800ef52:	f3bf 8f4f 	dsb	sy
 800ef56:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ef5a:	bf00      	nop
 800ef5c:	3710      	adds	r7, #16
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	2000eaa0 	.word	0x2000eaa0
 800ef68:	2000ef90 	.word	0x2000ef90
 800ef6c:	2000ef48 	.word	0x2000ef48
 800ef70:	2000ef5c 	.word	0x2000ef5c
 800ef74:	2000ef74 	.word	0x2000ef74
 800ef78:	2000ef80 	.word	0x2000ef80
 800ef7c:	2000ef9c 	.word	0x2000ef9c
 800ef80:	e000ed04 	.word	0xe000ed04

0800ef84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d01a      	beq.n	800efcc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef96:	4b15      	ldr	r3, [pc, #84]	@ (800efec <vTaskDelay+0x68>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00d      	beq.n	800efba <vTaskDelay+0x36>
	__asm volatile
 800ef9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa2:	b672      	cpsid	i
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	b662      	cpsie	i
 800efb2:	60bb      	str	r3, [r7, #8]
}
 800efb4:	bf00      	nop
 800efb6:	bf00      	nop
 800efb8:	e7fd      	b.n	800efb6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800efba:	f000 f88f 	bl	800f0dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800efbe:	2100      	movs	r1, #0
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 fe6d 	bl	800fca0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800efc6:	f000 f897 	bl	800f0f8 <xTaskResumeAll>
 800efca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d107      	bne.n	800efe2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800efd2:	4b07      	ldr	r3, [pc, #28]	@ (800eff0 <vTaskDelay+0x6c>)
 800efd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efd8:	601a      	str	r2, [r3, #0]
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efe2:	bf00      	nop
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2000ef9c 	.word	0x2000ef9c
 800eff0:	e000ed04 	.word	0xe000ed04

0800eff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b08a      	sub	sp, #40	@ 0x28
 800eff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800effa:	2300      	movs	r3, #0
 800effc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800effe:	2300      	movs	r3, #0
 800f000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f002:	463a      	mov	r2, r7
 800f004:	1d39      	adds	r1, r7, #4
 800f006:	f107 0308 	add.w	r3, r7, #8
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fe fb24 	bl	800d658 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f010:	6839      	ldr	r1, [r7, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	9202      	str	r2, [sp, #8]
 800f018:	9301      	str	r3, [sp, #4]
 800f01a:	2300      	movs	r3, #0
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	2300      	movs	r3, #0
 800f020:	460a      	mov	r2, r1
 800f022:	4926      	ldr	r1, [pc, #152]	@ (800f0bc <vTaskStartScheduler+0xc8>)
 800f024:	4826      	ldr	r0, [pc, #152]	@ (800f0c0 <vTaskStartScheduler+0xcc>)
 800f026:	f7ff fd71 	bl	800eb0c <xTaskCreateStatic>
 800f02a:	4603      	mov	r3, r0
 800f02c:	4a25      	ldr	r2, [pc, #148]	@ (800f0c4 <vTaskStartScheduler+0xd0>)
 800f02e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f030:	4b24      	ldr	r3, [pc, #144]	@ (800f0c4 <vTaskStartScheduler+0xd0>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f038:	2301      	movs	r3, #1
 800f03a:	617b      	str	r3, [r7, #20]
 800f03c:	e001      	b.n	800f042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f03e:	2300      	movs	r3, #0
 800f040:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	2b01      	cmp	r3, #1
 800f046:	d102      	bne.n	800f04e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f048:	f000 fe7e 	bl	800fd48 <xTimerCreateTimerTask>
 800f04c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d11d      	bne.n	800f090 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f058:	b672      	cpsid	i
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	b662      	cpsie	i
 800f068:	613b      	str	r3, [r7, #16]
}
 800f06a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f06c:	4b16      	ldr	r3, [pc, #88]	@ (800f0c8 <vTaskStartScheduler+0xd4>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3354      	adds	r3, #84	@ 0x54
 800f072:	4a16      	ldr	r2, [pc, #88]	@ (800f0cc <vTaskStartScheduler+0xd8>)
 800f074:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f076:	4b16      	ldr	r3, [pc, #88]	@ (800f0d0 <vTaskStartScheduler+0xdc>)
 800f078:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f07c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f07e:	4b15      	ldr	r3, [pc, #84]	@ (800f0d4 <vTaskStartScheduler+0xe0>)
 800f080:	2201      	movs	r2, #1
 800f082:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f084:	4b14      	ldr	r3, [pc, #80]	@ (800f0d8 <vTaskStartScheduler+0xe4>)
 800f086:	2200      	movs	r2, #0
 800f088:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f08a:	f001 fa59 	bl	8010540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f08e:	e011      	b.n	800f0b4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f096:	d10d      	bne.n	800f0b4 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f09c:	b672      	cpsid	i
 800f09e:	f383 8811 	msr	BASEPRI, r3
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	b662      	cpsie	i
 800f0ac:	60fb      	str	r3, [r7, #12]
}
 800f0ae:	bf00      	nop
 800f0b0:	bf00      	nop
 800f0b2:	e7fd      	b.n	800f0b0 <vTaskStartScheduler+0xbc>
}
 800f0b4:	bf00      	nop
 800f0b6:	3718      	adds	r7, #24
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	0802185c 	.word	0x0802185c
 800f0c0:	0800f799 	.word	0x0800f799
 800f0c4:	2000ef98 	.word	0x2000ef98
 800f0c8:	2000eaa0 	.word	0x2000eaa0
 800f0cc:	20000080 	.word	0x20000080
 800f0d0:	2000ef94 	.word	0x2000ef94
 800f0d4:	2000ef80 	.word	0x2000ef80
 800f0d8:	2000ef78 	.word	0x2000ef78

0800f0dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f0dc:	b480      	push	{r7}
 800f0de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f0e0:	4b04      	ldr	r3, [pc, #16]	@ (800f0f4 <vTaskSuspendAll+0x18>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	4a03      	ldr	r2, [pc, #12]	@ (800f0f4 <vTaskSuspendAll+0x18>)
 800f0e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f0ea:	bf00      	nop
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr
 800f0f4:	2000ef9c 	.word	0x2000ef9c

0800f0f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f0fe:	2300      	movs	r3, #0
 800f100:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f102:	2300      	movs	r3, #0
 800f104:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f106:	4b43      	ldr	r3, [pc, #268]	@ (800f214 <xTaskResumeAll+0x11c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d10d      	bne.n	800f12a <xTaskResumeAll+0x32>
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f112:	b672      	cpsid	i
 800f114:	f383 8811 	msr	BASEPRI, r3
 800f118:	f3bf 8f6f 	isb	sy
 800f11c:	f3bf 8f4f 	dsb	sy
 800f120:	b662      	cpsie	i
 800f122:	603b      	str	r3, [r7, #0]
}
 800f124:	bf00      	nop
 800f126:	bf00      	nop
 800f128:	e7fd      	b.n	800f126 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f12a:	f001 fa87 	bl	801063c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f12e:	4b39      	ldr	r3, [pc, #228]	@ (800f214 <xTaskResumeAll+0x11c>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	3b01      	subs	r3, #1
 800f134:	4a37      	ldr	r2, [pc, #220]	@ (800f214 <xTaskResumeAll+0x11c>)
 800f136:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f138:	4b36      	ldr	r3, [pc, #216]	@ (800f214 <xTaskResumeAll+0x11c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d162      	bne.n	800f206 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f140:	4b35      	ldr	r3, [pc, #212]	@ (800f218 <xTaskResumeAll+0x120>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d05e      	beq.n	800f206 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f148:	e02f      	b.n	800f1aa <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f14a:	4b34      	ldr	r3, [pc, #208]	@ (800f21c <xTaskResumeAll+0x124>)
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	3318      	adds	r3, #24
 800f156:	4618      	mov	r0, r3
 800f158:	f7fe fb3c 	bl	800d7d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3304      	adds	r3, #4
 800f160:	4618      	mov	r0, r3
 800f162:	f7fe fb37 	bl	800d7d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f16a:	4b2d      	ldr	r3, [pc, #180]	@ (800f220 <xTaskResumeAll+0x128>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d903      	bls.n	800f17a <xTaskResumeAll+0x82>
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f176:	4a2a      	ldr	r2, [pc, #168]	@ (800f220 <xTaskResumeAll+0x128>)
 800f178:	6013      	str	r3, [r2, #0]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f17e:	4613      	mov	r3, r2
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	4413      	add	r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	4a27      	ldr	r2, [pc, #156]	@ (800f224 <xTaskResumeAll+0x12c>)
 800f188:	441a      	add	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	3304      	adds	r3, #4
 800f18e:	4619      	mov	r1, r3
 800f190:	4610      	mov	r0, r2
 800f192:	f7fe fac2 	bl	800d71a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f19a:	4b23      	ldr	r3, [pc, #140]	@ (800f228 <xTaskResumeAll+0x130>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d302      	bcc.n	800f1aa <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f1a4:	4b21      	ldr	r3, [pc, #132]	@ (800f22c <xTaskResumeAll+0x134>)
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1aa:	4b1c      	ldr	r3, [pc, #112]	@ (800f21c <xTaskResumeAll+0x124>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1cb      	bne.n	800f14a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d001      	beq.n	800f1bc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f1b8:	f000 fbac 	bl	800f914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f1bc:	4b1c      	ldr	r3, [pc, #112]	@ (800f230 <xTaskResumeAll+0x138>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d010      	beq.n	800f1ea <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f1c8:	f000 f858 	bl	800f27c <xTaskIncrementTick>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d002      	beq.n	800f1d8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f1d2:	4b16      	ldr	r3, [pc, #88]	@ (800f22c <xTaskResumeAll+0x134>)
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1f1      	bne.n	800f1c8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f1e4:	4b12      	ldr	r3, [pc, #72]	@ (800f230 <xTaskResumeAll+0x138>)
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f1ea:	4b10      	ldr	r3, [pc, #64]	@ (800f22c <xTaskResumeAll+0x134>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d009      	beq.n	800f206 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800f234 <xTaskResumeAll+0x13c>)
 800f1f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	f3bf 8f4f 	dsb	sy
 800f202:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f206:	f001 fa4f 	bl	80106a8 <vPortExitCritical>

	return xAlreadyYielded;
 800f20a:	68bb      	ldr	r3, [r7, #8]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3710      	adds	r7, #16
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	2000ef9c 	.word	0x2000ef9c
 800f218:	2000ef74 	.word	0x2000ef74
 800f21c:	2000ef34 	.word	0x2000ef34
 800f220:	2000ef7c 	.word	0x2000ef7c
 800f224:	2000eaa4 	.word	0x2000eaa4
 800f228:	2000eaa0 	.word	0x2000eaa0
 800f22c:	2000ef88 	.word	0x2000ef88
 800f230:	2000ef84 	.word	0x2000ef84
 800f234:	e000ed04 	.word	0xe000ed04

0800f238 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f23e:	4b05      	ldr	r3, [pc, #20]	@ (800f254 <xTaskGetTickCount+0x1c>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f244:	687b      	ldr	r3, [r7, #4]
}
 800f246:	4618      	mov	r0, r3
 800f248:	370c      	adds	r7, #12
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	2000ef78 	.word	0x2000ef78

0800f258 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f25e:	f001 fad5 	bl	801080c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f262:	2300      	movs	r3, #0
 800f264:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f266:	4b04      	ldr	r3, [pc, #16]	@ (800f278 <xTaskGetTickCountFromISR+0x20>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f26c:	683b      	ldr	r3, [r7, #0]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	2000ef78 	.word	0x2000ef78

0800f27c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f282:	2300      	movs	r3, #0
 800f284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f286:	4b50      	ldr	r3, [pc, #320]	@ (800f3c8 <xTaskIncrementTick+0x14c>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f040 808c 	bne.w	800f3a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f290:	4b4e      	ldr	r3, [pc, #312]	@ (800f3cc <xTaskIncrementTick+0x150>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	3301      	adds	r3, #1
 800f296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f298:	4a4c      	ldr	r2, [pc, #304]	@ (800f3cc <xTaskIncrementTick+0x150>)
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d123      	bne.n	800f2ec <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f2a4:	4b4a      	ldr	r3, [pc, #296]	@ (800f3d0 <xTaskIncrementTick+0x154>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00d      	beq.n	800f2ca <xTaskIncrementTick+0x4e>
	__asm volatile
 800f2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2b2:	b672      	cpsid	i
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	b662      	cpsie	i
 800f2c2:	603b      	str	r3, [r7, #0]
}
 800f2c4:	bf00      	nop
 800f2c6:	bf00      	nop
 800f2c8:	e7fd      	b.n	800f2c6 <xTaskIncrementTick+0x4a>
 800f2ca:	4b41      	ldr	r3, [pc, #260]	@ (800f3d0 <xTaskIncrementTick+0x154>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	60fb      	str	r3, [r7, #12]
 800f2d0:	4b40      	ldr	r3, [pc, #256]	@ (800f3d4 <xTaskIncrementTick+0x158>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a3e      	ldr	r2, [pc, #248]	@ (800f3d0 <xTaskIncrementTick+0x154>)
 800f2d6:	6013      	str	r3, [r2, #0]
 800f2d8:	4a3e      	ldr	r2, [pc, #248]	@ (800f3d4 <xTaskIncrementTick+0x158>)
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6013      	str	r3, [r2, #0]
 800f2de:	4b3e      	ldr	r3, [pc, #248]	@ (800f3d8 <xTaskIncrementTick+0x15c>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	4a3c      	ldr	r2, [pc, #240]	@ (800f3d8 <xTaskIncrementTick+0x15c>)
 800f2e6:	6013      	str	r3, [r2, #0]
 800f2e8:	f000 fb14 	bl	800f914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f2ec:	4b3b      	ldr	r3, [pc, #236]	@ (800f3dc <xTaskIncrementTick+0x160>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	693a      	ldr	r2, [r7, #16]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d349      	bcc.n	800f38a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2f6:	4b36      	ldr	r3, [pc, #216]	@ (800f3d0 <xTaskIncrementTick+0x154>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d104      	bne.n	800f30a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f300:	4b36      	ldr	r3, [pc, #216]	@ (800f3dc <xTaskIncrementTick+0x160>)
 800f302:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f306:	601a      	str	r2, [r3, #0]
					break;
 800f308:	e03f      	b.n	800f38a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f30a:	4b31      	ldr	r3, [pc, #196]	@ (800f3d0 <xTaskIncrementTick+0x154>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f31a:	693a      	ldr	r2, [r7, #16]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d203      	bcs.n	800f32a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f322:	4a2e      	ldr	r2, [pc, #184]	@ (800f3dc <xTaskIncrementTick+0x160>)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f328:	e02f      	b.n	800f38a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	3304      	adds	r3, #4
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe fa50 	bl	800d7d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d004      	beq.n	800f346 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	3318      	adds	r3, #24
 800f340:	4618      	mov	r0, r3
 800f342:	f7fe fa47 	bl	800d7d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f34a:	4b25      	ldr	r3, [pc, #148]	@ (800f3e0 <xTaskIncrementTick+0x164>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d903      	bls.n	800f35a <xTaskIncrementTick+0xde>
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f356:	4a22      	ldr	r2, [pc, #136]	@ (800f3e0 <xTaskIncrementTick+0x164>)
 800f358:	6013      	str	r3, [r2, #0]
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f35e:	4613      	mov	r3, r2
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	4413      	add	r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4a1f      	ldr	r2, [pc, #124]	@ (800f3e4 <xTaskIncrementTick+0x168>)
 800f368:	441a      	add	r2, r3
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	3304      	adds	r3, #4
 800f36e:	4619      	mov	r1, r3
 800f370:	4610      	mov	r0, r2
 800f372:	f7fe f9d2 	bl	800d71a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f37a:	4b1b      	ldr	r3, [pc, #108]	@ (800f3e8 <xTaskIncrementTick+0x16c>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f380:	429a      	cmp	r2, r3
 800f382:	d3b8      	bcc.n	800f2f6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f384:	2301      	movs	r3, #1
 800f386:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f388:	e7b5      	b.n	800f2f6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f38a:	4b17      	ldr	r3, [pc, #92]	@ (800f3e8 <xTaskIncrementTick+0x16c>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f390:	4914      	ldr	r1, [pc, #80]	@ (800f3e4 <xTaskIncrementTick+0x168>)
 800f392:	4613      	mov	r3, r2
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	4413      	add	r3, r2
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	440b      	add	r3, r1
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d907      	bls.n	800f3b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	617b      	str	r3, [r7, #20]
 800f3a6:	e004      	b.n	800f3b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f3a8:	4b10      	ldr	r3, [pc, #64]	@ (800f3ec <xTaskIncrementTick+0x170>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	4a0f      	ldr	r2, [pc, #60]	@ (800f3ec <xTaskIncrementTick+0x170>)
 800f3b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f3b2:	4b0f      	ldr	r3, [pc, #60]	@ (800f3f0 <xTaskIncrementTick+0x174>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d001      	beq.n	800f3be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f3be:	697b      	ldr	r3, [r7, #20]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3718      	adds	r7, #24
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	2000ef9c 	.word	0x2000ef9c
 800f3cc:	2000ef78 	.word	0x2000ef78
 800f3d0:	2000ef2c 	.word	0x2000ef2c
 800f3d4:	2000ef30 	.word	0x2000ef30
 800f3d8:	2000ef8c 	.word	0x2000ef8c
 800f3dc:	2000ef94 	.word	0x2000ef94
 800f3e0:	2000ef7c 	.word	0x2000ef7c
 800f3e4:	2000eaa4 	.word	0x2000eaa4
 800f3e8:	2000eaa0 	.word	0x2000eaa0
 800f3ec:	2000ef84 	.word	0x2000ef84
 800f3f0:	2000ef88 	.word	0x2000ef88

0800f3f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b086      	sub	sp, #24
 800f3f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3fa:	4b3e      	ldr	r3, [pc, #248]	@ (800f4f4 <vTaskSwitchContext+0x100>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d003      	beq.n	800f40a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f402:	4b3d      	ldr	r3, [pc, #244]	@ (800f4f8 <vTaskSwitchContext+0x104>)
 800f404:	2201      	movs	r2, #1
 800f406:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f408:	e070      	b.n	800f4ec <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f40a:	4b3b      	ldr	r3, [pc, #236]	@ (800f4f8 <vTaskSwitchContext+0x104>)
 800f40c:	2200      	movs	r2, #0
 800f40e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f410:	4b3a      	ldr	r3, [pc, #232]	@ (800f4fc <vTaskSwitchContext+0x108>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f416:	613b      	str	r3, [r7, #16]
 800f418:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f41c:	60fb      	str	r3, [r7, #12]
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	429a      	cmp	r2, r3
 800f426:	d111      	bne.n	800f44c <vTaskSwitchContext+0x58>
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	3304      	adds	r3, #4
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	429a      	cmp	r2, r3
 800f432:	d10b      	bne.n	800f44c <vTaskSwitchContext+0x58>
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	3308      	adds	r3, #8
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d105      	bne.n	800f44c <vTaskSwitchContext+0x58>
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	330c      	adds	r3, #12
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d008      	beq.n	800f45e <vTaskSwitchContext+0x6a>
 800f44c:	4b2b      	ldr	r3, [pc, #172]	@ (800f4fc <vTaskSwitchContext+0x108>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	4b2a      	ldr	r3, [pc, #168]	@ (800f4fc <vTaskSwitchContext+0x108>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	3334      	adds	r3, #52	@ 0x34
 800f456:	4619      	mov	r1, r3
 800f458:	4610      	mov	r0, r2
 800f45a:	f7f1 fa47 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f45e:	4b28      	ldr	r3, [pc, #160]	@ (800f500 <vTaskSwitchContext+0x10c>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	617b      	str	r3, [r7, #20]
 800f464:	e013      	b.n	800f48e <vTaskSwitchContext+0x9a>
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10d      	bne.n	800f488 <vTaskSwitchContext+0x94>
	__asm volatile
 800f46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f470:	b672      	cpsid	i
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	b662      	cpsie	i
 800f480:	607b      	str	r3, [r7, #4]
}
 800f482:	bf00      	nop
 800f484:	bf00      	nop
 800f486:	e7fd      	b.n	800f484 <vTaskSwitchContext+0x90>
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	3b01      	subs	r3, #1
 800f48c:	617b      	str	r3, [r7, #20]
 800f48e:	491d      	ldr	r1, [pc, #116]	@ (800f504 <vTaskSwitchContext+0x110>)
 800f490:	697a      	ldr	r2, [r7, #20]
 800f492:	4613      	mov	r3, r2
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	4413      	add	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	440b      	add	r3, r1
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d0e1      	beq.n	800f466 <vTaskSwitchContext+0x72>
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	4413      	add	r3, r2
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4a15      	ldr	r2, [pc, #84]	@ (800f504 <vTaskSwitchContext+0x110>)
 800f4ae:	4413      	add	r3, r2
 800f4b0:	60bb      	str	r3, [r7, #8]
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	685a      	ldr	r2, [r3, #4]
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	605a      	str	r2, [r3, #4]
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	685a      	ldr	r2, [r3, #4]
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	3308      	adds	r3, #8
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d104      	bne.n	800f4d2 <vTaskSwitchContext+0xde>
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	685a      	ldr	r2, [r3, #4]
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	605a      	str	r2, [r3, #4]
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	68db      	ldr	r3, [r3, #12]
 800f4d8:	4a08      	ldr	r2, [pc, #32]	@ (800f4fc <vTaskSwitchContext+0x108>)
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	4a08      	ldr	r2, [pc, #32]	@ (800f500 <vTaskSwitchContext+0x10c>)
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f4e2:	4b06      	ldr	r3, [pc, #24]	@ (800f4fc <vTaskSwitchContext+0x108>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	3354      	adds	r3, #84	@ 0x54
 800f4e8:	4a07      	ldr	r2, [pc, #28]	@ (800f508 <vTaskSwitchContext+0x114>)
 800f4ea:	6013      	str	r3, [r2, #0]
}
 800f4ec:	bf00      	nop
 800f4ee:	3718      	adds	r7, #24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	2000ef9c 	.word	0x2000ef9c
 800f4f8:	2000ef88 	.word	0x2000ef88
 800f4fc:	2000eaa0 	.word	0x2000eaa0
 800f500:	2000ef7c 	.word	0x2000ef7c
 800f504:	2000eaa4 	.word	0x2000eaa4
 800f508:	20000080 	.word	0x20000080

0800f50c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d10d      	bne.n	800f538 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f520:	b672      	cpsid	i
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	b662      	cpsie	i
 800f530:	60fb      	str	r3, [r7, #12]
}
 800f532:	bf00      	nop
 800f534:	bf00      	nop
 800f536:	e7fd      	b.n	800f534 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f538:	4b07      	ldr	r3, [pc, #28]	@ (800f558 <vTaskPlaceOnEventList+0x4c>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3318      	adds	r3, #24
 800f53e:	4619      	mov	r1, r3
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f7fe f90e 	bl	800d762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f546:	2101      	movs	r1, #1
 800f548:	6838      	ldr	r0, [r7, #0]
 800f54a:	f000 fba9 	bl	800fca0 <prvAddCurrentTaskToDelayedList>
}
 800f54e:	bf00      	nop
 800f550:	3710      	adds	r7, #16
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	2000eaa0 	.word	0x2000eaa0

0800f55c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b086      	sub	sp, #24
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d10d      	bne.n	800f58a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800f56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f572:	b672      	cpsid	i
 800f574:	f383 8811 	msr	BASEPRI, r3
 800f578:	f3bf 8f6f 	isb	sy
 800f57c:	f3bf 8f4f 	dsb	sy
 800f580:	b662      	cpsie	i
 800f582:	617b      	str	r3, [r7, #20]
}
 800f584:	bf00      	nop
 800f586:	bf00      	nop
 800f588:	e7fd      	b.n	800f586 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f58a:	4b0a      	ldr	r3, [pc, #40]	@ (800f5b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3318      	adds	r3, #24
 800f590:	4619      	mov	r1, r3
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	f7fe f8c1 	bl	800d71a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d002      	beq.n	800f5a4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800f59e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f5a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f5a4:	6879      	ldr	r1, [r7, #4]
 800f5a6:	68b8      	ldr	r0, [r7, #8]
 800f5a8:	f000 fb7a 	bl	800fca0 <prvAddCurrentTaskToDelayedList>
	}
 800f5ac:	bf00      	nop
 800f5ae:	3718      	adds	r7, #24
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	2000eaa0 	.word	0x2000eaa0

0800f5b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	68db      	ldr	r3, [r3, #12]
 800f5c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10d      	bne.n	800f5ea <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d2:	b672      	cpsid	i
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	b662      	cpsie	i
 800f5e2:	60fb      	str	r3, [r7, #12]
}
 800f5e4:	bf00      	nop
 800f5e6:	bf00      	nop
 800f5e8:	e7fd      	b.n	800f5e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	3318      	adds	r3, #24
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fe f8f0 	bl	800d7d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5f4:	4b1d      	ldr	r3, [pc, #116]	@ (800f66c <xTaskRemoveFromEventList+0xb4>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d11d      	bne.n	800f638 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	3304      	adds	r3, #4
 800f600:	4618      	mov	r0, r3
 800f602:	f7fe f8e7 	bl	800d7d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f60a:	4b19      	ldr	r3, [pc, #100]	@ (800f670 <xTaskRemoveFromEventList+0xb8>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d903      	bls.n	800f61a <xTaskRemoveFromEventList+0x62>
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f616:	4a16      	ldr	r2, [pc, #88]	@ (800f670 <xTaskRemoveFromEventList+0xb8>)
 800f618:	6013      	str	r3, [r2, #0]
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f61e:	4613      	mov	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4413      	add	r3, r2
 800f624:	009b      	lsls	r3, r3, #2
 800f626:	4a13      	ldr	r2, [pc, #76]	@ (800f674 <xTaskRemoveFromEventList+0xbc>)
 800f628:	441a      	add	r2, r3
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	3304      	adds	r3, #4
 800f62e:	4619      	mov	r1, r3
 800f630:	4610      	mov	r0, r2
 800f632:	f7fe f872 	bl	800d71a <vListInsertEnd>
 800f636:	e005      	b.n	800f644 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	3318      	adds	r3, #24
 800f63c:	4619      	mov	r1, r3
 800f63e:	480e      	ldr	r0, [pc, #56]	@ (800f678 <xTaskRemoveFromEventList+0xc0>)
 800f640:	f7fe f86b 	bl	800d71a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f648:	4b0c      	ldr	r3, [pc, #48]	@ (800f67c <xTaskRemoveFromEventList+0xc4>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f64e:	429a      	cmp	r2, r3
 800f650:	d905      	bls.n	800f65e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f652:	2301      	movs	r3, #1
 800f654:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f656:	4b0a      	ldr	r3, [pc, #40]	@ (800f680 <xTaskRemoveFromEventList+0xc8>)
 800f658:	2201      	movs	r2, #1
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	e001      	b.n	800f662 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800f65e:	2300      	movs	r3, #0
 800f660:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f662:	697b      	ldr	r3, [r7, #20]
}
 800f664:	4618      	mov	r0, r3
 800f666:	3718      	adds	r7, #24
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	2000ef9c 	.word	0x2000ef9c
 800f670:	2000ef7c 	.word	0x2000ef7c
 800f674:	2000eaa4 	.word	0x2000eaa4
 800f678:	2000ef34 	.word	0x2000ef34
 800f67c:	2000eaa0 	.word	0x2000eaa0
 800f680:	2000ef88 	.word	0x2000ef88

0800f684 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f68c:	4b06      	ldr	r3, [pc, #24]	@ (800f6a8 <vTaskInternalSetTimeOutState+0x24>)
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f694:	4b05      	ldr	r3, [pc, #20]	@ (800f6ac <vTaskInternalSetTimeOutState+0x28>)
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	605a      	str	r2, [r3, #4]
}
 800f69c:	bf00      	nop
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr
 800f6a8:	2000ef8c 	.word	0x2000ef8c
 800f6ac:	2000ef78 	.word	0x2000ef78

0800f6b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b088      	sub	sp, #32
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d10d      	bne.n	800f6dc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c4:	b672      	cpsid	i
 800f6c6:	f383 8811 	msr	BASEPRI, r3
 800f6ca:	f3bf 8f6f 	isb	sy
 800f6ce:	f3bf 8f4f 	dsb	sy
 800f6d2:	b662      	cpsie	i
 800f6d4:	613b      	str	r3, [r7, #16]
}
 800f6d6:	bf00      	nop
 800f6d8:	bf00      	nop
 800f6da:	e7fd      	b.n	800f6d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10d      	bne.n	800f6fe <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6e6:	b672      	cpsid	i
 800f6e8:	f383 8811 	msr	BASEPRI, r3
 800f6ec:	f3bf 8f6f 	isb	sy
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	b662      	cpsie	i
 800f6f6:	60fb      	str	r3, [r7, #12]
}
 800f6f8:	bf00      	nop
 800f6fa:	bf00      	nop
 800f6fc:	e7fd      	b.n	800f6fa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f6fe:	f000 ff9d 	bl	801063c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f702:	4b1d      	ldr	r3, [pc, #116]	@ (800f778 <xTaskCheckForTimeOut+0xc8>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	69ba      	ldr	r2, [r7, #24]
 800f70e:	1ad3      	subs	r3, r2, r3
 800f710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f71a:	d102      	bne.n	800f722 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f71c:	2300      	movs	r3, #0
 800f71e:	61fb      	str	r3, [r7, #28]
 800f720:	e023      	b.n	800f76a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	4b15      	ldr	r3, [pc, #84]	@ (800f77c <xTaskCheckForTimeOut+0xcc>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d007      	beq.n	800f73e <xTaskCheckForTimeOut+0x8e>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	69ba      	ldr	r2, [r7, #24]
 800f734:	429a      	cmp	r2, r3
 800f736:	d302      	bcc.n	800f73e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f738:	2301      	movs	r3, #1
 800f73a:	61fb      	str	r3, [r7, #28]
 800f73c:	e015      	b.n	800f76a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	429a      	cmp	r2, r3
 800f746:	d20b      	bcs.n	800f760 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	1ad2      	subs	r2, r2, r3
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7ff ff95 	bl	800f684 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f75a:	2300      	movs	r3, #0
 800f75c:	61fb      	str	r3, [r7, #28]
 800f75e:	e004      	b.n	800f76a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	2200      	movs	r2, #0
 800f764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f766:	2301      	movs	r3, #1
 800f768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f76a:	f000 ff9d 	bl	80106a8 <vPortExitCritical>

	return xReturn;
 800f76e:	69fb      	ldr	r3, [r7, #28]
}
 800f770:	4618      	mov	r0, r3
 800f772:	3720      	adds	r7, #32
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	2000ef78 	.word	0x2000ef78
 800f77c:	2000ef8c 	.word	0x2000ef8c

0800f780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f780:	b480      	push	{r7}
 800f782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f784:	4b03      	ldr	r3, [pc, #12]	@ (800f794 <vTaskMissedYield+0x14>)
 800f786:	2201      	movs	r2, #1
 800f788:	601a      	str	r2, [r3, #0]
}
 800f78a:	bf00      	nop
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr
 800f794:	2000ef88 	.word	0x2000ef88

0800f798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f7a0:	f000 f852 	bl	800f848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f7a4:	4b06      	ldr	r3, [pc, #24]	@ (800f7c0 <prvIdleTask+0x28>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d9f9      	bls.n	800f7a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f7ac:	4b05      	ldr	r3, [pc, #20]	@ (800f7c4 <prvIdleTask+0x2c>)
 800f7ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	f3bf 8f4f 	dsb	sy
 800f7b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f7bc:	e7f0      	b.n	800f7a0 <prvIdleTask+0x8>
 800f7be:	bf00      	nop
 800f7c0:	2000eaa4 	.word	0x2000eaa4
 800f7c4:	e000ed04 	.word	0xe000ed04

0800f7c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	607b      	str	r3, [r7, #4]
 800f7d2:	e00c      	b.n	800f7ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	4413      	add	r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4a12      	ldr	r2, [pc, #72]	@ (800f828 <prvInitialiseTaskLists+0x60>)
 800f7e0:	4413      	add	r3, r2
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd ff6c 	bl	800d6c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	607b      	str	r3, [r7, #4]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b37      	cmp	r3, #55	@ 0x37
 800f7f2:	d9ef      	bls.n	800f7d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f7f4:	480d      	ldr	r0, [pc, #52]	@ (800f82c <prvInitialiseTaskLists+0x64>)
 800f7f6:	f7fd ff63 	bl	800d6c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f7fa:	480d      	ldr	r0, [pc, #52]	@ (800f830 <prvInitialiseTaskLists+0x68>)
 800f7fc:	f7fd ff60 	bl	800d6c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f800:	480c      	ldr	r0, [pc, #48]	@ (800f834 <prvInitialiseTaskLists+0x6c>)
 800f802:	f7fd ff5d 	bl	800d6c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f806:	480c      	ldr	r0, [pc, #48]	@ (800f838 <prvInitialiseTaskLists+0x70>)
 800f808:	f7fd ff5a 	bl	800d6c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f80c:	480b      	ldr	r0, [pc, #44]	@ (800f83c <prvInitialiseTaskLists+0x74>)
 800f80e:	f7fd ff57 	bl	800d6c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f812:	4b0b      	ldr	r3, [pc, #44]	@ (800f840 <prvInitialiseTaskLists+0x78>)
 800f814:	4a05      	ldr	r2, [pc, #20]	@ (800f82c <prvInitialiseTaskLists+0x64>)
 800f816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f818:	4b0a      	ldr	r3, [pc, #40]	@ (800f844 <prvInitialiseTaskLists+0x7c>)
 800f81a:	4a05      	ldr	r2, [pc, #20]	@ (800f830 <prvInitialiseTaskLists+0x68>)
 800f81c:	601a      	str	r2, [r3, #0]
}
 800f81e:	bf00      	nop
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	2000eaa4 	.word	0x2000eaa4
 800f82c:	2000ef04 	.word	0x2000ef04
 800f830:	2000ef18 	.word	0x2000ef18
 800f834:	2000ef34 	.word	0x2000ef34
 800f838:	2000ef48 	.word	0x2000ef48
 800f83c:	2000ef60 	.word	0x2000ef60
 800f840:	2000ef2c 	.word	0x2000ef2c
 800f844:	2000ef30 	.word	0x2000ef30

0800f848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f84e:	e019      	b.n	800f884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f850:	f000 fef4 	bl	801063c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f854:	4b10      	ldr	r3, [pc, #64]	@ (800f898 <prvCheckTasksWaitingTermination+0x50>)
 800f856:	68db      	ldr	r3, [r3, #12]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	3304      	adds	r3, #4
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd ffb7 	bl	800d7d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f866:	4b0d      	ldr	r3, [pc, #52]	@ (800f89c <prvCheckTasksWaitingTermination+0x54>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3b01      	subs	r3, #1
 800f86c:	4a0b      	ldr	r2, [pc, #44]	@ (800f89c <prvCheckTasksWaitingTermination+0x54>)
 800f86e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f870:	4b0b      	ldr	r3, [pc, #44]	@ (800f8a0 <prvCheckTasksWaitingTermination+0x58>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	3b01      	subs	r3, #1
 800f876:	4a0a      	ldr	r2, [pc, #40]	@ (800f8a0 <prvCheckTasksWaitingTermination+0x58>)
 800f878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f87a:	f000 ff15 	bl	80106a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 f810 	bl	800f8a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f884:	4b06      	ldr	r3, [pc, #24]	@ (800f8a0 <prvCheckTasksWaitingTermination+0x58>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1e1      	bne.n	800f850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f88c:	bf00      	nop
 800f88e:	bf00      	nop
 800f890:	3708      	adds	r7, #8
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	2000ef48 	.word	0x2000ef48
 800f89c:	2000ef74 	.word	0x2000ef74
 800f8a0:	2000ef5c 	.word	0x2000ef5c

0800f8a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3354      	adds	r3, #84	@ 0x54
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f011 f867 	bl	8020984 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d108      	bne.n	800f8d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f001 f8b9 	bl	8010a3c <vPortFree>
				vPortFree( pxTCB );
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f001 f8b6 	bl	8010a3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f8d0:	e01b      	b.n	800f90a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d103      	bne.n	800f8e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f001 f8ad 	bl	8010a3c <vPortFree>
	}
 800f8e2:	e012      	b.n	800f90a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f8ea:	2b02      	cmp	r3, #2
 800f8ec:	d00d      	beq.n	800f90a <prvDeleteTCB+0x66>
	__asm volatile
 800f8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8f2:	b672      	cpsid	i
 800f8f4:	f383 8811 	msr	BASEPRI, r3
 800f8f8:	f3bf 8f6f 	isb	sy
 800f8fc:	f3bf 8f4f 	dsb	sy
 800f900:	b662      	cpsie	i
 800f902:	60fb      	str	r3, [r7, #12]
}
 800f904:	bf00      	nop
 800f906:	bf00      	nop
 800f908:	e7fd      	b.n	800f906 <prvDeleteTCB+0x62>
	}
 800f90a:	bf00      	nop
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
	...

0800f914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f91a:	4b0c      	ldr	r3, [pc, #48]	@ (800f94c <prvResetNextTaskUnblockTime+0x38>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d104      	bne.n	800f92e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f924:	4b0a      	ldr	r3, [pc, #40]	@ (800f950 <prvResetNextTaskUnblockTime+0x3c>)
 800f926:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f92a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f92c:	e008      	b.n	800f940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f92e:	4b07      	ldr	r3, [pc, #28]	@ (800f94c <prvResetNextTaskUnblockTime+0x38>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	4a04      	ldr	r2, [pc, #16]	@ (800f950 <prvResetNextTaskUnblockTime+0x3c>)
 800f93e:	6013      	str	r3, [r2, #0]
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	2000ef2c 	.word	0x2000ef2c
 800f950:	2000ef94 	.word	0x2000ef94

0800f954 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f95a:	4b05      	ldr	r3, [pc, #20]	@ (800f970 <xTaskGetCurrentTaskHandle+0x1c>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f960:	687b      	ldr	r3, [r7, #4]
	}
 800f962:	4618      	mov	r0, r3
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
 800f96e:	bf00      	nop
 800f970:	2000eaa0 	.word	0x2000eaa0

0800f974 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f97a:	4b0b      	ldr	r3, [pc, #44]	@ (800f9a8 <xTaskGetSchedulerState+0x34>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d102      	bne.n	800f988 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f982:	2301      	movs	r3, #1
 800f984:	607b      	str	r3, [r7, #4]
 800f986:	e008      	b.n	800f99a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f988:	4b08      	ldr	r3, [pc, #32]	@ (800f9ac <xTaskGetSchedulerState+0x38>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d102      	bne.n	800f996 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f990:	2302      	movs	r3, #2
 800f992:	607b      	str	r3, [r7, #4]
 800f994:	e001      	b.n	800f99a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f996:	2300      	movs	r3, #0
 800f998:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f99a:	687b      	ldr	r3, [r7, #4]
	}
 800f99c:	4618      	mov	r0, r3
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr
 800f9a8:	2000ef80 	.word	0x2000ef80
 800f9ac:	2000ef9c 	.word	0x2000ef9c

0800f9b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d051      	beq.n	800fa6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9ca:	4b2a      	ldr	r3, [pc, #168]	@ (800fa74 <xTaskPriorityInherit+0xc4>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d241      	bcs.n	800fa58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	699b      	ldr	r3, [r3, #24]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	db06      	blt.n	800f9ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9dc:	4b25      	ldr	r3, [pc, #148]	@ (800fa74 <xTaskPriorityInherit+0xc4>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	6959      	ldr	r1, [r3, #20]
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	4413      	add	r3, r2
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4a1f      	ldr	r2, [pc, #124]	@ (800fa78 <xTaskPriorityInherit+0xc8>)
 800f9fc:	4413      	add	r3, r2
 800f9fe:	4299      	cmp	r1, r3
 800fa00:	d122      	bne.n	800fa48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	3304      	adds	r3, #4
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fd fee4 	bl	800d7d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa0c:	4b19      	ldr	r3, [pc, #100]	@ (800fa74 <xTaskPriorityInherit+0xc4>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa1a:	4b18      	ldr	r3, [pc, #96]	@ (800fa7c <xTaskPriorityInherit+0xcc>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d903      	bls.n	800fa2a <xTaskPriorityInherit+0x7a>
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa26:	4a15      	ldr	r2, [pc, #84]	@ (800fa7c <xTaskPriorityInherit+0xcc>)
 800fa28:	6013      	str	r3, [r2, #0]
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa2e:	4613      	mov	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4413      	add	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	4a10      	ldr	r2, [pc, #64]	@ (800fa78 <xTaskPriorityInherit+0xc8>)
 800fa38:	441a      	add	r2, r3
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	3304      	adds	r3, #4
 800fa3e:	4619      	mov	r1, r3
 800fa40:	4610      	mov	r0, r2
 800fa42:	f7fd fe6a 	bl	800d71a <vListInsertEnd>
 800fa46:	e004      	b.n	800fa52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa48:	4b0a      	ldr	r3, [pc, #40]	@ (800fa74 <xTaskPriorityInherit+0xc4>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fa52:	2301      	movs	r3, #1
 800fa54:	60fb      	str	r3, [r7, #12]
 800fa56:	e008      	b.n	800fa6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa5c:	4b05      	ldr	r3, [pc, #20]	@ (800fa74 <xTaskPriorityInherit+0xc4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa62:	429a      	cmp	r2, r3
 800fa64:	d201      	bcs.n	800fa6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fa66:	2301      	movs	r3, #1
 800fa68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
	}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	2000eaa0 	.word	0x2000eaa0
 800fa78:	2000eaa4 	.word	0x2000eaa4
 800fa7c:	2000ef7c 	.word	0x2000ef7c

0800fa80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d05c      	beq.n	800fb50 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fa96:	4b31      	ldr	r3, [pc, #196]	@ (800fb5c <xTaskPriorityDisinherit+0xdc>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	693a      	ldr	r2, [r7, #16]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d00d      	beq.n	800fabc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800faa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa4:	b672      	cpsid	i
 800faa6:	f383 8811 	msr	BASEPRI, r3
 800faaa:	f3bf 8f6f 	isb	sy
 800faae:	f3bf 8f4f 	dsb	sy
 800fab2:	b662      	cpsie	i
 800fab4:	60fb      	str	r3, [r7, #12]
}
 800fab6:	bf00      	nop
 800fab8:	bf00      	nop
 800faba:	e7fd      	b.n	800fab8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d10d      	bne.n	800fae0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800fac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac8:	b672      	cpsid	i
 800faca:	f383 8811 	msr	BASEPRI, r3
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	f3bf 8f4f 	dsb	sy
 800fad6:	b662      	cpsie	i
 800fad8:	60bb      	str	r3, [r7, #8]
}
 800fada:	bf00      	nop
 800fadc:	bf00      	nop
 800fade:	e7fd      	b.n	800fadc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fae4:	1e5a      	subs	r2, r3, #1
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d02c      	beq.n	800fb50 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d128      	bne.n	800fb50 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	3304      	adds	r3, #4
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fd fe66 	bl	800d7d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb20:	4b0f      	ldr	r3, [pc, #60]	@ (800fb60 <xTaskPriorityDisinherit+0xe0>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d903      	bls.n	800fb30 <xTaskPriorityDisinherit+0xb0>
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb2c:	4a0c      	ldr	r2, [pc, #48]	@ (800fb60 <xTaskPriorityDisinherit+0xe0>)
 800fb2e:	6013      	str	r3, [r2, #0]
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb34:	4613      	mov	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	4413      	add	r3, r2
 800fb3a:	009b      	lsls	r3, r3, #2
 800fb3c:	4a09      	ldr	r2, [pc, #36]	@ (800fb64 <xTaskPriorityDisinherit+0xe4>)
 800fb3e:	441a      	add	r2, r3
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	3304      	adds	r3, #4
 800fb44:	4619      	mov	r1, r3
 800fb46:	4610      	mov	r0, r2
 800fb48:	f7fd fde7 	bl	800d71a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb50:	697b      	ldr	r3, [r7, #20]
	}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3718      	adds	r7, #24
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	2000eaa0 	.word	0x2000eaa0
 800fb60:	2000ef7c 	.word	0x2000ef7c
 800fb64:	2000eaa4 	.word	0x2000eaa4

0800fb68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b088      	sub	sp, #32
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fb76:	2301      	movs	r3, #1
 800fb78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d070      	beq.n	800fc62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10d      	bne.n	800fba4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800fb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb8c:	b672      	cpsid	i
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	b662      	cpsie	i
 800fb9c:	60fb      	str	r3, [r7, #12]
}
 800fb9e:	bf00      	nop
 800fba0:	bf00      	nop
 800fba2:	e7fd      	b.n	800fba0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fba4:	69bb      	ldr	r3, [r7, #24]
 800fba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fba8:	683a      	ldr	r2, [r7, #0]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d902      	bls.n	800fbb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	61fb      	str	r3, [r7, #28]
 800fbb2:	e002      	b.n	800fbba <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fbb8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbbe:	69fa      	ldr	r2, [r7, #28]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d04e      	beq.n	800fc62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbc8:	697a      	ldr	r2, [r7, #20]
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d149      	bne.n	800fc62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fbce:	4b27      	ldr	r3, [pc, #156]	@ (800fc6c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	69ba      	ldr	r2, [r7, #24]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d10d      	bne.n	800fbf4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800fbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbdc:	b672      	cpsid	i
 800fbde:	f383 8811 	msr	BASEPRI, r3
 800fbe2:	f3bf 8f6f 	isb	sy
 800fbe6:	f3bf 8f4f 	dsb	sy
 800fbea:	b662      	cpsie	i
 800fbec:	60bb      	str	r3, [r7, #8]
}
 800fbee:	bf00      	nop
 800fbf0:	bf00      	nop
 800fbf2:	e7fd      	b.n	800fbf0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbf8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	69fa      	ldr	r2, [r7, #28]
 800fbfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	699b      	ldr	r3, [r3, #24]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	db04      	blt.n	800fc12 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	6959      	ldr	r1, [r3, #20]
 800fc16:	693a      	ldr	r2, [r7, #16]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4a13      	ldr	r2, [pc, #76]	@ (800fc70 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fc22:	4413      	add	r3, r2
 800fc24:	4299      	cmp	r1, r3
 800fc26:	d11c      	bne.n	800fc62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	3304      	adds	r3, #4
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7fd fdd1 	bl	800d7d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc36:	4b0f      	ldr	r3, [pc, #60]	@ (800fc74 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d903      	bls.n	800fc46 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc42:	4a0c      	ldr	r2, [pc, #48]	@ (800fc74 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fc44:	6013      	str	r3, [r2, #0]
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	4413      	add	r3, r2
 800fc50:	009b      	lsls	r3, r3, #2
 800fc52:	4a07      	ldr	r2, [pc, #28]	@ (800fc70 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fc54:	441a      	add	r2, r3
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	3304      	adds	r3, #4
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	4610      	mov	r0, r2
 800fc5e:	f7fd fd5c 	bl	800d71a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc62:	bf00      	nop
 800fc64:	3720      	adds	r7, #32
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	2000eaa0 	.word	0x2000eaa0
 800fc70:	2000eaa4 	.word	0x2000eaa4
 800fc74:	2000ef7c 	.word	0x2000ef7c

0800fc78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fc78:	b480      	push	{r7}
 800fc7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fc7c:	4b07      	ldr	r3, [pc, #28]	@ (800fc9c <pvTaskIncrementMutexHeldCount+0x24>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d004      	beq.n	800fc8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fc84:	4b05      	ldr	r3, [pc, #20]	@ (800fc9c <pvTaskIncrementMutexHeldCount+0x24>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc8a:	3201      	adds	r2, #1
 800fc8c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fc8e:	4b03      	ldr	r3, [pc, #12]	@ (800fc9c <pvTaskIncrementMutexHeldCount+0x24>)
 800fc90:	681b      	ldr	r3, [r3, #0]
	}
 800fc92:	4618      	mov	r0, r3
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	2000eaa0 	.word	0x2000eaa0

0800fca0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fcaa:	4b21      	ldr	r3, [pc, #132]	@ (800fd30 <prvAddCurrentTaskToDelayedList+0x90>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcb0:	4b20      	ldr	r3, [pc, #128]	@ (800fd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fd fd8c 	bl	800d7d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fcc2:	d10a      	bne.n	800fcda <prvAddCurrentTaskToDelayedList+0x3a>
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d007      	beq.n	800fcda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcca:	4b1a      	ldr	r3, [pc, #104]	@ (800fd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	3304      	adds	r3, #4
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4819      	ldr	r0, [pc, #100]	@ (800fd38 <prvAddCurrentTaskToDelayedList+0x98>)
 800fcd4:	f7fd fd21 	bl	800d71a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fcd8:	e026      	b.n	800fd28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4413      	add	r3, r2
 800fce0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fce2:	4b14      	ldr	r3, [pc, #80]	@ (800fd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	68ba      	ldr	r2, [r7, #8]
 800fce8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fcea:	68ba      	ldr	r2, [r7, #8]
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d209      	bcs.n	800fd06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fcf2:	4b12      	ldr	r3, [pc, #72]	@ (800fd3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	4b0f      	ldr	r3, [pc, #60]	@ (800fd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	3304      	adds	r3, #4
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	4610      	mov	r0, r2
 800fd00:	f7fd fd2f 	bl	800d762 <vListInsert>
}
 800fd04:	e010      	b.n	800fd28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd06:	4b0e      	ldr	r3, [pc, #56]	@ (800fd40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	4b0a      	ldr	r3, [pc, #40]	@ (800fd34 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	4619      	mov	r1, r3
 800fd12:	4610      	mov	r0, r2
 800fd14:	f7fd fd25 	bl	800d762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd18:	4b0a      	ldr	r3, [pc, #40]	@ (800fd44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	68ba      	ldr	r2, [r7, #8]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d202      	bcs.n	800fd28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fd22:	4a08      	ldr	r2, [pc, #32]	@ (800fd44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	6013      	str	r3, [r2, #0]
}
 800fd28:	bf00      	nop
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	2000ef78 	.word	0x2000ef78
 800fd34:	2000eaa0 	.word	0x2000eaa0
 800fd38:	2000ef60 	.word	0x2000ef60
 800fd3c:	2000ef30 	.word	0x2000ef30
 800fd40:	2000ef2c 	.word	0x2000ef2c
 800fd44:	2000ef94 	.word	0x2000ef94

0800fd48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b08a      	sub	sp, #40	@ 0x28
 800fd4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fd52:	f000 fb21 	bl	8010398 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fd56:	4b1e      	ldr	r3, [pc, #120]	@ (800fdd0 <xTimerCreateTimerTask+0x88>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d021      	beq.n	800fda2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fd62:	2300      	movs	r3, #0
 800fd64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fd66:	1d3a      	adds	r2, r7, #4
 800fd68:	f107 0108 	add.w	r1, r7, #8
 800fd6c:	f107 030c 	add.w	r3, r7, #12
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fd fc8b 	bl	800d68c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fd76:	6879      	ldr	r1, [r7, #4]
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	9202      	str	r2, [sp, #8]
 800fd7e:	9301      	str	r3, [sp, #4]
 800fd80:	2302      	movs	r3, #2
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	2300      	movs	r3, #0
 800fd86:	460a      	mov	r2, r1
 800fd88:	4912      	ldr	r1, [pc, #72]	@ (800fdd4 <xTimerCreateTimerTask+0x8c>)
 800fd8a:	4813      	ldr	r0, [pc, #76]	@ (800fdd8 <xTimerCreateTimerTask+0x90>)
 800fd8c:	f7fe febe 	bl	800eb0c <xTaskCreateStatic>
 800fd90:	4603      	mov	r3, r0
 800fd92:	4a12      	ldr	r2, [pc, #72]	@ (800fddc <xTimerCreateTimerTask+0x94>)
 800fd94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fd96:	4b11      	ldr	r3, [pc, #68]	@ (800fddc <xTimerCreateTimerTask+0x94>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fd9e:	2301      	movs	r3, #1
 800fda0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d10d      	bne.n	800fdc4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800fda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdac:	b672      	cpsid	i
 800fdae:	f383 8811 	msr	BASEPRI, r3
 800fdb2:	f3bf 8f6f 	isb	sy
 800fdb6:	f3bf 8f4f 	dsb	sy
 800fdba:	b662      	cpsie	i
 800fdbc:	613b      	str	r3, [r7, #16]
}
 800fdbe:	bf00      	nop
 800fdc0:	bf00      	nop
 800fdc2:	e7fd      	b.n	800fdc0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fdc4:	697b      	ldr	r3, [r7, #20]
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3718      	adds	r7, #24
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	2000efd0 	.word	0x2000efd0
 800fdd4:	08021864 	.word	0x08021864
 800fdd8:	0800ff21 	.word	0x0800ff21
 800fddc:	2000efd4 	.word	0x2000efd4

0800fde0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b08a      	sub	sp, #40	@ 0x28
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
 800fdec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10d      	bne.n	800fe14 <xTimerGenericCommand+0x34>
	__asm volatile
 800fdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdfc:	b672      	cpsid	i
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	b662      	cpsie	i
 800fe0c:	623b      	str	r3, [r7, #32]
}
 800fe0e:	bf00      	nop
 800fe10:	bf00      	nop
 800fe12:	e7fd      	b.n	800fe10 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fe14:	4b19      	ldr	r3, [pc, #100]	@ (800fe7c <xTimerGenericCommand+0x9c>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d02a      	beq.n	800fe72 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	2b05      	cmp	r3, #5
 800fe2c:	dc18      	bgt.n	800fe60 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fe2e:	f7ff fda1 	bl	800f974 <xTaskGetSchedulerState>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d109      	bne.n	800fe4c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fe38:	4b10      	ldr	r3, [pc, #64]	@ (800fe7c <xTimerGenericCommand+0x9c>)
 800fe3a:	6818      	ldr	r0, [r3, #0]
 800fe3c:	f107 0110 	add.w	r1, r7, #16
 800fe40:	2300      	movs	r3, #0
 800fe42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe44:	f7fd ff7c 	bl	800dd40 <xQueueGenericSend>
 800fe48:	6278      	str	r0, [r7, #36]	@ 0x24
 800fe4a:	e012      	b.n	800fe72 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fe4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fe7c <xTimerGenericCommand+0x9c>)
 800fe4e:	6818      	ldr	r0, [r3, #0]
 800fe50:	f107 0110 	add.w	r1, r7, #16
 800fe54:	2300      	movs	r3, #0
 800fe56:	2200      	movs	r2, #0
 800fe58:	f7fd ff72 	bl	800dd40 <xQueueGenericSend>
 800fe5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800fe5e:	e008      	b.n	800fe72 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fe60:	4b06      	ldr	r3, [pc, #24]	@ (800fe7c <xTimerGenericCommand+0x9c>)
 800fe62:	6818      	ldr	r0, [r3, #0]
 800fe64:	f107 0110 	add.w	r1, r7, #16
 800fe68:	2300      	movs	r3, #0
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	f7fe f872 	bl	800df54 <xQueueGenericSendFromISR>
 800fe70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fe72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3728      	adds	r7, #40	@ 0x28
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	2000efd0 	.word	0x2000efd0

0800fe80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b088      	sub	sp, #32
 800fe84:	af02      	add	r7, sp, #8
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe8a:	4b24      	ldr	r3, [pc, #144]	@ (800ff1c <prvProcessExpiredTimer+0x9c>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	3304      	adds	r3, #4
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fd fc9b 	bl	800d7d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fea4:	f003 0304 	and.w	r3, r3, #4
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d025      	beq.n	800fef8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	699a      	ldr	r2, [r3, #24]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	18d1      	adds	r1, r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	683a      	ldr	r2, [r7, #0]
 800feb8:	6978      	ldr	r0, [r7, #20]
 800feba:	f000 f8d7 	bl	801006c <prvInsertTimerInActiveList>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d022      	beq.n	800ff0a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fec4:	2300      	movs	r3, #0
 800fec6:	9300      	str	r3, [sp, #0]
 800fec8:	2300      	movs	r3, #0
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	2100      	movs	r1, #0
 800fece:	6978      	ldr	r0, [r7, #20]
 800fed0:	f7ff ff86 	bl	800fde0 <xTimerGenericCommand>
 800fed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d116      	bne.n	800ff0a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800fedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee0:	b672      	cpsid	i
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	b662      	cpsie	i
 800fef0:	60fb      	str	r3, [r7, #12]
}
 800fef2:	bf00      	nop
 800fef4:	bf00      	nop
 800fef6:	e7fd      	b.n	800fef4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fefe:	f023 0301 	bic.w	r3, r3, #1
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	6a1b      	ldr	r3, [r3, #32]
 800ff0e:	6978      	ldr	r0, [r7, #20]
 800ff10:	4798      	blx	r3
}
 800ff12:	bf00      	nop
 800ff14:	3718      	adds	r7, #24
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	2000efc8 	.word	0x2000efc8

0800ff20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff28:	f107 0308 	add.w	r3, r7, #8
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f000 f859 	bl	800ffe4 <prvGetNextExpireTime>
 800ff32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	4619      	mov	r1, r3
 800ff38:	68f8      	ldr	r0, [r7, #12]
 800ff3a:	f000 f805 	bl	800ff48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ff3e:	f000 f8d7 	bl	80100f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ff42:	bf00      	nop
 800ff44:	e7f0      	b.n	800ff28 <prvTimerTask+0x8>
	...

0800ff48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ff52:	f7ff f8c3 	bl	800f0dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff56:	f107 0308 	add.w	r3, r7, #8
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 f866 	bl	801002c <prvSampleTimeNow>
 800ff60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d130      	bne.n	800ffca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d10a      	bne.n	800ff84 <prvProcessTimerOrBlockTask+0x3c>
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d806      	bhi.n	800ff84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ff76:	f7ff f8bf 	bl	800f0f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ff7a:	68f9      	ldr	r1, [r7, #12]
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f7ff ff7f 	bl	800fe80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ff82:	e024      	b.n	800ffce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d008      	beq.n	800ff9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ff8a:	4b13      	ldr	r3, [pc, #76]	@ (800ffd8 <prvProcessTimerOrBlockTask+0x90>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d101      	bne.n	800ff98 <prvProcessTimerOrBlockTask+0x50>
 800ff94:	2301      	movs	r3, #1
 800ff96:	e000      	b.n	800ff9a <prvProcessTimerOrBlockTask+0x52>
 800ff98:	2300      	movs	r3, #0
 800ff9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ff9c:	4b0f      	ldr	r3, [pc, #60]	@ (800ffdc <prvProcessTimerOrBlockTask+0x94>)
 800ff9e:	6818      	ldr	r0, [r3, #0]
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	f7fe fd7b 	bl	800eaa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ffae:	f7ff f8a3 	bl	800f0f8 <xTaskResumeAll>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10a      	bne.n	800ffce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ffb8:	4b09      	ldr	r3, [pc, #36]	@ (800ffe0 <prvProcessTimerOrBlockTask+0x98>)
 800ffba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffbe:	601a      	str	r2, [r3, #0]
 800ffc0:	f3bf 8f4f 	dsb	sy
 800ffc4:	f3bf 8f6f 	isb	sy
}
 800ffc8:	e001      	b.n	800ffce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ffca:	f7ff f895 	bl	800f0f8 <xTaskResumeAll>
}
 800ffce:	bf00      	nop
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	2000efcc 	.word	0x2000efcc
 800ffdc:	2000efd0 	.word	0x2000efd0
 800ffe0:	e000ed04 	.word	0xe000ed04

0800ffe4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b085      	sub	sp, #20
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ffec:	4b0e      	ldr	r3, [pc, #56]	@ (8010028 <prvGetNextExpireTime+0x44>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d101      	bne.n	800fffa <prvGetNextExpireTime+0x16>
 800fff6:	2201      	movs	r2, #1
 800fff8:	e000      	b.n	800fffc <prvGetNextExpireTime+0x18>
 800fffa:	2200      	movs	r2, #0
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d105      	bne.n	8010014 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010008:	4b07      	ldr	r3, [pc, #28]	@ (8010028 <prvGetNextExpireTime+0x44>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	68db      	ldr	r3, [r3, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	60fb      	str	r3, [r7, #12]
 8010012:	e001      	b.n	8010018 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010014:	2300      	movs	r3, #0
 8010016:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010018:	68fb      	ldr	r3, [r7, #12]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	2000efc8 	.word	0x2000efc8

0801002c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010034:	f7ff f900 	bl	800f238 <xTaskGetTickCount>
 8010038:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801003a:	4b0b      	ldr	r3, [pc, #44]	@ (8010068 <prvSampleTimeNow+0x3c>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	68fa      	ldr	r2, [r7, #12]
 8010040:	429a      	cmp	r2, r3
 8010042:	d205      	bcs.n	8010050 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010044:	f000 f940 	bl	80102c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2201      	movs	r2, #1
 801004c:	601a      	str	r2, [r3, #0]
 801004e:	e002      	b.n	8010056 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010056:	4a04      	ldr	r2, [pc, #16]	@ (8010068 <prvSampleTimeNow+0x3c>)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801005c:	68fb      	ldr	r3, [r7, #12]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	2000efd8 	.word	0x2000efd8

0801006c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b086      	sub	sp, #24
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	607a      	str	r2, [r7, #4]
 8010078:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801007a:	2300      	movs	r3, #0
 801007c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	68ba      	ldr	r2, [r7, #8]
 8010082:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	68fa      	ldr	r2, [r7, #12]
 8010088:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801008a:	68ba      	ldr	r2, [r7, #8]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	429a      	cmp	r2, r3
 8010090:	d812      	bhi.n	80100b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	1ad2      	subs	r2, r2, r3
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	699b      	ldr	r3, [r3, #24]
 801009c:	429a      	cmp	r2, r3
 801009e:	d302      	bcc.n	80100a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80100a0:	2301      	movs	r3, #1
 80100a2:	617b      	str	r3, [r7, #20]
 80100a4:	e01b      	b.n	80100de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80100a6:	4b10      	ldr	r3, [pc, #64]	@ (80100e8 <prvInsertTimerInActiveList+0x7c>)
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	3304      	adds	r3, #4
 80100ae:	4619      	mov	r1, r3
 80100b0:	4610      	mov	r0, r2
 80100b2:	f7fd fb56 	bl	800d762 <vListInsert>
 80100b6:	e012      	b.n	80100de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d206      	bcs.n	80100ce <prvInsertTimerInActiveList+0x62>
 80100c0:	68ba      	ldr	r2, [r7, #8]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d302      	bcc.n	80100ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80100c8:	2301      	movs	r3, #1
 80100ca:	617b      	str	r3, [r7, #20]
 80100cc:	e007      	b.n	80100de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80100ce:	4b07      	ldr	r3, [pc, #28]	@ (80100ec <prvInsertTimerInActiveList+0x80>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	3304      	adds	r3, #4
 80100d6:	4619      	mov	r1, r3
 80100d8:	4610      	mov	r0, r2
 80100da:	f7fd fb42 	bl	800d762 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80100de:	697b      	ldr	r3, [r7, #20]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3718      	adds	r7, #24
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	2000efcc 	.word	0x2000efcc
 80100ec:	2000efc8 	.word	0x2000efc8

080100f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08e      	sub	sp, #56	@ 0x38
 80100f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80100f6:	e0d4      	b.n	80102a2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	da1b      	bge.n	8010136 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80100fe:	1d3b      	adds	r3, r7, #4
 8010100:	3304      	adds	r3, #4
 8010102:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010106:	2b00      	cmp	r3, #0
 8010108:	d10d      	bne.n	8010126 <prvProcessReceivedCommands+0x36>
	__asm volatile
 801010a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801010e:	b672      	cpsid	i
 8010110:	f383 8811 	msr	BASEPRI, r3
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	f3bf 8f4f 	dsb	sy
 801011c:	b662      	cpsie	i
 801011e:	61fb      	str	r3, [r7, #28]
}
 8010120:	bf00      	nop
 8010122:	bf00      	nop
 8010124:	e7fd      	b.n	8010122 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801012c:	6850      	ldr	r0, [r2, #4]
 801012e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010130:	6892      	ldr	r2, [r2, #8]
 8010132:	4611      	mov	r1, r2
 8010134:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	f2c0 80b2 	blt.w	80102a2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010144:	695b      	ldr	r3, [r3, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d004      	beq.n	8010154 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801014a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801014c:	3304      	adds	r3, #4
 801014e:	4618      	mov	r0, r3
 8010150:	f7fd fb40 	bl	800d7d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010154:	463b      	mov	r3, r7
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff ff68 	bl	801002c <prvSampleTimeNow>
 801015c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b09      	cmp	r3, #9
 8010162:	f200 809b 	bhi.w	801029c <prvProcessReceivedCommands+0x1ac>
 8010166:	a201      	add	r2, pc, #4	@ (adr r2, 801016c <prvProcessReceivedCommands+0x7c>)
 8010168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801016c:	08010195 	.word	0x08010195
 8010170:	08010195 	.word	0x08010195
 8010174:	08010195 	.word	0x08010195
 8010178:	0801020f 	.word	0x0801020f
 801017c:	08010223 	.word	0x08010223
 8010180:	08010273 	.word	0x08010273
 8010184:	08010195 	.word	0x08010195
 8010188:	08010195 	.word	0x08010195
 801018c:	0801020f 	.word	0x0801020f
 8010190:	08010223 	.word	0x08010223
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801019a:	f043 0301 	orr.w	r3, r3, #1
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80101a6:	68ba      	ldr	r2, [r7, #8]
 80101a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101aa:	699b      	ldr	r3, [r3, #24]
 80101ac:	18d1      	adds	r1, r2, r3
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101b4:	f7ff ff5a 	bl	801006c <prvInsertTimerInActiveList>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d070      	beq.n	80102a0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80101be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c0:	6a1b      	ldr	r3, [r3, #32]
 80101c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80101c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d065      	beq.n	80102a0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d8:	699b      	ldr	r3, [r3, #24]
 80101da:	441a      	add	r2, r3
 80101dc:	2300      	movs	r3, #0
 80101de:	9300      	str	r3, [sp, #0]
 80101e0:	2300      	movs	r3, #0
 80101e2:	2100      	movs	r1, #0
 80101e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101e6:	f7ff fdfb 	bl	800fde0 <xTimerGenericCommand>
 80101ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80101ec:	6a3b      	ldr	r3, [r7, #32]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d156      	bne.n	80102a0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80101f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101f6:	b672      	cpsid	i
 80101f8:	f383 8811 	msr	BASEPRI, r3
 80101fc:	f3bf 8f6f 	isb	sy
 8010200:	f3bf 8f4f 	dsb	sy
 8010204:	b662      	cpsie	i
 8010206:	61bb      	str	r3, [r7, #24]
}
 8010208:	bf00      	nop
 801020a:	bf00      	nop
 801020c:	e7fd      	b.n	801020a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801020e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010214:	f023 0301 	bic.w	r3, r3, #1
 8010218:	b2da      	uxtb	r2, r3
 801021a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801021c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010220:	e03f      	b.n	80102a2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010228:	f043 0301 	orr.w	r3, r3, #1
 801022c:	b2da      	uxtb	r2, r3
 801022e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010234:	68ba      	ldr	r2, [r7, #8]
 8010236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010238:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801023a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801023c:	699b      	ldr	r3, [r3, #24]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d10d      	bne.n	801025e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8010242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010246:	b672      	cpsid	i
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	b662      	cpsie	i
 8010256:	617b      	str	r3, [r7, #20]
}
 8010258:	bf00      	nop
 801025a:	bf00      	nop
 801025c:	e7fd      	b.n	801025a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801025e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010260:	699a      	ldr	r2, [r3, #24]
 8010262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010264:	18d1      	adds	r1, r2, r3
 8010266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801026a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801026c:	f7ff fefe 	bl	801006c <prvInsertTimerInActiveList>
					break;
 8010270:	e017      	b.n	80102a2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010278:	f003 0302 	and.w	r3, r3, #2
 801027c:	2b00      	cmp	r3, #0
 801027e:	d103      	bne.n	8010288 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8010280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010282:	f000 fbdb 	bl	8010a3c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010286:	e00c      	b.n	80102a2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801028a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801028e:	f023 0301 	bic.w	r3, r3, #1
 8010292:	b2da      	uxtb	r2, r3
 8010294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801029a:	e002      	b.n	80102a2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 801029c:	bf00      	nop
 801029e:	e000      	b.n	80102a2 <prvProcessReceivedCommands+0x1b2>
					break;
 80102a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80102a2:	4b08      	ldr	r3, [pc, #32]	@ (80102c4 <prvProcessReceivedCommands+0x1d4>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	1d39      	adds	r1, r7, #4
 80102a8:	2200      	movs	r2, #0
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fd ff8e 	bl	800e1cc <xQueueReceive>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f47f af20 	bne.w	80100f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80102b8:	bf00      	nop
 80102ba:	bf00      	nop
 80102bc:	3730      	adds	r7, #48	@ 0x30
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	2000efd0 	.word	0x2000efd0

080102c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b088      	sub	sp, #32
 80102cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102ce:	e04b      	b.n	8010368 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102d0:	4b2f      	ldr	r3, [pc, #188]	@ (8010390 <prvSwitchTimerLists+0xc8>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	68db      	ldr	r3, [r3, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102da:	4b2d      	ldr	r3, [pc, #180]	@ (8010390 <prvSwitchTimerLists+0xc8>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	3304      	adds	r3, #4
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fd fa73 	bl	800d7d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	6a1b      	ldr	r3, [r3, #32]
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102fc:	f003 0304 	and.w	r3, r3, #4
 8010300:	2b00      	cmp	r3, #0
 8010302:	d031      	beq.n	8010368 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	699b      	ldr	r3, [r3, #24]
 8010308:	693a      	ldr	r2, [r7, #16]
 801030a:	4413      	add	r3, r2
 801030c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	429a      	cmp	r2, r3
 8010314:	d90e      	bls.n	8010334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	68ba      	ldr	r2, [r7, #8]
 801031a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010322:	4b1b      	ldr	r3, [pc, #108]	@ (8010390 <prvSwitchTimerLists+0xc8>)
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	3304      	adds	r3, #4
 801032a:	4619      	mov	r1, r3
 801032c:	4610      	mov	r0, r2
 801032e:	f7fd fa18 	bl	800d762 <vListInsert>
 8010332:	e019      	b.n	8010368 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010334:	2300      	movs	r3, #0
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	2300      	movs	r3, #0
 801033a:	693a      	ldr	r2, [r7, #16]
 801033c:	2100      	movs	r1, #0
 801033e:	68f8      	ldr	r0, [r7, #12]
 8010340:	f7ff fd4e 	bl	800fde0 <xTimerGenericCommand>
 8010344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d10d      	bne.n	8010368 <prvSwitchTimerLists+0xa0>
	__asm volatile
 801034c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010350:	b672      	cpsid	i
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	b662      	cpsie	i
 8010360:	603b      	str	r3, [r7, #0]
}
 8010362:	bf00      	nop
 8010364:	bf00      	nop
 8010366:	e7fd      	b.n	8010364 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010368:	4b09      	ldr	r3, [pc, #36]	@ (8010390 <prvSwitchTimerLists+0xc8>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1ae      	bne.n	80102d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010372:	4b07      	ldr	r3, [pc, #28]	@ (8010390 <prvSwitchTimerLists+0xc8>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010378:	4b06      	ldr	r3, [pc, #24]	@ (8010394 <prvSwitchTimerLists+0xcc>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	4a04      	ldr	r2, [pc, #16]	@ (8010390 <prvSwitchTimerLists+0xc8>)
 801037e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010380:	4a04      	ldr	r2, [pc, #16]	@ (8010394 <prvSwitchTimerLists+0xcc>)
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	6013      	str	r3, [r2, #0]
}
 8010386:	bf00      	nop
 8010388:	3718      	adds	r7, #24
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	2000efc8 	.word	0x2000efc8
 8010394:	2000efcc 	.word	0x2000efcc

08010398 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801039e:	f000 f94d 	bl	801063c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80103a2:	4b15      	ldr	r3, [pc, #84]	@ (80103f8 <prvCheckForValidListAndQueue+0x60>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d120      	bne.n	80103ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80103aa:	4814      	ldr	r0, [pc, #80]	@ (80103fc <prvCheckForValidListAndQueue+0x64>)
 80103ac:	f7fd f988 	bl	800d6c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80103b0:	4813      	ldr	r0, [pc, #76]	@ (8010400 <prvCheckForValidListAndQueue+0x68>)
 80103b2:	f7fd f985 	bl	800d6c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80103b6:	4b13      	ldr	r3, [pc, #76]	@ (8010404 <prvCheckForValidListAndQueue+0x6c>)
 80103b8:	4a10      	ldr	r2, [pc, #64]	@ (80103fc <prvCheckForValidListAndQueue+0x64>)
 80103ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80103bc:	4b12      	ldr	r3, [pc, #72]	@ (8010408 <prvCheckForValidListAndQueue+0x70>)
 80103be:	4a10      	ldr	r2, [pc, #64]	@ (8010400 <prvCheckForValidListAndQueue+0x68>)
 80103c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80103c2:	2300      	movs	r3, #0
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	4b11      	ldr	r3, [pc, #68]	@ (801040c <prvCheckForValidListAndQueue+0x74>)
 80103c8:	4a11      	ldr	r2, [pc, #68]	@ (8010410 <prvCheckForValidListAndQueue+0x78>)
 80103ca:	2110      	movs	r1, #16
 80103cc:	200a      	movs	r0, #10
 80103ce:	f7fd fa97 	bl	800d900 <xQueueGenericCreateStatic>
 80103d2:	4603      	mov	r3, r0
 80103d4:	4a08      	ldr	r2, [pc, #32]	@ (80103f8 <prvCheckForValidListAndQueue+0x60>)
 80103d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80103d8:	4b07      	ldr	r3, [pc, #28]	@ (80103f8 <prvCheckForValidListAndQueue+0x60>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d005      	beq.n	80103ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80103e0:	4b05      	ldr	r3, [pc, #20]	@ (80103f8 <prvCheckForValidListAndQueue+0x60>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	490b      	ldr	r1, [pc, #44]	@ (8010414 <prvCheckForValidListAndQueue+0x7c>)
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fe fb08 	bl	800e9fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80103ec:	f000 f95c 	bl	80106a8 <vPortExitCritical>
}
 80103f0:	bf00      	nop
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	2000efd0 	.word	0x2000efd0
 80103fc:	2000efa0 	.word	0x2000efa0
 8010400:	2000efb4 	.word	0x2000efb4
 8010404:	2000efc8 	.word	0x2000efc8
 8010408:	2000efcc 	.word	0x2000efcc
 801040c:	2000f07c 	.word	0x2000f07c
 8010410:	2000efdc 	.word	0x2000efdc
 8010414:	0802186c 	.word	0x0802186c

08010418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	3b04      	subs	r3, #4
 8010428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	3b04      	subs	r3, #4
 8010436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	f023 0201 	bic.w	r2, r3, #1
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	3b04      	subs	r3, #4
 8010446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010448:	4a0c      	ldr	r2, [pc, #48]	@ (801047c <pxPortInitialiseStack+0x64>)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	3b14      	subs	r3, #20
 8010452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	3b04      	subs	r3, #4
 801045e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f06f 0202 	mvn.w	r2, #2
 8010466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	3b20      	subs	r3, #32
 801046c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801046e:	68fb      	ldr	r3, [r7, #12]
}
 8010470:	4618      	mov	r0, r3
 8010472:	3714      	adds	r7, #20
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr
 801047c:	08010481 	.word	0x08010481

08010480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010480:	b480      	push	{r7}
 8010482:	b085      	sub	sp, #20
 8010484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010486:	2300      	movs	r3, #0
 8010488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801048a:	4b15      	ldr	r3, [pc, #84]	@ (80104e0 <prvTaskExitError+0x60>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010492:	d00d      	beq.n	80104b0 <prvTaskExitError+0x30>
	__asm volatile
 8010494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010498:	b672      	cpsid	i
 801049a:	f383 8811 	msr	BASEPRI, r3
 801049e:	f3bf 8f6f 	isb	sy
 80104a2:	f3bf 8f4f 	dsb	sy
 80104a6:	b662      	cpsie	i
 80104a8:	60fb      	str	r3, [r7, #12]
}
 80104aa:	bf00      	nop
 80104ac:	bf00      	nop
 80104ae:	e7fd      	b.n	80104ac <prvTaskExitError+0x2c>
	__asm volatile
 80104b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104b4:	b672      	cpsid	i
 80104b6:	f383 8811 	msr	BASEPRI, r3
 80104ba:	f3bf 8f6f 	isb	sy
 80104be:	f3bf 8f4f 	dsb	sy
 80104c2:	b662      	cpsie	i
 80104c4:	60bb      	str	r3, [r7, #8]
}
 80104c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80104c8:	bf00      	nop
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d0fc      	beq.n	80104ca <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80104d0:	bf00      	nop
 80104d2:	bf00      	nop
 80104d4:	3714      	adds	r7, #20
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop
 80104e0:	20000020 	.word	0x20000020
	...

080104f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80104f0:	4b07      	ldr	r3, [pc, #28]	@ (8010510 <pxCurrentTCBConst2>)
 80104f2:	6819      	ldr	r1, [r3, #0]
 80104f4:	6808      	ldr	r0, [r1, #0]
 80104f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fa:	f380 8809 	msr	PSP, r0
 80104fe:	f3bf 8f6f 	isb	sy
 8010502:	f04f 0000 	mov.w	r0, #0
 8010506:	f380 8811 	msr	BASEPRI, r0
 801050a:	4770      	bx	lr
 801050c:	f3af 8000 	nop.w

08010510 <pxCurrentTCBConst2>:
 8010510:	2000eaa0 	.word	0x2000eaa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010514:	bf00      	nop
 8010516:	bf00      	nop

08010518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010518:	4808      	ldr	r0, [pc, #32]	@ (801053c <prvPortStartFirstTask+0x24>)
 801051a:	6800      	ldr	r0, [r0, #0]
 801051c:	6800      	ldr	r0, [r0, #0]
 801051e:	f380 8808 	msr	MSP, r0
 8010522:	f04f 0000 	mov.w	r0, #0
 8010526:	f380 8814 	msr	CONTROL, r0
 801052a:	b662      	cpsie	i
 801052c:	b661      	cpsie	f
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	df00      	svc	0
 8010538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801053a:	bf00      	nop
 801053c:	e000ed08 	.word	0xe000ed08

08010540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010546:	4b37      	ldr	r3, [pc, #220]	@ (8010624 <xPortStartScheduler+0xe4>)
 8010548:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	b2db      	uxtb	r3, r3
 8010550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	22ff      	movs	r2, #255	@ 0xff
 8010556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	b2db      	uxtb	r3, r3
 801055e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010560:	78fb      	ldrb	r3, [r7, #3]
 8010562:	b2db      	uxtb	r3, r3
 8010564:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010568:	b2da      	uxtb	r2, r3
 801056a:	4b2f      	ldr	r3, [pc, #188]	@ (8010628 <xPortStartScheduler+0xe8>)
 801056c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801056e:	4b2f      	ldr	r3, [pc, #188]	@ (801062c <xPortStartScheduler+0xec>)
 8010570:	2207      	movs	r2, #7
 8010572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010574:	e009      	b.n	801058a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010576:	4b2d      	ldr	r3, [pc, #180]	@ (801062c <xPortStartScheduler+0xec>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	3b01      	subs	r3, #1
 801057c:	4a2b      	ldr	r2, [pc, #172]	@ (801062c <xPortStartScheduler+0xec>)
 801057e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010580:	78fb      	ldrb	r3, [r7, #3]
 8010582:	b2db      	uxtb	r3, r3
 8010584:	005b      	lsls	r3, r3, #1
 8010586:	b2db      	uxtb	r3, r3
 8010588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801058a:	78fb      	ldrb	r3, [r7, #3]
 801058c:	b2db      	uxtb	r3, r3
 801058e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010592:	2b80      	cmp	r3, #128	@ 0x80
 8010594:	d0ef      	beq.n	8010576 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010596:	4b25      	ldr	r3, [pc, #148]	@ (801062c <xPortStartScheduler+0xec>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f1c3 0307 	rsb	r3, r3, #7
 801059e:	2b04      	cmp	r3, #4
 80105a0:	d00d      	beq.n	80105be <xPortStartScheduler+0x7e>
	__asm volatile
 80105a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105a6:	b672      	cpsid	i
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	b662      	cpsie	i
 80105b6:	60bb      	str	r3, [r7, #8]
}
 80105b8:	bf00      	nop
 80105ba:	bf00      	nop
 80105bc:	e7fd      	b.n	80105ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80105be:	4b1b      	ldr	r3, [pc, #108]	@ (801062c <xPortStartScheduler+0xec>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	021b      	lsls	r3, r3, #8
 80105c4:	4a19      	ldr	r2, [pc, #100]	@ (801062c <xPortStartScheduler+0xec>)
 80105c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80105c8:	4b18      	ldr	r3, [pc, #96]	@ (801062c <xPortStartScheduler+0xec>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80105d0:	4a16      	ldr	r2, [pc, #88]	@ (801062c <xPortStartScheduler+0xec>)
 80105d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	b2da      	uxtb	r2, r3
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80105dc:	4b14      	ldr	r3, [pc, #80]	@ (8010630 <xPortStartScheduler+0xf0>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a13      	ldr	r2, [pc, #76]	@ (8010630 <xPortStartScheduler+0xf0>)
 80105e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80105e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80105e8:	4b11      	ldr	r3, [pc, #68]	@ (8010630 <xPortStartScheduler+0xf0>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a10      	ldr	r2, [pc, #64]	@ (8010630 <xPortStartScheduler+0xf0>)
 80105ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80105f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80105f4:	f000 f8dc 	bl	80107b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80105f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010634 <xPortStartScheduler+0xf4>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80105fe:	f000 f8fb 	bl	80107f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010602:	4b0d      	ldr	r3, [pc, #52]	@ (8010638 <xPortStartScheduler+0xf8>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a0c      	ldr	r2, [pc, #48]	@ (8010638 <xPortStartScheduler+0xf8>)
 8010608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801060c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801060e:	f7ff ff83 	bl	8010518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010612:	f7fe feef 	bl	800f3f4 <vTaskSwitchContext>
	prvTaskExitError();
 8010616:	f7ff ff33 	bl	8010480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801061a:	2300      	movs	r3, #0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	e000e400 	.word	0xe000e400
 8010628:	2000f0cc 	.word	0x2000f0cc
 801062c:	2000f0d0 	.word	0x2000f0d0
 8010630:	e000ed20 	.word	0xe000ed20
 8010634:	20000020 	.word	0x20000020
 8010638:	e000ef34 	.word	0xe000ef34

0801063c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
	__asm volatile
 8010642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010646:	b672      	cpsid	i
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	b662      	cpsie	i
 8010656:	607b      	str	r3, [r7, #4]
}
 8010658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801065a:	4b11      	ldr	r3, [pc, #68]	@ (80106a0 <vPortEnterCritical+0x64>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	3301      	adds	r3, #1
 8010660:	4a0f      	ldr	r2, [pc, #60]	@ (80106a0 <vPortEnterCritical+0x64>)
 8010662:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010664:	4b0e      	ldr	r3, [pc, #56]	@ (80106a0 <vPortEnterCritical+0x64>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d112      	bne.n	8010692 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801066c:	4b0d      	ldr	r3, [pc, #52]	@ (80106a4 <vPortEnterCritical+0x68>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	b2db      	uxtb	r3, r3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00d      	beq.n	8010692 <vPortEnterCritical+0x56>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801067a:	b672      	cpsid	i
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	b662      	cpsie	i
 801068a:	603b      	str	r3, [r7, #0]
}
 801068c:	bf00      	nop
 801068e:	bf00      	nop
 8010690:	e7fd      	b.n	801068e <vPortEnterCritical+0x52>
	}
}
 8010692:	bf00      	nop
 8010694:	370c      	adds	r7, #12
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr
 801069e:	bf00      	nop
 80106a0:	20000020 	.word	0x20000020
 80106a4:	e000ed04 	.word	0xe000ed04

080106a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80106ae:	4b13      	ldr	r3, [pc, #76]	@ (80106fc <vPortExitCritical+0x54>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d10d      	bne.n	80106d2 <vPortExitCritical+0x2a>
	__asm volatile
 80106b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ba:	b672      	cpsid	i
 80106bc:	f383 8811 	msr	BASEPRI, r3
 80106c0:	f3bf 8f6f 	isb	sy
 80106c4:	f3bf 8f4f 	dsb	sy
 80106c8:	b662      	cpsie	i
 80106ca:	607b      	str	r3, [r7, #4]
}
 80106cc:	bf00      	nop
 80106ce:	bf00      	nop
 80106d0:	e7fd      	b.n	80106ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80106d2:	4b0a      	ldr	r3, [pc, #40]	@ (80106fc <vPortExitCritical+0x54>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	3b01      	subs	r3, #1
 80106d8:	4a08      	ldr	r2, [pc, #32]	@ (80106fc <vPortExitCritical+0x54>)
 80106da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80106dc:	4b07      	ldr	r3, [pc, #28]	@ (80106fc <vPortExitCritical+0x54>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d105      	bne.n	80106f0 <vPortExitCritical+0x48>
 80106e4:	2300      	movs	r3, #0
 80106e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	f383 8811 	msr	BASEPRI, r3
}
 80106ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr
 80106fc:	20000020 	.word	0x20000020

08010700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010700:	f3ef 8009 	mrs	r0, PSP
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	4b15      	ldr	r3, [pc, #84]	@ (8010760 <pxCurrentTCBConst>)
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	f01e 0f10 	tst.w	lr, #16
 8010710:	bf08      	it	eq
 8010712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071a:	6010      	str	r0, [r2, #0]
 801071c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010724:	b672      	cpsid	i
 8010726:	f380 8811 	msr	BASEPRI, r0
 801072a:	f3bf 8f4f 	dsb	sy
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	b662      	cpsie	i
 8010734:	f7fe fe5e 	bl	800f3f4 <vTaskSwitchContext>
 8010738:	f04f 0000 	mov.w	r0, #0
 801073c:	f380 8811 	msr	BASEPRI, r0
 8010740:	bc09      	pop	{r0, r3}
 8010742:	6819      	ldr	r1, [r3, #0]
 8010744:	6808      	ldr	r0, [r1, #0]
 8010746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074a:	f01e 0f10 	tst.w	lr, #16
 801074e:	bf08      	it	eq
 8010750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010754:	f380 8809 	msr	PSP, r0
 8010758:	f3bf 8f6f 	isb	sy
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop

08010760 <pxCurrentTCBConst>:
 8010760:	2000eaa0 	.word	0x2000eaa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010764:	bf00      	nop
 8010766:	bf00      	nop

08010768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
	__asm volatile
 801076e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010772:	b672      	cpsid	i
 8010774:	f383 8811 	msr	BASEPRI, r3
 8010778:	f3bf 8f6f 	isb	sy
 801077c:	f3bf 8f4f 	dsb	sy
 8010780:	b662      	cpsie	i
 8010782:	607b      	str	r3, [r7, #4]
}
 8010784:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010786:	f7fe fd79 	bl	800f27c <xTaskIncrementTick>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d003      	beq.n	8010798 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010790:	4b06      	ldr	r3, [pc, #24]	@ (80107ac <SysTick_Handler+0x44>)
 8010792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010796:	601a      	str	r2, [r3, #0]
 8010798:	2300      	movs	r3, #0
 801079a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	f383 8811 	msr	BASEPRI, r3
}
 80107a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80107a4:	bf00      	nop
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	e000ed04 	.word	0xe000ed04

080107b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80107b0:	b480      	push	{r7}
 80107b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80107b4:	4b0b      	ldr	r3, [pc, #44]	@ (80107e4 <vPortSetupTimerInterrupt+0x34>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107ba:	4b0b      	ldr	r3, [pc, #44]	@ (80107e8 <vPortSetupTimerInterrupt+0x38>)
 80107bc:	2200      	movs	r2, #0
 80107be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107c0:	4b0a      	ldr	r3, [pc, #40]	@ (80107ec <vPortSetupTimerInterrupt+0x3c>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4a0a      	ldr	r2, [pc, #40]	@ (80107f0 <vPortSetupTimerInterrupt+0x40>)
 80107c6:	fba2 2303 	umull	r2, r3, r2, r3
 80107ca:	099b      	lsrs	r3, r3, #6
 80107cc:	4a09      	ldr	r2, [pc, #36]	@ (80107f4 <vPortSetupTimerInterrupt+0x44>)
 80107ce:	3b01      	subs	r3, #1
 80107d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80107d2:	4b04      	ldr	r3, [pc, #16]	@ (80107e4 <vPortSetupTimerInterrupt+0x34>)
 80107d4:	2207      	movs	r2, #7
 80107d6:	601a      	str	r2, [r3, #0]
}
 80107d8:	bf00      	nop
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop
 80107e4:	e000e010 	.word	0xe000e010
 80107e8:	e000e018 	.word	0xe000e018
 80107ec:	20000000 	.word	0x20000000
 80107f0:	10624dd3 	.word	0x10624dd3
 80107f4:	e000e014 	.word	0xe000e014

080107f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80107f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010808 <vPortEnableVFP+0x10>
 80107fc:	6801      	ldr	r1, [r0, #0]
 80107fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010802:	6001      	str	r1, [r0, #0]
 8010804:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010806:	bf00      	nop
 8010808:	e000ed88 	.word	0xe000ed88

0801080c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010812:	f3ef 8305 	mrs	r3, IPSR
 8010816:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2b0f      	cmp	r3, #15
 801081c:	d917      	bls.n	801084e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801081e:	4a1a      	ldr	r2, [pc, #104]	@ (8010888 <vPortValidateInterruptPriority+0x7c>)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	4413      	add	r3, r2
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010828:	4b18      	ldr	r3, [pc, #96]	@ (801088c <vPortValidateInterruptPriority+0x80>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	7afa      	ldrb	r2, [r7, #11]
 801082e:	429a      	cmp	r2, r3
 8010830:	d20d      	bcs.n	801084e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010836:	b672      	cpsid	i
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	b662      	cpsie	i
 8010846:	607b      	str	r3, [r7, #4]
}
 8010848:	bf00      	nop
 801084a:	bf00      	nop
 801084c:	e7fd      	b.n	801084a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801084e:	4b10      	ldr	r3, [pc, #64]	@ (8010890 <vPortValidateInterruptPriority+0x84>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010856:	4b0f      	ldr	r3, [pc, #60]	@ (8010894 <vPortValidateInterruptPriority+0x88>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	429a      	cmp	r2, r3
 801085c:	d90d      	bls.n	801087a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801085e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010862:	b672      	cpsid	i
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	b662      	cpsie	i
 8010872:	603b      	str	r3, [r7, #0]
}
 8010874:	bf00      	nop
 8010876:	bf00      	nop
 8010878:	e7fd      	b.n	8010876 <vPortValidateInterruptPriority+0x6a>
	}
 801087a:	bf00      	nop
 801087c:	3714      	adds	r7, #20
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop
 8010888:	e000e3f0 	.word	0xe000e3f0
 801088c:	2000f0cc 	.word	0x2000f0cc
 8010890:	e000ed0c 	.word	0xe000ed0c
 8010894:	2000f0d0 	.word	0x2000f0d0

08010898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b08a      	sub	sp, #40	@ 0x28
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80108a0:	2300      	movs	r3, #0
 80108a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80108a4:	f7fe fc1a 	bl	800f0dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80108a8:	4b5f      	ldr	r3, [pc, #380]	@ (8010a28 <pvPortMalloc+0x190>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d101      	bne.n	80108b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80108b0:	f000 f924 	bl	8010afc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80108b4:	4b5d      	ldr	r3, [pc, #372]	@ (8010a2c <pvPortMalloc+0x194>)
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	4013      	ands	r3, r2
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f040 8094 	bne.w	80109ea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d020      	beq.n	801090a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80108c8:	2208      	movs	r2, #8
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4413      	add	r3, r2
 80108ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f003 0307 	and.w	r3, r3, #7
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d017      	beq.n	801090a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f023 0307 	bic.w	r3, r3, #7
 80108e0:	3308      	adds	r3, #8
 80108e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f003 0307 	and.w	r3, r3, #7
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00d      	beq.n	801090a <pvPortMalloc+0x72>
	__asm volatile
 80108ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f2:	b672      	cpsid	i
 80108f4:	f383 8811 	msr	BASEPRI, r3
 80108f8:	f3bf 8f6f 	isb	sy
 80108fc:	f3bf 8f4f 	dsb	sy
 8010900:	b662      	cpsie	i
 8010902:	617b      	str	r3, [r7, #20]
}
 8010904:	bf00      	nop
 8010906:	bf00      	nop
 8010908:	e7fd      	b.n	8010906 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d06c      	beq.n	80109ea <pvPortMalloc+0x152>
 8010910:	4b47      	ldr	r3, [pc, #284]	@ (8010a30 <pvPortMalloc+0x198>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	687a      	ldr	r2, [r7, #4]
 8010916:	429a      	cmp	r2, r3
 8010918:	d867      	bhi.n	80109ea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801091a:	4b46      	ldr	r3, [pc, #280]	@ (8010a34 <pvPortMalloc+0x19c>)
 801091c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801091e:	4b45      	ldr	r3, [pc, #276]	@ (8010a34 <pvPortMalloc+0x19c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010924:	e004      	b.n	8010930 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	429a      	cmp	r2, r3
 8010938:	d903      	bls.n	8010942 <pvPortMalloc+0xaa>
 801093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1f1      	bne.n	8010926 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010942:	4b39      	ldr	r3, [pc, #228]	@ (8010a28 <pvPortMalloc+0x190>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010948:	429a      	cmp	r2, r3
 801094a:	d04e      	beq.n	80109ea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801094c:	6a3b      	ldr	r3, [r7, #32]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2208      	movs	r2, #8
 8010952:	4413      	add	r3, r2
 8010954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	6a3b      	ldr	r3, [r7, #32]
 801095c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010960:	685a      	ldr	r2, [r3, #4]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	1ad2      	subs	r2, r2, r3
 8010966:	2308      	movs	r3, #8
 8010968:	005b      	lsls	r3, r3, #1
 801096a:	429a      	cmp	r2, r3
 801096c:	d922      	bls.n	80109b4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801096e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4413      	add	r3, r2
 8010974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	f003 0307 	and.w	r3, r3, #7
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00d      	beq.n	801099c <pvPortMalloc+0x104>
	__asm volatile
 8010980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010984:	b672      	cpsid	i
 8010986:	f383 8811 	msr	BASEPRI, r3
 801098a:	f3bf 8f6f 	isb	sy
 801098e:	f3bf 8f4f 	dsb	sy
 8010992:	b662      	cpsie	i
 8010994:	613b      	str	r3, [r7, #16]
}
 8010996:	bf00      	nop
 8010998:	bf00      	nop
 801099a:	e7fd      	b.n	8010998 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801099c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801099e:	685a      	ldr	r2, [r3, #4]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	1ad2      	subs	r2, r2, r3
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80109a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80109ae:	69b8      	ldr	r0, [r7, #24]
 80109b0:	f000 f906 	bl	8010bc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80109b4:	4b1e      	ldr	r3, [pc, #120]	@ (8010a30 <pvPortMalloc+0x198>)
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	4a1c      	ldr	r2, [pc, #112]	@ (8010a30 <pvPortMalloc+0x198>)
 80109c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80109c2:	4b1b      	ldr	r3, [pc, #108]	@ (8010a30 <pvPortMalloc+0x198>)
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	4b1c      	ldr	r3, [pc, #112]	@ (8010a38 <pvPortMalloc+0x1a0>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d203      	bcs.n	80109d6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80109ce:	4b18      	ldr	r3, [pc, #96]	@ (8010a30 <pvPortMalloc+0x198>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4a19      	ldr	r2, [pc, #100]	@ (8010a38 <pvPortMalloc+0x1a0>)
 80109d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80109d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d8:	685a      	ldr	r2, [r3, #4]
 80109da:	4b14      	ldr	r3, [pc, #80]	@ (8010a2c <pvPortMalloc+0x194>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	431a      	orrs	r2, r3
 80109e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80109e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e6:	2200      	movs	r2, #0
 80109e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80109ea:	f7fe fb85 	bl	800f0f8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80109ee:	69fb      	ldr	r3, [r7, #28]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d101      	bne.n	80109f8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80109f4:	f7ef ff8a 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	f003 0307 	and.w	r3, r3, #7
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d00d      	beq.n	8010a1e <pvPortMalloc+0x186>
	__asm volatile
 8010a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a06:	b672      	cpsid	i
 8010a08:	f383 8811 	msr	BASEPRI, r3
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	b662      	cpsie	i
 8010a16:	60fb      	str	r3, [r7, #12]
}
 8010a18:	bf00      	nop
 8010a1a:	bf00      	nop
 8010a1c:	e7fd      	b.n	8010a1a <pvPortMalloc+0x182>
	return pvReturn;
 8010a1e:	69fb      	ldr	r3, [r7, #28]
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3728      	adds	r7, #40	@ 0x28
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	200270dc 	.word	0x200270dc
 8010a2c:	200270e8 	.word	0x200270e8
 8010a30:	200270e0 	.word	0x200270e0
 8010a34:	200270d4 	.word	0x200270d4
 8010a38:	200270e4 	.word	0x200270e4

08010a3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d04e      	beq.n	8010aec <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a4e:	2308      	movs	r3, #8
 8010a50:	425b      	negs	r3, r3
 8010a52:	697a      	ldr	r2, [r7, #20]
 8010a54:	4413      	add	r3, r2
 8010a56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	685a      	ldr	r2, [r3, #4]
 8010a60:	4b24      	ldr	r3, [pc, #144]	@ (8010af4 <vPortFree+0xb8>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4013      	ands	r3, r2
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d10d      	bne.n	8010a86 <vPortFree+0x4a>
	__asm volatile
 8010a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a6e:	b672      	cpsid	i
 8010a70:	f383 8811 	msr	BASEPRI, r3
 8010a74:	f3bf 8f6f 	isb	sy
 8010a78:	f3bf 8f4f 	dsb	sy
 8010a7c:	b662      	cpsie	i
 8010a7e:	60fb      	str	r3, [r7, #12]
}
 8010a80:	bf00      	nop
 8010a82:	bf00      	nop
 8010a84:	e7fd      	b.n	8010a82 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00d      	beq.n	8010aaa <vPortFree+0x6e>
	__asm volatile
 8010a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a92:	b672      	cpsid	i
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	b662      	cpsie	i
 8010aa2:	60bb      	str	r3, [r7, #8]
}
 8010aa4:	bf00      	nop
 8010aa6:	bf00      	nop
 8010aa8:	e7fd      	b.n	8010aa6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	685a      	ldr	r2, [r3, #4]
 8010aae:	4b11      	ldr	r3, [pc, #68]	@ (8010af4 <vPortFree+0xb8>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4013      	ands	r3, r2
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d019      	beq.n	8010aec <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d115      	bne.n	8010aec <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	685a      	ldr	r2, [r3, #4]
 8010ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8010af4 <vPortFree+0xb8>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	43db      	mvns	r3, r3
 8010aca:	401a      	ands	r2, r3
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ad0:	f7fe fb04 	bl	800f0dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	685a      	ldr	r2, [r3, #4]
 8010ad8:	4b07      	ldr	r3, [pc, #28]	@ (8010af8 <vPortFree+0xbc>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4413      	add	r3, r2
 8010ade:	4a06      	ldr	r2, [pc, #24]	@ (8010af8 <vPortFree+0xbc>)
 8010ae0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010ae2:	6938      	ldr	r0, [r7, #16]
 8010ae4:	f000 f86c 	bl	8010bc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010ae8:	f7fe fb06 	bl	800f0f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010aec:	bf00      	nop
 8010aee:	3718      	adds	r7, #24
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	200270e8 	.word	0x200270e8
 8010af8:	200270e0 	.word	0x200270e0

08010afc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010afc:	b480      	push	{r7}
 8010afe:	b085      	sub	sp, #20
 8010b00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b02:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8010b06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b08:	4b27      	ldr	r3, [pc, #156]	@ (8010ba8 <prvHeapInit+0xac>)
 8010b0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f003 0307 	and.w	r3, r3, #7
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d00c      	beq.n	8010b30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	3307      	adds	r3, #7
 8010b1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f023 0307 	bic.w	r3, r3, #7
 8010b22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b24:	68ba      	ldr	r2, [r7, #8]
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8010ba8 <prvHeapInit+0xac>)
 8010b2c:	4413      	add	r3, r2
 8010b2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b34:	4a1d      	ldr	r2, [pc, #116]	@ (8010bac <prvHeapInit+0xb0>)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8010bac <prvHeapInit+0xb0>)
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68ba      	ldr	r2, [r7, #8]
 8010b44:	4413      	add	r3, r2
 8010b46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b48:	2208      	movs	r2, #8
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	1a9b      	subs	r3, r3, r2
 8010b4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	f023 0307 	bic.w	r3, r3, #7
 8010b56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	4a15      	ldr	r2, [pc, #84]	@ (8010bb0 <prvHeapInit+0xb4>)
 8010b5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010b5e:	4b14      	ldr	r3, [pc, #80]	@ (8010bb0 <prvHeapInit+0xb4>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2200      	movs	r2, #0
 8010b64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010b66:	4b12      	ldr	r3, [pc, #72]	@ (8010bb0 <prvHeapInit+0xb4>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	1ad2      	subs	r2, r2, r3
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8010bb0 <prvHeapInit+0xb4>)
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	4a0a      	ldr	r2, [pc, #40]	@ (8010bb4 <prvHeapInit+0xb8>)
 8010b8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	4a09      	ldr	r2, [pc, #36]	@ (8010bb8 <prvHeapInit+0xbc>)
 8010b92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010b94:	4b09      	ldr	r3, [pc, #36]	@ (8010bbc <prvHeapInit+0xc0>)
 8010b96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010b9a:	601a      	str	r2, [r3, #0]
}
 8010b9c:	bf00      	nop
 8010b9e:	3714      	adds	r7, #20
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr
 8010ba8:	2000f0d4 	.word	0x2000f0d4
 8010bac:	200270d4 	.word	0x200270d4
 8010bb0:	200270dc 	.word	0x200270dc
 8010bb4:	200270e4 	.word	0x200270e4
 8010bb8:	200270e0 	.word	0x200270e0
 8010bbc:	200270e8 	.word	0x200270e8

08010bc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010bc8:	4b28      	ldr	r3, [pc, #160]	@ (8010c6c <prvInsertBlockIntoFreeList+0xac>)
 8010bca:	60fb      	str	r3, [r7, #12]
 8010bcc:	e002      	b.n	8010bd4 <prvInsertBlockIntoFreeList+0x14>
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	60fb      	str	r3, [r7, #12]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d8f7      	bhi.n	8010bce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	68ba      	ldr	r2, [r7, #8]
 8010be8:	4413      	add	r3, r2
 8010bea:	687a      	ldr	r2, [r7, #4]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d108      	bne.n	8010c02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	685a      	ldr	r2, [r3, #4]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	441a      	add	r2, r3
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	68ba      	ldr	r2, [r7, #8]
 8010c0c:	441a      	add	r2, r3
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d118      	bne.n	8010c48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	4b15      	ldr	r3, [pc, #84]	@ (8010c70 <prvInsertBlockIntoFreeList+0xb0>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d00d      	beq.n	8010c3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	685a      	ldr	r2, [r3, #4]
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	441a      	add	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	601a      	str	r2, [r3, #0]
 8010c3c:	e008      	b.n	8010c50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8010c70 <prvInsertBlockIntoFreeList+0xb0>)
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	601a      	str	r2, [r3, #0]
 8010c46:	e003      	b.n	8010c50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d002      	beq.n	8010c5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c5e:	bf00      	nop
 8010c60:	3714      	adds	r7, #20
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	200270d4 	.word	0x200270d4
 8010c70:	200270dc 	.word	0x200270dc

08010c74 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	22fa      	movs	r2, #250	@ 0xfa
 8010c82:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	330c      	adds	r3, #12
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	6839      	ldr	r1, [r7, #0]
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f002 f816 	bl	8012cc0 <tcpip_send_msg_wait_sem>
 8010c94:	4603      	mov	r3, r0
 8010c96:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d103      	bne.n	8010ca8 <netconn_apimsg+0x34>
    return apimsg->err;
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010ca6:	e001      	b.n	8010cac <netconn_apimsg+0x38>
  }
  return err;
 8010ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3710      	adds	r7, #16
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b08c      	sub	sp, #48	@ 0x30
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	4603      	mov	r3, r0
 8010cbc:	603a      	str	r2, [r7, #0]
 8010cbe:	71fb      	strb	r3, [r7, #7]
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	6839      	ldr	r1, [r7, #0]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f000 ff21 	bl	8011b10 <netconn_alloc>
 8010cce:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8010cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d054      	beq.n	8010d80 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010cd6:	79bb      	ldrb	r3, [r7, #6]
 8010cd8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cdc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010cde:	f107 0308 	add.w	r3, r7, #8
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4829      	ldr	r0, [pc, #164]	@ (8010d8c <netconn_new_with_proto_and_callback+0xd8>)
 8010ce6:	f7ff ffc5 	bl	8010c74 <netconn_apimsg>
 8010cea:	4603      	mov	r3, r0
 8010cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8010cf0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d043      	beq.n	8010d80 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d005      	beq.n	8010d0c <netconn_new_with_proto_and_callback+0x58>
 8010d00:	4b23      	ldr	r3, [pc, #140]	@ (8010d90 <netconn_new_with_proto_and_callback+0xdc>)
 8010d02:	22a3      	movs	r2, #163	@ 0xa3
 8010d04:	4923      	ldr	r1, [pc, #140]	@ (8010d94 <netconn_new_with_proto_and_callback+0xe0>)
 8010d06:	4824      	ldr	r0, [pc, #144]	@ (8010d98 <netconn_new_with_proto_and_callback+0xe4>)
 8010d08:	f00f fcc4 	bl	8020694 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d0e:	3310      	adds	r3, #16
 8010d10:	4618      	mov	r0, r3
 8010d12:	f00e f8fb 	bl	801ef0c <sys_mbox_valid>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d105      	bne.n	8010d28 <netconn_new_with_proto_and_callback+0x74>
 8010d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8010d90 <netconn_new_with_proto_and_callback+0xdc>)
 8010d1e:	22a4      	movs	r2, #164	@ 0xa4
 8010d20:	491e      	ldr	r1, [pc, #120]	@ (8010d9c <netconn_new_with_proto_and_callback+0xe8>)
 8010d22:	481d      	ldr	r0, [pc, #116]	@ (8010d98 <netconn_new_with_proto_and_callback+0xe4>)
 8010d24:	f00f fcb6 	bl	8020694 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d2a:	3314      	adds	r3, #20
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f00e f8ed 	bl	801ef0c <sys_mbox_valid>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d005      	beq.n	8010d44 <netconn_new_with_proto_and_callback+0x90>
 8010d38:	4b15      	ldr	r3, [pc, #84]	@ (8010d90 <netconn_new_with_proto_and_callback+0xdc>)
 8010d3a:	22a6      	movs	r2, #166	@ 0xa6
 8010d3c:	4918      	ldr	r1, [pc, #96]	@ (8010da0 <netconn_new_with_proto_and_callback+0xec>)
 8010d3e:	4816      	ldr	r0, [pc, #88]	@ (8010d98 <netconn_new_with_proto_and_callback+0xe4>)
 8010d40:	f00f fca8 	bl	8020694 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d46:	330c      	adds	r3, #12
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f00e f999 	bl	801f080 <sys_sem_valid>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d105      	bne.n	8010d60 <netconn_new_with_proto_and_callback+0xac>
 8010d54:	4b0e      	ldr	r3, [pc, #56]	@ (8010d90 <netconn_new_with_proto_and_callback+0xdc>)
 8010d56:	22a9      	movs	r2, #169	@ 0xa9
 8010d58:	4912      	ldr	r1, [pc, #72]	@ (8010da4 <netconn_new_with_proto_and_callback+0xf0>)
 8010d5a:	480f      	ldr	r0, [pc, #60]	@ (8010d98 <netconn_new_with_proto_and_callback+0xe4>)
 8010d5c:	f00f fc9a 	bl	8020694 <iprintf>
      sys_sem_free(&conn->op_completed);
 8010d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d62:	330c      	adds	r3, #12
 8010d64:	4618      	mov	r0, r3
 8010d66:	f00e f973 	bl	801f050 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d6c:	3310      	adds	r3, #16
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f00e f838 	bl	801ede4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d76:	2007      	movs	r0, #7
 8010d78:	f002 fe4a 	bl	8013a10 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	e000      	b.n	8010d82 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3730      	adds	r7, #48	@ 0x30
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	08011ae5 	.word	0x08011ae5
 8010d90:	08021874 	.word	0x08021874
 8010d94:	080218a8 	.word	0x080218a8
 8010d98:	080218cc 	.word	0x080218cc
 8010d9c:	080218f4 	.word	0x080218f4
 8010da0:	0802190c 	.word	0x0802190c
 8010da4:	08021930 	.word	0x08021930

08010da8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08c      	sub	sp, #48	@ 0x30
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d101      	bne.n	8010dba <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010db6:	2300      	movs	r3, #0
 8010db8:	e014      	b.n	8010de4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010dbe:	2329      	movs	r3, #41	@ 0x29
 8010dc0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010dc2:	f107 030c 	add.w	r3, r7, #12
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	4808      	ldr	r0, [pc, #32]	@ (8010dec <netconn_prepare_delete+0x44>)
 8010dca:	f7ff ff53 	bl	8010c74 <netconn_apimsg>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010dd4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d002      	beq.n	8010de2 <netconn_prepare_delete+0x3a>
    return err;
 8010ddc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010de0:	e000      	b.n	8010de4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3730      	adds	r7, #48	@ 0x30
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	08012051 	.word	0x08012051

08010df0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d101      	bne.n	8010e02 <netconn_delete+0x12>
    return ERR_OK;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	e00d      	b.n	8010e1e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f7ff ffd0 	bl	8010da8 <netconn_prepare_delete>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d102      	bne.n	8010e1a <netconn_delete+0x2a>
    netconn_free(conn);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f000 fee9 	bl	8011bec <netconn_free>
  }
  return err;
 8010e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3710      	adds	r7, #16
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
	...

08010e28 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b08e      	sub	sp, #56	@ 0x38
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	4613      	mov	r3, r2
 8010e34:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d109      	bne.n	8010e50 <netconn_bind+0x28>
 8010e3c:	4b11      	ldr	r3, [pc, #68]	@ (8010e84 <netconn_bind+0x5c>)
 8010e3e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8010e42:	4911      	ldr	r1, [pc, #68]	@ (8010e88 <netconn_bind+0x60>)
 8010e44:	4811      	ldr	r0, [pc, #68]	@ (8010e8c <netconn_bind+0x64>)
 8010e46:	f00f fc25 	bl	8020694 <iprintf>
 8010e4a:	f06f 030f 	mvn.w	r3, #15
 8010e4e:	e015      	b.n	8010e7c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d101      	bne.n	8010e5a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8010e56:	4b0e      	ldr	r3, [pc, #56]	@ (8010e90 <netconn_bind+0x68>)
 8010e58:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010e62:	88fb      	ldrh	r3, [r7, #6]
 8010e64:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8010e66:	f107 0314 	add.w	r3, r7, #20
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	4809      	ldr	r0, [pc, #36]	@ (8010e94 <netconn_bind+0x6c>)
 8010e6e:	f7ff ff01 	bl	8010c74 <netconn_apimsg>
 8010e72:	4603      	mov	r3, r0
 8010e74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010e78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3738      	adds	r7, #56	@ 0x38
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	08021874 	.word	0x08021874
 8010e88:	080219ac 	.word	0x080219ac
 8010e8c:	080218cc 	.word	0x080218cc
 8010e90:	08026768 	.word	0x08026768
 8010e94:	08012219 	.word	0x08012219

08010e98 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b088      	sub	sp, #32
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d109      	bne.n	8010ec4 <netconn_recv_data+0x2c>
 8010eb0:	4b58      	ldr	r3, [pc, #352]	@ (8011014 <netconn_recv_data+0x17c>)
 8010eb2:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8010eb6:	4958      	ldr	r1, [pc, #352]	@ (8011018 <netconn_recv_data+0x180>)
 8010eb8:	4858      	ldr	r0, [pc, #352]	@ (801101c <netconn_recv_data+0x184>)
 8010eba:	f00f fbeb 	bl	8020694 <iprintf>
 8010ebe:	f06f 030f 	mvn.w	r3, #15
 8010ec2:	e0a2      	b.n	801100a <netconn_recv_data+0x172>
  *new_buf = NULL;
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d109      	bne.n	8010ee4 <netconn_recv_data+0x4c>
 8010ed0:	4b50      	ldr	r3, [pc, #320]	@ (8011014 <netconn_recv_data+0x17c>)
 8010ed2:	f240 224a 	movw	r2, #586	@ 0x24a
 8010ed6:	4952      	ldr	r1, [pc, #328]	@ (8011020 <netconn_recv_data+0x188>)
 8010ed8:	4850      	ldr	r0, [pc, #320]	@ (801101c <netconn_recv_data+0x184>)
 8010eda:	f00f fbdb 	bl	8020694 <iprintf>
 8010ede:	f06f 030f 	mvn.w	r3, #15
 8010ee2:	e092      	b.n	801100a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	3310      	adds	r3, #16
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f00e f80f 	bl	801ef0c <sys_mbox_valid>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d10e      	bne.n	8010f12 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f000 fa45 	bl	8011384 <netconn_err>
 8010efa:	4603      	mov	r3, r0
 8010efc:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010efe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d002      	beq.n	8010f0c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8010f06:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010f0a:	e07e      	b.n	801100a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010f0c:	f06f 030a 	mvn.w	r3, #10
 8010f10:	e07b      	b.n	801100a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	7f1b      	ldrb	r3, [r3, #28]
 8010f16:	f003 0302 	and.w	r3, r3, #2
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d10f      	bne.n	8010f3e <netconn_recv_data+0xa6>
 8010f1e:	79fb      	ldrb	r3, [r7, #7]
 8010f20:	f003 0304 	and.w	r3, r3, #4
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d10a      	bne.n	8010f3e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	7f1b      	ldrb	r3, [r3, #28]
 8010f2c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d104      	bne.n	8010f3e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d023      	beq.n	8010f86 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	3310      	adds	r3, #16
 8010f42:	f107 0218 	add.w	r2, r7, #24
 8010f46:	4611      	mov	r1, r2
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f00d ffc8 	bl	801eede <sys_arch_mbox_tryfetch>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f54:	d11f      	bne.n	8010f96 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8010f56:	68f8      	ldr	r0, [r7, #12]
 8010f58:	f000 fa14 	bl	8011384 <netconn_err>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010f60:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d002      	beq.n	8010f6e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8010f68:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010f6c:	e04d      	b.n	801100a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	7f1b      	ldrb	r3, [r3, #28]
 8010f72:	f003 0301 	and.w	r3, r3, #1
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d002      	beq.n	8010f80 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8010f7a:	f06f 030a 	mvn.w	r3, #10
 8010f7e:	e044      	b.n	801100a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8010f80:	f06f 0306 	mvn.w	r3, #6
 8010f84:	e041      	b.n	801100a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	3310      	adds	r3, #16
 8010f8a:	f107 0118 	add.w	r1, r7, #24
 8010f8e:	2200      	movs	r2, #0
 8010f90:	4618      	mov	r0, r3
 8010f92:	f00d ff73 	bl	801ee7c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010f9e:	2b10      	cmp	r3, #16
 8010fa0:	d117      	bne.n	8010fd2 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	f107 0217 	add.w	r2, r7, #23
 8010fa8:	4611      	mov	r1, r2
 8010faa:	4618      	mov	r0, r3
 8010fac:	f000 fa3c 	bl	8011428 <lwip_netconn_is_err_msg>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d009      	beq.n	8010fca <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8010fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010fba:	f113 0f0f 	cmn.w	r3, #15
 8010fbe:	d101      	bne.n	8010fc4 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	e022      	b.n	801100a <netconn_recv_data+0x172>
      }
      return err;
 8010fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010fc8:	e01f      	b.n	801100a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	891b      	ldrh	r3, [r3, #8]
 8010fce:	83fb      	strh	r3, [r7, #30]
 8010fd0:	e00d      	b.n	8010fee <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d106      	bne.n	8010fe6 <netconn_recv_data+0x14e>
 8010fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8011014 <netconn_recv_data+0x17c>)
 8010fda:	f240 2291 	movw	r2, #657	@ 0x291
 8010fde:	4911      	ldr	r1, [pc, #68]	@ (8011024 <netconn_recv_data+0x18c>)
 8010fe0:	480e      	ldr	r0, [pc, #56]	@ (801101c <netconn_recv_data+0x184>)
 8010fe2:	f00f fb57 	bl	8020694 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8010fe6:	69bb      	ldr	r3, [r7, #24]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	891b      	ldrh	r3, [r3, #8]
 8010fec:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d005      	beq.n	8011002 <netconn_recv_data+0x16a>
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ffa:	8bfa      	ldrh	r2, [r7, #30]
 8010ffc:	2101      	movs	r1, #1
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8011002:	69ba      	ldr	r2, [r7, #24]
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011008:	2300      	movs	r3, #0
}
 801100a:	4618      	mov	r0, r3
 801100c:	3720      	adds	r7, #32
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
 8011012:	bf00      	nop
 8011014:	08021874 	.word	0x08021874
 8011018:	08021a8c 	.word	0x08021a8c
 801101c:	080218cc 	.word	0x080218cc
 8011020:	08021aac 	.word	0x08021aac
 8011024:	08021ac8 	.word	0x08021ac8

08011028 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d005      	beq.n	8011046 <netconn_tcp_recvd_msg+0x1e>
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011042:	2b10      	cmp	r3, #16
 8011044:	d009      	beq.n	801105a <netconn_tcp_recvd_msg+0x32>
 8011046:	4b0c      	ldr	r3, [pc, #48]	@ (8011078 <netconn_tcp_recvd_msg+0x50>)
 8011048:	f240 22a7 	movw	r2, #679	@ 0x2a7
 801104c:	490b      	ldr	r1, [pc, #44]	@ (801107c <netconn_tcp_recvd_msg+0x54>)
 801104e:	480c      	ldr	r0, [pc, #48]	@ (8011080 <netconn_tcp_recvd_msg+0x58>)
 8011050:	f00f fb20 	bl	8020694 <iprintf>
 8011054:	f06f 030f 	mvn.w	r3, #15
 8011058:	e00a      	b.n	8011070 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011066:	6879      	ldr	r1, [r7, #4]
 8011068:	4806      	ldr	r0, [pc, #24]	@ (8011084 <netconn_tcp_recvd_msg+0x5c>)
 801106a:	f7ff fe03 	bl	8010c74 <netconn_apimsg>
 801106e:	4603      	mov	r3, r0
}
 8011070:	4618      	mov	r0, r3
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	08021874 	.word	0x08021874
 801107c:	08021ad4 	.word	0x08021ad4
 8011080:	080218cc 	.word	0x080218cc
 8011084:	08012327 	.word	0x08012327

08011088 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b090      	sub	sp, #64	@ 0x40
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	4613      	mov	r3, r2
 8011094:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	3310      	adds	r3, #16
 801109a:	4618      	mov	r0, r3
 801109c:	f00d ff36 	bl	801ef0c <sys_mbox_valid>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d102      	bne.n	80110ac <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80110a6:	f06f 030a 	mvn.w	r3, #10
 80110aa:	e06d      	b.n	8011188 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	7f1b      	ldrb	r3, [r3, #28]
 80110b0:	b25b      	sxtb	r3, r3
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	da07      	bge.n	80110c6 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	7f1b      	ldrb	r3, [r3, #28]
 80110ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80110c4:	e039      	b.n	801113a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80110c6:	79fb      	ldrb	r3, [r7, #7]
 80110c8:	461a      	mov	r2, r3
 80110ca:	68b9      	ldr	r1, [r7, #8]
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f7ff fee3 	bl	8010e98 <netconn_recv_data>
 80110d2:	4603      	mov	r3, r0
 80110d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80110d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d002      	beq.n	80110e6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80110e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80110e4:	e050      	b.n	8011188 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80110ec:	79fb      	ldrb	r3, [r7, #7]
 80110ee:	f003 0308 	and.w	r3, r3, #8
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d10e      	bne.n	8011114 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80110f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d002      	beq.n	8011102 <netconn_recv_data_tcp+0x7a>
 80110fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110fe:	891b      	ldrh	r3, [r3, #8]
 8011100:	e000      	b.n	8011104 <netconn_recv_data_tcp+0x7c>
 8011102:	2301      	movs	r3, #1
 8011104:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011106:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011108:	f107 0214 	add.w	r2, r7, #20
 801110c:	4619      	mov	r1, r3
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f7ff ff8a 	bl	8011028 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011116:	2b00      	cmp	r3, #0
 8011118:	d134      	bne.n	8011184 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801111a:	79fb      	ldrb	r3, [r7, #7]
 801111c:	f003 0310 	and.w	r3, r3, #16
 8011120:	2b00      	cmp	r3, #0
 8011122:	d009      	beq.n	8011138 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	7f1b      	ldrb	r3, [r3, #28]
 8011128:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801112c:	b2da      	uxtb	r2, r3
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8011132:	f06f 0306 	mvn.w	r3, #6
 8011136:	e027      	b.n	8011188 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011138:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801113e:	2b00      	cmp	r3, #0
 8011140:	d005      	beq.n	801114e <netconn_recv_data_tcp+0xc6>
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011146:	2200      	movs	r2, #0
 8011148:	2101      	movs	r1, #1
 801114a:	68f8      	ldr	r0, [r7, #12]
 801114c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d10f      	bne.n	8011176 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011156:	68f8      	ldr	r0, [r7, #12]
 8011158:	f000 f914 	bl	8011384 <netconn_err>
 801115c:	4603      	mov	r3, r0
 801115e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8011162:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011166:	2b00      	cmp	r3, #0
 8011168:	d002      	beq.n	8011170 <netconn_recv_data_tcp+0xe8>
          return err;
 801116a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801116e:	e00b      	b.n	8011188 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8011170:	f06f 030d 	mvn.w	r3, #13
 8011174:	e008      	b.n	8011188 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011176:	2101      	movs	r1, #1
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f000 f8d3 	bl	8011324 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801117e:	f06f 030e 	mvn.w	r3, #14
 8011182:	e001      	b.n	8011188 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011184:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011188:	4618      	mov	r0, r3
 801118a:	3740      	adds	r7, #64	@ 0x40
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b086      	sub	sp, #24
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 801119a:	2300      	movs	r3, #0
 801119c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d109      	bne.n	80111b8 <netconn_recv+0x28>
 80111a4:	4b32      	ldr	r3, [pc, #200]	@ (8011270 <netconn_recv+0xe0>)
 80111a6:	f240 3263 	movw	r2, #867	@ 0x363
 80111aa:	4932      	ldr	r1, [pc, #200]	@ (8011274 <netconn_recv+0xe4>)
 80111ac:	4832      	ldr	r0, [pc, #200]	@ (8011278 <netconn_recv+0xe8>)
 80111ae:	f00f fa71 	bl	8020694 <iprintf>
 80111b2:	f06f 030f 	mvn.w	r3, #15
 80111b6:	e056      	b.n	8011266 <netconn_recv+0xd6>
  *new_buf = NULL;
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	2200      	movs	r2, #0
 80111bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d109      	bne.n	80111d8 <netconn_recv+0x48>
 80111c4:	4b2a      	ldr	r3, [pc, #168]	@ (8011270 <netconn_recv+0xe0>)
 80111c6:	f240 3265 	movw	r2, #869	@ 0x365
 80111ca:	492c      	ldr	r1, [pc, #176]	@ (801127c <netconn_recv+0xec>)
 80111cc:	482a      	ldr	r0, [pc, #168]	@ (8011278 <netconn_recv+0xe8>)
 80111ce:	f00f fa61 	bl	8020694 <iprintf>
 80111d2:	f06f 030f 	mvn.w	r3, #15
 80111d6:	e046      	b.n	8011266 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80111e0:	2b10      	cmp	r3, #16
 80111e2:	d13a      	bne.n	801125a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80111e4:	2300      	movs	r3, #0
 80111e6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80111e8:	2006      	movs	r0, #6
 80111ea:	f002 fb95 	bl	8013918 <memp_malloc>
 80111ee:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d102      	bne.n	80111fc <netconn_recv+0x6c>
      return ERR_MEM;
 80111f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111fa:	e034      	b.n	8011266 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80111fc:	f107 030c 	add.w	r3, r7, #12
 8011200:	2200      	movs	r2, #0
 8011202:	4619      	mov	r1, r3
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7ff ff3f 	bl	8011088 <netconn_recv_data_tcp>
 801120a:	4603      	mov	r3, r0
 801120c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801120e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d006      	beq.n	8011224 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011216:	6979      	ldr	r1, [r7, #20]
 8011218:	2006      	movs	r0, #6
 801121a:	f002 fbf9 	bl	8013a10 <memp_free>
      return err;
 801121e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011222:	e020      	b.n	8011266 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d106      	bne.n	8011238 <netconn_recv+0xa8>
 801122a:	4b11      	ldr	r3, [pc, #68]	@ (8011270 <netconn_recv+0xe0>)
 801122c:	f240 3279 	movw	r2, #889	@ 0x379
 8011230:	4913      	ldr	r1, [pc, #76]	@ (8011280 <netconn_recv+0xf0>)
 8011232:	4811      	ldr	r0, [pc, #68]	@ (8011278 <netconn_recv+0xe8>)
 8011234:	f00f fa2e 	bl	8020694 <iprintf>

    buf->p = p;
 8011238:	68fa      	ldr	r2, [r7, #12]
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801123e:	68fa      	ldr	r2, [r7, #12]
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	2200      	movs	r2, #0
 8011248:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	2200      	movs	r2, #0
 801124e:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	697a      	ldr	r2, [r7, #20]
 8011254:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011256:	2300      	movs	r3, #0
 8011258:	e005      	b.n	8011266 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801125a:	2200      	movs	r2, #0
 801125c:	6839      	ldr	r1, [r7, #0]
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f7ff fe1a 	bl	8010e98 <netconn_recv_data>
 8011264:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011266:	4618      	mov	r0, r3
 8011268:	3718      	adds	r7, #24
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	08021874 	.word	0x08021874
 8011274:	08021a8c 	.word	0x08021a8c
 8011278:	080218cc 	.word	0x080218cc
 801127c:	08021aac 	.word	0x08021aac
 8011280:	08021b24 	.word	0x08021b24

08011284 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
 8011290:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d011      	beq.n	80112bc <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d002      	beq.n	80112a4 <netconn_sendto+0x20>
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	e000      	b.n	80112a6 <netconn_sendto+0x22>
 80112a4:	2300      	movs	r3, #0
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	887a      	ldrh	r2, [r7, #2]
 80112ae:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 80112b0:	68b9      	ldr	r1, [r7, #8]
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	f000 f808 	bl	80112c8 <netconn_send>
 80112b8:	4603      	mov	r3, r0
 80112ba:	e001      	b.n	80112c0 <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 80112bc:	f06f 0305 	mvn.w	r3, #5
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b08c      	sub	sp, #48	@ 0x30
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d109      	bne.n	80112ec <netconn_send+0x24>
 80112d8:	4b0e      	ldr	r3, [pc, #56]	@ (8011314 <netconn_send+0x4c>)
 80112da:	f240 32b2 	movw	r2, #946	@ 0x3b2
 80112de:	490e      	ldr	r1, [pc, #56]	@ (8011318 <netconn_send+0x50>)
 80112e0:	480e      	ldr	r0, [pc, #56]	@ (801131c <netconn_send+0x54>)
 80112e2:	f00f f9d7 	bl	8020694 <iprintf>
 80112e6:	f06f 030f 	mvn.w	r3, #15
 80112ea:	e00e      	b.n	801130a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80112f4:	f107 030c 	add.w	r3, r7, #12
 80112f8:	4619      	mov	r1, r3
 80112fa:	4809      	ldr	r0, [pc, #36]	@ (8011320 <netconn_send+0x58>)
 80112fc:	f7ff fcba 	bl	8010c74 <netconn_apimsg>
 8011300:	4603      	mov	r3, r0
 8011302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011306:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801130a:	4618      	mov	r0, r3
 801130c:	3730      	adds	r7, #48	@ 0x30
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	08021874 	.word	0x08021874
 8011318:	08021b30 	.word	0x08021b30
 801131c:	080218cc 	.word	0x080218cc
 8011320:	0801228d 	.word	0x0801228d

08011324 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b08c      	sub	sp, #48	@ 0x30
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	460b      	mov	r3, r1
 801132e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d109      	bne.n	801134a <netconn_close_shutdown+0x26>
 8011336:	4b0f      	ldr	r3, [pc, #60]	@ (8011374 <netconn_close_shutdown+0x50>)
 8011338:	f240 4247 	movw	r2, #1095	@ 0x447
 801133c:	490e      	ldr	r1, [pc, #56]	@ (8011378 <netconn_close_shutdown+0x54>)
 801133e:	480f      	ldr	r0, [pc, #60]	@ (801137c <netconn_close_shutdown+0x58>)
 8011340:	f00f f9a8 	bl	8020694 <iprintf>
 8011344:	f06f 030f 	mvn.w	r3, #15
 8011348:	e010      	b.n	801136c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801134e:	78fb      	ldrb	r3, [r7, #3]
 8011350:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8011352:	2329      	movs	r3, #41	@ 0x29
 8011354:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011356:	f107 030c 	add.w	r3, r7, #12
 801135a:	4619      	mov	r1, r3
 801135c:	4808      	ldr	r0, [pc, #32]	@ (8011380 <netconn_close_shutdown+0x5c>)
 801135e:	f7ff fc89 	bl	8010c74 <netconn_apimsg>
 8011362:	4603      	mov	r3, r0
 8011364:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011368:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801136c:	4618      	mov	r0, r3
 801136e:	3730      	adds	r7, #48	@ 0x30
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}
 8011374:	08021874 	.word	0x08021874
 8011378:	08021bb0 	.word	0x08021bb0
 801137c:	080218cc 	.word	0x080218cc
 8011380:	08012729 	.word	0x08012729

08011384 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d101      	bne.n	8011396 <netconn_err+0x12>
    return ERR_OK;
 8011392:	2300      	movs	r3, #0
 8011394:	e00d      	b.n	80113b2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011396:	f00d ff0f 	bl	801f1b8 <sys_arch_protect>
 801139a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	7a1b      	ldrb	r3, [r3, #8]
 80113a0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2200      	movs	r2, #0
 80113a6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80113a8:	68f8      	ldr	r0, [r7, #12]
 80113aa:	f00d ff13 	bl	801f1d4 <sys_arch_unprotect>
  return err;
 80113ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
	...

080113bc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	4603      	mov	r3, r0
 80113c4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80113c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113ca:	f113 0f0d 	cmn.w	r3, #13
 80113ce:	d009      	beq.n	80113e4 <lwip_netconn_err_to_msg+0x28>
 80113d0:	f113 0f0d 	cmn.w	r3, #13
 80113d4:	dc0c      	bgt.n	80113f0 <lwip_netconn_err_to_msg+0x34>
 80113d6:	f113 0f0f 	cmn.w	r3, #15
 80113da:	d007      	beq.n	80113ec <lwip_netconn_err_to_msg+0x30>
 80113dc:	f113 0f0e 	cmn.w	r3, #14
 80113e0:	d002      	beq.n	80113e8 <lwip_netconn_err_to_msg+0x2c>
 80113e2:	e005      	b.n	80113f0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80113e4:	4b0a      	ldr	r3, [pc, #40]	@ (8011410 <lwip_netconn_err_to_msg+0x54>)
 80113e6:	e00e      	b.n	8011406 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80113e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011414 <lwip_netconn_err_to_msg+0x58>)
 80113ea:	e00c      	b.n	8011406 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80113ec:	4b0a      	ldr	r3, [pc, #40]	@ (8011418 <lwip_netconn_err_to_msg+0x5c>)
 80113ee:	e00a      	b.n	8011406 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80113f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d005      	beq.n	8011404 <lwip_netconn_err_to_msg+0x48>
 80113f8:	4b08      	ldr	r3, [pc, #32]	@ (801141c <lwip_netconn_err_to_msg+0x60>)
 80113fa:	227d      	movs	r2, #125	@ 0x7d
 80113fc:	4908      	ldr	r1, [pc, #32]	@ (8011420 <lwip_netconn_err_to_msg+0x64>)
 80113fe:	4809      	ldr	r0, [pc, #36]	@ (8011424 <lwip_netconn_err_to_msg+0x68>)
 8011400:	f00f f948 	bl	8020694 <iprintf>
      return NULL;
 8011404:	2300      	movs	r3, #0
  }
}
 8011406:	4618      	mov	r0, r3
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	080265ec 	.word	0x080265ec
 8011414:	080265ed 	.word	0x080265ed
 8011418:	080265ee 	.word	0x080265ee
 801141c:	08021bcc 	.word	0x08021bcc
 8011420:	08021c00 	.word	0x08021c00
 8011424:	08021c10 	.word	0x08021c10

08011428 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d105      	bne.n	8011444 <lwip_netconn_is_err_msg+0x1c>
 8011438:	4b12      	ldr	r3, [pc, #72]	@ (8011484 <lwip_netconn_is_err_msg+0x5c>)
 801143a:	2285      	movs	r2, #133	@ 0x85
 801143c:	4912      	ldr	r1, [pc, #72]	@ (8011488 <lwip_netconn_is_err_msg+0x60>)
 801143e:	4813      	ldr	r0, [pc, #76]	@ (801148c <lwip_netconn_is_err_msg+0x64>)
 8011440:	f00f f928 	bl	8020694 <iprintf>

  if (msg == &netconn_aborted) {
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	4a12      	ldr	r2, [pc, #72]	@ (8011490 <lwip_netconn_is_err_msg+0x68>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d104      	bne.n	8011456 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	22f3      	movs	r2, #243	@ 0xf3
 8011450:	701a      	strb	r2, [r3, #0]
    return 1;
 8011452:	2301      	movs	r3, #1
 8011454:	e012      	b.n	801147c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4a0e      	ldr	r2, [pc, #56]	@ (8011494 <lwip_netconn_is_err_msg+0x6c>)
 801145a:	4293      	cmp	r3, r2
 801145c:	d104      	bne.n	8011468 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	22f2      	movs	r2, #242	@ 0xf2
 8011462:	701a      	strb	r2, [r3, #0]
    return 1;
 8011464:	2301      	movs	r3, #1
 8011466:	e009      	b.n	801147c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	4a0b      	ldr	r2, [pc, #44]	@ (8011498 <lwip_netconn_is_err_msg+0x70>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d104      	bne.n	801147a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	22f1      	movs	r2, #241	@ 0xf1
 8011474:	701a      	strb	r2, [r3, #0]
    return 1;
 8011476:	2301      	movs	r3, #1
 8011478:	e000      	b.n	801147c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801147a:	2300      	movs	r3, #0
}
 801147c:	4618      	mov	r0, r3
 801147e:	3708      	adds	r7, #8
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	08021bcc 	.word	0x08021bcc
 8011488:	08021c38 	.word	0x08021c38
 801148c:	08021c10 	.word	0x08021c10
 8011490:	080265ec 	.word	0x080265ec
 8011494:	080265ed 	.word	0x080265ed
 8011498:	080265ee 	.word	0x080265ee

0801149c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b088      	sub	sp, #32
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
 80114a8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d105      	bne.n	80114bc <recv_udp+0x20>
 80114b0:	4b34      	ldr	r3, [pc, #208]	@ (8011584 <recv_udp+0xe8>)
 80114b2:	22e5      	movs	r2, #229	@ 0xe5
 80114b4:	4934      	ldr	r1, [pc, #208]	@ (8011588 <recv_udp+0xec>)
 80114b6:	4835      	ldr	r0, [pc, #212]	@ (801158c <recv_udp+0xf0>)
 80114b8:	f00f f8ec 	bl	8020694 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d105      	bne.n	80114ce <recv_udp+0x32>
 80114c2:	4b30      	ldr	r3, [pc, #192]	@ (8011584 <recv_udp+0xe8>)
 80114c4:	22e6      	movs	r2, #230	@ 0xe6
 80114c6:	4932      	ldr	r1, [pc, #200]	@ (8011590 <recv_udp+0xf4>)
 80114c8:	4830      	ldr	r0, [pc, #192]	@ (801158c <recv_udp+0xf0>)
 80114ca:	f00f f8e3 	bl	8020694 <iprintf>
  conn = (struct netconn *)arg;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d103      	bne.n	80114e0 <recv_udp+0x44>
    pbuf_free(p);
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f003 fa7f 	bl	80149dc <pbuf_free>
    return;
 80114de:	e04d      	b.n	801157c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d005      	beq.n	80114f6 <recv_udp+0x5a>
 80114ea:	4b26      	ldr	r3, [pc, #152]	@ (8011584 <recv_udp+0xe8>)
 80114ec:	22ee      	movs	r2, #238	@ 0xee
 80114ee:	4929      	ldr	r1, [pc, #164]	@ (8011594 <recv_udp+0xf8>)
 80114f0:	4826      	ldr	r0, [pc, #152]	@ (801158c <recv_udp+0xf0>)
 80114f2:	f00f f8cf 	bl	8020694 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	3310      	adds	r3, #16
 80114fa:	4618      	mov	r0, r3
 80114fc:	f00d fd06 	bl	801ef0c <sys_mbox_valid>
 8011500:	4603      	mov	r3, r0
 8011502:	2b00      	cmp	r3, #0
 8011504:	d103      	bne.n	801150e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f003 fa68 	bl	80149dc <pbuf_free>
    return;
 801150c:	e036      	b.n	801157c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801150e:	2006      	movs	r0, #6
 8011510:	f002 fa02 	bl	8013918 <memp_malloc>
 8011514:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d103      	bne.n	8011524 <recv_udp+0x88>
    pbuf_free(p);
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f003 fa5d 	bl	80149dc <pbuf_free>
    return;
 8011522:	e02b      	b.n	801157c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d002      	beq.n	801153c <recv_udp+0xa0>
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	e000      	b.n	801153e <recv_udp+0xa2>
 801153c:	2300      	movs	r3, #0
 801153e:	69ba      	ldr	r2, [r7, #24]
 8011540:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011542:	69bb      	ldr	r3, [r7, #24]
 8011544:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011546:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	891b      	ldrh	r3, [r3, #8]
 801154c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801154e:	69fb      	ldr	r3, [r7, #28]
 8011550:	3310      	adds	r3, #16
 8011552:	69b9      	ldr	r1, [r7, #24]
 8011554:	4618      	mov	r0, r3
 8011556:	f00d fc6d 	bl	801ee34 <sys_mbox_trypost>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d003      	beq.n	8011568 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011560:	69b8      	ldr	r0, [r7, #24]
 8011562:	f001 f9a1 	bl	80128a8 <netbuf_delete>
    return;
 8011566:	e009      	b.n	801157c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801156c:	2b00      	cmp	r3, #0
 801156e:	d005      	beq.n	801157c <recv_udp+0xe0>
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011574:	8afa      	ldrh	r2, [r7, #22]
 8011576:	2100      	movs	r1, #0
 8011578:	69f8      	ldr	r0, [r7, #28]
 801157a:	4798      	blx	r3
  }
}
 801157c:	3720      	adds	r7, #32
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	08021bcc 	.word	0x08021bcc
 8011588:	08021c44 	.word	0x08021c44
 801158c:	08021c10 	.word	0x08021c10
 8011590:	08021c68 	.word	0x08021c68
 8011594:	08021c88 	.word	0x08021c88

08011598 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b088      	sub	sp, #32
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
 80115a4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d106      	bne.n	80115ba <recv_tcp+0x22>
 80115ac:	4b36      	ldr	r3, [pc, #216]	@ (8011688 <recv_tcp+0xf0>)
 80115ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80115b2:	4936      	ldr	r1, [pc, #216]	@ (801168c <recv_tcp+0xf4>)
 80115b4:	4836      	ldr	r0, [pc, #216]	@ (8011690 <recv_tcp+0xf8>)
 80115b6:	f00f f86d 	bl	8020694 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d106      	bne.n	80115ce <recv_tcp+0x36>
 80115c0:	4b31      	ldr	r3, [pc, #196]	@ (8011688 <recv_tcp+0xf0>)
 80115c2:	f240 122d 	movw	r2, #301	@ 0x12d
 80115c6:	4933      	ldr	r1, [pc, #204]	@ (8011694 <recv_tcp+0xfc>)
 80115c8:	4831      	ldr	r0, [pc, #196]	@ (8011690 <recv_tcp+0xf8>)
 80115ca:	f00f f863 	bl	8020694 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80115ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d006      	beq.n	80115e4 <recv_tcp+0x4c>
 80115d6:	4b2c      	ldr	r3, [pc, #176]	@ (8011688 <recv_tcp+0xf0>)
 80115d8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80115dc:	492e      	ldr	r1, [pc, #184]	@ (8011698 <recv_tcp+0x100>)
 80115de:	482c      	ldr	r0, [pc, #176]	@ (8011690 <recv_tcp+0xf8>)
 80115e0:	f00f f858 	bl	8020694 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d102      	bne.n	80115f4 <recv_tcp+0x5c>
    return ERR_VAL;
 80115ee:	f06f 0305 	mvn.w	r3, #5
 80115f2:	e045      	b.n	8011680 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	68ba      	ldr	r2, [r7, #8]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d006      	beq.n	801160c <recv_tcp+0x74>
 80115fe:	4b22      	ldr	r3, [pc, #136]	@ (8011688 <recv_tcp+0xf0>)
 8011600:	f240 1235 	movw	r2, #309	@ 0x135
 8011604:	4925      	ldr	r1, [pc, #148]	@ (801169c <recv_tcp+0x104>)
 8011606:	4822      	ldr	r0, [pc, #136]	@ (8011690 <recv_tcp+0xf8>)
 8011608:	f00f f844 	bl	8020694 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	3310      	adds	r3, #16
 8011610:	4618      	mov	r0, r3
 8011612:	f00d fc7b 	bl	801ef0c <sys_mbox_valid>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d10d      	bne.n	8011638 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d008      	beq.n	8011634 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	891b      	ldrh	r3, [r3, #8]
 8011626:	4619      	mov	r1, r3
 8011628:	68b8      	ldr	r0, [r7, #8]
 801162a:	f004 f911 	bl	8015850 <tcp_recved>
      pbuf_free(p);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f003 f9d4 	bl	80149dc <pbuf_free>
    }
    return ERR_OK;
 8011634:	2300      	movs	r3, #0
 8011636:	e023      	b.n	8011680 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d005      	beq.n	801164a <recv_tcp+0xb2>
    msg = p;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	891b      	ldrh	r3, [r3, #8]
 8011646:	83fb      	strh	r3, [r7, #30]
 8011648:	e003      	b.n	8011652 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801164a:	4b15      	ldr	r3, [pc, #84]	@ (80116a0 <recv_tcp+0x108>)
 801164c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801164e:	2300      	movs	r3, #0
 8011650:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	3310      	adds	r3, #16
 8011656:	69b9      	ldr	r1, [r7, #24]
 8011658:	4618      	mov	r0, r3
 801165a:	f00d fbeb 	bl	801ee34 <sys_mbox_trypost>
 801165e:	4603      	mov	r3, r0
 8011660:	2b00      	cmp	r3, #0
 8011662:	d002      	beq.n	801166a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011664:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011668:	e00a      	b.n	8011680 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166e:	2b00      	cmp	r3, #0
 8011670:	d005      	beq.n	801167e <recv_tcp+0xe6>
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011676:	8bfa      	ldrh	r2, [r7, #30]
 8011678:	2100      	movs	r1, #0
 801167a:	6978      	ldr	r0, [r7, #20]
 801167c:	4798      	blx	r3
  }

  return ERR_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3720      	adds	r7, #32
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	08021bcc 	.word	0x08021bcc
 801168c:	08021ca8 	.word	0x08021ca8
 8011690:	08021c10 	.word	0x08021c10
 8011694:	08021ccc 	.word	0x08021ccc
 8011698:	08021cec 	.word	0x08021cec
 801169c:	08021d04 	.word	0x08021d04
 80116a0:	080265ee 	.word	0x080265ee

080116a4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b084      	sub	sp, #16
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d106      	bne.n	80116c6 <poll_tcp+0x22>
 80116b8:	4b29      	ldr	r3, [pc, #164]	@ (8011760 <poll_tcp+0xbc>)
 80116ba:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 80116be:	4929      	ldr	r1, [pc, #164]	@ (8011764 <poll_tcp+0xc0>)
 80116c0:	4829      	ldr	r0, [pc, #164]	@ (8011768 <poll_tcp+0xc4>)
 80116c2:	f00e ffe7 	bl	8020694 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	785b      	ldrb	r3, [r3, #1]
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	d104      	bne.n	80116d8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80116ce:	2101      	movs	r1, #1
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	f000 fe5d 	bl	8012390 <lwip_netconn_do_writemore>
 80116d6:	e016      	b.n	8011706 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	785b      	ldrb	r3, [r3, #1]
 80116dc:	2b04      	cmp	r3, #4
 80116de:	d112      	bne.n	8011706 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	6a1b      	ldr	r3, [r3, #32]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d00a      	beq.n	80116fe <poll_tcp+0x5a>
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6a1b      	ldr	r3, [r3, #32]
 80116ec:	7a5b      	ldrb	r3, [r3, #9]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d005      	beq.n	80116fe <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	6a1b      	ldr	r3, [r3, #32]
 80116f6:	7a5a      	ldrb	r2, [r3, #9]
 80116f8:	3a01      	subs	r2, #1
 80116fa:	b2d2      	uxtb	r2, r2
 80116fc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80116fe:	2101      	movs	r1, #1
 8011700:	68f8      	ldr	r0, [r7, #12]
 8011702:	f000 fb3b 	bl	8011d7c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	7f1b      	ldrb	r3, [r3, #28]
 801170a:	f003 0310 	and.w	r3, r3, #16
 801170e:	2b00      	cmp	r3, #0
 8011710:	d021      	beq.n	8011756 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d01d      	beq.n	8011756 <poll_tcp+0xb2>
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011722:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011726:	d316      	bcc.n	8011756 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011730:	2b04      	cmp	r3, #4
 8011732:	d810      	bhi.n	8011756 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	7f1b      	ldrb	r3, [r3, #28]
 8011738:	f023 0310 	bic.w	r3, r3, #16
 801173c:	b2da      	uxtb	r2, r3
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011746:	2b00      	cmp	r3, #0
 8011748:	d005      	beq.n	8011756 <poll_tcp+0xb2>
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801174e:	2200      	movs	r2, #0
 8011750:	2102      	movs	r1, #2
 8011752:	68f8      	ldr	r0, [r7, #12]
 8011754:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011756:	2300      	movs	r3, #0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3710      	adds	r7, #16
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	08021bcc 	.word	0x08021bcc
 8011764:	08021d24 	.word	0x08021d24
 8011768:	08021c10 	.word	0x08021c10

0801176c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b086      	sub	sp, #24
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	4613      	mov	r3, r2
 8011778:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d106      	bne.n	8011792 <sent_tcp+0x26>
 8011784:	4b20      	ldr	r3, [pc, #128]	@ (8011808 <sent_tcp+0x9c>)
 8011786:	f240 1293 	movw	r2, #403	@ 0x193
 801178a:	4920      	ldr	r1, [pc, #128]	@ (801180c <sent_tcp+0xa0>)
 801178c:	4820      	ldr	r0, [pc, #128]	@ (8011810 <sent_tcp+0xa4>)
 801178e:	f00e ff81 	bl	8020694 <iprintf>

  if (conn) {
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d032      	beq.n	80117fe <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	785b      	ldrb	r3, [r3, #1]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d104      	bne.n	80117aa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80117a0:	2101      	movs	r1, #1
 80117a2:	6978      	ldr	r0, [r7, #20]
 80117a4:	f000 fdf4 	bl	8012390 <lwip_netconn_do_writemore>
 80117a8:	e007      	b.n	80117ba <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	785b      	ldrb	r3, [r3, #1]
 80117ae:	2b04      	cmp	r3, #4
 80117b0:	d103      	bne.n	80117ba <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80117b2:	2101      	movs	r1, #1
 80117b4:	6978      	ldr	r0, [r7, #20]
 80117b6:	f000 fae1 	bl	8011d7c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d01d      	beq.n	80117fe <sent_tcp+0x92>
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80117ca:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80117ce:	d316      	bcc.n	80117fe <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80117d8:	2b04      	cmp	r3, #4
 80117da:	d810      	bhi.n	80117fe <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	7f1b      	ldrb	r3, [r3, #28]
 80117e0:	f023 0310 	bic.w	r3, r3, #16
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d005      	beq.n	80117fe <sent_tcp+0x92>
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117f6:	88fa      	ldrh	r2, [r7, #6]
 80117f8:	2102      	movs	r1, #2
 80117fa:	6978      	ldr	r0, [r7, #20]
 80117fc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80117fe:	2300      	movs	r3, #0
}
 8011800:	4618      	mov	r0, r3
 8011802:	3718      	adds	r7, #24
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	08021bcc 	.word	0x08021bcc
 801180c:	08021d24 	.word	0x08021d24
 8011810:	08021c10 	.word	0x08021c10

08011814 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b088      	sub	sp, #32
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	460b      	mov	r3, r1
 801181e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d106      	bne.n	8011838 <err_tcp+0x24>
 801182a:	4b5f      	ldr	r3, [pc, #380]	@ (80119a8 <err_tcp+0x194>)
 801182c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011830:	495e      	ldr	r1, [pc, #376]	@ (80119ac <err_tcp+0x198>)
 8011832:	485f      	ldr	r0, [pc, #380]	@ (80119b0 <err_tcp+0x19c>)
 8011834:	f00e ff2e 	bl	8020694 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011838:	f00d fcbe 	bl	801f1b8 <sys_arch_protect>
 801183c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	2200      	movs	r2, #0
 8011842:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	78fa      	ldrb	r2, [r7, #3]
 8011848:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	7f1b      	ldrb	r3, [r3, #28]
 801184e:	f043 0301 	orr.w	r3, r3, #1
 8011852:	b2da      	uxtb	r2, r3
 8011854:	69fb      	ldr	r3, [r7, #28]
 8011856:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	785b      	ldrb	r3, [r3, #1]
 801185c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 801185e:	69fb      	ldr	r3, [r7, #28]
 8011860:	2200      	movs	r2, #0
 8011862:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011864:	69b8      	ldr	r0, [r7, #24]
 8011866:	f00d fcb5 	bl	801f1d4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801186a:	69fb      	ldr	r3, [r7, #28]
 801186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801186e:	2b00      	cmp	r3, #0
 8011870:	d005      	beq.n	801187e <err_tcp+0x6a>
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011876:	2200      	movs	r2, #0
 8011878:	2104      	movs	r1, #4
 801187a:	69f8      	ldr	r0, [r7, #28]
 801187c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801187e:	69fb      	ldr	r3, [r7, #28]
 8011880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011882:	2b00      	cmp	r3, #0
 8011884:	d005      	beq.n	8011892 <err_tcp+0x7e>
 8011886:	69fb      	ldr	r3, [r7, #28]
 8011888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801188a:	2200      	movs	r2, #0
 801188c:	2100      	movs	r1, #0
 801188e:	69f8      	ldr	r0, [r7, #28]
 8011890:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011896:	2b00      	cmp	r3, #0
 8011898:	d005      	beq.n	80118a6 <err_tcp+0x92>
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801189e:	2200      	movs	r2, #0
 80118a0:	2102      	movs	r1, #2
 80118a2:	69f8      	ldr	r0, [r7, #28]
 80118a4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80118a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7ff fd86 	bl	80113bc <lwip_netconn_err_to_msg>
 80118b0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	3310      	adds	r3, #16
 80118b6:	4618      	mov	r0, r3
 80118b8:	f00d fb28 	bl	801ef0c <sys_mbox_valid>
 80118bc:	4603      	mov	r3, r0
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d005      	beq.n	80118ce <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	3310      	adds	r3, #16
 80118c6:	6939      	ldr	r1, [r7, #16]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f00d fab3 	bl	801ee34 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	3314      	adds	r3, #20
 80118d2:	4618      	mov	r0, r3
 80118d4:	f00d fb1a 	bl	801ef0c <sys_mbox_valid>
 80118d8:	4603      	mov	r3, r0
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d005      	beq.n	80118ea <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	3314      	adds	r3, #20
 80118e2:	6939      	ldr	r1, [r7, #16]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f00d faa5 	bl	801ee34 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80118ea:	7dfb      	ldrb	r3, [r7, #23]
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d005      	beq.n	80118fc <err_tcp+0xe8>
 80118f0:	7dfb      	ldrb	r3, [r7, #23]
 80118f2:	2b04      	cmp	r3, #4
 80118f4:	d002      	beq.n	80118fc <err_tcp+0xe8>
 80118f6:	7dfb      	ldrb	r3, [r7, #23]
 80118f8:	2b03      	cmp	r3, #3
 80118fa:	d143      	bne.n	8011984 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	7f1b      	ldrb	r3, [r3, #28]
 8011900:	f003 0304 	and.w	r3, r3, #4
 8011904:	2b00      	cmp	r3, #0
 8011906:	bf14      	ite	ne
 8011908:	2301      	movne	r3, #1
 801190a:	2300      	moveq	r3, #0
 801190c:	b2db      	uxtb	r3, r3
 801190e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	7f1b      	ldrb	r3, [r3, #28]
 8011914:	f023 0304 	bic.w	r3, r3, #4
 8011918:	b2da      	uxtb	r2, r3
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d13b      	bne.n	801199c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011924:	69fb      	ldr	r3, [r7, #28]
 8011926:	6a1b      	ldr	r3, [r3, #32]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d106      	bne.n	801193a <err_tcp+0x126>
 801192c:	4b1e      	ldr	r3, [pc, #120]	@ (80119a8 <err_tcp+0x194>)
 801192e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011932:	4920      	ldr	r1, [pc, #128]	@ (80119b4 <err_tcp+0x1a0>)
 8011934:	481e      	ldr	r0, [pc, #120]	@ (80119b0 <err_tcp+0x19c>)
 8011936:	f00e fead 	bl	8020694 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 801193a:	7dfb      	ldrb	r3, [r7, #23]
 801193c:	2b04      	cmp	r3, #4
 801193e:	d104      	bne.n	801194a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	6a1b      	ldr	r3, [r3, #32]
 8011944:	2200      	movs	r2, #0
 8011946:	711a      	strb	r2, [r3, #4]
 8011948:	e003      	b.n	8011952 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 801194a:	69fb      	ldr	r3, [r7, #28]
 801194c:	6a1b      	ldr	r3, [r3, #32]
 801194e:	78fa      	ldrb	r2, [r7, #3]
 8011950:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	6a1b      	ldr	r3, [r3, #32]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	330c      	adds	r3, #12
 801195a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 801195c:	68b8      	ldr	r0, [r7, #8]
 801195e:	f00d fb8f 	bl	801f080 <sys_sem_valid>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	d106      	bne.n	8011976 <err_tcp+0x162>
 8011968:	4b0f      	ldr	r3, [pc, #60]	@ (80119a8 <err_tcp+0x194>)
 801196a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 801196e:	4912      	ldr	r1, [pc, #72]	@ (80119b8 <err_tcp+0x1a4>)
 8011970:	480f      	ldr	r0, [pc, #60]	@ (80119b0 <err_tcp+0x19c>)
 8011972:	f00e fe8f 	bl	8020694 <iprintf>
      conn->current_msg = NULL;
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	2200      	movs	r2, #0
 801197a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 801197c:	68b8      	ldr	r0, [r7, #8]
 801197e:	f00d fb5a 	bl	801f036 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011982:	e00b      	b.n	801199c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	6a1b      	ldr	r3, [r3, #32]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d008      	beq.n	801199e <err_tcp+0x18a>
 801198c:	4b06      	ldr	r3, [pc, #24]	@ (80119a8 <err_tcp+0x194>)
 801198e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8011992:	490a      	ldr	r1, [pc, #40]	@ (80119bc <err_tcp+0x1a8>)
 8011994:	4806      	ldr	r0, [pc, #24]	@ (80119b0 <err_tcp+0x19c>)
 8011996:	f00e fe7d 	bl	8020694 <iprintf>
  }
}
 801199a:	e000      	b.n	801199e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 801199c:	bf00      	nop
}
 801199e:	bf00      	nop
 80119a0:	3720      	adds	r7, #32
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	08021bcc 	.word	0x08021bcc
 80119ac:	08021d24 	.word	0x08021d24
 80119b0:	08021c10 	.word	0x08021c10
 80119b4:	08021d34 	.word	0x08021d34
 80119b8:	08021d50 	.word	0x08021d50
 80119bc:	08021d6c 	.word	0x08021d6c

080119c0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80119ce:	6879      	ldr	r1, [r7, #4]
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f004 fe2f 	bl	8016634 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80119d6:	490a      	ldr	r1, [pc, #40]	@ (8011a00 <setup_tcp+0x40>)
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f004 fe3d 	bl	8016658 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80119de:	4909      	ldr	r1, [pc, #36]	@ (8011a04 <setup_tcp+0x44>)
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f004 fe5b 	bl	801669c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80119e6:	2202      	movs	r2, #2
 80119e8:	4907      	ldr	r1, [pc, #28]	@ (8011a08 <setup_tcp+0x48>)
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f004 feb2 	bl	8016754 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80119f0:	4906      	ldr	r1, [pc, #24]	@ (8011a0c <setup_tcp+0x4c>)
 80119f2:	68f8      	ldr	r0, [r7, #12]
 80119f4:	f004 fe74 	bl	80166e0 <tcp_err>
}
 80119f8:	bf00      	nop
 80119fa:	3710      	adds	r7, #16
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	08011599 	.word	0x08011599
 8011a04:	0801176d 	.word	0x0801176d
 8011a08:	080116a5 	.word	0x080116a5
 8011a0c:	08011815 	.word	0x08011815

08011a10 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011a10:	b590      	push	{r4, r7, lr}
 8011a12:	b085      	sub	sp, #20
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011a18:	2300      	movs	r3, #0
 8011a1a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d006      	beq.n	8011a34 <pcb_new+0x24>
 8011a26:	4b2b      	ldr	r3, [pc, #172]	@ (8011ad4 <pcb_new+0xc4>)
 8011a28:	f240 2265 	movw	r2, #613	@ 0x265
 8011a2c:	492a      	ldr	r1, [pc, #168]	@ (8011ad8 <pcb_new+0xc8>)
 8011a2e:	482b      	ldr	r0, [pc, #172]	@ (8011adc <pcb_new+0xcc>)
 8011a30:	f00e fe30 	bl	8020694 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a3e:	2b10      	cmp	r3, #16
 8011a40:	d022      	beq.n	8011a88 <pcb_new+0x78>
 8011a42:	2b20      	cmp	r3, #32
 8011a44:	d133      	bne.n	8011aae <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681c      	ldr	r4, [r3, #0]
 8011a4a:	7bfb      	ldrb	r3, [r7, #15]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f00a fbb6 	bl	801c1be <udp_new_ip_type>
 8011a52:	4603      	mov	r3, r0
 8011a54:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d02a      	beq.n	8011ab6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	2b22      	cmp	r3, #34	@ 0x22
 8011a68:	d104      	bne.n	8011a74 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	2201      	movs	r2, #1
 8011a72:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	6858      	ldr	r0, [r3, #4]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	4917      	ldr	r1, [pc, #92]	@ (8011ae0 <pcb_new+0xd0>)
 8011a82:	f00a fb23 	bl	801c0cc <udp_recv>
      }
      break;
 8011a86:	e016      	b.n	8011ab6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681c      	ldr	r4, [r3, #0]
 8011a8c:	7bfb      	ldrb	r3, [r7, #15]
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f004 fdc2 	bl	8016618 <tcp_new_ip_type>
 8011a94:	4603      	mov	r3, r0
 8011a96:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00b      	beq.n	8011aba <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7ff ff8a 	bl	80119c0 <setup_tcp>
      }
      break;
 8011aac:	e005      	b.n	8011aba <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	22fa      	movs	r2, #250	@ 0xfa
 8011ab2:	711a      	strb	r2, [r3, #4]
      return;
 8011ab4:	e00a      	b.n	8011acc <pcb_new+0xbc>
      break;
 8011ab6:	bf00      	nop
 8011ab8:	e000      	b.n	8011abc <pcb_new+0xac>
      break;
 8011aba:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	22ff      	movs	r2, #255	@ 0xff
 8011aca:	711a      	strb	r2, [r3, #4]
  }
}
 8011acc:	3714      	adds	r7, #20
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd90      	pop	{r4, r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	08021bcc 	.word	0x08021bcc
 8011ad8:	08021db0 	.word	0x08021db0
 8011adc:	08021c10 	.word	0x08021c10
 8011ae0:	0801149d 	.word	0x0801149d

08011ae4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2200      	movs	r2, #0
 8011af4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d102      	bne.n	8011b06 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011b00:	68f8      	ldr	r0, [r7, #12]
 8011b02:	f7ff ff85 	bl	8011a10 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011b06:	bf00      	nop
 8011b08:	3710      	adds	r7, #16
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
	...

08011b10 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	4603      	mov	r3, r0
 8011b18:	6039      	str	r1, [r7, #0]
 8011b1a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011b20:	2007      	movs	r0, #7
 8011b22:	f001 fef9 	bl	8013918 <memp_malloc>
 8011b26:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d101      	bne.n	8011b32 <netconn_alloc+0x22>
    return NULL;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	e052      	b.n	8011bd8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	2200      	movs	r2, #0
 8011b36:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	79fa      	ldrb	r2, [r7, #7]
 8011b3c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2200      	movs	r2, #0
 8011b42:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011b44:	79fb      	ldrb	r3, [r7, #7]
 8011b46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011b4a:	2b10      	cmp	r3, #16
 8011b4c:	d004      	beq.n	8011b58 <netconn_alloc+0x48>
 8011b4e:	2b20      	cmp	r3, #32
 8011b50:	d105      	bne.n	8011b5e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011b52:	2306      	movs	r3, #6
 8011b54:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011b56:	e00a      	b.n	8011b6e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011b58:	2306      	movs	r3, #6
 8011b5a:	617b      	str	r3, [r7, #20]
      break;
 8011b5c:	e007      	b.n	8011b6e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011b5e:	4b20      	ldr	r3, [pc, #128]	@ (8011be0 <netconn_alloc+0xd0>)
 8011b60:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8011b64:	491f      	ldr	r1, [pc, #124]	@ (8011be4 <netconn_alloc+0xd4>)
 8011b66:	4820      	ldr	r0, [pc, #128]	@ (8011be8 <netconn_alloc+0xd8>)
 8011b68:	f00e fd94 	bl	8020694 <iprintf>
      goto free_and_return;
 8011b6c:	e02f      	b.n	8011bce <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	3310      	adds	r3, #16
 8011b72:	6979      	ldr	r1, [r7, #20]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f00d f903 	bl	801ed80 <sys_mbox_new>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d125      	bne.n	8011bcc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	330c      	adds	r3, #12
 8011b84:	2100      	movs	r1, #0
 8011b86:	4618      	mov	r0, r3
 8011b88:	f00d f9de 	bl	801ef48 <sys_sem_new>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d005      	beq.n	8011b9e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	3310      	adds	r3, #16
 8011b96:	4618      	mov	r0, r3
 8011b98:	f00d f924 	bl	801ede4 <sys_mbox_free>
    goto free_and_return;
 8011b9c:	e017      	b.n	8011bce <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3314      	adds	r3, #20
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f00d f9c3 	bl	801ef2e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2200      	movs	r2, #0
 8011bac:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011bb4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	683a      	ldr	r2, [r7, #0]
 8011bba:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	7cfa      	ldrb	r2, [r7, #19]
 8011bc6:	771a      	strb	r2, [r3, #28]
  return conn;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	e005      	b.n	8011bd8 <netconn_alloc+0xc8>
    goto free_and_return;
 8011bcc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011bce:	68f9      	ldr	r1, [r7, #12]
 8011bd0:	2007      	movs	r0, #7
 8011bd2:	f001 ff1d 	bl	8013a10 <memp_free>
  return NULL;
 8011bd6:	2300      	movs	r3, #0
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3718      	adds	r7, #24
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	08021bcc 	.word	0x08021bcc
 8011be4:	08021dd0 	.word	0x08021dd0
 8011be8:	08021c10 	.word	0x08021c10

08011bec <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d006      	beq.n	8011c0a <netconn_free+0x1e>
 8011bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8011c6c <netconn_free+0x80>)
 8011bfe:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011c02:	491b      	ldr	r1, [pc, #108]	@ (8011c70 <netconn_free+0x84>)
 8011c04:	481b      	ldr	r0, [pc, #108]	@ (8011c74 <netconn_free+0x88>)
 8011c06:	f00e fd45 	bl	8020694 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	3310      	adds	r3, #16
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f00d f97c 	bl	801ef0c <sys_mbox_valid>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d006      	beq.n	8011c28 <netconn_free+0x3c>
 8011c1a:	4b14      	ldr	r3, [pc, #80]	@ (8011c6c <netconn_free+0x80>)
 8011c1c:	f240 3223 	movw	r2, #803	@ 0x323
 8011c20:	4915      	ldr	r1, [pc, #84]	@ (8011c78 <netconn_free+0x8c>)
 8011c22:	4814      	ldr	r0, [pc, #80]	@ (8011c74 <netconn_free+0x88>)
 8011c24:	f00e fd36 	bl	8020694 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	3314      	adds	r3, #20
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f00d f96d 	bl	801ef0c <sys_mbox_valid>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d006      	beq.n	8011c46 <netconn_free+0x5a>
 8011c38:	4b0c      	ldr	r3, [pc, #48]	@ (8011c6c <netconn_free+0x80>)
 8011c3a:	f240 3226 	movw	r2, #806	@ 0x326
 8011c3e:	490f      	ldr	r1, [pc, #60]	@ (8011c7c <netconn_free+0x90>)
 8011c40:	480c      	ldr	r0, [pc, #48]	@ (8011c74 <netconn_free+0x88>)
 8011c42:	f00e fd27 	bl	8020694 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	330c      	adds	r3, #12
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f00d fa00 	bl	801f050 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	330c      	adds	r3, #12
 8011c54:	4618      	mov	r0, r3
 8011c56:	f00d fa24 	bl	801f0a2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011c5a:	6879      	ldr	r1, [r7, #4]
 8011c5c:	2007      	movs	r0, #7
 8011c5e:	f001 fed7 	bl	8013a10 <memp_free>
}
 8011c62:	bf00      	nop
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	08021bcc 	.word	0x08021bcc
 8011c70:	08021df8 	.word	0x08021df8
 8011c74:	08021c10 	.word	0x08021c10
 8011c78:	08021e28 	.word	0x08021e28
 8011c7c:	08021e64 	.word	0x08021e64

08011c80 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b086      	sub	sp, #24
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	3310      	adds	r3, #16
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f00d f93d 	bl	801ef0c <sys_mbox_valid>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d02f      	beq.n	8011cf8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011c98:	e018      	b.n	8011ccc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011ca2:	2b10      	cmp	r3, #16
 8011ca4:	d10e      	bne.n	8011cc4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	f107 020f 	add.w	r2, r7, #15
 8011cac:	4611      	mov	r1, r2
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7ff fbba 	bl	8011428 <lwip_netconn_is_err_msg>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d108      	bne.n	8011ccc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f002 fe8d 	bl	80149dc <pbuf_free>
 8011cc2:	e003      	b.n	8011ccc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f000 fdee 	bl	80128a8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	3310      	adds	r3, #16
 8011cd0:	f107 0210 	add.w	r2, r7, #16
 8011cd4:	4611      	mov	r1, r2
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f00d f901 	bl	801eede <sys_arch_mbox_tryfetch>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011ce2:	d1da      	bne.n	8011c9a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	3310      	adds	r3, #16
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f00d f87b 	bl	801ede4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	3310      	adds	r3, #16
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f00d f91b 	bl	801ef2e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	3314      	adds	r3, #20
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f00d f905 	bl	801ef0c <sys_mbox_valid>
 8011d02:	4603      	mov	r3, r0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d034      	beq.n	8011d72 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011d08:	e01d      	b.n	8011d46 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	f107 020e 	add.w	r2, r7, #14
 8011d10:	4611      	mov	r1, r2
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7ff fb88 	bl	8011428 <lwip_netconn_is_err_msg>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d113      	bne.n	8011d46 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011d22:	6978      	ldr	r0, [r7, #20]
 8011d24:	f7ff ffac 	bl	8011c80 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d007      	beq.n	8011d40 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	4618      	mov	r0, r3
 8011d36:	f003 fc8d 	bl	8015654 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011d40:	6978      	ldr	r0, [r7, #20]
 8011d42:	f7ff ff53 	bl	8011bec <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	3314      	adds	r3, #20
 8011d4a:	f107 0210 	add.w	r2, r7, #16
 8011d4e:	4611      	mov	r1, r2
 8011d50:	4618      	mov	r0, r3
 8011d52:	f00d f8c4 	bl	801eede <sys_arch_mbox_tryfetch>
 8011d56:	4603      	mov	r3, r0
 8011d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d5c:	d1d5      	bne.n	8011d0a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	3314      	adds	r3, #20
 8011d62:	4618      	mov	r0, r3
 8011d64:	f00d f83e 	bl	801ede4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	3314      	adds	r3, #20
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f00d f8de 	bl	801ef2e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011d72:	bf00      	nop
 8011d74:	3718      	adds	r7, #24
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
	...

08011d7c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b086      	sub	sp, #24
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	460b      	mov	r3, r1
 8011d86:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d106      	bne.n	8011da0 <lwip_netconn_do_close_internal+0x24>
 8011d92:	4b87      	ldr	r3, [pc, #540]	@ (8011fb0 <lwip_netconn_do_close_internal+0x234>)
 8011d94:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8011d98:	4986      	ldr	r1, [pc, #536]	@ (8011fb4 <lwip_netconn_do_close_internal+0x238>)
 8011d9a:	4887      	ldr	r0, [pc, #540]	@ (8011fb8 <lwip_netconn_do_close_internal+0x23c>)
 8011d9c:	f00e fc7a 	bl	8020694 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011da8:	2b10      	cmp	r3, #16
 8011daa:	d006      	beq.n	8011dba <lwip_netconn_do_close_internal+0x3e>
 8011dac:	4b80      	ldr	r3, [pc, #512]	@ (8011fb0 <lwip_netconn_do_close_internal+0x234>)
 8011dae:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8011db2:	4982      	ldr	r1, [pc, #520]	@ (8011fbc <lwip_netconn_do_close_internal+0x240>)
 8011db4:	4880      	ldr	r0, [pc, #512]	@ (8011fb8 <lwip_netconn_do_close_internal+0x23c>)
 8011db6:	f00e fc6d 	bl	8020694 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	785b      	ldrb	r3, [r3, #1]
 8011dbe:	2b04      	cmp	r3, #4
 8011dc0:	d006      	beq.n	8011dd0 <lwip_netconn_do_close_internal+0x54>
 8011dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8011fb0 <lwip_netconn_do_close_internal+0x234>)
 8011dc4:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8011dc8:	497d      	ldr	r1, [pc, #500]	@ (8011fc0 <lwip_netconn_do_close_internal+0x244>)
 8011dca:	487b      	ldr	r0, [pc, #492]	@ (8011fb8 <lwip_netconn_do_close_internal+0x23c>)
 8011dcc:	f00e fc62 	bl	8020694 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d106      	bne.n	8011de6 <lwip_netconn_do_close_internal+0x6a>
 8011dd8:	4b75      	ldr	r3, [pc, #468]	@ (8011fb0 <lwip_netconn_do_close_internal+0x234>)
 8011dda:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8011dde:	4979      	ldr	r1, [pc, #484]	@ (8011fc4 <lwip_netconn_do_close_internal+0x248>)
 8011de0:	4875      	ldr	r0, [pc, #468]	@ (8011fb8 <lwip_netconn_do_close_internal+0x23c>)
 8011de2:	f00e fc57 	bl	8020694 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6a1b      	ldr	r3, [r3, #32]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d106      	bne.n	8011dfc <lwip_netconn_do_close_internal+0x80>
 8011dee:	4b70      	ldr	r3, [pc, #448]	@ (8011fb0 <lwip_netconn_do_close_internal+0x234>)
 8011df0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011df4:	4974      	ldr	r1, [pc, #464]	@ (8011fc8 <lwip_netconn_do_close_internal+0x24c>)
 8011df6:	4870      	ldr	r0, [pc, #448]	@ (8011fb8 <lwip_netconn_do_close_internal+0x23c>)
 8011df8:	f00e fc4c 	bl	8020694 <iprintf>

  tpcb = conn->pcb.tcp;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6a1b      	ldr	r3, [r3, #32]
 8011e06:	7a1b      	ldrb	r3, [r3, #8]
 8011e08:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011e0a:	7bfb      	ldrb	r3, [r7, #15]
 8011e0c:	f003 0301 	and.w	r3, r3, #1
 8011e10:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011e12:	7bfb      	ldrb	r3, [r7, #15]
 8011e14:	f003 0302 	and.w	r3, r3, #2
 8011e18:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011e1a:	7bfb      	ldrb	r3, [r7, #15]
 8011e1c:	2b03      	cmp	r3, #3
 8011e1e:	d102      	bne.n	8011e26 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011e20:	2301      	movs	r3, #1
 8011e22:	75bb      	strb	r3, [r7, #22]
 8011e24:	e01f      	b.n	8011e66 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011e26:	7bbb      	ldrb	r3, [r7, #14]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00e      	beq.n	8011e4a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011e30:	2b05      	cmp	r3, #5
 8011e32:	d007      	beq.n	8011e44 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011e38:	2b06      	cmp	r3, #6
 8011e3a:	d003      	beq.n	8011e44 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011e3c:	693b      	ldr	r3, [r7, #16]
 8011e3e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011e40:	2b08      	cmp	r3, #8
 8011e42:	d102      	bne.n	8011e4a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011e44:	2301      	movs	r3, #1
 8011e46:	75bb      	strb	r3, [r7, #22]
 8011e48:	e00d      	b.n	8011e66 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011e4a:	7b7b      	ldrb	r3, [r7, #13]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d008      	beq.n	8011e62 <lwip_netconn_do_close_internal+0xe6>
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	8b5b      	ldrh	r3, [r3, #26]
 8011e54:	f003 0310 	and.w	r3, r3, #16
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d002      	beq.n	8011e62 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	75bb      	strb	r3, [r7, #22]
 8011e60:	e001      	b.n	8011e66 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011e66:	7dbb      	ldrb	r3, [r7, #22]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d003      	beq.n	8011e74 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8011e6c:	2100      	movs	r1, #0
 8011e6e:	6938      	ldr	r0, [r7, #16]
 8011e70:	f004 fbe0 	bl	8016634 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	7d1b      	ldrb	r3, [r3, #20]
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d104      	bne.n	8011e86 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	6938      	ldr	r0, [r7, #16]
 8011e80:	f004 fc50 	bl	8016724 <tcp_accept>
 8011e84:	e01d      	b.n	8011ec2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011e86:	7bbb      	ldrb	r3, [r7, #14]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d007      	beq.n	8011e9c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	6938      	ldr	r0, [r7, #16]
 8011e90:	f004 fbe2 	bl	8016658 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011e94:	2100      	movs	r1, #0
 8011e96:	6938      	ldr	r0, [r7, #16]
 8011e98:	f004 fc44 	bl	8016724 <tcp_accept>
    }
    if (shut_tx) {
 8011e9c:	7b7b      	ldrb	r3, [r7, #13]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d003      	beq.n	8011eaa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011ea2:	2100      	movs	r1, #0
 8011ea4:	6938      	ldr	r0, [r7, #16]
 8011ea6:	f004 fbf9 	bl	801669c <tcp_sent>
    }
    if (shut_close) {
 8011eaa:	7dbb      	ldrb	r3, [r7, #22]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d008      	beq.n	8011ec2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	6938      	ldr	r0, [r7, #16]
 8011eb6:	f004 fc4d 	bl	8016754 <tcp_poll>
      tcp_err(tpcb, NULL);
 8011eba:	2100      	movs	r1, #0
 8011ebc:	6938      	ldr	r0, [r7, #16]
 8011ebe:	f004 fc0f 	bl	80166e0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011ec2:	7dbb      	ldrb	r3, [r7, #22]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d005      	beq.n	8011ed4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011ec8:	6938      	ldr	r0, [r7, #16]
 8011eca:	f003 fa7d 	bl	80153c8 <tcp_close>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	75fb      	strb	r3, [r7, #23]
 8011ed2:	e007      	b.n	8011ee4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011ed4:	7bbb      	ldrb	r3, [r7, #14]
 8011ed6:	7b7a      	ldrb	r2, [r7, #13]
 8011ed8:	4619      	mov	r1, r3
 8011eda:	6938      	ldr	r0, [r7, #16]
 8011edc:	f003 faa0 	bl	8015420 <tcp_shutdown>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d102      	bne.n	8011ef2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011eec:	2301      	movs	r3, #1
 8011eee:	757b      	strb	r3, [r7, #21]
 8011ef0:	e016      	b.n	8011f20 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011efa:	d10f      	bne.n	8011f1c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6a1b      	ldr	r3, [r3, #32]
 8011f00:	7a5b      	ldrb	r3, [r3, #9]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d10c      	bne.n	8011f20 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011f06:	2301      	movs	r3, #1
 8011f08:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011f0a:	7dbb      	ldrb	r3, [r7, #22]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d007      	beq.n	8011f20 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011f10:	6938      	ldr	r0, [r7, #16]
 8011f12:	f003 fb9f 	bl	8015654 <tcp_abort>
          err = ERR_OK;
 8011f16:	2300      	movs	r3, #0
 8011f18:	75fb      	strb	r3, [r7, #23]
 8011f1a:	e001      	b.n	8011f20 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011f20:	7d7b      	ldrb	r3, [r7, #21]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d052      	beq.n	8011fcc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	6a1b      	ldr	r3, [r3, #32]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	330c      	adds	r3, #12
 8011f2e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a1b      	ldr	r3, [r3, #32]
 8011f34:	7dfa      	ldrb	r2, [r7, #23]
 8011f36:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2200      	movs	r2, #0
 8011f42:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d129      	bne.n	8011fa0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011f4c:	7dbb      	ldrb	r3, [r7, #22]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d00c      	beq.n	8011f6c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d005      	beq.n	8011f6c <lwip_netconn_do_close_internal+0x1f0>
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f64:	2200      	movs	r2, #0
 8011f66:	2104      	movs	r1, #4
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	4798      	blx	r3
      }
      if (shut_rx) {
 8011f6c:	7bbb      	ldrb	r3, [r7, #14]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d009      	beq.n	8011f86 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d005      	beq.n	8011f86 <lwip_netconn_do_close_internal+0x20a>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f7e:	2200      	movs	r2, #0
 8011f80:	2100      	movs	r1, #0
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	4798      	blx	r3
      }
      if (shut_tx) {
 8011f86:	7b7b      	ldrb	r3, [r7, #13]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d009      	beq.n	8011fa0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d005      	beq.n	8011fa0 <lwip_netconn_do_close_internal+0x224>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f98:	2200      	movs	r2, #0
 8011f9a:	2102      	movs	r1, #2
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011fa0:	78fb      	ldrb	r3, [r7, #3]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d002      	beq.n	8011fac <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011fa6:	68b8      	ldr	r0, [r7, #8]
 8011fa8:	f00d f845 	bl	801f036 <sys_sem_signal>
    }
    return ERR_OK;
 8011fac:	2300      	movs	r3, #0
 8011fae:	e03c      	b.n	801202a <lwip_netconn_do_close_internal+0x2ae>
 8011fb0:	08021bcc 	.word	0x08021bcc
 8011fb4:	08021ea0 	.word	0x08021ea0
 8011fb8:	08021c10 	.word	0x08021c10
 8011fbc:	08021eb0 	.word	0x08021eb0
 8011fc0:	08021ed0 	.word	0x08021ed0
 8011fc4:	08021ef4 	.word	0x08021ef4
 8011fc8:	08021d34 	.word	0x08021d34
  }
  if (!close_finished) {
 8011fcc:	7d7b      	ldrb	r3, [r7, #21]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d11e      	bne.n	8012010 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	7d1b      	ldrb	r3, [r3, #20]
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d106      	bne.n	8011fe8 <lwip_netconn_do_close_internal+0x26c>
 8011fda:	4b16      	ldr	r3, [pc, #88]	@ (8012034 <lwip_netconn_do_close_internal+0x2b8>)
 8011fdc:	f240 4241 	movw	r2, #1089	@ 0x441
 8011fe0:	4915      	ldr	r1, [pc, #84]	@ (8012038 <lwip_netconn_do_close_internal+0x2bc>)
 8011fe2:	4816      	ldr	r0, [pc, #88]	@ (801203c <lwip_netconn_do_close_internal+0x2c0>)
 8011fe4:	f00e fb56 	bl	8020694 <iprintf>
    if (shut_tx) {
 8011fe8:	7b7b      	ldrb	r3, [r7, #13]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d003      	beq.n	8011ff6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8011fee:	4914      	ldr	r1, [pc, #80]	@ (8012040 <lwip_netconn_do_close_internal+0x2c4>)
 8011ff0:	6938      	ldr	r0, [r7, #16]
 8011ff2:	f004 fb53 	bl	801669c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	4912      	ldr	r1, [pc, #72]	@ (8012044 <lwip_netconn_do_close_internal+0x2c8>)
 8011ffa:	6938      	ldr	r0, [r7, #16]
 8011ffc:	f004 fbaa 	bl	8016754 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8012000:	4911      	ldr	r1, [pc, #68]	@ (8012048 <lwip_netconn_do_close_internal+0x2cc>)
 8012002:	6938      	ldr	r0, [r7, #16]
 8012004:	f004 fb6c 	bl	80166e0 <tcp_err>
    tcp_arg(tpcb, conn);
 8012008:	6879      	ldr	r1, [r7, #4]
 801200a:	6938      	ldr	r0, [r7, #16]
 801200c:	f004 fb12 	bl	8016634 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8012010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d106      	bne.n	8012026 <lwip_netconn_do_close_internal+0x2aa>
 8012018:	4b06      	ldr	r3, [pc, #24]	@ (8012034 <lwip_netconn_do_close_internal+0x2b8>)
 801201a:	f240 424d 	movw	r2, #1101	@ 0x44d
 801201e:	490b      	ldr	r1, [pc, #44]	@ (801204c <lwip_netconn_do_close_internal+0x2d0>)
 8012020:	4806      	ldr	r0, [pc, #24]	@ (801203c <lwip_netconn_do_close_internal+0x2c0>)
 8012022:	f00e fb37 	bl	8020694 <iprintf>
  return err;
 8012026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801202a:	4618      	mov	r0, r3
 801202c:	3718      	adds	r7, #24
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}
 8012032:	bf00      	nop
 8012034:	08021bcc 	.word	0x08021bcc
 8012038:	08021f08 	.word	0x08021f08
 801203c:	08021c10 	.word	0x08021c10
 8012040:	0801176d 	.word	0x0801176d
 8012044:	080116a5 	.word	0x080116a5
 8012048:	08011815 	.word	0x08011815
 801204c:	08021f2c 	.word	0x08021f2c

08012050 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b084      	sub	sp, #16
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	785b      	ldrb	r3, [r3, #1]
 8012062:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012064:	7afb      	ldrb	r3, [r7, #11]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d00d      	beq.n	8012086 <lwip_netconn_do_delconn+0x36>
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012074:	2b10      	cmp	r3, #16
 8012076:	d006      	beq.n	8012086 <lwip_netconn_do_delconn+0x36>
 8012078:	4b60      	ldr	r3, [pc, #384]	@ (80121fc <lwip_netconn_do_delconn+0x1ac>)
 801207a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801207e:	4960      	ldr	r1, [pc, #384]	@ (8012200 <lwip_netconn_do_delconn+0x1b0>)
 8012080:	4860      	ldr	r0, [pc, #384]	@ (8012204 <lwip_netconn_do_delconn+0x1b4>)
 8012082:	f00e fb07 	bl	8020694 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012086:	7afb      	ldrb	r3, [r7, #11]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d005      	beq.n	8012098 <lwip_netconn_do_delconn+0x48>
 801208c:	7afb      	ldrb	r3, [r7, #11]
 801208e:	2b02      	cmp	r3, #2
 8012090:	d002      	beq.n	8012098 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8012092:	7afb      	ldrb	r3, [r7, #11]
 8012094:	2b03      	cmp	r3, #3
 8012096:	d109      	bne.n	80120ac <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012098:	7afb      	ldrb	r3, [r7, #11]
 801209a:	2b03      	cmp	r3, #3
 801209c:	d10a      	bne.n	80120b4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	7f1b      	ldrb	r3, [r3, #28]
 80120a4:	f003 0304 	and.w	r3, r3, #4
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d103      	bne.n	80120b4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	22fb      	movs	r2, #251	@ 0xfb
 80120b0:	711a      	strb	r2, [r3, #4]
 80120b2:	e097      	b.n	80121e4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80120b4:	7afb      	ldrb	r3, [r7, #11]
 80120b6:	2b03      	cmp	r3, #3
 80120b8:	d10d      	bne.n	80120d6 <lwip_netconn_do_delconn+0x86>
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	7f1b      	ldrb	r3, [r3, #28]
 80120c0:	f003 0304 	and.w	r3, r3, #4
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d106      	bne.n	80120d6 <lwip_netconn_do_delconn+0x86>
 80120c8:	4b4c      	ldr	r3, [pc, #304]	@ (80121fc <lwip_netconn_do_delconn+0x1ac>)
 80120ca:	f240 427a 	movw	r2, #1146	@ 0x47a
 80120ce:	494e      	ldr	r1, [pc, #312]	@ (8012208 <lwip_netconn_do_delconn+0x1b8>)
 80120d0:	484c      	ldr	r0, [pc, #304]	@ (8012204 <lwip_netconn_do_delconn+0x1b4>)
 80120d2:	f00e fadf 	bl	8020694 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2200      	movs	r2, #0
 80120da:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7ff fdcd 	bl	8011c80 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d05f      	beq.n	80121b0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80120fa:	2b10      	cmp	r3, #16
 80120fc:	d00d      	beq.n	801211a <lwip_netconn_do_delconn+0xca>
 80120fe:	2b20      	cmp	r3, #32
 8012100:	d151      	bne.n	80121a6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	2200      	movs	r2, #0
 801210a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	4618      	mov	r0, r3
 8012114:	f009 fffa 	bl	801c10c <udp_remove>
          break;
 8012118:	e046      	b.n	80121a8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	6a1b      	ldr	r3, [r3, #32]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d006      	beq.n	8012132 <lwip_netconn_do_delconn+0xe2>
 8012124:	4b35      	ldr	r3, [pc, #212]	@ (80121fc <lwip_netconn_do_delconn+0x1ac>)
 8012126:	f240 4294 	movw	r2, #1172	@ 0x494
 801212a:	4938      	ldr	r1, [pc, #224]	@ (801220c <lwip_netconn_do_delconn+0x1bc>)
 801212c:	4835      	ldr	r0, [pc, #212]	@ (8012204 <lwip_netconn_do_delconn+0x1b4>)
 801212e:	f00e fab1 	bl	8020694 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	2204      	movs	r2, #4
 8012138:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2203      	movs	r2, #3
 801213e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2100      	movs	r1, #0
 801214e:	4618      	mov	r0, r3
 8012150:	f7ff fe14 	bl	8011d7c <lwip_netconn_do_close_internal>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	d04b      	beq.n	80121f2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	785b      	ldrb	r3, [r3, #1]
 8012160:	2b04      	cmp	r3, #4
 8012162:	d006      	beq.n	8012172 <lwip_netconn_do_delconn+0x122>
 8012164:	4b25      	ldr	r3, [pc, #148]	@ (80121fc <lwip_netconn_do_delconn+0x1ac>)
 8012166:	f240 429a 	movw	r2, #1178	@ 0x49a
 801216a:	4929      	ldr	r1, [pc, #164]	@ (8012210 <lwip_netconn_do_delconn+0x1c0>)
 801216c:	4825      	ldr	r0, [pc, #148]	@ (8012204 <lwip_netconn_do_delconn+0x1b4>)
 801216e:	f00e fa91 	bl	8020694 <iprintf>
            UNLOCK_TCPIP_CORE();
 8012172:	4828      	ldr	r0, [pc, #160]	@ (8012214 <lwip_netconn_do_delconn+0x1c4>)
 8012174:	f00c fff3 	bl	801f15e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	330c      	adds	r3, #12
 801217e:	2100      	movs	r1, #0
 8012180:	4618      	mov	r0, r3
 8012182:	f00c ff27 	bl	801efd4 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012186:	4823      	ldr	r0, [pc, #140]	@ (8012214 <lwip_netconn_do_delconn+0x1c4>)
 8012188:	f00c ffda 	bl	801f140 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	785b      	ldrb	r3, [r3, #1]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d02d      	beq.n	80121f2 <lwip_netconn_do_delconn+0x1a2>
 8012196:	4b19      	ldr	r3, [pc, #100]	@ (80121fc <lwip_netconn_do_delconn+0x1ac>)
 8012198:	f240 429e 	movw	r2, #1182	@ 0x49e
 801219c:	491c      	ldr	r1, [pc, #112]	@ (8012210 <lwip_netconn_do_delconn+0x1c0>)
 801219e:	4819      	ldr	r0, [pc, #100]	@ (8012204 <lwip_netconn_do_delconn+0x1b4>)
 80121a0:	f00e fa78 	bl	8020694 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80121a4:	e025      	b.n	80121f2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80121a6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2200      	movs	r2, #0
 80121ae:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d007      	beq.n	80121ca <lwip_netconn_do_delconn+0x17a>
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121c0:	68fa      	ldr	r2, [r7, #12]
 80121c2:	6810      	ldr	r0, [r2, #0]
 80121c4:	2200      	movs	r2, #0
 80121c6:	2100      	movs	r1, #0
 80121c8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d007      	beq.n	80121e4 <lwip_netconn_do_delconn+0x194>
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	6810      	ldr	r0, [r2, #0]
 80121de:	2200      	movs	r2, #0
 80121e0:	2102      	movs	r1, #2
 80121e2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	330c      	adds	r3, #12
 80121ea:	4618      	mov	r0, r3
 80121ec:	f00c ff48 	bl	801f080 <sys_sem_valid>
 80121f0:	e000      	b.n	80121f4 <lwip_netconn_do_delconn+0x1a4>
          return;
 80121f2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80121f4:	3710      	adds	r7, #16
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	08021bcc 	.word	0x08021bcc
 8012200:	08021f3c 	.word	0x08021f3c
 8012204:	08021c10 	.word	0x08021c10
 8012208:	08021f50 	.word	0x08021f50
 801220c:	08021f70 	.word	0x08021f70
 8012210:	08021f8c 	.word	0x08021f8c
 8012214:	200270f8 	.word	0x200270f8

08012218 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d025      	beq.n	801227a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012238:	2b10      	cmp	r3, #16
 801223a:	d00e      	beq.n	801225a <lwip_netconn_do_bind+0x42>
 801223c:	2b20      	cmp	r3, #32
 801223e:	d119      	bne.n	8012274 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	6858      	ldr	r0, [r3, #4]
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	6899      	ldr	r1, [r3, #8]
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	899b      	ldrh	r3, [r3, #12]
 801224e:	461a      	mov	r2, r3
 8012250:	f009 fe4e 	bl	801bef0 <udp_bind>
 8012254:	4603      	mov	r3, r0
 8012256:	73fb      	strb	r3, [r7, #15]
        break;
 8012258:	e011      	b.n	801227e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	6858      	ldr	r0, [r3, #4]
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	6899      	ldr	r1, [r3, #8]
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	899b      	ldrh	r3, [r3, #12]
 8012268:	461a      	mov	r2, r3
 801226a:	f003 f9ff 	bl	801566c <tcp_bind>
 801226e:	4603      	mov	r3, r0
 8012270:	73fb      	strb	r3, [r7, #15]
        break;
 8012272:	e004      	b.n	801227e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012274:	23fa      	movs	r3, #250	@ 0xfa
 8012276:	73fb      	strb	r3, [r7, #15]
        break;
 8012278:	e001      	b.n	801227e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801227a:	23fa      	movs	r3, #250	@ 0xfa
 801227c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	7bfa      	ldrb	r2, [r7, #15]
 8012282:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012284:	bf00      	nop
 8012286:	3710      	adds	r7, #16
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4618      	mov	r0, r3
 801229e:	f7ff f871 	bl	8011384 <netconn_err>
 80122a2:	4603      	mov	r3, r0
 80122a4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80122a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d134      	bne.n	8012318 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d02d      	beq.n	8012314 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80122c2:	2b20      	cmp	r3, #32
 80122c4:	d123      	bne.n	801230e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	689b      	ldr	r3, [r3, #8]
 80122ca:	689b      	ldr	r3, [r3, #8]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d10c      	bne.n	80122ea <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	685a      	ldr	r2, [r3, #4]
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	689b      	ldr	r3, [r3, #8]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4619      	mov	r1, r3
 80122de:	4610      	mov	r0, r2
 80122e0:	f009 fb96 	bl	801ba10 <udp_send>
 80122e4:	4603      	mov	r3, r0
 80122e6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80122e8:	e016      	b.n	8012318 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	6858      	ldr	r0, [r3, #4]
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	689b      	ldr	r3, [r3, #8]
 80122f4:	6819      	ldr	r1, [r3, #0]
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	689b      	ldr	r3, [r3, #8]
 80122fa:	f103 0208 	add.w	r2, r3, #8
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	689b      	ldr	r3, [r3, #8]
 8012302:	899b      	ldrh	r3, [r3, #12]
 8012304:	f009 fbb8 	bl	801ba78 <udp_sendto>
 8012308:	4603      	mov	r3, r0
 801230a:	73fb      	strb	r3, [r7, #15]
          break;
 801230c:	e004      	b.n	8012318 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 801230e:	23f5      	movs	r3, #245	@ 0xf5
 8012310:	73fb      	strb	r3, [r7, #15]
          break;
 8012312:	e001      	b.n	8012318 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8012314:	23f5      	movs	r3, #245	@ 0xf5
 8012316:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	7bfa      	ldrb	r2, [r7, #15]
 801231c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801231e:	bf00      	nop
 8012320:	3710      	adds	r7, #16
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}

08012326 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8012326:	b580      	push	{r7, lr}
 8012328:	b086      	sub	sp, #24
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	2200      	movs	r2, #0
 8012336:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d022      	beq.n	8012388 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801234c:	2b10      	cmp	r3, #16
 801234e:	d11b      	bne.n	8012388 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	689b      	ldr	r3, [r3, #8]
 8012354:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801235c:	d202      	bcs.n	8012364 <lwip_netconn_do_recv+0x3e>
 801235e:	697b      	ldr	r3, [r7, #20]
 8012360:	b29b      	uxth	r3, r3
 8012362:	e001      	b.n	8012368 <lwip_netconn_do_recv+0x42>
 8012364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012368:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	89fa      	ldrh	r2, [r7, #14]
 8012372:	4611      	mov	r1, r2
 8012374:	4618      	mov	r0, r3
 8012376:	f003 fa6b 	bl	8015850 <tcp_recved>
        remaining -= recved;
 801237a:	89fb      	ldrh	r3, [r7, #14]
 801237c:	697a      	ldr	r2, [r7, #20]
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d1e6      	bne.n	8012356 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012388:	bf00      	nop
 801238a:	3718      	adds	r7, #24
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b088      	sub	sp, #32
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	460b      	mov	r3, r1
 801239a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801239c:	2300      	movs	r3, #0
 801239e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d106      	bne.n	80123b4 <lwip_netconn_do_writemore+0x24>
 80123a6:	4b96      	ldr	r3, [pc, #600]	@ (8012600 <lwip_netconn_do_writemore+0x270>)
 80123a8:	f240 6273 	movw	r2, #1651	@ 0x673
 80123ac:	4995      	ldr	r1, [pc, #596]	@ (8012604 <lwip_netconn_do_writemore+0x274>)
 80123ae:	4896      	ldr	r0, [pc, #600]	@ (8012608 <lwip_netconn_do_writemore+0x278>)
 80123b0:	f00e f970 	bl	8020694 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	785b      	ldrb	r3, [r3, #1]
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d006      	beq.n	80123ca <lwip_netconn_do_writemore+0x3a>
 80123bc:	4b90      	ldr	r3, [pc, #576]	@ (8012600 <lwip_netconn_do_writemore+0x270>)
 80123be:	f240 6274 	movw	r2, #1652	@ 0x674
 80123c2:	4992      	ldr	r1, [pc, #584]	@ (801260c <lwip_netconn_do_writemore+0x27c>)
 80123c4:	4890      	ldr	r0, [pc, #576]	@ (8012608 <lwip_netconn_do_writemore+0x278>)
 80123c6:	f00e f965 	bl	8020694 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6a1b      	ldr	r3, [r3, #32]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d106      	bne.n	80123e0 <lwip_netconn_do_writemore+0x50>
 80123d2:	4b8b      	ldr	r3, [pc, #556]	@ (8012600 <lwip_netconn_do_writemore+0x270>)
 80123d4:	f240 6275 	movw	r2, #1653	@ 0x675
 80123d8:	498d      	ldr	r1, [pc, #564]	@ (8012610 <lwip_netconn_do_writemore+0x280>)
 80123da:	488b      	ldr	r0, [pc, #556]	@ (8012608 <lwip_netconn_do_writemore+0x278>)
 80123dc:	f00e f95a 	bl	8020694 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d106      	bne.n	80123f6 <lwip_netconn_do_writemore+0x66>
 80123e8:	4b85      	ldr	r3, [pc, #532]	@ (8012600 <lwip_netconn_do_writemore+0x270>)
 80123ea:	f240 6276 	movw	r2, #1654	@ 0x676
 80123ee:	4989      	ldr	r1, [pc, #548]	@ (8012614 <lwip_netconn_do_writemore+0x284>)
 80123f0:	4885      	ldr	r0, [pc, #532]	@ (8012608 <lwip_netconn_do_writemore+0x278>)
 80123f2:	f00e f94f 	bl	8020694 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6a1b      	ldr	r3, [r3, #32]
 80123fa:	699a      	ldr	r2, [r3, #24]
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6a1b      	ldr	r3, [r3, #32]
 8012400:	695b      	ldr	r3, [r3, #20]
 8012402:	429a      	cmp	r2, r3
 8012404:	d306      	bcc.n	8012414 <lwip_netconn_do_writemore+0x84>
 8012406:	4b7e      	ldr	r3, [pc, #504]	@ (8012600 <lwip_netconn_do_writemore+0x270>)
 8012408:	f240 6277 	movw	r2, #1655	@ 0x677
 801240c:	4982      	ldr	r1, [pc, #520]	@ (8012618 <lwip_netconn_do_writemore+0x288>)
 801240e:	487e      	ldr	r0, [pc, #504]	@ (8012608 <lwip_netconn_do_writemore+0x278>)
 8012410:	f00e f940 	bl	8020694 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6a1b      	ldr	r3, [r3, #32]
 8012418:	899b      	ldrh	r3, [r3, #12]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d106      	bne.n	801242c <lwip_netconn_do_writemore+0x9c>
 801241e:	4b78      	ldr	r3, [pc, #480]	@ (8012600 <lwip_netconn_do_writemore+0x270>)
 8012420:	f240 6279 	movw	r2, #1657	@ 0x679
 8012424:	497d      	ldr	r1, [pc, #500]	@ (801261c <lwip_netconn_do_writemore+0x28c>)
 8012426:	4878      	ldr	r0, [pc, #480]	@ (8012608 <lwip_netconn_do_writemore+0x278>)
 8012428:	f00e f934 	bl	8020694 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6a1b      	ldr	r3, [r3, #32]
 8012430:	7f1b      	ldrb	r3, [r3, #28]
 8012432:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	7f1b      	ldrb	r3, [r3, #28]
 8012438:	f003 0302 	and.w	r3, r3, #2
 801243c:	2b00      	cmp	r3, #0
 801243e:	d104      	bne.n	801244a <lwip_netconn_do_writemore+0xba>
 8012440:	7ebb      	ldrb	r3, [r7, #26]
 8012442:	f003 0304 	and.w	r3, r3, #4
 8012446:	2b00      	cmp	r3, #0
 8012448:	d001      	beq.n	801244e <lwip_netconn_do_writemore+0xbe>
 801244a:	2301      	movs	r3, #1
 801244c:	e000      	b.n	8012450 <lwip_netconn_do_writemore+0xc0>
 801244e:	2300      	movs	r3, #0
 8012450:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6a1b      	ldr	r3, [r3, #32]
 8012456:	689b      	ldr	r3, [r3, #8]
 8012458:	681a      	ldr	r2, [r3, #0]
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6a1b      	ldr	r3, [r3, #32]
 801245e:	691b      	ldr	r3, [r3, #16]
 8012460:	4413      	add	r3, r2
 8012462:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a1b      	ldr	r3, [r3, #32]
 8012468:	689b      	ldr	r3, [r3, #8]
 801246a:	685a      	ldr	r2, [r3, #4]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6a1b      	ldr	r3, [r3, #32]
 8012470:	691b      	ldr	r3, [r3, #16]
 8012472:	1ad3      	subs	r3, r2, r3
 8012474:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801247c:	d307      	bcc.n	801248e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801247e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012482:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012484:	7ebb      	ldrb	r3, [r7, #26]
 8012486:	f043 0302 	orr.w	r3, r3, #2
 801248a:	76bb      	strb	r3, [r7, #26]
 801248c:	e001      	b.n	8012492 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801249a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801249c:	89fa      	ldrh	r2, [r7, #14]
 801249e:	8bbb      	ldrh	r3, [r7, #28]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d216      	bcs.n	80124d2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80124a4:	89fb      	ldrh	r3, [r7, #14]
 80124a6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80124a8:	7e3b      	ldrb	r3, [r7, #24]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00d      	beq.n	80124ca <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80124ae:	8bbb      	ldrh	r3, [r7, #28]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d10e      	bne.n	80124d2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6a1b      	ldr	r3, [r3, #32]
 80124b8:	699b      	ldr	r3, [r3, #24]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d102      	bne.n	80124c4 <lwip_netconn_do_writemore+0x134>
 80124be:	f06f 0306 	mvn.w	r3, #6
 80124c2:	e000      	b.n	80124c6 <lwip_netconn_do_writemore+0x136>
 80124c4:	2300      	movs	r3, #0
 80124c6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80124c8:	e07d      	b.n	80125c6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80124ca:	7ebb      	ldrb	r3, [r7, #26]
 80124cc:	f043 0302 	orr.w	r3, r3, #2
 80124d0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	6a1b      	ldr	r3, [r3, #32]
 80124d6:	691a      	ldr	r2, [r3, #16]
 80124d8:	8bbb      	ldrh	r3, [r7, #28]
 80124da:	441a      	add	r2, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6a1b      	ldr	r3, [r3, #32]
 80124e0:	689b      	ldr	r3, [r3, #8]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d906      	bls.n	80124f6 <lwip_netconn_do_writemore+0x166>
 80124e8:	4b45      	ldr	r3, [pc, #276]	@ (8012600 <lwip_netconn_do_writemore+0x270>)
 80124ea:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80124ee:	494c      	ldr	r1, [pc, #304]	@ (8012620 <lwip_netconn_do_writemore+0x290>)
 80124f0:	4845      	ldr	r0, [pc, #276]	@ (8012608 <lwip_netconn_do_writemore+0x278>)
 80124f2:	f00e f8cf 	bl	8020694 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80124f6:	8bbb      	ldrh	r3, [r7, #28]
 80124f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d103      	bne.n	8012508 <lwip_netconn_do_writemore+0x178>
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012506:	d209      	bcs.n	801251c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801250c:	8bba      	ldrh	r2, [r7, #28]
 801250e:	429a      	cmp	r2, r3
 8012510:	d10b      	bne.n	801252a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a1b      	ldr	r3, [r3, #32]
 8012516:	899b      	ldrh	r3, [r3, #12]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d906      	bls.n	801252a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 801251c:	2301      	movs	r3, #1
 801251e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012520:	7ebb      	ldrb	r3, [r7, #26]
 8012522:	f043 0302 	orr.w	r3, r3, #2
 8012526:	76bb      	strb	r3, [r7, #26]
 8012528:	e001      	b.n	801252e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801252a:	2300      	movs	r3, #0
 801252c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6858      	ldr	r0, [r3, #4]
 8012532:	7ebb      	ldrb	r3, [r7, #26]
 8012534:	8bba      	ldrh	r2, [r7, #28]
 8012536:	6979      	ldr	r1, [r7, #20]
 8012538:	f007 f83c 	bl	80195b4 <tcp_write>
 801253c:	4603      	mov	r3, r0
 801253e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012540:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d12c      	bne.n	80125a2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6a1b      	ldr	r3, [r3, #32]
 801254c:	6999      	ldr	r1, [r3, #24]
 801254e:	8bba      	ldrh	r2, [r7, #28]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6a1b      	ldr	r3, [r3, #32]
 8012554:	440a      	add	r2, r1
 8012556:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	6a1b      	ldr	r3, [r3, #32]
 801255c:	6919      	ldr	r1, [r3, #16]
 801255e:	8bba      	ldrh	r2, [r7, #28]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6a1b      	ldr	r3, [r3, #32]
 8012564:	440a      	add	r2, r1
 8012566:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6a1b      	ldr	r3, [r3, #32]
 801256c:	691a      	ldr	r2, [r3, #16]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6a1b      	ldr	r3, [r3, #32]
 8012572:	689b      	ldr	r3, [r3, #8]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	429a      	cmp	r2, r3
 8012578:	d113      	bne.n	80125a2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6a1b      	ldr	r3, [r3, #32]
 801257e:	899a      	ldrh	r2, [r3, #12]
 8012580:	3a01      	subs	r2, #1
 8012582:	b292      	uxth	r2, r2
 8012584:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a1b      	ldr	r3, [r3, #32]
 801258a:	899b      	ldrh	r3, [r3, #12]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d008      	beq.n	80125a2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6a1b      	ldr	r3, [r3, #32]
 8012594:	689a      	ldr	r2, [r3, #8]
 8012596:	3208      	adds	r2, #8
 8012598:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6a1b      	ldr	r3, [r3, #32]
 801259e:	2200      	movs	r2, #0
 80125a0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80125a2:	7e7b      	ldrb	r3, [r7, #25]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d004      	beq.n	80125b2 <lwip_netconn_do_writemore+0x222>
 80125a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f43f af50 	beq.w	8012452 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80125b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d004      	beq.n	80125c4 <lwip_netconn_do_writemore+0x234>
 80125ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80125c2:	d146      	bne.n	8012652 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80125c4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80125c6:	7e3b      	ldrb	r3, [r7, #24]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d02b      	beq.n	8012624 <lwip_netconn_do_writemore+0x294>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6a1b      	ldr	r3, [r3, #32]
 80125d0:	699a      	ldr	r2, [r3, #24]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6a1b      	ldr	r3, [r3, #32]
 80125d6:	695b      	ldr	r3, [r3, #20]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d223      	bcs.n	8012624 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d005      	beq.n	80125f0 <lwip_netconn_do_writemore+0x260>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125e8:	2200      	movs	r2, #0
 80125ea:	2103      	movs	r1, #3
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	7f1b      	ldrb	r3, [r3, #28]
 80125f4:	f043 0310 	orr.w	r3, r3, #16
 80125f8:	b2da      	uxtb	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	771a      	strb	r2, [r3, #28]
 80125fe:	e028      	b.n	8012652 <lwip_netconn_do_writemore+0x2c2>
 8012600:	08021bcc 	.word	0x08021bcc
 8012604:	08021d24 	.word	0x08021d24
 8012608:	08021c10 	.word	0x08021c10
 801260c:	0802202c 	.word	0x0802202c
 8012610:	08021d34 	.word	0x08021d34
 8012614:	0802204c 	.word	0x0802204c
 8012618:	08022064 	.word	0x08022064
 801261c:	080220a4 	.word	0x080220a4
 8012620:	080220cc 	.word	0x080220cc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801262c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8012630:	d305      	bcc.n	801263e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801263a:	2b04      	cmp	r3, #4
 801263c:	d909      	bls.n	8012652 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012642:	2b00      	cmp	r3, #0
 8012644:	d005      	beq.n	8012652 <lwip_netconn_do_writemore+0x2c2>
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801264a:	2200      	movs	r2, #0
 801264c:	2103      	movs	r1, #3
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012652:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d11d      	bne.n	8012696 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6a1b      	ldr	r3, [r3, #32]
 801265e:	699a      	ldr	r2, [r3, #24]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6a1b      	ldr	r3, [r3, #32]
 8012664:	695b      	ldr	r3, [r3, #20]
 8012666:	429a      	cmp	r2, r3
 8012668:	d002      	beq.n	8012670 <lwip_netconn_do_writemore+0x2e0>
 801266a:	7e3b      	ldrb	r3, [r7, #24]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d001      	beq.n	8012674 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012670:	2301      	movs	r3, #1
 8012672:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	4618      	mov	r0, r3
 801267a:	f007 fe09 	bl	801a290 <tcp_output>
 801267e:	4603      	mov	r3, r0
 8012680:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012682:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012686:	f113 0f04 	cmn.w	r3, #4
 801268a:	d12c      	bne.n	80126e6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801268c:	7b3b      	ldrb	r3, [r7, #12]
 801268e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012690:	2301      	movs	r3, #1
 8012692:	76fb      	strb	r3, [r7, #27]
 8012694:	e027      	b.n	80126e6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012696:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801269a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801269e:	d120      	bne.n	80126e2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	4618      	mov	r0, r3
 80126a6:	f007 fdf3 	bl	801a290 <tcp_output>
 80126aa:	4603      	mov	r3, r0
 80126ac:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80126ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80126b2:	f113 0f04 	cmn.w	r3, #4
 80126b6:	d104      	bne.n	80126c2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80126b8:	7b7b      	ldrb	r3, [r7, #13]
 80126ba:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80126bc:	2301      	movs	r3, #1
 80126be:	76fb      	strb	r3, [r7, #27]
 80126c0:	e011      	b.n	80126e6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80126c2:	7e3b      	ldrb	r3, [r7, #24]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00e      	beq.n	80126e6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6a1b      	ldr	r3, [r3, #32]
 80126cc:	699b      	ldr	r3, [r3, #24]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d102      	bne.n	80126d8 <lwip_netconn_do_writemore+0x348>
 80126d2:	f06f 0306 	mvn.w	r3, #6
 80126d6:	e000      	b.n	80126da <lwip_netconn_do_writemore+0x34a>
 80126d8:	2300      	movs	r3, #0
 80126da:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80126dc:	2301      	movs	r3, #1
 80126de:	76fb      	strb	r3, [r7, #27]
 80126e0:	e001      	b.n	80126e6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80126e2:	2301      	movs	r3, #1
 80126e4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80126e6:	7efb      	ldrb	r3, [r7, #27]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d015      	beq.n	8012718 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6a1b      	ldr	r3, [r3, #32]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	330c      	adds	r3, #12
 80126f4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a1b      	ldr	r3, [r3, #32]
 80126fa:	7ffa      	ldrb	r2, [r7, #31]
 80126fc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2200      	movs	r2, #0
 8012702:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2200      	movs	r2, #0
 8012708:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801270a:	78fb      	ldrb	r3, [r7, #3]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d006      	beq.n	801271e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012710:	68b8      	ldr	r0, [r7, #8]
 8012712:	f00c fc90 	bl	801f036 <sys_sem_signal>
 8012716:	e002      	b.n	801271e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801271c:	e000      	b.n	8012720 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 801271e:	2300      	movs	r3, #0
}
 8012720:	4618      	mov	r0, r3
 8012722:	3720      	adds	r7, #32
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}

08012728 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b084      	sub	sp, #16
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	785b      	ldrb	r3, [r3, #1]
 801273a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d069      	beq.n	801281a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012750:	2b10      	cmp	r3, #16
 8012752:	d162      	bne.n	801281a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012758:	2b03      	cmp	r3, #3
 801275a:	d002      	beq.n	8012762 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801275c:	7afb      	ldrb	r3, [r7, #11]
 801275e:	2b02      	cmp	r3, #2
 8012760:	d05b      	beq.n	801281a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012762:	7afb      	ldrb	r3, [r7, #11]
 8012764:	2b03      	cmp	r3, #3
 8012766:	d103      	bne.n	8012770 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	22f5      	movs	r2, #245	@ 0xf5
 801276c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801276e:	e059      	b.n	8012824 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012770:	7afb      	ldrb	r3, [r7, #11]
 8012772:	2b01      	cmp	r3, #1
 8012774:	d103      	bne.n	801277e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	22fb      	movs	r2, #251	@ 0xfb
 801277a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801277c:	e052      	b.n	8012824 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	7a1b      	ldrb	r3, [r3, #8]
 8012782:	f003 0301 	and.w	r3, r3, #1
 8012786:	2b00      	cmp	r3, #0
 8012788:	d004      	beq.n	8012794 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	4618      	mov	r0, r3
 8012790:	f7ff fa76 	bl	8011c80 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	6a1b      	ldr	r3, [r3, #32]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d006      	beq.n	80127ac <lwip_netconn_do_close+0x84>
 801279e:	4b23      	ldr	r3, [pc, #140]	@ (801282c <lwip_netconn_do_close+0x104>)
 80127a0:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80127a4:	4922      	ldr	r1, [pc, #136]	@ (8012830 <lwip_netconn_do_close+0x108>)
 80127a6:	4823      	ldr	r0, [pc, #140]	@ (8012834 <lwip_netconn_do_close+0x10c>)
 80127a8:	f00d ff74 	bl	8020694 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2204      	movs	r2, #4
 80127b2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	68fa      	ldr	r2, [r7, #12]
 80127ba:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	2100      	movs	r1, #0
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7ff fada 	bl	8011d7c <lwip_netconn_do_close_internal>
 80127c8:	4603      	mov	r3, r0
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d029      	beq.n	8012822 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	785b      	ldrb	r3, [r3, #1]
 80127d4:	2b04      	cmp	r3, #4
 80127d6:	d006      	beq.n	80127e6 <lwip_netconn_do_close+0xbe>
 80127d8:	4b14      	ldr	r3, [pc, #80]	@ (801282c <lwip_netconn_do_close+0x104>)
 80127da:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80127de:	4916      	ldr	r1, [pc, #88]	@ (8012838 <lwip_netconn_do_close+0x110>)
 80127e0:	4814      	ldr	r0, [pc, #80]	@ (8012834 <lwip_netconn_do_close+0x10c>)
 80127e2:	f00d ff57 	bl	8020694 <iprintf>
        UNLOCK_TCPIP_CORE();
 80127e6:	4815      	ldr	r0, [pc, #84]	@ (801283c <lwip_netconn_do_close+0x114>)
 80127e8:	f00c fcb9 	bl	801f15e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	330c      	adds	r3, #12
 80127f2:	2100      	movs	r1, #0
 80127f4:	4618      	mov	r0, r3
 80127f6:	f00c fbed 	bl	801efd4 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80127fa:	4810      	ldr	r0, [pc, #64]	@ (801283c <lwip_netconn_do_close+0x114>)
 80127fc:	f00c fca0 	bl	801f140 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	785b      	ldrb	r3, [r3, #1]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00b      	beq.n	8012822 <lwip_netconn_do_close+0xfa>
 801280a:	4b08      	ldr	r3, [pc, #32]	@ (801282c <lwip_netconn_do_close+0x104>)
 801280c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8012810:	4909      	ldr	r1, [pc, #36]	@ (8012838 <lwip_netconn_do_close+0x110>)
 8012812:	4808      	ldr	r0, [pc, #32]	@ (8012834 <lwip_netconn_do_close+0x10c>)
 8012814:	f00d ff3e 	bl	8020694 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012818:	e003      	b.n	8012822 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	22f5      	movs	r2, #245	@ 0xf5
 801281e:	711a      	strb	r2, [r3, #4]
 8012820:	e000      	b.n	8012824 <lwip_netconn_do_close+0xfc>
      return;
 8012822:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	08021bcc 	.word	0x08021bcc
 8012830:	08021f70 	.word	0x08021f70
 8012834:	08021c10 	.word	0x08021c10
 8012838:	08021f8c 	.word	0x08021f8c
 801283c:	200270f8 	.word	0x200270f8

08012840 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
 8012846:	4603      	mov	r3, r0
 8012848:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 801284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801284e:	2b00      	cmp	r3, #0
 8012850:	dc04      	bgt.n	801285c <lwip_strerr+0x1c>
 8012852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012856:	f113 0f10 	cmn.w	r3, #16
 801285a:	da01      	bge.n	8012860 <lwip_strerr+0x20>
    return "Unknown error.";
 801285c:	4b06      	ldr	r3, [pc, #24]	@ (8012878 <lwip_strerr+0x38>)
 801285e:	e005      	b.n	801286c <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8012860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012864:	425b      	negs	r3, r3
 8012866:	4a05      	ldr	r2, [pc, #20]	@ (801287c <lwip_strerr+0x3c>)
 8012868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 801286c:	4618      	mov	r0, r3
 801286e:	370c      	adds	r7, #12
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr
 8012878:	08022260 	.word	0x08022260
 801287c:	20000024 	.word	0x20000024

08012880 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012886:	2006      	movs	r0, #6
 8012888:	f001 f846 	bl	8013918 <memp_malloc>
 801288c:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d004      	beq.n	801289e <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012894:	2210      	movs	r2, #16
 8012896:	2100      	movs	r1, #0
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f00e f85b 	bl	8020954 <memset>
  }
  return buf;
 801289e:	687b      	ldr	r3, [r7, #4]
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3708      	adds	r7, #8
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d013      	beq.n	80128de <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00b      	beq.n	80128d6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4618      	mov	r0, r3
 80128c4:	f002 f88a 	bl	80149dc <pbuf_free>
      buf->p = buf->ptr = NULL;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2200      	movs	r2, #0
 80128cc:	605a      	str	r2, [r3, #4]
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	685a      	ldr	r2, [r3, #4]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80128d6:	6879      	ldr	r1, [r7, #4]
 80128d8:	2006      	movs	r0, #6
 80128da:	f001 f899 	bl	8013a10 <memp_free>
  }
}
 80128de:	bf00      	nop
 80128e0:	3708      	adds	r7, #8
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
	...

080128e8 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	460b      	mov	r3, r1
 80128f2:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d107      	bne.n	801290a <netbuf_alloc+0x22>
 80128fa:	4b1c      	ldr	r3, [pc, #112]	@ (801296c <netbuf_alloc+0x84>)
 80128fc:	2268      	movs	r2, #104	@ 0x68
 80128fe:	491c      	ldr	r1, [pc, #112]	@ (8012970 <netbuf_alloc+0x88>)
 8012900:	481c      	ldr	r0, [pc, #112]	@ (8012974 <netbuf_alloc+0x8c>)
 8012902:	f00d fec7 	bl	8020694 <iprintf>
 8012906:	2300      	movs	r3, #0
 8012908:	e02b      	b.n	8012962 <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d004      	beq.n	801291c <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	4618      	mov	r0, r3
 8012918:	f002 f860 	bl	80149dc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 801291c:	887b      	ldrh	r3, [r7, #2]
 801291e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012922:	4619      	mov	r1, r3
 8012924:	2036      	movs	r0, #54	@ 0x36
 8012926:	f001 fd2d 	bl	8014384 <pbuf_alloc>
 801292a:	4602      	mov	r2, r0
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d101      	bne.n	801293c <netbuf_alloc+0x54>
    return NULL;
 8012938:	2300      	movs	r3, #0
 801293a:	e012      	b.n	8012962 <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	895b      	ldrh	r3, [r3, #10]
 8012942:	887a      	ldrh	r2, [r7, #2]
 8012944:	429a      	cmp	r2, r3
 8012946:	d905      	bls.n	8012954 <netbuf_alloc+0x6c>
 8012948:	4b08      	ldr	r3, [pc, #32]	@ (801296c <netbuf_alloc+0x84>)
 801294a:	2272      	movs	r2, #114	@ 0x72
 801294c:	490a      	ldr	r1, [pc, #40]	@ (8012978 <netbuf_alloc+0x90>)
 801294e:	4809      	ldr	r0, [pc, #36]	@ (8012974 <netbuf_alloc+0x8c>)
 8012950:	f00d fea0 	bl	8020694 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	685b      	ldr	r3, [r3, #4]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	08022270 	.word	0x08022270
 8012970:	080222a4 	.word	0x080222a4
 8012974:	080222c0 	.word	0x080222c0
 8012978:	080222e8 	.word	0x080222e8

0801297c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d108      	bne.n	80129a0 <netbuf_data+0x24>
 801298e:	4b1b      	ldr	r3, [pc, #108]	@ (80129fc <netbuf_data+0x80>)
 8012990:	22c6      	movs	r2, #198	@ 0xc6
 8012992:	491b      	ldr	r1, [pc, #108]	@ (8012a00 <netbuf_data+0x84>)
 8012994:	481b      	ldr	r0, [pc, #108]	@ (8012a04 <netbuf_data+0x88>)
 8012996:	f00d fe7d 	bl	8020694 <iprintf>
 801299a:	f06f 030f 	mvn.w	r3, #15
 801299e:	e029      	b.n	80129f4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d108      	bne.n	80129b8 <netbuf_data+0x3c>
 80129a6:	4b15      	ldr	r3, [pc, #84]	@ (80129fc <netbuf_data+0x80>)
 80129a8:	22c7      	movs	r2, #199	@ 0xc7
 80129aa:	4917      	ldr	r1, [pc, #92]	@ (8012a08 <netbuf_data+0x8c>)
 80129ac:	4815      	ldr	r0, [pc, #84]	@ (8012a04 <netbuf_data+0x88>)
 80129ae:	f00d fe71 	bl	8020694 <iprintf>
 80129b2:	f06f 030f 	mvn.w	r3, #15
 80129b6:	e01d      	b.n	80129f4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d108      	bne.n	80129d0 <netbuf_data+0x54>
 80129be:	4b0f      	ldr	r3, [pc, #60]	@ (80129fc <netbuf_data+0x80>)
 80129c0:	22c8      	movs	r2, #200	@ 0xc8
 80129c2:	4912      	ldr	r1, [pc, #72]	@ (8012a0c <netbuf_data+0x90>)
 80129c4:	480f      	ldr	r0, [pc, #60]	@ (8012a04 <netbuf_data+0x88>)
 80129c6:	f00d fe65 	bl	8020694 <iprintf>
 80129ca:	f06f 030f 	mvn.w	r3, #15
 80129ce:	e011      	b.n	80129f4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d102      	bne.n	80129de <netbuf_data+0x62>
    return ERR_BUF;
 80129d8:	f06f 0301 	mvn.w	r3, #1
 80129dc:	e00a      	b.n	80129f4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	685a      	ldr	r2, [r3, #4]
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	685b      	ldr	r3, [r3, #4]
 80129ec:	895a      	ldrh	r2, [r3, #10]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80129f2:	2300      	movs	r3, #0
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3710      	adds	r7, #16
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	08022270 	.word	0x08022270
 8012a00:	08022378 	.word	0x08022378
 8012a04:	080222c0 	.word	0x080222c0
 8012a08:	08022394 	.word	0x08022394
 8012a0c:	080223b4 	.word	0x080223b4

08012a10 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b084      	sub	sp, #16
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012a1a:	f008 fd11 	bl	801b440 <sys_timeouts_sleeptime>
 8012a1e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012a26:	d10b      	bne.n	8012a40 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012a28:	4813      	ldr	r0, [pc, #76]	@ (8012a78 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a2a:	f00c fb98 	bl	801f15e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012a2e:	2200      	movs	r2, #0
 8012a30:	6839      	ldr	r1, [r7, #0]
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f00c fa22 	bl	801ee7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012a38:	480f      	ldr	r0, [pc, #60]	@ (8012a78 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a3a:	f00c fb81 	bl	801f140 <sys_mutex_lock>
    return;
 8012a3e:	e018      	b.n	8012a72 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d102      	bne.n	8012a4c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012a46:	f008 fcc1 	bl	801b3cc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012a4a:	e7e6      	b.n	8012a1a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012a4c:	480a      	ldr	r0, [pc, #40]	@ (8012a78 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a4e:	f00c fb86 	bl	801f15e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012a52:	68fa      	ldr	r2, [r7, #12]
 8012a54:	6839      	ldr	r1, [r7, #0]
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f00c fa10 	bl	801ee7c <sys_arch_mbox_fetch>
 8012a5c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012a5e:	4806      	ldr	r0, [pc, #24]	@ (8012a78 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a60:	f00c fb6e 	bl	801f140 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012a6a:	d102      	bne.n	8012a72 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012a6c:	f008 fcae 	bl	801b3cc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012a70:	e7d3      	b.n	8012a1a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012a72:	3710      	adds	r7, #16
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	200270f8 	.word	0x200270f8

08012a7c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b084      	sub	sp, #16
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012a84:	4810      	ldr	r0, [pc, #64]	@ (8012ac8 <tcpip_thread+0x4c>)
 8012a86:	f00c fb5b 	bl	801f140 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012a8a:	4b10      	ldr	r3, [pc, #64]	@ (8012acc <tcpip_thread+0x50>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d005      	beq.n	8012a9e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012a92:	4b0e      	ldr	r3, [pc, #56]	@ (8012acc <tcpip_thread+0x50>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	4a0e      	ldr	r2, [pc, #56]	@ (8012ad0 <tcpip_thread+0x54>)
 8012a98:	6812      	ldr	r2, [r2, #0]
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012a9e:	f107 030c 	add.w	r3, r7, #12
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	480b      	ldr	r0, [pc, #44]	@ (8012ad4 <tcpip_thread+0x58>)
 8012aa6:	f7ff ffb3 	bl	8012a10 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d106      	bne.n	8012abe <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012ab0:	4b09      	ldr	r3, [pc, #36]	@ (8012ad8 <tcpip_thread+0x5c>)
 8012ab2:	2291      	movs	r2, #145	@ 0x91
 8012ab4:	4909      	ldr	r1, [pc, #36]	@ (8012adc <tcpip_thread+0x60>)
 8012ab6:	480a      	ldr	r0, [pc, #40]	@ (8012ae0 <tcpip_thread+0x64>)
 8012ab8:	f00d fdec 	bl	8020694 <iprintf>
      continue;
 8012abc:	e003      	b.n	8012ac6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f000 f80f 	bl	8012ae4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012ac6:	e7ea      	b.n	8012a9e <tcpip_thread+0x22>
 8012ac8:	200270f8 	.word	0x200270f8
 8012acc:	200270ec 	.word	0x200270ec
 8012ad0:	200270f0 	.word	0x200270f0
 8012ad4:	200270f4 	.word	0x200270f4
 8012ad8:	08022408 	.word	0x08022408
 8012adc:	08022438 	.word	0x08022438
 8012ae0:	08022458 	.word	0x08022458

08012ae4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	2b02      	cmp	r3, #2
 8012af2:	d026      	beq.n	8012b42 <tcpip_thread_handle_msg+0x5e>
 8012af4:	2b02      	cmp	r3, #2
 8012af6:	dc2b      	bgt.n	8012b50 <tcpip_thread_handle_msg+0x6c>
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <tcpip_thread_handle_msg+0x1e>
 8012afc:	2b01      	cmp	r3, #1
 8012afe:	d015      	beq.n	8012b2c <tcpip_thread_handle_msg+0x48>
 8012b00:	e026      	b.n	8012b50 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	687a      	ldr	r2, [r7, #4]
 8012b08:	6850      	ldr	r0, [r2, #4]
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	6892      	ldr	r2, [r2, #8]
 8012b0e:	4611      	mov	r1, r2
 8012b10:	4798      	blx	r3
 8012b12:	4603      	mov	r3, r0
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d004      	beq.n	8012b22 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f001 ff5d 	bl	80149dc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012b22:	6879      	ldr	r1, [r7, #4]
 8012b24:	2009      	movs	r0, #9
 8012b26:	f000 ff73 	bl	8013a10 <memp_free>
      break;
 8012b2a:	e018      	b.n	8012b5e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	6892      	ldr	r2, [r2, #8]
 8012b34:	4610      	mov	r0, r2
 8012b36:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012b38:	6879      	ldr	r1, [r7, #4]
 8012b3a:	2008      	movs	r0, #8
 8012b3c:	f000 ff68 	bl	8013a10 <memp_free>
      break;
 8012b40:	e00d      	b.n	8012b5e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	6892      	ldr	r2, [r2, #8]
 8012b4a:	4610      	mov	r0, r2
 8012b4c:	4798      	blx	r3
      break;
 8012b4e:	e006      	b.n	8012b5e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012b50:	4b05      	ldr	r3, [pc, #20]	@ (8012b68 <tcpip_thread_handle_msg+0x84>)
 8012b52:	22cf      	movs	r2, #207	@ 0xcf
 8012b54:	4905      	ldr	r1, [pc, #20]	@ (8012b6c <tcpip_thread_handle_msg+0x88>)
 8012b56:	4806      	ldr	r0, [pc, #24]	@ (8012b70 <tcpip_thread_handle_msg+0x8c>)
 8012b58:	f00d fd9c 	bl	8020694 <iprintf>
      break;
 8012b5c:	bf00      	nop
  }
}
 8012b5e:	bf00      	nop
 8012b60:	3708      	adds	r7, #8
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	08022408 	.word	0x08022408
 8012b6c:	08022438 	.word	0x08022438
 8012b70:	08022458 	.word	0x08022458

08012b74 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b086      	sub	sp, #24
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	60b9      	str	r1, [r7, #8]
 8012b7e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012b80:	481a      	ldr	r0, [pc, #104]	@ (8012bec <tcpip_inpkt+0x78>)
 8012b82:	f00c f9c3 	bl	801ef0c <sys_mbox_valid>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d105      	bne.n	8012b98 <tcpip_inpkt+0x24>
 8012b8c:	4b18      	ldr	r3, [pc, #96]	@ (8012bf0 <tcpip_inpkt+0x7c>)
 8012b8e:	22fc      	movs	r2, #252	@ 0xfc
 8012b90:	4918      	ldr	r1, [pc, #96]	@ (8012bf4 <tcpip_inpkt+0x80>)
 8012b92:	4819      	ldr	r0, [pc, #100]	@ (8012bf8 <tcpip_inpkt+0x84>)
 8012b94:	f00d fd7e 	bl	8020694 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012b98:	2009      	movs	r0, #9
 8012b9a:	f000 febd 	bl	8013918 <memp_malloc>
 8012b9e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d102      	bne.n	8012bac <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012ba6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012baa:	e01a      	b.n	8012be2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	68fa      	ldr	r2, [r7, #12]
 8012bb6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	68ba      	ldr	r2, [r7, #8]
 8012bbc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012bc4:	6979      	ldr	r1, [r7, #20]
 8012bc6:	4809      	ldr	r0, [pc, #36]	@ (8012bec <tcpip_inpkt+0x78>)
 8012bc8:	f00c f934 	bl	801ee34 <sys_mbox_trypost>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d006      	beq.n	8012be0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012bd2:	6979      	ldr	r1, [r7, #20]
 8012bd4:	2009      	movs	r0, #9
 8012bd6:	f000 ff1b 	bl	8013a10 <memp_free>
    return ERR_MEM;
 8012bda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bde:	e000      	b.n	8012be2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012be0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3718      	adds	r7, #24
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	200270f4 	.word	0x200270f4
 8012bf0:	08022408 	.word	0x08022408
 8012bf4:	08022480 	.word	0x08022480
 8012bf8:	08022458 	.word	0x08022458

08012bfc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012c0c:	f003 0318 	and.w	r3, r3, #24
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d006      	beq.n	8012c22 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012c14:	4a08      	ldr	r2, [pc, #32]	@ (8012c38 <tcpip_input+0x3c>)
 8012c16:	6839      	ldr	r1, [r7, #0]
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7ff ffab 	bl	8012b74 <tcpip_inpkt>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	e005      	b.n	8012c2e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012c22:	4a06      	ldr	r2, [pc, #24]	@ (8012c3c <tcpip_input+0x40>)
 8012c24:	6839      	ldr	r1, [r7, #0]
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f7ff ffa4 	bl	8012b74 <tcpip_inpkt>
 8012c2c:	4603      	mov	r3, r0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3708      	adds	r7, #8
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	0801eb7d 	.word	0x0801eb7d
 8012c3c:	0801d839 	.word	0x0801d839

08012c40 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b084      	sub	sp, #16
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012c4a:	4819      	ldr	r0, [pc, #100]	@ (8012cb0 <tcpip_try_callback+0x70>)
 8012c4c:	f00c f95e 	bl	801ef0c <sys_mbox_valid>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d106      	bne.n	8012c64 <tcpip_try_callback+0x24>
 8012c56:	4b17      	ldr	r3, [pc, #92]	@ (8012cb4 <tcpip_try_callback+0x74>)
 8012c58:	f240 125d 	movw	r2, #349	@ 0x15d
 8012c5c:	4916      	ldr	r1, [pc, #88]	@ (8012cb8 <tcpip_try_callback+0x78>)
 8012c5e:	4817      	ldr	r0, [pc, #92]	@ (8012cbc <tcpip_try_callback+0x7c>)
 8012c60:	f00d fd18 	bl	8020694 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012c64:	2008      	movs	r0, #8
 8012c66:	f000 fe57 	bl	8013918 <memp_malloc>
 8012c6a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d102      	bne.n	8012c78 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c76:	e017      	b.n	8012ca8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	687a      	ldr	r2, [r7, #4]
 8012c82:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	683a      	ldr	r2, [r7, #0]
 8012c88:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012c8a:	68f9      	ldr	r1, [r7, #12]
 8012c8c:	4808      	ldr	r0, [pc, #32]	@ (8012cb0 <tcpip_try_callback+0x70>)
 8012c8e:	f00c f8d1 	bl	801ee34 <sys_mbox_trypost>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d006      	beq.n	8012ca6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012c98:	68f9      	ldr	r1, [r7, #12]
 8012c9a:	2008      	movs	r0, #8
 8012c9c:	f000 feb8 	bl	8013a10 <memp_free>
    return ERR_MEM;
 8012ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ca4:	e000      	b.n	8012ca8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3710      	adds	r7, #16
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	200270f4 	.word	0x200270f4
 8012cb4:	08022408 	.word	0x08022408
 8012cb8:	08022480 	.word	0x08022480
 8012cbc:	08022458 	.word	0x08022458

08012cc0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	60f8      	str	r0, [r7, #12]
 8012cc8:	60b9      	str	r1, [r7, #8]
 8012cca:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012ccc:	4806      	ldr	r0, [pc, #24]	@ (8012ce8 <tcpip_send_msg_wait_sem+0x28>)
 8012cce:	f00c fa37 	bl	801f140 <sys_mutex_lock>
  fn(apimsg);
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	68b8      	ldr	r0, [r7, #8]
 8012cd6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012cd8:	4803      	ldr	r0, [pc, #12]	@ (8012ce8 <tcpip_send_msg_wait_sem+0x28>)
 8012cda:	f00c fa40 	bl	801f15e <sys_mutex_unlock>
  return ERR_OK;
 8012cde:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3710      	adds	r7, #16
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	200270f8 	.word	0x200270f8

08012cec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af02      	add	r7, sp, #8
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012cf6:	f000 f872 	bl	8012dde <lwip_init>

  tcpip_init_done = initfunc;
 8012cfa:	4a17      	ldr	r2, [pc, #92]	@ (8012d58 <tcpip_init+0x6c>)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012d00:	4a16      	ldr	r2, [pc, #88]	@ (8012d5c <tcpip_init+0x70>)
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012d06:	2106      	movs	r1, #6
 8012d08:	4815      	ldr	r0, [pc, #84]	@ (8012d60 <tcpip_init+0x74>)
 8012d0a:	f00c f839 	bl	801ed80 <sys_mbox_new>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d006      	beq.n	8012d22 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012d14:	4b13      	ldr	r3, [pc, #76]	@ (8012d64 <tcpip_init+0x78>)
 8012d16:	f240 2261 	movw	r2, #609	@ 0x261
 8012d1a:	4913      	ldr	r1, [pc, #76]	@ (8012d68 <tcpip_init+0x7c>)
 8012d1c:	4813      	ldr	r0, [pc, #76]	@ (8012d6c <tcpip_init+0x80>)
 8012d1e:	f00d fcb9 	bl	8020694 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012d22:	4813      	ldr	r0, [pc, #76]	@ (8012d70 <tcpip_init+0x84>)
 8012d24:	f00c f9d6 	bl	801f0d4 <sys_mutex_new>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d006      	beq.n	8012d3c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012d64 <tcpip_init+0x78>)
 8012d30:	f240 2265 	movw	r2, #613	@ 0x265
 8012d34:	490f      	ldr	r1, [pc, #60]	@ (8012d74 <tcpip_init+0x88>)
 8012d36:	480d      	ldr	r0, [pc, #52]	@ (8012d6c <tcpip_init+0x80>)
 8012d38:	f00d fcac 	bl	8020694 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012d3c:	2318      	movs	r3, #24
 8012d3e:	9300      	str	r3, [sp, #0]
 8012d40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012d44:	2200      	movs	r2, #0
 8012d46:	490c      	ldr	r1, [pc, #48]	@ (8012d78 <tcpip_init+0x8c>)
 8012d48:	480c      	ldr	r0, [pc, #48]	@ (8012d7c <tcpip_init+0x90>)
 8012d4a:	f00c fa15 	bl	801f178 <sys_thread_new>
}
 8012d4e:	bf00      	nop
 8012d50:	3708      	adds	r7, #8
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	200270ec 	.word	0x200270ec
 8012d5c:	200270f0 	.word	0x200270f0
 8012d60:	200270f4 	.word	0x200270f4
 8012d64:	08022408 	.word	0x08022408
 8012d68:	08022490 	.word	0x08022490
 8012d6c:	08022458 	.word	0x08022458
 8012d70:	200270f8 	.word	0x200270f8
 8012d74:	080224b4 	.word	0x080224b4
 8012d78:	08012a7d 	.word	0x08012a7d
 8012d7c:	080224d8 	.word	0x080224d8

08012d80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012d80:	b480      	push	{r7}
 8012d82:	b083      	sub	sp, #12
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	4603      	mov	r3, r0
 8012d88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d8e:	021b      	lsls	r3, r3, #8
 8012d90:	b21a      	sxth	r2, r3
 8012d92:	88fb      	ldrh	r3, [r7, #6]
 8012d94:	0a1b      	lsrs	r3, r3, #8
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	b21b      	sxth	r3, r3
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	b21b      	sxth	r3, r3
 8012d9e:	b29b      	uxth	r3, r3
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	370c      	adds	r7, #12
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b083      	sub	sp, #12
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	061a      	lsls	r2, r3, #24
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	021b      	lsls	r3, r3, #8
 8012dbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012dc0:	431a      	orrs	r2, r3
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	0a1b      	lsrs	r3, r3, #8
 8012dc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012dca:	431a      	orrs	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	0e1b      	lsrs	r3, r3, #24
 8012dd0:	4313      	orrs	r3, r2
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	370c      	adds	r7, #12
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr

08012dde <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b082      	sub	sp, #8
 8012de2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012de4:	2300      	movs	r3, #0
 8012de6:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8012de8:	f002 f8ce 	bl	8014f88 <stats_init>
#if !NO_SYS
  sys_init();
 8012dec:	f00c f966 	bl	801f0bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012df0:	f000 f8d4 	bl	8012f9c <mem_init>
  memp_init();
 8012df4:	f000 fcf4 	bl	80137e0 <memp_init>
  pbuf_init();
  netif_init();
 8012df8:	f000 fe34 	bl	8013a64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012dfc:	f008 fb58 	bl	801b4b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012e00:	f002 f8d2 	bl	8014fa8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012e04:	f008 fa9a 	bl	801b33c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012e08:	bf00      	nop
 8012e0a:	3708      	adds	r7, #8
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	bd80      	pop	{r7, pc}

08012e10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	4603      	mov	r3, r0
 8012e18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012e1a:	4b05      	ldr	r3, [pc, #20]	@ (8012e30 <ptr_to_mem+0x20>)
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	88fb      	ldrh	r3, [r7, #6]
 8012e20:	4413      	add	r3, r2
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	370c      	adds	r7, #12
 8012e26:	46bd      	mov	sp, r7
 8012e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2c:	4770      	bx	lr
 8012e2e:	bf00      	nop
 8012e30:	20027114 	.word	0x20027114

08012e34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b083      	sub	sp, #12
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012e3c:	4b05      	ldr	r3, [pc, #20]	@ (8012e54 <mem_to_ptr+0x20>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	1ad3      	subs	r3, r2, r3
 8012e44:	b29b      	uxth	r3, r3
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	370c      	adds	r7, #12
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	20027114 	.word	0x20027114

08012e58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012e58:	b590      	push	{r4, r7, lr}
 8012e5a:	b085      	sub	sp, #20
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012e60:	4b45      	ldr	r3, [pc, #276]	@ (8012f78 <plug_holes+0x120>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	687a      	ldr	r2, [r7, #4]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d206      	bcs.n	8012e78 <plug_holes+0x20>
 8012e6a:	4b44      	ldr	r3, [pc, #272]	@ (8012f7c <plug_holes+0x124>)
 8012e6c:	f240 12df 	movw	r2, #479	@ 0x1df
 8012e70:	4943      	ldr	r1, [pc, #268]	@ (8012f80 <plug_holes+0x128>)
 8012e72:	4844      	ldr	r0, [pc, #272]	@ (8012f84 <plug_holes+0x12c>)
 8012e74:	f00d fc0e 	bl	8020694 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012e78:	4b43      	ldr	r3, [pc, #268]	@ (8012f88 <plug_holes+0x130>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	687a      	ldr	r2, [r7, #4]
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d306      	bcc.n	8012e90 <plug_holes+0x38>
 8012e82:	4b3e      	ldr	r3, [pc, #248]	@ (8012f7c <plug_holes+0x124>)
 8012e84:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012e88:	4940      	ldr	r1, [pc, #256]	@ (8012f8c <plug_holes+0x134>)
 8012e8a:	483e      	ldr	r0, [pc, #248]	@ (8012f84 <plug_holes+0x12c>)
 8012e8c:	f00d fc02 	bl	8020694 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	791b      	ldrb	r3, [r3, #4]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d006      	beq.n	8012ea6 <plug_holes+0x4e>
 8012e98:	4b38      	ldr	r3, [pc, #224]	@ (8012f7c <plug_holes+0x124>)
 8012e9a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012e9e:	493c      	ldr	r1, [pc, #240]	@ (8012f90 <plug_holes+0x138>)
 8012ea0:	4838      	ldr	r0, [pc, #224]	@ (8012f84 <plug_holes+0x12c>)
 8012ea2:	f00d fbf7 	bl	8020694 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	881b      	ldrh	r3, [r3, #0]
 8012eaa:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012eae:	d906      	bls.n	8012ebe <plug_holes+0x66>
 8012eb0:	4b32      	ldr	r3, [pc, #200]	@ (8012f7c <plug_holes+0x124>)
 8012eb2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012eb6:	4937      	ldr	r1, [pc, #220]	@ (8012f94 <plug_holes+0x13c>)
 8012eb8:	4832      	ldr	r0, [pc, #200]	@ (8012f84 <plug_holes+0x12c>)
 8012eba:	f00d fbeb 	bl	8020694 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	881b      	ldrh	r3, [r3, #0]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7ff ffa4 	bl	8012e10 <ptr_to_mem>
 8012ec8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d024      	beq.n	8012f1c <plug_holes+0xc4>
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	791b      	ldrb	r3, [r3, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d120      	bne.n	8012f1c <plug_holes+0xc4>
 8012eda:	4b2b      	ldr	r3, [pc, #172]	@ (8012f88 <plug_holes+0x130>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	68fa      	ldr	r2, [r7, #12]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d01b      	beq.n	8012f1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8012f98 <plug_holes+0x140>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d102      	bne.n	8012ef4 <plug_holes+0x9c>
      lfree = mem;
 8012eee:	4a2a      	ldr	r2, [pc, #168]	@ (8012f98 <plug_holes+0x140>)
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	881a      	ldrh	r2, [r3, #0]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	881b      	ldrh	r3, [r3, #0]
 8012f00:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012f04:	d00a      	beq.n	8012f1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff ff80 	bl	8012e10 <ptr_to_mem>
 8012f10:	4604      	mov	r4, r0
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f7ff ff8e 	bl	8012e34 <mem_to_ptr>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	885b      	ldrh	r3, [r3, #2]
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7ff ff75 	bl	8012e10 <ptr_to_mem>
 8012f26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012f28:	68ba      	ldr	r2, [r7, #8]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d01f      	beq.n	8012f70 <plug_holes+0x118>
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	791b      	ldrb	r3, [r3, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d11b      	bne.n	8012f70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012f38:	4b17      	ldr	r3, [pc, #92]	@ (8012f98 <plug_holes+0x140>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d102      	bne.n	8012f48 <plug_holes+0xf0>
      lfree = pmem;
 8012f42:	4a15      	ldr	r2, [pc, #84]	@ (8012f98 <plug_holes+0x140>)
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	881a      	ldrh	r2, [r3, #0]
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	881b      	ldrh	r3, [r3, #0]
 8012f54:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012f58:	d00a      	beq.n	8012f70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	881b      	ldrh	r3, [r3, #0]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7ff ff56 	bl	8012e10 <ptr_to_mem>
 8012f64:	4604      	mov	r4, r0
 8012f66:	68b8      	ldr	r0, [r7, #8]
 8012f68:	f7ff ff64 	bl	8012e34 <mem_to_ptr>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012f70:	bf00      	nop
 8012f72:	3714      	adds	r7, #20
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd90      	pop	{r4, r7, pc}
 8012f78:	20027114 	.word	0x20027114
 8012f7c:	080224e8 	.word	0x080224e8
 8012f80:	08022518 	.word	0x08022518
 8012f84:	08022530 	.word	0x08022530
 8012f88:	20027118 	.word	0x20027118
 8012f8c:	08022558 	.word	0x08022558
 8012f90:	08022574 	.word	0x08022574
 8012f94:	08022590 	.word	0x08022590
 8012f98:	20027120 	.word	0x20027120

08012f9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8013020 <mem_init+0x84>)
 8012fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8013024 <mem_init+0x88>)
 8012fa6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8013020 <mem_init+0x84>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8012fb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2200      	movs	r2, #0
 8012fba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012fc2:	f44f 40c8 	mov.w	r0, #25600	@ 0x6400
 8012fc6:	f7ff ff23 	bl	8012e10 <ptr_to_mem>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	4a16      	ldr	r2, [pc, #88]	@ (8013028 <mem_init+0x8c>)
 8012fce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012fd0:	4b15      	ldr	r3, [pc, #84]	@ (8013028 <mem_init+0x8c>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012fd8:	4b13      	ldr	r3, [pc, #76]	@ (8013028 <mem_init+0x8c>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8012fe0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012fe2:	4b11      	ldr	r3, [pc, #68]	@ (8013028 <mem_init+0x8c>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8012fea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012fec:	4b0c      	ldr	r3, [pc, #48]	@ (8013020 <mem_init+0x84>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	4a0e      	ldr	r2, [pc, #56]	@ (801302c <mem_init+0x90>)
 8012ff2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8012ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8013030 <mem_init+0x94>)
 8012ff6:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8012ffa:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012ffe:	480d      	ldr	r0, [pc, #52]	@ (8013034 <mem_init+0x98>)
 8013000:	f00c f868 	bl	801f0d4 <sys_mutex_new>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d006      	beq.n	8013018 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801300a:	4b0b      	ldr	r3, [pc, #44]	@ (8013038 <mem_init+0x9c>)
 801300c:	f240 221f 	movw	r2, #543	@ 0x21f
 8013010:	490a      	ldr	r1, [pc, #40]	@ (801303c <mem_init+0xa0>)
 8013012:	480b      	ldr	r0, [pc, #44]	@ (8013040 <mem_init+0xa4>)
 8013014:	f00d fb3e 	bl	8020694 <iprintf>
  }
}
 8013018:	bf00      	nop
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	20027114 	.word	0x20027114
 8013024:	20048000 	.word	0x20048000
 8013028:	20027118 	.word	0x20027118
 801302c:	20027120 	.word	0x20027120
 8013030:	2002d36c 	.word	0x2002d36c
 8013034:	2002711c 	.word	0x2002711c
 8013038:	080224e8 	.word	0x080224e8
 801303c:	080225bc 	.word	0x080225bc
 8013040:	08022530 	.word	0x08022530

08013044 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b086      	sub	sp, #24
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f7ff fef1 	bl	8012e34 <mem_to_ptr>
 8013052:	4603      	mov	r3, r0
 8013054:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	881b      	ldrh	r3, [r3, #0]
 801305a:	4618      	mov	r0, r3
 801305c:	f7ff fed8 	bl	8012e10 <ptr_to_mem>
 8013060:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	885b      	ldrh	r3, [r3, #2]
 8013066:	4618      	mov	r0, r3
 8013068:	f7ff fed2 	bl	8012e10 <ptr_to_mem>
 801306c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	881b      	ldrh	r3, [r3, #0]
 8013072:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013076:	d818      	bhi.n	80130aa <mem_link_valid+0x66>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	885b      	ldrh	r3, [r3, #2]
 801307c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013080:	d813      	bhi.n	80130aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013086:	8afa      	ldrh	r2, [r7, #22]
 8013088:	429a      	cmp	r2, r3
 801308a:	d004      	beq.n	8013096 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	8afa      	ldrh	r2, [r7, #22]
 8013092:	429a      	cmp	r2, r3
 8013094:	d109      	bne.n	80130aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013096:	4b08      	ldr	r3, [pc, #32]	@ (80130b8 <mem_link_valid+0x74>)
 8013098:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801309a:	693a      	ldr	r2, [r7, #16]
 801309c:	429a      	cmp	r2, r3
 801309e:	d006      	beq.n	80130ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	885b      	ldrh	r3, [r3, #2]
 80130a4:	8afa      	ldrh	r2, [r7, #22]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d001      	beq.n	80130ae <mem_link_valid+0x6a>
    return 0;
 80130aa:	2300      	movs	r3, #0
 80130ac:	e000      	b.n	80130b0 <mem_link_valid+0x6c>
  }
  return 1;
 80130ae:	2301      	movs	r3, #1
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3718      	adds	r7, #24
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}
 80130b8:	20027118 	.word	0x20027118

080130bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b088      	sub	sp, #32
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d103      	bne.n	80130d2 <mem_free+0x16>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 80130ca:	485a      	ldr	r0, [pc, #360]	@ (8013234 <mem_free+0x178>)
 80130cc:	f00d fb52 	bl	8020774 <puts>
    return;
 80130d0:	e0ac      	b.n	801322c <mem_free+0x170>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f003 0303 	and.w	r3, r3, #3
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d018      	beq.n	801310e <mem_free+0x52>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80130dc:	4b56      	ldr	r3, [pc, #344]	@ (8013238 <mem_free+0x17c>)
 80130de:	f240 2273 	movw	r2, #627	@ 0x273
 80130e2:	4956      	ldr	r1, [pc, #344]	@ (801323c <mem_free+0x180>)
 80130e4:	4856      	ldr	r0, [pc, #344]	@ (8013240 <mem_free+0x184>)
 80130e6:	f00d fad5 	bl	8020694 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 80130ea:	4854      	ldr	r0, [pc, #336]	@ (801323c <mem_free+0x180>)
 80130ec:	f00d fb42 	bl	8020774 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80130f0:	f00c f862 	bl	801f1b8 <sys_arch_protect>
 80130f4:	60f8      	str	r0, [r7, #12]
 80130f6:	4b53      	ldr	r3, [pc, #332]	@ (8013244 <mem_free+0x188>)
 80130f8:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 80130fc:	3301      	adds	r3, #1
 80130fe:	b29a      	uxth	r2, r3
 8013100:	4b50      	ldr	r3, [pc, #320]	@ (8013244 <mem_free+0x188>)
 8013102:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013106:	68f8      	ldr	r0, [r7, #12]
 8013108:	f00c f864 	bl	801f1d4 <sys_arch_unprotect>
    return;
 801310c:	e08e      	b.n	801322c <mem_free+0x170>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	3b08      	subs	r3, #8
 8013112:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013114:	4b4c      	ldr	r3, [pc, #304]	@ (8013248 <mem_free+0x18c>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	69fa      	ldr	r2, [r7, #28]
 801311a:	429a      	cmp	r2, r3
 801311c:	d306      	bcc.n	801312c <mem_free+0x70>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f103 020c 	add.w	r2, r3, #12
 8013124:	4b49      	ldr	r3, [pc, #292]	@ (801324c <mem_free+0x190>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	429a      	cmp	r2, r3
 801312a:	d918      	bls.n	801315e <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801312c:	4b42      	ldr	r3, [pc, #264]	@ (8013238 <mem_free+0x17c>)
 801312e:	f240 227f 	movw	r2, #639	@ 0x27f
 8013132:	4947      	ldr	r1, [pc, #284]	@ (8013250 <mem_free+0x194>)
 8013134:	4842      	ldr	r0, [pc, #264]	@ (8013240 <mem_free+0x184>)
 8013136:	f00d faad 	bl	8020694 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 801313a:	4845      	ldr	r0, [pc, #276]	@ (8013250 <mem_free+0x194>)
 801313c:	f00d fb1a 	bl	8020774 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013140:	f00c f83a 	bl	801f1b8 <sys_arch_protect>
 8013144:	6138      	str	r0, [r7, #16]
 8013146:	4b3f      	ldr	r3, [pc, #252]	@ (8013244 <mem_free+0x188>)
 8013148:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 801314c:	3301      	adds	r3, #1
 801314e:	b29a      	uxth	r2, r3
 8013150:	4b3c      	ldr	r3, [pc, #240]	@ (8013244 <mem_free+0x188>)
 8013152:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013156:	6938      	ldr	r0, [r7, #16]
 8013158:	f00c f83c 	bl	801f1d4 <sys_arch_unprotect>
    return;
 801315c:	e066      	b.n	801322c <mem_free+0x170>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801315e:	483d      	ldr	r0, [pc, #244]	@ (8013254 <mem_free+0x198>)
 8013160:	f00b ffee 	bl	801f140 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	791b      	ldrb	r3, [r3, #4]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d11b      	bne.n	80131a4 <mem_free+0xe8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801316c:	4b32      	ldr	r3, [pc, #200]	@ (8013238 <mem_free+0x17c>)
 801316e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8013172:	4939      	ldr	r1, [pc, #228]	@ (8013258 <mem_free+0x19c>)
 8013174:	4832      	ldr	r0, [pc, #200]	@ (8013240 <mem_free+0x184>)
 8013176:	f00d fa8d 	bl	8020694 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801317a:	4836      	ldr	r0, [pc, #216]	@ (8013254 <mem_free+0x198>)
 801317c:	f00b ffef 	bl	801f15e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 8013180:	4836      	ldr	r0, [pc, #216]	@ (801325c <mem_free+0x1a0>)
 8013182:	f00d faf7 	bl	8020774 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013186:	f00c f817 	bl	801f1b8 <sys_arch_protect>
 801318a:	6178      	str	r0, [r7, #20]
 801318c:	4b2d      	ldr	r3, [pc, #180]	@ (8013244 <mem_free+0x188>)
 801318e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013192:	3301      	adds	r3, #1
 8013194:	b29a      	uxth	r2, r3
 8013196:	4b2b      	ldr	r3, [pc, #172]	@ (8013244 <mem_free+0x188>)
 8013198:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 801319c:	6978      	ldr	r0, [r7, #20]
 801319e:	f00c f819 	bl	801f1d4 <sys_arch_unprotect>
    return;
 80131a2:	e043      	b.n	801322c <mem_free+0x170>
  }

  if (!mem_link_valid(mem)) {
 80131a4:	69f8      	ldr	r0, [r7, #28]
 80131a6:	f7ff ff4d 	bl	8013044 <mem_link_valid>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d11b      	bne.n	80131e8 <mem_free+0x12c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80131b0:	4b21      	ldr	r3, [pc, #132]	@ (8013238 <mem_free+0x17c>)
 80131b2:	f240 2295 	movw	r2, #661	@ 0x295
 80131b6:	492a      	ldr	r1, [pc, #168]	@ (8013260 <mem_free+0x1a4>)
 80131b8:	4821      	ldr	r0, [pc, #132]	@ (8013240 <mem_free+0x184>)
 80131ba:	f00d fa6b 	bl	8020694 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80131be:	4825      	ldr	r0, [pc, #148]	@ (8013254 <mem_free+0x198>)
 80131c0:	f00b ffcd 	bl	801f15e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 80131c4:	4827      	ldr	r0, [pc, #156]	@ (8013264 <mem_free+0x1a8>)
 80131c6:	f00d fad5 	bl	8020774 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80131ca:	f00b fff5 	bl	801f1b8 <sys_arch_protect>
 80131ce:	61b8      	str	r0, [r7, #24]
 80131d0:	4b1c      	ldr	r3, [pc, #112]	@ (8013244 <mem_free+0x188>)
 80131d2:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 80131d6:	3301      	adds	r3, #1
 80131d8:	b29a      	uxth	r2, r3
 80131da:	4b1a      	ldr	r3, [pc, #104]	@ (8013244 <mem_free+0x188>)
 80131dc:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 80131e0:	69b8      	ldr	r0, [r7, #24]
 80131e2:	f00b fff7 	bl	801f1d4 <sys_arch_unprotect>
    return;
 80131e6:	e021      	b.n	801322c <mem_free+0x170>
  }

  /* mem is now unused. */
  mem->used = 0;
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	2200      	movs	r2, #0
 80131ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80131ee:	4b1e      	ldr	r3, [pc, #120]	@ (8013268 <mem_free+0x1ac>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	69fa      	ldr	r2, [r7, #28]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d202      	bcs.n	80131fe <mem_free+0x142>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80131f8:	4a1b      	ldr	r2, [pc, #108]	@ (8013268 <mem_free+0x1ac>)
 80131fa:	69fb      	ldr	r3, [r7, #28]
 80131fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80131fe:	4b11      	ldr	r3, [pc, #68]	@ (8013244 <mem_free+0x188>)
 8013200:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013204:	4b10      	ldr	r3, [pc, #64]	@ (8013248 <mem_free+0x18c>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	69f9      	ldr	r1, [r7, #28]
 801320a:	1acb      	subs	r3, r1, r3
 801320c:	b299      	uxth	r1, r3
 801320e:	69fb      	ldr	r3, [r7, #28]
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	1acb      	subs	r3, r1, r3
 8013214:	b29b      	uxth	r3, r3
 8013216:	4413      	add	r3, r2
 8013218:	b29a      	uxth	r2, r3
 801321a:	4b0a      	ldr	r3, [pc, #40]	@ (8013244 <mem_free+0x188>)
 801321c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013220:	69f8      	ldr	r0, [r7, #28]
 8013222:	f7ff fe19 	bl	8012e58 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013226:	480b      	ldr	r0, [pc, #44]	@ (8013254 <mem_free+0x198>)
 8013228:	f00b ff99 	bl	801f15e <sys_mutex_unlock>
}
 801322c:	3720      	adds	r7, #32
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	080225d8 	.word	0x080225d8
 8013238:	080224e8 	.word	0x080224e8
 801323c:	080225f8 	.word	0x080225f8
 8013240:	08022530 	.word	0x08022530
 8013244:	2002d36c 	.word	0x2002d36c
 8013248:	20027114 	.word	0x20027114
 801324c:	20027118 	.word	0x20027118
 8013250:	0802261c 	.word	0x0802261c
 8013254:	2002711c 	.word	0x2002711c
 8013258:	08022638 	.word	0x08022638
 801325c:	08022660 	.word	0x08022660
 8013260:	08022688 	.word	0x08022688
 8013264:	080226bc 	.word	0x080226bc
 8013268:	20027120 	.word	0x20027120

0801326c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b088      	sub	sp, #32
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
 8013274:	460b      	mov	r3, r1
 8013276:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013278:	887b      	ldrh	r3, [r7, #2]
 801327a:	3303      	adds	r3, #3
 801327c:	b29b      	uxth	r3, r3
 801327e:	f023 0303 	bic.w	r3, r3, #3
 8013282:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013284:	8bfb      	ldrh	r3, [r7, #30]
 8013286:	2b0b      	cmp	r3, #11
 8013288:	d801      	bhi.n	801328e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801328a:	230c      	movs	r3, #12
 801328c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801328e:	8bfb      	ldrh	r3, [r7, #30]
 8013290:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013294:	d803      	bhi.n	801329e <mem_trim+0x32>
 8013296:	8bfa      	ldrh	r2, [r7, #30]
 8013298:	887b      	ldrh	r3, [r7, #2]
 801329a:	429a      	cmp	r2, r3
 801329c:	d201      	bcs.n	80132a2 <mem_trim+0x36>
    return NULL;
 801329e:	2300      	movs	r3, #0
 80132a0:	e0fb      	b.n	801349a <mem_trim+0x22e>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80132a2:	4b80      	ldr	r3, [pc, #512]	@ (80134a4 <mem_trim+0x238>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d304      	bcc.n	80132b6 <mem_trim+0x4a>
 80132ac:	4b7e      	ldr	r3, [pc, #504]	@ (80134a8 <mem_trim+0x23c>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d306      	bcc.n	80132c4 <mem_trim+0x58>
 80132b6:	4b7d      	ldr	r3, [pc, #500]	@ (80134ac <mem_trim+0x240>)
 80132b8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80132bc:	497c      	ldr	r1, [pc, #496]	@ (80134b0 <mem_trim+0x244>)
 80132be:	487d      	ldr	r0, [pc, #500]	@ (80134b4 <mem_trim+0x248>)
 80132c0:	f00d f9e8 	bl	8020694 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80132c4:	4b77      	ldr	r3, [pc, #476]	@ (80134a4 <mem_trim+0x238>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d304      	bcc.n	80132d8 <mem_trim+0x6c>
 80132ce:	4b76      	ldr	r3, [pc, #472]	@ (80134a8 <mem_trim+0x23c>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d312      	bcc.n	80132fe <mem_trim+0x92>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 80132d8:	4877      	ldr	r0, [pc, #476]	@ (80134b8 <mem_trim+0x24c>)
 80132da:	f00d fa4b 	bl	8020774 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80132de:	f00b ff6b 	bl	801f1b8 <sys_arch_protect>
 80132e2:	60b8      	str	r0, [r7, #8]
 80132e4:	4b75      	ldr	r3, [pc, #468]	@ (80134bc <mem_trim+0x250>)
 80132e6:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 80132ea:	3301      	adds	r3, #1
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	4b73      	ldr	r3, [pc, #460]	@ (80134bc <mem_trim+0x250>)
 80132f0:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 80132f4:	68b8      	ldr	r0, [r7, #8]
 80132f6:	f00b ff6d 	bl	801f1d4 <sys_arch_unprotect>
    return rmem;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	e0cd      	b.n	801349a <mem_trim+0x22e>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	3b08      	subs	r3, #8
 8013302:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013304:	69b8      	ldr	r0, [r7, #24]
 8013306:	f7ff fd95 	bl	8012e34 <mem_to_ptr>
 801330a:	4603      	mov	r3, r0
 801330c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801330e:	69bb      	ldr	r3, [r7, #24]
 8013310:	881a      	ldrh	r2, [r3, #0]
 8013312:	8afb      	ldrh	r3, [r7, #22]
 8013314:	1ad3      	subs	r3, r2, r3
 8013316:	b29b      	uxth	r3, r3
 8013318:	3b08      	subs	r3, #8
 801331a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801331c:	8bfa      	ldrh	r2, [r7, #30]
 801331e:	8abb      	ldrh	r3, [r7, #20]
 8013320:	429a      	cmp	r2, r3
 8013322:	d906      	bls.n	8013332 <mem_trim+0xc6>
 8013324:	4b61      	ldr	r3, [pc, #388]	@ (80134ac <mem_trim+0x240>)
 8013326:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 801332a:	4965      	ldr	r1, [pc, #404]	@ (80134c0 <mem_trim+0x254>)
 801332c:	4861      	ldr	r0, [pc, #388]	@ (80134b4 <mem_trim+0x248>)
 801332e:	f00d f9b1 	bl	8020694 <iprintf>
  if (newsize > size) {
 8013332:	8bfa      	ldrh	r2, [r7, #30]
 8013334:	8abb      	ldrh	r3, [r7, #20]
 8013336:	429a      	cmp	r2, r3
 8013338:	d901      	bls.n	801333e <mem_trim+0xd2>
    /* not supported */
    return NULL;
 801333a:	2300      	movs	r3, #0
 801333c:	e0ad      	b.n	801349a <mem_trim+0x22e>
  }
  if (newsize == size) {
 801333e:	8bfa      	ldrh	r2, [r7, #30]
 8013340:	8abb      	ldrh	r3, [r7, #20]
 8013342:	429a      	cmp	r2, r3
 8013344:	d101      	bne.n	801334a <mem_trim+0xde>
    /* No change in size, simply return */
    return rmem;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	e0a7      	b.n	801349a <mem_trim+0x22e>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801334a:	485e      	ldr	r0, [pc, #376]	@ (80134c4 <mem_trim+0x258>)
 801334c:	f00b fef8 	bl	801f140 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	881b      	ldrh	r3, [r3, #0]
 8013354:	4618      	mov	r0, r3
 8013356:	f7ff fd5b 	bl	8012e10 <ptr_to_mem>
 801335a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	791b      	ldrb	r3, [r3, #4]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d14b      	bne.n	80133fc <mem_trim+0x190>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	881b      	ldrh	r3, [r3, #0]
 8013368:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801336c:	d106      	bne.n	801337c <mem_trim+0x110>
 801336e:	4b4f      	ldr	r3, [pc, #316]	@ (80134ac <mem_trim+0x240>)
 8013370:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013374:	4954      	ldr	r1, [pc, #336]	@ (80134c8 <mem_trim+0x25c>)
 8013376:	484f      	ldr	r0, [pc, #316]	@ (80134b4 <mem_trim+0x248>)
 8013378:	f00d f98c 	bl	8020694 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	881b      	ldrh	r3, [r3, #0]
 8013380:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013382:	8afa      	ldrh	r2, [r7, #22]
 8013384:	8bfb      	ldrh	r3, [r7, #30]
 8013386:	4413      	add	r3, r2
 8013388:	b29b      	uxth	r3, r3
 801338a:	3308      	adds	r3, #8
 801338c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801338e:	4b4f      	ldr	r3, [pc, #316]	@ (80134cc <mem_trim+0x260>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	693a      	ldr	r2, [r7, #16]
 8013394:	429a      	cmp	r2, r3
 8013396:	d106      	bne.n	80133a6 <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8013398:	89fb      	ldrh	r3, [r7, #14]
 801339a:	4618      	mov	r0, r3
 801339c:	f7ff fd38 	bl	8012e10 <ptr_to_mem>
 80133a0:	4603      	mov	r3, r0
 80133a2:	4a4a      	ldr	r2, [pc, #296]	@ (80134cc <mem_trim+0x260>)
 80133a4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80133a6:	89fb      	ldrh	r3, [r7, #14]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff fd31 	bl	8012e10 <ptr_to_mem>
 80133ae:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	2200      	movs	r2, #0
 80133b4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	89ba      	ldrh	r2, [r7, #12]
 80133ba:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	8afa      	ldrh	r2, [r7, #22]
 80133c0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	89fa      	ldrh	r2, [r7, #14]
 80133c6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	881b      	ldrh	r3, [r3, #0]
 80133cc:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80133d0:	d007      	beq.n	80133e2 <mem_trim+0x176>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80133d2:	693b      	ldr	r3, [r7, #16]
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7ff fd1a 	bl	8012e10 <ptr_to_mem>
 80133dc:	4602      	mov	r2, r0
 80133de:	89fb      	ldrh	r3, [r7, #14]
 80133e0:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80133e2:	4b36      	ldr	r3, [pc, #216]	@ (80134bc <mem_trim+0x250>)
 80133e4:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 80133e8:	8bf9      	ldrh	r1, [r7, #30]
 80133ea:	8abb      	ldrh	r3, [r7, #20]
 80133ec:	1acb      	subs	r3, r1, r3
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	4413      	add	r3, r2
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	4b31      	ldr	r3, [pc, #196]	@ (80134bc <mem_trim+0x250>)
 80133f6:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80133fa:	e04a      	b.n	8013492 <mem_trim+0x226>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80133fc:	8bfb      	ldrh	r3, [r7, #30]
 80133fe:	f103 0214 	add.w	r2, r3, #20
 8013402:	8abb      	ldrh	r3, [r7, #20]
 8013404:	429a      	cmp	r2, r3
 8013406:	d844      	bhi.n	8013492 <mem_trim+0x226>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013408:	8afa      	ldrh	r2, [r7, #22]
 801340a:	8bfb      	ldrh	r3, [r7, #30]
 801340c:	4413      	add	r3, r2
 801340e:	b29b      	uxth	r3, r3
 8013410:	3308      	adds	r3, #8
 8013412:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	881b      	ldrh	r3, [r3, #0]
 8013418:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801341c:	d106      	bne.n	801342c <mem_trim+0x1c0>
 801341e:	4b23      	ldr	r3, [pc, #140]	@ (80134ac <mem_trim+0x240>)
 8013420:	f240 3216 	movw	r2, #790	@ 0x316
 8013424:	4928      	ldr	r1, [pc, #160]	@ (80134c8 <mem_trim+0x25c>)
 8013426:	4823      	ldr	r0, [pc, #140]	@ (80134b4 <mem_trim+0x248>)
 8013428:	f00d f934 	bl	8020694 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801342c:	89fb      	ldrh	r3, [r7, #14]
 801342e:	4618      	mov	r0, r3
 8013430:	f7ff fcee 	bl	8012e10 <ptr_to_mem>
 8013434:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013436:	4b25      	ldr	r3, [pc, #148]	@ (80134cc <mem_trim+0x260>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	693a      	ldr	r2, [r7, #16]
 801343c:	429a      	cmp	r2, r3
 801343e:	d202      	bcs.n	8013446 <mem_trim+0x1da>
      lfree = mem2;
 8013440:	4a22      	ldr	r2, [pc, #136]	@ (80134cc <mem_trim+0x260>)
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013446:	693b      	ldr	r3, [r7, #16]
 8013448:	2200      	movs	r2, #0
 801344a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801344c:	69bb      	ldr	r3, [r7, #24]
 801344e:	881a      	ldrh	r2, [r3, #0]
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	8afa      	ldrh	r2, [r7, #22]
 8013458:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	89fa      	ldrh	r2, [r7, #14]
 801345e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	881b      	ldrh	r3, [r3, #0]
 8013464:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013468:	d007      	beq.n	801347a <mem_trim+0x20e>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	881b      	ldrh	r3, [r3, #0]
 801346e:	4618      	mov	r0, r3
 8013470:	f7ff fcce 	bl	8012e10 <ptr_to_mem>
 8013474:	4602      	mov	r2, r0
 8013476:	89fb      	ldrh	r3, [r7, #14]
 8013478:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 801347a:	4b10      	ldr	r3, [pc, #64]	@ (80134bc <mem_trim+0x250>)
 801347c:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013480:	8bf9      	ldrh	r1, [r7, #30]
 8013482:	8abb      	ldrh	r3, [r7, #20]
 8013484:	1acb      	subs	r3, r1, r3
 8013486:	b29b      	uxth	r3, r3
 8013488:	4413      	add	r3, r2
 801348a:	b29a      	uxth	r2, r3
 801348c:	4b0b      	ldr	r3, [pc, #44]	@ (80134bc <mem_trim+0x250>)
 801348e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013492:	480c      	ldr	r0, [pc, #48]	@ (80134c4 <mem_trim+0x258>)
 8013494:	f00b fe63 	bl	801f15e <sys_mutex_unlock>
  return rmem;
 8013498:	687b      	ldr	r3, [r7, #4]
}
 801349a:	4618      	mov	r0, r3
 801349c:	3720      	adds	r7, #32
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	20027114 	.word	0x20027114
 80134a8:	20027118 	.word	0x20027118
 80134ac:	080224e8 	.word	0x080224e8
 80134b0:	080226f0 	.word	0x080226f0
 80134b4:	08022530 	.word	0x08022530
 80134b8:	08022708 	.word	0x08022708
 80134bc:	2002d36c 	.word	0x2002d36c
 80134c0:	08022724 	.word	0x08022724
 80134c4:	2002711c 	.word	0x2002711c
 80134c8:	08022744 	.word	0x08022744
 80134cc:	20027120 	.word	0x20027120

080134d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80134d0:	b590      	push	{r4, r7, lr}
 80134d2:	b089      	sub	sp, #36	@ 0x24
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	4603      	mov	r3, r0
 80134d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80134da:	88fb      	ldrh	r3, [r7, #6]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d101      	bne.n	80134e4 <mem_malloc+0x14>
    return NULL;
 80134e0:	2300      	movs	r3, #0
 80134e2:	e127      	b.n	8013734 <mem_malloc+0x264>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80134e4:	88fb      	ldrh	r3, [r7, #6]
 80134e6:	3303      	adds	r3, #3
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	f023 0303 	bic.w	r3, r3, #3
 80134ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80134f0:	8bbb      	ldrh	r3, [r7, #28]
 80134f2:	2b0b      	cmp	r3, #11
 80134f4:	d801      	bhi.n	80134fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80134f6:	230c      	movs	r3, #12
 80134f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80134fa:	8bbb      	ldrh	r3, [r7, #28]
 80134fc:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013500:	d803      	bhi.n	801350a <mem_malloc+0x3a>
 8013502:	8bba      	ldrh	r2, [r7, #28]
 8013504:	88fb      	ldrh	r3, [r7, #6]
 8013506:	429a      	cmp	r2, r3
 8013508:	d201      	bcs.n	801350e <mem_malloc+0x3e>
    return NULL;
 801350a:	2300      	movs	r3, #0
 801350c:	e112      	b.n	8013734 <mem_malloc+0x264>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801350e:	488b      	ldr	r0, [pc, #556]	@ (801373c <mem_malloc+0x26c>)
 8013510:	f00b fe16 	bl	801f140 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013514:	4b8a      	ldr	r3, [pc, #552]	@ (8013740 <mem_malloc+0x270>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4618      	mov	r0, r3
 801351a:	f7ff fc8b 	bl	8012e34 <mem_to_ptr>
 801351e:	4603      	mov	r3, r0
 8013520:	83fb      	strh	r3, [r7, #30]
 8013522:	e0ee      	b.n	8013702 <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013524:	8bfb      	ldrh	r3, [r7, #30]
 8013526:	4618      	mov	r0, r3
 8013528:	f7ff fc72 	bl	8012e10 <ptr_to_mem>
 801352c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	791b      	ldrb	r3, [r3, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	f040 80de 	bne.w	80136f4 <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	881b      	ldrh	r3, [r3, #0]
 801353c:	461a      	mov	r2, r3
 801353e:	8bfb      	ldrh	r3, [r7, #30]
 8013540:	1ad3      	subs	r3, r2, r3
 8013542:	f1a3 0208 	sub.w	r2, r3, #8
 8013546:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013548:	429a      	cmp	r2, r3
 801354a:	f0c0 80d3 	bcc.w	80136f4 <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	881b      	ldrh	r3, [r3, #0]
 8013552:	461a      	mov	r2, r3
 8013554:	8bfb      	ldrh	r3, [r7, #30]
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	f1a3 0208 	sub.w	r2, r3, #8
 801355c:	8bbb      	ldrh	r3, [r7, #28]
 801355e:	3314      	adds	r3, #20
 8013560:	429a      	cmp	r2, r3
 8013562:	d34c      	bcc.n	80135fe <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013564:	8bfa      	ldrh	r2, [r7, #30]
 8013566:	8bbb      	ldrh	r3, [r7, #28]
 8013568:	4413      	add	r3, r2
 801356a:	b29b      	uxth	r3, r3
 801356c:	3308      	adds	r3, #8
 801356e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013570:	8a7b      	ldrh	r3, [r7, #18]
 8013572:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013576:	d106      	bne.n	8013586 <mem_malloc+0xb6>
 8013578:	4b72      	ldr	r3, [pc, #456]	@ (8013744 <mem_malloc+0x274>)
 801357a:	f240 3287 	movw	r2, #903	@ 0x387
 801357e:	4972      	ldr	r1, [pc, #456]	@ (8013748 <mem_malloc+0x278>)
 8013580:	4872      	ldr	r0, [pc, #456]	@ (801374c <mem_malloc+0x27c>)
 8013582:	f00d f887 	bl	8020694 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013586:	8a7b      	ldrh	r3, [r7, #18]
 8013588:	4618      	mov	r0, r3
 801358a:	f7ff fc41 	bl	8012e10 <ptr_to_mem>
 801358e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2200      	movs	r2, #0
 8013594:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	881a      	ldrh	r2, [r3, #0]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	8bfa      	ldrh	r2, [r7, #30]
 80135a2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	8a7a      	ldrh	r2, [r7, #18]
 80135a8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	2201      	movs	r2, #1
 80135ae:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	881b      	ldrh	r3, [r3, #0]
 80135b4:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80135b8:	d007      	beq.n	80135ca <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	881b      	ldrh	r3, [r3, #0]
 80135be:	4618      	mov	r0, r3
 80135c0:	f7ff fc26 	bl	8012e10 <ptr_to_mem>
 80135c4:	4602      	mov	r2, r0
 80135c6:	8a7b      	ldrh	r3, [r7, #18]
 80135c8:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80135ca:	4b61      	ldr	r3, [pc, #388]	@ (8013750 <mem_malloc+0x280>)
 80135cc:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 80135d0:	8bbb      	ldrh	r3, [r7, #28]
 80135d2:	4413      	add	r3, r2
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	3308      	adds	r3, #8
 80135d8:	b29a      	uxth	r2, r3
 80135da:	4b5d      	ldr	r3, [pc, #372]	@ (8013750 <mem_malloc+0x280>)
 80135dc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80135e0:	4b5b      	ldr	r3, [pc, #364]	@ (8013750 <mem_malloc+0x280>)
 80135e2:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 80135e6:	4b5a      	ldr	r3, [pc, #360]	@ (8013750 <mem_malloc+0x280>)
 80135e8:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d227      	bcs.n	8013640 <mem_malloc+0x170>
 80135f0:	4b57      	ldr	r3, [pc, #348]	@ (8013750 <mem_malloc+0x280>)
 80135f2:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 80135f6:	4b56      	ldr	r3, [pc, #344]	@ (8013750 <mem_malloc+0x280>)
 80135f8:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
 80135fc:	e020      	b.n	8013640 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	2201      	movs	r2, #1
 8013602:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8013604:	4b52      	ldr	r3, [pc, #328]	@ (8013750 <mem_malloc+0x280>)
 8013606:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	881b      	ldrh	r3, [r3, #0]
 801360e:	4413      	add	r3, r2
 8013610:	b29c      	uxth	r4, r3
 8013612:	6978      	ldr	r0, [r7, #20]
 8013614:	f7ff fc0e 	bl	8012e34 <mem_to_ptr>
 8013618:	4603      	mov	r3, r0
 801361a:	1ae3      	subs	r3, r4, r3
 801361c:	b29a      	uxth	r2, r3
 801361e:	4b4c      	ldr	r3, [pc, #304]	@ (8013750 <mem_malloc+0x280>)
 8013620:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013624:	4b4a      	ldr	r3, [pc, #296]	@ (8013750 <mem_malloc+0x280>)
 8013626:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 801362a:	4b49      	ldr	r3, [pc, #292]	@ (8013750 <mem_malloc+0x280>)
 801362c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013630:	429a      	cmp	r2, r3
 8013632:	d205      	bcs.n	8013640 <mem_malloc+0x170>
 8013634:	4b46      	ldr	r3, [pc, #280]	@ (8013750 <mem_malloc+0x280>)
 8013636:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 801363a:	4b45      	ldr	r3, [pc, #276]	@ (8013750 <mem_malloc+0x280>)
 801363c:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013640:	4b3f      	ldr	r3, [pc, #252]	@ (8013740 <mem_malloc+0x270>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	697a      	ldr	r2, [r7, #20]
 8013646:	429a      	cmp	r2, r3
 8013648:	d127      	bne.n	801369a <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 801364a:	4b3d      	ldr	r3, [pc, #244]	@ (8013740 <mem_malloc+0x270>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013650:	e005      	b.n	801365e <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013652:	69bb      	ldr	r3, [r7, #24]
 8013654:	881b      	ldrh	r3, [r3, #0]
 8013656:	4618      	mov	r0, r3
 8013658:	f7ff fbda 	bl	8012e10 <ptr_to_mem>
 801365c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	791b      	ldrb	r3, [r3, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d004      	beq.n	8013670 <mem_malloc+0x1a0>
 8013666:	4b3b      	ldr	r3, [pc, #236]	@ (8013754 <mem_malloc+0x284>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	69ba      	ldr	r2, [r7, #24]
 801366c:	429a      	cmp	r2, r3
 801366e:	d1f0      	bne.n	8013652 <mem_malloc+0x182>
          }
          lfree = cur;
 8013670:	4a33      	ldr	r2, [pc, #204]	@ (8013740 <mem_malloc+0x270>)
 8013672:	69bb      	ldr	r3, [r7, #24]
 8013674:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013676:	4b32      	ldr	r3, [pc, #200]	@ (8013740 <mem_malloc+0x270>)
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	4b36      	ldr	r3, [pc, #216]	@ (8013754 <mem_malloc+0x284>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	429a      	cmp	r2, r3
 8013680:	d00b      	beq.n	801369a <mem_malloc+0x1ca>
 8013682:	4b2f      	ldr	r3, [pc, #188]	@ (8013740 <mem_malloc+0x270>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	791b      	ldrb	r3, [r3, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d006      	beq.n	801369a <mem_malloc+0x1ca>
 801368c:	4b2d      	ldr	r3, [pc, #180]	@ (8013744 <mem_malloc+0x274>)
 801368e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013692:	4931      	ldr	r1, [pc, #196]	@ (8013758 <mem_malloc+0x288>)
 8013694:	482d      	ldr	r0, [pc, #180]	@ (801374c <mem_malloc+0x27c>)
 8013696:	f00c fffd 	bl	8020694 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801369a:	4828      	ldr	r0, [pc, #160]	@ (801373c <mem_malloc+0x26c>)
 801369c:	f00b fd5f 	bl	801f15e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80136a0:	8bba      	ldrh	r2, [r7, #28]
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	4413      	add	r3, r2
 80136a6:	3308      	adds	r3, #8
 80136a8:	4a2a      	ldr	r2, [pc, #168]	@ (8013754 <mem_malloc+0x284>)
 80136aa:	6812      	ldr	r2, [r2, #0]
 80136ac:	4293      	cmp	r3, r2
 80136ae:	d906      	bls.n	80136be <mem_malloc+0x1ee>
 80136b0:	4b24      	ldr	r3, [pc, #144]	@ (8013744 <mem_malloc+0x274>)
 80136b2:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80136b6:	4929      	ldr	r1, [pc, #164]	@ (801375c <mem_malloc+0x28c>)
 80136b8:	4824      	ldr	r0, [pc, #144]	@ (801374c <mem_malloc+0x27c>)
 80136ba:	f00c ffeb 	bl	8020694 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	f003 0303 	and.w	r3, r3, #3
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d006      	beq.n	80136d6 <mem_malloc+0x206>
 80136c8:	4b1e      	ldr	r3, [pc, #120]	@ (8013744 <mem_malloc+0x274>)
 80136ca:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80136ce:	4924      	ldr	r1, [pc, #144]	@ (8013760 <mem_malloc+0x290>)
 80136d0:	481e      	ldr	r0, [pc, #120]	@ (801374c <mem_malloc+0x27c>)
 80136d2:	f00c ffdf 	bl	8020694 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	f003 0303 	and.w	r3, r3, #3
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d006      	beq.n	80136ee <mem_malloc+0x21e>
 80136e0:	4b18      	ldr	r3, [pc, #96]	@ (8013744 <mem_malloc+0x274>)
 80136e2:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80136e6:	491f      	ldr	r1, [pc, #124]	@ (8013764 <mem_malloc+0x294>)
 80136e8:	4818      	ldr	r0, [pc, #96]	@ (801374c <mem_malloc+0x27c>)
 80136ea:	f00c ffd3 	bl	8020694 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	3308      	adds	r3, #8
 80136f2:	e01f      	b.n	8013734 <mem_malloc+0x264>
         ptr = ptr_to_mem(ptr)->next) {
 80136f4:	8bfb      	ldrh	r3, [r7, #30]
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7ff fb8a 	bl	8012e10 <ptr_to_mem>
 80136fc:	4603      	mov	r3, r0
 80136fe:	881b      	ldrh	r3, [r3, #0]
 8013700:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013702:	8bfa      	ldrh	r2, [r7, #30]
 8013704:	8bbb      	ldrh	r3, [r7, #28]
 8013706:	f5c3 43c8 	rsb	r3, r3, #25600	@ 0x6400
 801370a:	429a      	cmp	r2, r3
 801370c:	f4ff af0a 	bcc.w	8013524 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8013710:	4b0f      	ldr	r3, [pc, #60]	@ (8013750 <mem_malloc+0x280>)
 8013712:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013716:	3301      	adds	r3, #1
 8013718:	b29a      	uxth	r2, r3
 801371a:	4b0d      	ldr	r3, [pc, #52]	@ (8013750 <mem_malloc+0x280>)
 801371c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013720:	4806      	ldr	r0, [pc, #24]	@ (801373c <mem_malloc+0x26c>)
 8013722:	f00b fd1c 	bl	801f15e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 8013726:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801372a:	4619      	mov	r1, r3
 801372c:	480e      	ldr	r0, [pc, #56]	@ (8013768 <mem_malloc+0x298>)
 801372e:	f00c ffb1 	bl	8020694 <iprintf>
  return NULL;
 8013732:	2300      	movs	r3, #0
}
 8013734:	4618      	mov	r0, r3
 8013736:	3724      	adds	r7, #36	@ 0x24
 8013738:	46bd      	mov	sp, r7
 801373a:	bd90      	pop	{r4, r7, pc}
 801373c:	2002711c 	.word	0x2002711c
 8013740:	20027120 	.word	0x20027120
 8013744:	080224e8 	.word	0x080224e8
 8013748:	08022744 	.word	0x08022744
 801374c:	08022530 	.word	0x08022530
 8013750:	2002d36c 	.word	0x2002d36c
 8013754:	20027118 	.word	0x20027118
 8013758:	08022758 	.word	0x08022758
 801375c:	08022774 	.word	0x08022774
 8013760:	080227a4 	.word	0x080227a4
 8013764:	080227d4 	.word	0x080227d4
 8013768:	080227f8 	.word	0x080227f8

0801376c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801376c:	b480      	push	{r7}
 801376e:	b085      	sub	sp, #20
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	691b      	ldr	r3, [r3, #16]
 8013778:	2200      	movs	r2, #0
 801377a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	3303      	adds	r3, #3
 8013782:	f023 0303 	bic.w	r3, r3, #3
 8013786:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013788:	2300      	movs	r3, #0
 801378a:	60fb      	str	r3, [r7, #12]
 801378c:	e011      	b.n	80137b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	691b      	ldr	r3, [r3, #16]
 8013792:	681a      	ldr	r2, [r3, #0]
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	691b      	ldr	r3, [r3, #16]
 801379c:	68ba      	ldr	r2, [r7, #8]
 801379e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	891b      	ldrh	r3, [r3, #8]
 80137a4:	461a      	mov	r2, r3
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	4413      	add	r3, r2
 80137aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	3301      	adds	r3, #1
 80137b0:	60fb      	str	r3, [r7, #12]
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	895b      	ldrh	r3, [r3, #10]
 80137b6:	461a      	mov	r2, r3
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	4293      	cmp	r3, r2
 80137bc:	dbe7      	blt.n	801378e <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	687a      	ldr	r2, [r7, #4]
 80137c4:	8952      	ldrh	r2, [r2, #10]
 80137c6:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	6812      	ldr	r2, [r2, #0]
 80137d0:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80137d2:	bf00      	nop
 80137d4:	3714      	adds	r7, #20
 80137d6:	46bd      	mov	sp, r7
 80137d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137dc:	4770      	bx	lr
	...

080137e0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80137e6:	2300      	movs	r3, #0
 80137e8:	80fb      	strh	r3, [r7, #6]
 80137ea:	e013      	b.n	8013814 <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 80137ec:	88fb      	ldrh	r3, [r7, #6]
 80137ee:	4a0d      	ldr	r2, [pc, #52]	@ (8013824 <memp_init+0x44>)
 80137f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7ff ffb9 	bl	801376c <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80137fa:	88fb      	ldrh	r3, [r7, #6]
 80137fc:	4a09      	ldr	r2, [pc, #36]	@ (8013824 <memp_init+0x44>)
 80137fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013802:	88fb      	ldrh	r3, [r7, #6]
 8013804:	6852      	ldr	r2, [r2, #4]
 8013806:	4908      	ldr	r1, [pc, #32]	@ (8013828 <memp_init+0x48>)
 8013808:	332e      	adds	r3, #46	@ 0x2e
 801380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801380e:	88fb      	ldrh	r3, [r7, #6]
 8013810:	3301      	adds	r3, #1
 8013812:	80fb      	strh	r3, [r7, #6]
 8013814:	88fb      	ldrh	r3, [r7, #6]
 8013816:	2b0c      	cmp	r3, #12
 8013818:	d9e8      	bls.n	80137ec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801381a:	bf00      	nop
 801381c:	bf00      	nop
 801381e:	3708      	adds	r7, #8
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}
 8013824:	080266f4 	.word	0x080266f4
 8013828:	2002d36c 	.word	0x2002d36c

0801382c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b084      	sub	sp, #16
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013834:	f00b fcc0 	bl	801f1b8 <sys_arch_protect>
 8013838:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	691b      	ldr	r3, [r3, #16]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d029      	beq.n	801389c <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	691b      	ldr	r3, [r3, #16]
 801384c:	68ba      	ldr	r2, [r7, #8]
 801384e:	6812      	ldr	r2, [r2, #0]
 8013850:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	f003 0303 	and.w	r3, r3, #3
 8013858:	2b00      	cmp	r3, #0
 801385a:	d006      	beq.n	801386a <do_memp_malloc_pool+0x3e>
 801385c:	4b19      	ldr	r3, [pc, #100]	@ (80138c4 <do_memp_malloc_pool+0x98>)
 801385e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013862:	4919      	ldr	r1, [pc, #100]	@ (80138c8 <do_memp_malloc_pool+0x9c>)
 8013864:	4819      	ldr	r0, [pc, #100]	@ (80138cc <do_memp_malloc_pool+0xa0>)
 8013866:	f00c ff15 	bl	8020694 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	891a      	ldrh	r2, [r3, #8]
 8013870:	3201      	adds	r2, #1
 8013872:	b292      	uxth	r2, r2
 8013874:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	891a      	ldrh	r2, [r3, #8]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	895b      	ldrh	r3, [r3, #10]
 8013882:	429a      	cmp	r2, r3
 8013884:	d905      	bls.n	8013892 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	685a      	ldr	r2, [r3, #4]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	8912      	ldrh	r2, [r2, #8]
 8013890:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013892:	68f8      	ldr	r0, [r7, #12]
 8013894:	f00b fc9e 	bl	801f1d4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	e00f      	b.n	80138bc <do_memp_malloc_pool+0x90>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	889a      	ldrh	r2, [r3, #4]
 80138a2:	3201      	adds	r2, #1
 80138a4:	b292      	uxth	r2, r2
 80138a6:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80138a8:	68f8      	ldr	r0, [r7, #12]
 80138aa:	f00b fc93 	bl	801f1d4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	4619      	mov	r1, r3
 80138b4:	4806      	ldr	r0, [pc, #24]	@ (80138d0 <do_memp_malloc_pool+0xa4>)
 80138b6:	f00c feed 	bl	8020694 <iprintf>
  }

  return NULL;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3710      	adds	r7, #16
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	080228e8 	.word	0x080228e8
 80138c8:	08022918 	.word	0x08022918
 80138cc:	0802293c 	.word	0x0802293c
 80138d0:	08022964 	.word	0x08022964

080138d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d106      	bne.n	80138f0 <memp_malloc_pool+0x1c>
 80138e2:	4b0a      	ldr	r3, [pc, #40]	@ (801390c <memp_malloc_pool+0x38>)
 80138e4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80138e8:	4909      	ldr	r1, [pc, #36]	@ (8013910 <memp_malloc_pool+0x3c>)
 80138ea:	480a      	ldr	r0, [pc, #40]	@ (8013914 <memp_malloc_pool+0x40>)
 80138ec:	f00c fed2 	bl	8020694 <iprintf>
  if (desc == NULL) {
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d101      	bne.n	80138fa <memp_malloc_pool+0x26>
    return NULL;
 80138f6:	2300      	movs	r3, #0
 80138f8:	e003      	b.n	8013902 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f7ff ff96 	bl	801382c <do_memp_malloc_pool>
 8013900:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013902:	4618      	mov	r0, r3
 8013904:	3708      	adds	r7, #8
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}
 801390a:	bf00      	nop
 801390c:	080228e8 	.word	0x080228e8
 8013910:	0802298c 	.word	0x0802298c
 8013914:	0802293c 	.word	0x0802293c

08013918 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b084      	sub	sp, #16
 801391c:	af00      	add	r7, sp, #0
 801391e:	4603      	mov	r3, r0
 8013920:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013922:	79fb      	ldrb	r3, [r7, #7]
 8013924:	2b0c      	cmp	r3, #12
 8013926:	d908      	bls.n	801393a <memp_malloc+0x22>
 8013928:	4b0a      	ldr	r3, [pc, #40]	@ (8013954 <memp_malloc+0x3c>)
 801392a:	f240 1257 	movw	r2, #343	@ 0x157
 801392e:	490a      	ldr	r1, [pc, #40]	@ (8013958 <memp_malloc+0x40>)
 8013930:	480a      	ldr	r0, [pc, #40]	@ (801395c <memp_malloc+0x44>)
 8013932:	f00c feaf 	bl	8020694 <iprintf>
 8013936:	2300      	movs	r3, #0
 8013938:	e008      	b.n	801394c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801393a:	79fb      	ldrb	r3, [r7, #7]
 801393c:	4a08      	ldr	r2, [pc, #32]	@ (8013960 <memp_malloc+0x48>)
 801393e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013942:	4618      	mov	r0, r3
 8013944:	f7ff ff72 	bl	801382c <do_memp_malloc_pool>
 8013948:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801394a:	68fb      	ldr	r3, [r7, #12]
}
 801394c:	4618      	mov	r0, r3
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	080228e8 	.word	0x080228e8
 8013958:	080229a0 	.word	0x080229a0
 801395c:	0802293c 	.word	0x0802293c
 8013960:	080266f4 	.word	0x080266f4

08013964 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b084      	sub	sp, #16
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
 801396c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	f003 0303 	and.w	r3, r3, #3
 8013974:	2b00      	cmp	r3, #0
 8013976:	d006      	beq.n	8013986 <do_memp_free_pool+0x22>
 8013978:	4b10      	ldr	r3, [pc, #64]	@ (80139bc <do_memp_free_pool+0x58>)
 801397a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801397e:	4910      	ldr	r1, [pc, #64]	@ (80139c0 <do_memp_free_pool+0x5c>)
 8013980:	4810      	ldr	r0, [pc, #64]	@ (80139c4 <do_memp_free_pool+0x60>)
 8013982:	f00c fe87 	bl	8020694 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801398a:	f00b fc15 	bl	801f1b8 <sys_arch_protect>
 801398e:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	891a      	ldrh	r2, [r3, #8]
 8013996:	3a01      	subs	r2, #1
 8013998:	b292      	uxth	r2, r2
 801399a:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	691b      	ldr	r3, [r3, #16]
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	691b      	ldr	r3, [r3, #16]
 80139aa:	68fa      	ldr	r2, [r7, #12]
 80139ac:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80139ae:	68b8      	ldr	r0, [r7, #8]
 80139b0:	f00b fc10 	bl	801f1d4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80139b4:	bf00      	nop
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	080228e8 	.word	0x080228e8
 80139c0:	080229c0 	.word	0x080229c0
 80139c4:	0802293c 	.word	0x0802293c

080139c8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d106      	bne.n	80139e6 <memp_free_pool+0x1e>
 80139d8:	4b0a      	ldr	r3, [pc, #40]	@ (8013a04 <memp_free_pool+0x3c>)
 80139da:	f240 1295 	movw	r2, #405	@ 0x195
 80139de:	490a      	ldr	r1, [pc, #40]	@ (8013a08 <memp_free_pool+0x40>)
 80139e0:	480a      	ldr	r0, [pc, #40]	@ (8013a0c <memp_free_pool+0x44>)
 80139e2:	f00c fe57 	bl	8020694 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d007      	beq.n	80139fc <memp_free_pool+0x34>
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d004      	beq.n	80139fc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80139f2:	6839      	ldr	r1, [r7, #0]
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f7ff ffb5 	bl	8013964 <do_memp_free_pool>
 80139fa:	e000      	b.n	80139fe <memp_free_pool+0x36>
    return;
 80139fc:	bf00      	nop
}
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	080228e8 	.word	0x080228e8
 8013a08:	0802298c 	.word	0x0802298c
 8013a0c:	0802293c 	.word	0x0802293c

08013a10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	4603      	mov	r3, r0
 8013a18:	6039      	str	r1, [r7, #0]
 8013a1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013a1c:	79fb      	ldrb	r3, [r7, #7]
 8013a1e:	2b0c      	cmp	r3, #12
 8013a20:	d907      	bls.n	8013a32 <memp_free+0x22>
 8013a22:	4b0c      	ldr	r3, [pc, #48]	@ (8013a54 <memp_free+0x44>)
 8013a24:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013a28:	490b      	ldr	r1, [pc, #44]	@ (8013a58 <memp_free+0x48>)
 8013a2a:	480c      	ldr	r0, [pc, #48]	@ (8013a5c <memp_free+0x4c>)
 8013a2c:	f00c fe32 	bl	8020694 <iprintf>
 8013a30:	e00c      	b.n	8013a4c <memp_free+0x3c>

  if (mem == NULL) {
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d008      	beq.n	8013a4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013a38:	79fb      	ldrb	r3, [r7, #7]
 8013a3a:	4a09      	ldr	r2, [pc, #36]	@ (8013a60 <memp_free+0x50>)
 8013a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a40:	6839      	ldr	r1, [r7, #0]
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7ff ff8e 	bl	8013964 <do_memp_free_pool>
 8013a48:	e000      	b.n	8013a4c <memp_free+0x3c>
    return;
 8013a4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013a4c:	3708      	adds	r7, #8
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}
 8013a52:	bf00      	nop
 8013a54:	080228e8 	.word	0x080228e8
 8013a58:	080229e0 	.word	0x080229e0
 8013a5c:	0802293c 	.word	0x0802293c
 8013a60:	080266f4 	.word	0x080266f4

08013a64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013a64:	b480      	push	{r7}
 8013a66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013a68:	bf00      	nop
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a70:	4770      	bx	lr
	...

08013a74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b088      	sub	sp, #32
 8013a78:	af02      	add	r7, sp, #8
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	607a      	str	r2, [r7, #4]
 8013a80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d108      	bne.n	8013a9a <netif_add+0x26>
 8013a88:	4b96      	ldr	r3, [pc, #600]	@ (8013ce4 <netif_add+0x270>)
 8013a8a:	f240 1227 	movw	r2, #295	@ 0x127
 8013a8e:	4996      	ldr	r1, [pc, #600]	@ (8013ce8 <netif_add+0x274>)
 8013a90:	4896      	ldr	r0, [pc, #600]	@ (8013cec <netif_add+0x278>)
 8013a92:	f00c fdff 	bl	8020694 <iprintf>
 8013a96:	2300      	movs	r3, #0
 8013a98:	e14c      	b.n	8013d34 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d108      	bne.n	8013ab2 <netif_add+0x3e>
 8013aa0:	4b90      	ldr	r3, [pc, #576]	@ (8013ce4 <netif_add+0x270>)
 8013aa2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013aa6:	4992      	ldr	r1, [pc, #584]	@ (8013cf0 <netif_add+0x27c>)
 8013aa8:	4890      	ldr	r0, [pc, #576]	@ (8013cec <netif_add+0x278>)
 8013aaa:	f00c fdf3 	bl	8020694 <iprintf>
 8013aae:	2300      	movs	r3, #0
 8013ab0:	e140      	b.n	8013d34 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d101      	bne.n	8013abc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8013cf4 <netif_add+0x280>)
 8013aba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d101      	bne.n	8013ac6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013ac2:	4b8c      	ldr	r3, [pc, #560]	@ (8013cf4 <netif_add+0x280>)
 8013ac4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013acc:	4b89      	ldr	r3, [pc, #548]	@ (8013cf4 <netif_add+0x280>)
 8013ace:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	4a84      	ldr	r2, [pc, #528]	@ (8013cf8 <netif_add+0x284>)
 8013ae6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2200      	movs	r2, #0
 8013aec:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2200      	movs	r2, #0
 8013af2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2200      	movs	r2, #0
 8013afa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	6a3a      	ldr	r2, [r7, #32]
 8013b00:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013b02:	4b7e      	ldr	r3, [pc, #504]	@ (8013cfc <netif_add+0x288>)
 8013b04:	781a      	ldrb	r2, [r3, #0]
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b10:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	68b9      	ldr	r1, [r7, #8]
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f000 f9f5 	bl	8013f08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	4798      	blx	r3
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d001      	beq.n	8013b2e <netif_add+0xba>
    return NULL;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	e102      	b.n	8013d34 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b34:	2bff      	cmp	r3, #255	@ 0xff
 8013b36:	d103      	bne.n	8013b40 <netif_add+0xcc>
        netif->num = 0;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013b40:	2300      	movs	r3, #0
 8013b42:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013b44:	4b6e      	ldr	r3, [pc, #440]	@ (8013d00 <netif_add+0x28c>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	617b      	str	r3, [r7, #20]
 8013b4a:	e02b      	b.n	8013ba4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013b4c:	697a      	ldr	r2, [r7, #20]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d106      	bne.n	8013b62 <netif_add+0xee>
 8013b54:	4b63      	ldr	r3, [pc, #396]	@ (8013ce4 <netif_add+0x270>)
 8013b56:	f240 128b 	movw	r2, #395	@ 0x18b
 8013b5a:	496a      	ldr	r1, [pc, #424]	@ (8013d04 <netif_add+0x290>)
 8013b5c:	4863      	ldr	r0, [pc, #396]	@ (8013cec <netif_add+0x278>)
 8013b5e:	f00c fd99 	bl	8020694 <iprintf>
        num_netifs++;
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	3301      	adds	r3, #1
 8013b66:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	2bff      	cmp	r3, #255	@ 0xff
 8013b6c:	dd06      	ble.n	8013b7c <netif_add+0x108>
 8013b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8013ce4 <netif_add+0x270>)
 8013b70:	f240 128d 	movw	r2, #397	@ 0x18d
 8013b74:	4964      	ldr	r1, [pc, #400]	@ (8013d08 <netif_add+0x294>)
 8013b76:	485d      	ldr	r0, [pc, #372]	@ (8013cec <netif_add+0x278>)
 8013b78:	f00c fd8c 	bl	8020694 <iprintf>
        if (netif2->num == netif->num) {
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d108      	bne.n	8013b9e <netif_add+0x12a>
          netif->num++;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b92:	3301      	adds	r3, #1
 8013b94:	b2da      	uxtb	r2, r3
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013b9c:	e005      	b.n	8013baa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	617b      	str	r3, [r7, #20]
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d1d0      	bne.n	8013b4c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d1be      	bne.n	8013b2e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013bb6:	2bfe      	cmp	r3, #254	@ 0xfe
 8013bb8:	d103      	bne.n	8013bc2 <netif_add+0x14e>
    netif_num = 0;
 8013bba:	4b50      	ldr	r3, [pc, #320]	@ (8013cfc <netif_add+0x288>)
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	701a      	strb	r2, [r3, #0]
 8013bc0:	e006      	b.n	8013bd0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013bc8:	3301      	adds	r3, #1
 8013bca:	b2da      	uxtb	r2, r3
 8013bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8013cfc <netif_add+0x288>)
 8013bce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8013d00 <netif_add+0x28c>)
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013bd8:	4a49      	ldr	r2, [pc, #292]	@ (8013d00 <netif_add+0x28c>)
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013be4:	4619      	mov	r1, r3
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013bec:	461a      	mov	r2, r3
 8013bee:	4847      	ldr	r0, [pc, #284]	@ (8013d0c <netif_add+0x298>)
 8013bf0:	f00c fd50 	bl	8020694 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 8013bf4:	4846      	ldr	r0, [pc, #280]	@ (8013d10 <netif_add+0x29c>)
 8013bf6:	f00c fd4d 	bl	8020694 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d003      	beq.n	8013c08 <netif_add+0x194>
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	4619      	mov	r1, r3
 8013c06:	e000      	b.n	8013c0a <netif_add+0x196>
 8013c08:	2100      	movs	r1, #0
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d004      	beq.n	8013c1a <netif_add+0x1a6>
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	3301      	adds	r3, #1
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	461a      	mov	r2, r3
 8013c18:	e000      	b.n	8013c1c <netif_add+0x1a8>
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d004      	beq.n	8013c2c <netif_add+0x1b8>
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	3302      	adds	r3, #2
 8013c26:	781b      	ldrb	r3, [r3, #0]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	e000      	b.n	8013c2e <netif_add+0x1ba>
 8013c2c:	2000      	movs	r0, #0
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d003      	beq.n	8013c3c <netif_add+0x1c8>
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	3303      	adds	r3, #3
 8013c38:	781b      	ldrb	r3, [r3, #0]
 8013c3a:	e000      	b.n	8013c3e <netif_add+0x1ca>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	4603      	mov	r3, r0
 8013c42:	4834      	ldr	r0, [pc, #208]	@ (8013d14 <netif_add+0x2a0>)
 8013c44:	f00c fd26 	bl	8020694 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8013c48:	4833      	ldr	r0, [pc, #204]	@ (8013d18 <netif_add+0x2a4>)
 8013c4a:	f00c fd23 	bl	8020694 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d003      	beq.n	8013c5c <netif_add+0x1e8>
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	4619      	mov	r1, r3
 8013c5a:	e000      	b.n	8013c5e <netif_add+0x1ea>
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d004      	beq.n	8013c6e <netif_add+0x1fa>
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	3301      	adds	r3, #1
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	461a      	mov	r2, r3
 8013c6c:	e000      	b.n	8013c70 <netif_add+0x1fc>
 8013c6e:	2200      	movs	r2, #0
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d004      	beq.n	8013c80 <netif_add+0x20c>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	3302      	adds	r3, #2
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	e000      	b.n	8013c82 <netif_add+0x20e>
 8013c80:	2000      	movs	r0, #0
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d003      	beq.n	8013c90 <netif_add+0x21c>
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	3303      	adds	r3, #3
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	e000      	b.n	8013c92 <netif_add+0x21e>
 8013c90:	2300      	movs	r3, #0
 8013c92:	9300      	str	r3, [sp, #0]
 8013c94:	4603      	mov	r3, r0
 8013c96:	481f      	ldr	r0, [pc, #124]	@ (8013d14 <netif_add+0x2a0>)
 8013c98:	f00c fcfc 	bl	8020694 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8013c9c:	481f      	ldr	r0, [pc, #124]	@ (8013d1c <netif_add+0x2a8>)
 8013c9e:	f00c fcf9 	bl	8020694 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d003      	beq.n	8013cb0 <netif_add+0x23c>
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	4619      	mov	r1, r3
 8013cae:	e000      	b.n	8013cb2 <netif_add+0x23e>
 8013cb0:	2100      	movs	r1, #0
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d004      	beq.n	8013cc2 <netif_add+0x24e>
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	3301      	adds	r3, #1
 8013cbc:	781b      	ldrb	r3, [r3, #0]
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	e000      	b.n	8013cc4 <netif_add+0x250>
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d004      	beq.n	8013cd4 <netif_add+0x260>
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	3302      	adds	r3, #2
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	e000      	b.n	8013cd6 <netif_add+0x262>
 8013cd4:	2000      	movs	r0, #0
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d021      	beq.n	8013d20 <netif_add+0x2ac>
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	3303      	adds	r3, #3
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	e01e      	b.n	8013d22 <netif_add+0x2ae>
 8013ce4:	080229fc 	.word	0x080229fc
 8013ce8:	08022a90 	.word	0x08022a90
 8013cec:	08022a4c 	.word	0x08022a4c
 8013cf0:	08022aac 	.word	0x08022aac
 8013cf4:	08026768 	.word	0x08026768
 8013cf8:	0801420b 	.word	0x0801420b
 8013cfc:	2002d368 	.word	0x2002d368
 8013d00:	2002d360 	.word	0x2002d360
 8013d04:	08022ad0 	.word	0x08022ad0
 8013d08:	08022ae4 	.word	0x08022ae4
 8013d0c:	08022b14 	.word	0x08022b14
 8013d10:	08022b34 	.word	0x08022b34
 8013d14:	08022b3c 	.word	0x08022b3c
 8013d18:	08022b4c 	.word	0x08022b4c
 8013d1c:	08022b58 	.word	0x08022b58
 8013d20:	2300      	movs	r3, #0
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	4603      	mov	r3, r0
 8013d26:	4805      	ldr	r0, [pc, #20]	@ (8013d3c <netif_add+0x2c8>)
 8013d28:	f00c fcb4 	bl	8020694 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8013d2c:	200a      	movs	r0, #10
 8013d2e:	f00c fcc3 	bl	80206b8 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013d32:	68fb      	ldr	r3, [r7, #12]
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3718      	adds	r7, #24
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	08022b3c 	.word	0x08022b3c

08013d40 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013d4a:	6839      	ldr	r1, [r7, #0]
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f002 fead 	bl	8016aac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013d52:	6839      	ldr	r1, [r7, #0]
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f008 fa3f 	bl	801c1d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013d5a:	bf00      	nop
 8013d5c:	3708      	adds	r7, #8
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
	...

08013d64 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b086      	sub	sp, #24
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d106      	bne.n	8013d84 <netif_do_set_ipaddr+0x20>
 8013d76:	4b1e      	ldr	r3, [pc, #120]	@ (8013df0 <netif_do_set_ipaddr+0x8c>)
 8013d78:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013d7c:	491d      	ldr	r1, [pc, #116]	@ (8013df4 <netif_do_set_ipaddr+0x90>)
 8013d7e:	481e      	ldr	r0, [pc, #120]	@ (8013df8 <netif_do_set_ipaddr+0x94>)
 8013d80:	f00c fc88 	bl	8020694 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d106      	bne.n	8013d98 <netif_do_set_ipaddr+0x34>
 8013d8a:	4b19      	ldr	r3, [pc, #100]	@ (8013df0 <netif_do_set_ipaddr+0x8c>)
 8013d8c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013d90:	4918      	ldr	r1, [pc, #96]	@ (8013df4 <netif_do_set_ipaddr+0x90>)
 8013d92:	4819      	ldr	r0, [pc, #100]	@ (8013df8 <netif_do_set_ipaddr+0x94>)
 8013d94:	f00c fc7e 	bl	8020694 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	3304      	adds	r3, #4
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d01f      	beq.n	8013de6 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	3304      	adds	r3, #4
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 8013db6:	4811      	ldr	r0, [pc, #68]	@ (8013dfc <netif_do_set_ipaddr+0x98>)
 8013db8:	f00c fcdc 	bl	8020774 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013dbc:	f107 0314 	add.w	r3, r7, #20
 8013dc0:	4619      	mov	r1, r3
 8013dc2:	6878      	ldr	r0, [r7, #4]
 8013dc4:	f7ff ffbc 	bl	8013d40 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d002      	beq.n	8013dd4 <netif_do_set_ipaddr+0x70>
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	e000      	b.n	8013dd6 <netif_do_set_ipaddr+0x72>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	68fa      	ldr	r2, [r7, #12]
 8013dd8:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013dda:	2101      	movs	r1, #1
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f000 f92d 	bl	801403c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013de2:	2301      	movs	r3, #1
 8013de4:	e000      	b.n	8013de8 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 8013de6:	2300      	movs	r3, #0
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3718      	adds	r7, #24
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	080229fc 	.word	0x080229fc
 8013df4:	08022b60 	.word	0x08022b60
 8013df8:	08022a4c 	.word	0x08022a4c
 8013dfc:	08022b70 	.word	0x08022b70

08013e00 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013e00:	b5b0      	push	{r4, r5, r7, lr}
 8013e02:	b088      	sub	sp, #32
 8013e04:	af04      	add	r7, sp, #16
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	60b9      	str	r1, [r7, #8]
 8013e0a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	3308      	adds	r3, #8
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d02d      	beq.n	8013e76 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d002      	beq.n	8013e26 <netif_do_set_netmask+0x26>
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	e000      	b.n	8013e28 <netif_do_set_netmask+0x28>
 8013e26:	2300      	movs	r3, #0
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013e32:	4618      	mov	r0, r3
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013e3a:	461c      	mov	r4, r3
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	3308      	adds	r3, #8
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	461d      	mov	r5, r3
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	3308      	adds	r3, #8
 8013e48:	3301      	adds	r3, #1
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	3308      	adds	r3, #8
 8013e52:	3302      	adds	r3, #2
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	4619      	mov	r1, r3
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	3308      	adds	r3, #8
 8013e5c:	3303      	adds	r3, #3
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	9302      	str	r3, [sp, #8]
 8013e62:	9101      	str	r1, [sp, #4]
 8013e64:	9200      	str	r2, [sp, #0]
 8013e66:	462b      	mov	r3, r5
 8013e68:	4622      	mov	r2, r4
 8013e6a:	4601      	mov	r1, r0
 8013e6c:	4804      	ldr	r0, [pc, #16]	@ (8013e80 <netif_do_set_netmask+0x80>)
 8013e6e:	f00c fc11 	bl	8020694 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013e72:	2301      	movs	r3, #1
 8013e74:	e000      	b.n	8013e78 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 8013e76:	2300      	movs	r3, #0
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3710      	adds	r7, #16
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8013e80:	08022bc0 	.word	0x08022bc0

08013e84 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013e84:	b5b0      	push	{r4, r5, r7, lr}
 8013e86:	b088      	sub	sp, #32
 8013e88:	af04      	add	r7, sp, #16
 8013e8a:	60f8      	str	r0, [r7, #12]
 8013e8c:	60b9      	str	r1, [r7, #8]
 8013e8e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	681a      	ldr	r2, [r3, #0]
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	330c      	adds	r3, #12
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d02d      	beq.n	8013efa <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d002      	beq.n	8013eaa <netif_do_set_gw+0x26>
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	e000      	b.n	8013eac <netif_do_set_gw+0x28>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	68fa      	ldr	r2, [r7, #12]
 8013eae:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013ebe:	461c      	mov	r4, r3
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	330c      	adds	r3, #12
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	461d      	mov	r5, r3
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	330c      	adds	r3, #12
 8013ecc:	3301      	adds	r3, #1
 8013ece:	781b      	ldrb	r3, [r3, #0]
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	330c      	adds	r3, #12
 8013ed6:	3302      	adds	r3, #2
 8013ed8:	781b      	ldrb	r3, [r3, #0]
 8013eda:	4619      	mov	r1, r3
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	330c      	adds	r3, #12
 8013ee0:	3303      	adds	r3, #3
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	9302      	str	r3, [sp, #8]
 8013ee6:	9101      	str	r1, [sp, #4]
 8013ee8:	9200      	str	r2, [sp, #0]
 8013eea:	462b      	mov	r3, r5
 8013eec:	4622      	mov	r2, r4
 8013eee:	4601      	mov	r1, r0
 8013ef0:	4804      	ldr	r0, [pc, #16]	@ (8013f04 <netif_do_set_gw+0x80>)
 8013ef2:	f00c fbcf 	bl	8020694 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	e000      	b.n	8013efc <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8013efa:	2300      	movs	r3, #0
}
 8013efc:	4618      	mov	r0, r3
 8013efe:	3710      	adds	r7, #16
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bdb0      	pop	{r4, r5, r7, pc}
 8013f04:	08022c20 	.word	0x08022c20

08013f08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b088      	sub	sp, #32
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
 8013f14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013f16:	2300      	movs	r3, #0
 8013f18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d101      	bne.n	8013f28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013f24:	4b1c      	ldr	r3, [pc, #112]	@ (8013f98 <netif_set_addr+0x90>)
 8013f26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d101      	bne.n	8013f32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8013f98 <netif_set_addr+0x90>)
 8013f30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d101      	bne.n	8013f3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013f38:	4b17      	ldr	r3, [pc, #92]	@ (8013f98 <netif_set_addr+0x90>)
 8013f3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d003      	beq.n	8013f4a <netif_set_addr+0x42>
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d101      	bne.n	8013f4e <netif_set_addr+0x46>
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e000      	b.n	8013f50 <netif_set_addr+0x48>
 8013f4e:	2300      	movs	r3, #0
 8013f50:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d006      	beq.n	8013f66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013f58:	f107 0310 	add.w	r3, r7, #16
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	68b9      	ldr	r1, [r7, #8]
 8013f60:	68f8      	ldr	r0, [r7, #12]
 8013f62:	f7ff feff 	bl	8013d64 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013f66:	69fa      	ldr	r2, [r7, #28]
 8013f68:	6879      	ldr	r1, [r7, #4]
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	f7ff ff48 	bl	8013e00 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013f70:	69ba      	ldr	r2, [r7, #24]
 8013f72:	6839      	ldr	r1, [r7, #0]
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f7ff ff85 	bl	8013e84 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d106      	bne.n	8013f8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013f80:	f107 0310 	add.w	r3, r7, #16
 8013f84:	461a      	mov	r2, r3
 8013f86:	68b9      	ldr	r1, [r7, #8]
 8013f88:	68f8      	ldr	r0, [r7, #12]
 8013f8a:	f7ff feeb 	bl	8013d64 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013f8e:	bf00      	nop
 8013f90:	3720      	adds	r7, #32
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	08026768 	.word	0x08026768

08013f9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8013fdc <netif_set_default+0x40>)
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d004      	beq.n	8013fba <netif_set_default+0x1e>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	e000      	b.n	8013fbc <netif_set_default+0x20>
 8013fba:	2127      	movs	r1, #39	@ 0x27
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d003      	beq.n	8013fca <netif_set_default+0x2e>
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013fc8:	e000      	b.n	8013fcc <netif_set_default+0x30>
 8013fca:	2327      	movs	r3, #39	@ 0x27
 8013fcc:	461a      	mov	r2, r3
 8013fce:	4804      	ldr	r0, [pc, #16]	@ (8013fe0 <netif_set_default+0x44>)
 8013fd0:	f00c fb60 	bl	8020694 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013fd4:	bf00      	nop
 8013fd6:	3708      	adds	r7, #8
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}
 8013fdc:	2002d364 	.word	0x2002d364
 8013fe0:	08022c94 	.word	0x08022c94

08013fe4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b082      	sub	sp, #8
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d107      	bne.n	8014002 <netif_set_up+0x1e>
 8013ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8014030 <netif_set_up+0x4c>)
 8013ff4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013ff8:	490e      	ldr	r1, [pc, #56]	@ (8014034 <netif_set_up+0x50>)
 8013ffa:	480f      	ldr	r0, [pc, #60]	@ (8014038 <netif_set_up+0x54>)
 8013ffc:	f00c fb4a 	bl	8020694 <iprintf>
 8014000:	e013      	b.n	801402a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014008:	f003 0301 	and.w	r3, r3, #1
 801400c:	2b00      	cmp	r3, #0
 801400e:	d10c      	bne.n	801402a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014016:	f043 0301 	orr.w	r3, r3, #1
 801401a:	b2da      	uxtb	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014022:	2103      	movs	r1, #3
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f000 f809 	bl	801403c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	080229fc 	.word	0x080229fc
 8014034:	08022cbc 	.word	0x08022cbc
 8014038:	08022a4c 	.word	0x08022a4c

0801403c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	460b      	mov	r3, r1
 8014046:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d106      	bne.n	801405c <netif_issue_reports+0x20>
 801404e:	4b18      	ldr	r3, [pc, #96]	@ (80140b0 <netif_issue_reports+0x74>)
 8014050:	f240 326d 	movw	r2, #877	@ 0x36d
 8014054:	4917      	ldr	r1, [pc, #92]	@ (80140b4 <netif_issue_reports+0x78>)
 8014056:	4818      	ldr	r0, [pc, #96]	@ (80140b8 <netif_issue_reports+0x7c>)
 8014058:	f00c fb1c 	bl	8020694 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014062:	f003 0304 	and.w	r3, r3, #4
 8014066:	2b00      	cmp	r3, #0
 8014068:	d01e      	beq.n	80140a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014070:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014074:	2b00      	cmp	r3, #0
 8014076:	d017      	beq.n	80140a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014078:	78fb      	ldrb	r3, [r7, #3]
 801407a:	f003 0301 	and.w	r3, r3, #1
 801407e:	2b00      	cmp	r3, #0
 8014080:	d013      	beq.n	80140aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	3304      	adds	r3, #4
 8014086:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014088:	2b00      	cmp	r3, #0
 801408a:	d00e      	beq.n	80140aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014092:	f003 0308 	and.w	r3, r3, #8
 8014096:	2b00      	cmp	r3, #0
 8014098:	d007      	beq.n	80140aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	3304      	adds	r3, #4
 801409e:	4619      	mov	r1, r3
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f009 f8b5 	bl	801d210 <etharp_request>
 80140a6:	e000      	b.n	80140aa <netif_issue_reports+0x6e>
    return;
 80140a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	080229fc 	.word	0x080229fc
 80140b4:	08022cd8 	.word	0x08022cd8
 80140b8:	08022a4c 	.word	0x08022a4c

080140bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d107      	bne.n	80140da <netif_set_down+0x1e>
 80140ca:	4b12      	ldr	r3, [pc, #72]	@ (8014114 <netif_set_down+0x58>)
 80140cc:	f240 329b 	movw	r2, #923	@ 0x39b
 80140d0:	4911      	ldr	r1, [pc, #68]	@ (8014118 <netif_set_down+0x5c>)
 80140d2:	4812      	ldr	r0, [pc, #72]	@ (801411c <netif_set_down+0x60>)
 80140d4:	f00c fade 	bl	8020694 <iprintf>
 80140d8:	e019      	b.n	801410e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80140e0:	f003 0301 	and.w	r3, r3, #1
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d012      	beq.n	801410e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80140ee:	f023 0301 	bic.w	r3, r3, #1
 80140f2:	b2da      	uxtb	r2, r3
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014100:	f003 0308 	and.w	r3, r3, #8
 8014104:	2b00      	cmp	r3, #0
 8014106:	d002      	beq.n	801410e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f008 fbff 	bl	801c90c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801410e:	3708      	adds	r7, #8
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}
 8014114:	080229fc 	.word	0x080229fc
 8014118:	08022cfc 	.word	0x08022cfc
 801411c:	08022a4c 	.word	0x08022a4c

08014120 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d107      	bne.n	801413e <netif_set_link_up+0x1e>
 801412e:	4b13      	ldr	r3, [pc, #76]	@ (801417c <netif_set_link_up+0x5c>)
 8014130:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014134:	4912      	ldr	r1, [pc, #72]	@ (8014180 <netif_set_link_up+0x60>)
 8014136:	4813      	ldr	r0, [pc, #76]	@ (8014184 <netif_set_link_up+0x64>)
 8014138:	f00c faac 	bl	8020694 <iprintf>
 801413c:	e01b      	b.n	8014176 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014144:	f003 0304 	and.w	r3, r3, #4
 8014148:	2b00      	cmp	r3, #0
 801414a:	d114      	bne.n	8014176 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014152:	f043 0304 	orr.w	r3, r3, #4
 8014156:	b2da      	uxtb	r2, r3
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801415e:	2103      	movs	r1, #3
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f7ff ff6b 	bl	801403c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	69db      	ldr	r3, [r3, #28]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d003      	beq.n	8014176 <netif_set_link_up+0x56>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	69db      	ldr	r3, [r3, #28]
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	080229fc 	.word	0x080229fc
 8014180:	08022d1c 	.word	0x08022d1c
 8014184:	08022a4c 	.word	0x08022a4c

08014188 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d107      	bne.n	80141a6 <netif_set_link_down+0x1e>
 8014196:	4b11      	ldr	r3, [pc, #68]	@ (80141dc <netif_set_link_down+0x54>)
 8014198:	f240 4206 	movw	r2, #1030	@ 0x406
 801419c:	4910      	ldr	r1, [pc, #64]	@ (80141e0 <netif_set_link_down+0x58>)
 801419e:	4811      	ldr	r0, [pc, #68]	@ (80141e4 <netif_set_link_down+0x5c>)
 80141a0:	f00c fa78 	bl	8020694 <iprintf>
 80141a4:	e017      	b.n	80141d6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80141ac:	f003 0304 	and.w	r3, r3, #4
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d010      	beq.n	80141d6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80141ba:	f023 0304 	bic.w	r3, r3, #4
 80141be:	b2da      	uxtb	r2, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	69db      	ldr	r3, [r3, #28]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d003      	beq.n	80141d6 <netif_set_link_down+0x4e>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	69db      	ldr	r3, [r3, #28]
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	080229fc 	.word	0x080229fc
 80141e0:	08022d40 	.word	0x08022d40
 80141e4:	08022a4c 	.word	0x08022a4c

080141e8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80141e8:	b480      	push	{r7}
 80141ea:	b083      	sub	sp, #12
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d002      	beq.n	80141fe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	683a      	ldr	r2, [r7, #0]
 80141fc:	61da      	str	r2, [r3, #28]
  }
}
 80141fe:	bf00      	nop
 8014200:	370c      	adds	r7, #12
 8014202:	46bd      	mov	sp, r7
 8014204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014208:	4770      	bx	lr

0801420a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801420a:	b480      	push	{r7}
 801420c:	b085      	sub	sp, #20
 801420e:	af00      	add	r7, sp, #0
 8014210:	60f8      	str	r0, [r7, #12]
 8014212:	60b9      	str	r1, [r7, #8]
 8014214:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8014216:	f06f 030b 	mvn.w	r3, #11
}
 801421a:	4618      	mov	r0, r3
 801421c:	3714      	adds	r7, #20
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr
	...

08014228 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014228:	b480      	push	{r7}
 801422a:	b085      	sub	sp, #20
 801422c:	af00      	add	r7, sp, #0
 801422e:	4603      	mov	r3, r0
 8014230:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014232:	79fb      	ldrb	r3, [r7, #7]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d013      	beq.n	8014260 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8014238:	4b0d      	ldr	r3, [pc, #52]	@ (8014270 <netif_get_by_index+0x48>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	60fb      	str	r3, [r7, #12]
 801423e:	e00c      	b.n	801425a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014246:	3301      	adds	r3, #1
 8014248:	b2db      	uxtb	r3, r3
 801424a:	79fa      	ldrb	r2, [r7, #7]
 801424c:	429a      	cmp	r2, r3
 801424e:	d101      	bne.n	8014254 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	e006      	b.n	8014262 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	60fb      	str	r3, [r7, #12]
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d1ef      	bne.n	8014240 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014260:	2300      	movs	r3, #0
}
 8014262:	4618      	mov	r0, r3
 8014264:	3714      	adds	r7, #20
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop
 8014270:	2002d360 	.word	0x2002d360

08014274 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801427a:	f00a ff9d 	bl	801f1b8 <sys_arch_protect>
 801427e:	6038      	str	r0, [r7, #0]
 8014280:	4b0e      	ldr	r3, [pc, #56]	@ (80142bc <pbuf_free_ooseq+0x48>)
 8014282:	2200      	movs	r2, #0
 8014284:	701a      	strb	r2, [r3, #0]
 8014286:	6838      	ldr	r0, [r7, #0]
 8014288:	f00a ffa4 	bl	801f1d4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801428c:	4b0c      	ldr	r3, [pc, #48]	@ (80142c0 <pbuf_free_ooseq+0x4c>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	607b      	str	r3, [r7, #4]
 8014292:	e00d      	b.n	80142b0 <pbuf_free_ooseq+0x3c>
    if (pcb->ooseq != NULL) {
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014298:	2b00      	cmp	r3, #0
 801429a:	d006      	beq.n	80142aa <pbuf_free_ooseq+0x36>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 801429c:	4809      	ldr	r0, [pc, #36]	@ (80142c4 <pbuf_free_ooseq+0x50>)
 801429e:	f00c fa69 	bl	8020774 <puts>
      tcp_free_ooseq(pcb);
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f002 fc40 	bl	8016b28 <tcp_free_ooseq>
      return;
 80142a8:	e005      	b.n	80142b6 <pbuf_free_ooseq+0x42>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	68db      	ldr	r3, [r3, #12]
 80142ae:	607b      	str	r3, [r7, #4]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d1ee      	bne.n	8014294 <pbuf_free_ooseq+0x20>
    }
  }
}
 80142b6:	3708      	adds	r7, #8
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	2002d369 	.word	0x2002d369
 80142c0:	2002d478 	.word	0x2002d478
 80142c4:	08022d9c 	.word	0x08022d9c

080142c8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80142d0:	f7ff ffd0 	bl	8014274 <pbuf_free_ooseq>
}
 80142d4:	bf00      	nop
 80142d6:	3708      	adds	r7, #8
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd80      	pop	{r7, pc}

080142dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80142e2:	f00a ff69 	bl	801f1b8 <sys_arch_protect>
 80142e6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80142e8:	4b0f      	ldr	r3, [pc, #60]	@ (8014328 <pbuf_pool_is_empty+0x4c>)
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80142ee:	4b0e      	ldr	r3, [pc, #56]	@ (8014328 <pbuf_pool_is_empty+0x4c>)
 80142f0:	2201      	movs	r2, #1
 80142f2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f00a ff6d 	bl	801f1d4 <sys_arch_unprotect>

  if (!queued) {
 80142fa:	78fb      	ldrb	r3, [r7, #3]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d10f      	bne.n	8014320 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014300:	2100      	movs	r1, #0
 8014302:	480a      	ldr	r0, [pc, #40]	@ (801432c <pbuf_pool_is_empty+0x50>)
 8014304:	f7fe fc9c 	bl	8012c40 <tcpip_try_callback>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d008      	beq.n	8014320 <pbuf_pool_is_empty+0x44>
 801430e:	f00a ff53 	bl	801f1b8 <sys_arch_protect>
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	4b04      	ldr	r3, [pc, #16]	@ (8014328 <pbuf_pool_is_empty+0x4c>)
 8014316:	2200      	movs	r2, #0
 8014318:	701a      	strb	r2, [r3, #0]
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f00a ff5a 	bl	801f1d4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014320:	bf00      	nop
 8014322:	3708      	adds	r7, #8
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}
 8014328:	2002d369 	.word	0x2002d369
 801432c:	080142c9 	.word	0x080142c9

08014330 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014330:	b480      	push	{r7}
 8014332:	b085      	sub	sp, #20
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	4611      	mov	r1, r2
 801433c:	461a      	mov	r2, r3
 801433e:	460b      	mov	r3, r1
 8014340:	80fb      	strh	r3, [r7, #6]
 8014342:	4613      	mov	r3, r2
 8014344:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	2200      	movs	r2, #0
 801434a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	68ba      	ldr	r2, [r7, #8]
 8014350:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	88fa      	ldrh	r2, [r7, #6]
 8014356:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	88ba      	ldrh	r2, [r7, #4]
 801435c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801435e:	8b3b      	ldrh	r3, [r7, #24]
 8014360:	b2da      	uxtb	r2, r3
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	7f3a      	ldrb	r2, [r7, #28]
 801436a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	2201      	movs	r2, #1
 8014370:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2200      	movs	r2, #0
 8014376:	73da      	strb	r2, [r3, #15]
}
 8014378:	bf00      	nop
 801437a:	3714      	adds	r7, #20
 801437c:	46bd      	mov	sp, r7
 801437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014382:	4770      	bx	lr

08014384 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b08c      	sub	sp, #48	@ 0x30
 8014388:	af02      	add	r7, sp, #8
 801438a:	4603      	mov	r3, r0
 801438c:	71fb      	strb	r3, [r7, #7]
 801438e:	460b      	mov	r3, r1
 8014390:	80bb      	strh	r3, [r7, #4]
 8014392:	4613      	mov	r3, r2
 8014394:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014396:	79fb      	ldrb	r3, [r7, #7]
 8014398:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 801439a:	88bb      	ldrh	r3, [r7, #4]
 801439c:	4619      	mov	r1, r3
 801439e:	4874      	ldr	r0, [pc, #464]	@ (8014570 <pbuf_alloc+0x1ec>)
 80143a0:	f00c f978 	bl	8020694 <iprintf>

  switch (type) {
 80143a4:	887b      	ldrh	r3, [r7, #2]
 80143a6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80143aa:	d07f      	beq.n	80144ac <pbuf_alloc+0x128>
 80143ac:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80143b0:	f300 80c8 	bgt.w	8014544 <pbuf_alloc+0x1c0>
 80143b4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80143b8:	d010      	beq.n	80143dc <pbuf_alloc+0x58>
 80143ba:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80143be:	f300 80c1 	bgt.w	8014544 <pbuf_alloc+0x1c0>
 80143c2:	2b01      	cmp	r3, #1
 80143c4:	d002      	beq.n	80143cc <pbuf_alloc+0x48>
 80143c6:	2b41      	cmp	r3, #65	@ 0x41
 80143c8:	f040 80bc 	bne.w	8014544 <pbuf_alloc+0x1c0>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80143cc:	887a      	ldrh	r2, [r7, #2]
 80143ce:	88bb      	ldrh	r3, [r7, #4]
 80143d0:	4619      	mov	r1, r3
 80143d2:	2000      	movs	r0, #0
 80143d4:	f000 f8dc 	bl	8014590 <pbuf_alloc_reference>
 80143d8:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80143da:	e0bd      	b.n	8014558 <pbuf_alloc+0x1d4>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80143dc:	2300      	movs	r3, #0
 80143de:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80143e0:	2300      	movs	r3, #0
 80143e2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80143e4:	88bb      	ldrh	r3, [r7, #4]
 80143e6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80143e8:	200c      	movs	r0, #12
 80143ea:	f7ff fa95 	bl	8013918 <memp_malloc>
 80143ee:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80143f0:	693b      	ldr	r3, [r7, #16]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d109      	bne.n	801440a <pbuf_alloc+0x86>
          PBUF_POOL_IS_EMPTY();
 80143f6:	f7ff ff71 	bl	80142dc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80143fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d002      	beq.n	8014406 <pbuf_alloc+0x82>
            pbuf_free(p);
 8014400:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014402:	f000 faeb 	bl	80149dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014406:	2300      	movs	r3, #0
 8014408:	e0ad      	b.n	8014566 <pbuf_alloc+0x1e2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801440a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801440c:	3303      	adds	r3, #3
 801440e:	b29b      	uxth	r3, r3
 8014410:	f023 0303 	bic.w	r3, r3, #3
 8014414:	b29b      	uxth	r3, r3
 8014416:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801441a:	b29b      	uxth	r3, r3
 801441c:	8b7a      	ldrh	r2, [r7, #26]
 801441e:	4293      	cmp	r3, r2
 8014420:	bf28      	it	cs
 8014422:	4613      	movcs	r3, r2
 8014424:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014426:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014428:	3310      	adds	r3, #16
 801442a:	693a      	ldr	r2, [r7, #16]
 801442c:	4413      	add	r3, r2
 801442e:	3303      	adds	r3, #3
 8014430:	f023 0303 	bic.w	r3, r3, #3
 8014434:	4618      	mov	r0, r3
 8014436:	89f9      	ldrh	r1, [r7, #14]
 8014438:	8b7a      	ldrh	r2, [r7, #26]
 801443a:	2300      	movs	r3, #0
 801443c:	9301      	str	r3, [sp, #4]
 801443e:	887b      	ldrh	r3, [r7, #2]
 8014440:	9300      	str	r3, [sp, #0]
 8014442:	460b      	mov	r3, r1
 8014444:	4601      	mov	r1, r0
 8014446:	6938      	ldr	r0, [r7, #16]
 8014448:	f7ff ff72 	bl	8014330 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	f003 0303 	and.w	r3, r3, #3
 8014454:	2b00      	cmp	r3, #0
 8014456:	d006      	beq.n	8014466 <pbuf_alloc+0xe2>
 8014458:	4b46      	ldr	r3, [pc, #280]	@ (8014574 <pbuf_alloc+0x1f0>)
 801445a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801445e:	4946      	ldr	r1, [pc, #280]	@ (8014578 <pbuf_alloc+0x1f4>)
 8014460:	4846      	ldr	r0, [pc, #280]	@ (801457c <pbuf_alloc+0x1f8>)
 8014462:	f00c f917 	bl	8020694 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014466:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014468:	3303      	adds	r3, #3
 801446a:	f023 0303 	bic.w	r3, r3, #3
 801446e:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014472:	d106      	bne.n	8014482 <pbuf_alloc+0xfe>
 8014474:	4b3f      	ldr	r3, [pc, #252]	@ (8014574 <pbuf_alloc+0x1f0>)
 8014476:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801447a:	4941      	ldr	r1, [pc, #260]	@ (8014580 <pbuf_alloc+0x1fc>)
 801447c:	483f      	ldr	r0, [pc, #252]	@ (801457c <pbuf_alloc+0x1f8>)
 801447e:	f00c f909 	bl	8020694 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014484:	2b00      	cmp	r3, #0
 8014486:	d102      	bne.n	801448e <pbuf_alloc+0x10a>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	627b      	str	r3, [r7, #36]	@ 0x24
 801448c:	e002      	b.n	8014494 <pbuf_alloc+0x110>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801448e:	69fb      	ldr	r3, [r7, #28]
 8014490:	693a      	ldr	r2, [r7, #16]
 8014492:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014498:	8b7a      	ldrh	r2, [r7, #26]
 801449a:	89fb      	ldrh	r3, [r7, #14]
 801449c:	1ad3      	subs	r3, r2, r3
 801449e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80144a0:	2300      	movs	r3, #0
 80144a2:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80144a4:	8b7b      	ldrh	r3, [r7, #26]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d19e      	bne.n	80143e8 <pbuf_alloc+0x64>
      break;
 80144aa:	e055      	b.n	8014558 <pbuf_alloc+0x1d4>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80144ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80144ae:	3303      	adds	r3, #3
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	f023 0303 	bic.w	r3, r3, #3
 80144b6:	b29a      	uxth	r2, r3
 80144b8:	88bb      	ldrh	r3, [r7, #4]
 80144ba:	3303      	adds	r3, #3
 80144bc:	b29b      	uxth	r3, r3
 80144be:	f023 0303 	bic.w	r3, r3, #3
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	4413      	add	r3, r2
 80144c6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80144c8:	8b3b      	ldrh	r3, [r7, #24]
 80144ca:	3310      	adds	r3, #16
 80144cc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80144ce:	8b3a      	ldrh	r2, [r7, #24]
 80144d0:	88bb      	ldrh	r3, [r7, #4]
 80144d2:	3303      	adds	r3, #3
 80144d4:	f023 0303 	bic.w	r3, r3, #3
 80144d8:	429a      	cmp	r2, r3
 80144da:	d306      	bcc.n	80144ea <pbuf_alloc+0x166>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80144dc:	8afa      	ldrh	r2, [r7, #22]
 80144de:	88bb      	ldrh	r3, [r7, #4]
 80144e0:	3303      	adds	r3, #3
 80144e2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d201      	bcs.n	80144ee <pbuf_alloc+0x16a>
        return NULL;
 80144ea:	2300      	movs	r3, #0
 80144ec:	e03b      	b.n	8014566 <pbuf_alloc+0x1e2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80144ee:	8afb      	ldrh	r3, [r7, #22]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7fe ffed 	bl	80134d0 <mem_malloc>
 80144f6:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80144f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d101      	bne.n	8014502 <pbuf_alloc+0x17e>
        return NULL;
 80144fe:	2300      	movs	r3, #0
 8014500:	e031      	b.n	8014566 <pbuf_alloc+0x1e2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014504:	3310      	adds	r3, #16
 8014506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014508:	4413      	add	r3, r2
 801450a:	3303      	adds	r3, #3
 801450c:	f023 0303 	bic.w	r3, r3, #3
 8014510:	4618      	mov	r0, r3
 8014512:	88b9      	ldrh	r1, [r7, #4]
 8014514:	88ba      	ldrh	r2, [r7, #4]
 8014516:	2300      	movs	r3, #0
 8014518:	9301      	str	r3, [sp, #4]
 801451a:	887b      	ldrh	r3, [r7, #2]
 801451c:	9300      	str	r3, [sp, #0]
 801451e:	460b      	mov	r3, r1
 8014520:	4601      	mov	r1, r0
 8014522:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014524:	f7ff ff04 	bl	8014330 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	f003 0303 	and.w	r3, r3, #3
 8014530:	2b00      	cmp	r3, #0
 8014532:	d010      	beq.n	8014556 <pbuf_alloc+0x1d2>
 8014534:	4b0f      	ldr	r3, [pc, #60]	@ (8014574 <pbuf_alloc+0x1f0>)
 8014536:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801453a:	4912      	ldr	r1, [pc, #72]	@ (8014584 <pbuf_alloc+0x200>)
 801453c:	480f      	ldr	r0, [pc, #60]	@ (801457c <pbuf_alloc+0x1f8>)
 801453e:	f00c f8a9 	bl	8020694 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014542:	e008      	b.n	8014556 <pbuf_alloc+0x1d2>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014544:	4b0b      	ldr	r3, [pc, #44]	@ (8014574 <pbuf_alloc+0x1f0>)
 8014546:	f240 1227 	movw	r2, #295	@ 0x127
 801454a:	490f      	ldr	r1, [pc, #60]	@ (8014588 <pbuf_alloc+0x204>)
 801454c:	480b      	ldr	r0, [pc, #44]	@ (801457c <pbuf_alloc+0x1f8>)
 801454e:	f00c f8a1 	bl	8020694 <iprintf>
      return NULL;
 8014552:	2300      	movs	r3, #0
 8014554:	e007      	b.n	8014566 <pbuf_alloc+0x1e2>
      break;
 8014556:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 8014558:	88bb      	ldrh	r3, [r7, #4]
 801455a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801455c:	4619      	mov	r1, r3
 801455e:	480b      	ldr	r0, [pc, #44]	@ (801458c <pbuf_alloc+0x208>)
 8014560:	f00c f898 	bl	8020694 <iprintf>
  return p;
 8014564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014566:	4618      	mov	r0, r3
 8014568:	3728      	adds	r7, #40	@ 0x28
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	08022dcc 	.word	0x08022dcc
 8014574:	08022de4 	.word	0x08022de4
 8014578:	08022e14 	.word	0x08022e14
 801457c:	08022e44 	.word	0x08022e44
 8014580:	08022e6c 	.word	0x08022e6c
 8014584:	08022ea0 	.word	0x08022ea0
 8014588:	08022ecc 	.word	0x08022ecc
 801458c:	08022ee8 	.word	0x08022ee8

08014590 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b086      	sub	sp, #24
 8014594:	af02      	add	r7, sp, #8
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	460b      	mov	r3, r1
 801459a:	807b      	strh	r3, [r7, #2]
 801459c:	4613      	mov	r3, r2
 801459e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80145a0:	883b      	ldrh	r3, [r7, #0]
 80145a2:	2b41      	cmp	r3, #65	@ 0x41
 80145a4:	d009      	beq.n	80145ba <pbuf_alloc_reference+0x2a>
 80145a6:	883b      	ldrh	r3, [r7, #0]
 80145a8:	2b01      	cmp	r3, #1
 80145aa:	d006      	beq.n	80145ba <pbuf_alloc_reference+0x2a>
 80145ac:	4b14      	ldr	r3, [pc, #80]	@ (8014600 <pbuf_alloc_reference+0x70>)
 80145ae:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80145b2:	4914      	ldr	r1, [pc, #80]	@ (8014604 <pbuf_alloc_reference+0x74>)
 80145b4:	4814      	ldr	r0, [pc, #80]	@ (8014608 <pbuf_alloc_reference+0x78>)
 80145b6:	f00c f86d 	bl	8020694 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80145ba:	200b      	movs	r0, #11
 80145bc:	f7ff f9ac 	bl	8013918 <memp_malloc>
 80145c0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d10b      	bne.n	80145e0 <pbuf_alloc_reference+0x50>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80145c8:	883b      	ldrh	r3, [r7, #0]
 80145ca:	2b01      	cmp	r3, #1
 80145cc:	d101      	bne.n	80145d2 <pbuf_alloc_reference+0x42>
 80145ce:	4b0f      	ldr	r3, [pc, #60]	@ (801460c <pbuf_alloc_reference+0x7c>)
 80145d0:	e000      	b.n	80145d4 <pbuf_alloc_reference+0x44>
 80145d2:	4b0f      	ldr	r3, [pc, #60]	@ (8014610 <pbuf_alloc_reference+0x80>)
 80145d4:	4619      	mov	r1, r3
 80145d6:	480f      	ldr	r0, [pc, #60]	@ (8014614 <pbuf_alloc_reference+0x84>)
 80145d8:	f00c f85c 	bl	8020694 <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80145dc:	2300      	movs	r3, #0
 80145de:	e00b      	b.n	80145f8 <pbuf_alloc_reference+0x68>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80145e0:	8879      	ldrh	r1, [r7, #2]
 80145e2:	887a      	ldrh	r2, [r7, #2]
 80145e4:	2300      	movs	r3, #0
 80145e6:	9301      	str	r3, [sp, #4]
 80145e8:	883b      	ldrh	r3, [r7, #0]
 80145ea:	9300      	str	r3, [sp, #0]
 80145ec:	460b      	mov	r3, r1
 80145ee:	6879      	ldr	r1, [r7, #4]
 80145f0:	68f8      	ldr	r0, [r7, #12]
 80145f2:	f7ff fe9d 	bl	8014330 <pbuf_init_alloced_pbuf>
  return p;
 80145f6:	68fb      	ldr	r3, [r7, #12]
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3710      	adds	r7, #16
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}
 8014600:	08022de4 	.word	0x08022de4
 8014604:	08022f08 	.word	0x08022f08
 8014608:	08022e44 	.word	0x08022e44
 801460c:	08022f1c 	.word	0x08022f1c
 8014610:	08022f20 	.word	0x08022f20
 8014614:	08022f24 	.word	0x08022f24

08014618 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b088      	sub	sp, #32
 801461c:	af02      	add	r7, sp, #8
 801461e:	607b      	str	r3, [r7, #4]
 8014620:	4603      	mov	r3, r0
 8014622:	73fb      	strb	r3, [r7, #15]
 8014624:	460b      	mov	r3, r1
 8014626:	81bb      	strh	r3, [r7, #12]
 8014628:	4613      	mov	r3, r2
 801462a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801462c:	7bfb      	ldrb	r3, [r7, #15]
 801462e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 8014630:	89bb      	ldrh	r3, [r7, #12]
 8014632:	4619      	mov	r1, r3
 8014634:	4817      	ldr	r0, [pc, #92]	@ (8014694 <pbuf_alloced_custom+0x7c>)
 8014636:	f00c f82d 	bl	8020694 <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801463a:	8a7b      	ldrh	r3, [r7, #18]
 801463c:	3303      	adds	r3, #3
 801463e:	f023 0203 	bic.w	r2, r3, #3
 8014642:	89bb      	ldrh	r3, [r7, #12]
 8014644:	441a      	add	r2, r3
 8014646:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014648:	429a      	cmp	r2, r3
 801464a:	d906      	bls.n	801465a <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 801464c:	89bb      	ldrh	r3, [r7, #12]
 801464e:	4619      	mov	r1, r3
 8014650:	4811      	ldr	r0, [pc, #68]	@ (8014698 <pbuf_alloced_custom+0x80>)
 8014652:	f00c f81f 	bl	8020694 <iprintf>
    return NULL;
 8014656:	2300      	movs	r3, #0
 8014658:	e018      	b.n	801468c <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 801465a:	6a3b      	ldr	r3, [r7, #32]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d007      	beq.n	8014670 <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014660:	8a7b      	ldrh	r3, [r7, #18]
 8014662:	3303      	adds	r3, #3
 8014664:	f023 0303 	bic.w	r3, r3, #3
 8014668:	6a3a      	ldr	r2, [r7, #32]
 801466a:	4413      	add	r3, r2
 801466c:	617b      	str	r3, [r7, #20]
 801466e:	e001      	b.n	8014674 <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 8014670:	2300      	movs	r3, #0
 8014672:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	89b9      	ldrh	r1, [r7, #12]
 8014678:	89ba      	ldrh	r2, [r7, #12]
 801467a:	2302      	movs	r3, #2
 801467c:	9301      	str	r3, [sp, #4]
 801467e:	897b      	ldrh	r3, [r7, #10]
 8014680:	9300      	str	r3, [sp, #0]
 8014682:	460b      	mov	r3, r1
 8014684:	6979      	ldr	r1, [r7, #20]
 8014686:	f7ff fe53 	bl	8014330 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801468a:	687b      	ldr	r3, [r7, #4]
}
 801468c:	4618      	mov	r0, r3
 801468e:	3718      	adds	r7, #24
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}
 8014694:	08022f68 	.word	0x08022f68
 8014698:	08022f8c 	.word	0x08022f8c

0801469c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	460b      	mov	r3, r1
 80146a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d106      	bne.n	80146bc <pbuf_realloc+0x20>
 80146ae:	4b3a      	ldr	r3, [pc, #232]	@ (8014798 <pbuf_realloc+0xfc>)
 80146b0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80146b4:	4939      	ldr	r1, [pc, #228]	@ (801479c <pbuf_realloc+0x100>)
 80146b6:	483a      	ldr	r0, [pc, #232]	@ (80147a0 <pbuf_realloc+0x104>)
 80146b8:	f00b ffec 	bl	8020694 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	891b      	ldrh	r3, [r3, #8]
 80146c0:	887a      	ldrh	r2, [r7, #2]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d263      	bcs.n	801478e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	891a      	ldrh	r2, [r3, #8]
 80146ca:	887b      	ldrh	r3, [r7, #2]
 80146cc:	1ad3      	subs	r3, r2, r3
 80146ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80146d0:	887b      	ldrh	r3, [r7, #2]
 80146d2:	817b      	strh	r3, [r7, #10]
  q = p;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80146d8:	e018      	b.n	801470c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	895b      	ldrh	r3, [r3, #10]
 80146de:	897a      	ldrh	r2, [r7, #10]
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	891a      	ldrh	r2, [r3, #8]
 80146e8:	893b      	ldrh	r3, [r7, #8]
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d106      	bne.n	801470c <pbuf_realloc+0x70>
 80146fe:	4b26      	ldr	r3, [pc, #152]	@ (8014798 <pbuf_realloc+0xfc>)
 8014700:	f240 12af 	movw	r2, #431	@ 0x1af
 8014704:	4927      	ldr	r1, [pc, #156]	@ (80147a4 <pbuf_realloc+0x108>)
 8014706:	4826      	ldr	r0, [pc, #152]	@ (80147a0 <pbuf_realloc+0x104>)
 8014708:	f00b ffc4 	bl	8020694 <iprintf>
  while (rem_len > q->len) {
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	895b      	ldrh	r3, [r3, #10]
 8014710:	897a      	ldrh	r2, [r7, #10]
 8014712:	429a      	cmp	r2, r3
 8014714:	d8e1      	bhi.n	80146da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	7b1b      	ldrb	r3, [r3, #12]
 801471a:	f003 030f 	and.w	r3, r3, #15
 801471e:	2b00      	cmp	r3, #0
 8014720:	d121      	bne.n	8014766 <pbuf_realloc+0xca>
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	895b      	ldrh	r3, [r3, #10]
 8014726:	897a      	ldrh	r2, [r7, #10]
 8014728:	429a      	cmp	r2, r3
 801472a:	d01c      	beq.n	8014766 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	7b5b      	ldrb	r3, [r3, #13]
 8014730:	f003 0302 	and.w	r3, r3, #2
 8014734:	2b00      	cmp	r3, #0
 8014736:	d116      	bne.n	8014766 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	685a      	ldr	r2, [r3, #4]
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	1ad3      	subs	r3, r2, r3
 8014740:	b29a      	uxth	r2, r3
 8014742:	897b      	ldrh	r3, [r7, #10]
 8014744:	4413      	add	r3, r2
 8014746:	b29b      	uxth	r3, r3
 8014748:	4619      	mov	r1, r3
 801474a:	68f8      	ldr	r0, [r7, #12]
 801474c:	f7fe fd8e 	bl	801326c <mem_trim>
 8014750:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d106      	bne.n	8014766 <pbuf_realloc+0xca>
 8014758:	4b0f      	ldr	r3, [pc, #60]	@ (8014798 <pbuf_realloc+0xfc>)
 801475a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801475e:	4912      	ldr	r1, [pc, #72]	@ (80147a8 <pbuf_realloc+0x10c>)
 8014760:	480f      	ldr	r0, [pc, #60]	@ (80147a0 <pbuf_realloc+0x104>)
 8014762:	f00b ff97 	bl	8020694 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	897a      	ldrh	r2, [r7, #10]
 801476a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	895a      	ldrh	r2, [r3, #10]
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d004      	beq.n	8014786 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4618      	mov	r0, r3
 8014782:	f000 f92b 	bl	80149dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2200      	movs	r2, #0
 801478a:	601a      	str	r2, [r3, #0]
 801478c:	e000      	b.n	8014790 <pbuf_realloc+0xf4>
    return;
 801478e:	bf00      	nop

}
 8014790:	3710      	adds	r7, #16
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
 8014796:	bf00      	nop
 8014798:	08022de4 	.word	0x08022de4
 801479c:	08022fc0 	.word	0x08022fc0
 80147a0:	08022e44 	.word	0x08022e44
 80147a4:	08022fd8 	.word	0x08022fd8
 80147a8:	08022ff0 	.word	0x08022ff0

080147ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b086      	sub	sp, #24
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	4613      	mov	r3, r2
 80147b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d106      	bne.n	80147ce <pbuf_add_header_impl+0x22>
 80147c0:	4b32      	ldr	r3, [pc, #200]	@ (801488c <pbuf_add_header_impl+0xe0>)
 80147c2:	f240 12df 	movw	r2, #479	@ 0x1df
 80147c6:	4932      	ldr	r1, [pc, #200]	@ (8014890 <pbuf_add_header_impl+0xe4>)
 80147c8:	4832      	ldr	r0, [pc, #200]	@ (8014894 <pbuf_add_header_impl+0xe8>)
 80147ca:	f00b ff63 	bl	8020694 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d003      	beq.n	80147dc <pbuf_add_header_impl+0x30>
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80147da:	d301      	bcc.n	80147e0 <pbuf_add_header_impl+0x34>
    return 1;
 80147dc:	2301      	movs	r3, #1
 80147de:	e051      	b.n	8014884 <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d101      	bne.n	80147ea <pbuf_add_header_impl+0x3e>
    return 0;
 80147e6:	2300      	movs	r3, #0
 80147e8:	e04c      	b.n	8014884 <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	891a      	ldrh	r2, [r3, #8]
 80147f2:	8a7b      	ldrh	r3, [r7, #18]
 80147f4:	4413      	add	r3, r2
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	8a7a      	ldrh	r2, [r7, #18]
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d901      	bls.n	8014802 <pbuf_add_header_impl+0x56>
    return 1;
 80147fe:	2301      	movs	r3, #1
 8014800:	e040      	b.n	8014884 <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	7b1b      	ldrb	r3, [r3, #12]
 8014806:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014808:	8a3b      	ldrh	r3, [r7, #16]
 801480a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801480e:	2b00      	cmp	r3, #0
 8014810:	d013      	beq.n	801483a <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	685a      	ldr	r2, [r3, #4]
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	425b      	negs	r3, r3
 801481a:	4413      	add	r3, r2
 801481c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	3310      	adds	r3, #16
 8014822:	697a      	ldr	r2, [r7, #20]
 8014824:	429a      	cmp	r2, r3
 8014826:	d214      	bcs.n	8014852 <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	3310      	adds	r3, #16
 801482c:	461a      	mov	r2, r3
 801482e:	6979      	ldr	r1, [r7, #20]
 8014830:	4819      	ldr	r0, [pc, #100]	@ (8014898 <pbuf_add_header_impl+0xec>)
 8014832:	f00b ff2f 	bl	8020694 <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014836:	2301      	movs	r3, #1
 8014838:	e024      	b.n	8014884 <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801483a:	79fb      	ldrb	r3, [r7, #7]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d006      	beq.n	801484e <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	685a      	ldr	r2, [r3, #4]
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	425b      	negs	r3, r3
 8014848:	4413      	add	r3, r2
 801484a:	617b      	str	r3, [r7, #20]
 801484c:	e001      	b.n	8014852 <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801484e:	2301      	movs	r3, #1
 8014850:	e018      	b.n	8014884 <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	6859      	ldr	r1, [r3, #4]
 8014856:	8a7b      	ldrh	r3, [r7, #18]
 8014858:	697a      	ldr	r2, [r7, #20]
 801485a:	4810      	ldr	r0, [pc, #64]	@ (801489c <pbuf_add_header_impl+0xf0>)
 801485c:	f00b ff1a 	bl	8020694 <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	697a      	ldr	r2, [r7, #20]
 8014864:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	895a      	ldrh	r2, [r3, #10]
 801486a:	8a7b      	ldrh	r3, [r7, #18]
 801486c:	4413      	add	r3, r2
 801486e:	b29a      	uxth	r2, r3
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	891a      	ldrh	r2, [r3, #8]
 8014878:	8a7b      	ldrh	r3, [r7, #18]
 801487a:	4413      	add	r3, r2
 801487c:	b29a      	uxth	r2, r3
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	811a      	strh	r2, [r3, #8]


  return 0;
 8014882:	2300      	movs	r3, #0
}
 8014884:	4618      	mov	r0, r3
 8014886:	3718      	adds	r7, #24
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}
 801488c:	08022de4 	.word	0x08022de4
 8014890:	0802300c 	.word	0x0802300c
 8014894:	08022e44 	.word	0x08022e44
 8014898:	08023018 	.word	0x08023018
 801489c:	08023064 	.word	0x08023064

080148a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b082      	sub	sp, #8
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80148aa:	2200      	movs	r2, #0
 80148ac:	6839      	ldr	r1, [r7, #0]
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f7ff ff7c 	bl	80147ac <pbuf_add_header_impl>
 80148b4:	4603      	mov	r3, r0
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3708      	adds	r7, #8
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
	...

080148c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b084      	sub	sp, #16
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d106      	bne.n	80148de <pbuf_remove_header+0x1e>
 80148d0:	4b23      	ldr	r3, [pc, #140]	@ (8014960 <pbuf_remove_header+0xa0>)
 80148d2:	f240 224b 	movw	r2, #587	@ 0x24b
 80148d6:	4923      	ldr	r1, [pc, #140]	@ (8014964 <pbuf_remove_header+0xa4>)
 80148d8:	4823      	ldr	r0, [pc, #140]	@ (8014968 <pbuf_remove_header+0xa8>)
 80148da:	f00b fedb 	bl	8020694 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d003      	beq.n	80148ec <pbuf_remove_header+0x2c>
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80148ea:	d301      	bcc.n	80148f0 <pbuf_remove_header+0x30>
    return 1;
 80148ec:	2301      	movs	r3, #1
 80148ee:	e033      	b.n	8014958 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d101      	bne.n	80148fa <pbuf_remove_header+0x3a>
    return 0;
 80148f6:	2300      	movs	r3, #0
 80148f8:	e02e      	b.n	8014958 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	895b      	ldrh	r3, [r3, #10]
 8014902:	89fa      	ldrh	r2, [r7, #14]
 8014904:	429a      	cmp	r2, r3
 8014906:	d908      	bls.n	801491a <pbuf_remove_header+0x5a>
 8014908:	4b15      	ldr	r3, [pc, #84]	@ (8014960 <pbuf_remove_header+0xa0>)
 801490a:	f240 2255 	movw	r2, #597	@ 0x255
 801490e:	4917      	ldr	r1, [pc, #92]	@ (801496c <pbuf_remove_header+0xac>)
 8014910:	4815      	ldr	r0, [pc, #84]	@ (8014968 <pbuf_remove_header+0xa8>)
 8014912:	f00b febf 	bl	8020694 <iprintf>
 8014916:	2301      	movs	r3, #1
 8014918:	e01e      	b.n	8014958 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	685a      	ldr	r2, [r3, #4]
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	441a      	add	r2, r3
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	895a      	ldrh	r2, [r3, #10]
 8014930:	89fb      	ldrh	r3, [r7, #14]
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	b29a      	uxth	r2, r3
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	891a      	ldrh	r2, [r3, #8]
 801493e:	89fb      	ldrh	r3, [r7, #14]
 8014940:	1ad3      	subs	r3, r2, r3
 8014942:	b29a      	uxth	r2, r3
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	685a      	ldr	r2, [r3, #4]
 801494c:	89fb      	ldrh	r3, [r7, #14]
 801494e:	68b9      	ldr	r1, [r7, #8]
 8014950:	4807      	ldr	r0, [pc, #28]	@ (8014970 <pbuf_remove_header+0xb0>)
 8014952:	f00b fe9f 	bl	8020694 <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014956:	2300      	movs	r3, #0
}
 8014958:	4618      	mov	r0, r3
 801495a:	3710      	adds	r7, #16
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	08022de4 	.word	0x08022de4
 8014964:	0802300c 	.word	0x0802300c
 8014968:	08022e44 	.word	0x08022e44
 801496c:	0802308c 	.word	0x0802308c
 8014970:	080230ac 	.word	0x080230ac

08014974 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	460b      	mov	r3, r1
 801497e:	807b      	strh	r3, [r7, #2]
 8014980:	4613      	mov	r3, r2
 8014982:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014988:	2b00      	cmp	r3, #0
 801498a:	da08      	bge.n	801499e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801498c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014990:	425b      	negs	r3, r3
 8014992:	4619      	mov	r1, r3
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7ff ff93 	bl	80148c0 <pbuf_remove_header>
 801499a:	4603      	mov	r3, r0
 801499c:	e007      	b.n	80149ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801499e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80149a2:	787a      	ldrb	r2, [r7, #1]
 80149a4:	4619      	mov	r1, r3
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f7ff ff00 	bl	80147ac <pbuf_add_header_impl>
 80149ac:	4603      	mov	r3, r0
  }
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3708      	adds	r7, #8
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}

080149b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80149b6:	b580      	push	{r7, lr}
 80149b8:	b082      	sub	sp, #8
 80149ba:	af00      	add	r7, sp, #0
 80149bc:	6078      	str	r0, [r7, #4]
 80149be:	460b      	mov	r3, r1
 80149c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80149c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80149c6:	2201      	movs	r2, #1
 80149c8:	4619      	mov	r1, r3
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7ff ffd2 	bl	8014974 <pbuf_header_impl>
 80149d0:	4603      	mov	r3, r0
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3708      	adds	r7, #8
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
	...

080149dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b088      	sub	sp, #32
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d10e      	bne.n	8014a08 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d106      	bne.n	80149fe <pbuf_free+0x22>
 80149f0:	4b43      	ldr	r3, [pc, #268]	@ (8014b00 <pbuf_free+0x124>)
 80149f2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80149f6:	4943      	ldr	r1, [pc, #268]	@ (8014b04 <pbuf_free+0x128>)
 80149f8:	4843      	ldr	r0, [pc, #268]	@ (8014b08 <pbuf_free+0x12c>)
 80149fa:	f00b fe4b 	bl	8020694 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80149fe:	4843      	ldr	r0, [pc, #268]	@ (8014b0c <pbuf_free+0x130>)
 8014a00:	f00b feb8 	bl	8020774 <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014a04:	2300      	movs	r3, #0
 8014a06:	e077      	b.n	8014af8 <pbuf_free+0x11c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 8014a08:	6879      	ldr	r1, [r7, #4]
 8014a0a:	4841      	ldr	r0, [pc, #260]	@ (8014b10 <pbuf_free+0x134>)
 8014a0c:	f00b fe42 	bl	8020694 <iprintf>

  PERF_START;

  count = 0;
 8014a10:	2300      	movs	r3, #0
 8014a12:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014a14:	e06c      	b.n	8014af0 <pbuf_free+0x114>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014a16:	f00a fbcf 	bl	801f1b8 <sys_arch_protect>
 8014a1a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	7b9b      	ldrb	r3, [r3, #14]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d106      	bne.n	8014a32 <pbuf_free+0x56>
 8014a24:	4b36      	ldr	r3, [pc, #216]	@ (8014b00 <pbuf_free+0x124>)
 8014a26:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014a2a:	493a      	ldr	r1, [pc, #232]	@ (8014b14 <pbuf_free+0x138>)
 8014a2c:	4836      	ldr	r0, [pc, #216]	@ (8014b08 <pbuf_free+0x12c>)
 8014a2e:	f00b fe31 	bl	8020694 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	7b9b      	ldrb	r3, [r3, #14]
 8014a36:	3b01      	subs	r3, #1
 8014a38:	b2da      	uxtb	r2, r3
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	739a      	strb	r2, [r3, #14]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	7b9b      	ldrb	r3, [r3, #14]
 8014a42:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014a44:	69b8      	ldr	r0, [r7, #24]
 8014a46:	f00a fbc5 	bl	801f1d4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014a4a:	7dfb      	ldrb	r3, [r7, #23]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d147      	bne.n	8014ae0 <pbuf_free+0x104>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 8014a56:	6879      	ldr	r1, [r7, #4]
 8014a58:	482f      	ldr	r0, [pc, #188]	@ (8014b18 <pbuf_free+0x13c>)
 8014a5a:	f00b fe1b 	bl	8020694 <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	7b1b      	ldrb	r3, [r3, #12]
 8014a62:	f003 030f 	and.w	r3, r3, #15
 8014a66:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	7b5b      	ldrb	r3, [r3, #13]
 8014a6c:	f003 0302 	and.w	r3, r3, #2
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d011      	beq.n	8014a98 <pbuf_free+0xbc>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	691b      	ldr	r3, [r3, #16]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d106      	bne.n	8014a8e <pbuf_free+0xb2>
 8014a80:	4b1f      	ldr	r3, [pc, #124]	@ (8014b00 <pbuf_free+0x124>)
 8014a82:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014a86:	4925      	ldr	r1, [pc, #148]	@ (8014b1c <pbuf_free+0x140>)
 8014a88:	481f      	ldr	r0, [pc, #124]	@ (8014b08 <pbuf_free+0x12c>)
 8014a8a:	f00b fe03 	bl	8020694 <iprintf>
        pc->custom_free_function(p);
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	691b      	ldr	r3, [r3, #16]
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	4798      	blx	r3
 8014a96:	e01d      	b.n	8014ad4 <pbuf_free+0xf8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014a98:	7bfb      	ldrb	r3, [r7, #15]
 8014a9a:	2b02      	cmp	r3, #2
 8014a9c:	d104      	bne.n	8014aa8 <pbuf_free+0xcc>
          memp_free(MEMP_PBUF_POOL, p);
 8014a9e:	6879      	ldr	r1, [r7, #4]
 8014aa0:	200c      	movs	r0, #12
 8014aa2:	f7fe ffb5 	bl	8013a10 <memp_free>
 8014aa6:	e015      	b.n	8014ad4 <pbuf_free+0xf8>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014aa8:	7bfb      	ldrb	r3, [r7, #15]
 8014aaa:	2b01      	cmp	r3, #1
 8014aac:	d104      	bne.n	8014ab8 <pbuf_free+0xdc>
          memp_free(MEMP_PBUF, p);
 8014aae:	6879      	ldr	r1, [r7, #4]
 8014ab0:	200b      	movs	r0, #11
 8014ab2:	f7fe ffad 	bl	8013a10 <memp_free>
 8014ab6:	e00d      	b.n	8014ad4 <pbuf_free+0xf8>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014ab8:	7bfb      	ldrb	r3, [r7, #15]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d103      	bne.n	8014ac6 <pbuf_free+0xea>
          mem_free(p);
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f7fe fafc 	bl	80130bc <mem_free>
 8014ac4:	e006      	b.n	8014ad4 <pbuf_free+0xf8>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8014b00 <pbuf_free+0x124>)
 8014ac8:	f240 320f 	movw	r2, #783	@ 0x30f
 8014acc:	4914      	ldr	r1, [pc, #80]	@ (8014b20 <pbuf_free+0x144>)
 8014ace:	480e      	ldr	r0, [pc, #56]	@ (8014b08 <pbuf_free+0x12c>)
 8014ad0:	f00b fde0 	bl	8020694 <iprintf>
        }
      }
      count++;
 8014ad4:	7ffb      	ldrb	r3, [r7, #31]
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014ada:	693b      	ldr	r3, [r7, #16]
 8014adc:	607b      	str	r3, [r7, #4]
 8014ade:	e007      	b.n	8014af0 <pbuf_free+0x114>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 8014ae0:	7dfb      	ldrb	r3, [r7, #23]
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	6879      	ldr	r1, [r7, #4]
 8014ae6:	480f      	ldr	r0, [pc, #60]	@ (8014b24 <pbuf_free+0x148>)
 8014ae8:	f00b fdd4 	bl	8020694 <iprintf>
      /* stop walking through the chain */
      p = NULL;
 8014aec:	2300      	movs	r3, #0
 8014aee:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d18f      	bne.n	8014a16 <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3720      	adds	r7, #32
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	08022de4 	.word	0x08022de4
 8014b04:	0802300c 	.word	0x0802300c
 8014b08:	08022e44 	.word	0x08022e44
 8014b0c:	080230d8 	.word	0x080230d8
 8014b10:	080230fc 	.word	0x080230fc
 8014b14:	0802310c 	.word	0x0802310c
 8014b18:	08023124 	.word	0x08023124
 8014b1c:	08023140 	.word	0x08023140
 8014b20:	08023164 	.word	0x08023164
 8014b24:	08023178 	.word	0x08023178

08014b28 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b085      	sub	sp, #20
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014b30:	2300      	movs	r3, #0
 8014b32:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014b34:	e005      	b.n	8014b42 <pbuf_clen+0x1a>
    ++len;
 8014b36:	89fb      	ldrh	r3, [r7, #14]
 8014b38:	3301      	adds	r3, #1
 8014b3a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d1f6      	bne.n	8014b36 <pbuf_clen+0xe>
  }
  return len;
 8014b48:	89fb      	ldrh	r3, [r7, #14]
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3714      	adds	r7, #20
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b54:	4770      	bx	lr
	...

08014b58 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d016      	beq.n	8014b94 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014b66:	f00a fb27 	bl	801f1b8 <sys_arch_protect>
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	7b9b      	ldrb	r3, [r3, #14]
 8014b70:	3301      	adds	r3, #1
 8014b72:	b2da      	uxtb	r2, r3
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	739a      	strb	r2, [r3, #14]
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f00a fb2b 	bl	801f1d4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	7b9b      	ldrb	r3, [r3, #14]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d106      	bne.n	8014b94 <pbuf_ref+0x3c>
 8014b86:	4b05      	ldr	r3, [pc, #20]	@ (8014b9c <pbuf_ref+0x44>)
 8014b88:	f240 3242 	movw	r2, #834	@ 0x342
 8014b8c:	4904      	ldr	r1, [pc, #16]	@ (8014ba0 <pbuf_ref+0x48>)
 8014b8e:	4805      	ldr	r0, [pc, #20]	@ (8014ba4 <pbuf_ref+0x4c>)
 8014b90:	f00b fd80 	bl	8020694 <iprintf>
  }
}
 8014b94:	bf00      	nop
 8014b96:	3710      	adds	r7, #16
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	08022de4 	.word	0x08022de4
 8014ba0:	080231a4 	.word	0x080231a4
 8014ba4:	08022e44 	.word	0x08022e44

08014ba8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d002      	beq.n	8014bbe <pbuf_cat+0x16>
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d107      	bne.n	8014bce <pbuf_cat+0x26>
 8014bbe:	4b20      	ldr	r3, [pc, #128]	@ (8014c40 <pbuf_cat+0x98>)
 8014bc0:	f240 3259 	movw	r2, #857	@ 0x359
 8014bc4:	491f      	ldr	r1, [pc, #124]	@ (8014c44 <pbuf_cat+0x9c>)
 8014bc6:	4820      	ldr	r0, [pc, #128]	@ (8014c48 <pbuf_cat+0xa0>)
 8014bc8:	f00b fd64 	bl	8020694 <iprintf>
 8014bcc:	e034      	b.n	8014c38 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	60fb      	str	r3, [r7, #12]
 8014bd2:	e00a      	b.n	8014bea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	891a      	ldrh	r2, [r3, #8]
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	891b      	ldrh	r3, [r3, #8]
 8014bdc:	4413      	add	r3, r2
 8014bde:	b29a      	uxth	r2, r3
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	60fb      	str	r3, [r7, #12]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1f0      	bne.n	8014bd4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	891a      	ldrh	r2, [r3, #8]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	895b      	ldrh	r3, [r3, #10]
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d006      	beq.n	8014c0c <pbuf_cat+0x64>
 8014bfe:	4b10      	ldr	r3, [pc, #64]	@ (8014c40 <pbuf_cat+0x98>)
 8014c00:	f240 3262 	movw	r2, #866	@ 0x362
 8014c04:	4911      	ldr	r1, [pc, #68]	@ (8014c4c <pbuf_cat+0xa4>)
 8014c06:	4810      	ldr	r0, [pc, #64]	@ (8014c48 <pbuf_cat+0xa0>)
 8014c08:	f00b fd44 	bl	8020694 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d006      	beq.n	8014c22 <pbuf_cat+0x7a>
 8014c14:	4b0a      	ldr	r3, [pc, #40]	@ (8014c40 <pbuf_cat+0x98>)
 8014c16:	f240 3263 	movw	r2, #867	@ 0x363
 8014c1a:	490d      	ldr	r1, [pc, #52]	@ (8014c50 <pbuf_cat+0xa8>)
 8014c1c:	480a      	ldr	r0, [pc, #40]	@ (8014c48 <pbuf_cat+0xa0>)
 8014c1e:	f00b fd39 	bl	8020694 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	891a      	ldrh	r2, [r3, #8]
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	891b      	ldrh	r3, [r3, #8]
 8014c2a:	4413      	add	r3, r2
 8014c2c:	b29a      	uxth	r2, r3
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	683a      	ldr	r2, [r7, #0]
 8014c36:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014c38:	3710      	adds	r7, #16
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	08022de4 	.word	0x08022de4
 8014c44:	080231b8 	.word	0x080231b8
 8014c48:	08022e44 	.word	0x08022e44
 8014c4c:	080231f0 	.word	0x080231f0
 8014c50:	08023220 	.word	0x08023220

08014c54 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014c5e:	6839      	ldr	r1, [r7, #0]
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f7ff ffa1 	bl	8014ba8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014c66:	6838      	ldr	r0, [r7, #0]
 8014c68:	f7ff ff76 	bl	8014b58 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 8014c6c:	683a      	ldr	r2, [r7, #0]
 8014c6e:	6879      	ldr	r1, [r7, #4]
 8014c70:	4803      	ldr	r0, [pc, #12]	@ (8014c80 <pbuf_chain+0x2c>)
 8014c72:	f00b fd0f 	bl	8020694 <iprintf>
}
 8014c76:	bf00      	nop
 8014c78:	3708      	adds	r7, #8
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}
 8014c7e:	bf00      	nop
 8014c80:	08023230 	.word	0x08023230

08014c84 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b086      	sub	sp, #24
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	617b      	str	r3, [r7, #20]
 8014c92:	2300      	movs	r3, #0
 8014c94:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 8014c96:	683a      	ldr	r2, [r7, #0]
 8014c98:	6879      	ldr	r1, [r7, #4]
 8014c9a:	4860      	ldr	r0, [pc, #384]	@ (8014e1c <pbuf_copy+0x198>)
 8014c9c:	f00b fcfa 	bl	8020694 <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d008      	beq.n	8014cb8 <pbuf_copy+0x34>
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d005      	beq.n	8014cb8 <pbuf_copy+0x34>
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	891a      	ldrh	r2, [r3, #8]
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	891b      	ldrh	r3, [r3, #8]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d209      	bcs.n	8014ccc <pbuf_copy+0x48>
 8014cb8:	4b59      	ldr	r3, [pc, #356]	@ (8014e20 <pbuf_copy+0x19c>)
 8014cba:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014cbe:	4959      	ldr	r1, [pc, #356]	@ (8014e24 <pbuf_copy+0x1a0>)
 8014cc0:	4859      	ldr	r0, [pc, #356]	@ (8014e28 <pbuf_copy+0x1a4>)
 8014cc2:	f00b fce7 	bl	8020694 <iprintf>
 8014cc6:	f06f 030f 	mvn.w	r3, #15
 8014cca:	e0a2      	b.n	8014e12 <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	895b      	ldrh	r3, [r3, #10]
 8014cd0:	461a      	mov	r2, r3
 8014cd2:	697b      	ldr	r3, [r7, #20]
 8014cd4:	1ad2      	subs	r2, r2, r3
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	895b      	ldrh	r3, [r3, #10]
 8014cda:	4619      	mov	r1, r3
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	1acb      	subs	r3, r1, r3
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d306      	bcc.n	8014cf2 <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014ce4:	683b      	ldr	r3, [r7, #0]
 8014ce6:	895b      	ldrh	r3, [r3, #10]
 8014ce8:	461a      	mov	r2, r3
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	1ad3      	subs	r3, r2, r3
 8014cee:	60fb      	str	r3, [r7, #12]
 8014cf0:	e005      	b.n	8014cfe <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	895b      	ldrh	r3, [r3, #10]
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	1ad3      	subs	r3, r2, r3
 8014cfc:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	685a      	ldr	r2, [r3, #4]
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	18d0      	adds	r0, r2, r3
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	685a      	ldr	r2, [r3, #4]
 8014d0a:	693b      	ldr	r3, [r7, #16]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	68fa      	ldr	r2, [r7, #12]
 8014d10:	4619      	mov	r1, r3
 8014d12:	f00b fef2 	bl	8020afa <memcpy>
    offset_to += len;
 8014d16:	697a      	ldr	r2, [r7, #20]
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	4413      	add	r3, r2
 8014d1c:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014d1e:	693a      	ldr	r2, [r7, #16]
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	4413      	add	r3, r2
 8014d24:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	895b      	ldrh	r3, [r3, #10]
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	4293      	cmp	r3, r2
 8014d30:	d906      	bls.n	8014d40 <pbuf_copy+0xbc>
 8014d32:	4b3b      	ldr	r3, [pc, #236]	@ (8014e20 <pbuf_copy+0x19c>)
 8014d34:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8014d38:	493c      	ldr	r1, [pc, #240]	@ (8014e2c <pbuf_copy+0x1a8>)
 8014d3a:	483b      	ldr	r0, [pc, #236]	@ (8014e28 <pbuf_copy+0x1a4>)
 8014d3c:	f00b fcaa 	bl	8020694 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	895b      	ldrh	r3, [r3, #10]
 8014d44:	461a      	mov	r2, r3
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d906      	bls.n	8014d5a <pbuf_copy+0xd6>
 8014d4c:	4b34      	ldr	r3, [pc, #208]	@ (8014e20 <pbuf_copy+0x19c>)
 8014d4e:	f240 32da 	movw	r2, #986	@ 0x3da
 8014d52:	4937      	ldr	r1, [pc, #220]	@ (8014e30 <pbuf_copy+0x1ac>)
 8014d54:	4834      	ldr	r0, [pc, #208]	@ (8014e28 <pbuf_copy+0x1a4>)
 8014d56:	f00b fc9d 	bl	8020694 <iprintf>
    if (offset_from >= p_from->len) {
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	895b      	ldrh	r3, [r3, #10]
 8014d5e:	461a      	mov	r2, r3
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d304      	bcc.n	8014d70 <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014d66:	2300      	movs	r3, #0
 8014d68:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	895b      	ldrh	r3, [r3, #10]
 8014d74:	461a      	mov	r2, r3
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	d114      	bne.n	8014da6 <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d10c      	bne.n	8014da6 <pbuf_copy+0x122>
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d009      	beq.n	8014da6 <pbuf_copy+0x122>
 8014d92:	4b23      	ldr	r3, [pc, #140]	@ (8014e20 <pbuf_copy+0x19c>)
 8014d94:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8014d98:	4926      	ldr	r1, [pc, #152]	@ (8014e34 <pbuf_copy+0x1b0>)
 8014d9a:	4823      	ldr	r0, [pc, #140]	@ (8014e28 <pbuf_copy+0x1a4>)
 8014d9c:	f00b fc7a 	bl	8020694 <iprintf>
 8014da0:	f06f 030f 	mvn.w	r3, #15
 8014da4:	e035      	b.n	8014e12 <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d013      	beq.n	8014dd4 <pbuf_copy+0x150>
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	895a      	ldrh	r2, [r3, #10]
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	891b      	ldrh	r3, [r3, #8]
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d10d      	bne.n	8014dd4 <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d009      	beq.n	8014dd4 <pbuf_copy+0x150>
 8014dc0:	4b17      	ldr	r3, [pc, #92]	@ (8014e20 <pbuf_copy+0x19c>)
 8014dc2:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8014dc6:	491c      	ldr	r1, [pc, #112]	@ (8014e38 <pbuf_copy+0x1b4>)
 8014dc8:	4817      	ldr	r0, [pc, #92]	@ (8014e28 <pbuf_copy+0x1a4>)
 8014dca:	f00b fc63 	bl	8020694 <iprintf>
 8014dce:	f06f 0305 	mvn.w	r3, #5
 8014dd2:	e01e      	b.n	8014e12 <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d013      	beq.n	8014e02 <pbuf_copy+0x17e>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	895a      	ldrh	r2, [r3, #10]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	891b      	ldrh	r3, [r3, #8]
 8014de2:	429a      	cmp	r2, r3
 8014de4:	d10d      	bne.n	8014e02 <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d009      	beq.n	8014e02 <pbuf_copy+0x17e>
 8014dee:	4b0c      	ldr	r3, [pc, #48]	@ (8014e20 <pbuf_copy+0x19c>)
 8014df0:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8014df4:	4910      	ldr	r1, [pc, #64]	@ (8014e38 <pbuf_copy+0x1b4>)
 8014df6:	480c      	ldr	r0, [pc, #48]	@ (8014e28 <pbuf_copy+0x1a4>)
 8014df8:	f00b fc4c 	bl	8020694 <iprintf>
 8014dfc:	f06f 0305 	mvn.w	r3, #5
 8014e00:	e007      	b.n	8014e12 <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	f47f af61 	bne.w	8014ccc <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 8014e0a:	480c      	ldr	r0, [pc, #48]	@ (8014e3c <pbuf_copy+0x1b8>)
 8014e0c:	f00b fcb2 	bl	8020774 <puts>
  return ERR_OK;
 8014e10:	2300      	movs	r3, #0
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3718      	adds	r7, #24
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	080232ec 	.word	0x080232ec
 8014e20:	08022de4 	.word	0x08022de4
 8014e24:	08023300 	.word	0x08023300
 8014e28:	08022e44 	.word	0x08022e44
 8014e2c:	08023330 	.word	0x08023330
 8014e30:	08023348 	.word	0x08023348
 8014e34:	08023364 	.word	0x08023364
 8014e38:	08023374 	.word	0x08023374
 8014e3c:	080233a0 	.word	0x080233a0

08014e40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b088      	sub	sp, #32
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	60f8      	str	r0, [r7, #12]
 8014e48:	60b9      	str	r1, [r7, #8]
 8014e4a:	4611      	mov	r1, r2
 8014e4c:	461a      	mov	r2, r3
 8014e4e:	460b      	mov	r3, r1
 8014e50:	80fb      	strh	r3, [r7, #6]
 8014e52:	4613      	mov	r3, r2
 8014e54:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014e56:	2300      	movs	r3, #0
 8014e58:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d108      	bne.n	8014e76 <pbuf_copy_partial+0x36>
 8014e64:	4b2b      	ldr	r3, [pc, #172]	@ (8014f14 <pbuf_copy_partial+0xd4>)
 8014e66:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014e6a:	492b      	ldr	r1, [pc, #172]	@ (8014f18 <pbuf_copy_partial+0xd8>)
 8014e6c:	482b      	ldr	r0, [pc, #172]	@ (8014f1c <pbuf_copy_partial+0xdc>)
 8014e6e:	f00b fc11 	bl	8020694 <iprintf>
 8014e72:	2300      	movs	r3, #0
 8014e74:	e04a      	b.n	8014f0c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d108      	bne.n	8014e8e <pbuf_copy_partial+0x4e>
 8014e7c:	4b25      	ldr	r3, [pc, #148]	@ (8014f14 <pbuf_copy_partial+0xd4>)
 8014e7e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8014e82:	4927      	ldr	r1, [pc, #156]	@ (8014f20 <pbuf_copy_partial+0xe0>)
 8014e84:	4825      	ldr	r0, [pc, #148]	@ (8014f1c <pbuf_copy_partial+0xdc>)
 8014e86:	f00b fc05 	bl	8020694 <iprintf>
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	e03e      	b.n	8014f0c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	61fb      	str	r3, [r7, #28]
 8014e92:	e034      	b.n	8014efe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014e94:	88bb      	ldrh	r3, [r7, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d00a      	beq.n	8014eb0 <pbuf_copy_partial+0x70>
 8014e9a:	69fb      	ldr	r3, [r7, #28]
 8014e9c:	895b      	ldrh	r3, [r3, #10]
 8014e9e:	88ba      	ldrh	r2, [r7, #4]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d305      	bcc.n	8014eb0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	895b      	ldrh	r3, [r3, #10]
 8014ea8:	88ba      	ldrh	r2, [r7, #4]
 8014eaa:	1ad3      	subs	r3, r2, r3
 8014eac:	80bb      	strh	r3, [r7, #4]
 8014eae:	e023      	b.n	8014ef8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	895a      	ldrh	r2, [r3, #10]
 8014eb4:	88bb      	ldrh	r3, [r7, #4]
 8014eb6:	1ad3      	subs	r3, r2, r3
 8014eb8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014eba:	8b3a      	ldrh	r2, [r7, #24]
 8014ebc:	88fb      	ldrh	r3, [r7, #6]
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d901      	bls.n	8014ec6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014ec2:	88fb      	ldrh	r3, [r7, #6]
 8014ec4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014ec6:	8b7b      	ldrh	r3, [r7, #26]
 8014ec8:	68ba      	ldr	r2, [r7, #8]
 8014eca:	18d0      	adds	r0, r2, r3
 8014ecc:	69fb      	ldr	r3, [r7, #28]
 8014ece:	685a      	ldr	r2, [r3, #4]
 8014ed0:	88bb      	ldrh	r3, [r7, #4]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	8b3a      	ldrh	r2, [r7, #24]
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	f00b fe0f 	bl	8020afa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014edc:	8afa      	ldrh	r2, [r7, #22]
 8014ede:	8b3b      	ldrh	r3, [r7, #24]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014ee4:	8b7a      	ldrh	r2, [r7, #26]
 8014ee6:	8b3b      	ldrh	r3, [r7, #24]
 8014ee8:	4413      	add	r3, r2
 8014eea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014eec:	88fa      	ldrh	r2, [r7, #6]
 8014eee:	8b3b      	ldrh	r3, [r7, #24]
 8014ef0:	1ad3      	subs	r3, r2, r3
 8014ef2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014ef8:	69fb      	ldr	r3, [r7, #28]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	61fb      	str	r3, [r7, #28]
 8014efe:	88fb      	ldrh	r3, [r7, #6]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d002      	beq.n	8014f0a <pbuf_copy_partial+0xca>
 8014f04:	69fb      	ldr	r3, [r7, #28]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d1c4      	bne.n	8014e94 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014f0a:	8afb      	ldrh	r3, [r7, #22]
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	3720      	adds	r7, #32
 8014f10:	46bd      	mov	sp, r7
 8014f12:	bd80      	pop	{r7, pc}
 8014f14:	08022de4 	.word	0x08022de4
 8014f18:	080233c4 	.word	0x080233c4
 8014f1c:	08022e44 	.word	0x08022e44
 8014f20:	080233e4 	.word	0x080233e4

08014f24 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	603a      	str	r2, [r7, #0]
 8014f2e:	71fb      	strb	r3, [r7, #7]
 8014f30:	460b      	mov	r3, r1
 8014f32:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014f34:	683b      	ldr	r3, [r7, #0]
 8014f36:	8919      	ldrh	r1, [r3, #8]
 8014f38:	88ba      	ldrh	r2, [r7, #4]
 8014f3a:	79fb      	ldrb	r3, [r7, #7]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f7ff fa21 	bl	8014384 <pbuf_alloc>
 8014f42:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d101      	bne.n	8014f4e <pbuf_clone+0x2a>
    return NULL;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	e011      	b.n	8014f72 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014f4e:	6839      	ldr	r1, [r7, #0]
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	f7ff fe97 	bl	8014c84 <pbuf_copy>
 8014f56:	4603      	mov	r3, r0
 8014f58:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014f5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d006      	beq.n	8014f70 <pbuf_clone+0x4c>
 8014f62:	4b06      	ldr	r3, [pc, #24]	@ (8014f7c <pbuf_clone+0x58>)
 8014f64:	f240 5224 	movw	r2, #1316	@ 0x524
 8014f68:	4905      	ldr	r1, [pc, #20]	@ (8014f80 <pbuf_clone+0x5c>)
 8014f6a:	4806      	ldr	r0, [pc, #24]	@ (8014f84 <pbuf_clone+0x60>)
 8014f6c:	f00b fb92 	bl	8020694 <iprintf>
  return q;
 8014f70:	68fb      	ldr	r3, [r7, #12]
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	08022de4 	.word	0x08022de4
 8014f80:	080234f0 	.word	0x080234f0
 8014f84:	08022e44 	.word	0x08022e44

08014f88 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8014f88:	b480      	push	{r7}
 8014f8a:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 8014f8c:	4b04      	ldr	r3, [pc, #16]	@ (8014fa0 <stats_init+0x18>)
 8014f8e:	4a05      	ldr	r2, [pc, #20]	@ (8014fa4 <stats_init+0x1c>)
 8014f90:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8014f94:	bf00      	nop
 8014f96:	46bd      	mov	sp, r7
 8014f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9c:	4770      	bx	lr
 8014f9e:	bf00      	nop
 8014fa0:	2002d36c 	.word	0x2002d36c
 8014fa4:	08023504 	.word	0x08023504

08014fa8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014fac:	f00b fa72 	bl	8020494 <rand>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	4b01      	ldr	r3, [pc, #4]	@ (8014fc8 <tcp_init+0x20>)
 8014fc2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014fc4:	bf00      	nop
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	20000068 	.word	0x20000068

08014fcc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	7d1b      	ldrb	r3, [r3, #20]
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	d105      	bne.n	8014fe8 <tcp_free+0x1c>
 8014fdc:	4b06      	ldr	r3, [pc, #24]	@ (8014ff8 <tcp_free+0x2c>)
 8014fde:	22d4      	movs	r2, #212	@ 0xd4
 8014fe0:	4906      	ldr	r1, [pc, #24]	@ (8014ffc <tcp_free+0x30>)
 8014fe2:	4807      	ldr	r0, [pc, #28]	@ (8015000 <tcp_free+0x34>)
 8014fe4:	f00b fb56 	bl	8020694 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014fe8:	6879      	ldr	r1, [r7, #4]
 8014fea:	2001      	movs	r0, #1
 8014fec:	f7fe fd10 	bl	8013a10 <memp_free>
}
 8014ff0:	bf00      	nop
 8014ff2:	3708      	adds	r7, #8
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	08023764 	.word	0x08023764
 8014ffc:	08023794 	.word	0x08023794
 8015000:	080237a8 	.word	0x080237a8

08015004 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	7d1b      	ldrb	r3, [r3, #20]
 8015010:	2b01      	cmp	r3, #1
 8015012:	d105      	bne.n	8015020 <tcp_free_listen+0x1c>
 8015014:	4b06      	ldr	r3, [pc, #24]	@ (8015030 <tcp_free_listen+0x2c>)
 8015016:	22df      	movs	r2, #223	@ 0xdf
 8015018:	4906      	ldr	r1, [pc, #24]	@ (8015034 <tcp_free_listen+0x30>)
 801501a:	4807      	ldr	r0, [pc, #28]	@ (8015038 <tcp_free_listen+0x34>)
 801501c:	f00b fb3a 	bl	8020694 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015020:	6879      	ldr	r1, [r7, #4]
 8015022:	2002      	movs	r0, #2
 8015024:	f7fe fcf4 	bl	8013a10 <memp_free>
}
 8015028:	bf00      	nop
 801502a:	3708      	adds	r7, #8
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}
 8015030:	08023764 	.word	0x08023764
 8015034:	080237d0 	.word	0x080237d0
 8015038:	080237a8 	.word	0x080237a8

0801503c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015040:	f000 ffde 	bl	8016000 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015044:	4b07      	ldr	r3, [pc, #28]	@ (8015064 <tcp_tmr+0x28>)
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	3301      	adds	r3, #1
 801504a:	b2da      	uxtb	r2, r3
 801504c:	4b05      	ldr	r3, [pc, #20]	@ (8015064 <tcp_tmr+0x28>)
 801504e:	701a      	strb	r2, [r3, #0]
 8015050:	4b04      	ldr	r3, [pc, #16]	@ (8015064 <tcp_tmr+0x28>)
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	f003 0301 	and.w	r3, r3, #1
 8015058:	2b00      	cmp	r3, #0
 801505a:	d001      	beq.n	8015060 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801505c:	f000 fc8e 	bl	801597c <tcp_slowtmr>
  }
}
 8015060:	bf00      	nop
 8015062:	bd80      	pop	{r7, pc}
 8015064:	2002d481 	.word	0x2002d481

08015068 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d105      	bne.n	8015084 <tcp_remove_listener+0x1c>
 8015078:	4b0d      	ldr	r3, [pc, #52]	@ (80150b0 <tcp_remove_listener+0x48>)
 801507a:	22ff      	movs	r2, #255	@ 0xff
 801507c:	490d      	ldr	r1, [pc, #52]	@ (80150b4 <tcp_remove_listener+0x4c>)
 801507e:	480e      	ldr	r0, [pc, #56]	@ (80150b8 <tcp_remove_listener+0x50>)
 8015080:	f00b fb08 	bl	8020694 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	60fb      	str	r3, [r7, #12]
 8015088:	e00a      	b.n	80150a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801508e:	683a      	ldr	r2, [r7, #0]
 8015090:	429a      	cmp	r2, r3
 8015092:	d102      	bne.n	801509a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	2200      	movs	r2, #0
 8015098:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	60fb      	str	r3, [r7, #12]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1f1      	bne.n	801508a <tcp_remove_listener+0x22>
    }
  }
}
 80150a6:	bf00      	nop
 80150a8:	bf00      	nop
 80150aa:	3710      	adds	r7, #16
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	08023764 	.word	0x08023764
 80150b4:	080237ec 	.word	0x080237ec
 80150b8:	080237a8 	.word	0x080237a8

080150bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b084      	sub	sp, #16
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d106      	bne.n	80150d8 <tcp_listen_closed+0x1c>
 80150ca:	4b14      	ldr	r3, [pc, #80]	@ (801511c <tcp_listen_closed+0x60>)
 80150cc:	f240 1211 	movw	r2, #273	@ 0x111
 80150d0:	4913      	ldr	r1, [pc, #76]	@ (8015120 <tcp_listen_closed+0x64>)
 80150d2:	4814      	ldr	r0, [pc, #80]	@ (8015124 <tcp_listen_closed+0x68>)
 80150d4:	f00b fade 	bl	8020694 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	7d1b      	ldrb	r3, [r3, #20]
 80150dc:	2b01      	cmp	r3, #1
 80150de:	d006      	beq.n	80150ee <tcp_listen_closed+0x32>
 80150e0:	4b0e      	ldr	r3, [pc, #56]	@ (801511c <tcp_listen_closed+0x60>)
 80150e2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80150e6:	4910      	ldr	r1, [pc, #64]	@ (8015128 <tcp_listen_closed+0x6c>)
 80150e8:	480e      	ldr	r0, [pc, #56]	@ (8015124 <tcp_listen_closed+0x68>)
 80150ea:	f00b fad3 	bl	8020694 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80150ee:	2301      	movs	r3, #1
 80150f0:	60fb      	str	r3, [r7, #12]
 80150f2:	e00b      	b.n	801510c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80150f4:	4a0d      	ldr	r2, [pc, #52]	@ (801512c <tcp_listen_closed+0x70>)
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	6879      	ldr	r1, [r7, #4]
 8015100:	4618      	mov	r0, r3
 8015102:	f7ff ffb1 	bl	8015068 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	3301      	adds	r3, #1
 801510a:	60fb      	str	r3, [r7, #12]
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2b03      	cmp	r3, #3
 8015110:	d9f0      	bls.n	80150f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015112:	bf00      	nop
 8015114:	bf00      	nop
 8015116:	3710      	adds	r7, #16
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	08023764 	.word	0x08023764
 8015120:	08023814 	.word	0x08023814
 8015124:	080237a8 	.word	0x080237a8
 8015128:	08023820 	.word	0x08023820
 801512c:	08026740 	.word	0x08026740

08015130 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015130:	b5b0      	push	{r4, r5, r7, lr}
 8015132:	b088      	sub	sp, #32
 8015134:	af04      	add	r7, sp, #16
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	460b      	mov	r3, r1
 801513a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d106      	bne.n	8015150 <tcp_close_shutdown+0x20>
 8015142:	4b63      	ldr	r3, [pc, #396]	@ (80152d0 <tcp_close_shutdown+0x1a0>)
 8015144:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8015148:	4962      	ldr	r1, [pc, #392]	@ (80152d4 <tcp_close_shutdown+0x1a4>)
 801514a:	4863      	ldr	r0, [pc, #396]	@ (80152d8 <tcp_close_shutdown+0x1a8>)
 801514c:	f00b faa2 	bl	8020694 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015150:	78fb      	ldrb	r3, [r7, #3]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d066      	beq.n	8015224 <tcp_close_shutdown+0xf4>
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	7d1b      	ldrb	r3, [r3, #20]
 801515a:	2b04      	cmp	r3, #4
 801515c:	d003      	beq.n	8015166 <tcp_close_shutdown+0x36>
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	7d1b      	ldrb	r3, [r3, #20]
 8015162:	2b07      	cmp	r3, #7
 8015164:	d15e      	bne.n	8015224 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801516a:	2b00      	cmp	r3, #0
 801516c:	d104      	bne.n	8015178 <tcp_close_shutdown+0x48>
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015172:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015176:	d055      	beq.n	8015224 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	8b5b      	ldrh	r3, [r3, #26]
 801517c:	f003 0310 	and.w	r3, r3, #16
 8015180:	2b00      	cmp	r3, #0
 8015182:	d106      	bne.n	8015192 <tcp_close_shutdown+0x62>
 8015184:	4b52      	ldr	r3, [pc, #328]	@ (80152d0 <tcp_close_shutdown+0x1a0>)
 8015186:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801518a:	4954      	ldr	r1, [pc, #336]	@ (80152dc <tcp_close_shutdown+0x1ac>)
 801518c:	4852      	ldr	r0, [pc, #328]	@ (80152d8 <tcp_close_shutdown+0x1a8>)
 801518e:	f00b fa81 	bl	8020694 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801519a:	687d      	ldr	r5, [r7, #4]
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	3304      	adds	r3, #4
 80151a0:	687a      	ldr	r2, [r7, #4]
 80151a2:	8ad2      	ldrh	r2, [r2, #22]
 80151a4:	6879      	ldr	r1, [r7, #4]
 80151a6:	8b09      	ldrh	r1, [r1, #24]
 80151a8:	9102      	str	r1, [sp, #8]
 80151aa:	9201      	str	r2, [sp, #4]
 80151ac:	9300      	str	r3, [sp, #0]
 80151ae:	462b      	mov	r3, r5
 80151b0:	4622      	mov	r2, r4
 80151b2:	4601      	mov	r1, r0
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f005 fe3f 	bl	801ae38 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f001 fafa 	bl	80167b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80151c0:	4b47      	ldr	r3, [pc, #284]	@ (80152e0 <tcp_close_shutdown+0x1b0>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d105      	bne.n	80151d6 <tcp_close_shutdown+0xa6>
 80151ca:	4b45      	ldr	r3, [pc, #276]	@ (80152e0 <tcp_close_shutdown+0x1b0>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	68db      	ldr	r3, [r3, #12]
 80151d0:	4a43      	ldr	r2, [pc, #268]	@ (80152e0 <tcp_close_shutdown+0x1b0>)
 80151d2:	6013      	str	r3, [r2, #0]
 80151d4:	e013      	b.n	80151fe <tcp_close_shutdown+0xce>
 80151d6:	4b42      	ldr	r3, [pc, #264]	@ (80152e0 <tcp_close_shutdown+0x1b0>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	60fb      	str	r3, [r7, #12]
 80151dc:	e00c      	b.n	80151f8 <tcp_close_shutdown+0xc8>
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	68db      	ldr	r3, [r3, #12]
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d104      	bne.n	80151f2 <tcp_close_shutdown+0xc2>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	68da      	ldr	r2, [r3, #12]
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	60da      	str	r2, [r3, #12]
 80151f0:	e005      	b.n	80151fe <tcp_close_shutdown+0xce>
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	68db      	ldr	r3, [r3, #12]
 80151f6:	60fb      	str	r3, [r7, #12]
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d1ef      	bne.n	80151de <tcp_close_shutdown+0xae>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2200      	movs	r2, #0
 8015202:	60da      	str	r2, [r3, #12]
 8015204:	4b37      	ldr	r3, [pc, #220]	@ (80152e4 <tcp_close_shutdown+0x1b4>)
 8015206:	2201      	movs	r2, #1
 8015208:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801520a:	4b37      	ldr	r3, [pc, #220]	@ (80152e8 <tcp_close_shutdown+0x1b8>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	687a      	ldr	r2, [r7, #4]
 8015210:	429a      	cmp	r2, r3
 8015212:	d102      	bne.n	801521a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015214:	f003 fffa 	bl	801920c <tcp_trigger_input_pcb_close>
 8015218:	e002      	b.n	8015220 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801521a:	6878      	ldr	r0, [r7, #4]
 801521c:	f7ff fed6 	bl	8014fcc <tcp_free>
      }
      return ERR_OK;
 8015220:	2300      	movs	r3, #0
 8015222:	e050      	b.n	80152c6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	7d1b      	ldrb	r3, [r3, #20]
 8015228:	2b02      	cmp	r3, #2
 801522a:	d03b      	beq.n	80152a4 <tcp_close_shutdown+0x174>
 801522c:	2b02      	cmp	r3, #2
 801522e:	dc44      	bgt.n	80152ba <tcp_close_shutdown+0x18a>
 8015230:	2b00      	cmp	r3, #0
 8015232:	d002      	beq.n	801523a <tcp_close_shutdown+0x10a>
 8015234:	2b01      	cmp	r3, #1
 8015236:	d02a      	beq.n	801528e <tcp_close_shutdown+0x15e>
 8015238:	e03f      	b.n	80152ba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	8adb      	ldrh	r3, [r3, #22]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d021      	beq.n	8015286 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015242:	4b2a      	ldr	r3, [pc, #168]	@ (80152ec <tcp_close_shutdown+0x1bc>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	429a      	cmp	r2, r3
 801524a:	d105      	bne.n	8015258 <tcp_close_shutdown+0x128>
 801524c:	4b27      	ldr	r3, [pc, #156]	@ (80152ec <tcp_close_shutdown+0x1bc>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	68db      	ldr	r3, [r3, #12]
 8015252:	4a26      	ldr	r2, [pc, #152]	@ (80152ec <tcp_close_shutdown+0x1bc>)
 8015254:	6013      	str	r3, [r2, #0]
 8015256:	e013      	b.n	8015280 <tcp_close_shutdown+0x150>
 8015258:	4b24      	ldr	r3, [pc, #144]	@ (80152ec <tcp_close_shutdown+0x1bc>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	60bb      	str	r3, [r7, #8]
 801525e:	e00c      	b.n	801527a <tcp_close_shutdown+0x14a>
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	68db      	ldr	r3, [r3, #12]
 8015264:	687a      	ldr	r2, [r7, #4]
 8015266:	429a      	cmp	r2, r3
 8015268:	d104      	bne.n	8015274 <tcp_close_shutdown+0x144>
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	68da      	ldr	r2, [r3, #12]
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	60da      	str	r2, [r3, #12]
 8015272:	e005      	b.n	8015280 <tcp_close_shutdown+0x150>
 8015274:	68bb      	ldr	r3, [r7, #8]
 8015276:	68db      	ldr	r3, [r3, #12]
 8015278:	60bb      	str	r3, [r7, #8]
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d1ef      	bne.n	8015260 <tcp_close_shutdown+0x130>
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2200      	movs	r2, #0
 8015284:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f7ff fea0 	bl	8014fcc <tcp_free>
      break;
 801528c:	e01a      	b.n	80152c4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f7ff ff14 	bl	80150bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8015294:	6879      	ldr	r1, [r7, #4]
 8015296:	4816      	ldr	r0, [pc, #88]	@ (80152f0 <tcp_close_shutdown+0x1c0>)
 8015298:	f001 fadc 	bl	8016854 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7ff feb1 	bl	8015004 <tcp_free_listen>
      break;
 80152a2:	e00f      	b.n	80152c4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80152a4:	6879      	ldr	r1, [r7, #4]
 80152a6:	480e      	ldr	r0, [pc, #56]	@ (80152e0 <tcp_close_shutdown+0x1b0>)
 80152a8:	f001 fad4 	bl	8016854 <tcp_pcb_remove>
 80152ac:	4b0d      	ldr	r3, [pc, #52]	@ (80152e4 <tcp_close_shutdown+0x1b4>)
 80152ae:	2201      	movs	r2, #1
 80152b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f7ff fe8a 	bl	8014fcc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80152b8:	e004      	b.n	80152c4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f000 f81a 	bl	80152f4 <tcp_close_shutdown_fin>
 80152c0:	4603      	mov	r3, r0
 80152c2:	e000      	b.n	80152c6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80152c4:	2300      	movs	r3, #0
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3710      	adds	r7, #16
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bdb0      	pop	{r4, r5, r7, pc}
 80152ce:	bf00      	nop
 80152d0:	08023764 	.word	0x08023764
 80152d4:	08023838 	.word	0x08023838
 80152d8:	080237a8 	.word	0x080237a8
 80152dc:	08023858 	.word	0x08023858
 80152e0:	2002d478 	.word	0x2002d478
 80152e4:	2002d480 	.word	0x2002d480
 80152e8:	2002d4bc 	.word	0x2002d4bc
 80152ec:	2002d470 	.word	0x2002d470
 80152f0:	2002d474 	.word	0x2002d474

080152f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b084      	sub	sp, #16
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d106      	bne.n	8015310 <tcp_close_shutdown_fin+0x1c>
 8015302:	4b2e      	ldr	r3, [pc, #184]	@ (80153bc <tcp_close_shutdown_fin+0xc8>)
 8015304:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8015308:	492d      	ldr	r1, [pc, #180]	@ (80153c0 <tcp_close_shutdown_fin+0xcc>)
 801530a:	482e      	ldr	r0, [pc, #184]	@ (80153c4 <tcp_close_shutdown_fin+0xd0>)
 801530c:	f00b f9c2 	bl	8020694 <iprintf>

  switch (pcb->state) {
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	7d1b      	ldrb	r3, [r3, #20]
 8015314:	2b07      	cmp	r3, #7
 8015316:	d020      	beq.n	801535a <tcp_close_shutdown_fin+0x66>
 8015318:	2b07      	cmp	r3, #7
 801531a:	dc2b      	bgt.n	8015374 <tcp_close_shutdown_fin+0x80>
 801531c:	2b03      	cmp	r3, #3
 801531e:	d002      	beq.n	8015326 <tcp_close_shutdown_fin+0x32>
 8015320:	2b04      	cmp	r3, #4
 8015322:	d00d      	beq.n	8015340 <tcp_close_shutdown_fin+0x4c>
 8015324:	e026      	b.n	8015374 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f004 fe62 	bl	8019ff0 <tcp_send_fin>
 801532c:	4603      	mov	r3, r0
 801532e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d11f      	bne.n	8015378 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	2205      	movs	r2, #5
 801533c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801533e:	e01b      	b.n	8015378 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f004 fe55 	bl	8019ff0 <tcp_send_fin>
 8015346:	4603      	mov	r3, r0
 8015348:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801534a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d114      	bne.n	801537c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	2205      	movs	r2, #5
 8015356:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015358:	e010      	b.n	801537c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f004 fe48 	bl	8019ff0 <tcp_send_fin>
 8015360:	4603      	mov	r3, r0
 8015362:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d109      	bne.n	8015380 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2209      	movs	r2, #9
 8015370:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015372:	e005      	b.n	8015380 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015374:	2300      	movs	r3, #0
 8015376:	e01c      	b.n	80153b2 <tcp_close_shutdown_fin+0xbe>
      break;
 8015378:	bf00      	nop
 801537a:	e002      	b.n	8015382 <tcp_close_shutdown_fin+0x8e>
      break;
 801537c:	bf00      	nop
 801537e:	e000      	b.n	8015382 <tcp_close_shutdown_fin+0x8e>
      break;
 8015380:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d103      	bne.n	8015392 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801538a:	6878      	ldr	r0, [r7, #4]
 801538c:	f004 ff80 	bl	801a290 <tcp_output>
 8015390:	e00d      	b.n	80153ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015396:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801539a:	d108      	bne.n	80153ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	8b5b      	ldrh	r3, [r3, #26]
 80153a0:	f043 0308 	orr.w	r3, r3, #8
 80153a4:	b29a      	uxth	r2, r3
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80153aa:	2300      	movs	r3, #0
 80153ac:	e001      	b.n	80153b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80153ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3710      	adds	r7, #16
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	08023764 	.word	0x08023764
 80153c0:	08023814 	.word	0x08023814
 80153c4:	080237a8 	.word	0x080237a8

080153c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b082      	sub	sp, #8
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d109      	bne.n	80153ea <tcp_close+0x22>
 80153d6:	4b0f      	ldr	r3, [pc, #60]	@ (8015414 <tcp_close+0x4c>)
 80153d8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80153dc:	490e      	ldr	r1, [pc, #56]	@ (8015418 <tcp_close+0x50>)
 80153de:	480f      	ldr	r0, [pc, #60]	@ (801541c <tcp_close+0x54>)
 80153e0:	f00b f958 	bl	8020694 <iprintf>
 80153e4:	f06f 030f 	mvn.w	r3, #15
 80153e8:	e00f      	b.n	801540a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	7d1b      	ldrb	r3, [r3, #20]
 80153ee:	2b01      	cmp	r3, #1
 80153f0:	d006      	beq.n	8015400 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	8b5b      	ldrh	r3, [r3, #26]
 80153f6:	f043 0310 	orr.w	r3, r3, #16
 80153fa:	b29a      	uxth	r2, r3
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015400:	2101      	movs	r1, #1
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	f7ff fe94 	bl	8015130 <tcp_close_shutdown>
 8015408:	4603      	mov	r3, r0
}
 801540a:	4618      	mov	r0, r3
 801540c:	3708      	adds	r7, #8
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	08023764 	.word	0x08023764
 8015418:	08023874 	.word	0x08023874
 801541c:	080237a8 	.word	0x080237a8

08015420 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d109      	bne.n	8015446 <tcp_shutdown+0x26>
 8015432:	4b26      	ldr	r3, [pc, #152]	@ (80154cc <tcp_shutdown+0xac>)
 8015434:	f240 2207 	movw	r2, #519	@ 0x207
 8015438:	4925      	ldr	r1, [pc, #148]	@ (80154d0 <tcp_shutdown+0xb0>)
 801543a:	4826      	ldr	r0, [pc, #152]	@ (80154d4 <tcp_shutdown+0xb4>)
 801543c:	f00b f92a 	bl	8020694 <iprintf>
 8015440:	f06f 030f 	mvn.w	r3, #15
 8015444:	e03d      	b.n	80154c2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	7d1b      	ldrb	r3, [r3, #20]
 801544a:	2b01      	cmp	r3, #1
 801544c:	d102      	bne.n	8015454 <tcp_shutdown+0x34>
    return ERR_CONN;
 801544e:	f06f 030a 	mvn.w	r3, #10
 8015452:	e036      	b.n	80154c2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015454:	68bb      	ldr	r3, [r7, #8]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d01b      	beq.n	8015492 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	8b5b      	ldrh	r3, [r3, #26]
 801545e:	f043 0310 	orr.w	r3, r3, #16
 8015462:	b29a      	uxth	r2, r3
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d005      	beq.n	801547a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801546e:	2101      	movs	r1, #1
 8015470:	68f8      	ldr	r0, [r7, #12]
 8015472:	f7ff fe5d 	bl	8015130 <tcp_close_shutdown>
 8015476:	4603      	mov	r3, r0
 8015478:	e023      	b.n	80154c2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801547e:	2b00      	cmp	r3, #0
 8015480:	d007      	beq.n	8015492 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015486:	4618      	mov	r0, r3
 8015488:	f7ff faa8 	bl	80149dc <pbuf_free>
      pcb->refused_data = NULL;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	2200      	movs	r2, #0
 8015490:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d013      	beq.n	80154c0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	7d1b      	ldrb	r3, [r3, #20]
 801549c:	2b04      	cmp	r3, #4
 801549e:	dc02      	bgt.n	80154a6 <tcp_shutdown+0x86>
 80154a0:	2b03      	cmp	r3, #3
 80154a2:	da02      	bge.n	80154aa <tcp_shutdown+0x8a>
 80154a4:	e009      	b.n	80154ba <tcp_shutdown+0x9a>
 80154a6:	2b07      	cmp	r3, #7
 80154a8:	d107      	bne.n	80154ba <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	4619      	mov	r1, r3
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f7ff fe3d 	bl	8015130 <tcp_close_shutdown>
 80154b6:	4603      	mov	r3, r0
 80154b8:	e003      	b.n	80154c2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80154ba:	f06f 030a 	mvn.w	r3, #10
 80154be:	e000      	b.n	80154c2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80154c0:	2300      	movs	r3, #0
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3710      	adds	r7, #16
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	08023764 	.word	0x08023764
 80154d0:	0802388c 	.word	0x0802388c
 80154d4:	080237a8 	.word	0x080237a8

080154d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b08e      	sub	sp, #56	@ 0x38
 80154dc:	af04      	add	r7, sp, #16
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d107      	bne.n	80154f8 <tcp_abandon+0x20>
 80154e8:	4b52      	ldr	r3, [pc, #328]	@ (8015634 <tcp_abandon+0x15c>)
 80154ea:	f240 223d 	movw	r2, #573	@ 0x23d
 80154ee:	4952      	ldr	r1, [pc, #328]	@ (8015638 <tcp_abandon+0x160>)
 80154f0:	4852      	ldr	r0, [pc, #328]	@ (801563c <tcp_abandon+0x164>)
 80154f2:	f00b f8cf 	bl	8020694 <iprintf>
 80154f6:	e099      	b.n	801562c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	7d1b      	ldrb	r3, [r3, #20]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d106      	bne.n	801550e <tcp_abandon+0x36>
 8015500:	4b4c      	ldr	r3, [pc, #304]	@ (8015634 <tcp_abandon+0x15c>)
 8015502:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8015506:	494e      	ldr	r1, [pc, #312]	@ (8015640 <tcp_abandon+0x168>)
 8015508:	484c      	ldr	r0, [pc, #304]	@ (801563c <tcp_abandon+0x164>)
 801550a:	f00b f8c3 	bl	8020694 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	7d1b      	ldrb	r3, [r3, #20]
 8015512:	2b0a      	cmp	r3, #10
 8015514:	d107      	bne.n	8015526 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015516:	6879      	ldr	r1, [r7, #4]
 8015518:	484a      	ldr	r0, [pc, #296]	@ (8015644 <tcp_abandon+0x16c>)
 801551a:	f001 f99b 	bl	8016854 <tcp_pcb_remove>
    tcp_free(pcb);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f7ff fd54 	bl	8014fcc <tcp_free>
 8015524:	e082      	b.n	801562c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015526:	2300      	movs	r3, #0
 8015528:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801552a:	2300      	movs	r3, #0
 801552c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015532:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015538:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015540:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	691b      	ldr	r3, [r3, #16]
 8015546:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	7d1b      	ldrb	r3, [r3, #20]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d126      	bne.n	801559e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	8adb      	ldrh	r3, [r3, #22]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d02e      	beq.n	80155b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015558:	4b3b      	ldr	r3, [pc, #236]	@ (8015648 <tcp_abandon+0x170>)
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	687a      	ldr	r2, [r7, #4]
 801555e:	429a      	cmp	r2, r3
 8015560:	d105      	bne.n	801556e <tcp_abandon+0x96>
 8015562:	4b39      	ldr	r3, [pc, #228]	@ (8015648 <tcp_abandon+0x170>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	4a37      	ldr	r2, [pc, #220]	@ (8015648 <tcp_abandon+0x170>)
 801556a:	6013      	str	r3, [r2, #0]
 801556c:	e013      	b.n	8015596 <tcp_abandon+0xbe>
 801556e:	4b36      	ldr	r3, [pc, #216]	@ (8015648 <tcp_abandon+0x170>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	61fb      	str	r3, [r7, #28]
 8015574:	e00c      	b.n	8015590 <tcp_abandon+0xb8>
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	68db      	ldr	r3, [r3, #12]
 801557a:	687a      	ldr	r2, [r7, #4]
 801557c:	429a      	cmp	r2, r3
 801557e:	d104      	bne.n	801558a <tcp_abandon+0xb2>
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	68da      	ldr	r2, [r3, #12]
 8015584:	69fb      	ldr	r3, [r7, #28]
 8015586:	60da      	str	r2, [r3, #12]
 8015588:	e005      	b.n	8015596 <tcp_abandon+0xbe>
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	61fb      	str	r3, [r7, #28]
 8015590:	69fb      	ldr	r3, [r7, #28]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d1ef      	bne.n	8015576 <tcp_abandon+0x9e>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	2200      	movs	r2, #0
 801559a:	60da      	str	r2, [r3, #12]
 801559c:	e00b      	b.n	80155b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	8adb      	ldrh	r3, [r3, #22]
 80155a6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80155a8:	6879      	ldr	r1, [r7, #4]
 80155aa:	4828      	ldr	r0, [pc, #160]	@ (801564c <tcp_abandon+0x174>)
 80155ac:	f001 f952 	bl	8016854 <tcp_pcb_remove>
 80155b0:	4b27      	ldr	r3, [pc, #156]	@ (8015650 <tcp_abandon+0x178>)
 80155b2:	2201      	movs	r2, #1
 80155b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d004      	beq.n	80155c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155c2:	4618      	mov	r0, r3
 80155c4:	f000 fdfc 	bl	80161c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d004      	beq.n	80155da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80155d4:	4618      	mov	r0, r3
 80155d6:	f000 fdf3 	bl	80161c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d004      	beq.n	80155ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155e6:	4618      	mov	r0, r3
 80155e8:	f000 fdea 	bl	80161c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80155ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d00e      	beq.n	8015610 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80155f2:	6879      	ldr	r1, [r7, #4]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3304      	adds	r3, #4
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	8b12      	ldrh	r2, [r2, #24]
 80155fc:	9202      	str	r2, [sp, #8]
 80155fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015600:	9201      	str	r2, [sp, #4]
 8015602:	9300      	str	r3, [sp, #0]
 8015604:	460b      	mov	r3, r1
 8015606:	697a      	ldr	r2, [r7, #20]
 8015608:	69b9      	ldr	r1, [r7, #24]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f005 fc14 	bl	801ae38 <tcp_rst>
    }
    last_state = pcb->state;
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	7d1b      	ldrb	r3, [r3, #20]
 8015614:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f7ff fcd8 	bl	8014fcc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d004      	beq.n	801562c <tcp_abandon+0x154>
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	f06f 010c 	mvn.w	r1, #12
 8015628:	68f8      	ldr	r0, [r7, #12]
 801562a:	4798      	blx	r3
  }
}
 801562c:	3728      	adds	r7, #40	@ 0x28
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	08023764 	.word	0x08023764
 8015638:	080238a8 	.word	0x080238a8
 801563c:	080237a8 	.word	0x080237a8
 8015640:	080238c4 	.word	0x080238c4
 8015644:	2002d47c 	.word	0x2002d47c
 8015648:	2002d470 	.word	0x2002d470
 801564c:	2002d478 	.word	0x2002d478
 8015650:	2002d480 	.word	0x2002d480

08015654 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801565c:	2101      	movs	r1, #1
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7ff ff3a 	bl	80154d8 <tcp_abandon>
}
 8015664:	bf00      	nop
 8015666:	3708      	adds	r7, #8
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}

0801566c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b088      	sub	sp, #32
 8015670:	af00      	add	r7, sp, #0
 8015672:	60f8      	str	r0, [r7, #12]
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	4613      	mov	r3, r2
 8015678:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801567a:	2304      	movs	r3, #4
 801567c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d101      	bne.n	8015688 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015684:	4b3e      	ldr	r3, [pc, #248]	@ (8015780 <tcp_bind+0x114>)
 8015686:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d109      	bne.n	80156a2 <tcp_bind+0x36>
 801568e:	4b3d      	ldr	r3, [pc, #244]	@ (8015784 <tcp_bind+0x118>)
 8015690:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8015694:	493c      	ldr	r1, [pc, #240]	@ (8015788 <tcp_bind+0x11c>)
 8015696:	483d      	ldr	r0, [pc, #244]	@ (801578c <tcp_bind+0x120>)
 8015698:	f00a fffc 	bl	8020694 <iprintf>
 801569c:	f06f 030f 	mvn.w	r3, #15
 80156a0:	e06a      	b.n	8015778 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	7d1b      	ldrb	r3, [r3, #20]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d009      	beq.n	80156be <tcp_bind+0x52>
 80156aa:	4b36      	ldr	r3, [pc, #216]	@ (8015784 <tcp_bind+0x118>)
 80156ac:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80156b0:	4937      	ldr	r1, [pc, #220]	@ (8015790 <tcp_bind+0x124>)
 80156b2:	4836      	ldr	r0, [pc, #216]	@ (801578c <tcp_bind+0x120>)
 80156b4:	f00a ffee 	bl	8020694 <iprintf>
 80156b8:	f06f 0305 	mvn.w	r3, #5
 80156bc:	e05c      	b.n	8015778 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80156be:	88fb      	ldrh	r3, [r7, #6]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d109      	bne.n	80156d8 <tcp_bind+0x6c>
    port = tcp_new_port();
 80156c4:	f000 f914 	bl	80158f0 <tcp_new_port>
 80156c8:	4603      	mov	r3, r0
 80156ca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80156cc:	88fb      	ldrh	r3, [r7, #6]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d135      	bne.n	801573e <tcp_bind+0xd2>
      return ERR_BUF;
 80156d2:	f06f 0301 	mvn.w	r3, #1
 80156d6:	e04f      	b.n	8015778 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80156d8:	2300      	movs	r3, #0
 80156da:	61fb      	str	r3, [r7, #28]
 80156dc:	e02b      	b.n	8015736 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80156de:	4a2d      	ldr	r2, [pc, #180]	@ (8015794 <tcp_bind+0x128>)
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	61bb      	str	r3, [r7, #24]
 80156ea:	e01e      	b.n	801572a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80156ec:	69bb      	ldr	r3, [r7, #24]
 80156ee:	8adb      	ldrh	r3, [r3, #22]
 80156f0:	88fa      	ldrh	r2, [r7, #6]
 80156f2:	429a      	cmp	r2, r3
 80156f4:	d116      	bne.n	8015724 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80156f6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d010      	beq.n	801571e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80156fc:	69bb      	ldr	r3, [r7, #24]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d00c      	beq.n	801571e <tcp_bind+0xb2>
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d009      	beq.n	801571e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d005      	beq.n	801571e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	681a      	ldr	r2, [r3, #0]
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801571a:	429a      	cmp	r2, r3
 801571c:	d102      	bne.n	8015724 <tcp_bind+0xb8>
              return ERR_USE;
 801571e:	f06f 0307 	mvn.w	r3, #7
 8015722:	e029      	b.n	8015778 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015724:	69bb      	ldr	r3, [r7, #24]
 8015726:	68db      	ldr	r3, [r3, #12]
 8015728:	61bb      	str	r3, [r7, #24]
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d1dd      	bne.n	80156ec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015730:	69fb      	ldr	r3, [r7, #28]
 8015732:	3301      	adds	r3, #1
 8015734:	61fb      	str	r3, [r7, #28]
 8015736:	69fa      	ldr	r2, [r7, #28]
 8015738:	697b      	ldr	r3, [r7, #20]
 801573a:	429a      	cmp	r2, r3
 801573c:	dbcf      	blt.n	80156de <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d00c      	beq.n	801575e <tcp_bind+0xf2>
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d008      	beq.n	801575e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d002      	beq.n	8015758 <tcp_bind+0xec>
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	e000      	b.n	801575a <tcp_bind+0xee>
 8015758:	2300      	movs	r3, #0
 801575a:	68fa      	ldr	r2, [r7, #12]
 801575c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	88fa      	ldrh	r2, [r7, #6]
 8015762:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015764:	4b0c      	ldr	r3, [pc, #48]	@ (8015798 <tcp_bind+0x12c>)
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	60da      	str	r2, [r3, #12]
 801576c:	4a0a      	ldr	r2, [pc, #40]	@ (8015798 <tcp_bind+0x12c>)
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	6013      	str	r3, [r2, #0]
 8015772:	f005 fd23 	bl	801b1bc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015776:	2300      	movs	r3, #0
}
 8015778:	4618      	mov	r0, r3
 801577a:	3720      	adds	r7, #32
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}
 8015780:	08026768 	.word	0x08026768
 8015784:	08023764 	.word	0x08023764
 8015788:	080238f8 	.word	0x080238f8
 801578c:	080237a8 	.word	0x080237a8
 8015790:	08023910 	.word	0x08023910
 8015794:	08026740 	.word	0x08026740
 8015798:	2002d470 	.word	0x2002d470

0801579c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b084      	sub	sp, #16
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d106      	bne.n	80157b8 <tcp_update_rcv_ann_wnd+0x1c>
 80157aa:	4b25      	ldr	r3, [pc, #148]	@ (8015840 <tcp_update_rcv_ann_wnd+0xa4>)
 80157ac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80157b0:	4924      	ldr	r1, [pc, #144]	@ (8015844 <tcp_update_rcv_ann_wnd+0xa8>)
 80157b2:	4825      	ldr	r0, [pc, #148]	@ (8015848 <tcp_update_rcv_ann_wnd+0xac>)
 80157b4:	f00a ff6e 	bl	8020694 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80157c0:	4413      	add	r3, r2
 80157c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157c8:	687a      	ldr	r2, [r7, #4]
 80157ca:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80157cc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80157d0:	bf28      	it	cs
 80157d2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80157d6:	b292      	uxth	r2, r2
 80157d8:	4413      	add	r3, r2
 80157da:	68fa      	ldr	r2, [r7, #12]
 80157dc:	1ad3      	subs	r3, r2, r3
 80157de:	2b00      	cmp	r3, #0
 80157e0:	db08      	blt.n	80157f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157ee:	68fa      	ldr	r2, [r7, #12]
 80157f0:	1ad3      	subs	r3, r2, r3
 80157f2:	e020      	b.n	8015836 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157fc:	1ad3      	subs	r3, r2, r3
 80157fe:	2b00      	cmp	r3, #0
 8015800:	dd03      	ble.n	801580a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	2200      	movs	r2, #0
 8015806:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015808:	e014      	b.n	8015834 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801581c:	d306      	bcc.n	801582c <tcp_update_rcv_ann_wnd+0x90>
 801581e:	4b08      	ldr	r3, [pc, #32]	@ (8015840 <tcp_update_rcv_ann_wnd+0xa4>)
 8015820:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8015824:	4909      	ldr	r1, [pc, #36]	@ (801584c <tcp_update_rcv_ann_wnd+0xb0>)
 8015826:	4808      	ldr	r0, [pc, #32]	@ (8015848 <tcp_update_rcv_ann_wnd+0xac>)
 8015828:	f00a ff34 	bl	8020694 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	b29a      	uxth	r2, r3
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015834:	2300      	movs	r3, #0
  }
}
 8015836:	4618      	mov	r0, r3
 8015838:	3710      	adds	r7, #16
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	08023764 	.word	0x08023764
 8015844:	080239c0 	.word	0x080239c0
 8015848:	080237a8 	.word	0x080237a8
 801584c:	080239e4 	.word	0x080239e4

08015850 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b084      	sub	sp, #16
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
 8015858:	460b      	mov	r3, r1
 801585a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d107      	bne.n	8015872 <tcp_recved+0x22>
 8015862:	4b1f      	ldr	r3, [pc, #124]	@ (80158e0 <tcp_recved+0x90>)
 8015864:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015868:	491e      	ldr	r1, [pc, #120]	@ (80158e4 <tcp_recved+0x94>)
 801586a:	481f      	ldr	r0, [pc, #124]	@ (80158e8 <tcp_recved+0x98>)
 801586c:	f00a ff12 	bl	8020694 <iprintf>
 8015870:	e032      	b.n	80158d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	7d1b      	ldrb	r3, [r3, #20]
 8015876:	2b01      	cmp	r3, #1
 8015878:	d106      	bne.n	8015888 <tcp_recved+0x38>
 801587a:	4b19      	ldr	r3, [pc, #100]	@ (80158e0 <tcp_recved+0x90>)
 801587c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015880:	491a      	ldr	r1, [pc, #104]	@ (80158ec <tcp_recved+0x9c>)
 8015882:	4819      	ldr	r0, [pc, #100]	@ (80158e8 <tcp_recved+0x98>)
 8015884:	f00a ff06 	bl	8020694 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801588c:	887b      	ldrh	r3, [r7, #2]
 801588e:	4413      	add	r3, r2
 8015890:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015892:	89fb      	ldrh	r3, [r7, #14]
 8015894:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015898:	d804      	bhi.n	80158a4 <tcp_recved+0x54>
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801589e:	89fa      	ldrh	r2, [r7, #14]
 80158a0:	429a      	cmp	r2, r3
 80158a2:	d204      	bcs.n	80158ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80158aa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80158ac:	e002      	b.n	80158b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	89fa      	ldrh	r2, [r7, #14]
 80158b2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f7ff ff71 	bl	801579c <tcp_update_rcv_ann_wnd>
 80158ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80158c2:	d309      	bcc.n	80158d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	8b5b      	ldrh	r3, [r3, #26]
 80158c8:	f043 0302 	orr.w	r3, r3, #2
 80158cc:	b29a      	uxth	r2, r3
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f004 fcdc 	bl	801a290 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80158d8:	3710      	adds	r7, #16
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}
 80158de:	bf00      	nop
 80158e0:	08023764 	.word	0x08023764
 80158e4:	08023a00 	.word	0x08023a00
 80158e8:	080237a8 	.word	0x080237a8
 80158ec:	08023a18 	.word	0x08023a18

080158f0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80158f0:	b480      	push	{r7}
 80158f2:	b083      	sub	sp, #12
 80158f4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80158f6:	2300      	movs	r3, #0
 80158f8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80158fa:	4b1e      	ldr	r3, [pc, #120]	@ (8015974 <tcp_new_port+0x84>)
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	3301      	adds	r3, #1
 8015900:	b29a      	uxth	r2, r3
 8015902:	4b1c      	ldr	r3, [pc, #112]	@ (8015974 <tcp_new_port+0x84>)
 8015904:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015906:	4b1b      	ldr	r3, [pc, #108]	@ (8015974 <tcp_new_port+0x84>)
 8015908:	881b      	ldrh	r3, [r3, #0]
 801590a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801590e:	4293      	cmp	r3, r2
 8015910:	d103      	bne.n	801591a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015912:	4b18      	ldr	r3, [pc, #96]	@ (8015974 <tcp_new_port+0x84>)
 8015914:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015918:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801591a:	2300      	movs	r3, #0
 801591c:	71fb      	strb	r3, [r7, #7]
 801591e:	e01e      	b.n	801595e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015920:	79fb      	ldrb	r3, [r7, #7]
 8015922:	4a15      	ldr	r2, [pc, #84]	@ (8015978 <tcp_new_port+0x88>)
 8015924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	603b      	str	r3, [r7, #0]
 801592c:	e011      	b.n	8015952 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	8ada      	ldrh	r2, [r3, #22]
 8015932:	4b10      	ldr	r3, [pc, #64]	@ (8015974 <tcp_new_port+0x84>)
 8015934:	881b      	ldrh	r3, [r3, #0]
 8015936:	429a      	cmp	r2, r3
 8015938:	d108      	bne.n	801594c <tcp_new_port+0x5c>
        n++;
 801593a:	88bb      	ldrh	r3, [r7, #4]
 801593c:	3301      	adds	r3, #1
 801593e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015940:	88bb      	ldrh	r3, [r7, #4]
 8015942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015946:	d3d8      	bcc.n	80158fa <tcp_new_port+0xa>
          return 0;
 8015948:	2300      	movs	r3, #0
 801594a:	e00d      	b.n	8015968 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	603b      	str	r3, [r7, #0]
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d1ea      	bne.n	801592e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015958:	79fb      	ldrb	r3, [r7, #7]
 801595a:	3301      	adds	r3, #1
 801595c:	71fb      	strb	r3, [r7, #7]
 801595e:	79fb      	ldrb	r3, [r7, #7]
 8015960:	2b03      	cmp	r3, #3
 8015962:	d9dd      	bls.n	8015920 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015964:	4b03      	ldr	r3, [pc, #12]	@ (8015974 <tcp_new_port+0x84>)
 8015966:	881b      	ldrh	r3, [r3, #0]
}
 8015968:	4618      	mov	r0, r3
 801596a:	370c      	adds	r7, #12
 801596c:	46bd      	mov	sp, r7
 801596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015972:	4770      	bx	lr
 8015974:	20000068 	.word	0x20000068
 8015978:	08026740 	.word	0x08026740

0801597c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801597c:	b5b0      	push	{r4, r5, r7, lr}
 801597e:	b090      	sub	sp, #64	@ 0x40
 8015980:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015982:	2300      	movs	r3, #0
 8015984:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015988:	4b95      	ldr	r3, [pc, #596]	@ (8015be0 <tcp_slowtmr+0x264>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	3301      	adds	r3, #1
 801598e:	4a94      	ldr	r2, [pc, #592]	@ (8015be0 <tcp_slowtmr+0x264>)
 8015990:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015992:	4b94      	ldr	r3, [pc, #592]	@ (8015be4 <tcp_slowtmr+0x268>)
 8015994:	781b      	ldrb	r3, [r3, #0]
 8015996:	3301      	adds	r3, #1
 8015998:	b2da      	uxtb	r2, r3
 801599a:	4b92      	ldr	r3, [pc, #584]	@ (8015be4 <tcp_slowtmr+0x268>)
 801599c:	701a      	strb	r2, [r3, #0]
 801599e:	e000      	b.n	80159a2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80159a0:	bf00      	nop
  prev = NULL;
 80159a2:	2300      	movs	r3, #0
 80159a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80159a6:	4b90      	ldr	r3, [pc, #576]	@ (8015be8 <tcp_slowtmr+0x26c>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80159ac:	e29d      	b.n	8015eea <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80159ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159b0:	7d1b      	ldrb	r3, [r3, #20]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d106      	bne.n	80159c4 <tcp_slowtmr+0x48>
 80159b6:	4b8d      	ldr	r3, [pc, #564]	@ (8015bec <tcp_slowtmr+0x270>)
 80159b8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80159bc:	498c      	ldr	r1, [pc, #560]	@ (8015bf0 <tcp_slowtmr+0x274>)
 80159be:	488d      	ldr	r0, [pc, #564]	@ (8015bf4 <tcp_slowtmr+0x278>)
 80159c0:	f00a fe68 	bl	8020694 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80159c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159c6:	7d1b      	ldrb	r3, [r3, #20]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d106      	bne.n	80159da <tcp_slowtmr+0x5e>
 80159cc:	4b87      	ldr	r3, [pc, #540]	@ (8015bec <tcp_slowtmr+0x270>)
 80159ce:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80159d2:	4989      	ldr	r1, [pc, #548]	@ (8015bf8 <tcp_slowtmr+0x27c>)
 80159d4:	4887      	ldr	r0, [pc, #540]	@ (8015bf4 <tcp_slowtmr+0x278>)
 80159d6:	f00a fe5d 	bl	8020694 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80159da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159dc:	7d1b      	ldrb	r3, [r3, #20]
 80159de:	2b0a      	cmp	r3, #10
 80159e0:	d106      	bne.n	80159f0 <tcp_slowtmr+0x74>
 80159e2:	4b82      	ldr	r3, [pc, #520]	@ (8015bec <tcp_slowtmr+0x270>)
 80159e4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80159e8:	4984      	ldr	r1, [pc, #528]	@ (8015bfc <tcp_slowtmr+0x280>)
 80159ea:	4882      	ldr	r0, [pc, #520]	@ (8015bf4 <tcp_slowtmr+0x278>)
 80159ec:	f00a fe52 	bl	8020694 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80159f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159f2:	7f9a      	ldrb	r2, [r3, #30]
 80159f4:	4b7b      	ldr	r3, [pc, #492]	@ (8015be4 <tcp_slowtmr+0x268>)
 80159f6:	781b      	ldrb	r3, [r3, #0]
 80159f8:	429a      	cmp	r2, r3
 80159fa:	d105      	bne.n	8015a08 <tcp_slowtmr+0x8c>
      prev = pcb;
 80159fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8015a06:	e270      	b.n	8015eea <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8015a08:	4b76      	ldr	r3, [pc, #472]	@ (8015be4 <tcp_slowtmr+0x268>)
 8015a0a:	781a      	ldrb	r2, [r3, #0]
 8015a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a0e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015a10:	2300      	movs	r3, #0
 8015a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8015a16:	2300      	movs	r3, #0
 8015a18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a1e:	7d1b      	ldrb	r3, [r3, #20]
 8015a20:	2b02      	cmp	r3, #2
 8015a22:	d10a      	bne.n	8015a3a <tcp_slowtmr+0xbe>
 8015a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015a2a:	2b05      	cmp	r3, #5
 8015a2c:	d905      	bls.n	8015a3a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a32:	3301      	adds	r3, #1
 8015a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8015a38:	e11e      	b.n	8015c78 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015a40:	2b0b      	cmp	r3, #11
 8015a42:	d905      	bls.n	8015a50 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a48:	3301      	adds	r3, #1
 8015a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015a4e:	e113      	b.n	8015c78 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a52:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d075      	beq.n	8015b46 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d006      	beq.n	8015a70 <tcp_slowtmr+0xf4>
 8015a62:	4b62      	ldr	r3, [pc, #392]	@ (8015bec <tcp_slowtmr+0x270>)
 8015a64:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015a68:	4965      	ldr	r1, [pc, #404]	@ (8015c00 <tcp_slowtmr+0x284>)
 8015a6a:	4862      	ldr	r0, [pc, #392]	@ (8015bf4 <tcp_slowtmr+0x278>)
 8015a6c:	f00a fe12 	bl	8020694 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d106      	bne.n	8015a86 <tcp_slowtmr+0x10a>
 8015a78:	4b5c      	ldr	r3, [pc, #368]	@ (8015bec <tcp_slowtmr+0x270>)
 8015a7a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015a7e:	4961      	ldr	r1, [pc, #388]	@ (8015c04 <tcp_slowtmr+0x288>)
 8015a80:	485c      	ldr	r0, [pc, #368]	@ (8015bf4 <tcp_slowtmr+0x278>)
 8015a82:	f00a fe07 	bl	8020694 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a88:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015a8c:	2b0b      	cmp	r3, #11
 8015a8e:	d905      	bls.n	8015a9c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a94:	3301      	adds	r3, #1
 8015a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015a9a:	e0ed      	b.n	8015c78 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a9e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015aa2:	3b01      	subs	r3, #1
 8015aa4:	4a58      	ldr	r2, [pc, #352]	@ (8015c08 <tcp_slowtmr+0x28c>)
 8015aa6:	5cd3      	ldrb	r3, [r2, r3]
 8015aa8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015ab0:	7c7a      	ldrb	r2, [r7, #17]
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	d907      	bls.n	8015ac6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8015ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ab8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015abc:	3301      	adds	r3, #1
 8015abe:	b2da      	uxtb	r2, r3
 8015ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ac2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8015ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ac8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015acc:	7c7a      	ldrb	r2, [r7, #17]
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	f200 80d2 	bhi.w	8015c78 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d108      	bne.n	8015af4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015ae2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015ae4:	f005 fa9c 	bl	801b020 <tcp_zero_window_probe>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d014      	beq.n	8015b18 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015aee:	2300      	movs	r3, #0
 8015af0:	623b      	str	r3, [r7, #32]
 8015af2:	e011      	b.n	8015b18 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015af6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015afa:	4619      	mov	r1, r3
 8015afc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015afe:	f004 f921 	bl	8019d44 <tcp_split_unsent_seg>
 8015b02:	4603      	mov	r3, r0
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d107      	bne.n	8015b18 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8015b08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b0a:	f004 fbc1 	bl	801a290 <tcp_output>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d101      	bne.n	8015b18 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015b14:	2300      	movs	r3, #0
 8015b16:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8015b18:	6a3b      	ldr	r3, [r7, #32]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	f000 80ac 	beq.w	8015c78 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b22:	2200      	movs	r2, #0
 8015b24:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b2a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015b2e:	2b06      	cmp	r3, #6
 8015b30:	f200 80a2 	bhi.w	8015c78 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b36:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	b2da      	uxtb	r2, r3
 8015b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b40:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015b44:	e098      	b.n	8015c78 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	db0f      	blt.n	8015b70 <tcp_slowtmr+0x1f4>
 8015b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b52:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015b56:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015b5a:	4293      	cmp	r3, r2
 8015b5c:	d008      	beq.n	8015b70 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015b64:	b29b      	uxth	r3, r3
 8015b66:	3301      	adds	r3, #1
 8015b68:	b29b      	uxth	r3, r3
 8015b6a:	b21a      	sxth	r2, r3
 8015b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b6e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b72:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8015b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b78:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	db7b      	blt.n	8015c78 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015b80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b82:	f004 fe85 	bl	801a890 <tcp_rexmit_rto_prepare>
 8015b86:	4603      	mov	r3, r0
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d007      	beq.n	8015b9c <tcp_slowtmr+0x220>
 8015b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d171      	bne.n	8015c78 <tcp_slowtmr+0x2fc>
 8015b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d06d      	beq.n	8015c78 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b9e:	7d1b      	ldrb	r3, [r3, #20]
 8015ba0:	2b02      	cmp	r3, #2
 8015ba2:	d03a      	beq.n	8015c1a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015baa:	2b0c      	cmp	r3, #12
 8015bac:	bf28      	it	cs
 8015bae:	230c      	movcs	r3, #12
 8015bb0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015bb8:	10db      	asrs	r3, r3, #3
 8015bba:	b21b      	sxth	r3, r3
 8015bbc:	461a      	mov	r2, r3
 8015bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015bc4:	4413      	add	r3, r2
 8015bc6:	7efa      	ldrb	r2, [r7, #27]
 8015bc8:	4910      	ldr	r1, [pc, #64]	@ (8015c0c <tcp_slowtmr+0x290>)
 8015bca:	5c8a      	ldrb	r2, [r1, r2]
 8015bcc:	4093      	lsls	r3, r2
 8015bce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8015bd6:	4293      	cmp	r3, r2
 8015bd8:	dc1a      	bgt.n	8015c10 <tcp_slowtmr+0x294>
 8015bda:	697b      	ldr	r3, [r7, #20]
 8015bdc:	b21a      	sxth	r2, r3
 8015bde:	e019      	b.n	8015c14 <tcp_slowtmr+0x298>
 8015be0:	2002d46c 	.word	0x2002d46c
 8015be4:	2002d482 	.word	0x2002d482
 8015be8:	2002d478 	.word	0x2002d478
 8015bec:	08023764 	.word	0x08023764
 8015bf0:	08023aa8 	.word	0x08023aa8
 8015bf4:	080237a8 	.word	0x080237a8
 8015bf8:	08023ad4 	.word	0x08023ad4
 8015bfc:	08023b00 	.word	0x08023b00
 8015c00:	08023b30 	.word	0x08023b30
 8015c04:	08023b64 	.word	0x08023b64
 8015c08:	08026738 	.word	0x08026738
 8015c0c:	08026728 	.word	0x08026728
 8015c10:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8015c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	bf28      	it	cs
 8015c30:	4613      	movcs	r3, r2
 8015c32:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015c34:	8a7b      	ldrh	r3, [r7, #18]
 8015c36:	085b      	lsrs	r3, r3, #1
 8015c38:	b29a      	uxth	r2, r3
 8015c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c4a:	005b      	lsls	r3, r3, #1
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d206      	bcs.n	8015c60 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c56:	005b      	lsls	r3, r3, #1
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c5c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c62:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c66:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8015c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015c72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015c74:	f004 fe86 	bl	801a984 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c7a:	7d1b      	ldrb	r3, [r3, #20]
 8015c7c:	2b06      	cmp	r3, #6
 8015c7e:	d111      	bne.n	8015ca4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c82:	8b5b      	ldrh	r3, [r3, #26]
 8015c84:	f003 0310 	and.w	r3, r3, #16
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d00b      	beq.n	8015ca4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015c8c:	4b9c      	ldr	r3, [pc, #624]	@ (8015f00 <tcp_slowtmr+0x584>)
 8015c8e:	681a      	ldr	r2, [r3, #0]
 8015c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c92:	6a1b      	ldr	r3, [r3, #32]
 8015c94:	1ad3      	subs	r3, r2, r3
 8015c96:	2b28      	cmp	r3, #40	@ 0x28
 8015c98:	d904      	bls.n	8015ca4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8015c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ca6:	7a5b      	ldrb	r3, [r3, #9]
 8015ca8:	f003 0308 	and.w	r3, r3, #8
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d04a      	beq.n	8015d46 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015cb4:	2b04      	cmp	r3, #4
 8015cb6:	d003      	beq.n	8015cc0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015cbc:	2b07      	cmp	r3, #7
 8015cbe:	d142      	bne.n	8015d46 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8015f00 <tcp_slowtmr+0x584>)
 8015cc2:	681a      	ldr	r2, [r3, #0]
 8015cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc6:	6a1b      	ldr	r3, [r3, #32]
 8015cc8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ccc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8015f04 <tcp_slowtmr+0x588>)
 8015cd2:	440b      	add	r3, r1
 8015cd4:	498c      	ldr	r1, [pc, #560]	@ (8015f08 <tcp_slowtmr+0x58c>)
 8015cd6:	fba1 1303 	umull	r1, r3, r1, r3
 8015cda:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d90a      	bls.n	8015cf6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ce4:	3301      	adds	r3, #1
 8015ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8015cea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015cee:	3301      	adds	r3, #1
 8015cf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015cf4:	e027      	b.n	8015d46 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015cf6:	4b82      	ldr	r3, [pc, #520]	@ (8015f00 <tcp_slowtmr+0x584>)
 8015cf8:	681a      	ldr	r2, [r3, #0]
 8015cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cfc:	6a1b      	ldr	r3, [r3, #32]
 8015cfe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d02:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d08:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8015f0c <tcp_slowtmr+0x590>)
 8015d10:	fb00 f303 	mul.w	r3, r0, r3
 8015d14:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015d16:	497c      	ldr	r1, [pc, #496]	@ (8015f08 <tcp_slowtmr+0x58c>)
 8015d18:	fba1 1303 	umull	r1, r3, r1, r3
 8015d1c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d911      	bls.n	8015d46 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015d22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015d24:	f005 f93c 	bl	801afa0 <tcp_keepalive>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015d2e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d107      	bne.n	8015d46 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8015d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d38:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015d3c:	3301      	adds	r3, #1
 8015d3e:	b2da      	uxtb	r2, r3
 8015d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d42:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8015d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d011      	beq.n	8015d72 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8015f00 <tcp_slowtmr+0x584>)
 8015d50:	681a      	ldr	r2, [r3, #0]
 8015d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d54:	6a1b      	ldr	r3, [r3, #32]
 8015d56:	1ad2      	subs	r2, r2, r3
 8015d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d5a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015d5e:	4619      	mov	r1, r3
 8015d60:	460b      	mov	r3, r1
 8015d62:	005b      	lsls	r3, r3, #1
 8015d64:	440b      	add	r3, r1
 8015d66:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d302      	bcc.n	8015d72 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8015d6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015d6e:	f000 fedb 	bl	8016b28 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8015d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d74:	7d1b      	ldrb	r3, [r3, #20]
 8015d76:	2b03      	cmp	r3, #3
 8015d78:	d10b      	bne.n	8015d92 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015d7a:	4b61      	ldr	r3, [pc, #388]	@ (8015f00 <tcp_slowtmr+0x584>)
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d80:	6a1b      	ldr	r3, [r3, #32]
 8015d82:	1ad3      	subs	r3, r2, r3
 8015d84:	2b28      	cmp	r3, #40	@ 0x28
 8015d86:	d904      	bls.n	8015d92 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8015d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8015d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d94:	7d1b      	ldrb	r3, [r3, #20]
 8015d96:	2b09      	cmp	r3, #9
 8015d98:	d10b      	bne.n	8015db2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015d9a:	4b59      	ldr	r3, [pc, #356]	@ (8015f00 <tcp_slowtmr+0x584>)
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da0:	6a1b      	ldr	r3, [r3, #32]
 8015da2:	1ad3      	subs	r3, r2, r3
 8015da4:	2bf0      	cmp	r3, #240	@ 0xf0
 8015da6:	d904      	bls.n	8015db2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015dac:	3301      	adds	r3, #1
 8015dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8015db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d060      	beq.n	8015e7c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8015dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015dc0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8015dc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015dc4:	f000 fcf6 	bl	80167b4 <tcp_pcb_purge>
      if (prev != NULL) {
 8015dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d010      	beq.n	8015df0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015dce:	4b50      	ldr	r3, [pc, #320]	@ (8015f10 <tcp_slowtmr+0x594>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d106      	bne.n	8015de6 <tcp_slowtmr+0x46a>
 8015dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8015f14 <tcp_slowtmr+0x598>)
 8015dda:	f240 526d 	movw	r2, #1389	@ 0x56d
 8015dde:	494e      	ldr	r1, [pc, #312]	@ (8015f18 <tcp_slowtmr+0x59c>)
 8015de0:	484e      	ldr	r0, [pc, #312]	@ (8015f1c <tcp_slowtmr+0x5a0>)
 8015de2:	f00a fc57 	bl	8020694 <iprintf>
        prev->next = pcb->next;
 8015de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de8:	68da      	ldr	r2, [r3, #12]
 8015dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dec:	60da      	str	r2, [r3, #12]
 8015dee:	e00f      	b.n	8015e10 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015df0:	4b47      	ldr	r3, [pc, #284]	@ (8015f10 <tcp_slowtmr+0x594>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015df6:	429a      	cmp	r2, r3
 8015df8:	d006      	beq.n	8015e08 <tcp_slowtmr+0x48c>
 8015dfa:	4b46      	ldr	r3, [pc, #280]	@ (8015f14 <tcp_slowtmr+0x598>)
 8015dfc:	f240 5271 	movw	r2, #1393	@ 0x571
 8015e00:	4947      	ldr	r1, [pc, #284]	@ (8015f20 <tcp_slowtmr+0x5a4>)
 8015e02:	4846      	ldr	r0, [pc, #280]	@ (8015f1c <tcp_slowtmr+0x5a0>)
 8015e04:	f00a fc46 	bl	8020694 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e0a:	68db      	ldr	r3, [r3, #12]
 8015e0c:	4a40      	ldr	r2, [pc, #256]	@ (8015f10 <tcp_slowtmr+0x594>)
 8015e0e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015e10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d013      	beq.n	8015e40 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e1a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e1e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015e20:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e24:	3304      	adds	r3, #4
 8015e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e28:	8ad2      	ldrh	r2, [r2, #22]
 8015e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015e2c:	8b09      	ldrh	r1, [r1, #24]
 8015e2e:	9102      	str	r1, [sp, #8]
 8015e30:	9201      	str	r2, [sp, #4]
 8015e32:	9300      	str	r3, [sp, #0]
 8015e34:	462b      	mov	r3, r5
 8015e36:	4622      	mov	r2, r4
 8015e38:	4601      	mov	r1, r0
 8015e3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e3c:	f004 fffc 	bl	801ae38 <tcp_rst>
      err_arg = pcb->callback_arg;
 8015e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e42:	691b      	ldr	r3, [r3, #16]
 8015e44:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e48:	7d1b      	ldrb	r3, [r3, #20]
 8015e4a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e52:	68db      	ldr	r3, [r3, #12]
 8015e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015e56:	6838      	ldr	r0, [r7, #0]
 8015e58:	f7ff f8b8 	bl	8014fcc <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015e5c:	4b31      	ldr	r3, [pc, #196]	@ (8015f24 <tcp_slowtmr+0x5a8>)
 8015e5e:	2200      	movs	r2, #0
 8015e60:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d004      	beq.n	8015e72 <tcp_slowtmr+0x4f6>
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	f06f 010c 	mvn.w	r1, #12
 8015e6e:	68b8      	ldr	r0, [r7, #8]
 8015e70:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015e72:	4b2c      	ldr	r3, [pc, #176]	@ (8015f24 <tcp_slowtmr+0x5a8>)
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d037      	beq.n	8015eea <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8015e7a:	e592      	b.n	80159a2 <tcp_slowtmr+0x26>
      prev = pcb;
 8015e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8015e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e88:	7f1b      	ldrb	r3, [r3, #28]
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	b2da      	uxtb	r2, r3
 8015e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e90:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e94:	7f1a      	ldrb	r2, [r3, #28]
 8015e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e98:	7f5b      	ldrb	r3, [r3, #29]
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	d325      	bcc.n	8015eea <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8015f24 <tcp_slowtmr+0x5a8>)
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00b      	beq.n	8015ecc <tcp_slowtmr+0x550>
 8015eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ebc:	6912      	ldr	r2, [r2, #16]
 8015ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015ec0:	4610      	mov	r0, r2
 8015ec2:	4798      	blx	r3
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015eca:	e002      	b.n	8015ed2 <tcp_slowtmr+0x556>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8015ed2:	4b14      	ldr	r3, [pc, #80]	@ (8015f24 <tcp_slowtmr+0x5a8>)
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	f47f ad62 	bne.w	80159a0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015edc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d102      	bne.n	8015eea <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ee6:	f004 f9d3 	bl	801a290 <tcp_output>
  while (pcb != NULL) {
 8015eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	f47f ad5e 	bne.w	80159ae <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8015ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8015f28 <tcp_slowtmr+0x5ac>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015efc:	e069      	b.n	8015fd2 <tcp_slowtmr+0x656>
 8015efe:	bf00      	nop
 8015f00:	2002d46c 	.word	0x2002d46c
 8015f04:	000a4cb8 	.word	0x000a4cb8
 8015f08:	10624dd3 	.word	0x10624dd3
 8015f0c:	000124f8 	.word	0x000124f8
 8015f10:	2002d478 	.word	0x2002d478
 8015f14:	08023764 	.word	0x08023764
 8015f18:	08023b9c 	.word	0x08023b9c
 8015f1c:	080237a8 	.word	0x080237a8
 8015f20:	08023bc8 	.word	0x08023bc8
 8015f24:	2002d480 	.word	0x2002d480
 8015f28:	2002d47c 	.word	0x2002d47c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f2e:	7d1b      	ldrb	r3, [r3, #20]
 8015f30:	2b0a      	cmp	r3, #10
 8015f32:	d006      	beq.n	8015f42 <tcp_slowtmr+0x5c6>
 8015f34:	4b2b      	ldr	r3, [pc, #172]	@ (8015fe4 <tcp_slowtmr+0x668>)
 8015f36:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8015f3a:	492b      	ldr	r1, [pc, #172]	@ (8015fe8 <tcp_slowtmr+0x66c>)
 8015f3c:	482b      	ldr	r0, [pc, #172]	@ (8015fec <tcp_slowtmr+0x670>)
 8015f3e:	f00a fba9 	bl	8020694 <iprintf>
    pcb_remove = 0;
 8015f42:	2300      	movs	r3, #0
 8015f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015f48:	4b29      	ldr	r3, [pc, #164]	@ (8015ff0 <tcp_slowtmr+0x674>)
 8015f4a:	681a      	ldr	r2, [r3, #0]
 8015f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f4e:	6a1b      	ldr	r3, [r3, #32]
 8015f50:	1ad3      	subs	r3, r2, r3
 8015f52:	2bf0      	cmp	r3, #240	@ 0xf0
 8015f54:	d904      	bls.n	8015f60 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8015f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d02f      	beq.n	8015fc8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015f68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f6a:	f000 fc23 	bl	80167b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d010      	beq.n	8015f96 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015f74:	4b1f      	ldr	r3, [pc, #124]	@ (8015ff4 <tcp_slowtmr+0x678>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d106      	bne.n	8015f8c <tcp_slowtmr+0x610>
 8015f7e:	4b19      	ldr	r3, [pc, #100]	@ (8015fe4 <tcp_slowtmr+0x668>)
 8015f80:	f240 52af 	movw	r2, #1455	@ 0x5af
 8015f84:	491c      	ldr	r1, [pc, #112]	@ (8015ff8 <tcp_slowtmr+0x67c>)
 8015f86:	4819      	ldr	r0, [pc, #100]	@ (8015fec <tcp_slowtmr+0x670>)
 8015f88:	f00a fb84 	bl	8020694 <iprintf>
        prev->next = pcb->next;
 8015f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f8e:	68da      	ldr	r2, [r3, #12]
 8015f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f92:	60da      	str	r2, [r3, #12]
 8015f94:	e00f      	b.n	8015fb6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015f96:	4b17      	ldr	r3, [pc, #92]	@ (8015ff4 <tcp_slowtmr+0x678>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d006      	beq.n	8015fae <tcp_slowtmr+0x632>
 8015fa0:	4b10      	ldr	r3, [pc, #64]	@ (8015fe4 <tcp_slowtmr+0x668>)
 8015fa2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8015fa6:	4915      	ldr	r1, [pc, #84]	@ (8015ffc <tcp_slowtmr+0x680>)
 8015fa8:	4810      	ldr	r0, [pc, #64]	@ (8015fec <tcp_slowtmr+0x670>)
 8015faa:	f00a fb73 	bl	8020694 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	4a10      	ldr	r2, [pc, #64]	@ (8015ff4 <tcp_slowtmr+0x678>)
 8015fb4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015fc0:	69f8      	ldr	r0, [r7, #28]
 8015fc2:	f7ff f803 	bl	8014fcc <tcp_free>
 8015fc6:	e004      	b.n	8015fd2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8015fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fce:	68db      	ldr	r3, [r3, #12]
 8015fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d1a9      	bne.n	8015f2c <tcp_slowtmr+0x5b0>
    }
  }
}
 8015fd8:	bf00      	nop
 8015fda:	bf00      	nop
 8015fdc:	3730      	adds	r7, #48	@ 0x30
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	08023764 	.word	0x08023764
 8015fe8:	08023bf4 	.word	0x08023bf4
 8015fec:	080237a8 	.word	0x080237a8
 8015ff0:	2002d46c 	.word	0x2002d46c
 8015ff4:	2002d47c 	.word	0x2002d47c
 8015ff8:	08023c24 	.word	0x08023c24
 8015ffc:	08023c4c 	.word	0x08023c4c

08016000 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b082      	sub	sp, #8
 8016004:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016006:	4b2d      	ldr	r3, [pc, #180]	@ (80160bc <tcp_fasttmr+0xbc>)
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	3301      	adds	r3, #1
 801600c:	b2da      	uxtb	r2, r3
 801600e:	4b2b      	ldr	r3, [pc, #172]	@ (80160bc <tcp_fasttmr+0xbc>)
 8016010:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016012:	4b2b      	ldr	r3, [pc, #172]	@ (80160c0 <tcp_fasttmr+0xc0>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016018:	e048      	b.n	80160ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	7f9a      	ldrb	r2, [r3, #30]
 801601e:	4b27      	ldr	r3, [pc, #156]	@ (80160bc <tcp_fasttmr+0xbc>)
 8016020:	781b      	ldrb	r3, [r3, #0]
 8016022:	429a      	cmp	r2, r3
 8016024:	d03f      	beq.n	80160a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016026:	4b25      	ldr	r3, [pc, #148]	@ (80160bc <tcp_fasttmr+0xbc>)
 8016028:	781a      	ldrb	r2, [r3, #0]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	8b5b      	ldrh	r3, [r3, #26]
 8016032:	f003 0301 	and.w	r3, r3, #1
 8016036:	2b00      	cmp	r3, #0
 8016038:	d010      	beq.n	801605c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	8b5b      	ldrh	r3, [r3, #26]
 801603e:	f043 0302 	orr.w	r3, r3, #2
 8016042:	b29a      	uxth	r2, r3
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f004 f921 	bl	801a290 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	8b5b      	ldrh	r3, [r3, #26]
 8016052:	f023 0303 	bic.w	r3, r3, #3
 8016056:	b29a      	uxth	r2, r3
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	8b5b      	ldrh	r3, [r3, #26]
 8016060:	f003 0308 	and.w	r3, r3, #8
 8016064:	2b00      	cmp	r3, #0
 8016066:	d009      	beq.n	801607c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	8b5b      	ldrh	r3, [r3, #26]
 801606c:	f023 0308 	bic.w	r3, r3, #8
 8016070:	b29a      	uxth	r2, r3
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f7ff f93c 	bl	80152f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	68db      	ldr	r3, [r3, #12]
 8016080:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016086:	2b00      	cmp	r3, #0
 8016088:	d00a      	beq.n	80160a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801608a:	4b0e      	ldr	r3, [pc, #56]	@ (80160c4 <tcp_fasttmr+0xc4>)
 801608c:	2200      	movs	r2, #0
 801608e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f000 f819 	bl	80160c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016096:	4b0b      	ldr	r3, [pc, #44]	@ (80160c4 <tcp_fasttmr+0xc4>)
 8016098:	781b      	ldrb	r3, [r3, #0]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d000      	beq.n	80160a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801609e:	e7b8      	b.n	8016012 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	607b      	str	r3, [r7, #4]
 80160a4:	e002      	b.n	80160ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	68db      	ldr	r3, [r3, #12]
 80160aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1b3      	bne.n	801601a <tcp_fasttmr+0x1a>
    }
  }
}
 80160b2:	bf00      	nop
 80160b4:	bf00      	nop
 80160b6:	3708      	adds	r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	2002d482 	.word	0x2002d482
 80160c0:	2002d478 	.word	0x2002d478
 80160c4:	2002d480 	.word	0x2002d480

080160c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80160c8:	b590      	push	{r4, r7, lr}
 80160ca:	b085      	sub	sp, #20
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d109      	bne.n	80160ea <tcp_process_refused_data+0x22>
 80160d6:	4b37      	ldr	r3, [pc, #220]	@ (80161b4 <tcp_process_refused_data+0xec>)
 80160d8:	f240 6209 	movw	r2, #1545	@ 0x609
 80160dc:	4936      	ldr	r1, [pc, #216]	@ (80161b8 <tcp_process_refused_data+0xf0>)
 80160de:	4837      	ldr	r0, [pc, #220]	@ (80161bc <tcp_process_refused_data+0xf4>)
 80160e0:	f00a fad8 	bl	8020694 <iprintf>
 80160e4:	f06f 030f 	mvn.w	r3, #15
 80160e8:	e060      	b.n	80161ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80160ee:	7b5b      	ldrb	r3, [r3, #13]
 80160f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80160f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2200      	movs	r2, #0
 80160fc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016104:	2b00      	cmp	r3, #0
 8016106:	d00b      	beq.n	8016120 <tcp_process_refused_data+0x58>
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	6918      	ldr	r0, [r3, #16]
 8016112:	2300      	movs	r3, #0
 8016114:	68ba      	ldr	r2, [r7, #8]
 8016116:	6879      	ldr	r1, [r7, #4]
 8016118:	47a0      	blx	r4
 801611a:	4603      	mov	r3, r0
 801611c:	73fb      	strb	r3, [r7, #15]
 801611e:	e007      	b.n	8016130 <tcp_process_refused_data+0x68>
 8016120:	2300      	movs	r3, #0
 8016122:	68ba      	ldr	r2, [r7, #8]
 8016124:	6879      	ldr	r1, [r7, #4]
 8016126:	2000      	movs	r0, #0
 8016128:	f000 f8a4 	bl	8016274 <tcp_recv_null>
 801612c:	4603      	mov	r3, r0
 801612e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d12a      	bne.n	801618e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016138:	7bbb      	ldrb	r3, [r7, #14]
 801613a:	f003 0320 	and.w	r3, r3, #32
 801613e:	2b00      	cmp	r3, #0
 8016140:	d033      	beq.n	80161aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016146:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801614a:	d005      	beq.n	8016158 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016150:	3301      	adds	r3, #1
 8016152:	b29a      	uxth	r2, r3
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00b      	beq.n	801617a <tcp_process_refused_data+0xb2>
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	6918      	ldr	r0, [r3, #16]
 801616c:	2300      	movs	r3, #0
 801616e:	2200      	movs	r2, #0
 8016170:	6879      	ldr	r1, [r7, #4]
 8016172:	47a0      	blx	r4
 8016174:	4603      	mov	r3, r0
 8016176:	73fb      	strb	r3, [r7, #15]
 8016178:	e001      	b.n	801617e <tcp_process_refused_data+0xb6>
 801617a:	2300      	movs	r3, #0
 801617c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801617e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016182:	f113 0f0d 	cmn.w	r3, #13
 8016186:	d110      	bne.n	80161aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016188:	f06f 030c 	mvn.w	r3, #12
 801618c:	e00e      	b.n	80161ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801618e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016192:	f113 0f0d 	cmn.w	r3, #13
 8016196:	d102      	bne.n	801619e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016198:	f06f 030c 	mvn.w	r3, #12
 801619c:	e006      	b.n	80161ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	68ba      	ldr	r2, [r7, #8]
 80161a2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80161a4:	f06f 0304 	mvn.w	r3, #4
 80161a8:	e000      	b.n	80161ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80161aa:	2300      	movs	r3, #0
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3714      	adds	r7, #20
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd90      	pop	{r4, r7, pc}
 80161b4:	08023764 	.word	0x08023764
 80161b8:	08023c74 	.word	0x08023c74
 80161bc:	080237a8 	.word	0x080237a8

080161c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b084      	sub	sp, #16
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80161c8:	e007      	b.n	80161da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f000 f80a 	bl	80161ea <tcp_seg_free>
    seg = next;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d1f4      	bne.n	80161ca <tcp_segs_free+0xa>
  }
}
 80161e0:	bf00      	nop
 80161e2:	bf00      	nop
 80161e4:	3710      	adds	r7, #16
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}

080161ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80161ea:	b580      	push	{r7, lr}
 80161ec:	b082      	sub	sp, #8
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d00c      	beq.n	8016212 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	685b      	ldr	r3, [r3, #4]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d004      	beq.n	801620a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	685b      	ldr	r3, [r3, #4]
 8016204:	4618      	mov	r0, r3
 8016206:	f7fe fbe9 	bl	80149dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801620a:	6879      	ldr	r1, [r7, #4]
 801620c:	2003      	movs	r0, #3
 801620e:	f7fd fbff 	bl	8013a10 <memp_free>
  }
}
 8016212:	bf00      	nop
 8016214:	3708      	adds	r7, #8
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}
	...

0801621c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b084      	sub	sp, #16
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d106      	bne.n	8016238 <tcp_seg_copy+0x1c>
 801622a:	4b0f      	ldr	r3, [pc, #60]	@ (8016268 <tcp_seg_copy+0x4c>)
 801622c:	f240 6282 	movw	r2, #1666	@ 0x682
 8016230:	490e      	ldr	r1, [pc, #56]	@ (801626c <tcp_seg_copy+0x50>)
 8016232:	480f      	ldr	r0, [pc, #60]	@ (8016270 <tcp_seg_copy+0x54>)
 8016234:	f00a fa2e 	bl	8020694 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016238:	2003      	movs	r0, #3
 801623a:	f7fd fb6d 	bl	8013918 <memp_malloc>
 801623e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d101      	bne.n	801624a <tcp_seg_copy+0x2e>
    return NULL;
 8016246:	2300      	movs	r3, #0
 8016248:	e00a      	b.n	8016260 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801624a:	2214      	movs	r2, #20
 801624c:	6879      	ldr	r1, [r7, #4]
 801624e:	68f8      	ldr	r0, [r7, #12]
 8016250:	f00a fc53 	bl	8020afa <memcpy>
  pbuf_ref(cseg->p);
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	685b      	ldr	r3, [r3, #4]
 8016258:	4618      	mov	r0, r3
 801625a:	f7fe fc7d 	bl	8014b58 <pbuf_ref>
  return cseg;
 801625e:	68fb      	ldr	r3, [r7, #12]
}
 8016260:	4618      	mov	r0, r3
 8016262:	3710      	adds	r7, #16
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}
 8016268:	08023764 	.word	0x08023764
 801626c:	08023cb8 	.word	0x08023cb8
 8016270:	080237a8 	.word	0x080237a8

08016274 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b084      	sub	sp, #16
 8016278:	af00      	add	r7, sp, #0
 801627a:	60f8      	str	r0, [r7, #12]
 801627c:	60b9      	str	r1, [r7, #8]
 801627e:	607a      	str	r2, [r7, #4]
 8016280:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d109      	bne.n	801629c <tcp_recv_null+0x28>
 8016288:	4b12      	ldr	r3, [pc, #72]	@ (80162d4 <tcp_recv_null+0x60>)
 801628a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801628e:	4912      	ldr	r1, [pc, #72]	@ (80162d8 <tcp_recv_null+0x64>)
 8016290:	4812      	ldr	r0, [pc, #72]	@ (80162dc <tcp_recv_null+0x68>)
 8016292:	f00a f9ff 	bl	8020694 <iprintf>
 8016296:	f06f 030f 	mvn.w	r3, #15
 801629a:	e016      	b.n	80162ca <tcp_recv_null+0x56>

  if (p != NULL) {
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d009      	beq.n	80162b6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	891b      	ldrh	r3, [r3, #8]
 80162a6:	4619      	mov	r1, r3
 80162a8:	68b8      	ldr	r0, [r7, #8]
 80162aa:	f7ff fad1 	bl	8015850 <tcp_recved>
    pbuf_free(p);
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f7fe fb94 	bl	80149dc <pbuf_free>
 80162b4:	e008      	b.n	80162c8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80162b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d104      	bne.n	80162c8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80162be:	68b8      	ldr	r0, [r7, #8]
 80162c0:	f7ff f882 	bl	80153c8 <tcp_close>
 80162c4:	4603      	mov	r3, r0
 80162c6:	e000      	b.n	80162ca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80162c8:	2300      	movs	r3, #0
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3710      	adds	r7, #16
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	08023764 	.word	0x08023764
 80162d8:	08023cd4 	.word	0x08023cd4
 80162dc:	080237a8 	.word	0x080237a8

080162e0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b086      	sub	sp, #24
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	4603      	mov	r3, r0
 80162e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80162ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	db01      	blt.n	80162f6 <tcp_kill_prio+0x16>
 80162f2:	79fb      	ldrb	r3, [r7, #7]
 80162f4:	e000      	b.n	80162f8 <tcp_kill_prio+0x18>
 80162f6:	237f      	movs	r3, #127	@ 0x7f
 80162f8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80162fa:	7afb      	ldrb	r3, [r7, #11]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d034      	beq.n	801636a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016300:	7afb      	ldrb	r3, [r7, #11]
 8016302:	3b01      	subs	r3, #1
 8016304:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016306:	2300      	movs	r3, #0
 8016308:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801630a:	2300      	movs	r3, #0
 801630c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801630e:	4b19      	ldr	r3, [pc, #100]	@ (8016374 <tcp_kill_prio+0x94>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	617b      	str	r3, [r7, #20]
 8016314:	e01f      	b.n	8016356 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016316:	697b      	ldr	r3, [r7, #20]
 8016318:	7d5b      	ldrb	r3, [r3, #21]
 801631a:	7afa      	ldrb	r2, [r7, #11]
 801631c:	429a      	cmp	r2, r3
 801631e:	d80c      	bhi.n	801633a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016324:	7afa      	ldrb	r2, [r7, #11]
 8016326:	429a      	cmp	r2, r3
 8016328:	d112      	bne.n	8016350 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801632a:	4b13      	ldr	r3, [pc, #76]	@ (8016378 <tcp_kill_prio+0x98>)
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	6a1b      	ldr	r3, [r3, #32]
 8016332:	1ad3      	subs	r3, r2, r3
 8016334:	68fa      	ldr	r2, [r7, #12]
 8016336:	429a      	cmp	r2, r3
 8016338:	d80a      	bhi.n	8016350 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801633a:	4b0f      	ldr	r3, [pc, #60]	@ (8016378 <tcp_kill_prio+0x98>)
 801633c:	681a      	ldr	r2, [r3, #0]
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	6a1b      	ldr	r3, [r3, #32]
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016346:	697b      	ldr	r3, [r7, #20]
 8016348:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	7d5b      	ldrb	r3, [r3, #21]
 801634e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	68db      	ldr	r3, [r3, #12]
 8016354:	617b      	str	r3, [r7, #20]
 8016356:	697b      	ldr	r3, [r7, #20]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d1dc      	bne.n	8016316 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801635c:	693b      	ldr	r3, [r7, #16]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d004      	beq.n	801636c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016362:	6938      	ldr	r0, [r7, #16]
 8016364:	f7ff f976 	bl	8015654 <tcp_abort>
 8016368:	e000      	b.n	801636c <tcp_kill_prio+0x8c>
    return;
 801636a:	bf00      	nop
  }
}
 801636c:	3718      	adds	r7, #24
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	2002d478 	.word	0x2002d478
 8016378:	2002d46c 	.word	0x2002d46c

0801637c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b086      	sub	sp, #24
 8016380:	af00      	add	r7, sp, #0
 8016382:	4603      	mov	r3, r0
 8016384:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016386:	79fb      	ldrb	r3, [r7, #7]
 8016388:	2b08      	cmp	r3, #8
 801638a:	d009      	beq.n	80163a0 <tcp_kill_state+0x24>
 801638c:	79fb      	ldrb	r3, [r7, #7]
 801638e:	2b09      	cmp	r3, #9
 8016390:	d006      	beq.n	80163a0 <tcp_kill_state+0x24>
 8016392:	4b1a      	ldr	r3, [pc, #104]	@ (80163fc <tcp_kill_state+0x80>)
 8016394:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8016398:	4919      	ldr	r1, [pc, #100]	@ (8016400 <tcp_kill_state+0x84>)
 801639a:	481a      	ldr	r0, [pc, #104]	@ (8016404 <tcp_kill_state+0x88>)
 801639c:	f00a f97a 	bl	8020694 <iprintf>

  inactivity = 0;
 80163a0:	2300      	movs	r3, #0
 80163a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80163a4:	2300      	movs	r3, #0
 80163a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80163a8:	4b17      	ldr	r3, [pc, #92]	@ (8016408 <tcp_kill_state+0x8c>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	617b      	str	r3, [r7, #20]
 80163ae:	e017      	b.n	80163e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	7d1b      	ldrb	r3, [r3, #20]
 80163b4:	79fa      	ldrb	r2, [r7, #7]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d10f      	bne.n	80163da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80163ba:	4b14      	ldr	r3, [pc, #80]	@ (801640c <tcp_kill_state+0x90>)
 80163bc:	681a      	ldr	r2, [r3, #0]
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	6a1b      	ldr	r3, [r3, #32]
 80163c2:	1ad3      	subs	r3, r2, r3
 80163c4:	68fa      	ldr	r2, [r7, #12]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d807      	bhi.n	80163da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80163ca:	4b10      	ldr	r3, [pc, #64]	@ (801640c <tcp_kill_state+0x90>)
 80163cc:	681a      	ldr	r2, [r3, #0]
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	6a1b      	ldr	r3, [r3, #32]
 80163d2:	1ad3      	subs	r3, r2, r3
 80163d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	68db      	ldr	r3, [r3, #12]
 80163de:	617b      	str	r3, [r7, #20]
 80163e0:	697b      	ldr	r3, [r7, #20]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d1e4      	bne.n	80163b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80163e6:	693b      	ldr	r3, [r7, #16]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d003      	beq.n	80163f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80163ec:	2100      	movs	r1, #0
 80163ee:	6938      	ldr	r0, [r7, #16]
 80163f0:	f7ff f872 	bl	80154d8 <tcp_abandon>
  }
}
 80163f4:	bf00      	nop
 80163f6:	3718      	adds	r7, #24
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}
 80163fc:	08023764 	.word	0x08023764
 8016400:	08023cf0 	.word	0x08023cf0
 8016404:	080237a8 	.word	0x080237a8
 8016408:	2002d478 	.word	0x2002d478
 801640c:	2002d46c 	.word	0x2002d46c

08016410 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b084      	sub	sp, #16
 8016414:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016416:	2300      	movs	r3, #0
 8016418:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801641a:	2300      	movs	r3, #0
 801641c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801641e:	4b12      	ldr	r3, [pc, #72]	@ (8016468 <tcp_kill_timewait+0x58>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	60fb      	str	r3, [r7, #12]
 8016424:	e012      	b.n	801644c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016426:	4b11      	ldr	r3, [pc, #68]	@ (801646c <tcp_kill_timewait+0x5c>)
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	6a1b      	ldr	r3, [r3, #32]
 801642e:	1ad3      	subs	r3, r2, r3
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	429a      	cmp	r2, r3
 8016434:	d807      	bhi.n	8016446 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016436:	4b0d      	ldr	r3, [pc, #52]	@ (801646c <tcp_kill_timewait+0x5c>)
 8016438:	681a      	ldr	r2, [r3, #0]
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	6a1b      	ldr	r3, [r3, #32]
 801643e:	1ad3      	subs	r3, r2, r3
 8016440:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	68db      	ldr	r3, [r3, #12]
 801644a:	60fb      	str	r3, [r7, #12]
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d1e9      	bne.n	8016426 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d002      	beq.n	801645e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016458:	68b8      	ldr	r0, [r7, #8]
 801645a:	f7ff f8fb 	bl	8015654 <tcp_abort>
  }
}
 801645e:	bf00      	nop
 8016460:	3710      	adds	r7, #16
 8016462:	46bd      	mov	sp, r7
 8016464:	bd80      	pop	{r7, pc}
 8016466:	bf00      	nop
 8016468:	2002d47c 	.word	0x2002d47c
 801646c:	2002d46c 	.word	0x2002d46c

08016470 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016476:	4b10      	ldr	r3, [pc, #64]	@ (80164b8 <tcp_handle_closepend+0x48>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801647c:	e014      	b.n	80164a8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	68db      	ldr	r3, [r3, #12]
 8016482:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	8b5b      	ldrh	r3, [r3, #26]
 8016488:	f003 0308 	and.w	r3, r3, #8
 801648c:	2b00      	cmp	r3, #0
 801648e:	d009      	beq.n	80164a4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	8b5b      	ldrh	r3, [r3, #26]
 8016494:	f023 0308 	bic.w	r3, r3, #8
 8016498:	b29a      	uxth	r2, r3
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801649e:	6878      	ldr	r0, [r7, #4]
 80164a0:	f7fe ff28 	bl	80152f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d1e7      	bne.n	801647e <tcp_handle_closepend+0xe>
  }
}
 80164ae:	bf00      	nop
 80164b0:	bf00      	nop
 80164b2:	3708      	adds	r7, #8
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	2002d478 	.word	0x2002d478

080164bc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b084      	sub	sp, #16
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	4603      	mov	r3, r0
 80164c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80164c6:	2001      	movs	r0, #1
 80164c8:	f7fd fa26 	bl	8013918 <memp_malloc>
 80164cc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d14e      	bne.n	8016572 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80164d4:	f7ff ffcc 	bl	8016470 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80164d8:	f7ff ff9a 	bl	8016410 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80164dc:	2001      	movs	r0, #1
 80164de:	f7fd fa1b 	bl	8013918 <memp_malloc>
 80164e2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d139      	bne.n	801655e <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80164ea:	2009      	movs	r0, #9
 80164ec:	f7ff ff46 	bl	801637c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80164f0:	2001      	movs	r0, #1
 80164f2:	f7fd fa11 	bl	8013918 <memp_malloc>
 80164f6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d125      	bne.n	801654a <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80164fe:	2008      	movs	r0, #8
 8016500:	f7ff ff3c 	bl	801637c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016504:	2001      	movs	r0, #1
 8016506:	f7fd fa07 	bl	8013918 <memp_malloc>
 801650a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d111      	bne.n	8016536 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016512:	79fb      	ldrb	r3, [r7, #7]
 8016514:	4618      	mov	r0, r3
 8016516:	f7ff fee3 	bl	80162e0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801651a:	2001      	movs	r0, #1
 801651c:	f7fd f9fc 	bl	8013918 <memp_malloc>
 8016520:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d006      	beq.n	8016536 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016528:	4b36      	ldr	r3, [pc, #216]	@ (8016604 <tcp_alloc+0x148>)
 801652a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801652e:	889a      	ldrh	r2, [r3, #4]
 8016530:	3a01      	subs	r2, #1
 8016532:	b292      	uxth	r2, r2
 8016534:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d006      	beq.n	801654a <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801653c:	4b31      	ldr	r3, [pc, #196]	@ (8016604 <tcp_alloc+0x148>)
 801653e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016542:	889a      	ldrh	r2, [r3, #4]
 8016544:	3a01      	subs	r2, #1
 8016546:	b292      	uxth	r2, r2
 8016548:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d006      	beq.n	801655e <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016550:	4b2c      	ldr	r3, [pc, #176]	@ (8016604 <tcp_alloc+0x148>)
 8016552:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016556:	889a      	ldrh	r2, [r3, #4]
 8016558:	3a01      	subs	r2, #1
 801655a:	b292      	uxth	r2, r2
 801655c:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d006      	beq.n	8016572 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016564:	4b27      	ldr	r3, [pc, #156]	@ (8016604 <tcp_alloc+0x148>)
 8016566:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801656a:	889a      	ldrh	r2, [r3, #4]
 801656c:	3a01      	subs	r2, #1
 801656e:	b292      	uxth	r2, r2
 8016570:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d03f      	beq.n	80165f8 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016578:	229c      	movs	r2, #156	@ 0x9c
 801657a:	2100      	movs	r1, #0
 801657c:	68f8      	ldr	r0, [r7, #12]
 801657e:	f00a f9e9 	bl	8020954 <memset>
    pcb->prio = prio;
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	79fa      	ldrb	r2, [r7, #7]
 8016586:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801658e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016598:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	22ff      	movs	r2, #255	@ 0xff
 80165a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80165ae:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	2206      	movs	r2, #6
 80165b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	2206      	movs	r2, #6
 80165bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80165c4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	2201      	movs	r2, #1
 80165ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80165ce:	4b0e      	ldr	r3, [pc, #56]	@ (8016608 <tcp_alloc+0x14c>)
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80165d6:	4b0d      	ldr	r3, [pc, #52]	@ (801660c <tcp_alloc+0x150>)
 80165d8:	781a      	ldrb	r2, [r3, #0]
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80165e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	4a09      	ldr	r2, [pc, #36]	@ (8016610 <tcp_alloc+0x154>)
 80165ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	4a08      	ldr	r2, [pc, #32]	@ (8016614 <tcp_alloc+0x158>)
 80165f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80165f8:	68fb      	ldr	r3, [r7, #12]
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3710      	adds	r7, #16
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	bf00      	nop
 8016604:	2002d36c 	.word	0x2002d36c
 8016608:	2002d46c 	.word	0x2002d46c
 801660c:	2002d482 	.word	0x2002d482
 8016610:	08016275 	.word	0x08016275
 8016614:	006ddd00 	.word	0x006ddd00

08016618 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
 801661e:	4603      	mov	r3, r0
 8016620:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016622:	2040      	movs	r0, #64	@ 0x40
 8016624:	f7ff ff4a 	bl	80164bc <tcp_alloc>
 8016628:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801662a:	68fb      	ldr	r3, [r7, #12]
}
 801662c:	4618      	mov	r0, r3
 801662e:	3710      	adds	r7, #16
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}

08016634 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016634:	b480      	push	{r7}
 8016636:	b083      	sub	sp, #12
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
 801663c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d002      	beq.n	801664a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	683a      	ldr	r2, [r7, #0]
 8016648:	611a      	str	r2, [r3, #16]
  }
}
 801664a:	bf00      	nop
 801664c:	370c      	adds	r7, #12
 801664e:	46bd      	mov	sp, r7
 8016650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016654:	4770      	bx	lr
	...

08016658 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d00e      	beq.n	8016686 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	7d1b      	ldrb	r3, [r3, #20]
 801666c:	2b01      	cmp	r3, #1
 801666e:	d106      	bne.n	801667e <tcp_recv+0x26>
 8016670:	4b07      	ldr	r3, [pc, #28]	@ (8016690 <tcp_recv+0x38>)
 8016672:	f240 72df 	movw	r2, #2015	@ 0x7df
 8016676:	4907      	ldr	r1, [pc, #28]	@ (8016694 <tcp_recv+0x3c>)
 8016678:	4807      	ldr	r0, [pc, #28]	@ (8016698 <tcp_recv+0x40>)
 801667a:	f00a f80b 	bl	8020694 <iprintf>
    pcb->recv = recv;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	683a      	ldr	r2, [r7, #0]
 8016682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8016686:	bf00      	nop
 8016688:	3708      	adds	r7, #8
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	08023764 	.word	0x08023764
 8016694:	08023d00 	.word	0x08023d00
 8016698:	080237a8 	.word	0x080237a8

0801669c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b082      	sub	sp, #8
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d00e      	beq.n	80166ca <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	7d1b      	ldrb	r3, [r3, #20]
 80166b0:	2b01      	cmp	r3, #1
 80166b2:	d106      	bne.n	80166c2 <tcp_sent+0x26>
 80166b4:	4b07      	ldr	r3, [pc, #28]	@ (80166d4 <tcp_sent+0x38>)
 80166b6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80166ba:	4907      	ldr	r1, [pc, #28]	@ (80166d8 <tcp_sent+0x3c>)
 80166bc:	4807      	ldr	r0, [pc, #28]	@ (80166dc <tcp_sent+0x40>)
 80166be:	f009 ffe9 	bl	8020694 <iprintf>
    pcb->sent = sent;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	683a      	ldr	r2, [r7, #0]
 80166c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80166ca:	bf00      	nop
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}
 80166d2:	bf00      	nop
 80166d4:	08023764 	.word	0x08023764
 80166d8:	08023d28 	.word	0x08023d28
 80166dc:	080237a8 	.word	0x080237a8

080166e0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d00e      	beq.n	801670e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	7d1b      	ldrb	r3, [r3, #20]
 80166f4:	2b01      	cmp	r3, #1
 80166f6:	d106      	bne.n	8016706 <tcp_err+0x26>
 80166f8:	4b07      	ldr	r3, [pc, #28]	@ (8016718 <tcp_err+0x38>)
 80166fa:	f640 020d 	movw	r2, #2061	@ 0x80d
 80166fe:	4907      	ldr	r1, [pc, #28]	@ (801671c <tcp_err+0x3c>)
 8016700:	4807      	ldr	r0, [pc, #28]	@ (8016720 <tcp_err+0x40>)
 8016702:	f009 ffc7 	bl	8020694 <iprintf>
    pcb->errf = err;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	683a      	ldr	r2, [r7, #0]
 801670a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801670e:	bf00      	nop
 8016710:	3708      	adds	r7, #8
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	08023764 	.word	0x08023764
 801671c:	08023d50 	.word	0x08023d50
 8016720:	080237a8 	.word	0x080237a8

08016724 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016724:	b480      	push	{r7}
 8016726:	b085      	sub	sp, #20
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d008      	beq.n	8016746 <tcp_accept+0x22>
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	7d1b      	ldrb	r3, [r3, #20]
 8016738:	2b01      	cmp	r3, #1
 801673a:	d104      	bne.n	8016746 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	683a      	ldr	r2, [r7, #0]
 8016744:	619a      	str	r2, [r3, #24]
  }
}
 8016746:	bf00      	nop
 8016748:	3714      	adds	r7, #20
 801674a:	46bd      	mov	sp, r7
 801674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016750:	4770      	bx	lr
	...

08016754 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b084      	sub	sp, #16
 8016758:	af00      	add	r7, sp, #0
 801675a:	60f8      	str	r0, [r7, #12]
 801675c:	60b9      	str	r1, [r7, #8]
 801675e:	4613      	mov	r3, r2
 8016760:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d107      	bne.n	8016778 <tcp_poll+0x24>
 8016768:	4b0e      	ldr	r3, [pc, #56]	@ (80167a4 <tcp_poll+0x50>)
 801676a:	f640 023d 	movw	r2, #2109	@ 0x83d
 801676e:	490e      	ldr	r1, [pc, #56]	@ (80167a8 <tcp_poll+0x54>)
 8016770:	480e      	ldr	r0, [pc, #56]	@ (80167ac <tcp_poll+0x58>)
 8016772:	f009 ff8f 	bl	8020694 <iprintf>
 8016776:	e011      	b.n	801679c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	7d1b      	ldrb	r3, [r3, #20]
 801677c:	2b01      	cmp	r3, #1
 801677e:	d106      	bne.n	801678e <tcp_poll+0x3a>
 8016780:	4b08      	ldr	r3, [pc, #32]	@ (80167a4 <tcp_poll+0x50>)
 8016782:	f640 023e 	movw	r2, #2110	@ 0x83e
 8016786:	490a      	ldr	r1, [pc, #40]	@ (80167b0 <tcp_poll+0x5c>)
 8016788:	4808      	ldr	r0, [pc, #32]	@ (80167ac <tcp_poll+0x58>)
 801678a:	f009 ff83 	bl	8020694 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	68ba      	ldr	r2, [r7, #8]
 8016792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	79fa      	ldrb	r2, [r7, #7]
 801679a:	775a      	strb	r2, [r3, #29]
}
 801679c:	3710      	adds	r7, #16
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	08023764 	.word	0x08023764
 80167a8:	08023d78 	.word	0x08023d78
 80167ac:	080237a8 	.word	0x080237a8
 80167b0:	08023d90 	.word	0x08023d90

080167b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b082      	sub	sp, #8
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d107      	bne.n	80167d2 <tcp_pcb_purge+0x1e>
 80167c2:	4b21      	ldr	r3, [pc, #132]	@ (8016848 <tcp_pcb_purge+0x94>)
 80167c4:	f640 0251 	movw	r2, #2129	@ 0x851
 80167c8:	4920      	ldr	r1, [pc, #128]	@ (801684c <tcp_pcb_purge+0x98>)
 80167ca:	4821      	ldr	r0, [pc, #132]	@ (8016850 <tcp_pcb_purge+0x9c>)
 80167cc:	f009 ff62 	bl	8020694 <iprintf>
 80167d0:	e037      	b.n	8016842 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	7d1b      	ldrb	r3, [r3, #20]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d033      	beq.n	8016842 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80167de:	2b0a      	cmp	r3, #10
 80167e0:	d02f      	beq.n	8016842 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80167e6:	2b01      	cmp	r3, #1
 80167e8:	d02b      	beq.n	8016842 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d007      	beq.n	8016802 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7fe f8f0 	bl	80149dc <pbuf_free>
      pcb->refused_data = NULL;
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	2200      	movs	r2, #0
 8016800:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016806:	2b00      	cmp	r3, #0
 8016808:	d002      	beq.n	8016810 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f000 f98c 	bl	8016b28 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016816:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801681c:	4618      	mov	r0, r3
 801681e:	f7ff fccf 	bl	80161c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016826:	4618      	mov	r0, r3
 8016828:	f7ff fcca 	bl	80161c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2200      	movs	r2, #0
 8016830:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2200      	movs	r2, #0
 801683e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016842:	3708      	adds	r7, #8
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	08023764 	.word	0x08023764
 801684c:	08023db0 	.word	0x08023db0
 8016850:	080237a8 	.word	0x080237a8

08016854 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b084      	sub	sp, #16
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
 801685c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d106      	bne.n	8016872 <tcp_pcb_remove+0x1e>
 8016864:	4b3e      	ldr	r3, [pc, #248]	@ (8016960 <tcp_pcb_remove+0x10c>)
 8016866:	f640 0283 	movw	r2, #2179	@ 0x883
 801686a:	493e      	ldr	r1, [pc, #248]	@ (8016964 <tcp_pcb_remove+0x110>)
 801686c:	483e      	ldr	r0, [pc, #248]	@ (8016968 <tcp_pcb_remove+0x114>)
 801686e:	f009 ff11 	bl	8020694 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d106      	bne.n	8016886 <tcp_pcb_remove+0x32>
 8016878:	4b39      	ldr	r3, [pc, #228]	@ (8016960 <tcp_pcb_remove+0x10c>)
 801687a:	f640 0284 	movw	r2, #2180	@ 0x884
 801687e:	493b      	ldr	r1, [pc, #236]	@ (801696c <tcp_pcb_remove+0x118>)
 8016880:	4839      	ldr	r0, [pc, #228]	@ (8016968 <tcp_pcb_remove+0x114>)
 8016882:	f009 ff07 	bl	8020694 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	683a      	ldr	r2, [r7, #0]
 801688c:	429a      	cmp	r2, r3
 801688e:	d105      	bne.n	801689c <tcp_pcb_remove+0x48>
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	68da      	ldr	r2, [r3, #12]
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	601a      	str	r2, [r3, #0]
 801689a:	e013      	b.n	80168c4 <tcp_pcb_remove+0x70>
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	60fb      	str	r3, [r7, #12]
 80168a2:	e00c      	b.n	80168be <tcp_pcb_remove+0x6a>
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	68db      	ldr	r3, [r3, #12]
 80168a8:	683a      	ldr	r2, [r7, #0]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d104      	bne.n	80168b8 <tcp_pcb_remove+0x64>
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	68da      	ldr	r2, [r3, #12]
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	60da      	str	r2, [r3, #12]
 80168b6:	e005      	b.n	80168c4 <tcp_pcb_remove+0x70>
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	68db      	ldr	r3, [r3, #12]
 80168bc:	60fb      	str	r3, [r7, #12]
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d1ef      	bne.n	80168a4 <tcp_pcb_remove+0x50>
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	2200      	movs	r2, #0
 80168c8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80168ca:	6838      	ldr	r0, [r7, #0]
 80168cc:	f7ff ff72 	bl	80167b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	7d1b      	ldrb	r3, [r3, #20]
 80168d4:	2b0a      	cmp	r3, #10
 80168d6:	d013      	beq.n	8016900 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80168dc:	2b01      	cmp	r3, #1
 80168de:	d00f      	beq.n	8016900 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	8b5b      	ldrh	r3, [r3, #26]
 80168e4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d009      	beq.n	8016900 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	8b5b      	ldrh	r3, [r3, #26]
 80168f0:	f043 0302 	orr.w	r3, r3, #2
 80168f4:	b29a      	uxth	r2, r3
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80168fa:	6838      	ldr	r0, [r7, #0]
 80168fc:	f003 fcc8 	bl	801a290 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016900:	683b      	ldr	r3, [r7, #0]
 8016902:	7d1b      	ldrb	r3, [r3, #20]
 8016904:	2b01      	cmp	r3, #1
 8016906:	d020      	beq.n	801694a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801690c:	2b00      	cmp	r3, #0
 801690e:	d006      	beq.n	801691e <tcp_pcb_remove+0xca>
 8016910:	4b13      	ldr	r3, [pc, #76]	@ (8016960 <tcp_pcb_remove+0x10c>)
 8016912:	f640 0293 	movw	r2, #2195	@ 0x893
 8016916:	4916      	ldr	r1, [pc, #88]	@ (8016970 <tcp_pcb_remove+0x11c>)
 8016918:	4813      	ldr	r0, [pc, #76]	@ (8016968 <tcp_pcb_remove+0x114>)
 801691a:	f009 febb 	bl	8020694 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016922:	2b00      	cmp	r3, #0
 8016924:	d006      	beq.n	8016934 <tcp_pcb_remove+0xe0>
 8016926:	4b0e      	ldr	r3, [pc, #56]	@ (8016960 <tcp_pcb_remove+0x10c>)
 8016928:	f640 0294 	movw	r2, #2196	@ 0x894
 801692c:	4911      	ldr	r1, [pc, #68]	@ (8016974 <tcp_pcb_remove+0x120>)
 801692e:	480e      	ldr	r0, [pc, #56]	@ (8016968 <tcp_pcb_remove+0x114>)
 8016930:	f009 feb0 	bl	8020694 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016938:	2b00      	cmp	r3, #0
 801693a:	d006      	beq.n	801694a <tcp_pcb_remove+0xf6>
 801693c:	4b08      	ldr	r3, [pc, #32]	@ (8016960 <tcp_pcb_remove+0x10c>)
 801693e:	f640 0296 	movw	r2, #2198	@ 0x896
 8016942:	490d      	ldr	r1, [pc, #52]	@ (8016978 <tcp_pcb_remove+0x124>)
 8016944:	4808      	ldr	r0, [pc, #32]	@ (8016968 <tcp_pcb_remove+0x114>)
 8016946:	f009 fea5 	bl	8020694 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	2200      	movs	r2, #0
 801694e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	2200      	movs	r2, #0
 8016954:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016956:	bf00      	nop
 8016958:	3710      	adds	r7, #16
 801695a:	46bd      	mov	sp, r7
 801695c:	bd80      	pop	{r7, pc}
 801695e:	bf00      	nop
 8016960:	08023764 	.word	0x08023764
 8016964:	08023dcc 	.word	0x08023dcc
 8016968:	080237a8 	.word	0x080237a8
 801696c:	08023de8 	.word	0x08023de8
 8016970:	08023e08 	.word	0x08023e08
 8016974:	08023e20 	.word	0x08023e20
 8016978:	08023e3c 	.word	0x08023e3c

0801697c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b082      	sub	sp, #8
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d106      	bne.n	8016998 <tcp_next_iss+0x1c>
 801698a:	4b0a      	ldr	r3, [pc, #40]	@ (80169b4 <tcp_next_iss+0x38>)
 801698c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016990:	4909      	ldr	r1, [pc, #36]	@ (80169b8 <tcp_next_iss+0x3c>)
 8016992:	480a      	ldr	r0, [pc, #40]	@ (80169bc <tcp_next_iss+0x40>)
 8016994:	f009 fe7e 	bl	8020694 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016998:	4b09      	ldr	r3, [pc, #36]	@ (80169c0 <tcp_next_iss+0x44>)
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	4b09      	ldr	r3, [pc, #36]	@ (80169c4 <tcp_next_iss+0x48>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	4413      	add	r3, r2
 80169a2:	4a07      	ldr	r2, [pc, #28]	@ (80169c0 <tcp_next_iss+0x44>)
 80169a4:	6013      	str	r3, [r2, #0]
  return iss;
 80169a6:	4b06      	ldr	r3, [pc, #24]	@ (80169c0 <tcp_next_iss+0x44>)
 80169a8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3708      	adds	r7, #8
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	08023764 	.word	0x08023764
 80169b8:	08023e54 	.word	0x08023e54
 80169bc:	080237a8 	.word	0x080237a8
 80169c0:	2000006c 	.word	0x2000006c
 80169c4:	2002d46c 	.word	0x2002d46c

080169c8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b086      	sub	sp, #24
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	4603      	mov	r3, r0
 80169d0:	60b9      	str	r1, [r7, #8]
 80169d2:	607a      	str	r2, [r7, #4]
 80169d4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d106      	bne.n	80169ea <tcp_eff_send_mss_netif+0x22>
 80169dc:	4b14      	ldr	r3, [pc, #80]	@ (8016a30 <tcp_eff_send_mss_netif+0x68>)
 80169de:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80169e2:	4914      	ldr	r1, [pc, #80]	@ (8016a34 <tcp_eff_send_mss_netif+0x6c>)
 80169e4:	4814      	ldr	r0, [pc, #80]	@ (8016a38 <tcp_eff_send_mss_netif+0x70>)
 80169e6:	f009 fe55 	bl	8020694 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80169ea:	68bb      	ldr	r3, [r7, #8]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d101      	bne.n	80169f4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80169f0:	89fb      	ldrh	r3, [r7, #14]
 80169f2:	e019      	b.n	8016a28 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80169f4:	68bb      	ldr	r3, [r7, #8]
 80169f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80169f8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80169fa:	8afb      	ldrh	r3, [r7, #22]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d012      	beq.n	8016a26 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016a00:	2328      	movs	r3, #40	@ 0x28
 8016a02:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016a04:	8afa      	ldrh	r2, [r7, #22]
 8016a06:	8abb      	ldrh	r3, [r7, #20]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d904      	bls.n	8016a16 <tcp_eff_send_mss_netif+0x4e>
 8016a0c:	8afa      	ldrh	r2, [r7, #22]
 8016a0e:	8abb      	ldrh	r3, [r7, #20]
 8016a10:	1ad3      	subs	r3, r2, r3
 8016a12:	b29b      	uxth	r3, r3
 8016a14:	e000      	b.n	8016a18 <tcp_eff_send_mss_netif+0x50>
 8016a16:	2300      	movs	r3, #0
 8016a18:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016a1a:	8a7a      	ldrh	r2, [r7, #18]
 8016a1c:	89fb      	ldrh	r3, [r7, #14]
 8016a1e:	4293      	cmp	r3, r2
 8016a20:	bf28      	it	cs
 8016a22:	4613      	movcs	r3, r2
 8016a24:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016a26:	89fb      	ldrh	r3, [r7, #14]
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	3718      	adds	r7, #24
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	08023764 	.word	0x08023764
 8016a34:	08023e70 	.word	0x08023e70
 8016a38:	080237a8 	.word	0x080237a8

08016a3c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b084      	sub	sp, #16
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
 8016a44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d11d      	bne.n	8016a8c <tcp_netif_ip_addr_changed_pcblist+0x50>
 8016a50:	4b12      	ldr	r3, [pc, #72]	@ (8016a9c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016a52:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016a56:	4912      	ldr	r1, [pc, #72]	@ (8016aa0 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8016a58:	4812      	ldr	r0, [pc, #72]	@ (8016aa4 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8016a5a:	f009 fe1b 	bl	8020694 <iprintf>

  while (pcb != NULL) {
 8016a5e:	e015      	b.n	8016a8c <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	681a      	ldr	r2, [r3, #0]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	d10c      	bne.n	8016a86 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	68db      	ldr	r3, [r3, #12]
 8016a70:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8016a72:	68f9      	ldr	r1, [r7, #12]
 8016a74:	480c      	ldr	r0, [pc, #48]	@ (8016aa8 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8016a76:	f009 fe0d 	bl	8020694 <iprintf>
      tcp_abort(pcb);
 8016a7a:	68f8      	ldr	r0, [r7, #12]
 8016a7c:	f7fe fdea 	bl	8015654 <tcp_abort>
      pcb = next;
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	60fb      	str	r3, [r7, #12]
 8016a84:	e002      	b.n	8016a8c <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	68db      	ldr	r3, [r3, #12]
 8016a8a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d1e6      	bne.n	8016a60 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016a92:	bf00      	nop
 8016a94:	bf00      	nop
 8016a96:	3710      	adds	r7, #16
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	08023764 	.word	0x08023764
 8016aa0:	08023e98 	.word	0x08023e98
 8016aa4:	080237a8 	.word	0x080237a8
 8016aa8:	08023ecc 	.word	0x08023ecc

08016aac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d02a      	beq.n	8016b12 <tcp_netif_ip_addr_changed+0x66>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d026      	beq.n	8016b12 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016ac4:	4b15      	ldr	r3, [pc, #84]	@ (8016b1c <tcp_netif_ip_addr_changed+0x70>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	4619      	mov	r1, r3
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f7ff ffb6 	bl	8016a3c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016ad0:	4b13      	ldr	r3, [pc, #76]	@ (8016b20 <tcp_netif_ip_addr_changed+0x74>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f7ff ffb0 	bl	8016a3c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d017      	beq.n	8016b12 <tcp_netif_ip_addr_changed+0x66>
 8016ae2:	683b      	ldr	r3, [r7, #0]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d013      	beq.n	8016b12 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016aea:	4b0e      	ldr	r3, [pc, #56]	@ (8016b24 <tcp_netif_ip_addr_changed+0x78>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	60fb      	str	r3, [r7, #12]
 8016af0:	e00c      	b.n	8016b0c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	681a      	ldr	r2, [r3, #0]
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	d103      	bne.n	8016b06 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	681a      	ldr	r2, [r3, #0]
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	68db      	ldr	r3, [r3, #12]
 8016b0a:	60fb      	str	r3, [r7, #12]
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d1ef      	bne.n	8016af2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016b12:	bf00      	nop
 8016b14:	3710      	adds	r7, #16
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	2002d478 	.word	0x2002d478
 8016b20:	2002d470 	.word	0x2002d470
 8016b24:	2002d474 	.word	0x2002d474

08016b28 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d007      	beq.n	8016b48 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7ff fb3f 	bl	80161c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	2200      	movs	r2, #0
 8016b46:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016b48:	bf00      	nop
 8016b4a:	3708      	adds	r7, #8
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}

08016b50 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016b50:	b590      	push	{r4, r7, lr}
 8016b52:	b08d      	sub	sp, #52	@ 0x34
 8016b54:	af04      	add	r7, sp, #16
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d105      	bne.n	8016b6c <tcp_input+0x1c>
 8016b60:	4b9b      	ldr	r3, [pc, #620]	@ (8016dd0 <tcp_input+0x280>)
 8016b62:	2283      	movs	r2, #131	@ 0x83
 8016b64:	499b      	ldr	r1, [pc, #620]	@ (8016dd4 <tcp_input+0x284>)
 8016b66:	489c      	ldr	r0, [pc, #624]	@ (8016dd8 <tcp_input+0x288>)
 8016b68:	f009 fd94 	bl	8020694 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8016b6c:	4b9b      	ldr	r3, [pc, #620]	@ (8016ddc <tcp_input+0x28c>)
 8016b6e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8016b72:	3301      	adds	r3, #1
 8016b74:	b29a      	uxth	r2, r3
 8016b76:	4b99      	ldr	r3, [pc, #612]	@ (8016ddc <tcp_input+0x28c>)
 8016b78:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	4a97      	ldr	r2, [pc, #604]	@ (8016de0 <tcp_input+0x290>)
 8016b82:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	895b      	ldrh	r3, [r3, #10]
 8016b88:	2b13      	cmp	r3, #19
 8016b8a:	d809      	bhi.n	8016ba0 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8016b8c:	4b93      	ldr	r3, [pc, #588]	@ (8016ddc <tcp_input+0x28c>)
 8016b8e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016b92:	3301      	adds	r3, #1
 8016b94:	b29a      	uxth	r2, r3
 8016b96:	4b91      	ldr	r3, [pc, #580]	@ (8016ddc <tcp_input+0x28c>)
 8016b98:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016b9c:	f000 bc1c 	b.w	80173d8 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016ba0:	4b90      	ldr	r3, [pc, #576]	@ (8016de4 <tcp_input+0x294>)
 8016ba2:	695b      	ldr	r3, [r3, #20]
 8016ba4:	4a8f      	ldr	r2, [pc, #572]	@ (8016de4 <tcp_input+0x294>)
 8016ba6:	6812      	ldr	r2, [r2, #0]
 8016ba8:	4611      	mov	r1, r2
 8016baa:	4618      	mov	r0, r3
 8016bac:	f007 f8a8 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d105      	bne.n	8016bc2 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8016de4 <tcp_input+0x294>)
 8016bb8:	695b      	ldr	r3, [r3, #20]
 8016bba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016bbe:	2be0      	cmp	r3, #224	@ 0xe0
 8016bc0:	d109      	bne.n	8016bd6 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8016bc2:	4b86      	ldr	r3, [pc, #536]	@ (8016ddc <tcp_input+0x28c>)
 8016bc4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8016bc8:	3301      	adds	r3, #1
 8016bca:	b29a      	uxth	r2, r3
 8016bcc:	4b83      	ldr	r3, [pc, #524]	@ (8016ddc <tcp_input+0x28c>)
 8016bce:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8016bd2:	f000 bc01 	b.w	80173d8 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016bd6:	4b82      	ldr	r3, [pc, #520]	@ (8016de0 <tcp_input+0x290>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	899b      	ldrh	r3, [r3, #12]
 8016bdc:	b29b      	uxth	r3, r3
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7fc f8ce 	bl	8012d80 <lwip_htons>
 8016be4:	4603      	mov	r3, r0
 8016be6:	0b1b      	lsrs	r3, r3, #12
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	009b      	lsls	r3, r3, #2
 8016bee:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016bf0:	7cbb      	ldrb	r3, [r7, #18]
 8016bf2:	2b13      	cmp	r3, #19
 8016bf4:	d905      	bls.n	8016c02 <tcp_input+0xb2>
 8016bf6:	7cbb      	ldrb	r3, [r7, #18]
 8016bf8:	b29a      	uxth	r2, r3
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	891b      	ldrh	r3, [r3, #8]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d908      	bls.n	8016c14 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8016c02:	4b76      	ldr	r3, [pc, #472]	@ (8016ddc <tcp_input+0x28c>)
 8016c04:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016c08:	3301      	adds	r3, #1
 8016c0a:	b29a      	uxth	r2, r3
 8016c0c:	4b73      	ldr	r3, [pc, #460]	@ (8016ddc <tcp_input+0x28c>)
 8016c0e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016c12:	e3e1      	b.n	80173d8 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016c14:	7cbb      	ldrb	r3, [r7, #18]
 8016c16:	b29b      	uxth	r3, r3
 8016c18:	3b14      	subs	r3, #20
 8016c1a:	b29a      	uxth	r2, r3
 8016c1c:	4b72      	ldr	r3, [pc, #456]	@ (8016de8 <tcp_input+0x298>)
 8016c1e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016c20:	4b72      	ldr	r3, [pc, #456]	@ (8016dec <tcp_input+0x29c>)
 8016c22:	2200      	movs	r2, #0
 8016c24:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	895a      	ldrh	r2, [r3, #10]
 8016c2a:	7cbb      	ldrb	r3, [r7, #18]
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	429a      	cmp	r2, r3
 8016c30:	d309      	bcc.n	8016c46 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016c32:	4b6d      	ldr	r3, [pc, #436]	@ (8016de8 <tcp_input+0x298>)
 8016c34:	881a      	ldrh	r2, [r3, #0]
 8016c36:	4b6e      	ldr	r3, [pc, #440]	@ (8016df0 <tcp_input+0x2a0>)
 8016c38:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016c3a:	7cbb      	ldrb	r3, [r7, #18]
 8016c3c:	4619      	mov	r1, r3
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7fd fe3e 	bl	80148c0 <pbuf_remove_header>
 8016c44:	e056      	b.n	8016cf4 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d105      	bne.n	8016c5a <tcp_input+0x10a>
 8016c4e:	4b60      	ldr	r3, [pc, #384]	@ (8016dd0 <tcp_input+0x280>)
 8016c50:	22c2      	movs	r2, #194	@ 0xc2
 8016c52:	4968      	ldr	r1, [pc, #416]	@ (8016df4 <tcp_input+0x2a4>)
 8016c54:	4860      	ldr	r0, [pc, #384]	@ (8016dd8 <tcp_input+0x288>)
 8016c56:	f009 fd1d 	bl	8020694 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016c5a:	2114      	movs	r1, #20
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f7fd fe2f 	bl	80148c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	895a      	ldrh	r2, [r3, #10]
 8016c66:	4b62      	ldr	r3, [pc, #392]	@ (8016df0 <tcp_input+0x2a0>)
 8016c68:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8016de8 <tcp_input+0x298>)
 8016c6c:	881a      	ldrh	r2, [r3, #0]
 8016c6e:	4b60      	ldr	r3, [pc, #384]	@ (8016df0 <tcp_input+0x2a0>)
 8016c70:	881b      	ldrh	r3, [r3, #0]
 8016c72:	1ad3      	subs	r3, r2, r3
 8016c74:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016c76:	4b5e      	ldr	r3, [pc, #376]	@ (8016df0 <tcp_input+0x2a0>)
 8016c78:	881b      	ldrh	r3, [r3, #0]
 8016c7a:	4619      	mov	r1, r3
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f7fd fe1f 	bl	80148c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	895b      	ldrh	r3, [r3, #10]
 8016c88:	8a3a      	ldrh	r2, [r7, #16]
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d908      	bls.n	8016ca0 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8016c8e:	4b53      	ldr	r3, [pc, #332]	@ (8016ddc <tcp_input+0x28c>)
 8016c90:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016c94:	3301      	adds	r3, #1
 8016c96:	b29a      	uxth	r2, r3
 8016c98:	4b50      	ldr	r3, [pc, #320]	@ (8016ddc <tcp_input+0x28c>)
 8016c9a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016c9e:	e39b      	b.n	80173d8 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	685b      	ldr	r3, [r3, #4]
 8016ca6:	4a51      	ldr	r2, [pc, #324]	@ (8016dec <tcp_input+0x29c>)
 8016ca8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	8a3a      	ldrh	r2, [r7, #16]
 8016cb0:	4611      	mov	r1, r2
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7fd fe04 	bl	80148c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	891a      	ldrh	r2, [r3, #8]
 8016cbc:	8a3b      	ldrh	r3, [r7, #16]
 8016cbe:	1ad3      	subs	r3, r2, r3
 8016cc0:	b29a      	uxth	r2, r3
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	895b      	ldrh	r3, [r3, #10]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d005      	beq.n	8016cda <tcp_input+0x18a>
 8016cce:	4b40      	ldr	r3, [pc, #256]	@ (8016dd0 <tcp_input+0x280>)
 8016cd0:	22df      	movs	r2, #223	@ 0xdf
 8016cd2:	4949      	ldr	r1, [pc, #292]	@ (8016df8 <tcp_input+0x2a8>)
 8016cd4:	4840      	ldr	r0, [pc, #256]	@ (8016dd8 <tcp_input+0x288>)
 8016cd6:	f009 fcdd 	bl	8020694 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	891a      	ldrh	r2, [r3, #8]
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	891b      	ldrh	r3, [r3, #8]
 8016ce4:	429a      	cmp	r2, r3
 8016ce6:	d005      	beq.n	8016cf4 <tcp_input+0x1a4>
 8016ce8:	4b39      	ldr	r3, [pc, #228]	@ (8016dd0 <tcp_input+0x280>)
 8016cea:	22e0      	movs	r2, #224	@ 0xe0
 8016cec:	4943      	ldr	r1, [pc, #268]	@ (8016dfc <tcp_input+0x2ac>)
 8016cee:	483a      	ldr	r0, [pc, #232]	@ (8016dd8 <tcp_input+0x288>)
 8016cf0:	f009 fcd0 	bl	8020694 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8016de0 <tcp_input+0x290>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	881b      	ldrh	r3, [r3, #0]
 8016cfa:	b29b      	uxth	r3, r3
 8016cfc:	4a38      	ldr	r2, [pc, #224]	@ (8016de0 <tcp_input+0x290>)
 8016cfe:	6814      	ldr	r4, [r2, #0]
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7fc f83d 	bl	8012d80 <lwip_htons>
 8016d06:	4603      	mov	r3, r0
 8016d08:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016d0a:	4b35      	ldr	r3, [pc, #212]	@ (8016de0 <tcp_input+0x290>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	885b      	ldrh	r3, [r3, #2]
 8016d10:	b29b      	uxth	r3, r3
 8016d12:	4a33      	ldr	r2, [pc, #204]	@ (8016de0 <tcp_input+0x290>)
 8016d14:	6814      	ldr	r4, [r2, #0]
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7fc f832 	bl	8012d80 <lwip_htons>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016d20:	4b2f      	ldr	r3, [pc, #188]	@ (8016de0 <tcp_input+0x290>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	4a2e      	ldr	r2, [pc, #184]	@ (8016de0 <tcp_input+0x290>)
 8016d28:	6814      	ldr	r4, [r2, #0]
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f7fc f83e 	bl	8012dac <lwip_htonl>
 8016d30:	4603      	mov	r3, r0
 8016d32:	6063      	str	r3, [r4, #4]
 8016d34:	6863      	ldr	r3, [r4, #4]
 8016d36:	4a32      	ldr	r2, [pc, #200]	@ (8016e00 <tcp_input+0x2b0>)
 8016d38:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016d3a:	4b29      	ldr	r3, [pc, #164]	@ (8016de0 <tcp_input+0x290>)
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	689b      	ldr	r3, [r3, #8]
 8016d40:	4a27      	ldr	r2, [pc, #156]	@ (8016de0 <tcp_input+0x290>)
 8016d42:	6814      	ldr	r4, [r2, #0]
 8016d44:	4618      	mov	r0, r3
 8016d46:	f7fc f831 	bl	8012dac <lwip_htonl>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	60a3      	str	r3, [r4, #8]
 8016d4e:	68a3      	ldr	r3, [r4, #8]
 8016d50:	4a2c      	ldr	r2, [pc, #176]	@ (8016e04 <tcp_input+0x2b4>)
 8016d52:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016d54:	4b22      	ldr	r3, [pc, #136]	@ (8016de0 <tcp_input+0x290>)
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	89db      	ldrh	r3, [r3, #14]
 8016d5a:	b29b      	uxth	r3, r3
 8016d5c:	4a20      	ldr	r2, [pc, #128]	@ (8016de0 <tcp_input+0x290>)
 8016d5e:	6814      	ldr	r4, [r2, #0]
 8016d60:	4618      	mov	r0, r3
 8016d62:	f7fc f80d 	bl	8012d80 <lwip_htons>
 8016d66:	4603      	mov	r3, r0
 8016d68:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8016de0 <tcp_input+0x290>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	899b      	ldrh	r3, [r3, #12]
 8016d70:	b29b      	uxth	r3, r3
 8016d72:	4618      	mov	r0, r3
 8016d74:	f7fc f804 	bl	8012d80 <lwip_htons>
 8016d78:	4603      	mov	r3, r0
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016d80:	b2da      	uxtb	r2, r3
 8016d82:	4b21      	ldr	r3, [pc, #132]	@ (8016e08 <tcp_input+0x2b8>)
 8016d84:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	891a      	ldrh	r2, [r3, #8]
 8016d8a:	4b20      	ldr	r3, [pc, #128]	@ (8016e0c <tcp_input+0x2bc>)
 8016d8c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8016e08 <tcp_input+0x2b8>)
 8016d90:	781b      	ldrb	r3, [r3, #0]
 8016d92:	f003 0303 	and.w	r3, r3, #3
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d014      	beq.n	8016dc4 <tcp_input+0x274>
    tcplen++;
 8016d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8016e0c <tcp_input+0x2bc>)
 8016d9c:	881b      	ldrh	r3, [r3, #0]
 8016d9e:	3301      	adds	r3, #1
 8016da0:	b29a      	uxth	r2, r3
 8016da2:	4b1a      	ldr	r3, [pc, #104]	@ (8016e0c <tcp_input+0x2bc>)
 8016da4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	891a      	ldrh	r2, [r3, #8]
 8016daa:	4b18      	ldr	r3, [pc, #96]	@ (8016e0c <tcp_input+0x2bc>)
 8016dac:	881b      	ldrh	r3, [r3, #0]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d908      	bls.n	8016dc4 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8016db2:	4b0a      	ldr	r3, [pc, #40]	@ (8016ddc <tcp_input+0x28c>)
 8016db4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016db8:	3301      	adds	r3, #1
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	4b07      	ldr	r3, [pc, #28]	@ (8016ddc <tcp_input+0x28c>)
 8016dbe:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016dc2:	e309      	b.n	80173d8 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016dc8:	4b11      	ldr	r3, [pc, #68]	@ (8016e10 <tcp_input+0x2c0>)
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	61bb      	str	r3, [r7, #24]
 8016dce:	e0a1      	b.n	8016f14 <tcp_input+0x3c4>
 8016dd0:	08023ef4 	.word	0x08023ef4
 8016dd4:	08023f28 	.word	0x08023f28
 8016dd8:	08023f40 	.word	0x08023f40
 8016ddc:	2002d36c 	.word	0x2002d36c
 8016de0:	2002d498 	.word	0x2002d498
 8016de4:	200270fc 	.word	0x200270fc
 8016de8:	2002d49c 	.word	0x2002d49c
 8016dec:	2002d4a0 	.word	0x2002d4a0
 8016df0:	2002d49e 	.word	0x2002d49e
 8016df4:	08023f68 	.word	0x08023f68
 8016df8:	08023f78 	.word	0x08023f78
 8016dfc:	08023f84 	.word	0x08023f84
 8016e00:	2002d4a8 	.word	0x2002d4a8
 8016e04:	2002d4ac 	.word	0x2002d4ac
 8016e08:	2002d4b4 	.word	0x2002d4b4
 8016e0c:	2002d4b2 	.word	0x2002d4b2
 8016e10:	2002d478 	.word	0x2002d478
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016e14:	69bb      	ldr	r3, [r7, #24]
 8016e16:	7d1b      	ldrb	r3, [r3, #20]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d105      	bne.n	8016e28 <tcp_input+0x2d8>
 8016e1c:	4b8a      	ldr	r3, [pc, #552]	@ (8017048 <tcp_input+0x4f8>)
 8016e1e:	22fb      	movs	r2, #251	@ 0xfb
 8016e20:	498a      	ldr	r1, [pc, #552]	@ (801704c <tcp_input+0x4fc>)
 8016e22:	488b      	ldr	r0, [pc, #556]	@ (8017050 <tcp_input+0x500>)
 8016e24:	f009 fc36 	bl	8020694 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016e28:	69bb      	ldr	r3, [r7, #24]
 8016e2a:	7d1b      	ldrb	r3, [r3, #20]
 8016e2c:	2b0a      	cmp	r3, #10
 8016e2e:	d105      	bne.n	8016e3c <tcp_input+0x2ec>
 8016e30:	4b85      	ldr	r3, [pc, #532]	@ (8017048 <tcp_input+0x4f8>)
 8016e32:	22fc      	movs	r2, #252	@ 0xfc
 8016e34:	4987      	ldr	r1, [pc, #540]	@ (8017054 <tcp_input+0x504>)
 8016e36:	4886      	ldr	r0, [pc, #536]	@ (8017050 <tcp_input+0x500>)
 8016e38:	f009 fc2c 	bl	8020694 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016e3c:	69bb      	ldr	r3, [r7, #24]
 8016e3e:	7d1b      	ldrb	r3, [r3, #20]
 8016e40:	2b01      	cmp	r3, #1
 8016e42:	d105      	bne.n	8016e50 <tcp_input+0x300>
 8016e44:	4b80      	ldr	r3, [pc, #512]	@ (8017048 <tcp_input+0x4f8>)
 8016e46:	22fd      	movs	r2, #253	@ 0xfd
 8016e48:	4983      	ldr	r1, [pc, #524]	@ (8017058 <tcp_input+0x508>)
 8016e4a:	4881      	ldr	r0, [pc, #516]	@ (8017050 <tcp_input+0x500>)
 8016e4c:	f009 fc22 	bl	8020694 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016e50:	69bb      	ldr	r3, [r7, #24]
 8016e52:	7a1b      	ldrb	r3, [r3, #8]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d00c      	beq.n	8016e72 <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016e58:	69bb      	ldr	r3, [r7, #24]
 8016e5a:	7a1a      	ldrb	r2, [r3, #8]
 8016e5c:	4b7f      	ldr	r3, [pc, #508]	@ (801705c <tcp_input+0x50c>)
 8016e5e:	685b      	ldr	r3, [r3, #4]
 8016e60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016e64:	3301      	adds	r3, #1
 8016e66:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	d002      	beq.n	8016e72 <tcp_input+0x322>
      prev = pcb;
 8016e6c:	69bb      	ldr	r3, [r7, #24]
 8016e6e:	61fb      	str	r3, [r7, #28]
      continue;
 8016e70:	e04d      	b.n	8016f0e <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8016e72:	69bb      	ldr	r3, [r7, #24]
 8016e74:	8b1a      	ldrh	r2, [r3, #24]
 8016e76:	4b7a      	ldr	r3, [pc, #488]	@ (8017060 <tcp_input+0x510>)
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	881b      	ldrh	r3, [r3, #0]
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	429a      	cmp	r2, r3
 8016e80:	d143      	bne.n	8016f0a <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8016e82:	69bb      	ldr	r3, [r7, #24]
 8016e84:	8ada      	ldrh	r2, [r3, #22]
 8016e86:	4b76      	ldr	r3, [pc, #472]	@ (8017060 <tcp_input+0x510>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	885b      	ldrh	r3, [r3, #2]
 8016e8c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016e8e:	429a      	cmp	r2, r3
 8016e90:	d13b      	bne.n	8016f0a <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016e92:	69bb      	ldr	r3, [r7, #24]
 8016e94:	685a      	ldr	r2, [r3, #4]
 8016e96:	4b71      	ldr	r3, [pc, #452]	@ (801705c <tcp_input+0x50c>)
 8016e98:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016e9a:	429a      	cmp	r2, r3
 8016e9c:	d135      	bne.n	8016f0a <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016e9e:	69bb      	ldr	r3, [r7, #24]
 8016ea0:	681a      	ldr	r2, [r3, #0]
 8016ea2:	4b6e      	ldr	r3, [pc, #440]	@ (801705c <tcp_input+0x50c>)
 8016ea4:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	d12f      	bne.n	8016f0a <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	68db      	ldr	r3, [r3, #12]
 8016eae:	69ba      	ldr	r2, [r7, #24]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d106      	bne.n	8016ec2 <tcp_input+0x372>
 8016eb4:	4b64      	ldr	r3, [pc, #400]	@ (8017048 <tcp_input+0x4f8>)
 8016eb6:	f240 120d 	movw	r2, #269	@ 0x10d
 8016eba:	496a      	ldr	r1, [pc, #424]	@ (8017064 <tcp_input+0x514>)
 8016ebc:	4864      	ldr	r0, [pc, #400]	@ (8017050 <tcp_input+0x500>)
 8016ebe:	f009 fbe9 	bl	8020694 <iprintf>
      if (prev != NULL) {
 8016ec2:	69fb      	ldr	r3, [r7, #28]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d00b      	beq.n	8016ee0 <tcp_input+0x390>
        prev->next = pcb->next;
 8016ec8:	69bb      	ldr	r3, [r7, #24]
 8016eca:	68da      	ldr	r2, [r3, #12]
 8016ecc:	69fb      	ldr	r3, [r7, #28]
 8016ece:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016ed0:	4b65      	ldr	r3, [pc, #404]	@ (8017068 <tcp_input+0x518>)
 8016ed2:	681a      	ldr	r2, [r3, #0]
 8016ed4:	69bb      	ldr	r3, [r7, #24]
 8016ed6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016ed8:	4a63      	ldr	r2, [pc, #396]	@ (8017068 <tcp_input+0x518>)
 8016eda:	69bb      	ldr	r3, [r7, #24]
 8016edc:	6013      	str	r3, [r2, #0]
 8016ede:	e007      	b.n	8016ef0 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8016ee0:	4b62      	ldr	r3, [pc, #392]	@ (801706c <tcp_input+0x51c>)
 8016ee2:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	4b60      	ldr	r3, [pc, #384]	@ (801706c <tcp_input+0x51c>)
 8016eec:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016ef0:	69bb      	ldr	r3, [r7, #24]
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	69ba      	ldr	r2, [r7, #24]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d111      	bne.n	8016f1e <tcp_input+0x3ce>
 8016efa:	4b53      	ldr	r3, [pc, #332]	@ (8017048 <tcp_input+0x4f8>)
 8016efc:	f240 1215 	movw	r2, #277	@ 0x115
 8016f00:	495b      	ldr	r1, [pc, #364]	@ (8017070 <tcp_input+0x520>)
 8016f02:	4853      	ldr	r0, [pc, #332]	@ (8017050 <tcp_input+0x500>)
 8016f04:	f009 fbc6 	bl	8020694 <iprintf>
      break;
 8016f08:	e009      	b.n	8016f1e <tcp_input+0x3ce>
    }
    prev = pcb;
 8016f0a:	69bb      	ldr	r3, [r7, #24]
 8016f0c:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f0e:	69bb      	ldr	r3, [r7, #24]
 8016f10:	68db      	ldr	r3, [r3, #12]
 8016f12:	61bb      	str	r3, [r7, #24]
 8016f14:	69bb      	ldr	r3, [r7, #24]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	f47f af7c 	bne.w	8016e14 <tcp_input+0x2c4>
 8016f1c:	e000      	b.n	8016f20 <tcp_input+0x3d0>
      break;
 8016f1e:	bf00      	nop
  }

  if (pcb == NULL) {
 8016f20:	69bb      	ldr	r3, [r7, #24]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	f040 80bb 	bne.w	801709e <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f28:	4b52      	ldr	r3, [pc, #328]	@ (8017074 <tcp_input+0x524>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	61bb      	str	r3, [r7, #24]
 8016f2e:	e03f      	b.n	8016fb0 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016f30:	69bb      	ldr	r3, [r7, #24]
 8016f32:	7d1b      	ldrb	r3, [r3, #20]
 8016f34:	2b0a      	cmp	r3, #10
 8016f36:	d006      	beq.n	8016f46 <tcp_input+0x3f6>
 8016f38:	4b43      	ldr	r3, [pc, #268]	@ (8017048 <tcp_input+0x4f8>)
 8016f3a:	f240 121f 	movw	r2, #287	@ 0x11f
 8016f3e:	494e      	ldr	r1, [pc, #312]	@ (8017078 <tcp_input+0x528>)
 8016f40:	4843      	ldr	r0, [pc, #268]	@ (8017050 <tcp_input+0x500>)
 8016f42:	f009 fba7 	bl	8020694 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016f46:	69bb      	ldr	r3, [r7, #24]
 8016f48:	7a1b      	ldrb	r3, [r3, #8]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d009      	beq.n	8016f62 <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016f4e:	69bb      	ldr	r3, [r7, #24]
 8016f50:	7a1a      	ldrb	r2, [r3, #8]
 8016f52:	4b42      	ldr	r3, [pc, #264]	@ (801705c <tcp_input+0x50c>)
 8016f54:	685b      	ldr	r3, [r3, #4]
 8016f56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016f5a:	3301      	adds	r3, #1
 8016f5c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d122      	bne.n	8016fa8 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016f62:	69bb      	ldr	r3, [r7, #24]
 8016f64:	8b1a      	ldrh	r2, [r3, #24]
 8016f66:	4b3e      	ldr	r3, [pc, #248]	@ (8017060 <tcp_input+0x510>)
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	881b      	ldrh	r3, [r3, #0]
 8016f6c:	b29b      	uxth	r3, r3
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	d11b      	bne.n	8016faa <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 8016f72:	69bb      	ldr	r3, [r7, #24]
 8016f74:	8ada      	ldrh	r2, [r3, #22]
 8016f76:	4b3a      	ldr	r3, [pc, #232]	@ (8017060 <tcp_input+0x510>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	885b      	ldrh	r3, [r3, #2]
 8016f7c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016f7e:	429a      	cmp	r2, r3
 8016f80:	d113      	bne.n	8016faa <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016f82:	69bb      	ldr	r3, [r7, #24]
 8016f84:	685a      	ldr	r2, [r3, #4]
 8016f86:	4b35      	ldr	r3, [pc, #212]	@ (801705c <tcp_input+0x50c>)
 8016f88:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016f8a:	429a      	cmp	r2, r3
 8016f8c:	d10d      	bne.n	8016faa <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016f8e:	69bb      	ldr	r3, [r7, #24]
 8016f90:	681a      	ldr	r2, [r3, #0]
 8016f92:	4b32      	ldr	r3, [pc, #200]	@ (801705c <tcp_input+0x50c>)
 8016f94:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d107      	bne.n	8016faa <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016f9a:	69b8      	ldr	r0, [r7, #24]
 8016f9c:	f000 fb88 	bl	80176b0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016fa0:	6878      	ldr	r0, [r7, #4]
 8016fa2:	f7fd fd1b 	bl	80149dc <pbuf_free>
        return;
 8016fa6:	e224      	b.n	80173f2 <tcp_input+0x8a2>
        continue;
 8016fa8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016faa:	69bb      	ldr	r3, [r7, #24]
 8016fac:	68db      	ldr	r3, [r3, #12]
 8016fae:	61bb      	str	r3, [r7, #24]
 8016fb0:	69bb      	ldr	r3, [r7, #24]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d1bc      	bne.n	8016f30 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016fba:	4b30      	ldr	r3, [pc, #192]	@ (801707c <tcp_input+0x52c>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	617b      	str	r3, [r7, #20]
 8016fc0:	e02a      	b.n	8017018 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016fc2:	697b      	ldr	r3, [r7, #20]
 8016fc4:	7a1b      	ldrb	r3, [r3, #8]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d00c      	beq.n	8016fe4 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016fca:	697b      	ldr	r3, [r7, #20]
 8016fcc:	7a1a      	ldrb	r2, [r3, #8]
 8016fce:	4b23      	ldr	r3, [pc, #140]	@ (801705c <tcp_input+0x50c>)
 8016fd0:	685b      	ldr	r3, [r3, #4]
 8016fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016fda:	429a      	cmp	r2, r3
 8016fdc:	d002      	beq.n	8016fe4 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 8016fde:	697b      	ldr	r3, [r7, #20]
 8016fe0:	61fb      	str	r3, [r7, #28]
        continue;
 8016fe2:	e016      	b.n	8017012 <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016fe4:	697b      	ldr	r3, [r7, #20]
 8016fe6:	8ada      	ldrh	r2, [r3, #22]
 8016fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8017060 <tcp_input+0x510>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	885b      	ldrh	r3, [r3, #2]
 8016fee:	b29b      	uxth	r3, r3
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d10c      	bne.n	801700e <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	681a      	ldr	r2, [r3, #0]
 8016ff8:	4b18      	ldr	r3, [pc, #96]	@ (801705c <tcp_input+0x50c>)
 8016ffa:	695b      	ldr	r3, [r3, #20]
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	d00f      	beq.n	8017020 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d00d      	beq.n	8017022 <tcp_input+0x4d2>
 8017006:	697b      	ldr	r3, [r7, #20]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d009      	beq.n	8017022 <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801700e:	697b      	ldr	r3, [r7, #20]
 8017010:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8017012:	697b      	ldr	r3, [r7, #20]
 8017014:	68db      	ldr	r3, [r3, #12]
 8017016:	617b      	str	r3, [r7, #20]
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d1d1      	bne.n	8016fc2 <tcp_input+0x472>
 801701e:	e000      	b.n	8017022 <tcp_input+0x4d2>
            break;
 8017020:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8017022:	697b      	ldr	r3, [r7, #20]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d03a      	beq.n	801709e <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017028:	69fb      	ldr	r3, [r7, #28]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d028      	beq.n	8017080 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	68da      	ldr	r2, [r3, #12]
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017036:	4b11      	ldr	r3, [pc, #68]	@ (801707c <tcp_input+0x52c>)
 8017038:	681a      	ldr	r2, [r3, #0]
 801703a:	697b      	ldr	r3, [r7, #20]
 801703c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801703e:	4a0f      	ldr	r2, [pc, #60]	@ (801707c <tcp_input+0x52c>)
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	6013      	str	r3, [r2, #0]
 8017044:	e024      	b.n	8017090 <tcp_input+0x540>
 8017046:	bf00      	nop
 8017048:	08023ef4 	.word	0x08023ef4
 801704c:	08023fa4 	.word	0x08023fa4
 8017050:	08023f40 	.word	0x08023f40
 8017054:	08023fcc 	.word	0x08023fcc
 8017058:	08023ff8 	.word	0x08023ff8
 801705c:	200270fc 	.word	0x200270fc
 8017060:	2002d498 	.word	0x2002d498
 8017064:	08024020 	.word	0x08024020
 8017068:	2002d478 	.word	0x2002d478
 801706c:	2002d36c 	.word	0x2002d36c
 8017070:	0802404c 	.word	0x0802404c
 8017074:	2002d47c 	.word	0x2002d47c
 8017078:	08024078 	.word	0x08024078
 801707c:	2002d474 	.word	0x2002d474
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017080:	4ba0      	ldr	r3, [pc, #640]	@ (8017304 <tcp_input+0x7b4>)
 8017082:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8017086:	3301      	adds	r3, #1
 8017088:	b29a      	uxth	r2, r3
 801708a:	4b9e      	ldr	r3, [pc, #632]	@ (8017304 <tcp_input+0x7b4>)
 801708c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017090:	6978      	ldr	r0, [r7, #20]
 8017092:	f000 fa05 	bl	80174a0 <tcp_listen_input>
      }
      pbuf_free(p);
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f7fd fca0 	bl	80149dc <pbuf_free>
      return;
 801709c:	e1a9      	b.n	80173f2 <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801709e:	69bb      	ldr	r3, [r7, #24]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	f000 815f 	beq.w	8017364 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80170a6:	4b98      	ldr	r3, [pc, #608]	@ (8017308 <tcp_input+0x7b8>)
 80170a8:	2200      	movs	r2, #0
 80170aa:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	891a      	ldrh	r2, [r3, #8]
 80170b0:	4b95      	ldr	r3, [pc, #596]	@ (8017308 <tcp_input+0x7b8>)
 80170b2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80170b4:	4a94      	ldr	r2, [pc, #592]	@ (8017308 <tcp_input+0x7b8>)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80170ba:	4b94      	ldr	r3, [pc, #592]	@ (801730c <tcp_input+0x7bc>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	4a92      	ldr	r2, [pc, #584]	@ (8017308 <tcp_input+0x7b8>)
 80170c0:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80170c2:	4b93      	ldr	r3, [pc, #588]	@ (8017310 <tcp_input+0x7c0>)
 80170c4:	2200      	movs	r2, #0
 80170c6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80170c8:	4b92      	ldr	r3, [pc, #584]	@ (8017314 <tcp_input+0x7c4>)
 80170ca:	2200      	movs	r2, #0
 80170cc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80170ce:	4b92      	ldr	r3, [pc, #584]	@ (8017318 <tcp_input+0x7c8>)
 80170d0:	2200      	movs	r2, #0
 80170d2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80170d4:	4b91      	ldr	r3, [pc, #580]	@ (801731c <tcp_input+0x7cc>)
 80170d6:	781b      	ldrb	r3, [r3, #0]
 80170d8:	f003 0308 	and.w	r3, r3, #8
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d006      	beq.n	80170ee <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	7b5b      	ldrb	r3, [r3, #13]
 80170e4:	f043 0301 	orr.w	r3, r3, #1
 80170e8:	b2da      	uxtb	r2, r3
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80170ee:	69bb      	ldr	r3, [r7, #24]
 80170f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d01e      	beq.n	8017134 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80170f6:	69b8      	ldr	r0, [r7, #24]
 80170f8:	f7fe ffe6 	bl	80160c8 <tcp_process_refused_data>
 80170fc:	4603      	mov	r3, r0
 80170fe:	f113 0f0d 	cmn.w	r3, #13
 8017102:	d007      	beq.n	8017114 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017104:	69bb      	ldr	r3, [r7, #24]
 8017106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017108:	2b00      	cmp	r3, #0
 801710a:	d013      	beq.n	8017134 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801710c:	4b84      	ldr	r3, [pc, #528]	@ (8017320 <tcp_input+0x7d0>)
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d00f      	beq.n	8017134 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017114:	69bb      	ldr	r3, [r7, #24]
 8017116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017118:	2b00      	cmp	r3, #0
 801711a:	d102      	bne.n	8017122 <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801711c:	69b8      	ldr	r0, [r7, #24]
 801711e:	f003 fedd 	bl	801aedc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8017122:	4b78      	ldr	r3, [pc, #480]	@ (8017304 <tcp_input+0x7b4>)
 8017124:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017128:	3301      	adds	r3, #1
 801712a:	b29a      	uxth	r2, r3
 801712c:	4b75      	ldr	r3, [pc, #468]	@ (8017304 <tcp_input+0x7b4>)
 801712e:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017132:	e104      	b.n	801733e <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 8017134:	4a7b      	ldr	r2, [pc, #492]	@ (8017324 <tcp_input+0x7d4>)
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801713a:	69b8      	ldr	r0, [r7, #24]
 801713c:	f000 fb32 	bl	80177a4 <tcp_process>
 8017140:	4603      	mov	r3, r0
 8017142:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017144:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017148:	f113 0f0d 	cmn.w	r3, #13
 801714c:	f000 80d1 	beq.w	80172f2 <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8017150:	4b70      	ldr	r3, [pc, #448]	@ (8017314 <tcp_input+0x7c4>)
 8017152:	781b      	ldrb	r3, [r3, #0]
 8017154:	f003 0308 	and.w	r3, r3, #8
 8017158:	2b00      	cmp	r3, #0
 801715a:	d015      	beq.n	8017188 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801715c:	69bb      	ldr	r3, [r7, #24]
 801715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017162:	2b00      	cmp	r3, #0
 8017164:	d008      	beq.n	8017178 <tcp_input+0x628>
 8017166:	69bb      	ldr	r3, [r7, #24]
 8017168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801716c:	69ba      	ldr	r2, [r7, #24]
 801716e:	6912      	ldr	r2, [r2, #16]
 8017170:	f06f 010d 	mvn.w	r1, #13
 8017174:	4610      	mov	r0, r2
 8017176:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017178:	69b9      	ldr	r1, [r7, #24]
 801717a:	486b      	ldr	r0, [pc, #428]	@ (8017328 <tcp_input+0x7d8>)
 801717c:	f7ff fb6a 	bl	8016854 <tcp_pcb_remove>
        tcp_free(pcb);
 8017180:	69b8      	ldr	r0, [r7, #24]
 8017182:	f7fd ff23 	bl	8014fcc <tcp_free>
 8017186:	e0da      	b.n	801733e <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 8017188:	2300      	movs	r3, #0
 801718a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801718c:	4b62      	ldr	r3, [pc, #392]	@ (8017318 <tcp_input+0x7c8>)
 801718e:	881b      	ldrh	r3, [r3, #0]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d01d      	beq.n	80171d0 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017194:	4b60      	ldr	r3, [pc, #384]	@ (8017318 <tcp_input+0x7c8>)
 8017196:	881b      	ldrh	r3, [r3, #0]
 8017198:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801719a:	69bb      	ldr	r3, [r7, #24]
 801719c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d00a      	beq.n	80171ba <tcp_input+0x66a>
 80171a4:	69bb      	ldr	r3, [r7, #24]
 80171a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80171aa:	69ba      	ldr	r2, [r7, #24]
 80171ac:	6910      	ldr	r0, [r2, #16]
 80171ae:	89fa      	ldrh	r2, [r7, #14]
 80171b0:	69b9      	ldr	r1, [r7, #24]
 80171b2:	4798      	blx	r3
 80171b4:	4603      	mov	r3, r0
 80171b6:	74fb      	strb	r3, [r7, #19]
 80171b8:	e001      	b.n	80171be <tcp_input+0x66e>
 80171ba:	2300      	movs	r3, #0
 80171bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80171be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80171c2:	f113 0f0d 	cmn.w	r3, #13
 80171c6:	f000 8096 	beq.w	80172f6 <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 80171ca:	4b53      	ldr	r3, [pc, #332]	@ (8017318 <tcp_input+0x7c8>)
 80171cc:	2200      	movs	r2, #0
 80171ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80171d0:	69b8      	ldr	r0, [r7, #24]
 80171d2:	f000 f925 	bl	8017420 <tcp_input_delayed_close>
 80171d6:	4603      	mov	r3, r0
 80171d8:	2b00      	cmp	r3, #0
 80171da:	f040 808e 	bne.w	80172fa <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80171de:	4b4c      	ldr	r3, [pc, #304]	@ (8017310 <tcp_input+0x7c0>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d041      	beq.n	801726a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80171e6:	69bb      	ldr	r3, [r7, #24]
 80171e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d006      	beq.n	80171fc <tcp_input+0x6ac>
 80171ee:	4b4f      	ldr	r3, [pc, #316]	@ (801732c <tcp_input+0x7dc>)
 80171f0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80171f4:	494e      	ldr	r1, [pc, #312]	@ (8017330 <tcp_input+0x7e0>)
 80171f6:	484f      	ldr	r0, [pc, #316]	@ (8017334 <tcp_input+0x7e4>)
 80171f8:	f009 fa4c 	bl	8020694 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80171fc:	69bb      	ldr	r3, [r7, #24]
 80171fe:	8b5b      	ldrh	r3, [r3, #26]
 8017200:	f003 0310 	and.w	r3, r3, #16
 8017204:	2b00      	cmp	r3, #0
 8017206:	d008      	beq.n	801721a <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017208:	4b41      	ldr	r3, [pc, #260]	@ (8017310 <tcp_input+0x7c0>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	4618      	mov	r0, r3
 801720e:	f7fd fbe5 	bl	80149dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017212:	69b8      	ldr	r0, [r7, #24]
 8017214:	f7fe fa1e 	bl	8015654 <tcp_abort>
            goto aborted;
 8017218:	e091      	b.n	801733e <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801721a:	69bb      	ldr	r3, [r7, #24]
 801721c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017220:	2b00      	cmp	r3, #0
 8017222:	d00c      	beq.n	801723e <tcp_input+0x6ee>
 8017224:	69bb      	ldr	r3, [r7, #24]
 8017226:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801722a:	69bb      	ldr	r3, [r7, #24]
 801722c:	6918      	ldr	r0, [r3, #16]
 801722e:	4b38      	ldr	r3, [pc, #224]	@ (8017310 <tcp_input+0x7c0>)
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	2300      	movs	r3, #0
 8017234:	69b9      	ldr	r1, [r7, #24]
 8017236:	47a0      	blx	r4
 8017238:	4603      	mov	r3, r0
 801723a:	74fb      	strb	r3, [r7, #19]
 801723c:	e008      	b.n	8017250 <tcp_input+0x700>
 801723e:	4b34      	ldr	r3, [pc, #208]	@ (8017310 <tcp_input+0x7c0>)
 8017240:	681a      	ldr	r2, [r3, #0]
 8017242:	2300      	movs	r3, #0
 8017244:	69b9      	ldr	r1, [r7, #24]
 8017246:	2000      	movs	r0, #0
 8017248:	f7ff f814 	bl	8016274 <tcp_recv_null>
 801724c:	4603      	mov	r3, r0
 801724e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017250:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017254:	f113 0f0d 	cmn.w	r3, #13
 8017258:	d051      	beq.n	80172fe <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801725a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d003      	beq.n	801726a <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017262:	4b2b      	ldr	r3, [pc, #172]	@ (8017310 <tcp_input+0x7c0>)
 8017264:	681a      	ldr	r2, [r3, #0]
 8017266:	69bb      	ldr	r3, [r7, #24]
 8017268:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801726a:	4b2a      	ldr	r3, [pc, #168]	@ (8017314 <tcp_input+0x7c4>)
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	f003 0320 	and.w	r3, r3, #32
 8017272:	2b00      	cmp	r3, #0
 8017274:	d030      	beq.n	80172d8 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 8017276:	69bb      	ldr	r3, [r7, #24]
 8017278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801727a:	2b00      	cmp	r3, #0
 801727c:	d009      	beq.n	8017292 <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801727e:	69bb      	ldr	r3, [r7, #24]
 8017280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017282:	7b5a      	ldrb	r2, [r3, #13]
 8017284:	69bb      	ldr	r3, [r7, #24]
 8017286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017288:	f042 0220 	orr.w	r2, r2, #32
 801728c:	b2d2      	uxtb	r2, r2
 801728e:	735a      	strb	r2, [r3, #13]
 8017290:	e022      	b.n	80172d8 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017292:	69bb      	ldr	r3, [r7, #24]
 8017294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017296:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801729a:	d005      	beq.n	80172a8 <tcp_input+0x758>
              pcb->rcv_wnd++;
 801729c:	69bb      	ldr	r3, [r7, #24]
 801729e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172a0:	3301      	adds	r3, #1
 80172a2:	b29a      	uxth	r2, r3
 80172a4:	69bb      	ldr	r3, [r7, #24]
 80172a6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80172a8:	69bb      	ldr	r3, [r7, #24]
 80172aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d00b      	beq.n	80172ca <tcp_input+0x77a>
 80172b2:	69bb      	ldr	r3, [r7, #24]
 80172b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80172b8:	69bb      	ldr	r3, [r7, #24]
 80172ba:	6918      	ldr	r0, [r3, #16]
 80172bc:	2300      	movs	r3, #0
 80172be:	2200      	movs	r2, #0
 80172c0:	69b9      	ldr	r1, [r7, #24]
 80172c2:	47a0      	blx	r4
 80172c4:	4603      	mov	r3, r0
 80172c6:	74fb      	strb	r3, [r7, #19]
 80172c8:	e001      	b.n	80172ce <tcp_input+0x77e>
 80172ca:	2300      	movs	r3, #0
 80172cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80172ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80172d2:	f113 0f0d 	cmn.w	r3, #13
 80172d6:	d02f      	beq.n	8017338 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80172d8:	4b12      	ldr	r3, [pc, #72]	@ (8017324 <tcp_input+0x7d4>)
 80172da:	2200      	movs	r2, #0
 80172dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80172de:	69b8      	ldr	r0, [r7, #24]
 80172e0:	f000 f89e 	bl	8017420 <tcp_input_delayed_close>
 80172e4:	4603      	mov	r3, r0
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d128      	bne.n	801733c <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80172ea:	69b8      	ldr	r0, [r7, #24]
 80172ec:	f002 ffd0 	bl	801a290 <tcp_output>
 80172f0:	e025      	b.n	801733e <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80172f2:	bf00      	nop
 80172f4:	e023      	b.n	801733e <tcp_input+0x7ee>
              goto aborted;
 80172f6:	bf00      	nop
 80172f8:	e021      	b.n	801733e <tcp_input+0x7ee>
          goto aborted;
 80172fa:	bf00      	nop
 80172fc:	e01f      	b.n	801733e <tcp_input+0x7ee>
            goto aborted;
 80172fe:	bf00      	nop
 8017300:	e01d      	b.n	801733e <tcp_input+0x7ee>
 8017302:	bf00      	nop
 8017304:	2002d36c 	.word	0x2002d36c
 8017308:	2002d484 	.word	0x2002d484
 801730c:	2002d498 	.word	0x2002d498
 8017310:	2002d4b8 	.word	0x2002d4b8
 8017314:	2002d4b5 	.word	0x2002d4b5
 8017318:	2002d4b0 	.word	0x2002d4b0
 801731c:	2002d4b4 	.word	0x2002d4b4
 8017320:	2002d4b2 	.word	0x2002d4b2
 8017324:	2002d4bc 	.word	0x2002d4bc
 8017328:	2002d478 	.word	0x2002d478
 801732c:	08023ef4 	.word	0x08023ef4
 8017330:	080240a8 	.word	0x080240a8
 8017334:	08023f40 	.word	0x08023f40
              goto aborted;
 8017338:	bf00      	nop
 801733a:	e000      	b.n	801733e <tcp_input+0x7ee>
          goto aborted;
 801733c:	bf00      	nop
    tcp_input_pcb = NULL;
 801733e:	4b2e      	ldr	r3, [pc, #184]	@ (80173f8 <tcp_input+0x8a8>)
 8017340:	2200      	movs	r2, #0
 8017342:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017344:	4b2d      	ldr	r3, [pc, #180]	@ (80173fc <tcp_input+0x8ac>)
 8017346:	2200      	movs	r2, #0
 8017348:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801734a:	4b2d      	ldr	r3, [pc, #180]	@ (8017400 <tcp_input+0x8b0>)
 801734c:	685b      	ldr	r3, [r3, #4]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d04e      	beq.n	80173f0 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 8017352:	4b2b      	ldr	r3, [pc, #172]	@ (8017400 <tcp_input+0x8b0>)
 8017354:	685b      	ldr	r3, [r3, #4]
 8017356:	4618      	mov	r0, r3
 8017358:	f7fd fb40 	bl	80149dc <pbuf_free>
      inseg.p = NULL;
 801735c:	4b28      	ldr	r3, [pc, #160]	@ (8017400 <tcp_input+0x8b0>)
 801735e:	2200      	movs	r2, #0
 8017360:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017362:	e045      	b.n	80173f0 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017364:	4b27      	ldr	r3, [pc, #156]	@ (8017404 <tcp_input+0x8b4>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	899b      	ldrh	r3, [r3, #12]
 801736a:	b29b      	uxth	r3, r3
 801736c:	4618      	mov	r0, r3
 801736e:	f7fb fd07 	bl	8012d80 <lwip_htons>
 8017372:	4603      	mov	r3, r0
 8017374:	b2db      	uxtb	r3, r3
 8017376:	f003 0304 	and.w	r3, r3, #4
 801737a:	2b00      	cmp	r3, #0
 801737c:	d128      	bne.n	80173d0 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 801737e:	4b22      	ldr	r3, [pc, #136]	@ (8017408 <tcp_input+0x8b8>)
 8017380:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8017384:	3301      	adds	r3, #1
 8017386:	b29a      	uxth	r2, r3
 8017388:	4b1f      	ldr	r3, [pc, #124]	@ (8017408 <tcp_input+0x8b8>)
 801738a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 801738e:	4b1e      	ldr	r3, [pc, #120]	@ (8017408 <tcp_input+0x8b8>)
 8017390:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017394:	3301      	adds	r3, #1
 8017396:	b29a      	uxth	r2, r3
 8017398:	4b1b      	ldr	r3, [pc, #108]	@ (8017408 <tcp_input+0x8b8>)
 801739a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801739e:	4b1b      	ldr	r3, [pc, #108]	@ (801740c <tcp_input+0x8bc>)
 80173a0:	6819      	ldr	r1, [r3, #0]
 80173a2:	4b1b      	ldr	r3, [pc, #108]	@ (8017410 <tcp_input+0x8c0>)
 80173a4:	881b      	ldrh	r3, [r3, #0]
 80173a6:	461a      	mov	r2, r3
 80173a8:	4b1a      	ldr	r3, [pc, #104]	@ (8017414 <tcp_input+0x8c4>)
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80173ae:	4b15      	ldr	r3, [pc, #84]	@ (8017404 <tcp_input+0x8b4>)
 80173b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80173b2:	885b      	ldrh	r3, [r3, #2]
 80173b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80173b6:	4a13      	ldr	r2, [pc, #76]	@ (8017404 <tcp_input+0x8b4>)
 80173b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80173ba:	8812      	ldrh	r2, [r2, #0]
 80173bc:	b292      	uxth	r2, r2
 80173be:	9202      	str	r2, [sp, #8]
 80173c0:	9301      	str	r3, [sp, #4]
 80173c2:	4b15      	ldr	r3, [pc, #84]	@ (8017418 <tcp_input+0x8c8>)
 80173c4:	9300      	str	r3, [sp, #0]
 80173c6:	4b15      	ldr	r3, [pc, #84]	@ (801741c <tcp_input+0x8cc>)
 80173c8:	4602      	mov	r2, r0
 80173ca:	2000      	movs	r0, #0
 80173cc:	f003 fd34 	bl	801ae38 <tcp_rst>
    pbuf_free(p);
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f7fd fb03 	bl	80149dc <pbuf_free>
  return;
 80173d6:	e00b      	b.n	80173f0 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 80173d8:	4b0b      	ldr	r3, [pc, #44]	@ (8017408 <tcp_input+0x8b8>)
 80173da:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80173de:	3301      	adds	r3, #1
 80173e0:	b29a      	uxth	r2, r3
 80173e2:	4b09      	ldr	r3, [pc, #36]	@ (8017408 <tcp_input+0x8b8>)
 80173e4:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80173e8:	6878      	ldr	r0, [r7, #4]
 80173ea:	f7fd faf7 	bl	80149dc <pbuf_free>
 80173ee:	e000      	b.n	80173f2 <tcp_input+0x8a2>
  return;
 80173f0:	bf00      	nop
}
 80173f2:	3724      	adds	r7, #36	@ 0x24
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd90      	pop	{r4, r7, pc}
 80173f8:	2002d4bc 	.word	0x2002d4bc
 80173fc:	2002d4b8 	.word	0x2002d4b8
 8017400:	2002d484 	.word	0x2002d484
 8017404:	2002d498 	.word	0x2002d498
 8017408:	2002d36c 	.word	0x2002d36c
 801740c:	2002d4ac 	.word	0x2002d4ac
 8017410:	2002d4b2 	.word	0x2002d4b2
 8017414:	2002d4a8 	.word	0x2002d4a8
 8017418:	2002710c 	.word	0x2002710c
 801741c:	20027110 	.word	0x20027110

08017420 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b082      	sub	sp, #8
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d106      	bne.n	801743c <tcp_input_delayed_close+0x1c>
 801742e:	4b17      	ldr	r3, [pc, #92]	@ (801748c <tcp_input_delayed_close+0x6c>)
 8017430:	f240 225a 	movw	r2, #602	@ 0x25a
 8017434:	4916      	ldr	r1, [pc, #88]	@ (8017490 <tcp_input_delayed_close+0x70>)
 8017436:	4817      	ldr	r0, [pc, #92]	@ (8017494 <tcp_input_delayed_close+0x74>)
 8017438:	f009 f92c 	bl	8020694 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801743c:	4b16      	ldr	r3, [pc, #88]	@ (8017498 <tcp_input_delayed_close+0x78>)
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	f003 0310 	and.w	r3, r3, #16
 8017444:	2b00      	cmp	r3, #0
 8017446:	d01c      	beq.n	8017482 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	8b5b      	ldrh	r3, [r3, #26]
 801744c:	f003 0310 	and.w	r3, r3, #16
 8017450:	2b00      	cmp	r3, #0
 8017452:	d10d      	bne.n	8017470 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801745a:	2b00      	cmp	r3, #0
 801745c:	d008      	beq.n	8017470 <tcp_input_delayed_close+0x50>
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	6912      	ldr	r2, [r2, #16]
 8017468:	f06f 010e 	mvn.w	r1, #14
 801746c:	4610      	mov	r0, r2
 801746e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017470:	6879      	ldr	r1, [r7, #4]
 8017472:	480a      	ldr	r0, [pc, #40]	@ (801749c <tcp_input_delayed_close+0x7c>)
 8017474:	f7ff f9ee 	bl	8016854 <tcp_pcb_remove>
    tcp_free(pcb);
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f7fd fda7 	bl	8014fcc <tcp_free>
    return 1;
 801747e:	2301      	movs	r3, #1
 8017480:	e000      	b.n	8017484 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017482:	2300      	movs	r3, #0
}
 8017484:	4618      	mov	r0, r3
 8017486:	3708      	adds	r7, #8
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}
 801748c:	08023ef4 	.word	0x08023ef4
 8017490:	080240c4 	.word	0x080240c4
 8017494:	08023f40 	.word	0x08023f40
 8017498:	2002d4b5 	.word	0x2002d4b5
 801749c:	2002d478 	.word	0x2002d478

080174a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80174a0:	b590      	push	{r4, r7, lr}
 80174a2:	b08b      	sub	sp, #44	@ 0x2c
 80174a4:	af04      	add	r7, sp, #16
 80174a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80174a8:	4b73      	ldr	r3, [pc, #460]	@ (8017678 <tcp_listen_input+0x1d8>)
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	f003 0304 	and.w	r3, r3, #4
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	f040 80da 	bne.w	801766a <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d106      	bne.n	80174ca <tcp_listen_input+0x2a>
 80174bc:	4b6f      	ldr	r3, [pc, #444]	@ (801767c <tcp_listen_input+0x1dc>)
 80174be:	f240 2281 	movw	r2, #641	@ 0x281
 80174c2:	496f      	ldr	r1, [pc, #444]	@ (8017680 <tcp_listen_input+0x1e0>)
 80174c4:	486f      	ldr	r0, [pc, #444]	@ (8017684 <tcp_listen_input+0x1e4>)
 80174c6:	f009 f8e5 	bl	8020694 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80174ca:	4b6b      	ldr	r3, [pc, #428]	@ (8017678 <tcp_listen_input+0x1d8>)
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	f003 0310 	and.w	r3, r3, #16
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d019      	beq.n	801750a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80174d6:	4b6c      	ldr	r3, [pc, #432]	@ (8017688 <tcp_listen_input+0x1e8>)
 80174d8:	6819      	ldr	r1, [r3, #0]
 80174da:	4b6c      	ldr	r3, [pc, #432]	@ (801768c <tcp_listen_input+0x1ec>)
 80174dc:	881b      	ldrh	r3, [r3, #0]
 80174de:	461a      	mov	r2, r3
 80174e0:	4b6b      	ldr	r3, [pc, #428]	@ (8017690 <tcp_listen_input+0x1f0>)
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80174e6:	4b6b      	ldr	r3, [pc, #428]	@ (8017694 <tcp_listen_input+0x1f4>)
 80174e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80174ea:	885b      	ldrh	r3, [r3, #2]
 80174ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80174ee:	4a69      	ldr	r2, [pc, #420]	@ (8017694 <tcp_listen_input+0x1f4>)
 80174f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80174f2:	8812      	ldrh	r2, [r2, #0]
 80174f4:	b292      	uxth	r2, r2
 80174f6:	9202      	str	r2, [sp, #8]
 80174f8:	9301      	str	r3, [sp, #4]
 80174fa:	4b67      	ldr	r3, [pc, #412]	@ (8017698 <tcp_listen_input+0x1f8>)
 80174fc:	9300      	str	r3, [sp, #0]
 80174fe:	4b67      	ldr	r3, [pc, #412]	@ (801769c <tcp_listen_input+0x1fc>)
 8017500:	4602      	mov	r2, r0
 8017502:	6878      	ldr	r0, [r7, #4]
 8017504:	f003 fc98 	bl	801ae38 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017508:	e0b1      	b.n	801766e <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 801750a:	4b5b      	ldr	r3, [pc, #364]	@ (8017678 <tcp_listen_input+0x1d8>)
 801750c:	781b      	ldrb	r3, [r3, #0]
 801750e:	f003 0302 	and.w	r3, r3, #2
 8017512:	2b00      	cmp	r3, #0
 8017514:	f000 80ab 	beq.w	801766e <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	7d5b      	ldrb	r3, [r3, #21]
 801751c:	4618      	mov	r0, r3
 801751e:	f7fe ffcd 	bl	80164bc <tcp_alloc>
 8017522:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017524:	697b      	ldr	r3, [r7, #20]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d119      	bne.n	801755e <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 801752a:	4b5d      	ldr	r3, [pc, #372]	@ (80176a0 <tcp_listen_input+0x200>)
 801752c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8017530:	3301      	adds	r3, #1
 8017532:	b29a      	uxth	r2, r3
 8017534:	4b5a      	ldr	r3, [pc, #360]	@ (80176a0 <tcp_listen_input+0x200>)
 8017536:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	699b      	ldr	r3, [r3, #24]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d00a      	beq.n	8017558 <tcp_listen_input+0xb8>
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	699b      	ldr	r3, [r3, #24]
 8017546:	687a      	ldr	r2, [r7, #4]
 8017548:	6910      	ldr	r0, [r2, #16]
 801754a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801754e:	2100      	movs	r1, #0
 8017550:	4798      	blx	r3
 8017552:	4603      	mov	r3, r0
 8017554:	73bb      	strb	r3, [r7, #14]
      return;
 8017556:	e08b      	b.n	8017670 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017558:	23f0      	movs	r3, #240	@ 0xf0
 801755a:	73bb      	strb	r3, [r7, #14]
      return;
 801755c:	e088      	b.n	8017670 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801755e:	4b51      	ldr	r3, [pc, #324]	@ (80176a4 <tcp_listen_input+0x204>)
 8017560:	695a      	ldr	r2, [r3, #20]
 8017562:	697b      	ldr	r3, [r7, #20]
 8017564:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017566:	4b4f      	ldr	r3, [pc, #316]	@ (80176a4 <tcp_listen_input+0x204>)
 8017568:	691a      	ldr	r2, [r3, #16]
 801756a:	697b      	ldr	r3, [r7, #20]
 801756c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	8ada      	ldrh	r2, [r3, #22]
 8017572:	697b      	ldr	r3, [r7, #20]
 8017574:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017576:	4b47      	ldr	r3, [pc, #284]	@ (8017694 <tcp_listen_input+0x1f4>)
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	881b      	ldrh	r3, [r3, #0]
 801757c:	b29a      	uxth	r2, r3
 801757e:	697b      	ldr	r3, [r7, #20]
 8017580:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017582:	697b      	ldr	r3, [r7, #20]
 8017584:	2203      	movs	r2, #3
 8017586:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017588:	4b41      	ldr	r3, [pc, #260]	@ (8017690 <tcp_listen_input+0x1f0>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	1c5a      	adds	r2, r3, #1
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017596:	697b      	ldr	r3, [r7, #20]
 8017598:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801759a:	6978      	ldr	r0, [r7, #20]
 801759c:	f7ff f9ee 	bl	801697c <tcp_next_iss>
 80175a0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80175a2:	697b      	ldr	r3, [r7, #20]
 80175a4:	693a      	ldr	r2, [r7, #16]
 80175a6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80175a8:	697b      	ldr	r3, [r7, #20]
 80175aa:	693a      	ldr	r2, [r7, #16]
 80175ac:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80175ae:	697b      	ldr	r3, [r7, #20]
 80175b0:	693a      	ldr	r2, [r7, #16]
 80175b2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	693a      	ldr	r2, [r7, #16]
 80175b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80175ba:	4b35      	ldr	r3, [pc, #212]	@ (8017690 <tcp_listen_input+0x1f0>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	1e5a      	subs	r2, r3, #1
 80175c0:	697b      	ldr	r3, [r7, #20]
 80175c2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	691a      	ldr	r2, [r3, #16]
 80175c8:	697b      	ldr	r3, [r7, #20]
 80175ca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80175cc:	697b      	ldr	r3, [r7, #20]
 80175ce:	687a      	ldr	r2, [r7, #4]
 80175d0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	7a5b      	ldrb	r3, [r3, #9]
 80175d6:	f003 030c 	and.w	r3, r3, #12
 80175da:	b2da      	uxtb	r2, r3
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	7a1a      	ldrb	r2, [r3, #8]
 80175e4:	697b      	ldr	r3, [r7, #20]
 80175e6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80175e8:	4b2f      	ldr	r3, [pc, #188]	@ (80176a8 <tcp_listen_input+0x208>)
 80175ea:	681a      	ldr	r2, [r3, #0]
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	60da      	str	r2, [r3, #12]
 80175f0:	4a2d      	ldr	r2, [pc, #180]	@ (80176a8 <tcp_listen_input+0x208>)
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	6013      	str	r3, [r2, #0]
 80175f6:	f003 fde1 	bl	801b1bc <tcp_timer_needed>
 80175fa:	4b2c      	ldr	r3, [pc, #176]	@ (80176ac <tcp_listen_input+0x20c>)
 80175fc:	2201      	movs	r2, #1
 80175fe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017600:	6978      	ldr	r0, [r7, #20]
 8017602:	f001 fd8d 	bl	8019120 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017606:	4b23      	ldr	r3, [pc, #140]	@ (8017694 <tcp_listen_input+0x1f4>)
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	89db      	ldrh	r3, [r3, #14]
 801760c:	b29a      	uxth	r2, r3
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017614:	697b      	ldr	r3, [r7, #20]
 8017616:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017624:	697b      	ldr	r3, [r7, #20]
 8017626:	3304      	adds	r3, #4
 8017628:	4618      	mov	r0, r3
 801762a:	f006 f861 	bl	801d6f0 <ip4_route>
 801762e:	4601      	mov	r1, r0
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	3304      	adds	r3, #4
 8017634:	461a      	mov	r2, r3
 8017636:	4620      	mov	r0, r4
 8017638:	f7ff f9c6 	bl	80169c8 <tcp_eff_send_mss_netif>
 801763c:	4603      	mov	r3, r0
 801763e:	461a      	mov	r2, r3
 8017640:	697b      	ldr	r3, [r7, #20]
 8017642:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017644:	2112      	movs	r1, #18
 8017646:	6978      	ldr	r0, [r7, #20]
 8017648:	f002 fd22 	bl	801a090 <tcp_enqueue_flags>
 801764c:	4603      	mov	r3, r0
 801764e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d004      	beq.n	8017662 <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8017658:	2100      	movs	r1, #0
 801765a:	6978      	ldr	r0, [r7, #20]
 801765c:	f7fd ff3c 	bl	80154d8 <tcp_abandon>
      return;
 8017660:	e006      	b.n	8017670 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 8017662:	6978      	ldr	r0, [r7, #20]
 8017664:	f002 fe14 	bl	801a290 <tcp_output>
  return;
 8017668:	e001      	b.n	801766e <tcp_listen_input+0x1ce>
    return;
 801766a:	bf00      	nop
 801766c:	e000      	b.n	8017670 <tcp_listen_input+0x1d0>
  return;
 801766e:	bf00      	nop
}
 8017670:	371c      	adds	r7, #28
 8017672:	46bd      	mov	sp, r7
 8017674:	bd90      	pop	{r4, r7, pc}
 8017676:	bf00      	nop
 8017678:	2002d4b4 	.word	0x2002d4b4
 801767c:	08023ef4 	.word	0x08023ef4
 8017680:	080240ec 	.word	0x080240ec
 8017684:	08023f40 	.word	0x08023f40
 8017688:	2002d4ac 	.word	0x2002d4ac
 801768c:	2002d4b2 	.word	0x2002d4b2
 8017690:	2002d4a8 	.word	0x2002d4a8
 8017694:	2002d498 	.word	0x2002d498
 8017698:	2002710c 	.word	0x2002710c
 801769c:	20027110 	.word	0x20027110
 80176a0:	2002d36c 	.word	0x2002d36c
 80176a4:	200270fc 	.word	0x200270fc
 80176a8:	2002d478 	.word	0x2002d478
 80176ac:	2002d480 	.word	0x2002d480

080176b0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b086      	sub	sp, #24
 80176b4:	af04      	add	r7, sp, #16
 80176b6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80176b8:	4b2f      	ldr	r3, [pc, #188]	@ (8017778 <tcp_timewait_input+0xc8>)
 80176ba:	781b      	ldrb	r3, [r3, #0]
 80176bc:	f003 0304 	and.w	r3, r3, #4
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d153      	bne.n	801776c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d106      	bne.n	80176d8 <tcp_timewait_input+0x28>
 80176ca:	4b2c      	ldr	r3, [pc, #176]	@ (801777c <tcp_timewait_input+0xcc>)
 80176cc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80176d0:	492b      	ldr	r1, [pc, #172]	@ (8017780 <tcp_timewait_input+0xd0>)
 80176d2:	482c      	ldr	r0, [pc, #176]	@ (8017784 <tcp_timewait_input+0xd4>)
 80176d4:	f008 ffde 	bl	8020694 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80176d8:	4b27      	ldr	r3, [pc, #156]	@ (8017778 <tcp_timewait_input+0xc8>)
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	f003 0302 	and.w	r3, r3, #2
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d02a      	beq.n	801773a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80176e4:	4b28      	ldr	r3, [pc, #160]	@ (8017788 <tcp_timewait_input+0xd8>)
 80176e6:	681a      	ldr	r2, [r3, #0]
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176ec:	1ad3      	subs	r3, r2, r3
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	db2d      	blt.n	801774e <tcp_timewait_input+0x9e>
 80176f2:	4b25      	ldr	r3, [pc, #148]	@ (8017788 <tcp_timewait_input+0xd8>)
 80176f4:	681a      	ldr	r2, [r3, #0]
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176fa:	6879      	ldr	r1, [r7, #4]
 80176fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80176fe:	440b      	add	r3, r1
 8017700:	1ad3      	subs	r3, r2, r3
 8017702:	2b00      	cmp	r3, #0
 8017704:	dc23      	bgt.n	801774e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017706:	4b21      	ldr	r3, [pc, #132]	@ (801778c <tcp_timewait_input+0xdc>)
 8017708:	6819      	ldr	r1, [r3, #0]
 801770a:	4b21      	ldr	r3, [pc, #132]	@ (8017790 <tcp_timewait_input+0xe0>)
 801770c:	881b      	ldrh	r3, [r3, #0]
 801770e:	461a      	mov	r2, r3
 8017710:	4b1d      	ldr	r3, [pc, #116]	@ (8017788 <tcp_timewait_input+0xd8>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017716:	4b1f      	ldr	r3, [pc, #124]	@ (8017794 <tcp_timewait_input+0xe4>)
 8017718:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801771a:	885b      	ldrh	r3, [r3, #2]
 801771c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801771e:	4a1d      	ldr	r2, [pc, #116]	@ (8017794 <tcp_timewait_input+0xe4>)
 8017720:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017722:	8812      	ldrh	r2, [r2, #0]
 8017724:	b292      	uxth	r2, r2
 8017726:	9202      	str	r2, [sp, #8]
 8017728:	9301      	str	r3, [sp, #4]
 801772a:	4b1b      	ldr	r3, [pc, #108]	@ (8017798 <tcp_timewait_input+0xe8>)
 801772c:	9300      	str	r3, [sp, #0]
 801772e:	4b1b      	ldr	r3, [pc, #108]	@ (801779c <tcp_timewait_input+0xec>)
 8017730:	4602      	mov	r2, r0
 8017732:	6878      	ldr	r0, [r7, #4]
 8017734:	f003 fb80 	bl	801ae38 <tcp_rst>
      return;
 8017738:	e01b      	b.n	8017772 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801773a:	4b0f      	ldr	r3, [pc, #60]	@ (8017778 <tcp_timewait_input+0xc8>)
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	f003 0301 	and.w	r3, r3, #1
 8017742:	2b00      	cmp	r3, #0
 8017744:	d003      	beq.n	801774e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017746:	4b16      	ldr	r3, [pc, #88]	@ (80177a0 <tcp_timewait_input+0xf0>)
 8017748:	681a      	ldr	r2, [r3, #0]
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801774e:	4b10      	ldr	r3, [pc, #64]	@ (8017790 <tcp_timewait_input+0xe0>)
 8017750:	881b      	ldrh	r3, [r3, #0]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d00c      	beq.n	8017770 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	8b5b      	ldrh	r3, [r3, #26]
 801775a:	f043 0302 	orr.w	r3, r3, #2
 801775e:	b29a      	uxth	r2, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	f002 fd93 	bl	801a290 <tcp_output>
  }
  return;
 801776a:	e001      	b.n	8017770 <tcp_timewait_input+0xc0>
    return;
 801776c:	bf00      	nop
 801776e:	e000      	b.n	8017772 <tcp_timewait_input+0xc2>
  return;
 8017770:	bf00      	nop
}
 8017772:	3708      	adds	r7, #8
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}
 8017778:	2002d4b4 	.word	0x2002d4b4
 801777c:	08023ef4 	.word	0x08023ef4
 8017780:	0802410c 	.word	0x0802410c
 8017784:	08023f40 	.word	0x08023f40
 8017788:	2002d4a8 	.word	0x2002d4a8
 801778c:	2002d4ac 	.word	0x2002d4ac
 8017790:	2002d4b2 	.word	0x2002d4b2
 8017794:	2002d498 	.word	0x2002d498
 8017798:	2002710c 	.word	0x2002710c
 801779c:	20027110 	.word	0x20027110
 80177a0:	2002d46c 	.word	0x2002d46c

080177a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80177a4:	b590      	push	{r4, r7, lr}
 80177a6:	b08d      	sub	sp, #52	@ 0x34
 80177a8:	af04      	add	r7, sp, #16
 80177aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80177ac:	2300      	movs	r3, #0
 80177ae:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 80177b0:	2300      	movs	r3, #0
 80177b2:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d106      	bne.n	80177c8 <tcp_process+0x24>
 80177ba:	4b9d      	ldr	r3, [pc, #628]	@ (8017a30 <tcp_process+0x28c>)
 80177bc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80177c0:	499c      	ldr	r1, [pc, #624]	@ (8017a34 <tcp_process+0x290>)
 80177c2:	489d      	ldr	r0, [pc, #628]	@ (8017a38 <tcp_process+0x294>)
 80177c4:	f008 ff66 	bl	8020694 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80177c8:	4b9c      	ldr	r3, [pc, #624]	@ (8017a3c <tcp_process+0x298>)
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	f003 0304 	and.w	r3, r3, #4
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d04e      	beq.n	8017872 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	7d1b      	ldrb	r3, [r3, #20]
 80177d8:	2b02      	cmp	r3, #2
 80177da:	d108      	bne.n	80177ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80177e0:	4b97      	ldr	r3, [pc, #604]	@ (8017a40 <tcp_process+0x29c>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	429a      	cmp	r2, r3
 80177e6:	d123      	bne.n	8017830 <tcp_process+0x8c>
        acceptable = 1;
 80177e8:	2301      	movs	r3, #1
 80177ea:	77fb      	strb	r3, [r7, #31]
 80177ec:	e020      	b.n	8017830 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80177f2:	4b94      	ldr	r3, [pc, #592]	@ (8017a44 <tcp_process+0x2a0>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d102      	bne.n	8017800 <tcp_process+0x5c>
        acceptable = 1;
 80177fa:	2301      	movs	r3, #1
 80177fc:	77fb      	strb	r3, [r7, #31]
 80177fe:	e017      	b.n	8017830 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017800:	4b90      	ldr	r3, [pc, #576]	@ (8017a44 <tcp_process+0x2a0>)
 8017802:	681a      	ldr	r2, [r3, #0]
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017808:	1ad3      	subs	r3, r2, r3
 801780a:	2b00      	cmp	r3, #0
 801780c:	db10      	blt.n	8017830 <tcp_process+0x8c>
 801780e:	4b8d      	ldr	r3, [pc, #564]	@ (8017a44 <tcp_process+0x2a0>)
 8017810:	681a      	ldr	r2, [r3, #0]
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017816:	6879      	ldr	r1, [r7, #4]
 8017818:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801781a:	440b      	add	r3, r1
 801781c:	1ad3      	subs	r3, r2, r3
 801781e:	2b00      	cmp	r3, #0
 8017820:	dc06      	bgt.n	8017830 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	8b5b      	ldrh	r3, [r3, #26]
 8017826:	f043 0302 	orr.w	r3, r3, #2
 801782a:	b29a      	uxth	r2, r3
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017830:	7ffb      	ldrb	r3, [r7, #31]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d01b      	beq.n	801786e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	7d1b      	ldrb	r3, [r3, #20]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d106      	bne.n	801784c <tcp_process+0xa8>
 801783e:	4b7c      	ldr	r3, [pc, #496]	@ (8017a30 <tcp_process+0x28c>)
 8017840:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8017844:	4980      	ldr	r1, [pc, #512]	@ (8017a48 <tcp_process+0x2a4>)
 8017846:	487c      	ldr	r0, [pc, #496]	@ (8017a38 <tcp_process+0x294>)
 8017848:	f008 ff24 	bl	8020694 <iprintf>
      recv_flags |= TF_RESET;
 801784c:	4b7f      	ldr	r3, [pc, #508]	@ (8017a4c <tcp_process+0x2a8>)
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	f043 0308 	orr.w	r3, r3, #8
 8017854:	b2da      	uxtb	r2, r3
 8017856:	4b7d      	ldr	r3, [pc, #500]	@ (8017a4c <tcp_process+0x2a8>)
 8017858:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	8b5b      	ldrh	r3, [r3, #26]
 801785e:	f023 0301 	bic.w	r3, r3, #1
 8017862:	b29a      	uxth	r2, r3
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017868:	f06f 030d 	mvn.w	r3, #13
 801786c:	e37a      	b.n	8017f64 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801786e:	2300      	movs	r3, #0
 8017870:	e378      	b.n	8017f64 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017872:	4b72      	ldr	r3, [pc, #456]	@ (8017a3c <tcp_process+0x298>)
 8017874:	781b      	ldrb	r3, [r3, #0]
 8017876:	f003 0302 	and.w	r3, r3, #2
 801787a:	2b00      	cmp	r3, #0
 801787c:	d010      	beq.n	80178a0 <tcp_process+0xfc>
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	7d1b      	ldrb	r3, [r3, #20]
 8017882:	2b02      	cmp	r3, #2
 8017884:	d00c      	beq.n	80178a0 <tcp_process+0xfc>
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	7d1b      	ldrb	r3, [r3, #20]
 801788a:	2b03      	cmp	r3, #3
 801788c:	d008      	beq.n	80178a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	8b5b      	ldrh	r3, [r3, #26]
 8017892:	f043 0302 	orr.w	r3, r3, #2
 8017896:	b29a      	uxth	r2, r3
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801789c:	2300      	movs	r3, #0
 801789e:	e361      	b.n	8017f64 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	8b5b      	ldrh	r3, [r3, #26]
 80178a4:	f003 0310 	and.w	r3, r3, #16
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d103      	bne.n	80178b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80178ac:	4b68      	ldr	r3, [pc, #416]	@ (8017a50 <tcp_process+0x2ac>)
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	2200      	movs	r2, #0
 80178b8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	2200      	movs	r2, #0
 80178c0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80178c4:	6878      	ldr	r0, [r7, #4]
 80178c6:	f001 fc2b 	bl	8019120 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	7d1b      	ldrb	r3, [r3, #20]
 80178ce:	3b02      	subs	r3, #2
 80178d0:	2b07      	cmp	r3, #7
 80178d2:	f200 8337 	bhi.w	8017f44 <tcp_process+0x7a0>
 80178d6:	a201      	add	r2, pc, #4	@ (adr r2, 80178dc <tcp_process+0x138>)
 80178d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178dc:	080178fd 	.word	0x080178fd
 80178e0:	08017b2d 	.word	0x08017b2d
 80178e4:	08017ca5 	.word	0x08017ca5
 80178e8:	08017ccf 	.word	0x08017ccf
 80178ec:	08017df3 	.word	0x08017df3
 80178f0:	08017ca5 	.word	0x08017ca5
 80178f4:	08017e7f 	.word	0x08017e7f
 80178f8:	08017f0f 	.word	0x08017f0f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80178fc:	4b4f      	ldr	r3, [pc, #316]	@ (8017a3c <tcp_process+0x298>)
 80178fe:	781b      	ldrb	r3, [r3, #0]
 8017900:	f003 0310 	and.w	r3, r3, #16
 8017904:	2b00      	cmp	r3, #0
 8017906:	f000 80e4 	beq.w	8017ad2 <tcp_process+0x32e>
 801790a:	4b4c      	ldr	r3, [pc, #304]	@ (8017a3c <tcp_process+0x298>)
 801790c:	781b      	ldrb	r3, [r3, #0]
 801790e:	f003 0302 	and.w	r3, r3, #2
 8017912:	2b00      	cmp	r3, #0
 8017914:	f000 80dd 	beq.w	8017ad2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801791c:	1c5a      	adds	r2, r3, #1
 801791e:	4b48      	ldr	r3, [pc, #288]	@ (8017a40 <tcp_process+0x29c>)
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	429a      	cmp	r2, r3
 8017924:	f040 80d5 	bne.w	8017ad2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017928:	4b46      	ldr	r3, [pc, #280]	@ (8017a44 <tcp_process+0x2a0>)
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	1c5a      	adds	r2, r3, #1
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801793a:	4b41      	ldr	r3, [pc, #260]	@ (8017a40 <tcp_process+0x29c>)
 801793c:	681a      	ldr	r2, [r3, #0]
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017942:	4b44      	ldr	r3, [pc, #272]	@ (8017a54 <tcp_process+0x2b0>)
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	89db      	ldrh	r3, [r3, #14]
 8017948:	b29a      	uxth	r2, r3
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801795c:	4b39      	ldr	r3, [pc, #228]	@ (8017a44 <tcp_process+0x2a0>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	1e5a      	subs	r2, r3, #1
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	2204      	movs	r2, #4
 801796a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	3304      	adds	r3, #4
 8017974:	4618      	mov	r0, r3
 8017976:	f005 febb 	bl	801d6f0 <ip4_route>
 801797a:	4601      	mov	r1, r0
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	3304      	adds	r3, #4
 8017980:	461a      	mov	r2, r3
 8017982:	4620      	mov	r0, r4
 8017984:	f7ff f820 	bl	80169c8 <tcp_eff_send_mss_netif>
 8017988:	4603      	mov	r3, r0
 801798a:	461a      	mov	r2, r3
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017994:	009a      	lsls	r2, r3, #2
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801799a:	005b      	lsls	r3, r3, #1
 801799c:	f241 111c 	movw	r1, #4380	@ 0x111c
 80179a0:	428b      	cmp	r3, r1
 80179a2:	bf38      	it	cc
 80179a4:	460b      	movcc	r3, r1
 80179a6:	429a      	cmp	r2, r3
 80179a8:	d204      	bcs.n	80179b4 <tcp_process+0x210>
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179ae:	009b      	lsls	r3, r3, #2
 80179b0:	b29b      	uxth	r3, r3
 80179b2:	e00d      	b.n	80179d0 <tcp_process+0x22c>
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179b8:	005b      	lsls	r3, r3, #1
 80179ba:	f241 121c 	movw	r2, #4380	@ 0x111c
 80179be:	4293      	cmp	r3, r2
 80179c0:	d904      	bls.n	80179cc <tcp_process+0x228>
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179c6:	005b      	lsls	r3, r3, #1
 80179c8:	b29b      	uxth	r3, r3
 80179ca:	e001      	b.n	80179d0 <tcp_process+0x22c>
 80179cc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80179d0:	687a      	ldr	r2, [r7, #4]
 80179d2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d106      	bne.n	80179ee <tcp_process+0x24a>
 80179e0:	4b13      	ldr	r3, [pc, #76]	@ (8017a30 <tcp_process+0x28c>)
 80179e2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80179e6:	491c      	ldr	r1, [pc, #112]	@ (8017a58 <tcp_process+0x2b4>)
 80179e8:	4813      	ldr	r0, [pc, #76]	@ (8017a38 <tcp_process+0x294>)
 80179ea:	f008 fe53 	bl	8020694 <iprintf>
        --pcb->snd_queuelen;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80179f4:	3b01      	subs	r3, #1
 80179f6:	b29a      	uxth	r2, r3
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a02:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8017a04:	697b      	ldr	r3, [r7, #20]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d12a      	bne.n	8017a60 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a0e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017a10:	697b      	ldr	r3, [r7, #20]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d106      	bne.n	8017a24 <tcp_process+0x280>
 8017a16:	4b06      	ldr	r3, [pc, #24]	@ (8017a30 <tcp_process+0x28c>)
 8017a18:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017a1c:	490f      	ldr	r1, [pc, #60]	@ (8017a5c <tcp_process+0x2b8>)
 8017a1e:	4806      	ldr	r0, [pc, #24]	@ (8017a38 <tcp_process+0x294>)
 8017a20:	f008 fe38 	bl	8020694 <iprintf>
          pcb->unsent = rseg->next;
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	681a      	ldr	r2, [r3, #0]
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017a2c:	e01c      	b.n	8017a68 <tcp_process+0x2c4>
 8017a2e:	bf00      	nop
 8017a30:	08023ef4 	.word	0x08023ef4
 8017a34:	0802412c 	.word	0x0802412c
 8017a38:	08023f40 	.word	0x08023f40
 8017a3c:	2002d4b4 	.word	0x2002d4b4
 8017a40:	2002d4ac 	.word	0x2002d4ac
 8017a44:	2002d4a8 	.word	0x2002d4a8
 8017a48:	08024148 	.word	0x08024148
 8017a4c:	2002d4b5 	.word	0x2002d4b5
 8017a50:	2002d46c 	.word	0x2002d46c
 8017a54:	2002d498 	.word	0x2002d498
 8017a58:	08024168 	.word	0x08024168
 8017a5c:	08024180 	.word	0x08024180
        } else {
          pcb->unacked = rseg->next;
 8017a60:	697b      	ldr	r3, [r7, #20]
 8017a62:	681a      	ldr	r2, [r3, #0]
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017a68:	6978      	ldr	r0, [r7, #20]
 8017a6a:	f7fe fbbe 	bl	80161ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d104      	bne.n	8017a80 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a7c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017a7e:	e006      	b.n	8017a8e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2200      	movs	r2, #0
 8017a84:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	2200      	movs	r2, #0
 8017a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d00a      	beq.n	8017aae <tcp_process+0x30a>
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017a9e:	687a      	ldr	r2, [r7, #4]
 8017aa0:	6910      	ldr	r0, [r2, #16]
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	6879      	ldr	r1, [r7, #4]
 8017aa6:	4798      	blx	r3
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	77bb      	strb	r3, [r7, #30]
 8017aac:	e001      	b.n	8017ab2 <tcp_process+0x30e>
 8017aae:	2300      	movs	r3, #0
 8017ab0:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8017ab2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017ab6:	f113 0f0d 	cmn.w	r3, #13
 8017aba:	d102      	bne.n	8017ac2 <tcp_process+0x31e>
          return ERR_ABRT;
 8017abc:	f06f 030c 	mvn.w	r3, #12
 8017ac0:	e250      	b.n	8017f64 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	8b5b      	ldrh	r3, [r3, #26]
 8017ac6:	f043 0302 	orr.w	r3, r3, #2
 8017aca:	b29a      	uxth	r2, r3
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017ad0:	e23a      	b.n	8017f48 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017ad2:	4b98      	ldr	r3, [pc, #608]	@ (8017d34 <tcp_process+0x590>)
 8017ad4:	781b      	ldrb	r3, [r3, #0]
 8017ad6:	f003 0310 	and.w	r3, r3, #16
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	f000 8234 	beq.w	8017f48 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ae0:	4b95      	ldr	r3, [pc, #596]	@ (8017d38 <tcp_process+0x594>)
 8017ae2:	6819      	ldr	r1, [r3, #0]
 8017ae4:	4b95      	ldr	r3, [pc, #596]	@ (8017d3c <tcp_process+0x598>)
 8017ae6:	881b      	ldrh	r3, [r3, #0]
 8017ae8:	461a      	mov	r2, r3
 8017aea:	4b95      	ldr	r3, [pc, #596]	@ (8017d40 <tcp_process+0x59c>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017af0:	4b94      	ldr	r3, [pc, #592]	@ (8017d44 <tcp_process+0x5a0>)
 8017af2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017af4:	885b      	ldrh	r3, [r3, #2]
 8017af6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017af8:	4a92      	ldr	r2, [pc, #584]	@ (8017d44 <tcp_process+0x5a0>)
 8017afa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017afc:	8812      	ldrh	r2, [r2, #0]
 8017afe:	b292      	uxth	r2, r2
 8017b00:	9202      	str	r2, [sp, #8]
 8017b02:	9301      	str	r3, [sp, #4]
 8017b04:	4b90      	ldr	r3, [pc, #576]	@ (8017d48 <tcp_process+0x5a4>)
 8017b06:	9300      	str	r3, [sp, #0]
 8017b08:	4b90      	ldr	r3, [pc, #576]	@ (8017d4c <tcp_process+0x5a8>)
 8017b0a:	4602      	mov	r2, r0
 8017b0c:	6878      	ldr	r0, [r7, #4]
 8017b0e:	f003 f993 	bl	801ae38 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017b18:	2b05      	cmp	r3, #5
 8017b1a:	f200 8215 	bhi.w	8017f48 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2200      	movs	r2, #0
 8017b22:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017b24:	6878      	ldr	r0, [r7, #4]
 8017b26:	f002 ff55 	bl	801a9d4 <tcp_rexmit_rto>
      break;
 8017b2a:	e20d      	b.n	8017f48 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017b2c:	4b81      	ldr	r3, [pc, #516]	@ (8017d34 <tcp_process+0x590>)
 8017b2e:	781b      	ldrb	r3, [r3, #0]
 8017b30:	f003 0310 	and.w	r3, r3, #16
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	f000 80a1 	beq.w	8017c7c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8017d38 <tcp_process+0x594>)
 8017b3c:	681a      	ldr	r2, [r3, #0]
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b42:	1ad3      	subs	r3, r2, r3
 8017b44:	3b01      	subs	r3, #1
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	db7e      	blt.n	8017c48 <tcp_process+0x4a4>
 8017b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8017d38 <tcp_process+0x594>)
 8017b4c:	681a      	ldr	r2, [r3, #0]
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b52:	1ad3      	subs	r3, r2, r3
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	dc77      	bgt.n	8017c48 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2204      	movs	r2, #4
 8017b5c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d102      	bne.n	8017b6c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017b66:	23fa      	movs	r3, #250	@ 0xfa
 8017b68:	77bb      	strb	r3, [r7, #30]
 8017b6a:	e01d      	b.n	8017ba8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017b70:	699b      	ldr	r3, [r3, #24]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d106      	bne.n	8017b84 <tcp_process+0x3e0>
 8017b76:	4b76      	ldr	r3, [pc, #472]	@ (8017d50 <tcp_process+0x5ac>)
 8017b78:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017b7c:	4975      	ldr	r1, [pc, #468]	@ (8017d54 <tcp_process+0x5b0>)
 8017b7e:	4876      	ldr	r0, [pc, #472]	@ (8017d58 <tcp_process+0x5b4>)
 8017b80:	f008 fd88 	bl	8020694 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017b88:	699b      	ldr	r3, [r3, #24]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d00a      	beq.n	8017ba4 <tcp_process+0x400>
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017b92:	699b      	ldr	r3, [r3, #24]
 8017b94:	687a      	ldr	r2, [r7, #4]
 8017b96:	6910      	ldr	r0, [r2, #16]
 8017b98:	2200      	movs	r2, #0
 8017b9a:	6879      	ldr	r1, [r7, #4]
 8017b9c:	4798      	blx	r3
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	77bb      	strb	r3, [r7, #30]
 8017ba2:	e001      	b.n	8017ba8 <tcp_process+0x404>
 8017ba4:	23f0      	movs	r3, #240	@ 0xf0
 8017ba6:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8017ba8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d00a      	beq.n	8017bc6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017bb0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017bb4:	f113 0f0d 	cmn.w	r3, #13
 8017bb8:	d002      	beq.n	8017bc0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f7fd fd4a 	bl	8015654 <tcp_abort>
            }
            return ERR_ABRT;
 8017bc0:	f06f 030c 	mvn.w	r3, #12
 8017bc4:	e1ce      	b.n	8017f64 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	f000 fae0 	bl	801818c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017bcc:	4b63      	ldr	r3, [pc, #396]	@ (8017d5c <tcp_process+0x5b8>)
 8017bce:	881b      	ldrh	r3, [r3, #0]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d005      	beq.n	8017be0 <tcp_process+0x43c>
            recv_acked--;
 8017bd4:	4b61      	ldr	r3, [pc, #388]	@ (8017d5c <tcp_process+0x5b8>)
 8017bd6:	881b      	ldrh	r3, [r3, #0]
 8017bd8:	3b01      	subs	r3, #1
 8017bda:	b29a      	uxth	r2, r3
 8017bdc:	4b5f      	ldr	r3, [pc, #380]	@ (8017d5c <tcp_process+0x5b8>)
 8017bde:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017be4:	009a      	lsls	r2, r3, #2
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017bea:	005b      	lsls	r3, r3, #1
 8017bec:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017bf0:	428b      	cmp	r3, r1
 8017bf2:	bf38      	it	cc
 8017bf4:	460b      	movcc	r3, r1
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d204      	bcs.n	8017c04 <tcp_process+0x460>
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017bfe:	009b      	lsls	r3, r3, #2
 8017c00:	b29b      	uxth	r3, r3
 8017c02:	e00d      	b.n	8017c20 <tcp_process+0x47c>
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c08:	005b      	lsls	r3, r3, #1
 8017c0a:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017c0e:	4293      	cmp	r3, r2
 8017c10:	d904      	bls.n	8017c1c <tcp_process+0x478>
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c16:	005b      	lsls	r3, r3, #1
 8017c18:	b29b      	uxth	r3, r3
 8017c1a:	e001      	b.n	8017c20 <tcp_process+0x47c>
 8017c1c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017c26:	4b4e      	ldr	r3, [pc, #312]	@ (8017d60 <tcp_process+0x5bc>)
 8017c28:	781b      	ldrb	r3, [r3, #0]
 8017c2a:	f003 0320 	and.w	r3, r3, #32
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d037      	beq.n	8017ca2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	8b5b      	ldrh	r3, [r3, #26]
 8017c36:	f043 0302 	orr.w	r3, r3, #2
 8017c3a:	b29a      	uxth	r2, r3
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2207      	movs	r2, #7
 8017c44:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017c46:	e02c      	b.n	8017ca2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c48:	4b3b      	ldr	r3, [pc, #236]	@ (8017d38 <tcp_process+0x594>)
 8017c4a:	6819      	ldr	r1, [r3, #0]
 8017c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8017d3c <tcp_process+0x598>)
 8017c4e:	881b      	ldrh	r3, [r3, #0]
 8017c50:	461a      	mov	r2, r3
 8017c52:	4b3b      	ldr	r3, [pc, #236]	@ (8017d40 <tcp_process+0x59c>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017c58:	4b3a      	ldr	r3, [pc, #232]	@ (8017d44 <tcp_process+0x5a0>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c5c:	885b      	ldrh	r3, [r3, #2]
 8017c5e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017c60:	4a38      	ldr	r2, [pc, #224]	@ (8017d44 <tcp_process+0x5a0>)
 8017c62:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c64:	8812      	ldrh	r2, [r2, #0]
 8017c66:	b292      	uxth	r2, r2
 8017c68:	9202      	str	r2, [sp, #8]
 8017c6a:	9301      	str	r3, [sp, #4]
 8017c6c:	4b36      	ldr	r3, [pc, #216]	@ (8017d48 <tcp_process+0x5a4>)
 8017c6e:	9300      	str	r3, [sp, #0]
 8017c70:	4b36      	ldr	r3, [pc, #216]	@ (8017d4c <tcp_process+0x5a8>)
 8017c72:	4602      	mov	r2, r0
 8017c74:	6878      	ldr	r0, [r7, #4]
 8017c76:	f003 f8df 	bl	801ae38 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017c7a:	e167      	b.n	8017f4c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8017d34 <tcp_process+0x590>)
 8017c7e:	781b      	ldrb	r3, [r3, #0]
 8017c80:	f003 0302 	and.w	r3, r3, #2
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	f000 8161 	beq.w	8017f4c <tcp_process+0x7a8>
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c8e:	1e5a      	subs	r2, r3, #1
 8017c90:	4b2b      	ldr	r3, [pc, #172]	@ (8017d40 <tcp_process+0x59c>)
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	429a      	cmp	r2, r3
 8017c96:	f040 8159 	bne.w	8017f4c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017c9a:	6878      	ldr	r0, [r7, #4]
 8017c9c:	f002 febc 	bl	801aa18 <tcp_rexmit>
      break;
 8017ca0:	e154      	b.n	8017f4c <tcp_process+0x7a8>
 8017ca2:	e153      	b.n	8017f4c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	f000 fa71 	bl	801818c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017caa:	4b2d      	ldr	r3, [pc, #180]	@ (8017d60 <tcp_process+0x5bc>)
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	f003 0320 	and.w	r3, r3, #32
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	f000 814c 	beq.w	8017f50 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	8b5b      	ldrh	r3, [r3, #26]
 8017cbc:	f043 0302 	orr.w	r3, r3, #2
 8017cc0:	b29a      	uxth	r2, r3
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	2207      	movs	r2, #7
 8017cca:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017ccc:	e140      	b.n	8017f50 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017cce:	6878      	ldr	r0, [r7, #4]
 8017cd0:	f000 fa5c 	bl	801818c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017cd4:	4b22      	ldr	r3, [pc, #136]	@ (8017d60 <tcp_process+0x5bc>)
 8017cd6:	781b      	ldrb	r3, [r3, #0]
 8017cd8:	f003 0320 	and.w	r3, r3, #32
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d071      	beq.n	8017dc4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017ce0:	4b14      	ldr	r3, [pc, #80]	@ (8017d34 <tcp_process+0x590>)
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	f003 0310 	and.w	r3, r3, #16
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d060      	beq.n	8017dae <tcp_process+0x60a>
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017cf0:	4b11      	ldr	r3, [pc, #68]	@ (8017d38 <tcp_process+0x594>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	d15a      	bne.n	8017dae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d156      	bne.n	8017dae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	8b5b      	ldrh	r3, [r3, #26]
 8017d04:	f043 0302 	orr.w	r3, r3, #2
 8017d08:	b29a      	uxth	r2, r3
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f7fe fd50 	bl	80167b4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017d14:	4b13      	ldr	r3, [pc, #76]	@ (8017d64 <tcp_process+0x5c0>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	687a      	ldr	r2, [r7, #4]
 8017d1a:	429a      	cmp	r2, r3
 8017d1c:	d105      	bne.n	8017d2a <tcp_process+0x586>
 8017d1e:	4b11      	ldr	r3, [pc, #68]	@ (8017d64 <tcp_process+0x5c0>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	68db      	ldr	r3, [r3, #12]
 8017d24:	4a0f      	ldr	r2, [pc, #60]	@ (8017d64 <tcp_process+0x5c0>)
 8017d26:	6013      	str	r3, [r2, #0]
 8017d28:	e02e      	b.n	8017d88 <tcp_process+0x5e4>
 8017d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8017d64 <tcp_process+0x5c0>)
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	613b      	str	r3, [r7, #16]
 8017d30:	e027      	b.n	8017d82 <tcp_process+0x5de>
 8017d32:	bf00      	nop
 8017d34:	2002d4b4 	.word	0x2002d4b4
 8017d38:	2002d4ac 	.word	0x2002d4ac
 8017d3c:	2002d4b2 	.word	0x2002d4b2
 8017d40:	2002d4a8 	.word	0x2002d4a8
 8017d44:	2002d498 	.word	0x2002d498
 8017d48:	2002710c 	.word	0x2002710c
 8017d4c:	20027110 	.word	0x20027110
 8017d50:	08023ef4 	.word	0x08023ef4
 8017d54:	08024194 	.word	0x08024194
 8017d58:	08023f40 	.word	0x08023f40
 8017d5c:	2002d4b0 	.word	0x2002d4b0
 8017d60:	2002d4b5 	.word	0x2002d4b5
 8017d64:	2002d478 	.word	0x2002d478
 8017d68:	693b      	ldr	r3, [r7, #16]
 8017d6a:	68db      	ldr	r3, [r3, #12]
 8017d6c:	687a      	ldr	r2, [r7, #4]
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d104      	bne.n	8017d7c <tcp_process+0x5d8>
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	68da      	ldr	r2, [r3, #12]
 8017d76:	693b      	ldr	r3, [r7, #16]
 8017d78:	60da      	str	r2, [r3, #12]
 8017d7a:	e005      	b.n	8017d88 <tcp_process+0x5e4>
 8017d7c:	693b      	ldr	r3, [r7, #16]
 8017d7e:	68db      	ldr	r3, [r3, #12]
 8017d80:	613b      	str	r3, [r7, #16]
 8017d82:	693b      	ldr	r3, [r7, #16]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d1ef      	bne.n	8017d68 <tcp_process+0x5c4>
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	60da      	str	r2, [r3, #12]
 8017d8e:	4b77      	ldr	r3, [pc, #476]	@ (8017f6c <tcp_process+0x7c8>)
 8017d90:	2201      	movs	r2, #1
 8017d92:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	220a      	movs	r2, #10
 8017d98:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017d9a:	4b75      	ldr	r3, [pc, #468]	@ (8017f70 <tcp_process+0x7cc>)
 8017d9c:	681a      	ldr	r2, [r3, #0]
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	60da      	str	r2, [r3, #12]
 8017da2:	4a73      	ldr	r2, [pc, #460]	@ (8017f70 <tcp_process+0x7cc>)
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	6013      	str	r3, [r2, #0]
 8017da8:	f003 fa08 	bl	801b1bc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017dac:	e0d2      	b.n	8017f54 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	8b5b      	ldrh	r3, [r3, #26]
 8017db2:	f043 0302 	orr.w	r3, r3, #2
 8017db6:	b29a      	uxth	r2, r3
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	2208      	movs	r2, #8
 8017dc0:	751a      	strb	r2, [r3, #20]
      break;
 8017dc2:	e0c7      	b.n	8017f54 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8017f74 <tcp_process+0x7d0>)
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	f003 0310 	and.w	r3, r3, #16
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	f000 80c1 	beq.w	8017f54 <tcp_process+0x7b0>
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017dd6:	4b68      	ldr	r3, [pc, #416]	@ (8017f78 <tcp_process+0x7d4>)
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	429a      	cmp	r2, r3
 8017ddc:	f040 80ba 	bne.w	8017f54 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	f040 80b5 	bne.w	8017f54 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2206      	movs	r2, #6
 8017dee:	751a      	strb	r2, [r3, #20]
      break;
 8017df0:	e0b0      	b.n	8017f54 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017df2:	6878      	ldr	r0, [r7, #4]
 8017df4:	f000 f9ca 	bl	801818c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017df8:	4b60      	ldr	r3, [pc, #384]	@ (8017f7c <tcp_process+0x7d8>)
 8017dfa:	781b      	ldrb	r3, [r3, #0]
 8017dfc:	f003 0320 	and.w	r3, r3, #32
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	f000 80a9 	beq.w	8017f58 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	8b5b      	ldrh	r3, [r3, #26]
 8017e0a:	f043 0302 	orr.w	r3, r3, #2
 8017e0e:	b29a      	uxth	r2, r3
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f7fe fccd 	bl	80167b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017e1a:	4b59      	ldr	r3, [pc, #356]	@ (8017f80 <tcp_process+0x7dc>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	687a      	ldr	r2, [r7, #4]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d105      	bne.n	8017e30 <tcp_process+0x68c>
 8017e24:	4b56      	ldr	r3, [pc, #344]	@ (8017f80 <tcp_process+0x7dc>)
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	68db      	ldr	r3, [r3, #12]
 8017e2a:	4a55      	ldr	r2, [pc, #340]	@ (8017f80 <tcp_process+0x7dc>)
 8017e2c:	6013      	str	r3, [r2, #0]
 8017e2e:	e013      	b.n	8017e58 <tcp_process+0x6b4>
 8017e30:	4b53      	ldr	r3, [pc, #332]	@ (8017f80 <tcp_process+0x7dc>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	60fb      	str	r3, [r7, #12]
 8017e36:	e00c      	b.n	8017e52 <tcp_process+0x6ae>
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	68db      	ldr	r3, [r3, #12]
 8017e3c:	687a      	ldr	r2, [r7, #4]
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d104      	bne.n	8017e4c <tcp_process+0x6a8>
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	68da      	ldr	r2, [r3, #12]
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	60da      	str	r2, [r3, #12]
 8017e4a:	e005      	b.n	8017e58 <tcp_process+0x6b4>
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	68db      	ldr	r3, [r3, #12]
 8017e50:	60fb      	str	r3, [r7, #12]
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d1ef      	bne.n	8017e38 <tcp_process+0x694>
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	60da      	str	r2, [r3, #12]
 8017e5e:	4b43      	ldr	r3, [pc, #268]	@ (8017f6c <tcp_process+0x7c8>)
 8017e60:	2201      	movs	r2, #1
 8017e62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	220a      	movs	r2, #10
 8017e68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017e6a:	4b41      	ldr	r3, [pc, #260]	@ (8017f70 <tcp_process+0x7cc>)
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	60da      	str	r2, [r3, #12]
 8017e72:	4a3f      	ldr	r2, [pc, #252]	@ (8017f70 <tcp_process+0x7cc>)
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	6013      	str	r3, [r2, #0]
 8017e78:	f003 f9a0 	bl	801b1bc <tcp_timer_needed>
      }
      break;
 8017e7c:	e06c      	b.n	8017f58 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017e7e:	6878      	ldr	r0, [r7, #4]
 8017e80:	f000 f984 	bl	801818c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017e84:	4b3b      	ldr	r3, [pc, #236]	@ (8017f74 <tcp_process+0x7d0>)
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	f003 0310 	and.w	r3, r3, #16
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d065      	beq.n	8017f5c <tcp_process+0x7b8>
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017e94:	4b38      	ldr	r3, [pc, #224]	@ (8017f78 <tcp_process+0x7d4>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d15f      	bne.n	8017f5c <tcp_process+0x7b8>
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d15b      	bne.n	8017f5c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017ea4:	6878      	ldr	r0, [r7, #4]
 8017ea6:	f7fe fc85 	bl	80167b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017eaa:	4b35      	ldr	r3, [pc, #212]	@ (8017f80 <tcp_process+0x7dc>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	687a      	ldr	r2, [r7, #4]
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d105      	bne.n	8017ec0 <tcp_process+0x71c>
 8017eb4:	4b32      	ldr	r3, [pc, #200]	@ (8017f80 <tcp_process+0x7dc>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	68db      	ldr	r3, [r3, #12]
 8017eba:	4a31      	ldr	r2, [pc, #196]	@ (8017f80 <tcp_process+0x7dc>)
 8017ebc:	6013      	str	r3, [r2, #0]
 8017ebe:	e013      	b.n	8017ee8 <tcp_process+0x744>
 8017ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8017f80 <tcp_process+0x7dc>)
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	61bb      	str	r3, [r7, #24]
 8017ec6:	e00c      	b.n	8017ee2 <tcp_process+0x73e>
 8017ec8:	69bb      	ldr	r3, [r7, #24]
 8017eca:	68db      	ldr	r3, [r3, #12]
 8017ecc:	687a      	ldr	r2, [r7, #4]
 8017ece:	429a      	cmp	r2, r3
 8017ed0:	d104      	bne.n	8017edc <tcp_process+0x738>
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	68da      	ldr	r2, [r3, #12]
 8017ed6:	69bb      	ldr	r3, [r7, #24]
 8017ed8:	60da      	str	r2, [r3, #12]
 8017eda:	e005      	b.n	8017ee8 <tcp_process+0x744>
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	68db      	ldr	r3, [r3, #12]
 8017ee0:	61bb      	str	r3, [r7, #24]
 8017ee2:	69bb      	ldr	r3, [r7, #24]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d1ef      	bne.n	8017ec8 <tcp_process+0x724>
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2200      	movs	r2, #0
 8017eec:	60da      	str	r2, [r3, #12]
 8017eee:	4b1f      	ldr	r3, [pc, #124]	@ (8017f6c <tcp_process+0x7c8>)
 8017ef0:	2201      	movs	r2, #1
 8017ef2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	220a      	movs	r2, #10
 8017ef8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017efa:	4b1d      	ldr	r3, [pc, #116]	@ (8017f70 <tcp_process+0x7cc>)
 8017efc:	681a      	ldr	r2, [r3, #0]
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	60da      	str	r2, [r3, #12]
 8017f02:	4a1b      	ldr	r2, [pc, #108]	@ (8017f70 <tcp_process+0x7cc>)
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	6013      	str	r3, [r2, #0]
 8017f08:	f003 f958 	bl	801b1bc <tcp_timer_needed>
      }
      break;
 8017f0c:	e026      	b.n	8017f5c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017f0e:	6878      	ldr	r0, [r7, #4]
 8017f10:	f000 f93c 	bl	801818c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017f14:	4b17      	ldr	r3, [pc, #92]	@ (8017f74 <tcp_process+0x7d0>)
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	f003 0310 	and.w	r3, r3, #16
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d01f      	beq.n	8017f60 <tcp_process+0x7bc>
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f24:	4b14      	ldr	r3, [pc, #80]	@ (8017f78 <tcp_process+0x7d4>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	d119      	bne.n	8017f60 <tcp_process+0x7bc>
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d115      	bne.n	8017f60 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017f34:	4b11      	ldr	r3, [pc, #68]	@ (8017f7c <tcp_process+0x7d8>)
 8017f36:	781b      	ldrb	r3, [r3, #0]
 8017f38:	f043 0310 	orr.w	r3, r3, #16
 8017f3c:	b2da      	uxtb	r2, r3
 8017f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8017f7c <tcp_process+0x7d8>)
 8017f40:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017f42:	e00d      	b.n	8017f60 <tcp_process+0x7bc>
    default:
      break;
 8017f44:	bf00      	nop
 8017f46:	e00c      	b.n	8017f62 <tcp_process+0x7be>
      break;
 8017f48:	bf00      	nop
 8017f4a:	e00a      	b.n	8017f62 <tcp_process+0x7be>
      break;
 8017f4c:	bf00      	nop
 8017f4e:	e008      	b.n	8017f62 <tcp_process+0x7be>
      break;
 8017f50:	bf00      	nop
 8017f52:	e006      	b.n	8017f62 <tcp_process+0x7be>
      break;
 8017f54:	bf00      	nop
 8017f56:	e004      	b.n	8017f62 <tcp_process+0x7be>
      break;
 8017f58:	bf00      	nop
 8017f5a:	e002      	b.n	8017f62 <tcp_process+0x7be>
      break;
 8017f5c:	bf00      	nop
 8017f5e:	e000      	b.n	8017f62 <tcp_process+0x7be>
      break;
 8017f60:	bf00      	nop
  }
  return ERR_OK;
 8017f62:	2300      	movs	r3, #0
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	3724      	adds	r7, #36	@ 0x24
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd90      	pop	{r4, r7, pc}
 8017f6c:	2002d480 	.word	0x2002d480
 8017f70:	2002d47c 	.word	0x2002d47c
 8017f74:	2002d4b4 	.word	0x2002d4b4
 8017f78:	2002d4ac 	.word	0x2002d4ac
 8017f7c:	2002d4b5 	.word	0x2002d4b5
 8017f80:	2002d478 	.word	0x2002d478

08017f84 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017f84:	b590      	push	{r4, r7, lr}
 8017f86:	b085      	sub	sp, #20
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d106      	bne.n	8017fa2 <tcp_oos_insert_segment+0x1e>
 8017f94:	4b3b      	ldr	r3, [pc, #236]	@ (8018084 <tcp_oos_insert_segment+0x100>)
 8017f96:	f240 421f 	movw	r2, #1055	@ 0x41f
 8017f9a:	493b      	ldr	r1, [pc, #236]	@ (8018088 <tcp_oos_insert_segment+0x104>)
 8017f9c:	483b      	ldr	r0, [pc, #236]	@ (801808c <tcp_oos_insert_segment+0x108>)
 8017f9e:	f008 fb79 	bl	8020694 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	691b      	ldr	r3, [r3, #16]
 8017fa6:	899b      	ldrh	r3, [r3, #12]
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	4618      	mov	r0, r3
 8017fac:	f7fa fee8 	bl	8012d80 <lwip_htons>
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	b2db      	uxtb	r3, r3
 8017fb4:	f003 0301 	and.w	r3, r3, #1
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d028      	beq.n	801800e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017fbc:	6838      	ldr	r0, [r7, #0]
 8017fbe:	f7fe f8ff 	bl	80161c0 <tcp_segs_free>
    next = NULL;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	603b      	str	r3, [r7, #0]
 8017fc6:	e056      	b.n	8018076 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	691b      	ldr	r3, [r3, #16]
 8017fcc:	899b      	ldrh	r3, [r3, #12]
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f7fa fed5 	bl	8012d80 <lwip_htons>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	b2db      	uxtb	r3, r3
 8017fda:	f003 0301 	and.w	r3, r3, #1
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d00d      	beq.n	8017ffe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	691b      	ldr	r3, [r3, #16]
 8017fe6:	899b      	ldrh	r3, [r3, #12]
 8017fe8:	b29c      	uxth	r4, r3
 8017fea:	2001      	movs	r0, #1
 8017fec:	f7fa fec8 	bl	8012d80 <lwip_htons>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	691b      	ldr	r3, [r3, #16]
 8017ff8:	4322      	orrs	r2, r4
 8017ffa:	b292      	uxth	r2, r2
 8017ffc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018002:	683b      	ldr	r3, [r7, #0]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018008:	68f8      	ldr	r0, [r7, #12]
 801800a:	f7fe f8ee 	bl	80161ea <tcp_seg_free>
    while (next &&
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d00e      	beq.n	8018032 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	891b      	ldrh	r3, [r3, #8]
 8018018:	461a      	mov	r2, r3
 801801a:	4b1d      	ldr	r3, [pc, #116]	@ (8018090 <tcp_oos_insert_segment+0x10c>)
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	441a      	add	r2, r3
 8018020:	683b      	ldr	r3, [r7, #0]
 8018022:	691b      	ldr	r3, [r3, #16]
 8018024:	685b      	ldr	r3, [r3, #4]
 8018026:	6839      	ldr	r1, [r7, #0]
 8018028:	8909      	ldrh	r1, [r1, #8]
 801802a:	440b      	add	r3, r1
 801802c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801802e:	2b00      	cmp	r3, #0
 8018030:	daca      	bge.n	8017fc8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d01e      	beq.n	8018076 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	891b      	ldrh	r3, [r3, #8]
 801803c:	461a      	mov	r2, r3
 801803e:	4b14      	ldr	r3, [pc, #80]	@ (8018090 <tcp_oos_insert_segment+0x10c>)
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	441a      	add	r2, r3
 8018044:	683b      	ldr	r3, [r7, #0]
 8018046:	691b      	ldr	r3, [r3, #16]
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801804c:	2b00      	cmp	r3, #0
 801804e:	dd12      	ble.n	8018076 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018050:	683b      	ldr	r3, [r7, #0]
 8018052:	691b      	ldr	r3, [r3, #16]
 8018054:	685b      	ldr	r3, [r3, #4]
 8018056:	b29a      	uxth	r2, r3
 8018058:	4b0d      	ldr	r3, [pc, #52]	@ (8018090 <tcp_oos_insert_segment+0x10c>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	b29b      	uxth	r3, r3
 801805e:	1ad3      	subs	r3, r2, r3
 8018060:	b29a      	uxth	r2, r3
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	685a      	ldr	r2, [r3, #4]
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	891b      	ldrh	r3, [r3, #8]
 801806e:	4619      	mov	r1, r3
 8018070:	4610      	mov	r0, r2
 8018072:	f7fc fb13 	bl	801469c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	683a      	ldr	r2, [r7, #0]
 801807a:	601a      	str	r2, [r3, #0]
}
 801807c:	bf00      	nop
 801807e:	3714      	adds	r7, #20
 8018080:	46bd      	mov	sp, r7
 8018082:	bd90      	pop	{r4, r7, pc}
 8018084:	08023ef4 	.word	0x08023ef4
 8018088:	080241b4 	.word	0x080241b4
 801808c:	08023f40 	.word	0x08023f40
 8018090:	2002d4a8 	.word	0x2002d4a8

08018094 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018094:	b5b0      	push	{r4, r5, r7, lr}
 8018096:	b086      	sub	sp, #24
 8018098:	af00      	add	r7, sp, #0
 801809a:	60f8      	str	r0, [r7, #12]
 801809c:	60b9      	str	r1, [r7, #8]
 801809e:	607a      	str	r2, [r7, #4]
 80180a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80180a2:	e03e      	b.n	8018122 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80180ae:	697b      	ldr	r3, [r7, #20]
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7fc fd38 	bl	8014b28 <pbuf_clen>
 80180b8:	4603      	mov	r3, r0
 80180ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80180c2:	8a7a      	ldrh	r2, [r7, #18]
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d906      	bls.n	80180d6 <tcp_free_acked_segments+0x42>
 80180c8:	4b2a      	ldr	r3, [pc, #168]	@ (8018174 <tcp_free_acked_segments+0xe0>)
 80180ca:	f240 4257 	movw	r2, #1111	@ 0x457
 80180ce:	492a      	ldr	r1, [pc, #168]	@ (8018178 <tcp_free_acked_segments+0xe4>)
 80180d0:	482a      	ldr	r0, [pc, #168]	@ (801817c <tcp_free_acked_segments+0xe8>)
 80180d2:	f008 fadf 	bl	8020694 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80180dc:	8a7b      	ldrh	r3, [r7, #18]
 80180de:	1ad3      	subs	r3, r2, r3
 80180e0:	b29a      	uxth	r2, r3
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	891a      	ldrh	r2, [r3, #8]
 80180ec:	4b24      	ldr	r3, [pc, #144]	@ (8018180 <tcp_free_acked_segments+0xec>)
 80180ee:	881b      	ldrh	r3, [r3, #0]
 80180f0:	4413      	add	r3, r2
 80180f2:	b29a      	uxth	r2, r3
 80180f4:	4b22      	ldr	r3, [pc, #136]	@ (8018180 <tcp_free_acked_segments+0xec>)
 80180f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80180f8:	6978      	ldr	r0, [r7, #20]
 80180fa:	f7fe f876 	bl	80161ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018104:	2b00      	cmp	r3, #0
 8018106:	d00c      	beq.n	8018122 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018108:	68bb      	ldr	r3, [r7, #8]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d109      	bne.n	8018122 <tcp_free_acked_segments+0x8e>
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d106      	bne.n	8018122 <tcp_free_acked_segments+0x8e>
 8018114:	4b17      	ldr	r3, [pc, #92]	@ (8018174 <tcp_free_acked_segments+0xe0>)
 8018116:	f240 4261 	movw	r2, #1121	@ 0x461
 801811a:	491a      	ldr	r1, [pc, #104]	@ (8018184 <tcp_free_acked_segments+0xf0>)
 801811c:	4817      	ldr	r0, [pc, #92]	@ (801817c <tcp_free_acked_segments+0xe8>)
 801811e:	f008 fab9 	bl	8020694 <iprintf>
  while (seg_list != NULL &&
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d020      	beq.n	801816a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	691b      	ldr	r3, [r3, #16]
 801812c:	685b      	ldr	r3, [r3, #4]
 801812e:	4618      	mov	r0, r3
 8018130:	f7fa fe3c 	bl	8012dac <lwip_htonl>
 8018134:	4604      	mov	r4, r0
 8018136:	68bb      	ldr	r3, [r7, #8]
 8018138:	891b      	ldrh	r3, [r3, #8]
 801813a:	461d      	mov	r5, r3
 801813c:	68bb      	ldr	r3, [r7, #8]
 801813e:	691b      	ldr	r3, [r3, #16]
 8018140:	899b      	ldrh	r3, [r3, #12]
 8018142:	b29b      	uxth	r3, r3
 8018144:	4618      	mov	r0, r3
 8018146:	f7fa fe1b 	bl	8012d80 <lwip_htons>
 801814a:	4603      	mov	r3, r0
 801814c:	b2db      	uxtb	r3, r3
 801814e:	f003 0303 	and.w	r3, r3, #3
 8018152:	2b00      	cmp	r3, #0
 8018154:	d001      	beq.n	801815a <tcp_free_acked_segments+0xc6>
 8018156:	2301      	movs	r3, #1
 8018158:	e000      	b.n	801815c <tcp_free_acked_segments+0xc8>
 801815a:	2300      	movs	r3, #0
 801815c:	442b      	add	r3, r5
 801815e:	18e2      	adds	r2, r4, r3
 8018160:	4b09      	ldr	r3, [pc, #36]	@ (8018188 <tcp_free_acked_segments+0xf4>)
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018166:	2b00      	cmp	r3, #0
 8018168:	dd9c      	ble.n	80180a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801816a:	68bb      	ldr	r3, [r7, #8]
}
 801816c:	4618      	mov	r0, r3
 801816e:	3718      	adds	r7, #24
 8018170:	46bd      	mov	sp, r7
 8018172:	bdb0      	pop	{r4, r5, r7, pc}
 8018174:	08023ef4 	.word	0x08023ef4
 8018178:	080241dc 	.word	0x080241dc
 801817c:	08023f40 	.word	0x08023f40
 8018180:	2002d4b0 	.word	0x2002d4b0
 8018184:	08024204 	.word	0x08024204
 8018188:	2002d4ac 	.word	0x2002d4ac

0801818c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801818c:	b5b0      	push	{r4, r5, r7, lr}
 801818e:	b094      	sub	sp, #80	@ 0x50
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018194:	2300      	movs	r3, #0
 8018196:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d106      	bne.n	80181ac <tcp_receive+0x20>
 801819e:	4b91      	ldr	r3, [pc, #580]	@ (80183e4 <tcp_receive+0x258>)
 80181a0:	f240 427b 	movw	r2, #1147	@ 0x47b
 80181a4:	4990      	ldr	r1, [pc, #576]	@ (80183e8 <tcp_receive+0x25c>)
 80181a6:	4891      	ldr	r0, [pc, #580]	@ (80183ec <tcp_receive+0x260>)
 80181a8:	f008 fa74 	bl	8020694 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	7d1b      	ldrb	r3, [r3, #20]
 80181b0:	2b03      	cmp	r3, #3
 80181b2:	d806      	bhi.n	80181c2 <tcp_receive+0x36>
 80181b4:	4b8b      	ldr	r3, [pc, #556]	@ (80183e4 <tcp_receive+0x258>)
 80181b6:	f240 427c 	movw	r2, #1148	@ 0x47c
 80181ba:	498d      	ldr	r1, [pc, #564]	@ (80183f0 <tcp_receive+0x264>)
 80181bc:	488b      	ldr	r0, [pc, #556]	@ (80183ec <tcp_receive+0x260>)
 80181be:	f008 fa69 	bl	8020694 <iprintf>

  if (flags & TCP_ACK) {
 80181c2:	4b8c      	ldr	r3, [pc, #560]	@ (80183f4 <tcp_receive+0x268>)
 80181c4:	781b      	ldrb	r3, [r3, #0]
 80181c6:	f003 0310 	and.w	r3, r3, #16
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	f000 8264 	beq.w	8018698 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80181d6:	461a      	mov	r2, r3
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80181dc:	4413      	add	r3, r2
 80181de:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80181e4:	4b84      	ldr	r3, [pc, #528]	@ (80183f8 <tcp_receive+0x26c>)
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	1ad3      	subs	r3, r2, r3
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	db1b      	blt.n	8018226 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80181f2:	4b81      	ldr	r3, [pc, #516]	@ (80183f8 <tcp_receive+0x26c>)
 80181f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80181f6:	429a      	cmp	r2, r3
 80181f8:	d106      	bne.n	8018208 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80181fe:	4b7f      	ldr	r3, [pc, #508]	@ (80183fc <tcp_receive+0x270>)
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	1ad3      	subs	r3, r2, r3
 8018204:	2b00      	cmp	r3, #0
 8018206:	db0e      	blt.n	8018226 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801820c:	4b7b      	ldr	r3, [pc, #492]	@ (80183fc <tcp_receive+0x270>)
 801820e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018210:	429a      	cmp	r2, r3
 8018212:	d125      	bne.n	8018260 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018214:	4b7a      	ldr	r3, [pc, #488]	@ (8018400 <tcp_receive+0x274>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	89db      	ldrh	r3, [r3, #14]
 801821a:	b29a      	uxth	r2, r3
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018222:	429a      	cmp	r2, r3
 8018224:	d91c      	bls.n	8018260 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018226:	4b76      	ldr	r3, [pc, #472]	@ (8018400 <tcp_receive+0x274>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	89db      	ldrh	r3, [r3, #14]
 801822c:	b29a      	uxth	r2, r3
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018240:	429a      	cmp	r2, r3
 8018242:	d205      	bcs.n	8018250 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8018250:	4b69      	ldr	r3, [pc, #420]	@ (80183f8 <tcp_receive+0x26c>)
 8018252:	681a      	ldr	r2, [r3, #0]
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8018258:	4b68      	ldr	r3, [pc, #416]	@ (80183fc <tcp_receive+0x270>)
 801825a:	681a      	ldr	r2, [r3, #0]
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018260:	4b66      	ldr	r3, [pc, #408]	@ (80183fc <tcp_receive+0x270>)
 8018262:	681a      	ldr	r2, [r3, #0]
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018268:	1ad3      	subs	r3, r2, r3
 801826a:	2b00      	cmp	r3, #0
 801826c:	dc58      	bgt.n	8018320 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801826e:	4b65      	ldr	r3, [pc, #404]	@ (8018404 <tcp_receive+0x278>)
 8018270:	881b      	ldrh	r3, [r3, #0]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d14b      	bne.n	801830e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801827a:	687a      	ldr	r2, [r7, #4]
 801827c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8018280:	4413      	add	r3, r2
 8018282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018284:	429a      	cmp	r2, r3
 8018286:	d142      	bne.n	801830e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801828e:	2b00      	cmp	r3, #0
 8018290:	db3d      	blt.n	801830e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018296:	4b59      	ldr	r3, [pc, #356]	@ (80183fc <tcp_receive+0x270>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	429a      	cmp	r2, r3
 801829c:	d137      	bne.n	801830e <tcp_receive+0x182>
              found_dupack = 1;
 801829e:	2301      	movs	r3, #1
 80182a0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80182a8:	2bff      	cmp	r3, #255	@ 0xff
 80182aa:	d007      	beq.n	80182bc <tcp_receive+0x130>
                ++pcb->dupacks;
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80182b2:	3301      	adds	r3, #1
 80182b4:	b2da      	uxtb	r2, r3
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80182c2:	2b03      	cmp	r3, #3
 80182c4:	d91b      	bls.n	80182fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80182d0:	4413      	add	r3, r2
 80182d2:	b29a      	uxth	r2, r3
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80182da:	429a      	cmp	r2, r3
 80182dc:	d30a      	bcc.n	80182f4 <tcp_receive+0x168>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80182e8:	4413      	add	r3, r2
 80182ea:	b29a      	uxth	r2, r3
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80182f2:	e004      	b.n	80182fe <tcp_receive+0x172>
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80182fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018304:	2b02      	cmp	r3, #2
 8018306:	d902      	bls.n	801830e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f002 fbf1 	bl	801aaf0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801830e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018310:	2b00      	cmp	r3, #0
 8018312:	f040 8161 	bne.w	80185d8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2200      	movs	r2, #0
 801831a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801831e:	e15b      	b.n	80185d8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018320:	4b36      	ldr	r3, [pc, #216]	@ (80183fc <tcp_receive+0x270>)
 8018322:	681a      	ldr	r2, [r3, #0]
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018328:	1ad3      	subs	r3, r2, r3
 801832a:	3b01      	subs	r3, #1
 801832c:	2b00      	cmp	r3, #0
 801832e:	f2c0 814e 	blt.w	80185ce <tcp_receive+0x442>
 8018332:	4b32      	ldr	r3, [pc, #200]	@ (80183fc <tcp_receive+0x270>)
 8018334:	681a      	ldr	r2, [r3, #0]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801833a:	1ad3      	subs	r3, r2, r3
 801833c:	2b00      	cmp	r3, #0
 801833e:	f300 8146 	bgt.w	80185ce <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	8b5b      	ldrh	r3, [r3, #26]
 8018346:	f003 0304 	and.w	r3, r3, #4
 801834a:	2b00      	cmp	r3, #0
 801834c:	d010      	beq.n	8018370 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	8b5b      	ldrh	r3, [r3, #26]
 8018352:	f023 0304 	bic.w	r3, r3, #4
 8018356:	b29a      	uxth	r2, r3
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	2200      	movs	r2, #0
 801836c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	2200      	movs	r2, #0
 8018374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801837e:	10db      	asrs	r3, r3, #3
 8018380:	b21b      	sxth	r3, r3
 8018382:	b29a      	uxth	r2, r3
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801838a:	b29b      	uxth	r3, r3
 801838c:	4413      	add	r3, r2
 801838e:	b29b      	uxth	r3, r3
 8018390:	b21a      	sxth	r2, r3
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018398:	4b18      	ldr	r3, [pc, #96]	@ (80183fc <tcp_receive+0x270>)
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	b29a      	uxth	r2, r3
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80183a2:	b29b      	uxth	r3, r3
 80183a4:	1ad3      	subs	r3, r2, r3
 80183a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2200      	movs	r2, #0
 80183ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80183b0:	4b12      	ldr	r3, [pc, #72]	@ (80183fc <tcp_receive+0x270>)
 80183b2:	681a      	ldr	r2, [r3, #0]
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	7d1b      	ldrb	r3, [r3, #20]
 80183bc:	2b03      	cmp	r3, #3
 80183be:	f240 8097 	bls.w	80184f0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80183ce:	429a      	cmp	r2, r3
 80183d0:	d245      	bcs.n	801845e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	8b5b      	ldrh	r3, [r3, #26]
 80183d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d014      	beq.n	8018408 <tcp_receive+0x27c>
 80183de:	2301      	movs	r3, #1
 80183e0:	e013      	b.n	801840a <tcp_receive+0x27e>
 80183e2:	bf00      	nop
 80183e4:	08023ef4 	.word	0x08023ef4
 80183e8:	08024224 	.word	0x08024224
 80183ec:	08023f40 	.word	0x08023f40
 80183f0:	08024240 	.word	0x08024240
 80183f4:	2002d4b4 	.word	0x2002d4b4
 80183f8:	2002d4a8 	.word	0x2002d4a8
 80183fc:	2002d4ac 	.word	0x2002d4ac
 8018400:	2002d498 	.word	0x2002d498
 8018404:	2002d4b2 	.word	0x2002d4b2
 8018408:	2302      	movs	r3, #2
 801840a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801840e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018412:	b29a      	uxth	r2, r3
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018418:	fb12 f303 	smulbb	r3, r2, r3
 801841c:	b29b      	uxth	r3, r3
 801841e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018420:	4293      	cmp	r3, r2
 8018422:	bf28      	it	cs
 8018424:	4613      	movcs	r3, r2
 8018426:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801842e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018430:	4413      	add	r3, r2
 8018432:	b29a      	uxth	r2, r3
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801843a:	429a      	cmp	r2, r3
 801843c:	d309      	bcc.n	8018452 <tcp_receive+0x2c6>
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018444:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018446:	4413      	add	r3, r2
 8018448:	b29a      	uxth	r2, r3
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018450:	e04e      	b.n	80184f0 <tcp_receive+0x364>
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018458:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801845c:	e048      	b.n	80184f0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018464:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018466:	4413      	add	r3, r2
 8018468:	b29a      	uxth	r2, r3
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018470:	429a      	cmp	r2, r3
 8018472:	d309      	bcc.n	8018488 <tcp_receive+0x2fc>
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801847a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801847c:	4413      	add	r3, r2
 801847e:	b29a      	uxth	r2, r3
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8018486:	e004      	b.n	8018492 <tcp_receive+0x306>
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801848e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801849e:	429a      	cmp	r2, r3
 80184a0:	d326      	bcc.n	80184f0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80184ae:	1ad3      	subs	r3, r2, r3
 80184b0:	b29a      	uxth	r2, r3
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80184c2:	4413      	add	r3, r2
 80184c4:	b29a      	uxth	r2, r3
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80184cc:	429a      	cmp	r2, r3
 80184ce:	d30a      	bcc.n	80184e6 <tcp_receive+0x35a>
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80184da:	4413      	add	r3, r2
 80184dc:	b29a      	uxth	r2, r3
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80184e4:	e004      	b.n	80184f0 <tcp_receive+0x364>
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80184ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80184f8:	4a98      	ldr	r2, [pc, #608]	@ (801875c <tcp_receive+0x5d0>)
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f7ff fdca 	bl	8018094 <tcp_free_acked_segments>
 8018500:	4602      	mov	r2, r0
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801850e:	4a94      	ldr	r2, [pc, #592]	@ (8018760 <tcp_receive+0x5d4>)
 8018510:	6878      	ldr	r0, [r7, #4]
 8018512:	f7ff fdbf 	bl	8018094 <tcp_free_acked_segments>
 8018516:	4602      	mov	r2, r0
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018520:	2b00      	cmp	r3, #0
 8018522:	d104      	bne.n	801852e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801852a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801852c:	e002      	b.n	8018534 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2200      	movs	r2, #0
 8018532:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	2200      	movs	r2, #0
 8018538:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801853e:	2b00      	cmp	r3, #0
 8018540:	d103      	bne.n	801854a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	2200      	movs	r2, #0
 8018546:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018550:	4b84      	ldr	r3, [pc, #528]	@ (8018764 <tcp_receive+0x5d8>)
 8018552:	881b      	ldrh	r3, [r3, #0]
 8018554:	4413      	add	r3, r2
 8018556:	b29a      	uxth	r2, r3
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	8b5b      	ldrh	r3, [r3, #26]
 8018562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018566:	2b00      	cmp	r3, #0
 8018568:	d035      	beq.n	80185d6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801856e:	2b00      	cmp	r3, #0
 8018570:	d118      	bne.n	80185a4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018576:	2b00      	cmp	r3, #0
 8018578:	d00c      	beq.n	8018594 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018582:	691b      	ldr	r3, [r3, #16]
 8018584:	685b      	ldr	r3, [r3, #4]
 8018586:	4618      	mov	r0, r3
 8018588:	f7fa fc10 	bl	8012dac <lwip_htonl>
 801858c:	4603      	mov	r3, r0
 801858e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018590:	2b00      	cmp	r3, #0
 8018592:	dc20      	bgt.n	80185d6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	8b5b      	ldrh	r3, [r3, #26]
 8018598:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801859c:	b29a      	uxth	r2, r3
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80185a2:	e018      	b.n	80185d6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80185ac:	691b      	ldr	r3, [r3, #16]
 80185ae:	685b      	ldr	r3, [r3, #4]
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7fa fbfb 	bl	8012dac <lwip_htonl>
 80185b6:	4603      	mov	r3, r0
 80185b8:	1ae3      	subs	r3, r4, r3
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	dc0b      	bgt.n	80185d6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	8b5b      	ldrh	r3, [r3, #26]
 80185c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80185c6:	b29a      	uxth	r2, r3
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80185cc:	e003      	b.n	80185d6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f002 fc84 	bl	801aedc <tcp_send_empty_ack>
 80185d4:	e000      	b.n	80185d8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80185d6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d05b      	beq.n	8018698 <tcp_receive+0x50c>
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80185e4:	4b60      	ldr	r3, [pc, #384]	@ (8018768 <tcp_receive+0x5dc>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	1ad3      	subs	r3, r2, r3
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	da54      	bge.n	8018698 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80185ee:	4b5f      	ldr	r3, [pc, #380]	@ (801876c <tcp_receive+0x5e0>)
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	b29a      	uxth	r2, r3
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80185f8:	b29b      	uxth	r3, r3
 80185fa:	1ad3      	subs	r3, r2, r3
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018602:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801860c:	10db      	asrs	r3, r3, #3
 801860e:	b21b      	sxth	r3, r3
 8018610:	b29b      	uxth	r3, r3
 8018612:	1ad3      	subs	r3, r2, r3
 8018614:	b29b      	uxth	r3, r3
 8018616:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018620:	b29a      	uxth	r2, r3
 8018622:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018626:	4413      	add	r3, r2
 8018628:	b29b      	uxth	r3, r3
 801862a:	b21a      	sxth	r2, r3
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018630:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8018634:	2b00      	cmp	r3, #0
 8018636:	da05      	bge.n	8018644 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018638:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801863c:	425b      	negs	r3, r3
 801863e:	b29b      	uxth	r3, r3
 8018640:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018644:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801864e:	109b      	asrs	r3, r3, #2
 8018650:	b21b      	sxth	r3, r3
 8018652:	b29b      	uxth	r3, r3
 8018654:	1ad3      	subs	r3, r2, r3
 8018656:	b29b      	uxth	r3, r3
 8018658:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018662:	b29a      	uxth	r2, r3
 8018664:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018668:	4413      	add	r3, r2
 801866a:	b29b      	uxth	r3, r3
 801866c:	b21a      	sxth	r2, r3
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018678:	10db      	asrs	r3, r3, #3
 801867a:	b21b      	sxth	r3, r3
 801867c:	b29a      	uxth	r2, r3
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018684:	b29b      	uxth	r3, r3
 8018686:	4413      	add	r3, r2
 8018688:	b29b      	uxth	r3, r3
 801868a:	b21a      	sxth	r2, r3
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	2200      	movs	r2, #0
 8018696:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018698:	4b35      	ldr	r3, [pc, #212]	@ (8018770 <tcp_receive+0x5e4>)
 801869a:	881b      	ldrh	r3, [r3, #0]
 801869c:	2b00      	cmp	r3, #0
 801869e:	f000 84df 	beq.w	8019060 <tcp_receive+0xed4>
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	7d1b      	ldrb	r3, [r3, #20]
 80186a6:	2b06      	cmp	r3, #6
 80186a8:	f200 84da 	bhi.w	8019060 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80186b0:	4b30      	ldr	r3, [pc, #192]	@ (8018774 <tcp_receive+0x5e8>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	1ad3      	subs	r3, r2, r3
 80186b6:	3b01      	subs	r3, #1
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	f2c0 808f 	blt.w	80187dc <tcp_receive+0x650>
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80186c2:	4b2b      	ldr	r3, [pc, #172]	@ (8018770 <tcp_receive+0x5e4>)
 80186c4:	881b      	ldrh	r3, [r3, #0]
 80186c6:	4619      	mov	r1, r3
 80186c8:	4b2a      	ldr	r3, [pc, #168]	@ (8018774 <tcp_receive+0x5e8>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	440b      	add	r3, r1
 80186ce:	1ad3      	subs	r3, r2, r3
 80186d0:	3301      	adds	r3, #1
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	f300 8082 	bgt.w	80187dc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80186d8:	4b27      	ldr	r3, [pc, #156]	@ (8018778 <tcp_receive+0x5ec>)
 80186da:	685b      	ldr	r3, [r3, #4]
 80186dc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80186e2:	4b24      	ldr	r3, [pc, #144]	@ (8018774 <tcp_receive+0x5e8>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	1ad3      	subs	r3, r2, r3
 80186e8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80186ea:	4b23      	ldr	r3, [pc, #140]	@ (8018778 <tcp_receive+0x5ec>)
 80186ec:	685b      	ldr	r3, [r3, #4]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d106      	bne.n	8018700 <tcp_receive+0x574>
 80186f2:	4b22      	ldr	r3, [pc, #136]	@ (801877c <tcp_receive+0x5f0>)
 80186f4:	f240 5294 	movw	r2, #1428	@ 0x594
 80186f8:	4921      	ldr	r1, [pc, #132]	@ (8018780 <tcp_receive+0x5f4>)
 80186fa:	4822      	ldr	r0, [pc, #136]	@ (8018784 <tcp_receive+0x5f8>)
 80186fc:	f007 ffca 	bl	8020694 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018702:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018706:	4293      	cmp	r3, r2
 8018708:	d906      	bls.n	8018718 <tcp_receive+0x58c>
 801870a:	4b1c      	ldr	r3, [pc, #112]	@ (801877c <tcp_receive+0x5f0>)
 801870c:	f240 5295 	movw	r2, #1429	@ 0x595
 8018710:	491d      	ldr	r1, [pc, #116]	@ (8018788 <tcp_receive+0x5fc>)
 8018712:	481c      	ldr	r0, [pc, #112]	@ (8018784 <tcp_receive+0x5f8>)
 8018714:	f007 ffbe 	bl	8020694 <iprintf>
      off = (u16_t)off32;
 8018718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801871a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801871e:	4b16      	ldr	r3, [pc, #88]	@ (8018778 <tcp_receive+0x5ec>)
 8018720:	685b      	ldr	r3, [r3, #4]
 8018722:	891b      	ldrh	r3, [r3, #8]
 8018724:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018728:	429a      	cmp	r2, r3
 801872a:	d906      	bls.n	801873a <tcp_receive+0x5ae>
 801872c:	4b13      	ldr	r3, [pc, #76]	@ (801877c <tcp_receive+0x5f0>)
 801872e:	f240 5297 	movw	r2, #1431	@ 0x597
 8018732:	4916      	ldr	r1, [pc, #88]	@ (801878c <tcp_receive+0x600>)
 8018734:	4813      	ldr	r0, [pc, #76]	@ (8018784 <tcp_receive+0x5f8>)
 8018736:	f007 ffad 	bl	8020694 <iprintf>
      inseg.len -= off;
 801873a:	4b0f      	ldr	r3, [pc, #60]	@ (8018778 <tcp_receive+0x5ec>)
 801873c:	891a      	ldrh	r2, [r3, #8]
 801873e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018742:	1ad3      	subs	r3, r2, r3
 8018744:	b29a      	uxth	r2, r3
 8018746:	4b0c      	ldr	r3, [pc, #48]	@ (8018778 <tcp_receive+0x5ec>)
 8018748:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801874a:	4b0b      	ldr	r3, [pc, #44]	@ (8018778 <tcp_receive+0x5ec>)
 801874c:	685b      	ldr	r3, [r3, #4]
 801874e:	891a      	ldrh	r2, [r3, #8]
 8018750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018754:	1ad3      	subs	r3, r2, r3
 8018756:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8018758:	e02a      	b.n	80187b0 <tcp_receive+0x624>
 801875a:	bf00      	nop
 801875c:	0802425c 	.word	0x0802425c
 8018760:	08024264 	.word	0x08024264
 8018764:	2002d4b0 	.word	0x2002d4b0
 8018768:	2002d4ac 	.word	0x2002d4ac
 801876c:	2002d46c 	.word	0x2002d46c
 8018770:	2002d4b2 	.word	0x2002d4b2
 8018774:	2002d4a8 	.word	0x2002d4a8
 8018778:	2002d484 	.word	0x2002d484
 801877c:	08023ef4 	.word	0x08023ef4
 8018780:	0802426c 	.word	0x0802426c
 8018784:	08023f40 	.word	0x08023f40
 8018788:	0802427c 	.word	0x0802427c
 801878c:	0802428c 	.word	0x0802428c
        off -= p->len;
 8018790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018792:	895b      	ldrh	r3, [r3, #10]
 8018794:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018798:	1ad3      	subs	r3, r2, r3
 801879a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801879e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80187a0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80187a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80187a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80187a6:	2200      	movs	r2, #0
 80187a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80187aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80187b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80187b2:	895b      	ldrh	r3, [r3, #10]
 80187b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80187b8:	429a      	cmp	r2, r3
 80187ba:	d8e9      	bhi.n	8018790 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80187bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80187c0:	4619      	mov	r1, r3
 80187c2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80187c4:	f7fc f87c 	bl	80148c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187cc:	4a90      	ldr	r2, [pc, #576]	@ (8018a10 <tcp_receive+0x884>)
 80187ce:	6013      	str	r3, [r2, #0]
 80187d0:	4b90      	ldr	r3, [pc, #576]	@ (8018a14 <tcp_receive+0x888>)
 80187d2:	691b      	ldr	r3, [r3, #16]
 80187d4:	4a8e      	ldr	r2, [pc, #568]	@ (8018a10 <tcp_receive+0x884>)
 80187d6:	6812      	ldr	r2, [r2, #0]
 80187d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80187da:	e00d      	b.n	80187f8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80187dc:	4b8c      	ldr	r3, [pc, #560]	@ (8018a10 <tcp_receive+0x884>)
 80187de:	681a      	ldr	r2, [r3, #0]
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187e4:	1ad3      	subs	r3, r2, r3
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	da06      	bge.n	80187f8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	8b5b      	ldrh	r3, [r3, #26]
 80187ee:	f043 0302 	orr.w	r3, r3, #2
 80187f2:	b29a      	uxth	r2, r3
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80187f8:	4b85      	ldr	r3, [pc, #532]	@ (8018a10 <tcp_receive+0x884>)
 80187fa:	681a      	ldr	r2, [r3, #0]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018800:	1ad3      	subs	r3, r2, r3
 8018802:	2b00      	cmp	r3, #0
 8018804:	f2c0 8427 	blt.w	8019056 <tcp_receive+0xeca>
 8018808:	4b81      	ldr	r3, [pc, #516]	@ (8018a10 <tcp_receive+0x884>)
 801880a:	681a      	ldr	r2, [r3, #0]
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018810:	6879      	ldr	r1, [r7, #4]
 8018812:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018814:	440b      	add	r3, r1
 8018816:	1ad3      	subs	r3, r2, r3
 8018818:	3301      	adds	r3, #1
 801881a:	2b00      	cmp	r3, #0
 801881c:	f300 841b 	bgt.w	8019056 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018824:	4b7a      	ldr	r3, [pc, #488]	@ (8018a10 <tcp_receive+0x884>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	429a      	cmp	r2, r3
 801882a:	f040 8298 	bne.w	8018d5e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801882e:	4b79      	ldr	r3, [pc, #484]	@ (8018a14 <tcp_receive+0x888>)
 8018830:	891c      	ldrh	r4, [r3, #8]
 8018832:	4b78      	ldr	r3, [pc, #480]	@ (8018a14 <tcp_receive+0x888>)
 8018834:	691b      	ldr	r3, [r3, #16]
 8018836:	899b      	ldrh	r3, [r3, #12]
 8018838:	b29b      	uxth	r3, r3
 801883a:	4618      	mov	r0, r3
 801883c:	f7fa faa0 	bl	8012d80 <lwip_htons>
 8018840:	4603      	mov	r3, r0
 8018842:	b2db      	uxtb	r3, r3
 8018844:	f003 0303 	and.w	r3, r3, #3
 8018848:	2b00      	cmp	r3, #0
 801884a:	d001      	beq.n	8018850 <tcp_receive+0x6c4>
 801884c:	2301      	movs	r3, #1
 801884e:	e000      	b.n	8018852 <tcp_receive+0x6c6>
 8018850:	2300      	movs	r3, #0
 8018852:	4423      	add	r3, r4
 8018854:	b29a      	uxth	r2, r3
 8018856:	4b70      	ldr	r3, [pc, #448]	@ (8018a18 <tcp_receive+0x88c>)
 8018858:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801885e:	4b6e      	ldr	r3, [pc, #440]	@ (8018a18 <tcp_receive+0x88c>)
 8018860:	881b      	ldrh	r3, [r3, #0]
 8018862:	429a      	cmp	r2, r3
 8018864:	d274      	bcs.n	8018950 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018866:	4b6b      	ldr	r3, [pc, #428]	@ (8018a14 <tcp_receive+0x888>)
 8018868:	691b      	ldr	r3, [r3, #16]
 801886a:	899b      	ldrh	r3, [r3, #12]
 801886c:	b29b      	uxth	r3, r3
 801886e:	4618      	mov	r0, r3
 8018870:	f7fa fa86 	bl	8012d80 <lwip_htons>
 8018874:	4603      	mov	r3, r0
 8018876:	b2db      	uxtb	r3, r3
 8018878:	f003 0301 	and.w	r3, r3, #1
 801887c:	2b00      	cmp	r3, #0
 801887e:	d01e      	beq.n	80188be <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018880:	4b64      	ldr	r3, [pc, #400]	@ (8018a14 <tcp_receive+0x888>)
 8018882:	691b      	ldr	r3, [r3, #16]
 8018884:	899b      	ldrh	r3, [r3, #12]
 8018886:	b29b      	uxth	r3, r3
 8018888:	b21b      	sxth	r3, r3
 801888a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801888e:	b21c      	sxth	r4, r3
 8018890:	4b60      	ldr	r3, [pc, #384]	@ (8018a14 <tcp_receive+0x888>)
 8018892:	691b      	ldr	r3, [r3, #16]
 8018894:	899b      	ldrh	r3, [r3, #12]
 8018896:	b29b      	uxth	r3, r3
 8018898:	4618      	mov	r0, r3
 801889a:	f7fa fa71 	bl	8012d80 <lwip_htons>
 801889e:	4603      	mov	r3, r0
 80188a0:	b2db      	uxtb	r3, r3
 80188a2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80188a6:	b29b      	uxth	r3, r3
 80188a8:	4618      	mov	r0, r3
 80188aa:	f7fa fa69 	bl	8012d80 <lwip_htons>
 80188ae:	4603      	mov	r3, r0
 80188b0:	b21b      	sxth	r3, r3
 80188b2:	4323      	orrs	r3, r4
 80188b4:	b21a      	sxth	r2, r3
 80188b6:	4b57      	ldr	r3, [pc, #348]	@ (8018a14 <tcp_receive+0x888>)
 80188b8:	691b      	ldr	r3, [r3, #16]
 80188ba:	b292      	uxth	r2, r2
 80188bc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80188c2:	4b54      	ldr	r3, [pc, #336]	@ (8018a14 <tcp_receive+0x888>)
 80188c4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80188c6:	4b53      	ldr	r3, [pc, #332]	@ (8018a14 <tcp_receive+0x888>)
 80188c8:	691b      	ldr	r3, [r3, #16]
 80188ca:	899b      	ldrh	r3, [r3, #12]
 80188cc:	b29b      	uxth	r3, r3
 80188ce:	4618      	mov	r0, r3
 80188d0:	f7fa fa56 	bl	8012d80 <lwip_htons>
 80188d4:	4603      	mov	r3, r0
 80188d6:	b2db      	uxtb	r3, r3
 80188d8:	f003 0302 	and.w	r3, r3, #2
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d005      	beq.n	80188ec <tcp_receive+0x760>
            inseg.len -= 1;
 80188e0:	4b4c      	ldr	r3, [pc, #304]	@ (8018a14 <tcp_receive+0x888>)
 80188e2:	891b      	ldrh	r3, [r3, #8]
 80188e4:	3b01      	subs	r3, #1
 80188e6:	b29a      	uxth	r2, r3
 80188e8:	4b4a      	ldr	r3, [pc, #296]	@ (8018a14 <tcp_receive+0x888>)
 80188ea:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80188ec:	4b49      	ldr	r3, [pc, #292]	@ (8018a14 <tcp_receive+0x888>)
 80188ee:	685b      	ldr	r3, [r3, #4]
 80188f0:	4a48      	ldr	r2, [pc, #288]	@ (8018a14 <tcp_receive+0x888>)
 80188f2:	8912      	ldrh	r2, [r2, #8]
 80188f4:	4611      	mov	r1, r2
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7fb fed0 	bl	801469c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80188fc:	4b45      	ldr	r3, [pc, #276]	@ (8018a14 <tcp_receive+0x888>)
 80188fe:	891c      	ldrh	r4, [r3, #8]
 8018900:	4b44      	ldr	r3, [pc, #272]	@ (8018a14 <tcp_receive+0x888>)
 8018902:	691b      	ldr	r3, [r3, #16]
 8018904:	899b      	ldrh	r3, [r3, #12]
 8018906:	b29b      	uxth	r3, r3
 8018908:	4618      	mov	r0, r3
 801890a:	f7fa fa39 	bl	8012d80 <lwip_htons>
 801890e:	4603      	mov	r3, r0
 8018910:	b2db      	uxtb	r3, r3
 8018912:	f003 0303 	and.w	r3, r3, #3
 8018916:	2b00      	cmp	r3, #0
 8018918:	d001      	beq.n	801891e <tcp_receive+0x792>
 801891a:	2301      	movs	r3, #1
 801891c:	e000      	b.n	8018920 <tcp_receive+0x794>
 801891e:	2300      	movs	r3, #0
 8018920:	4423      	add	r3, r4
 8018922:	b29a      	uxth	r2, r3
 8018924:	4b3c      	ldr	r3, [pc, #240]	@ (8018a18 <tcp_receive+0x88c>)
 8018926:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018928:	4b3b      	ldr	r3, [pc, #236]	@ (8018a18 <tcp_receive+0x88c>)
 801892a:	881b      	ldrh	r3, [r3, #0]
 801892c:	461a      	mov	r2, r3
 801892e:	4b38      	ldr	r3, [pc, #224]	@ (8018a10 <tcp_receive+0x884>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	441a      	add	r2, r3
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018938:	6879      	ldr	r1, [r7, #4]
 801893a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801893c:	440b      	add	r3, r1
 801893e:	429a      	cmp	r2, r3
 8018940:	d006      	beq.n	8018950 <tcp_receive+0x7c4>
 8018942:	4b36      	ldr	r3, [pc, #216]	@ (8018a1c <tcp_receive+0x890>)
 8018944:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018948:	4935      	ldr	r1, [pc, #212]	@ (8018a20 <tcp_receive+0x894>)
 801894a:	4836      	ldr	r0, [pc, #216]	@ (8018a24 <tcp_receive+0x898>)
 801894c:	f007 fea2 	bl	8020694 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018954:	2b00      	cmp	r3, #0
 8018956:	f000 80e6 	beq.w	8018b26 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801895a:	4b2e      	ldr	r3, [pc, #184]	@ (8018a14 <tcp_receive+0x888>)
 801895c:	691b      	ldr	r3, [r3, #16]
 801895e:	899b      	ldrh	r3, [r3, #12]
 8018960:	b29b      	uxth	r3, r3
 8018962:	4618      	mov	r0, r3
 8018964:	f7fa fa0c 	bl	8012d80 <lwip_htons>
 8018968:	4603      	mov	r3, r0
 801896a:	b2db      	uxtb	r3, r3
 801896c:	f003 0301 	and.w	r3, r3, #1
 8018970:	2b00      	cmp	r3, #0
 8018972:	d010      	beq.n	8018996 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018974:	e00a      	b.n	801898c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801897a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018980:	681a      	ldr	r2, [r3, #0]
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8018986:	68f8      	ldr	r0, [r7, #12]
 8018988:	f7fd fc2f 	bl	80161ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018990:	2b00      	cmp	r3, #0
 8018992:	d1f0      	bne.n	8018976 <tcp_receive+0x7ea>
 8018994:	e0c7      	b.n	8018b26 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801899c:	e051      	b.n	8018a42 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801899e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80189a0:	691b      	ldr	r3, [r3, #16]
 80189a2:	899b      	ldrh	r3, [r3, #12]
 80189a4:	b29b      	uxth	r3, r3
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7fa f9ea 	bl	8012d80 <lwip_htons>
 80189ac:	4603      	mov	r3, r0
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	f003 0301 	and.w	r3, r3, #1
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d03c      	beq.n	8018a32 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80189b8:	4b16      	ldr	r3, [pc, #88]	@ (8018a14 <tcp_receive+0x888>)
 80189ba:	691b      	ldr	r3, [r3, #16]
 80189bc:	899b      	ldrh	r3, [r3, #12]
 80189be:	b29b      	uxth	r3, r3
 80189c0:	4618      	mov	r0, r3
 80189c2:	f7fa f9dd 	bl	8012d80 <lwip_htons>
 80189c6:	4603      	mov	r3, r0
 80189c8:	b2db      	uxtb	r3, r3
 80189ca:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d12f      	bne.n	8018a32 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80189d2:	4b10      	ldr	r3, [pc, #64]	@ (8018a14 <tcp_receive+0x888>)
 80189d4:	691b      	ldr	r3, [r3, #16]
 80189d6:	899b      	ldrh	r3, [r3, #12]
 80189d8:	b29c      	uxth	r4, r3
 80189da:	2001      	movs	r0, #1
 80189dc:	f7fa f9d0 	bl	8012d80 <lwip_htons>
 80189e0:	4603      	mov	r3, r0
 80189e2:	461a      	mov	r2, r3
 80189e4:	4b0b      	ldr	r3, [pc, #44]	@ (8018a14 <tcp_receive+0x888>)
 80189e6:	691b      	ldr	r3, [r3, #16]
 80189e8:	4322      	orrs	r2, r4
 80189ea:	b292      	uxth	r2, r2
 80189ec:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80189ee:	4b09      	ldr	r3, [pc, #36]	@ (8018a14 <tcp_receive+0x888>)
 80189f0:	891c      	ldrh	r4, [r3, #8]
 80189f2:	4b08      	ldr	r3, [pc, #32]	@ (8018a14 <tcp_receive+0x888>)
 80189f4:	691b      	ldr	r3, [r3, #16]
 80189f6:	899b      	ldrh	r3, [r3, #12]
 80189f8:	b29b      	uxth	r3, r3
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7fa f9c0 	bl	8012d80 <lwip_htons>
 8018a00:	4603      	mov	r3, r0
 8018a02:	b2db      	uxtb	r3, r3
 8018a04:	f003 0303 	and.w	r3, r3, #3
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d00d      	beq.n	8018a28 <tcp_receive+0x89c>
 8018a0c:	2301      	movs	r3, #1
 8018a0e:	e00c      	b.n	8018a2a <tcp_receive+0x89e>
 8018a10:	2002d4a8 	.word	0x2002d4a8
 8018a14:	2002d484 	.word	0x2002d484
 8018a18:	2002d4b2 	.word	0x2002d4b2
 8018a1c:	08023ef4 	.word	0x08023ef4
 8018a20:	0802429c 	.word	0x0802429c
 8018a24:	08023f40 	.word	0x08023f40
 8018a28:	2300      	movs	r3, #0
 8018a2a:	4423      	add	r3, r4
 8018a2c:	b29a      	uxth	r2, r3
 8018a2e:	4b98      	ldr	r3, [pc, #608]	@ (8018c90 <tcp_receive+0xb04>)
 8018a30:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a34:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018a3c:	6938      	ldr	r0, [r7, #16]
 8018a3e:	f7fd fbd4 	bl	80161ea <tcp_seg_free>
            while (next &&
 8018a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d00e      	beq.n	8018a66 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018a48:	4b91      	ldr	r3, [pc, #580]	@ (8018c90 <tcp_receive+0xb04>)
 8018a4a:	881b      	ldrh	r3, [r3, #0]
 8018a4c:	461a      	mov	r2, r3
 8018a4e:	4b91      	ldr	r3, [pc, #580]	@ (8018c94 <tcp_receive+0xb08>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	441a      	add	r2, r3
 8018a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a56:	691b      	ldr	r3, [r3, #16]
 8018a58:	685b      	ldr	r3, [r3, #4]
 8018a5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018a5c:	8909      	ldrh	r1, [r1, #8]
 8018a5e:	440b      	add	r3, r1
 8018a60:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	da9b      	bge.n	801899e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d059      	beq.n	8018b20 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018a6c:	4b88      	ldr	r3, [pc, #544]	@ (8018c90 <tcp_receive+0xb04>)
 8018a6e:	881b      	ldrh	r3, [r3, #0]
 8018a70:	461a      	mov	r2, r3
 8018a72:	4b88      	ldr	r3, [pc, #544]	@ (8018c94 <tcp_receive+0xb08>)
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	441a      	add	r2, r3
 8018a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a7a:	691b      	ldr	r3, [r3, #16]
 8018a7c:	685b      	ldr	r3, [r3, #4]
 8018a7e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	dd4d      	ble.n	8018b20 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a86:	691b      	ldr	r3, [r3, #16]
 8018a88:	685b      	ldr	r3, [r3, #4]
 8018a8a:	b29a      	uxth	r2, r3
 8018a8c:	4b81      	ldr	r3, [pc, #516]	@ (8018c94 <tcp_receive+0xb08>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	1ad3      	subs	r3, r2, r3
 8018a94:	b29a      	uxth	r2, r3
 8018a96:	4b80      	ldr	r3, [pc, #512]	@ (8018c98 <tcp_receive+0xb0c>)
 8018a98:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8018c98 <tcp_receive+0xb0c>)
 8018a9c:	691b      	ldr	r3, [r3, #16]
 8018a9e:	899b      	ldrh	r3, [r3, #12]
 8018aa0:	b29b      	uxth	r3, r3
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f7fa f96c 	bl	8012d80 <lwip_htons>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	b2db      	uxtb	r3, r3
 8018aac:	f003 0302 	and.w	r3, r3, #2
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d005      	beq.n	8018ac0 <tcp_receive+0x934>
                inseg.len -= 1;
 8018ab4:	4b78      	ldr	r3, [pc, #480]	@ (8018c98 <tcp_receive+0xb0c>)
 8018ab6:	891b      	ldrh	r3, [r3, #8]
 8018ab8:	3b01      	subs	r3, #1
 8018aba:	b29a      	uxth	r2, r3
 8018abc:	4b76      	ldr	r3, [pc, #472]	@ (8018c98 <tcp_receive+0xb0c>)
 8018abe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018ac0:	4b75      	ldr	r3, [pc, #468]	@ (8018c98 <tcp_receive+0xb0c>)
 8018ac2:	685b      	ldr	r3, [r3, #4]
 8018ac4:	4a74      	ldr	r2, [pc, #464]	@ (8018c98 <tcp_receive+0xb0c>)
 8018ac6:	8912      	ldrh	r2, [r2, #8]
 8018ac8:	4611      	mov	r1, r2
 8018aca:	4618      	mov	r0, r3
 8018acc:	f7fb fde6 	bl	801469c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018ad0:	4b71      	ldr	r3, [pc, #452]	@ (8018c98 <tcp_receive+0xb0c>)
 8018ad2:	891c      	ldrh	r4, [r3, #8]
 8018ad4:	4b70      	ldr	r3, [pc, #448]	@ (8018c98 <tcp_receive+0xb0c>)
 8018ad6:	691b      	ldr	r3, [r3, #16]
 8018ad8:	899b      	ldrh	r3, [r3, #12]
 8018ada:	b29b      	uxth	r3, r3
 8018adc:	4618      	mov	r0, r3
 8018ade:	f7fa f94f 	bl	8012d80 <lwip_htons>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	b2db      	uxtb	r3, r3
 8018ae6:	f003 0303 	and.w	r3, r3, #3
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d001      	beq.n	8018af2 <tcp_receive+0x966>
 8018aee:	2301      	movs	r3, #1
 8018af0:	e000      	b.n	8018af4 <tcp_receive+0x968>
 8018af2:	2300      	movs	r3, #0
 8018af4:	4423      	add	r3, r4
 8018af6:	b29a      	uxth	r2, r3
 8018af8:	4b65      	ldr	r3, [pc, #404]	@ (8018c90 <tcp_receive+0xb04>)
 8018afa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018afc:	4b64      	ldr	r3, [pc, #400]	@ (8018c90 <tcp_receive+0xb04>)
 8018afe:	881b      	ldrh	r3, [r3, #0]
 8018b00:	461a      	mov	r2, r3
 8018b02:	4b64      	ldr	r3, [pc, #400]	@ (8018c94 <tcp_receive+0xb08>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	441a      	add	r2, r3
 8018b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b0a:	691b      	ldr	r3, [r3, #16]
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	429a      	cmp	r2, r3
 8018b10:	d006      	beq.n	8018b20 <tcp_receive+0x994>
 8018b12:	4b62      	ldr	r3, [pc, #392]	@ (8018c9c <tcp_receive+0xb10>)
 8018b14:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018b18:	4961      	ldr	r1, [pc, #388]	@ (8018ca0 <tcp_receive+0xb14>)
 8018b1a:	4862      	ldr	r0, [pc, #392]	@ (8018ca4 <tcp_receive+0xb18>)
 8018b1c:	f007 fdba 	bl	8020694 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018b24:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018b26:	4b5a      	ldr	r3, [pc, #360]	@ (8018c90 <tcp_receive+0xb04>)
 8018b28:	881b      	ldrh	r3, [r3, #0]
 8018b2a:	461a      	mov	r2, r3
 8018b2c:	4b59      	ldr	r3, [pc, #356]	@ (8018c94 <tcp_receive+0xb08>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	441a      	add	r2, r3
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018b3a:	4b55      	ldr	r3, [pc, #340]	@ (8018c90 <tcp_receive+0xb04>)
 8018b3c:	881b      	ldrh	r3, [r3, #0]
 8018b3e:	429a      	cmp	r2, r3
 8018b40:	d206      	bcs.n	8018b50 <tcp_receive+0x9c4>
 8018b42:	4b56      	ldr	r3, [pc, #344]	@ (8018c9c <tcp_receive+0xb10>)
 8018b44:	f240 6207 	movw	r2, #1543	@ 0x607
 8018b48:	4957      	ldr	r1, [pc, #348]	@ (8018ca8 <tcp_receive+0xb1c>)
 8018b4a:	4856      	ldr	r0, [pc, #344]	@ (8018ca4 <tcp_receive+0xb18>)
 8018b4c:	f007 fda2 	bl	8020694 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018b54:	4b4e      	ldr	r3, [pc, #312]	@ (8018c90 <tcp_receive+0xb04>)
 8018b56:	881b      	ldrh	r3, [r3, #0]
 8018b58:	1ad3      	subs	r3, r2, r3
 8018b5a:	b29a      	uxth	r2, r3
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018b60:	6878      	ldr	r0, [r7, #4]
 8018b62:	f7fc fe1b 	bl	801579c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018b66:	4b4c      	ldr	r3, [pc, #304]	@ (8018c98 <tcp_receive+0xb0c>)
 8018b68:	685b      	ldr	r3, [r3, #4]
 8018b6a:	891b      	ldrh	r3, [r3, #8]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d006      	beq.n	8018b7e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018b70:	4b49      	ldr	r3, [pc, #292]	@ (8018c98 <tcp_receive+0xb0c>)
 8018b72:	685b      	ldr	r3, [r3, #4]
 8018b74:	4a4d      	ldr	r2, [pc, #308]	@ (8018cac <tcp_receive+0xb20>)
 8018b76:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018b78:	4b47      	ldr	r3, [pc, #284]	@ (8018c98 <tcp_receive+0xb0c>)
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018b7e:	4b46      	ldr	r3, [pc, #280]	@ (8018c98 <tcp_receive+0xb0c>)
 8018b80:	691b      	ldr	r3, [r3, #16]
 8018b82:	899b      	ldrh	r3, [r3, #12]
 8018b84:	b29b      	uxth	r3, r3
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7fa f8fa 	bl	8012d80 <lwip_htons>
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	b2db      	uxtb	r3, r3
 8018b90:	f003 0301 	and.w	r3, r3, #1
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	f000 80b8 	beq.w	8018d0a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018b9a:	4b45      	ldr	r3, [pc, #276]	@ (8018cb0 <tcp_receive+0xb24>)
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	f043 0320 	orr.w	r3, r3, #32
 8018ba2:	b2da      	uxtb	r2, r3
 8018ba4:	4b42      	ldr	r3, [pc, #264]	@ (8018cb0 <tcp_receive+0xb24>)
 8018ba6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018ba8:	e0af      	b.n	8018d0a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018bb4:	691b      	ldr	r3, [r3, #16]
 8018bb6:	685b      	ldr	r3, [r3, #4]
 8018bb8:	4a36      	ldr	r2, [pc, #216]	@ (8018c94 <tcp_receive+0xb08>)
 8018bba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018bbc:	68bb      	ldr	r3, [r7, #8]
 8018bbe:	891b      	ldrh	r3, [r3, #8]
 8018bc0:	461c      	mov	r4, r3
 8018bc2:	68bb      	ldr	r3, [r7, #8]
 8018bc4:	691b      	ldr	r3, [r3, #16]
 8018bc6:	899b      	ldrh	r3, [r3, #12]
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f7fa f8d8 	bl	8012d80 <lwip_htons>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	b2db      	uxtb	r3, r3
 8018bd4:	f003 0303 	and.w	r3, r3, #3
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d001      	beq.n	8018be0 <tcp_receive+0xa54>
 8018bdc:	2301      	movs	r3, #1
 8018bde:	e000      	b.n	8018be2 <tcp_receive+0xa56>
 8018be0:	2300      	movs	r3, #0
 8018be2:	191a      	adds	r2, r3, r4
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018be8:	441a      	add	r2, r3
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018bf2:	461c      	mov	r4, r3
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	891b      	ldrh	r3, [r3, #8]
 8018bf8:	461d      	mov	r5, r3
 8018bfa:	68bb      	ldr	r3, [r7, #8]
 8018bfc:	691b      	ldr	r3, [r3, #16]
 8018bfe:	899b      	ldrh	r3, [r3, #12]
 8018c00:	b29b      	uxth	r3, r3
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7fa f8bc 	bl	8012d80 <lwip_htons>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	b2db      	uxtb	r3, r3
 8018c0c:	f003 0303 	and.w	r3, r3, #3
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d001      	beq.n	8018c18 <tcp_receive+0xa8c>
 8018c14:	2301      	movs	r3, #1
 8018c16:	e000      	b.n	8018c1a <tcp_receive+0xa8e>
 8018c18:	2300      	movs	r3, #0
 8018c1a:	442b      	add	r3, r5
 8018c1c:	429c      	cmp	r4, r3
 8018c1e:	d206      	bcs.n	8018c2e <tcp_receive+0xaa2>
 8018c20:	4b1e      	ldr	r3, [pc, #120]	@ (8018c9c <tcp_receive+0xb10>)
 8018c22:	f240 622b 	movw	r2, #1579	@ 0x62b
 8018c26:	4923      	ldr	r1, [pc, #140]	@ (8018cb4 <tcp_receive+0xb28>)
 8018c28:	481e      	ldr	r0, [pc, #120]	@ (8018ca4 <tcp_receive+0xb18>)
 8018c2a:	f007 fd33 	bl	8020694 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	891b      	ldrh	r3, [r3, #8]
 8018c32:	461c      	mov	r4, r3
 8018c34:	68bb      	ldr	r3, [r7, #8]
 8018c36:	691b      	ldr	r3, [r3, #16]
 8018c38:	899b      	ldrh	r3, [r3, #12]
 8018c3a:	b29b      	uxth	r3, r3
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f7fa f89f 	bl	8012d80 <lwip_htons>
 8018c42:	4603      	mov	r3, r0
 8018c44:	b2db      	uxtb	r3, r3
 8018c46:	f003 0303 	and.w	r3, r3, #3
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d001      	beq.n	8018c52 <tcp_receive+0xac6>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	e000      	b.n	8018c54 <tcp_receive+0xac8>
 8018c52:	2300      	movs	r3, #0
 8018c54:	1919      	adds	r1, r3, r4
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018c5a:	b28b      	uxth	r3, r1
 8018c5c:	1ad3      	subs	r3, r2, r3
 8018c5e:	b29a      	uxth	r2, r3
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f7fc fd99 	bl	801579c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	685b      	ldr	r3, [r3, #4]
 8018c6e:	891b      	ldrh	r3, [r3, #8]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d028      	beq.n	8018cc6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018c74:	4b0d      	ldr	r3, [pc, #52]	@ (8018cac <tcp_receive+0xb20>)
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d01d      	beq.n	8018cb8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8018cac <tcp_receive+0xb20>)
 8018c7e:	681a      	ldr	r2, [r3, #0]
 8018c80:	68bb      	ldr	r3, [r7, #8]
 8018c82:	685b      	ldr	r3, [r3, #4]
 8018c84:	4619      	mov	r1, r3
 8018c86:	4610      	mov	r0, r2
 8018c88:	f7fb ff8e 	bl	8014ba8 <pbuf_cat>
 8018c8c:	e018      	b.n	8018cc0 <tcp_receive+0xb34>
 8018c8e:	bf00      	nop
 8018c90:	2002d4b2 	.word	0x2002d4b2
 8018c94:	2002d4a8 	.word	0x2002d4a8
 8018c98:	2002d484 	.word	0x2002d484
 8018c9c:	08023ef4 	.word	0x08023ef4
 8018ca0:	080242d4 	.word	0x080242d4
 8018ca4:	08023f40 	.word	0x08023f40
 8018ca8:	08024310 	.word	0x08024310
 8018cac:	2002d4b8 	.word	0x2002d4b8
 8018cb0:	2002d4b5 	.word	0x2002d4b5
 8018cb4:	08024330 	.word	0x08024330
            } else {
              recv_data = cseg->p;
 8018cb8:	68bb      	ldr	r3, [r7, #8]
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	4a70      	ldr	r2, [pc, #448]	@ (8018e80 <tcp_receive+0xcf4>)
 8018cbe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018cc0:	68bb      	ldr	r3, [r7, #8]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	691b      	ldr	r3, [r3, #16]
 8018cca:	899b      	ldrh	r3, [r3, #12]
 8018ccc:	b29b      	uxth	r3, r3
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f7fa f856 	bl	8012d80 <lwip_htons>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	b2db      	uxtb	r3, r3
 8018cd8:	f003 0301 	and.w	r3, r3, #1
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d00d      	beq.n	8018cfc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018ce0:	4b68      	ldr	r3, [pc, #416]	@ (8018e84 <tcp_receive+0xcf8>)
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	f043 0320 	orr.w	r3, r3, #32
 8018ce8:	b2da      	uxtb	r2, r3
 8018cea:	4b66      	ldr	r3, [pc, #408]	@ (8018e84 <tcp_receive+0xcf8>)
 8018cec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	7d1b      	ldrb	r3, [r3, #20]
 8018cf2:	2b04      	cmp	r3, #4
 8018cf4:	d102      	bne.n	8018cfc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	2207      	movs	r2, #7
 8018cfa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	681a      	ldr	r2, [r3, #0]
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018d04:	68b8      	ldr	r0, [r7, #8]
 8018d06:	f7fd fa70 	bl	80161ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d008      	beq.n	8018d24 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018d16:	691b      	ldr	r3, [r3, #16]
 8018d18:	685a      	ldr	r2, [r3, #4]
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	f43f af43 	beq.w	8018baa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	8b5b      	ldrh	r3, [r3, #26]
 8018d28:	f003 0301 	and.w	r3, r3, #1
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d00e      	beq.n	8018d4e <tcp_receive+0xbc2>
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	8b5b      	ldrh	r3, [r3, #26]
 8018d34:	f023 0301 	bic.w	r3, r3, #1
 8018d38:	b29a      	uxth	r2, r3
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	835a      	strh	r2, [r3, #26]
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	8b5b      	ldrh	r3, [r3, #26]
 8018d42:	f043 0302 	orr.w	r3, r3, #2
 8018d46:	b29a      	uxth	r2, r3
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018d4c:	e187      	b.n	801905e <tcp_receive+0xed2>
        tcp_ack(pcb);
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	8b5b      	ldrh	r3, [r3, #26]
 8018d52:	f043 0301 	orr.w	r3, r3, #1
 8018d56:	b29a      	uxth	r2, r3
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018d5c:	e17f      	b.n	801905e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d106      	bne.n	8018d74 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018d66:	4848      	ldr	r0, [pc, #288]	@ (8018e88 <tcp_receive+0xcfc>)
 8018d68:	f7fd fa58 	bl	801621c <tcp_seg_copy>
 8018d6c:	4602      	mov	r2, r0
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	675a      	str	r2, [r3, #116]	@ 0x74
 8018d72:	e16c      	b.n	801904e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018d74:	2300      	movs	r3, #0
 8018d76:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018d7e:	e156      	b.n	801902e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8018d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d82:	691b      	ldr	r3, [r3, #16]
 8018d84:	685a      	ldr	r2, [r3, #4]
 8018d86:	4b41      	ldr	r3, [pc, #260]	@ (8018e8c <tcp_receive+0xd00>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	429a      	cmp	r2, r3
 8018d8c:	d11d      	bne.n	8018dca <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8018e88 <tcp_receive+0xcfc>)
 8018d90:	891a      	ldrh	r2, [r3, #8]
 8018d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d94:	891b      	ldrh	r3, [r3, #8]
 8018d96:	429a      	cmp	r2, r3
 8018d98:	f240 814e 	bls.w	8019038 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018d9c:	483a      	ldr	r0, [pc, #232]	@ (8018e88 <tcp_receive+0xcfc>)
 8018d9e:	f7fd fa3d 	bl	801621c <tcp_seg_copy>
 8018da2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	f000 8148 	beq.w	801903c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8018dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d003      	beq.n	8018dba <tcp_receive+0xc2e>
                    prev->next = cseg;
 8018db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018db4:	697a      	ldr	r2, [r7, #20]
 8018db6:	601a      	str	r2, [r3, #0]
 8018db8:	e002      	b.n	8018dc0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	697a      	ldr	r2, [r7, #20]
 8018dbe:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018dc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018dc2:	6978      	ldr	r0, [r7, #20]
 8018dc4:	f7ff f8de 	bl	8017f84 <tcp_oos_insert_segment>
                }
                break;
 8018dc8:	e138      	b.n	801903c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d117      	bne.n	8018e00 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8018e8c <tcp_receive+0xd00>)
 8018dd2:	681a      	ldr	r2, [r3, #0]
 8018dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018dd6:	691b      	ldr	r3, [r3, #16]
 8018dd8:	685b      	ldr	r3, [r3, #4]
 8018dda:	1ad3      	subs	r3, r2, r3
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	da57      	bge.n	8018e90 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018de0:	4829      	ldr	r0, [pc, #164]	@ (8018e88 <tcp_receive+0xcfc>)
 8018de2:	f7fd fa1b 	bl	801621c <tcp_seg_copy>
 8018de6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018de8:	69bb      	ldr	r3, [r7, #24]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	f000 8128 	beq.w	8019040 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	69ba      	ldr	r2, [r7, #24]
 8018df4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018df6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018df8:	69b8      	ldr	r0, [r7, #24]
 8018dfa:	f7ff f8c3 	bl	8017f84 <tcp_oos_insert_segment>
                  }
                  break;
 8018dfe:	e11f      	b.n	8019040 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018e00:	4b22      	ldr	r3, [pc, #136]	@ (8018e8c <tcp_receive+0xd00>)
 8018e02:	681a      	ldr	r2, [r3, #0]
 8018e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e06:	691b      	ldr	r3, [r3, #16]
 8018e08:	685b      	ldr	r3, [r3, #4]
 8018e0a:	1ad3      	subs	r3, r2, r3
 8018e0c:	3b01      	subs	r3, #1
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	db3e      	blt.n	8018e90 <tcp_receive+0xd04>
 8018e12:	4b1e      	ldr	r3, [pc, #120]	@ (8018e8c <tcp_receive+0xd00>)
 8018e14:	681a      	ldr	r2, [r3, #0]
 8018e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e18:	691b      	ldr	r3, [r3, #16]
 8018e1a:	685b      	ldr	r3, [r3, #4]
 8018e1c:	1ad3      	subs	r3, r2, r3
 8018e1e:	3301      	adds	r3, #1
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	dc35      	bgt.n	8018e90 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018e24:	4818      	ldr	r0, [pc, #96]	@ (8018e88 <tcp_receive+0xcfc>)
 8018e26:	f7fd f9f9 	bl	801621c <tcp_seg_copy>
 8018e2a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018e2c:	69fb      	ldr	r3, [r7, #28]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	f000 8108 	beq.w	8019044 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e36:	691b      	ldr	r3, [r3, #16]
 8018e38:	685b      	ldr	r3, [r3, #4]
 8018e3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018e3c:	8912      	ldrh	r2, [r2, #8]
 8018e3e:	441a      	add	r2, r3
 8018e40:	4b12      	ldr	r3, [pc, #72]	@ (8018e8c <tcp_receive+0xd00>)
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	1ad3      	subs	r3, r2, r3
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	dd12      	ble.n	8018e70 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018e4a:	4b10      	ldr	r3, [pc, #64]	@ (8018e8c <tcp_receive+0xd00>)
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	b29a      	uxth	r2, r3
 8018e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e52:	691b      	ldr	r3, [r3, #16]
 8018e54:	685b      	ldr	r3, [r3, #4]
 8018e56:	b29b      	uxth	r3, r3
 8018e58:	1ad3      	subs	r3, r2, r3
 8018e5a:	b29a      	uxth	r2, r3
 8018e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e5e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e62:	685a      	ldr	r2, [r3, #4]
 8018e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e66:	891b      	ldrh	r3, [r3, #8]
 8018e68:	4619      	mov	r1, r3
 8018e6a:	4610      	mov	r0, r2
 8018e6c:	f7fb fc16 	bl	801469c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e72:	69fa      	ldr	r2, [r7, #28]
 8018e74:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018e76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018e78:	69f8      	ldr	r0, [r7, #28]
 8018e7a:	f7ff f883 	bl	8017f84 <tcp_oos_insert_segment>
                  }
                  break;
 8018e7e:	e0e1      	b.n	8019044 <tcp_receive+0xeb8>
 8018e80:	2002d4b8 	.word	0x2002d4b8
 8018e84:	2002d4b5 	.word	0x2002d4b5
 8018e88:	2002d484 	.word	0x2002d484
 8018e8c:	2002d4a8 	.word	0x2002d4a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e92:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	f040 80c5 	bne.w	8019028 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018e9e:	4b7f      	ldr	r3, [pc, #508]	@ (801909c <tcp_receive+0xf10>)
 8018ea0:	681a      	ldr	r2, [r3, #0]
 8018ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ea4:	691b      	ldr	r3, [r3, #16]
 8018ea6:	685b      	ldr	r3, [r3, #4]
 8018ea8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	f340 80bc 	ble.w	8019028 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eb2:	691b      	ldr	r3, [r3, #16]
 8018eb4:	899b      	ldrh	r3, [r3, #12]
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	4618      	mov	r0, r3
 8018eba:	f7f9 ff61 	bl	8012d80 <lwip_htons>
 8018ebe:	4603      	mov	r3, r0
 8018ec0:	b2db      	uxtb	r3, r3
 8018ec2:	f003 0301 	and.w	r3, r3, #1
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	f040 80be 	bne.w	8019048 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018ecc:	4874      	ldr	r0, [pc, #464]	@ (80190a0 <tcp_receive+0xf14>)
 8018ece:	f7fd f9a5 	bl	801621c <tcp_seg_copy>
 8018ed2:	4602      	mov	r2, r0
 8018ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ed6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	f000 80b5 	beq.w	801904c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ee4:	691b      	ldr	r3, [r3, #16]
 8018ee6:	685b      	ldr	r3, [r3, #4]
 8018ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018eea:	8912      	ldrh	r2, [r2, #8]
 8018eec:	441a      	add	r2, r3
 8018eee:	4b6b      	ldr	r3, [pc, #428]	@ (801909c <tcp_receive+0xf10>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	1ad3      	subs	r3, r2, r3
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	dd12      	ble.n	8018f1e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018ef8:	4b68      	ldr	r3, [pc, #416]	@ (801909c <tcp_receive+0xf10>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	b29a      	uxth	r2, r3
 8018efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f00:	691b      	ldr	r3, [r3, #16]
 8018f02:	685b      	ldr	r3, [r3, #4]
 8018f04:	b29b      	uxth	r3, r3
 8018f06:	1ad3      	subs	r3, r2, r3
 8018f08:	b29a      	uxth	r2, r3
 8018f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f0c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f10:	685a      	ldr	r2, [r3, #4]
 8018f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f14:	891b      	ldrh	r3, [r3, #8]
 8018f16:	4619      	mov	r1, r3
 8018f18:	4610      	mov	r0, r2
 8018f1a:	f7fb fbbf 	bl	801469c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018f1e:	4b61      	ldr	r3, [pc, #388]	@ (80190a4 <tcp_receive+0xf18>)
 8018f20:	881b      	ldrh	r3, [r3, #0]
 8018f22:	461a      	mov	r2, r3
 8018f24:	4b5d      	ldr	r3, [pc, #372]	@ (801909c <tcp_receive+0xf10>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	441a      	add	r2, r3
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f2e:	6879      	ldr	r1, [r7, #4]
 8018f30:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018f32:	440b      	add	r3, r1
 8018f34:	1ad3      	subs	r3, r2, r3
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	f340 8088 	ble.w	801904c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	691b      	ldr	r3, [r3, #16]
 8018f42:	899b      	ldrh	r3, [r3, #12]
 8018f44:	b29b      	uxth	r3, r3
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7f9 ff1a 	bl	8012d80 <lwip_htons>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	b2db      	uxtb	r3, r3
 8018f50:	f003 0301 	and.w	r3, r3, #1
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d021      	beq.n	8018f9c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	691b      	ldr	r3, [r3, #16]
 8018f5e:	899b      	ldrh	r3, [r3, #12]
 8018f60:	b29b      	uxth	r3, r3
 8018f62:	b21b      	sxth	r3, r3
 8018f64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018f68:	b21c      	sxth	r4, r3
 8018f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	691b      	ldr	r3, [r3, #16]
 8018f70:	899b      	ldrh	r3, [r3, #12]
 8018f72:	b29b      	uxth	r3, r3
 8018f74:	4618      	mov	r0, r3
 8018f76:	f7f9 ff03 	bl	8012d80 <lwip_htons>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	b2db      	uxtb	r3, r3
 8018f7e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7f9 fefb 	bl	8012d80 <lwip_htons>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	b21b      	sxth	r3, r3
 8018f8e:	4323      	orrs	r3, r4
 8018f90:	b21a      	sxth	r2, r3
 8018f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	691b      	ldr	r3, [r3, #16]
 8018f98:	b292      	uxth	r2, r2
 8018f9a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fa0:	b29a      	uxth	r2, r3
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018fa6:	4413      	add	r3, r2
 8018fa8:	b299      	uxth	r1, r3
 8018faa:	4b3c      	ldr	r3, [pc, #240]	@ (801909c <tcp_receive+0xf10>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	b29a      	uxth	r2, r3
 8018fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	1a8a      	subs	r2, r1, r2
 8018fb6:	b292      	uxth	r2, r2
 8018fb8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	685a      	ldr	r2, [r3, #4]
 8018fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	891b      	ldrh	r3, [r3, #8]
 8018fc6:	4619      	mov	r1, r3
 8018fc8:	4610      	mov	r0, r2
 8018fca:	f7fb fb67 	bl	801469c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	891c      	ldrh	r4, [r3, #8]
 8018fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	691b      	ldr	r3, [r3, #16]
 8018fda:	899b      	ldrh	r3, [r3, #12]
 8018fdc:	b29b      	uxth	r3, r3
 8018fde:	4618      	mov	r0, r3
 8018fe0:	f7f9 fece 	bl	8012d80 <lwip_htons>
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	b2db      	uxtb	r3, r3
 8018fe8:	f003 0303 	and.w	r3, r3, #3
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d001      	beq.n	8018ff4 <tcp_receive+0xe68>
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	e000      	b.n	8018ff6 <tcp_receive+0xe6a>
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	4423      	add	r3, r4
 8018ff8:	b29a      	uxth	r2, r3
 8018ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80190a4 <tcp_receive+0xf18>)
 8018ffc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018ffe:	4b29      	ldr	r3, [pc, #164]	@ (80190a4 <tcp_receive+0xf18>)
 8019000:	881b      	ldrh	r3, [r3, #0]
 8019002:	461a      	mov	r2, r3
 8019004:	4b25      	ldr	r3, [pc, #148]	@ (801909c <tcp_receive+0xf10>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	441a      	add	r2, r3
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801900e:	6879      	ldr	r1, [r7, #4]
 8019010:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019012:	440b      	add	r3, r1
 8019014:	429a      	cmp	r2, r3
 8019016:	d019      	beq.n	801904c <tcp_receive+0xec0>
 8019018:	4b23      	ldr	r3, [pc, #140]	@ (80190a8 <tcp_receive+0xf1c>)
 801901a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801901e:	4923      	ldr	r1, [pc, #140]	@ (80190ac <tcp_receive+0xf20>)
 8019020:	4823      	ldr	r0, [pc, #140]	@ (80190b0 <tcp_receive+0xf24>)
 8019022:	f007 fb37 	bl	8020694 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8019026:	e011      	b.n	801904c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801902e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019030:	2b00      	cmp	r3, #0
 8019032:	f47f aea5 	bne.w	8018d80 <tcp_receive+0xbf4>
 8019036:	e00a      	b.n	801904e <tcp_receive+0xec2>
                break;
 8019038:	bf00      	nop
 801903a:	e008      	b.n	801904e <tcp_receive+0xec2>
                break;
 801903c:	bf00      	nop
 801903e:	e006      	b.n	801904e <tcp_receive+0xec2>
                  break;
 8019040:	bf00      	nop
 8019042:	e004      	b.n	801904e <tcp_receive+0xec2>
                  break;
 8019044:	bf00      	nop
 8019046:	e002      	b.n	801904e <tcp_receive+0xec2>
                  break;
 8019048:	bf00      	nop
 801904a:	e000      	b.n	801904e <tcp_receive+0xec2>
                break;
 801904c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f001 ff44 	bl	801aedc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019054:	e003      	b.n	801905e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019056:	6878      	ldr	r0, [r7, #4]
 8019058:	f001 ff40 	bl	801aedc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801905c:	e01a      	b.n	8019094 <tcp_receive+0xf08>
 801905e:	e019      	b.n	8019094 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019060:	4b0e      	ldr	r3, [pc, #56]	@ (801909c <tcp_receive+0xf10>)
 8019062:	681a      	ldr	r2, [r3, #0]
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019068:	1ad3      	subs	r3, r2, r3
 801906a:	2b00      	cmp	r3, #0
 801906c:	db0a      	blt.n	8019084 <tcp_receive+0xef8>
 801906e:	4b0b      	ldr	r3, [pc, #44]	@ (801909c <tcp_receive+0xf10>)
 8019070:	681a      	ldr	r2, [r3, #0]
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019076:	6879      	ldr	r1, [r7, #4]
 8019078:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801907a:	440b      	add	r3, r1
 801907c:	1ad3      	subs	r3, r2, r3
 801907e:	3301      	adds	r3, #1
 8019080:	2b00      	cmp	r3, #0
 8019082:	dd07      	ble.n	8019094 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	8b5b      	ldrh	r3, [r3, #26]
 8019088:	f043 0302 	orr.w	r3, r3, #2
 801908c:	b29a      	uxth	r2, r3
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019092:	e7ff      	b.n	8019094 <tcp_receive+0xf08>
 8019094:	bf00      	nop
 8019096:	3750      	adds	r7, #80	@ 0x50
 8019098:	46bd      	mov	sp, r7
 801909a:	bdb0      	pop	{r4, r5, r7, pc}
 801909c:	2002d4a8 	.word	0x2002d4a8
 80190a0:	2002d484 	.word	0x2002d484
 80190a4:	2002d4b2 	.word	0x2002d4b2
 80190a8:	08023ef4 	.word	0x08023ef4
 80190ac:	0802429c 	.word	0x0802429c
 80190b0:	08023f40 	.word	0x08023f40

080190b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80190b4:	b480      	push	{r7}
 80190b6:	b083      	sub	sp, #12
 80190b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80190ba:	4b15      	ldr	r3, [pc, #84]	@ (8019110 <tcp_get_next_optbyte+0x5c>)
 80190bc:	881b      	ldrh	r3, [r3, #0]
 80190be:	1c5a      	adds	r2, r3, #1
 80190c0:	b291      	uxth	r1, r2
 80190c2:	4a13      	ldr	r2, [pc, #76]	@ (8019110 <tcp_get_next_optbyte+0x5c>)
 80190c4:	8011      	strh	r1, [r2, #0]
 80190c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80190c8:	4b12      	ldr	r3, [pc, #72]	@ (8019114 <tcp_get_next_optbyte+0x60>)
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d004      	beq.n	80190da <tcp_get_next_optbyte+0x26>
 80190d0:	4b11      	ldr	r3, [pc, #68]	@ (8019118 <tcp_get_next_optbyte+0x64>)
 80190d2:	881b      	ldrh	r3, [r3, #0]
 80190d4:	88fa      	ldrh	r2, [r7, #6]
 80190d6:	429a      	cmp	r2, r3
 80190d8:	d208      	bcs.n	80190ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80190da:	4b10      	ldr	r3, [pc, #64]	@ (801911c <tcp_get_next_optbyte+0x68>)
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	3314      	adds	r3, #20
 80190e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80190e2:	88fb      	ldrh	r3, [r7, #6]
 80190e4:	683a      	ldr	r2, [r7, #0]
 80190e6:	4413      	add	r3, r2
 80190e8:	781b      	ldrb	r3, [r3, #0]
 80190ea:	e00b      	b.n	8019104 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80190ec:	88fb      	ldrh	r3, [r7, #6]
 80190ee:	b2da      	uxtb	r2, r3
 80190f0:	4b09      	ldr	r3, [pc, #36]	@ (8019118 <tcp_get_next_optbyte+0x64>)
 80190f2:	881b      	ldrh	r3, [r3, #0]
 80190f4:	b2db      	uxtb	r3, r3
 80190f6:	1ad3      	subs	r3, r2, r3
 80190f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80190fa:	4b06      	ldr	r3, [pc, #24]	@ (8019114 <tcp_get_next_optbyte+0x60>)
 80190fc:	681a      	ldr	r2, [r3, #0]
 80190fe:	797b      	ldrb	r3, [r7, #5]
 8019100:	4413      	add	r3, r2
 8019102:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019104:	4618      	mov	r0, r3
 8019106:	370c      	adds	r7, #12
 8019108:	46bd      	mov	sp, r7
 801910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910e:	4770      	bx	lr
 8019110:	2002d4a4 	.word	0x2002d4a4
 8019114:	2002d4a0 	.word	0x2002d4a0
 8019118:	2002d49e 	.word	0x2002d49e
 801911c:	2002d498 	.word	0x2002d498

08019120 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b084      	sub	sp, #16
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d106      	bne.n	801913c <tcp_parseopt+0x1c>
 801912e:	4b32      	ldr	r3, [pc, #200]	@ (80191f8 <tcp_parseopt+0xd8>)
 8019130:	f240 727d 	movw	r2, #1917	@ 0x77d
 8019134:	4931      	ldr	r1, [pc, #196]	@ (80191fc <tcp_parseopt+0xdc>)
 8019136:	4832      	ldr	r0, [pc, #200]	@ (8019200 <tcp_parseopt+0xe0>)
 8019138:	f007 faac 	bl	8020694 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801913c:	4b31      	ldr	r3, [pc, #196]	@ (8019204 <tcp_parseopt+0xe4>)
 801913e:	881b      	ldrh	r3, [r3, #0]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d056      	beq.n	80191f2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019144:	4b30      	ldr	r3, [pc, #192]	@ (8019208 <tcp_parseopt+0xe8>)
 8019146:	2200      	movs	r2, #0
 8019148:	801a      	strh	r2, [r3, #0]
 801914a:	e046      	b.n	80191da <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801914c:	f7ff ffb2 	bl	80190b4 <tcp_get_next_optbyte>
 8019150:	4603      	mov	r3, r0
 8019152:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019154:	7bfb      	ldrb	r3, [r7, #15]
 8019156:	2b02      	cmp	r3, #2
 8019158:	d006      	beq.n	8019168 <tcp_parseopt+0x48>
 801915a:	2b02      	cmp	r3, #2
 801915c:	dc2a      	bgt.n	80191b4 <tcp_parseopt+0x94>
 801915e:	2b00      	cmp	r3, #0
 8019160:	d042      	beq.n	80191e8 <tcp_parseopt+0xc8>
 8019162:	2b01      	cmp	r3, #1
 8019164:	d038      	beq.n	80191d8 <tcp_parseopt+0xb8>
 8019166:	e025      	b.n	80191b4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019168:	f7ff ffa4 	bl	80190b4 <tcp_get_next_optbyte>
 801916c:	4603      	mov	r3, r0
 801916e:	2b04      	cmp	r3, #4
 8019170:	d13c      	bne.n	80191ec <tcp_parseopt+0xcc>
 8019172:	4b25      	ldr	r3, [pc, #148]	@ (8019208 <tcp_parseopt+0xe8>)
 8019174:	881b      	ldrh	r3, [r3, #0]
 8019176:	3301      	adds	r3, #1
 8019178:	4a22      	ldr	r2, [pc, #136]	@ (8019204 <tcp_parseopt+0xe4>)
 801917a:	8812      	ldrh	r2, [r2, #0]
 801917c:	4293      	cmp	r3, r2
 801917e:	da35      	bge.n	80191ec <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019180:	f7ff ff98 	bl	80190b4 <tcp_get_next_optbyte>
 8019184:	4603      	mov	r3, r0
 8019186:	021b      	lsls	r3, r3, #8
 8019188:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801918a:	f7ff ff93 	bl	80190b4 <tcp_get_next_optbyte>
 801918e:	4603      	mov	r3, r0
 8019190:	461a      	mov	r2, r3
 8019192:	89bb      	ldrh	r3, [r7, #12]
 8019194:	4313      	orrs	r3, r2
 8019196:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019198:	89bb      	ldrh	r3, [r7, #12]
 801919a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801919e:	d804      	bhi.n	80191aa <tcp_parseopt+0x8a>
 80191a0:	89bb      	ldrh	r3, [r7, #12]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d001      	beq.n	80191aa <tcp_parseopt+0x8a>
 80191a6:	89ba      	ldrh	r2, [r7, #12]
 80191a8:	e001      	b.n	80191ae <tcp_parseopt+0x8e>
 80191aa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80191b2:	e012      	b.n	80191da <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80191b4:	f7ff ff7e 	bl	80190b4 <tcp_get_next_optbyte>
 80191b8:	4603      	mov	r3, r0
 80191ba:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80191bc:	7afb      	ldrb	r3, [r7, #11]
 80191be:	2b01      	cmp	r3, #1
 80191c0:	d916      	bls.n	80191f0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80191c2:	7afb      	ldrb	r3, [r7, #11]
 80191c4:	b29a      	uxth	r2, r3
 80191c6:	4b10      	ldr	r3, [pc, #64]	@ (8019208 <tcp_parseopt+0xe8>)
 80191c8:	881b      	ldrh	r3, [r3, #0]
 80191ca:	4413      	add	r3, r2
 80191cc:	b29b      	uxth	r3, r3
 80191ce:	3b02      	subs	r3, #2
 80191d0:	b29a      	uxth	r2, r3
 80191d2:	4b0d      	ldr	r3, [pc, #52]	@ (8019208 <tcp_parseopt+0xe8>)
 80191d4:	801a      	strh	r2, [r3, #0]
 80191d6:	e000      	b.n	80191da <tcp_parseopt+0xba>
          break;
 80191d8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80191da:	4b0b      	ldr	r3, [pc, #44]	@ (8019208 <tcp_parseopt+0xe8>)
 80191dc:	881a      	ldrh	r2, [r3, #0]
 80191de:	4b09      	ldr	r3, [pc, #36]	@ (8019204 <tcp_parseopt+0xe4>)
 80191e0:	881b      	ldrh	r3, [r3, #0]
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d3b2      	bcc.n	801914c <tcp_parseopt+0x2c>
 80191e6:	e004      	b.n	80191f2 <tcp_parseopt+0xd2>
          return;
 80191e8:	bf00      	nop
 80191ea:	e002      	b.n	80191f2 <tcp_parseopt+0xd2>
            return;
 80191ec:	bf00      	nop
 80191ee:	e000      	b.n	80191f2 <tcp_parseopt+0xd2>
            return;
 80191f0:	bf00      	nop
      }
    }
  }
}
 80191f2:	3710      	adds	r7, #16
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}
 80191f8:	08023ef4 	.word	0x08023ef4
 80191fc:	08024358 	.word	0x08024358
 8019200:	08023f40 	.word	0x08023f40
 8019204:	2002d49c 	.word	0x2002d49c
 8019208:	2002d4a4 	.word	0x2002d4a4

0801920c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801920c:	b480      	push	{r7}
 801920e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019210:	4b05      	ldr	r3, [pc, #20]	@ (8019228 <tcp_trigger_input_pcb_close+0x1c>)
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	f043 0310 	orr.w	r3, r3, #16
 8019218:	b2da      	uxtb	r2, r3
 801921a:	4b03      	ldr	r3, [pc, #12]	@ (8019228 <tcp_trigger_input_pcb_close+0x1c>)
 801921c:	701a      	strb	r2, [r3, #0]
}
 801921e:	bf00      	nop
 8019220:	46bd      	mov	sp, r7
 8019222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019226:	4770      	bx	lr
 8019228:	2002d4b5 	.word	0x2002d4b5

0801922c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b084      	sub	sp, #16
 8019230:	af00      	add	r7, sp, #0
 8019232:	60f8      	str	r0, [r7, #12]
 8019234:	60b9      	str	r1, [r7, #8]
 8019236:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	2b00      	cmp	r3, #0
 801923c:	d00a      	beq.n	8019254 <tcp_route+0x28>
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	7a1b      	ldrb	r3, [r3, #8]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d006      	beq.n	8019254 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	7a1b      	ldrb	r3, [r3, #8]
 801924a:	4618      	mov	r0, r3
 801924c:	f7fa ffec 	bl	8014228 <netif_get_by_index>
 8019250:	4603      	mov	r3, r0
 8019252:	e003      	b.n	801925c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019254:	6878      	ldr	r0, [r7, #4]
 8019256:	f004 fa4b 	bl	801d6f0 <ip4_route>
 801925a:	4603      	mov	r3, r0
  }
}
 801925c:	4618      	mov	r0, r3
 801925e:	3710      	adds	r7, #16
 8019260:	46bd      	mov	sp, r7
 8019262:	bd80      	pop	{r7, pc}

08019264 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019264:	b590      	push	{r4, r7, lr}
 8019266:	b087      	sub	sp, #28
 8019268:	af00      	add	r7, sp, #0
 801926a:	60f8      	str	r0, [r7, #12]
 801926c:	60b9      	str	r1, [r7, #8]
 801926e:	603b      	str	r3, [r7, #0]
 8019270:	4613      	mov	r3, r2
 8019272:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d105      	bne.n	8019286 <tcp_create_segment+0x22>
 801927a:	4b49      	ldr	r3, [pc, #292]	@ (80193a0 <tcp_create_segment+0x13c>)
 801927c:	22a3      	movs	r2, #163	@ 0xa3
 801927e:	4949      	ldr	r1, [pc, #292]	@ (80193a4 <tcp_create_segment+0x140>)
 8019280:	4849      	ldr	r0, [pc, #292]	@ (80193a8 <tcp_create_segment+0x144>)
 8019282:	f007 fa07 	bl	8020694 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019286:	68bb      	ldr	r3, [r7, #8]
 8019288:	2b00      	cmp	r3, #0
 801928a:	d105      	bne.n	8019298 <tcp_create_segment+0x34>
 801928c:	4b44      	ldr	r3, [pc, #272]	@ (80193a0 <tcp_create_segment+0x13c>)
 801928e:	22a4      	movs	r2, #164	@ 0xa4
 8019290:	4946      	ldr	r1, [pc, #280]	@ (80193ac <tcp_create_segment+0x148>)
 8019292:	4845      	ldr	r0, [pc, #276]	@ (80193a8 <tcp_create_segment+0x144>)
 8019294:	f007 f9fe 	bl	8020694 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019298:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801929c:	009b      	lsls	r3, r3, #2
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	f003 0304 	and.w	r3, r3, #4
 80192a4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80192a6:	2003      	movs	r0, #3
 80192a8:	f7fa fb36 	bl	8013918 <memp_malloc>
 80192ac:	6138      	str	r0, [r7, #16]
 80192ae:	693b      	ldr	r3, [r7, #16]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d104      	bne.n	80192be <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80192b4:	68b8      	ldr	r0, [r7, #8]
 80192b6:	f7fb fb91 	bl	80149dc <pbuf_free>
    return NULL;
 80192ba:	2300      	movs	r3, #0
 80192bc:	e06b      	b.n	8019396 <tcp_create_segment+0x132>
  }
  seg->flags = optflags;
 80192be:	693b      	ldr	r3, [r7, #16]
 80192c0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80192c4:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80192c6:	693b      	ldr	r3, [r7, #16]
 80192c8:	2200      	movs	r2, #0
 80192ca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80192cc:	693b      	ldr	r3, [r7, #16]
 80192ce:	68ba      	ldr	r2, [r7, #8]
 80192d0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	891a      	ldrh	r2, [r3, #8]
 80192d6:	7dfb      	ldrb	r3, [r7, #23]
 80192d8:	b29b      	uxth	r3, r3
 80192da:	429a      	cmp	r2, r3
 80192dc:	d205      	bcs.n	80192ea <tcp_create_segment+0x86>
 80192de:	4b30      	ldr	r3, [pc, #192]	@ (80193a0 <tcp_create_segment+0x13c>)
 80192e0:	22b0      	movs	r2, #176	@ 0xb0
 80192e2:	4933      	ldr	r1, [pc, #204]	@ (80193b0 <tcp_create_segment+0x14c>)
 80192e4:	4830      	ldr	r0, [pc, #192]	@ (80193a8 <tcp_create_segment+0x144>)
 80192e6:	f007 f9d5 	bl	8020694 <iprintf>
  seg->len = p->tot_len - optlen;
 80192ea:	68bb      	ldr	r3, [r7, #8]
 80192ec:	891a      	ldrh	r2, [r3, #8]
 80192ee:	7dfb      	ldrb	r3, [r7, #23]
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	1ad3      	subs	r3, r2, r3
 80192f4:	b29a      	uxth	r2, r3
 80192f6:	693b      	ldr	r3, [r7, #16]
 80192f8:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80192fa:	693b      	ldr	r3, [r7, #16]
 80192fc:	2200      	movs	r2, #0
 80192fe:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019300:	2114      	movs	r1, #20
 8019302:	68b8      	ldr	r0, [r7, #8]
 8019304:	f7fb facc 	bl	80148a0 <pbuf_add_header>
 8019308:	4603      	mov	r3, r0
 801930a:	2b00      	cmp	r3, #0
 801930c:	d00c      	beq.n	8019328 <tcp_create_segment+0xc4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 801930e:	4b29      	ldr	r3, [pc, #164]	@ (80193b4 <tcp_create_segment+0x150>)
 8019310:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8019314:	3301      	adds	r3, #1
 8019316:	b29a      	uxth	r2, r3
 8019318:	4b26      	ldr	r3, [pc, #152]	@ (80193b4 <tcp_create_segment+0x150>)
 801931a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 801931e:	6938      	ldr	r0, [r7, #16]
 8019320:	f7fc ff63 	bl	80161ea <tcp_seg_free>
    return NULL;
 8019324:	2300      	movs	r3, #0
 8019326:	e036      	b.n	8019396 <tcp_create_segment+0x132>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019328:	693b      	ldr	r3, [r7, #16]
 801932a:	685b      	ldr	r3, [r3, #4]
 801932c:	685a      	ldr	r2, [r3, #4]
 801932e:	693b      	ldr	r3, [r7, #16]
 8019330:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	8ada      	ldrh	r2, [r3, #22]
 8019336:	693b      	ldr	r3, [r7, #16]
 8019338:	691c      	ldr	r4, [r3, #16]
 801933a:	4610      	mov	r0, r2
 801933c:	f7f9 fd20 	bl	8012d80 <lwip_htons>
 8019340:	4603      	mov	r3, r0
 8019342:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	8b1a      	ldrh	r2, [r3, #24]
 8019348:	693b      	ldr	r3, [r7, #16]
 801934a:	691c      	ldr	r4, [r3, #16]
 801934c:	4610      	mov	r0, r2
 801934e:	f7f9 fd17 	bl	8012d80 <lwip_htons>
 8019352:	4603      	mov	r3, r0
 8019354:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	691c      	ldr	r4, [r3, #16]
 801935a:	6838      	ldr	r0, [r7, #0]
 801935c:	f7f9 fd26 	bl	8012dac <lwip_htonl>
 8019360:	4603      	mov	r3, r0
 8019362:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019364:	7dfb      	ldrb	r3, [r7, #23]
 8019366:	089b      	lsrs	r3, r3, #2
 8019368:	b2db      	uxtb	r3, r3
 801936a:	3305      	adds	r3, #5
 801936c:	b29b      	uxth	r3, r3
 801936e:	031b      	lsls	r3, r3, #12
 8019370:	b29a      	uxth	r2, r3
 8019372:	79fb      	ldrb	r3, [r7, #7]
 8019374:	b29b      	uxth	r3, r3
 8019376:	4313      	orrs	r3, r2
 8019378:	b29a      	uxth	r2, r3
 801937a:	693b      	ldr	r3, [r7, #16]
 801937c:	691c      	ldr	r4, [r3, #16]
 801937e:	4610      	mov	r0, r2
 8019380:	f7f9 fcfe 	bl	8012d80 <lwip_htons>
 8019384:	4603      	mov	r3, r0
 8019386:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019388:	693b      	ldr	r3, [r7, #16]
 801938a:	691b      	ldr	r3, [r3, #16]
 801938c:	2200      	movs	r2, #0
 801938e:	749a      	strb	r2, [r3, #18]
 8019390:	2200      	movs	r2, #0
 8019392:	74da      	strb	r2, [r3, #19]
  return seg;
 8019394:	693b      	ldr	r3, [r7, #16]
}
 8019396:	4618      	mov	r0, r3
 8019398:	371c      	adds	r7, #28
 801939a:	46bd      	mov	sp, r7
 801939c:	bd90      	pop	{r4, r7, pc}
 801939e:	bf00      	nop
 80193a0:	08024374 	.word	0x08024374
 80193a4:	080243a8 	.word	0x080243a8
 80193a8:	080243c8 	.word	0x080243c8
 80193ac:	080243f0 	.word	0x080243f0
 80193b0:	08024414 	.word	0x08024414
 80193b4:	2002d36c 	.word	0x2002d36c

080193b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b086      	sub	sp, #24
 80193bc:	af00      	add	r7, sp, #0
 80193be:	607b      	str	r3, [r7, #4]
 80193c0:	4603      	mov	r3, r0
 80193c2:	73fb      	strb	r3, [r7, #15]
 80193c4:	460b      	mov	r3, r1
 80193c6:	81bb      	strh	r3, [r7, #12]
 80193c8:	4613      	mov	r3, r2
 80193ca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80193cc:	89bb      	ldrh	r3, [r7, #12]
 80193ce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d105      	bne.n	80193e2 <tcp_pbuf_prealloc+0x2a>
 80193d6:	4b30      	ldr	r3, [pc, #192]	@ (8019498 <tcp_pbuf_prealloc+0xe0>)
 80193d8:	22e8      	movs	r2, #232	@ 0xe8
 80193da:	4930      	ldr	r1, [pc, #192]	@ (801949c <tcp_pbuf_prealloc+0xe4>)
 80193dc:	4830      	ldr	r0, [pc, #192]	@ (80194a0 <tcp_pbuf_prealloc+0xe8>)
 80193de:	f007 f959 	bl	8020694 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80193e2:	6a3b      	ldr	r3, [r7, #32]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d105      	bne.n	80193f4 <tcp_pbuf_prealloc+0x3c>
 80193e8:	4b2b      	ldr	r3, [pc, #172]	@ (8019498 <tcp_pbuf_prealloc+0xe0>)
 80193ea:	22e9      	movs	r2, #233	@ 0xe9
 80193ec:	492d      	ldr	r1, [pc, #180]	@ (80194a4 <tcp_pbuf_prealloc+0xec>)
 80193ee:	482c      	ldr	r0, [pc, #176]	@ (80194a0 <tcp_pbuf_prealloc+0xe8>)
 80193f0:	f007 f950 	bl	8020694 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80193f4:	89ba      	ldrh	r2, [r7, #12]
 80193f6:	897b      	ldrh	r3, [r7, #10]
 80193f8:	429a      	cmp	r2, r3
 80193fa:	d221      	bcs.n	8019440 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80193fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019400:	f003 0302 	and.w	r3, r3, #2
 8019404:	2b00      	cmp	r3, #0
 8019406:	d111      	bne.n	801942c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019408:	6a3b      	ldr	r3, [r7, #32]
 801940a:	8b5b      	ldrh	r3, [r3, #26]
 801940c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019410:	2b00      	cmp	r3, #0
 8019412:	d115      	bne.n	8019440 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019414:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019418:	2b00      	cmp	r3, #0
 801941a:	d007      	beq.n	801942c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801941c:	6a3b      	ldr	r3, [r7, #32]
 801941e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019420:	2b00      	cmp	r3, #0
 8019422:	d103      	bne.n	801942c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019424:	6a3b      	ldr	r3, [r7, #32]
 8019426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8019428:	2b00      	cmp	r3, #0
 801942a:	d009      	beq.n	8019440 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801942c:	89bb      	ldrh	r3, [r7, #12]
 801942e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019432:	f023 0203 	bic.w	r2, r3, #3
 8019436:	897b      	ldrh	r3, [r7, #10]
 8019438:	4293      	cmp	r3, r2
 801943a:	bf28      	it	cs
 801943c:	4613      	movcs	r3, r2
 801943e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019440:	8af9      	ldrh	r1, [r7, #22]
 8019442:	7bfb      	ldrb	r3, [r7, #15]
 8019444:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019448:	4618      	mov	r0, r3
 801944a:	f7fa ff9b 	bl	8014384 <pbuf_alloc>
 801944e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019450:	693b      	ldr	r3, [r7, #16]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d101      	bne.n	801945a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019456:	2300      	movs	r3, #0
 8019458:	e019      	b.n	801948e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801945a:	693b      	ldr	r3, [r7, #16]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d006      	beq.n	8019470 <tcp_pbuf_prealloc+0xb8>
 8019462:	4b0d      	ldr	r3, [pc, #52]	@ (8019498 <tcp_pbuf_prealloc+0xe0>)
 8019464:	f240 120b 	movw	r2, #267	@ 0x10b
 8019468:	490f      	ldr	r1, [pc, #60]	@ (80194a8 <tcp_pbuf_prealloc+0xf0>)
 801946a:	480d      	ldr	r0, [pc, #52]	@ (80194a0 <tcp_pbuf_prealloc+0xe8>)
 801946c:	f007 f912 	bl	8020694 <iprintf>
  *oversize = p->len - length;
 8019470:	693b      	ldr	r3, [r7, #16]
 8019472:	895a      	ldrh	r2, [r3, #10]
 8019474:	89bb      	ldrh	r3, [r7, #12]
 8019476:	1ad3      	subs	r3, r2, r3
 8019478:	b29a      	uxth	r2, r3
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801947e:	693b      	ldr	r3, [r7, #16]
 8019480:	89ba      	ldrh	r2, [r7, #12]
 8019482:	811a      	strh	r2, [r3, #8]
 8019484:	693b      	ldr	r3, [r7, #16]
 8019486:	891a      	ldrh	r2, [r3, #8]
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	815a      	strh	r2, [r3, #10]
  return p;
 801948c:	693b      	ldr	r3, [r7, #16]
}
 801948e:	4618      	mov	r0, r3
 8019490:	3718      	adds	r7, #24
 8019492:	46bd      	mov	sp, r7
 8019494:	bd80      	pop	{r7, pc}
 8019496:	bf00      	nop
 8019498:	08024374 	.word	0x08024374
 801949c:	0802442c 	.word	0x0802442c
 80194a0:	080243c8 	.word	0x080243c8
 80194a4:	08024450 	.word	0x08024450
 80194a8:	08024470 	.word	0x08024470

080194ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b082      	sub	sp, #8
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	6078      	str	r0, [r7, #4]
 80194b4:	460b      	mov	r3, r1
 80194b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d106      	bne.n	80194cc <tcp_write_checks+0x20>
 80194be:	4b37      	ldr	r3, [pc, #220]	@ (801959c <tcp_write_checks+0xf0>)
 80194c0:	f240 1233 	movw	r2, #307	@ 0x133
 80194c4:	4936      	ldr	r1, [pc, #216]	@ (80195a0 <tcp_write_checks+0xf4>)
 80194c6:	4837      	ldr	r0, [pc, #220]	@ (80195a4 <tcp_write_checks+0xf8>)
 80194c8:	f007 f8e4 	bl	8020694 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	7d1b      	ldrb	r3, [r3, #20]
 80194d0:	2b04      	cmp	r3, #4
 80194d2:	d00e      	beq.n	80194f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80194d8:	2b07      	cmp	r3, #7
 80194da:	d00a      	beq.n	80194f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80194e0:	2b02      	cmp	r3, #2
 80194e2:	d006      	beq.n	80194f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80194e8:	2b03      	cmp	r3, #3
 80194ea:	d002      	beq.n	80194f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80194ec:	f06f 030a 	mvn.w	r3, #10
 80194f0:	e050      	b.n	8019594 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 80194f2:	887b      	ldrh	r3, [r7, #2]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d101      	bne.n	80194fc <tcp_write_checks+0x50>
    return ERR_OK;
 80194f8:	2300      	movs	r3, #0
 80194fa:	e04b      	b.n	8019594 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019502:	887a      	ldrh	r2, [r7, #2]
 8019504:	429a      	cmp	r2, r3
 8019506:	d909      	bls.n	801951c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	8b5b      	ldrh	r3, [r3, #26]
 801950c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019510:	b29a      	uxth	r2, r3
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801951a:	e03b      	b.n	8019594 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019522:	2b08      	cmp	r3, #8
 8019524:	d911      	bls.n	801954a <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8019526:	4b20      	ldr	r3, [pc, #128]	@ (80195a8 <tcp_write_checks+0xfc>)
 8019528:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801952c:	3301      	adds	r3, #1
 801952e:	b29a      	uxth	r2, r3
 8019530:	4b1d      	ldr	r3, [pc, #116]	@ (80195a8 <tcp_write_checks+0xfc>)
 8019532:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	8b5b      	ldrh	r3, [r3, #26]
 801953a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801953e:	b29a      	uxth	r2, r3
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019548:	e024      	b.n	8019594 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019550:	2b00      	cmp	r3, #0
 8019552:	d00f      	beq.n	8019574 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019558:	2b00      	cmp	r3, #0
 801955a:	d11a      	bne.n	8019592 <tcp_write_checks+0xe6>
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019560:	2b00      	cmp	r3, #0
 8019562:	d116      	bne.n	8019592 <tcp_write_checks+0xe6>
 8019564:	4b0d      	ldr	r3, [pc, #52]	@ (801959c <tcp_write_checks+0xf0>)
 8019566:	f240 1255 	movw	r2, #341	@ 0x155
 801956a:	4910      	ldr	r1, [pc, #64]	@ (80195ac <tcp_write_checks+0x100>)
 801956c:	480d      	ldr	r0, [pc, #52]	@ (80195a4 <tcp_write_checks+0xf8>)
 801956e:	f007 f891 	bl	8020694 <iprintf>
 8019572:	e00e      	b.n	8019592 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019578:	2b00      	cmp	r3, #0
 801957a:	d103      	bne.n	8019584 <tcp_write_checks+0xd8>
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019580:	2b00      	cmp	r3, #0
 8019582:	d006      	beq.n	8019592 <tcp_write_checks+0xe6>
 8019584:	4b05      	ldr	r3, [pc, #20]	@ (801959c <tcp_write_checks+0xf0>)
 8019586:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801958a:	4909      	ldr	r1, [pc, #36]	@ (80195b0 <tcp_write_checks+0x104>)
 801958c:	4805      	ldr	r0, [pc, #20]	@ (80195a4 <tcp_write_checks+0xf8>)
 801958e:	f007 f881 	bl	8020694 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019592:	2300      	movs	r3, #0
}
 8019594:	4618      	mov	r0, r3
 8019596:	3708      	adds	r7, #8
 8019598:	46bd      	mov	sp, r7
 801959a:	bd80      	pop	{r7, pc}
 801959c:	08024374 	.word	0x08024374
 80195a0:	08024484 	.word	0x08024484
 80195a4:	080243c8 	.word	0x080243c8
 80195a8:	2002d36c 	.word	0x2002d36c
 80195ac:	080244a4 	.word	0x080244a4
 80195b0:	080244e0 	.word	0x080244e0

080195b4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80195b4:	b590      	push	{r4, r7, lr}
 80195b6:	b09d      	sub	sp, #116	@ 0x74
 80195b8:	af04      	add	r7, sp, #16
 80195ba:	60f8      	str	r0, [r7, #12]
 80195bc:	60b9      	str	r1, [r7, #8]
 80195be:	4611      	mov	r1, r2
 80195c0:	461a      	mov	r2, r3
 80195c2:	460b      	mov	r3, r1
 80195c4:	80fb      	strh	r3, [r7, #6]
 80195c6:	4613      	mov	r3, r2
 80195c8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80195ca:	2300      	movs	r3, #0
 80195cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80195ce:	2300      	movs	r3, #0
 80195d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80195d2:	2300      	movs	r3, #0
 80195d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80195d6:	2300      	movs	r3, #0
 80195d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80195da:	2300      	movs	r3, #0
 80195dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 80195de:	2300      	movs	r3, #0
 80195e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80195e4:	2300      	movs	r3, #0
 80195e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80195ea:	2300      	movs	r3, #0
 80195ec:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 80195ee:	2300      	movs	r3, #0
 80195f0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 80195f4:	2300      	movs	r3, #0
 80195f6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80195fa:	2300      	movs	r3, #0
 80195fc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d109      	bne.n	801961a <tcp_write+0x66>
 8019606:	4b9c      	ldr	r3, [pc, #624]	@ (8019878 <tcp_write+0x2c4>)
 8019608:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801960c:	499b      	ldr	r1, [pc, #620]	@ (801987c <tcp_write+0x2c8>)
 801960e:	489c      	ldr	r0, [pc, #624]	@ (8019880 <tcp_write+0x2cc>)
 8019610:	f007 f840 	bl	8020694 <iprintf>
 8019614:	f06f 030f 	mvn.w	r3, #15
 8019618:	e381      	b.n	8019d1e <tcp_write+0x76a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019620:	085b      	lsrs	r3, r3, #1
 8019622:	b29a      	uxth	r2, r3
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019628:	4293      	cmp	r3, r2
 801962a:	bf28      	it	cs
 801962c:	4613      	movcs	r3, r2
 801962e:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8019630:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019632:	2b00      	cmp	r3, #0
 8019634:	d102      	bne.n	801963c <tcp_write+0x88>
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801963a:	e000      	b.n	801963e <tcp_write+0x8a>
 801963c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801963e:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019640:	68bb      	ldr	r3, [r7, #8]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d109      	bne.n	801965a <tcp_write+0xa6>
 8019646:	4b8c      	ldr	r3, [pc, #560]	@ (8019878 <tcp_write+0x2c4>)
 8019648:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801964c:	498d      	ldr	r1, [pc, #564]	@ (8019884 <tcp_write+0x2d0>)
 801964e:	488c      	ldr	r0, [pc, #560]	@ (8019880 <tcp_write+0x2cc>)
 8019650:	f007 f820 	bl	8020694 <iprintf>
 8019654:	f06f 030f 	mvn.w	r3, #15
 8019658:	e361      	b.n	8019d1e <tcp_write+0x76a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801965a:	88fb      	ldrh	r3, [r7, #6]
 801965c:	4619      	mov	r1, r3
 801965e:	68f8      	ldr	r0, [r7, #12]
 8019660:	f7ff ff24 	bl	80194ac <tcp_write_checks>
 8019664:	4603      	mov	r3, r0
 8019666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 801966a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801966e:	2b00      	cmp	r3, #0
 8019670:	d002      	beq.n	8019678 <tcp_write+0xc4>
    return err;
 8019672:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019676:	e352      	b.n	8019d1e <tcp_write+0x76a>
  }
  queuelen = pcb->snd_queuelen;
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801967e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019682:	2300      	movs	r3, #0
 8019684:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801968c:	2b00      	cmp	r3, #0
 801968e:	f000 8127 	beq.w	80198e0 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019696:	643b      	str	r3, [r7, #64]	@ 0x40
 8019698:	e002      	b.n	80196a0 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 801969a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80196a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d1f8      	bne.n	801969a <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80196a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80196aa:	7b1b      	ldrb	r3, [r3, #12]
 80196ac:	009b      	lsls	r3, r3, #2
 80196ae:	b29b      	uxth	r3, r3
 80196b0:	f003 0304 	and.w	r3, r3, #4
 80196b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80196b6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80196b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80196ba:	891b      	ldrh	r3, [r3, #8]
 80196bc:	4619      	mov	r1, r3
 80196be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80196c0:	440b      	add	r3, r1
 80196c2:	429a      	cmp	r2, r3
 80196c4:	da06      	bge.n	80196d4 <tcp_write+0x120>
 80196c6:	4b6c      	ldr	r3, [pc, #432]	@ (8019878 <tcp_write+0x2c4>)
 80196c8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80196cc:	496e      	ldr	r1, [pc, #440]	@ (8019888 <tcp_write+0x2d4>)
 80196ce:	486c      	ldr	r0, [pc, #432]	@ (8019880 <tcp_write+0x2cc>)
 80196d0:	f006 ffe0 	bl	8020694 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80196d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80196d6:	891a      	ldrh	r2, [r3, #8]
 80196d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80196da:	4413      	add	r3, r2
 80196dc:	b29b      	uxth	r3, r3
 80196de:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80196e0:	1ad3      	subs	r3, r2, r3
 80196e2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 80196ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80196ee:	895b      	ldrh	r3, [r3, #10]
 80196f0:	429a      	cmp	r2, r3
 80196f2:	d006      	beq.n	8019702 <tcp_write+0x14e>
 80196f4:	4b60      	ldr	r3, [pc, #384]	@ (8019878 <tcp_write+0x2c4>)
 80196f6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80196fa:	4964      	ldr	r1, [pc, #400]	@ (801988c <tcp_write+0x2d8>)
 80196fc:	4860      	ldr	r0, [pc, #384]	@ (8019880 <tcp_write+0x2cc>)
 80196fe:	f006 ffc9 	bl	8020694 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019708:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 801970a:	8afb      	ldrh	r3, [r7, #22]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d02e      	beq.n	801976e <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019710:	8afb      	ldrh	r3, [r7, #22]
 8019712:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8019716:	429a      	cmp	r2, r3
 8019718:	d206      	bcs.n	8019728 <tcp_write+0x174>
 801971a:	4b57      	ldr	r3, [pc, #348]	@ (8019878 <tcp_write+0x2c4>)
 801971c:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8019720:	495b      	ldr	r1, [pc, #364]	@ (8019890 <tcp_write+0x2dc>)
 8019722:	4857      	ldr	r0, [pc, #348]	@ (8019880 <tcp_write+0x2cc>)
 8019724:	f006 ffb6 	bl	8020694 <iprintf>
      seg = last_unsent;
 8019728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801972a:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801972c:	8afb      	ldrh	r3, [r7, #22]
 801972e:	88fa      	ldrh	r2, [r7, #6]
 8019730:	4293      	cmp	r3, r2
 8019732:	bf28      	it	cs
 8019734:	4613      	movcs	r3, r2
 8019736:	b29b      	uxth	r3, r3
 8019738:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801973c:	4293      	cmp	r3, r2
 801973e:	bf28      	it	cs
 8019740:	4613      	movcs	r3, r2
 8019742:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 8019746:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801974a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801974e:	4413      	add	r3, r2
 8019750:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 8019754:	8afa      	ldrh	r2, [r7, #22]
 8019756:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801975a:	1ad3      	subs	r3, r2, r3
 801975c:	b29b      	uxth	r3, r3
 801975e:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8019760:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8019764:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019768:	1ad3      	subs	r3, r2, r3
 801976a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801976e:	8afb      	ldrh	r3, [r7, #22]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d00b      	beq.n	801978c <tcp_write+0x1d8>
 8019774:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019778:	88fb      	ldrh	r3, [r7, #6]
 801977a:	429a      	cmp	r2, r3
 801977c:	d006      	beq.n	801978c <tcp_write+0x1d8>
 801977e:	4b3e      	ldr	r3, [pc, #248]	@ (8019878 <tcp_write+0x2c4>)
 8019780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019784:	4943      	ldr	r1, [pc, #268]	@ (8019894 <tcp_write+0x2e0>)
 8019786:	483e      	ldr	r0, [pc, #248]	@ (8019880 <tcp_write+0x2cc>)
 8019788:	f006 ff84 	bl	8020694 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801978c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019790:	88fb      	ldrh	r3, [r7, #6]
 8019792:	429a      	cmp	r2, r3
 8019794:	f080 8172 	bcs.w	8019a7c <tcp_write+0x4c8>
 8019798:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801979c:	2b00      	cmp	r3, #0
 801979e:	f000 816d 	beq.w	8019a7c <tcp_write+0x4c8>
 80197a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197a4:	891b      	ldrh	r3, [r3, #8]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	f000 8168 	beq.w	8019a7c <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80197ac:	88fa      	ldrh	r2, [r7, #6]
 80197ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80197b2:	1ad2      	subs	r2, r2, r3
 80197b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80197b8:	4293      	cmp	r3, r2
 80197ba:	bfa8      	it	ge
 80197bc:	4613      	movge	r3, r2
 80197be:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 80197c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197c2:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80197c4:	797b      	ldrb	r3, [r7, #5]
 80197c6:	f003 0301 	and.w	r3, r3, #1
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d02b      	beq.n	8019826 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80197ce:	f107 0016 	add.w	r0, r7, #22
 80197d2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80197d6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80197d8:	2301      	movs	r3, #1
 80197da:	9302      	str	r3, [sp, #8]
 80197dc:	797b      	ldrb	r3, [r7, #5]
 80197de:	9301      	str	r3, [sp, #4]
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	9300      	str	r3, [sp, #0]
 80197e4:	4603      	mov	r3, r0
 80197e6:	2000      	movs	r0, #0
 80197e8:	f7ff fde6 	bl	80193b8 <tcp_pbuf_prealloc>
 80197ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80197ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f000 825a 	beq.w	8019caa <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 80197f6:	8afb      	ldrh	r3, [r7, #22]
 80197f8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80197fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80197fe:	6858      	ldr	r0, [r3, #4]
 8019800:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019804:	68ba      	ldr	r2, [r7, #8]
 8019806:	4413      	add	r3, r2
 8019808:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801980a:	4619      	mov	r1, r3
 801980c:	f007 f975 	bl	8020afa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019810:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019812:	f7fb f989 	bl	8014b28 <pbuf_clen>
 8019816:	4603      	mov	r3, r0
 8019818:	461a      	mov	r2, r3
 801981a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801981e:	4413      	add	r3, r2
 8019820:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8019824:	e055      	b.n	80198d2 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019828:	685b      	ldr	r3, [r3, #4]
 801982a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801982c:	e002      	b.n	8019834 <tcp_write+0x280>
 801982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d1f8      	bne.n	801982e <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801983c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801983e:	7b1b      	ldrb	r3, [r3, #12]
 8019840:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8019844:	2b00      	cmp	r3, #0
 8019846:	d129      	bne.n	801989c <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801984a:	685b      	ldr	r3, [r3, #4]
 801984c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801984e:	8952      	ldrh	r2, [r2, #10]
 8019850:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019852:	68ba      	ldr	r2, [r7, #8]
 8019854:	429a      	cmp	r2, r3
 8019856:	d121      	bne.n	801989c <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019858:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801985c:	2b00      	cmp	r3, #0
 801985e:	d006      	beq.n	801986e <tcp_write+0x2ba>
 8019860:	4b05      	ldr	r3, [pc, #20]	@ (8019878 <tcp_write+0x2c4>)
 8019862:	f240 2231 	movw	r2, #561	@ 0x231
 8019866:	490c      	ldr	r1, [pc, #48]	@ (8019898 <tcp_write+0x2e4>)
 8019868:	4805      	ldr	r0, [pc, #20]	@ (8019880 <tcp_write+0x2cc>)
 801986a:	f006 ff13 	bl	8020694 <iprintf>
          extendlen = seglen;
 801986e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019870:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8019874:	e02d      	b.n	80198d2 <tcp_write+0x31e>
 8019876:	bf00      	nop
 8019878:	08024374 	.word	0x08024374
 801987c:	08024514 	.word	0x08024514
 8019880:	080243c8 	.word	0x080243c8
 8019884:	0802452c 	.word	0x0802452c
 8019888:	08024560 	.word	0x08024560
 801988c:	08024578 	.word	0x08024578
 8019890:	080245a8 	.word	0x080245a8
 8019894:	080245c8 	.word	0x080245c8
 8019898:	080245e8 	.word	0x080245e8
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801989c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801989e:	2201      	movs	r2, #1
 80198a0:	4619      	mov	r1, r3
 80198a2:	2000      	movs	r0, #0
 80198a4:	f7fa fd6e 	bl	8014384 <pbuf_alloc>
 80198a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80198aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	f000 81fe 	beq.w	8019cae <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80198b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80198b6:	68ba      	ldr	r2, [r7, #8]
 80198b8:	441a      	add	r2, r3
 80198ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198bc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80198be:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80198c0:	f7fb f932 	bl	8014b28 <pbuf_clen>
 80198c4:	4603      	mov	r3, r0
 80198c6:	461a      	mov	r2, r3
 80198c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80198cc:	4413      	add	r3, r2
 80198ce:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80198d2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80198d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80198d8:	4413      	add	r3, r2
 80198da:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80198de:	e0cd      	b.n	8019a7c <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	f000 80c8 	beq.w	8019a7c <tcp_write+0x4c8>
 80198ec:	4b72      	ldr	r3, [pc, #456]	@ (8019ab8 <tcp_write+0x504>)
 80198ee:	f240 224a 	movw	r2, #586	@ 0x24a
 80198f2:	4972      	ldr	r1, [pc, #456]	@ (8019abc <tcp_write+0x508>)
 80198f4:	4872      	ldr	r0, [pc, #456]	@ (8019ac0 <tcp_write+0x50c>)
 80198f6:	f006 fecd 	bl	8020694 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80198fa:	e0bf      	b.n	8019a7c <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 80198fc:	88fa      	ldrh	r2, [r7, #6]
 80198fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019902:	1ad3      	subs	r3, r2, r3
 8019904:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8019906:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801990a:	b29b      	uxth	r3, r3
 801990c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801990e:	1ad3      	subs	r3, r2, r3
 8019910:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019912:	8bfa      	ldrh	r2, [r7, #30]
 8019914:	8c3b      	ldrh	r3, [r7, #32]
 8019916:	4293      	cmp	r3, r2
 8019918:	bf28      	it	cs
 801991a:	4613      	movcs	r3, r2
 801991c:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801991e:	797b      	ldrb	r3, [r7, #5]
 8019920:	f003 0301 	and.w	r3, r3, #1
 8019924:	2b00      	cmp	r3, #0
 8019926:	d036      	beq.n	8019996 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019928:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801992c:	b29a      	uxth	r2, r3
 801992e:	8bbb      	ldrh	r3, [r7, #28]
 8019930:	4413      	add	r3, r2
 8019932:	b299      	uxth	r1, r3
 8019934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019936:	2b00      	cmp	r3, #0
 8019938:	bf0c      	ite	eq
 801993a:	2301      	moveq	r3, #1
 801993c:	2300      	movne	r3, #0
 801993e:	b2db      	uxtb	r3, r3
 8019940:	f107 0016 	add.w	r0, r7, #22
 8019944:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8019946:	9302      	str	r3, [sp, #8]
 8019948:	797b      	ldrb	r3, [r7, #5]
 801994a:	9301      	str	r3, [sp, #4]
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	9300      	str	r3, [sp, #0]
 8019950:	4603      	mov	r3, r0
 8019952:	2036      	movs	r0, #54	@ 0x36
 8019954:	f7ff fd30 	bl	80193b8 <tcp_pbuf_prealloc>
 8019958:	6378      	str	r0, [r7, #52]	@ 0x34
 801995a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801995c:	2b00      	cmp	r3, #0
 801995e:	f000 81a8 	beq.w	8019cb2 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019964:	895b      	ldrh	r3, [r3, #10]
 8019966:	8bba      	ldrh	r2, [r7, #28]
 8019968:	429a      	cmp	r2, r3
 801996a:	d906      	bls.n	801997a <tcp_write+0x3c6>
 801996c:	4b52      	ldr	r3, [pc, #328]	@ (8019ab8 <tcp_write+0x504>)
 801996e:	f240 2266 	movw	r2, #614	@ 0x266
 8019972:	4954      	ldr	r1, [pc, #336]	@ (8019ac4 <tcp_write+0x510>)
 8019974:	4852      	ldr	r0, [pc, #328]	@ (8019ac0 <tcp_write+0x50c>)
 8019976:	f006 fe8d 	bl	8020694 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801997a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801997c:	685a      	ldr	r2, [r3, #4]
 801997e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019982:	18d0      	adds	r0, r2, r3
 8019984:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019988:	68ba      	ldr	r2, [r7, #8]
 801998a:	4413      	add	r3, r2
 801998c:	8bba      	ldrh	r2, [r7, #28]
 801998e:	4619      	mov	r1, r3
 8019990:	f007 f8b3 	bl	8020afa <memcpy>
 8019994:	e02f      	b.n	80199f6 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019996:	8afb      	ldrh	r3, [r7, #22]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d006      	beq.n	80199aa <tcp_write+0x3f6>
 801999c:	4b46      	ldr	r3, [pc, #280]	@ (8019ab8 <tcp_write+0x504>)
 801999e:	f240 2271 	movw	r2, #625	@ 0x271
 80199a2:	4949      	ldr	r1, [pc, #292]	@ (8019ac8 <tcp_write+0x514>)
 80199a4:	4846      	ldr	r0, [pc, #280]	@ (8019ac0 <tcp_write+0x50c>)
 80199a6:	f006 fe75 	bl	8020694 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80199aa:	8bbb      	ldrh	r3, [r7, #28]
 80199ac:	2201      	movs	r2, #1
 80199ae:	4619      	mov	r1, r3
 80199b0:	2036      	movs	r0, #54	@ 0x36
 80199b2:	f7fa fce7 	bl	8014384 <pbuf_alloc>
 80199b6:	61b8      	str	r0, [r7, #24]
 80199b8:	69bb      	ldr	r3, [r7, #24]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	f000 817b 	beq.w	8019cb6 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80199c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80199c4:	68ba      	ldr	r2, [r7, #8]
 80199c6:	441a      	add	r2, r3
 80199c8:	69bb      	ldr	r3, [r7, #24]
 80199ca:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80199cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80199d0:	b29b      	uxth	r3, r3
 80199d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80199d6:	4619      	mov	r1, r3
 80199d8:	2036      	movs	r0, #54	@ 0x36
 80199da:	f7fa fcd3 	bl	8014384 <pbuf_alloc>
 80199de:	6378      	str	r0, [r7, #52]	@ 0x34
 80199e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d103      	bne.n	80199ee <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80199e6:	69b8      	ldr	r0, [r7, #24]
 80199e8:	f7fa fff8 	bl	80149dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80199ec:	e166      	b.n	8019cbc <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80199ee:	69b9      	ldr	r1, [r7, #24]
 80199f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80199f2:	f7fb f8d9 	bl	8014ba8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80199f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80199f8:	f7fb f896 	bl	8014b28 <pbuf_clen>
 80199fc:	4603      	mov	r3, r0
 80199fe:	461a      	mov	r2, r3
 8019a00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019a04:	4413      	add	r3, r2
 8019a06:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019a0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8019a0e:	2b09      	cmp	r3, #9
 8019a10:	d903      	bls.n	8019a1a <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019a12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019a14:	f7fa ffe2 	bl	80149dc <pbuf_free>
      goto memerr;
 8019a18:	e150      	b.n	8019cbc <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019a1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8019a22:	441a      	add	r2, r3
 8019a24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8019a28:	9300      	str	r3, [sp, #0]
 8019a2a:	4613      	mov	r3, r2
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019a30:	68f8      	ldr	r0, [r7, #12]
 8019a32:	f7ff fc17 	bl	8019264 <tcp_create_segment>
 8019a36:	6578      	str	r0, [r7, #84]	@ 0x54
 8019a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	f000 813d 	beq.w	8019cba <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8019a40:	8afa      	ldrh	r2, [r7, #22]
 8019a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a44:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d102      	bne.n	8019a52 <tcp_write+0x49e>
      queue = seg;
 8019a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019a50:	e00c      	b.n	8019a6c <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d106      	bne.n	8019a66 <tcp_write+0x4b2>
 8019a58:	4b17      	ldr	r3, [pc, #92]	@ (8019ab8 <tcp_write+0x504>)
 8019a5a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019a5e:	491b      	ldr	r1, [pc, #108]	@ (8019acc <tcp_write+0x518>)
 8019a60:	4817      	ldr	r0, [pc, #92]	@ (8019ac0 <tcp_write+0x50c>)
 8019a62:	f006 fe17 	bl	8020694 <iprintf>
      prev_seg->next = seg;
 8019a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019a6a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a6e:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019a70:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019a74:	8bbb      	ldrh	r3, [r7, #28]
 8019a76:	4413      	add	r3, r2
 8019a78:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 8019a7c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8019a80:	88fb      	ldrh	r3, [r7, #6]
 8019a82:	429a      	cmp	r2, r3
 8019a84:	f4ff af3a 	bcc.w	80198fc <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8019a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d00b      	beq.n	8019aa6 <tcp_write+0x4f2>
 8019a8e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d007      	beq.n	8019aa6 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8019a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019a98:	895a      	ldrh	r2, [r3, #10]
 8019a9a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8019a9e:	4413      	add	r3, r2
 8019aa0:	b29a      	uxth	r2, r3
 8019aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019aa4:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019aa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d052      	beq.n	8019b54 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ab4:	e02e      	b.n	8019b14 <tcp_write+0x560>
 8019ab6:	bf00      	nop
 8019ab8:	08024374 	.word	0x08024374
 8019abc:	08024614 	.word	0x08024614
 8019ac0:	080243c8 	.word	0x080243c8
 8019ac4:	08024644 	.word	0x08024644
 8019ac8:	08024684 	.word	0x08024684
 8019acc:	08024694 	.word	0x08024694
      p->tot_len += oversize_used;
 8019ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ad2:	891a      	ldrh	r2, [r3, #8]
 8019ad4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019ad8:	4413      	add	r3, r2
 8019ada:	b29a      	uxth	r2, r3
 8019adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ade:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d112      	bne.n	8019b0e <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019aea:	685b      	ldr	r3, [r3, #4]
 8019aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019aee:	8952      	ldrh	r2, [r2, #10]
 8019af0:	4413      	add	r3, r2
 8019af2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019af6:	68b9      	ldr	r1, [r7, #8]
 8019af8:	4618      	mov	r0, r3
 8019afa:	f006 fffe 	bl	8020afa <memcpy>
        p->len += oversize_used;
 8019afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b00:	895a      	ldrh	r2, [r3, #10]
 8019b02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019b06:	4413      	add	r3, r2
 8019b08:	b29a      	uxth	r2, r3
 8019b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b0c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	633b      	str	r3, [r7, #48]	@ 0x30
 8019b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d1da      	bne.n	8019ad0 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 8019b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b1c:	891a      	ldrh	r2, [r3, #8]
 8019b1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019b22:	4413      	add	r3, r2
 8019b24:	b29a      	uxth	r2, r3
 8019b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b28:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8019b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b2c:	895b      	ldrh	r3, [r3, #10]
 8019b2e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019b32:	429a      	cmp	r2, r3
 8019b34:	d906      	bls.n	8019b44 <tcp_write+0x590>
 8019b36:	4b7c      	ldr	r3, [pc, #496]	@ (8019d28 <tcp_write+0x774>)
 8019b38:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019b3c:	497b      	ldr	r1, [pc, #492]	@ (8019d2c <tcp_write+0x778>)
 8019b3e:	487c      	ldr	r0, [pc, #496]	@ (8019d30 <tcp_write+0x77c>)
 8019b40:	f006 fda8 	bl	8020694 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8019b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b46:	895a      	ldrh	r2, [r3, #10]
 8019b48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019b4c:	1ad3      	subs	r3, r2, r3
 8019b4e:	b29a      	uxth	r2, r3
 8019b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b52:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019b54:	8afa      	ldrh	r2, [r7, #22]
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d018      	beq.n	8019b94 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d106      	bne.n	8019b76 <tcp_write+0x5c2>
 8019b68:	4b6f      	ldr	r3, [pc, #444]	@ (8019d28 <tcp_write+0x774>)
 8019b6a:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8019b6e:	4971      	ldr	r1, [pc, #452]	@ (8019d34 <tcp_write+0x780>)
 8019b70:	486f      	ldr	r0, [pc, #444]	@ (8019d30 <tcp_write+0x77c>)
 8019b72:	f006 fd8f 	bl	8020694 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b78:	685b      	ldr	r3, [r3, #4]
 8019b7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	f7fb f813 	bl	8014ba8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b84:	891a      	ldrh	r2, [r3, #8]
 8019b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b88:	891b      	ldrh	r3, [r3, #8]
 8019b8a:	4413      	add	r3, r2
 8019b8c:	b29a      	uxth	r2, r3
 8019b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b90:	811a      	strh	r2, [r3, #8]
 8019b92:	e03c      	b.n	8019c0e <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8019b94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d038      	beq.n	8019c0e <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d003      	beq.n	8019baa <tcp_write+0x5f6>
 8019ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019ba4:	685b      	ldr	r3, [r3, #4]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d106      	bne.n	8019bb8 <tcp_write+0x604>
 8019baa:	4b5f      	ldr	r3, [pc, #380]	@ (8019d28 <tcp_write+0x774>)
 8019bac:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8019bb0:	4961      	ldr	r1, [pc, #388]	@ (8019d38 <tcp_write+0x784>)
 8019bb2:	485f      	ldr	r0, [pc, #380]	@ (8019d30 <tcp_write+0x77c>)
 8019bb4:	f006 fd6e 	bl	8020694 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019bba:	685b      	ldr	r3, [r3, #4]
 8019bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019bbe:	e00a      	b.n	8019bd6 <tcp_write+0x622>
      p->tot_len += extendlen;
 8019bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bc2:	891a      	ldrh	r2, [r3, #8]
 8019bc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019bc8:	4413      	add	r3, r2
 8019bca:	b29a      	uxth	r2, r3
 8019bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bce:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d1f0      	bne.n	8019bc0 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 8019bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019be0:	891a      	ldrh	r2, [r3, #8]
 8019be2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019be6:	4413      	add	r3, r2
 8019be8:	b29a      	uxth	r2, r3
 8019bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bec:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bf0:	895a      	ldrh	r2, [r3, #10]
 8019bf2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019bf6:	4413      	add	r3, r2
 8019bf8:	b29a      	uxth	r2, r3
 8019bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bfc:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c00:	891a      	ldrh	r2, [r3, #8]
 8019c02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8019c06:	4413      	add	r3, r2
 8019c08:	b29a      	uxth	r2, r3
 8019c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c0c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d103      	bne.n	8019c1c <tcp_write+0x668>
    pcb->unsent = queue;
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019c18:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019c1a:	e002      	b.n	8019c22 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 8019c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019c1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019c20:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019c26:	88fb      	ldrh	r3, [r7, #6]
 8019c28:	441a      	add	r2, r3
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019c34:	88fb      	ldrh	r3, [r7, #6]
 8019c36:	1ad3      	subs	r3, r2, r3
 8019c38:	b29a      	uxth	r2, r3
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019c40:	68fb      	ldr	r3, [r7, #12]
 8019c42:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8019c46:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d00e      	beq.n	8019c72 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d10a      	bne.n	8019c72 <tcp_write+0x6be>
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d106      	bne.n	8019c72 <tcp_write+0x6be>
 8019c64:	4b30      	ldr	r3, [pc, #192]	@ (8019d28 <tcp_write+0x774>)
 8019c66:	f240 3212 	movw	r2, #786	@ 0x312
 8019c6a:	4934      	ldr	r1, [pc, #208]	@ (8019d3c <tcp_write+0x788>)
 8019c6c:	4830      	ldr	r0, [pc, #192]	@ (8019d30 <tcp_write+0x77c>)
 8019c6e:	f006 fd11 	bl	8020694 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d016      	beq.n	8019ca6 <tcp_write+0x6f2>
 8019c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c7a:	691b      	ldr	r3, [r3, #16]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d012      	beq.n	8019ca6 <tcp_write+0x6f2>
 8019c80:	797b      	ldrb	r3, [r7, #5]
 8019c82:	f003 0302 	and.w	r3, r3, #2
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d10d      	bne.n	8019ca6 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c8c:	691b      	ldr	r3, [r3, #16]
 8019c8e:	899b      	ldrh	r3, [r3, #12]
 8019c90:	b29c      	uxth	r4, r3
 8019c92:	2008      	movs	r0, #8
 8019c94:	f7f9 f874 	bl	8012d80 <lwip_htons>
 8019c98:	4603      	mov	r3, r0
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019c9e:	691b      	ldr	r3, [r3, #16]
 8019ca0:	4322      	orrs	r2, r4
 8019ca2:	b292      	uxth	r2, r2
 8019ca4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	e039      	b.n	8019d1e <tcp_write+0x76a>
          goto memerr;
 8019caa:	bf00      	nop
 8019cac:	e006      	b.n	8019cbc <tcp_write+0x708>
            goto memerr;
 8019cae:	bf00      	nop
 8019cb0:	e004      	b.n	8019cbc <tcp_write+0x708>
        goto memerr;
 8019cb2:	bf00      	nop
 8019cb4:	e002      	b.n	8019cbc <tcp_write+0x708>
        goto memerr;
 8019cb6:	bf00      	nop
 8019cb8:	e000      	b.n	8019cbc <tcp_write+0x708>
      goto memerr;
 8019cba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	8b5b      	ldrh	r3, [r3, #26]
 8019cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019cc4:	b29a      	uxth	r2, r3
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8019cca:	4b1d      	ldr	r3, [pc, #116]	@ (8019d40 <tcp_write+0x78c>)
 8019ccc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019cd0:	3301      	adds	r3, #1
 8019cd2:	b29a      	uxth	r2, r3
 8019cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8019d40 <tcp_write+0x78c>)
 8019cd6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 8019cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d002      	beq.n	8019ce6 <tcp_write+0x732>
    pbuf_free(concat_p);
 8019ce0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019ce2:	f7fa fe7b 	bl	80149dc <pbuf_free>
  }
  if (queue != NULL) {
 8019ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d002      	beq.n	8019cf2 <tcp_write+0x73e>
    tcp_segs_free(queue);
 8019cec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019cee:	f7fc fa67 	bl	80161c0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d00e      	beq.n	8019d1a <tcp_write+0x766>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d10a      	bne.n	8019d1a <tcp_write+0x766>
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d106      	bne.n	8019d1a <tcp_write+0x766>
 8019d0c:	4b06      	ldr	r3, [pc, #24]	@ (8019d28 <tcp_write+0x774>)
 8019d0e:	f240 3227 	movw	r2, #807	@ 0x327
 8019d12:	490a      	ldr	r1, [pc, #40]	@ (8019d3c <tcp_write+0x788>)
 8019d14:	4806      	ldr	r0, [pc, #24]	@ (8019d30 <tcp_write+0x77c>)
 8019d16:	f006 fcbd 	bl	8020694 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019d1e:	4618      	mov	r0, r3
 8019d20:	3764      	adds	r7, #100	@ 0x64
 8019d22:	46bd      	mov	sp, r7
 8019d24:	bd90      	pop	{r4, r7, pc}
 8019d26:	bf00      	nop
 8019d28:	08024374 	.word	0x08024374
 8019d2c:	080246a8 	.word	0x080246a8
 8019d30:	080243c8 	.word	0x080243c8
 8019d34:	080246d4 	.word	0x080246d4
 8019d38:	0802470c 	.word	0x0802470c
 8019d3c:	08024744 	.word	0x08024744
 8019d40:	2002d36c 	.word	0x2002d36c

08019d44 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019d44:	b590      	push	{r4, r7, lr}
 8019d46:	b08b      	sub	sp, #44	@ 0x2c
 8019d48:	af02      	add	r7, sp, #8
 8019d4a:	6078      	str	r0, [r7, #4]
 8019d4c:	460b      	mov	r3, r1
 8019d4e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019d50:	2300      	movs	r3, #0
 8019d52:	61bb      	str	r3, [r7, #24]
 8019d54:	2300      	movs	r3, #0
 8019d56:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019d58:	2300      	movs	r3, #0
 8019d5a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d106      	bne.n	8019d70 <tcp_split_unsent_seg+0x2c>
 8019d62:	4b9b      	ldr	r3, [pc, #620]	@ (8019fd0 <tcp_split_unsent_seg+0x28c>)
 8019d64:	f240 324b 	movw	r2, #843	@ 0x34b
 8019d68:	499a      	ldr	r1, [pc, #616]	@ (8019fd4 <tcp_split_unsent_seg+0x290>)
 8019d6a:	489b      	ldr	r0, [pc, #620]	@ (8019fd8 <tcp_split_unsent_seg+0x294>)
 8019d6c:	f006 fc92 	bl	8020694 <iprintf>

  useg = pcb->unsent;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d74:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019d76:	697b      	ldr	r3, [r7, #20]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d102      	bne.n	8019d82 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019d80:	e121      	b.n	8019fc6 <tcp_split_unsent_seg+0x282>
  }

  if (split == 0) {
 8019d82:	887b      	ldrh	r3, [r7, #2]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d109      	bne.n	8019d9c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019d88:	4b91      	ldr	r3, [pc, #580]	@ (8019fd0 <tcp_split_unsent_seg+0x28c>)
 8019d8a:	f240 3253 	movw	r2, #851	@ 0x353
 8019d8e:	4993      	ldr	r1, [pc, #588]	@ (8019fdc <tcp_split_unsent_seg+0x298>)
 8019d90:	4891      	ldr	r0, [pc, #580]	@ (8019fd8 <tcp_split_unsent_seg+0x294>)
 8019d92:	f006 fc7f 	bl	8020694 <iprintf>
    return ERR_VAL;
 8019d96:	f06f 0305 	mvn.w	r3, #5
 8019d9a:	e114      	b.n	8019fc6 <tcp_split_unsent_seg+0x282>
  }

  if (useg->len <= split) {
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	891b      	ldrh	r3, [r3, #8]
 8019da0:	887a      	ldrh	r2, [r7, #2]
 8019da2:	429a      	cmp	r2, r3
 8019da4:	d301      	bcc.n	8019daa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019da6:	2300      	movs	r3, #0
 8019da8:	e10d      	b.n	8019fc6 <tcp_split_unsent_seg+0x282>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019dae:	887a      	ldrh	r2, [r7, #2]
 8019db0:	429a      	cmp	r2, r3
 8019db2:	d906      	bls.n	8019dc2 <tcp_split_unsent_seg+0x7e>
 8019db4:	4b86      	ldr	r3, [pc, #536]	@ (8019fd0 <tcp_split_unsent_seg+0x28c>)
 8019db6:	f240 325b 	movw	r2, #859	@ 0x35b
 8019dba:	4989      	ldr	r1, [pc, #548]	@ (8019fe0 <tcp_split_unsent_seg+0x29c>)
 8019dbc:	4886      	ldr	r0, [pc, #536]	@ (8019fd8 <tcp_split_unsent_seg+0x294>)
 8019dbe:	f006 fc69 	bl	8020694 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	891b      	ldrh	r3, [r3, #8]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d106      	bne.n	8019dd8 <tcp_split_unsent_seg+0x94>
 8019dca:	4b81      	ldr	r3, [pc, #516]	@ (8019fd0 <tcp_split_unsent_seg+0x28c>)
 8019dcc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019dd0:	4984      	ldr	r1, [pc, #528]	@ (8019fe4 <tcp_split_unsent_seg+0x2a0>)
 8019dd2:	4881      	ldr	r0, [pc, #516]	@ (8019fd8 <tcp_split_unsent_seg+0x294>)
 8019dd4:	f006 fc5e 	bl	8020694 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019dd8:	697b      	ldr	r3, [r7, #20]
 8019dda:	7b1b      	ldrb	r3, [r3, #12]
 8019ddc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019dde:	7bfb      	ldrb	r3, [r7, #15]
 8019de0:	009b      	lsls	r3, r3, #2
 8019de2:	b2db      	uxtb	r3, r3
 8019de4:	f003 0304 	and.w	r3, r3, #4
 8019de8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019dea:	697b      	ldr	r3, [r7, #20]
 8019dec:	891a      	ldrh	r2, [r3, #8]
 8019dee:	887b      	ldrh	r3, [r7, #2]
 8019df0:	1ad3      	subs	r3, r2, r3
 8019df2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019df4:	7bbb      	ldrb	r3, [r7, #14]
 8019df6:	b29a      	uxth	r2, r3
 8019df8:	89bb      	ldrh	r3, [r7, #12]
 8019dfa:	4413      	add	r3, r2
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019e02:	4619      	mov	r1, r3
 8019e04:	2036      	movs	r0, #54	@ 0x36
 8019e06:	f7fa fabd 	bl	8014384 <pbuf_alloc>
 8019e0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019e0c:	693b      	ldr	r3, [r7, #16]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	f000 80ba 	beq.w	8019f88 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019e14:	697b      	ldr	r3, [r7, #20]
 8019e16:	685b      	ldr	r3, [r3, #4]
 8019e18:	891a      	ldrh	r2, [r3, #8]
 8019e1a:	697b      	ldr	r3, [r7, #20]
 8019e1c:	891b      	ldrh	r3, [r3, #8]
 8019e1e:	1ad3      	subs	r3, r2, r3
 8019e20:	b29a      	uxth	r2, r3
 8019e22:	887b      	ldrh	r3, [r7, #2]
 8019e24:	4413      	add	r3, r2
 8019e26:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019e28:	697b      	ldr	r3, [r7, #20]
 8019e2a:	6858      	ldr	r0, [r3, #4]
 8019e2c:	693b      	ldr	r3, [r7, #16]
 8019e2e:	685a      	ldr	r2, [r3, #4]
 8019e30:	7bbb      	ldrb	r3, [r7, #14]
 8019e32:	18d1      	adds	r1, r2, r3
 8019e34:	897b      	ldrh	r3, [r7, #10]
 8019e36:	89ba      	ldrh	r2, [r7, #12]
 8019e38:	f7fb f802 	bl	8014e40 <pbuf_copy_partial>
 8019e3c:	4603      	mov	r3, r0
 8019e3e:	461a      	mov	r2, r3
 8019e40:	89bb      	ldrh	r3, [r7, #12]
 8019e42:	4293      	cmp	r3, r2
 8019e44:	f040 80a2 	bne.w	8019f8c <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019e48:	697b      	ldr	r3, [r7, #20]
 8019e4a:	691b      	ldr	r3, [r3, #16]
 8019e4c:	899b      	ldrh	r3, [r3, #12]
 8019e4e:	b29b      	uxth	r3, r3
 8019e50:	4618      	mov	r0, r3
 8019e52:	f7f8 ff95 	bl	8012d80 <lwip_htons>
 8019e56:	4603      	mov	r3, r0
 8019e58:	b2db      	uxtb	r3, r3
 8019e5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019e5e:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019e60:	2300      	movs	r3, #0
 8019e62:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8019e64:	7ffb      	ldrb	r3, [r7, #31]
 8019e66:	f003 0308 	and.w	r3, r3, #8
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d007      	beq.n	8019e7e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019e6e:	7ffb      	ldrb	r3, [r7, #31]
 8019e70:	f023 0308 	bic.w	r3, r3, #8
 8019e74:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8019e76:	7fbb      	ldrb	r3, [r7, #30]
 8019e78:	f043 0308 	orr.w	r3, r3, #8
 8019e7c:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8019e7e:	7ffb      	ldrb	r3, [r7, #31]
 8019e80:	f003 0301 	and.w	r3, r3, #1
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d007      	beq.n	8019e98 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019e88:	7ffb      	ldrb	r3, [r7, #31]
 8019e8a:	f023 0301 	bic.w	r3, r3, #1
 8019e8e:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8019e90:	7fbb      	ldrb	r3, [r7, #30]
 8019e92:	f043 0301 	orr.w	r3, r3, #1
 8019e96:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019e98:	697b      	ldr	r3, [r7, #20]
 8019e9a:	691b      	ldr	r3, [r3, #16]
 8019e9c:	685b      	ldr	r3, [r3, #4]
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f7f8 ff84 	bl	8012dac <lwip_htonl>
 8019ea4:	4602      	mov	r2, r0
 8019ea6:	887b      	ldrh	r3, [r7, #2]
 8019ea8:	18d1      	adds	r1, r2, r3
 8019eaa:	7fba      	ldrb	r2, [r7, #30]
 8019eac:	7bfb      	ldrb	r3, [r7, #15]
 8019eae:	9300      	str	r3, [sp, #0]
 8019eb0:	460b      	mov	r3, r1
 8019eb2:	6939      	ldr	r1, [r7, #16]
 8019eb4:	6878      	ldr	r0, [r7, #4]
 8019eb6:	f7ff f9d5 	bl	8019264 <tcp_create_segment>
 8019eba:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8019ebc:	69bb      	ldr	r3, [r7, #24]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d066      	beq.n	8019f90 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019ec2:	697b      	ldr	r3, [r7, #20]
 8019ec4:	685b      	ldr	r3, [r3, #4]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7fa fe2e 	bl	8014b28 <pbuf_clen>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	461a      	mov	r2, r3
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019ed6:	1a9b      	subs	r3, r3, r2
 8019ed8:	b29a      	uxth	r2, r3
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019ee0:	697b      	ldr	r3, [r7, #20]
 8019ee2:	6858      	ldr	r0, [r3, #4]
 8019ee4:	697b      	ldr	r3, [r7, #20]
 8019ee6:	685b      	ldr	r3, [r3, #4]
 8019ee8:	891a      	ldrh	r2, [r3, #8]
 8019eea:	89bb      	ldrh	r3, [r7, #12]
 8019eec:	1ad3      	subs	r3, r2, r3
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	4619      	mov	r1, r3
 8019ef2:	f7fa fbd3 	bl	801469c <pbuf_realloc>
  useg->len -= remainder;
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	891a      	ldrh	r2, [r3, #8]
 8019efa:	89bb      	ldrh	r3, [r7, #12]
 8019efc:	1ad3      	subs	r3, r2, r3
 8019efe:	b29a      	uxth	r2, r3
 8019f00:	697b      	ldr	r3, [r7, #20]
 8019f02:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	691b      	ldr	r3, [r3, #16]
 8019f08:	899b      	ldrh	r3, [r3, #12]
 8019f0a:	b29c      	uxth	r4, r3
 8019f0c:	7ffb      	ldrb	r3, [r7, #31]
 8019f0e:	b29b      	uxth	r3, r3
 8019f10:	4618      	mov	r0, r3
 8019f12:	f7f8 ff35 	bl	8012d80 <lwip_htons>
 8019f16:	4603      	mov	r3, r0
 8019f18:	461a      	mov	r2, r3
 8019f1a:	697b      	ldr	r3, [r7, #20]
 8019f1c:	691b      	ldr	r3, [r3, #16]
 8019f1e:	4322      	orrs	r2, r4
 8019f20:	b292      	uxth	r2, r2
 8019f22:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8019f24:	697b      	ldr	r3, [r7, #20]
 8019f26:	2200      	movs	r2, #0
 8019f28:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019f2a:	697b      	ldr	r3, [r7, #20]
 8019f2c:	685b      	ldr	r3, [r3, #4]
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f7fa fdfa 	bl	8014b28 <pbuf_clen>
 8019f34:	4603      	mov	r3, r0
 8019f36:	461a      	mov	r2, r3
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f3e:	4413      	add	r3, r2
 8019f40:	b29a      	uxth	r2, r3
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019f48:	69bb      	ldr	r3, [r7, #24]
 8019f4a:	685b      	ldr	r3, [r3, #4]
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	f7fa fdeb 	bl	8014b28 <pbuf_clen>
 8019f52:	4603      	mov	r3, r0
 8019f54:	461a      	mov	r2, r3
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f5c:	4413      	add	r3, r2
 8019f5e:	b29a      	uxth	r2, r3
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019f66:	697b      	ldr	r3, [r7, #20]
 8019f68:	681a      	ldr	r2, [r3, #0]
 8019f6a:	69bb      	ldr	r3, [r7, #24]
 8019f6c:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019f6e:	697b      	ldr	r3, [r7, #20]
 8019f70:	69ba      	ldr	r2, [r7, #24]
 8019f72:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8019f74:	69bb      	ldr	r3, [r7, #24]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d103      	bne.n	8019f84 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	2200      	movs	r2, #0
 8019f80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8019f84:	2300      	movs	r3, #0
 8019f86:	e01e      	b.n	8019fc6 <tcp_split_unsent_seg+0x282>
    goto memerr;
 8019f88:	bf00      	nop
 8019f8a:	e002      	b.n	8019f92 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8019f8c:	bf00      	nop
 8019f8e:	e000      	b.n	8019f92 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8019f90:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 8019f92:	4b15      	ldr	r3, [pc, #84]	@ (8019fe8 <tcp_split_unsent_seg+0x2a4>)
 8019f94:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019f98:	3301      	adds	r3, #1
 8019f9a:	b29a      	uxth	r2, r3
 8019f9c:	4b12      	ldr	r3, [pc, #72]	@ (8019fe8 <tcp_split_unsent_seg+0x2a4>)
 8019f9e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019fa2:	69bb      	ldr	r3, [r7, #24]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d006      	beq.n	8019fb6 <tcp_split_unsent_seg+0x272>
 8019fa8:	4b09      	ldr	r3, [pc, #36]	@ (8019fd0 <tcp_split_unsent_seg+0x28c>)
 8019faa:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8019fae:	490f      	ldr	r1, [pc, #60]	@ (8019fec <tcp_split_unsent_seg+0x2a8>)
 8019fb0:	4809      	ldr	r0, [pc, #36]	@ (8019fd8 <tcp_split_unsent_seg+0x294>)
 8019fb2:	f006 fb6f 	bl	8020694 <iprintf>
  if (p != NULL) {
 8019fb6:	693b      	ldr	r3, [r7, #16]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d002      	beq.n	8019fc2 <tcp_split_unsent_seg+0x27e>
    pbuf_free(p);
 8019fbc:	6938      	ldr	r0, [r7, #16]
 8019fbe:	f7fa fd0d 	bl	80149dc <pbuf_free>
  }

  return ERR_MEM;
 8019fc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	3724      	adds	r7, #36	@ 0x24
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd90      	pop	{r4, r7, pc}
 8019fce:	bf00      	nop
 8019fd0:	08024374 	.word	0x08024374
 8019fd4:	08024764 	.word	0x08024764
 8019fd8:	080243c8 	.word	0x080243c8
 8019fdc:	08024788 	.word	0x08024788
 8019fe0:	080247ac 	.word	0x080247ac
 8019fe4:	080247bc 	.word	0x080247bc
 8019fe8:	2002d36c 	.word	0x2002d36c
 8019fec:	080247cc 	.word	0x080247cc

08019ff0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019ff0:	b590      	push	{r4, r7, lr}
 8019ff2:	b085      	sub	sp, #20
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d106      	bne.n	801a00c <tcp_send_fin+0x1c>
 8019ffe:	4b21      	ldr	r3, [pc, #132]	@ (801a084 <tcp_send_fin+0x94>)
 801a000:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a004:	4920      	ldr	r1, [pc, #128]	@ (801a088 <tcp_send_fin+0x98>)
 801a006:	4821      	ldr	r0, [pc, #132]	@ (801a08c <tcp_send_fin+0x9c>)
 801a008:	f006 fb44 	bl	8020694 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a010:	2b00      	cmp	r3, #0
 801a012:	d02e      	beq.n	801a072 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a018:	60fb      	str	r3, [r7, #12]
 801a01a:	e002      	b.n	801a022 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d1f8      	bne.n	801a01c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	691b      	ldr	r3, [r3, #16]
 801a02e:	899b      	ldrh	r3, [r3, #12]
 801a030:	b29b      	uxth	r3, r3
 801a032:	4618      	mov	r0, r3
 801a034:	f7f8 fea4 	bl	8012d80 <lwip_htons>
 801a038:	4603      	mov	r3, r0
 801a03a:	b2db      	uxtb	r3, r3
 801a03c:	f003 0307 	and.w	r3, r3, #7
 801a040:	2b00      	cmp	r3, #0
 801a042:	d116      	bne.n	801a072 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	691b      	ldr	r3, [r3, #16]
 801a048:	899b      	ldrh	r3, [r3, #12]
 801a04a:	b29c      	uxth	r4, r3
 801a04c:	2001      	movs	r0, #1
 801a04e:	f7f8 fe97 	bl	8012d80 <lwip_htons>
 801a052:	4603      	mov	r3, r0
 801a054:	461a      	mov	r2, r3
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	691b      	ldr	r3, [r3, #16]
 801a05a:	4322      	orrs	r2, r4
 801a05c:	b292      	uxth	r2, r2
 801a05e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	8b5b      	ldrh	r3, [r3, #26]
 801a064:	f043 0320 	orr.w	r3, r3, #32
 801a068:	b29a      	uxth	r2, r3
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a06e:	2300      	movs	r3, #0
 801a070:	e004      	b.n	801a07c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a072:	2101      	movs	r1, #1
 801a074:	6878      	ldr	r0, [r7, #4]
 801a076:	f000 f80b 	bl	801a090 <tcp_enqueue_flags>
 801a07a:	4603      	mov	r3, r0
}
 801a07c:	4618      	mov	r0, r3
 801a07e:	3714      	adds	r7, #20
 801a080:	46bd      	mov	sp, r7
 801a082:	bd90      	pop	{r4, r7, pc}
 801a084:	08024374 	.word	0x08024374
 801a088:	080247d8 	.word	0x080247d8
 801a08c:	080243c8 	.word	0x080243c8

0801a090 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b088      	sub	sp, #32
 801a094:	af02      	add	r7, sp, #8
 801a096:	6078      	str	r0, [r7, #4]
 801a098:	460b      	mov	r3, r1
 801a09a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a09c:	2300      	movs	r3, #0
 801a09e:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a0a4:	78fb      	ldrb	r3, [r7, #3]
 801a0a6:	f003 0303 	and.w	r3, r3, #3
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d106      	bne.n	801a0bc <tcp_enqueue_flags+0x2c>
 801a0ae:	4b6f      	ldr	r3, [pc, #444]	@ (801a26c <tcp_enqueue_flags+0x1dc>)
 801a0b0:	f240 4211 	movw	r2, #1041	@ 0x411
 801a0b4:	496e      	ldr	r1, [pc, #440]	@ (801a270 <tcp_enqueue_flags+0x1e0>)
 801a0b6:	486f      	ldr	r0, [pc, #444]	@ (801a274 <tcp_enqueue_flags+0x1e4>)
 801a0b8:	f006 faec 	bl	8020694 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d106      	bne.n	801a0d0 <tcp_enqueue_flags+0x40>
 801a0c2:	4b6a      	ldr	r3, [pc, #424]	@ (801a26c <tcp_enqueue_flags+0x1dc>)
 801a0c4:	f240 4213 	movw	r2, #1043	@ 0x413
 801a0c8:	496b      	ldr	r1, [pc, #428]	@ (801a278 <tcp_enqueue_flags+0x1e8>)
 801a0ca:	486a      	ldr	r0, [pc, #424]	@ (801a274 <tcp_enqueue_flags+0x1e4>)
 801a0cc:	f006 fae2 	bl	8020694 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a0d0:	78fb      	ldrb	r3, [r7, #3]
 801a0d2:	f003 0302 	and.w	r3, r3, #2
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d001      	beq.n	801a0de <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a0da:	2301      	movs	r3, #1
 801a0dc:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a0de:	7dfb      	ldrb	r3, [r7, #23]
 801a0e0:	009b      	lsls	r3, r3, #2
 801a0e2:	b2db      	uxtb	r3, r3
 801a0e4:	f003 0304 	and.w	r3, r3, #4
 801a0e8:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a0ea:	7dbb      	ldrb	r3, [r7, #22]
 801a0ec:	b29b      	uxth	r3, r3
 801a0ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a0f2:	4619      	mov	r1, r3
 801a0f4:	2036      	movs	r0, #54	@ 0x36
 801a0f6:	f7fa f945 	bl	8014384 <pbuf_alloc>
 801a0fa:	60f8      	str	r0, [r7, #12]
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d111      	bne.n	801a126 <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	8b5b      	ldrh	r3, [r3, #26]
 801a106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a10a:	b29a      	uxth	r2, r3
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a110:	4b5a      	ldr	r3, [pc, #360]	@ (801a27c <tcp_enqueue_flags+0x1ec>)
 801a112:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a116:	3301      	adds	r3, #1
 801a118:	b29a      	uxth	r2, r3
 801a11a:	4b58      	ldr	r3, [pc, #352]	@ (801a27c <tcp_enqueue_flags+0x1ec>)
 801a11c:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a124:	e09d      	b.n	801a262 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	895a      	ldrh	r2, [r3, #10]
 801a12a:	7dbb      	ldrb	r3, [r7, #22]
 801a12c:	b29b      	uxth	r3, r3
 801a12e:	429a      	cmp	r2, r3
 801a130:	d206      	bcs.n	801a140 <tcp_enqueue_flags+0xb0>
 801a132:	4b4e      	ldr	r3, [pc, #312]	@ (801a26c <tcp_enqueue_flags+0x1dc>)
 801a134:	f240 4239 	movw	r2, #1081	@ 0x439
 801a138:	4951      	ldr	r1, [pc, #324]	@ (801a280 <tcp_enqueue_flags+0x1f0>)
 801a13a:	484e      	ldr	r0, [pc, #312]	@ (801a274 <tcp_enqueue_flags+0x1e4>)
 801a13c:	f006 faaa 	bl	8020694 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801a144:	78fa      	ldrb	r2, [r7, #3]
 801a146:	7dfb      	ldrb	r3, [r7, #23]
 801a148:	9300      	str	r3, [sp, #0]
 801a14a:	460b      	mov	r3, r1
 801a14c:	68f9      	ldr	r1, [r7, #12]
 801a14e:	6878      	ldr	r0, [r7, #4]
 801a150:	f7ff f888 	bl	8019264 <tcp_create_segment>
 801a154:	60b8      	str	r0, [r7, #8]
 801a156:	68bb      	ldr	r3, [r7, #8]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d111      	bne.n	801a180 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	8b5b      	ldrh	r3, [r3, #26]
 801a160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a164:	b29a      	uxth	r2, r3
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a16a:	4b44      	ldr	r3, [pc, #272]	@ (801a27c <tcp_enqueue_flags+0x1ec>)
 801a16c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a170:	3301      	adds	r3, #1
 801a172:	b29a      	uxth	r2, r3
 801a174:	4b41      	ldr	r3, [pc, #260]	@ (801a27c <tcp_enqueue_flags+0x1ec>)
 801a176:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a17a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a17e:	e070      	b.n	801a262 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a180:	68bb      	ldr	r3, [r7, #8]
 801a182:	691b      	ldr	r3, [r3, #16]
 801a184:	f003 0303 	and.w	r3, r3, #3
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d006      	beq.n	801a19a <tcp_enqueue_flags+0x10a>
 801a18c:	4b37      	ldr	r3, [pc, #220]	@ (801a26c <tcp_enqueue_flags+0x1dc>)
 801a18e:	f240 4242 	movw	r2, #1090	@ 0x442
 801a192:	493c      	ldr	r1, [pc, #240]	@ (801a284 <tcp_enqueue_flags+0x1f4>)
 801a194:	4837      	ldr	r0, [pc, #220]	@ (801a274 <tcp_enqueue_flags+0x1e4>)
 801a196:	f006 fa7d 	bl	8020694 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	891b      	ldrh	r3, [r3, #8]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d006      	beq.n	801a1b0 <tcp_enqueue_flags+0x120>
 801a1a2:	4b32      	ldr	r3, [pc, #200]	@ (801a26c <tcp_enqueue_flags+0x1dc>)
 801a1a4:	f240 4243 	movw	r2, #1091	@ 0x443
 801a1a8:	4937      	ldr	r1, [pc, #220]	@ (801a288 <tcp_enqueue_flags+0x1f8>)
 801a1aa:	4832      	ldr	r0, [pc, #200]	@ (801a274 <tcp_enqueue_flags+0x1e4>)
 801a1ac:	f006 fa72 	bl	8020694 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d103      	bne.n	801a1c0 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	68ba      	ldr	r2, [r7, #8]
 801a1bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a1be:	e00d      	b.n	801a1dc <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a1c4:	613b      	str	r3, [r7, #16]
 801a1c6:	e002      	b.n	801a1ce <tcp_enqueue_flags+0x13e>
 801a1c8:	693b      	ldr	r3, [r7, #16]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	613b      	str	r3, [r7, #16]
 801a1ce:	693b      	ldr	r3, [r7, #16]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d1f8      	bne.n	801a1c8 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801a1d6:	693b      	ldr	r3, [r7, #16]
 801a1d8:	68ba      	ldr	r2, [r7, #8]
 801a1da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	2200      	movs	r2, #0
 801a1e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a1e4:	78fb      	ldrb	r3, [r7, #3]
 801a1e6:	f003 0302 	and.w	r3, r3, #2
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d104      	bne.n	801a1f8 <tcp_enqueue_flags+0x168>
 801a1ee:	78fb      	ldrb	r3, [r7, #3]
 801a1f0:	f003 0301 	and.w	r3, r3, #1
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d004      	beq.n	801a202 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a1fc:	1c5a      	adds	r2, r3, #1
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a202:	78fb      	ldrb	r3, [r7, #3]
 801a204:	f003 0301 	and.w	r3, r3, #1
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d006      	beq.n	801a21a <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	8b5b      	ldrh	r3, [r3, #26]
 801a210:	f043 0320 	orr.w	r3, r3, #32
 801a214:	b29a      	uxth	r2, r3
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a21a:	68bb      	ldr	r3, [r7, #8]
 801a21c:	685b      	ldr	r3, [r3, #4]
 801a21e:	4618      	mov	r0, r3
 801a220:	f7fa fc82 	bl	8014b28 <pbuf_clen>
 801a224:	4603      	mov	r3, r0
 801a226:	461a      	mov	r2, r3
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a22e:	4413      	add	r3, r2
 801a230:	b29a      	uxth	r2, r3
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d00e      	beq.n	801a260 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a246:	2b00      	cmp	r3, #0
 801a248:	d10a      	bne.n	801a260 <tcp_enqueue_flags+0x1d0>
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d106      	bne.n	801a260 <tcp_enqueue_flags+0x1d0>
 801a252:	4b06      	ldr	r3, [pc, #24]	@ (801a26c <tcp_enqueue_flags+0x1dc>)
 801a254:	f240 4265 	movw	r2, #1125	@ 0x465
 801a258:	490c      	ldr	r1, [pc, #48]	@ (801a28c <tcp_enqueue_flags+0x1fc>)
 801a25a:	4806      	ldr	r0, [pc, #24]	@ (801a274 <tcp_enqueue_flags+0x1e4>)
 801a25c:	f006 fa1a 	bl	8020694 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a260:	2300      	movs	r3, #0
}
 801a262:	4618      	mov	r0, r3
 801a264:	3718      	adds	r7, #24
 801a266:	46bd      	mov	sp, r7
 801a268:	bd80      	pop	{r7, pc}
 801a26a:	bf00      	nop
 801a26c:	08024374 	.word	0x08024374
 801a270:	080247f4 	.word	0x080247f4
 801a274:	080243c8 	.word	0x080243c8
 801a278:	0802484c 	.word	0x0802484c
 801a27c:	2002d36c 	.word	0x2002d36c
 801a280:	0802486c 	.word	0x0802486c
 801a284:	080248a8 	.word	0x080248a8
 801a288:	080248c0 	.word	0x080248c0
 801a28c:	080248ec 	.word	0x080248ec

0801a290 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a290:	b5b0      	push	{r4, r5, r7, lr}
 801a292:	b08a      	sub	sp, #40	@ 0x28
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d106      	bne.n	801a2ac <tcp_output+0x1c>
 801a29e:	4b8a      	ldr	r3, [pc, #552]	@ (801a4c8 <tcp_output+0x238>)
 801a2a0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801a2a4:	4989      	ldr	r1, [pc, #548]	@ (801a4cc <tcp_output+0x23c>)
 801a2a6:	488a      	ldr	r0, [pc, #552]	@ (801a4d0 <tcp_output+0x240>)
 801a2a8:	f006 f9f4 	bl	8020694 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	7d1b      	ldrb	r3, [r3, #20]
 801a2b0:	2b01      	cmp	r3, #1
 801a2b2:	d106      	bne.n	801a2c2 <tcp_output+0x32>
 801a2b4:	4b84      	ldr	r3, [pc, #528]	@ (801a4c8 <tcp_output+0x238>)
 801a2b6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801a2ba:	4986      	ldr	r1, [pc, #536]	@ (801a4d4 <tcp_output+0x244>)
 801a2bc:	4884      	ldr	r0, [pc, #528]	@ (801a4d0 <tcp_output+0x240>)
 801a2be:	f006 f9e9 	bl	8020694 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a2c2:	4b85      	ldr	r3, [pc, #532]	@ (801a4d8 <tcp_output+0x248>)
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	687a      	ldr	r2, [r7, #4]
 801a2c8:	429a      	cmp	r2, r3
 801a2ca:	d101      	bne.n	801a2d0 <tcp_output+0x40>
    return ERR_OK;
 801a2cc:	2300      	movs	r3, #0
 801a2ce:	e1d1      	b.n	801a674 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a2dc:	4293      	cmp	r3, r2
 801a2de:	bf28      	it	cs
 801a2e0:	4613      	movcs	r3, r2
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a2ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801a2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d10b      	bne.n	801a30a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	8b5b      	ldrh	r3, [r3, #26]
 801a2f6:	f003 0302 	and.w	r3, r3, #2
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	f000 81ad 	beq.w	801a65a <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801a300:	6878      	ldr	r0, [r7, #4]
 801a302:	f000 fdeb 	bl	801aedc <tcp_send_empty_ack>
 801a306:	4603      	mov	r3, r0
 801a308:	e1b4      	b.n	801a674 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a30a:	6879      	ldr	r1, [r7, #4]
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	3304      	adds	r3, #4
 801a310:	461a      	mov	r2, r3
 801a312:	6878      	ldr	r0, [r7, #4]
 801a314:	f7fe ff8a 	bl	801922c <tcp_route>
 801a318:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a31a:	697b      	ldr	r3, [r7, #20]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d102      	bne.n	801a326 <tcp_output+0x96>
    return ERR_RTE;
 801a320:	f06f 0303 	mvn.w	r3, #3
 801a324:	e1a6      	b.n	801a674 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d003      	beq.n	801a334 <tcp_output+0xa4>
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d111      	bne.n	801a358 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a334:	697b      	ldr	r3, [r7, #20]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d002      	beq.n	801a340 <tcp_output+0xb0>
 801a33a:	697b      	ldr	r3, [r7, #20]
 801a33c:	3304      	adds	r3, #4
 801a33e:	e000      	b.n	801a342 <tcp_output+0xb2>
 801a340:	2300      	movs	r3, #0
 801a342:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d102      	bne.n	801a350 <tcp_output+0xc0>
      return ERR_RTE;
 801a34a:	f06f 0303 	mvn.w	r3, #3
 801a34e:	e191      	b.n	801a674 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a350:	693b      	ldr	r3, [r7, #16]
 801a352:	681a      	ldr	r2, [r3, #0]
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a35a:	691b      	ldr	r3, [r3, #16]
 801a35c:	685b      	ldr	r3, [r3, #4]
 801a35e:	4618      	mov	r0, r3
 801a360:	f7f8 fd24 	bl	8012dac <lwip_htonl>
 801a364:	4602      	mov	r2, r0
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a36a:	1ad3      	subs	r3, r2, r3
 801a36c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a36e:	8912      	ldrh	r2, [r2, #8]
 801a370:	4413      	add	r3, r2
 801a372:	69ba      	ldr	r2, [r7, #24]
 801a374:	429a      	cmp	r2, r3
 801a376:	d227      	bcs.n	801a3c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a37e:	461a      	mov	r2, r3
 801a380:	69bb      	ldr	r3, [r7, #24]
 801a382:	4293      	cmp	r3, r2
 801a384:	d114      	bne.n	801a3b0 <tcp_output+0x120>
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d110      	bne.n	801a3b0 <tcp_output+0x120>
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a394:	2b00      	cmp	r3, #0
 801a396:	d10b      	bne.n	801a3b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	2200      	movs	r2, #0
 801a39c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	2201      	movs	r2, #1
 801a3a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	8b5b      	ldrh	r3, [r3, #26]
 801a3b4:	f003 0302 	and.w	r3, r3, #2
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	f000 8150 	beq.w	801a65e <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801a3be:	6878      	ldr	r0, [r7, #4]
 801a3c0:	f000 fd8c 	bl	801aedc <tcp_send_empty_ack>
 801a3c4:	4603      	mov	r3, r0
 801a3c6:	e155      	b.n	801a674 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	2200      	movs	r2, #0
 801a3cc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a3d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a3d6:	6a3b      	ldr	r3, [r7, #32]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	f000 811f 	beq.w	801a61c <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801a3de:	e002      	b.n	801a3e6 <tcp_output+0x156>
 801a3e0:	6a3b      	ldr	r3, [r7, #32]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	623b      	str	r3, [r7, #32]
 801a3e6:	6a3b      	ldr	r3, [r7, #32]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d1f8      	bne.n	801a3e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a3ee:	e115      	b.n	801a61c <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3f2:	691b      	ldr	r3, [r3, #16]
 801a3f4:	899b      	ldrh	r3, [r3, #12]
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	f7f8 fcc1 	bl	8012d80 <lwip_htons>
 801a3fe:	4603      	mov	r3, r0
 801a400:	b2db      	uxtb	r3, r3
 801a402:	f003 0304 	and.w	r3, r3, #4
 801a406:	2b00      	cmp	r3, #0
 801a408:	d006      	beq.n	801a418 <tcp_output+0x188>
 801a40a:	4b2f      	ldr	r3, [pc, #188]	@ (801a4c8 <tcp_output+0x238>)
 801a40c:	f240 5236 	movw	r2, #1334	@ 0x536
 801a410:	4932      	ldr	r1, [pc, #200]	@ (801a4dc <tcp_output+0x24c>)
 801a412:	482f      	ldr	r0, [pc, #188]	@ (801a4d0 <tcp_output+0x240>)
 801a414:	f006 f93e 	bl	8020694 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d01f      	beq.n	801a460 <tcp_output+0x1d0>
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	8b5b      	ldrh	r3, [r3, #26]
 801a424:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d119      	bne.n	801a460 <tcp_output+0x1d0>
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a430:	2b00      	cmp	r3, #0
 801a432:	d00b      	beq.n	801a44c <tcp_output+0x1bc>
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d110      	bne.n	801a460 <tcp_output+0x1d0>
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a442:	891a      	ldrh	r2, [r3, #8]
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a448:	429a      	cmp	r2, r3
 801a44a:	d209      	bcs.n	801a460 <tcp_output+0x1d0>
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a452:	2b00      	cmp	r3, #0
 801a454:	d004      	beq.n	801a460 <tcp_output+0x1d0>
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a45c:	2b08      	cmp	r3, #8
 801a45e:	d901      	bls.n	801a464 <tcp_output+0x1d4>
 801a460:	2301      	movs	r3, #1
 801a462:	e000      	b.n	801a466 <tcp_output+0x1d6>
 801a464:	2300      	movs	r3, #0
 801a466:	2b00      	cmp	r3, #0
 801a468:	d106      	bne.n	801a478 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	8b5b      	ldrh	r3, [r3, #26]
 801a46e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a472:	2b00      	cmp	r3, #0
 801a474:	f000 80e7 	beq.w	801a646 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	7d1b      	ldrb	r3, [r3, #20]
 801a47c:	2b02      	cmp	r3, #2
 801a47e:	d00d      	beq.n	801a49c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a482:	691b      	ldr	r3, [r3, #16]
 801a484:	899b      	ldrh	r3, [r3, #12]
 801a486:	b29c      	uxth	r4, r3
 801a488:	2010      	movs	r0, #16
 801a48a:	f7f8 fc79 	bl	8012d80 <lwip_htons>
 801a48e:	4603      	mov	r3, r0
 801a490:	461a      	mov	r2, r3
 801a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a494:	691b      	ldr	r3, [r3, #16]
 801a496:	4322      	orrs	r2, r4
 801a498:	b292      	uxth	r2, r2
 801a49a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a49c:	697a      	ldr	r2, [r7, #20]
 801a49e:	6879      	ldr	r1, [r7, #4]
 801a4a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a4a2:	f000 f90b 	bl	801a6bc <tcp_output_segment>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d016      	beq.n	801a4e0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	8b5b      	ldrh	r3, [r3, #26]
 801a4b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a4ba:	b29a      	uxth	r2, r3
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	835a      	strh	r2, [r3, #26]
      return err;
 801a4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a4c4:	e0d6      	b.n	801a674 <tcp_output+0x3e4>
 801a4c6:	bf00      	nop
 801a4c8:	08024374 	.word	0x08024374
 801a4cc:	08024914 	.word	0x08024914
 801a4d0:	080243c8 	.word	0x080243c8
 801a4d4:	0802492c 	.word	0x0802492c
 801a4d8:	2002d4bc 	.word	0x2002d4bc
 801a4dc:	08024954 	.word	0x08024954
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4e8:	681a      	ldr	r2, [r3, #0]
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	7d1b      	ldrb	r3, [r3, #20]
 801a4f2:	2b02      	cmp	r3, #2
 801a4f4:	d006      	beq.n	801a504 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	8b5b      	ldrh	r3, [r3, #26]
 801a4fa:	f023 0303 	bic.w	r3, r3, #3
 801a4fe:	b29a      	uxth	r2, r3
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a506:	691b      	ldr	r3, [r3, #16]
 801a508:	685b      	ldr	r3, [r3, #4]
 801a50a:	4618      	mov	r0, r3
 801a50c:	f7f8 fc4e 	bl	8012dac <lwip_htonl>
 801a510:	4604      	mov	r4, r0
 801a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a514:	891b      	ldrh	r3, [r3, #8]
 801a516:	461d      	mov	r5, r3
 801a518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a51a:	691b      	ldr	r3, [r3, #16]
 801a51c:	899b      	ldrh	r3, [r3, #12]
 801a51e:	b29b      	uxth	r3, r3
 801a520:	4618      	mov	r0, r3
 801a522:	f7f8 fc2d 	bl	8012d80 <lwip_htons>
 801a526:	4603      	mov	r3, r0
 801a528:	b2db      	uxtb	r3, r3
 801a52a:	f003 0303 	and.w	r3, r3, #3
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d001      	beq.n	801a536 <tcp_output+0x2a6>
 801a532:	2301      	movs	r3, #1
 801a534:	e000      	b.n	801a538 <tcp_output+0x2a8>
 801a536:	2300      	movs	r3, #0
 801a538:	442b      	add	r3, r5
 801a53a:	4423      	add	r3, r4
 801a53c:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a542:	68bb      	ldr	r3, [r7, #8]
 801a544:	1ad3      	subs	r3, r2, r3
 801a546:	2b00      	cmp	r3, #0
 801a548:	da02      	bge.n	801a550 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	68ba      	ldr	r2, [r7, #8]
 801a54e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a552:	891b      	ldrh	r3, [r3, #8]
 801a554:	461c      	mov	r4, r3
 801a556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a558:	691b      	ldr	r3, [r3, #16]
 801a55a:	899b      	ldrh	r3, [r3, #12]
 801a55c:	b29b      	uxth	r3, r3
 801a55e:	4618      	mov	r0, r3
 801a560:	f7f8 fc0e 	bl	8012d80 <lwip_htons>
 801a564:	4603      	mov	r3, r0
 801a566:	b2db      	uxtb	r3, r3
 801a568:	f003 0303 	and.w	r3, r3, #3
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d001      	beq.n	801a574 <tcp_output+0x2e4>
 801a570:	2301      	movs	r3, #1
 801a572:	e000      	b.n	801a576 <tcp_output+0x2e6>
 801a574:	2300      	movs	r3, #0
 801a576:	4423      	add	r3, r4
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d049      	beq.n	801a610 <tcp_output+0x380>
      seg->next = NULL;
 801a57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a57e:	2200      	movs	r2, #0
 801a580:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a586:	2b00      	cmp	r3, #0
 801a588:	d105      	bne.n	801a596 <tcp_output+0x306>
        pcb->unacked = seg;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a58e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a592:	623b      	str	r3, [r7, #32]
 801a594:	e03f      	b.n	801a616 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a598:	691b      	ldr	r3, [r3, #16]
 801a59a:	685b      	ldr	r3, [r3, #4]
 801a59c:	4618      	mov	r0, r3
 801a59e:	f7f8 fc05 	bl	8012dac <lwip_htonl>
 801a5a2:	4604      	mov	r4, r0
 801a5a4:	6a3b      	ldr	r3, [r7, #32]
 801a5a6:	691b      	ldr	r3, [r3, #16]
 801a5a8:	685b      	ldr	r3, [r3, #4]
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	f7f8 fbfe 	bl	8012dac <lwip_htonl>
 801a5b0:	4603      	mov	r3, r0
 801a5b2:	1ae3      	subs	r3, r4, r3
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	da24      	bge.n	801a602 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	3370      	adds	r3, #112	@ 0x70
 801a5bc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a5be:	e002      	b.n	801a5c6 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a5c0:	69fb      	ldr	r3, [r7, #28]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a5c6:	69fb      	ldr	r3, [r7, #28]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d011      	beq.n	801a5f2 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a5ce:	69fb      	ldr	r3, [r7, #28]
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	691b      	ldr	r3, [r3, #16]
 801a5d4:	685b      	ldr	r3, [r3, #4]
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f7f8 fbe8 	bl	8012dac <lwip_htonl>
 801a5dc:	4604      	mov	r4, r0
 801a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5e0:	691b      	ldr	r3, [r3, #16]
 801a5e2:	685b      	ldr	r3, [r3, #4]
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f7f8 fbe1 	bl	8012dac <lwip_htonl>
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	dbe6      	blt.n	801a5c0 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801a5f2:	69fb      	ldr	r3, [r7, #28]
 801a5f4:	681a      	ldr	r2, [r3, #0]
 801a5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5f8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a5fa:	69fb      	ldr	r3, [r7, #28]
 801a5fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a5fe:	601a      	str	r2, [r3, #0]
 801a600:	e009      	b.n	801a616 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a602:	6a3b      	ldr	r3, [r7, #32]
 801a604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a606:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a608:	6a3b      	ldr	r3, [r7, #32]
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	623b      	str	r3, [r7, #32]
 801a60e:	e002      	b.n	801a616 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a610:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a612:	f7fb fdea 	bl	80161ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a61a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801a61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d012      	beq.n	801a648 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a624:	691b      	ldr	r3, [r3, #16]
 801a626:	685b      	ldr	r3, [r3, #4]
 801a628:	4618      	mov	r0, r3
 801a62a:	f7f8 fbbf 	bl	8012dac <lwip_htonl>
 801a62e:	4602      	mov	r2, r0
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a634:	1ad3      	subs	r3, r2, r3
 801a636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a638:	8912      	ldrh	r2, [r2, #8]
 801a63a:	4413      	add	r3, r2
  while (seg != NULL &&
 801a63c:	69ba      	ldr	r2, [r7, #24]
 801a63e:	429a      	cmp	r2, r3
 801a640:	f4bf aed6 	bcs.w	801a3f0 <tcp_output+0x160>
 801a644:	e000      	b.n	801a648 <tcp_output+0x3b8>
      break;
 801a646:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d108      	bne.n	801a662 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	2200      	movs	r2, #0
 801a654:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a658:	e004      	b.n	801a664 <tcp_output+0x3d4>
    goto output_done;
 801a65a:	bf00      	nop
 801a65c:	e002      	b.n	801a664 <tcp_output+0x3d4>
    goto output_done;
 801a65e:	bf00      	nop
 801a660:	e000      	b.n	801a664 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a662:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	8b5b      	ldrh	r3, [r3, #26]
 801a668:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a66c:	b29a      	uxth	r2, r3
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a672:	2300      	movs	r3, #0
}
 801a674:	4618      	mov	r0, r3
 801a676:	3728      	adds	r7, #40	@ 0x28
 801a678:	46bd      	mov	sp, r7
 801a67a:	bdb0      	pop	{r4, r5, r7, pc}

0801a67c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a67c:	b580      	push	{r7, lr}
 801a67e:	b082      	sub	sp, #8
 801a680:	af00      	add	r7, sp, #0
 801a682:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d106      	bne.n	801a698 <tcp_output_segment_busy+0x1c>
 801a68a:	4b09      	ldr	r3, [pc, #36]	@ (801a6b0 <tcp_output_segment_busy+0x34>)
 801a68c:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a690:	4908      	ldr	r1, [pc, #32]	@ (801a6b4 <tcp_output_segment_busy+0x38>)
 801a692:	4809      	ldr	r0, [pc, #36]	@ (801a6b8 <tcp_output_segment_busy+0x3c>)
 801a694:	f005 fffe 	bl	8020694 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	685b      	ldr	r3, [r3, #4]
 801a69c:	7b9b      	ldrb	r3, [r3, #14]
 801a69e:	2b01      	cmp	r3, #1
 801a6a0:	d001      	beq.n	801a6a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	e000      	b.n	801a6a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a6a6:	2300      	movs	r3, #0
}
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	3708      	adds	r7, #8
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	bd80      	pop	{r7, pc}
 801a6b0:	08024374 	.word	0x08024374
 801a6b4:	0802496c 	.word	0x0802496c
 801a6b8:	080243c8 	.word	0x080243c8

0801a6bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a6bc:	b5b0      	push	{r4, r5, r7, lr}
 801a6be:	b08c      	sub	sp, #48	@ 0x30
 801a6c0:	af04      	add	r7, sp, #16
 801a6c2:	60f8      	str	r0, [r7, #12]
 801a6c4:	60b9      	str	r1, [r7, #8]
 801a6c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d106      	bne.n	801a6dc <tcp_output_segment+0x20>
 801a6ce:	4b68      	ldr	r3, [pc, #416]	@ (801a870 <tcp_output_segment+0x1b4>)
 801a6d0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a6d4:	4967      	ldr	r1, [pc, #412]	@ (801a874 <tcp_output_segment+0x1b8>)
 801a6d6:	4868      	ldr	r0, [pc, #416]	@ (801a878 <tcp_output_segment+0x1bc>)
 801a6d8:	f005 ffdc 	bl	8020694 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a6dc:	68bb      	ldr	r3, [r7, #8]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d106      	bne.n	801a6f0 <tcp_output_segment+0x34>
 801a6e2:	4b63      	ldr	r3, [pc, #396]	@ (801a870 <tcp_output_segment+0x1b4>)
 801a6e4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a6e8:	4964      	ldr	r1, [pc, #400]	@ (801a87c <tcp_output_segment+0x1c0>)
 801a6ea:	4863      	ldr	r0, [pc, #396]	@ (801a878 <tcp_output_segment+0x1bc>)
 801a6ec:	f005 ffd2 	bl	8020694 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d106      	bne.n	801a704 <tcp_output_segment+0x48>
 801a6f6:	4b5e      	ldr	r3, [pc, #376]	@ (801a870 <tcp_output_segment+0x1b4>)
 801a6f8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a6fc:	4960      	ldr	r1, [pc, #384]	@ (801a880 <tcp_output_segment+0x1c4>)
 801a6fe:	485e      	ldr	r0, [pc, #376]	@ (801a878 <tcp_output_segment+0x1bc>)
 801a700:	f005 ffc8 	bl	8020694 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a704:	68f8      	ldr	r0, [r7, #12]
 801a706:	f7ff ffb9 	bl	801a67c <tcp_output_segment_busy>
 801a70a:	4603      	mov	r3, r0
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d001      	beq.n	801a714 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a710:	2300      	movs	r3, #0
 801a712:	e0a9      	b.n	801a868 <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	691c      	ldr	r4, [r3, #16]
 801a71c:	4610      	mov	r0, r2
 801a71e:	f7f8 fb45 	bl	8012dac <lwip_htonl>
 801a722:	4603      	mov	r3, r0
 801a724:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a726:	68bb      	ldr	r3, [r7, #8]
 801a728:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	691c      	ldr	r4, [r3, #16]
 801a72e:	4610      	mov	r0, r2
 801a730:	f7f8 fb26 	bl	8012d80 <lwip_htons>
 801a734:	4603      	mov	r3, r0
 801a736:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a738:	68bb      	ldr	r3, [r7, #8]
 801a73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a73c:	68ba      	ldr	r2, [r7, #8]
 801a73e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a740:	441a      	add	r2, r3
 801a742:	68bb      	ldr	r3, [r7, #8]
 801a744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	691b      	ldr	r3, [r3, #16]
 801a74a:	3314      	adds	r3, #20
 801a74c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	7b1b      	ldrb	r3, [r3, #12]
 801a752:	f003 0301 	and.w	r3, r3, #1
 801a756:	2b00      	cmp	r3, #0
 801a758:	d015      	beq.n	801a786 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a75a:	68bb      	ldr	r3, [r7, #8]
 801a75c:	3304      	adds	r3, #4
 801a75e:	461a      	mov	r2, r3
 801a760:	6879      	ldr	r1, [r7, #4]
 801a762:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801a766:	f7fc f92f 	bl	80169c8 <tcp_eff_send_mss_netif>
 801a76a:	4603      	mov	r3, r0
 801a76c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a76e:	8b7b      	ldrh	r3, [r7, #26]
 801a770:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801a774:	4618      	mov	r0, r3
 801a776:	f7f8 fb19 	bl	8012dac <lwip_htonl>
 801a77a:	4602      	mov	r2, r0
 801a77c:	69fb      	ldr	r3, [r7, #28]
 801a77e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a780:	69fb      	ldr	r3, [r7, #28]
 801a782:	3304      	adds	r3, #4
 801a784:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	da02      	bge.n	801a796 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	2200      	movs	r2, #0
 801a794:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d10c      	bne.n	801a7b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a79e:	4b39      	ldr	r3, [pc, #228]	@ (801a884 <tcp_output_segment+0x1c8>)
 801a7a0:	681a      	ldr	r2, [r3, #0]
 801a7a2:	68bb      	ldr	r3, [r7, #8]
 801a7a4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	691b      	ldr	r3, [r3, #16]
 801a7aa:	685b      	ldr	r3, [r3, #4]
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	f7f8 fafd 	bl	8012dac <lwip_htonl>
 801a7b2:	4602      	mov	r2, r0
 801a7b4:	68bb      	ldr	r3, [r7, #8]
 801a7b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	691a      	ldr	r2, [r3, #16]
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	685b      	ldr	r3, [r3, #4]
 801a7c0:	685b      	ldr	r3, [r3, #4]
 801a7c2:	1ad3      	subs	r3, r2, r3
 801a7c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	685b      	ldr	r3, [r3, #4]
 801a7ca:	8959      	ldrh	r1, [r3, #10]
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	685b      	ldr	r3, [r3, #4]
 801a7d0:	8b3a      	ldrh	r2, [r7, #24]
 801a7d2:	1a8a      	subs	r2, r1, r2
 801a7d4:	b292      	uxth	r2, r2
 801a7d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	685b      	ldr	r3, [r3, #4]
 801a7dc:	8919      	ldrh	r1, [r3, #8]
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	685b      	ldr	r3, [r3, #4]
 801a7e2:	8b3a      	ldrh	r2, [r7, #24]
 801a7e4:	1a8a      	subs	r2, r1, r2
 801a7e6:	b292      	uxth	r2, r2
 801a7e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	685b      	ldr	r3, [r3, #4]
 801a7ee:	68fa      	ldr	r2, [r7, #12]
 801a7f0:	6912      	ldr	r2, [r2, #16]
 801a7f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	691b      	ldr	r3, [r3, #16]
 801a7f8:	2200      	movs	r2, #0
 801a7fa:	741a      	strb	r2, [r3, #16]
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	691a      	ldr	r2, [r3, #16]
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	7b1b      	ldrb	r3, [r3, #12]
 801a808:	f003 0301 	and.w	r3, r3, #1
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d001      	beq.n	801a814 <tcp_output_segment+0x158>
 801a810:	2318      	movs	r3, #24
 801a812:	e000      	b.n	801a816 <tcp_output_segment+0x15a>
 801a814:	2314      	movs	r3, #20
 801a816:	4413      	add	r3, r2
 801a818:	69fa      	ldr	r2, [r7, #28]
 801a81a:	429a      	cmp	r2, r3
 801a81c:	d006      	beq.n	801a82c <tcp_output_segment+0x170>
 801a81e:	4b14      	ldr	r3, [pc, #80]	@ (801a870 <tcp_output_segment+0x1b4>)
 801a820:	f240 621c 	movw	r2, #1564	@ 0x61c
 801a824:	4918      	ldr	r1, [pc, #96]	@ (801a888 <tcp_output_segment+0x1cc>)
 801a826:	4814      	ldr	r0, [pc, #80]	@ (801a878 <tcp_output_segment+0x1bc>)
 801a828:	f005 ff34 	bl	8020694 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801a82c:	4b17      	ldr	r3, [pc, #92]	@ (801a88c <tcp_output_segment+0x1d0>)
 801a82e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801a832:	3301      	adds	r3, #1
 801a834:	b29a      	uxth	r2, r3
 801a836:	4b15      	ldr	r3, [pc, #84]	@ (801a88c <tcp_output_segment+0x1d0>)
 801a838:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	6858      	ldr	r0, [r3, #4]
 801a840:	68b9      	ldr	r1, [r7, #8]
 801a842:	68bb      	ldr	r3, [r7, #8]
 801a844:	1d1c      	adds	r4, r3, #4
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	7add      	ldrb	r5, [r3, #11]
 801a84a:	68bb      	ldr	r3, [r7, #8]
 801a84c:	7a9b      	ldrb	r3, [r3, #10]
 801a84e:	687a      	ldr	r2, [r7, #4]
 801a850:	9202      	str	r2, [sp, #8]
 801a852:	2206      	movs	r2, #6
 801a854:	9201      	str	r2, [sp, #4]
 801a856:	9300      	str	r3, [sp, #0]
 801a858:	462b      	mov	r3, r5
 801a85a:	4622      	mov	r2, r4
 801a85c:	f003 f95e 	bl	801db1c <ip4_output_if>
 801a860:	4603      	mov	r3, r0
 801a862:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a864:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a868:	4618      	mov	r0, r3
 801a86a:	3720      	adds	r7, #32
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bdb0      	pop	{r4, r5, r7, pc}
 801a870:	08024374 	.word	0x08024374
 801a874:	08024994 	.word	0x08024994
 801a878:	080243c8 	.word	0x080243c8
 801a87c:	080249b4 	.word	0x080249b4
 801a880:	080249d4 	.word	0x080249d4
 801a884:	2002d46c 	.word	0x2002d46c
 801a888:	080249f8 	.word	0x080249f8
 801a88c:	2002d36c 	.word	0x2002d36c

0801a890 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a890:	b5b0      	push	{r4, r5, r7, lr}
 801a892:	b084      	sub	sp, #16
 801a894:	af00      	add	r7, sp, #0
 801a896:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d106      	bne.n	801a8ac <tcp_rexmit_rto_prepare+0x1c>
 801a89e:	4b36      	ldr	r3, [pc, #216]	@ (801a978 <tcp_rexmit_rto_prepare+0xe8>)
 801a8a0:	f240 6263 	movw	r2, #1635	@ 0x663
 801a8a4:	4935      	ldr	r1, [pc, #212]	@ (801a97c <tcp_rexmit_rto_prepare+0xec>)
 801a8a6:	4836      	ldr	r0, [pc, #216]	@ (801a980 <tcp_rexmit_rto_prepare+0xf0>)
 801a8a8:	f005 fef4 	bl	8020694 <iprintf>

  if (pcb->unacked == NULL) {
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a8b0:	2b00      	cmp	r3, #0
 801a8b2:	d102      	bne.n	801a8ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a8b4:	f06f 0305 	mvn.w	r3, #5
 801a8b8:	e059      	b.n	801a96e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a8be:	60fb      	str	r3, [r7, #12]
 801a8c0:	e00b      	b.n	801a8da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a8c2:	68f8      	ldr	r0, [r7, #12]
 801a8c4:	f7ff feda 	bl	801a67c <tcp_output_segment_busy>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d002      	beq.n	801a8d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a8ce:	f06f 0305 	mvn.w	r3, #5
 801a8d2:	e04c      	b.n	801a96e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	60fb      	str	r3, [r7, #12]
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d1ef      	bne.n	801a8c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a8e2:	68f8      	ldr	r0, [r7, #12]
 801a8e4:	f7ff feca 	bl	801a67c <tcp_output_segment_busy>
 801a8e8:	4603      	mov	r3, r0
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d002      	beq.n	801a8f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a8ee:	f06f 0305 	mvn.w	r3, #5
 801a8f2:	e03c      	b.n	801a96e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a900:	2b00      	cmp	r3, #0
 801a902:	d104      	bne.n	801a90e <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	895a      	ldrh	r2, [r3, #10]
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	2200      	movs	r2, #0
 801a91a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	8b5b      	ldrh	r3, [r3, #26]
 801a920:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801a924:	b29a      	uxth	r2, r3
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	691b      	ldr	r3, [r3, #16]
 801a92e:	685b      	ldr	r3, [r3, #4]
 801a930:	4618      	mov	r0, r3
 801a932:	f7f8 fa3b 	bl	8012dac <lwip_htonl>
 801a936:	4604      	mov	r4, r0
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	891b      	ldrh	r3, [r3, #8]
 801a93c:	461d      	mov	r5, r3
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	691b      	ldr	r3, [r3, #16]
 801a942:	899b      	ldrh	r3, [r3, #12]
 801a944:	b29b      	uxth	r3, r3
 801a946:	4618      	mov	r0, r3
 801a948:	f7f8 fa1a 	bl	8012d80 <lwip_htons>
 801a94c:	4603      	mov	r3, r0
 801a94e:	b2db      	uxtb	r3, r3
 801a950:	f003 0303 	and.w	r3, r3, #3
 801a954:	2b00      	cmp	r3, #0
 801a956:	d001      	beq.n	801a95c <tcp_rexmit_rto_prepare+0xcc>
 801a958:	2301      	movs	r3, #1
 801a95a:	e000      	b.n	801a95e <tcp_rexmit_rto_prepare+0xce>
 801a95c:	2300      	movs	r3, #0
 801a95e:	442b      	add	r3, r5
 801a960:	18e2      	adds	r2, r4, r3
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	2200      	movs	r2, #0
 801a96a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801a96c:	2300      	movs	r3, #0
}
 801a96e:	4618      	mov	r0, r3
 801a970:	3710      	adds	r7, #16
 801a972:	46bd      	mov	sp, r7
 801a974:	bdb0      	pop	{r4, r5, r7, pc}
 801a976:	bf00      	nop
 801a978:	08024374 	.word	0x08024374
 801a97c:	08024a0c 	.word	0x08024a0c
 801a980:	080243c8 	.word	0x080243c8

0801a984 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b082      	sub	sp, #8
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d106      	bne.n	801a9a0 <tcp_rexmit_rto_commit+0x1c>
 801a992:	4b0d      	ldr	r3, [pc, #52]	@ (801a9c8 <tcp_rexmit_rto_commit+0x44>)
 801a994:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801a998:	490c      	ldr	r1, [pc, #48]	@ (801a9cc <tcp_rexmit_rto_commit+0x48>)
 801a99a:	480d      	ldr	r0, [pc, #52]	@ (801a9d0 <tcp_rexmit_rto_commit+0x4c>)
 801a99c:	f005 fe7a 	bl	8020694 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a9a6:	2bff      	cmp	r3, #255	@ 0xff
 801a9a8:	d007      	beq.n	801a9ba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a9b0:	3301      	adds	r3, #1
 801a9b2:	b2da      	uxtb	r2, r3
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a9ba:	6878      	ldr	r0, [r7, #4]
 801a9bc:	f7ff fc68 	bl	801a290 <tcp_output>
}
 801a9c0:	bf00      	nop
 801a9c2:	3708      	adds	r7, #8
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bd80      	pop	{r7, pc}
 801a9c8:	08024374 	.word	0x08024374
 801a9cc:	08024a30 	.word	0x08024a30
 801a9d0:	080243c8 	.word	0x080243c8

0801a9d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b082      	sub	sp, #8
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d106      	bne.n	801a9f0 <tcp_rexmit_rto+0x1c>
 801a9e2:	4b0a      	ldr	r3, [pc, #40]	@ (801aa0c <tcp_rexmit_rto+0x38>)
 801a9e4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801a9e8:	4909      	ldr	r1, [pc, #36]	@ (801aa10 <tcp_rexmit_rto+0x3c>)
 801a9ea:	480a      	ldr	r0, [pc, #40]	@ (801aa14 <tcp_rexmit_rto+0x40>)
 801a9ec:	f005 fe52 	bl	8020694 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a9f0:	6878      	ldr	r0, [r7, #4]
 801a9f2:	f7ff ff4d 	bl	801a890 <tcp_rexmit_rto_prepare>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d102      	bne.n	801aa02 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a9fc:	6878      	ldr	r0, [r7, #4]
 801a9fe:	f7ff ffc1 	bl	801a984 <tcp_rexmit_rto_commit>
  }
}
 801aa02:	bf00      	nop
 801aa04:	3708      	adds	r7, #8
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}
 801aa0a:	bf00      	nop
 801aa0c:	08024374 	.word	0x08024374
 801aa10:	08024a54 	.word	0x08024a54
 801aa14:	080243c8 	.word	0x080243c8

0801aa18 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801aa18:	b590      	push	{r4, r7, lr}
 801aa1a:	b085      	sub	sp, #20
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d106      	bne.n	801aa34 <tcp_rexmit+0x1c>
 801aa26:	4b2f      	ldr	r3, [pc, #188]	@ (801aae4 <tcp_rexmit+0xcc>)
 801aa28:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801aa2c:	492e      	ldr	r1, [pc, #184]	@ (801aae8 <tcp_rexmit+0xd0>)
 801aa2e:	482f      	ldr	r0, [pc, #188]	@ (801aaec <tcp_rexmit+0xd4>)
 801aa30:	f005 fe30 	bl	8020694 <iprintf>

  if (pcb->unacked == NULL) {
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d102      	bne.n	801aa42 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801aa3c:	f06f 0305 	mvn.w	r3, #5
 801aa40:	e04c      	b.n	801aadc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aa46:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801aa48:	68b8      	ldr	r0, [r7, #8]
 801aa4a:	f7ff fe17 	bl	801a67c <tcp_output_segment_busy>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d002      	beq.n	801aa5a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801aa54:	f06f 0305 	mvn.w	r3, #5
 801aa58:	e040      	b.n	801aadc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801aa5a:	68bb      	ldr	r3, [r7, #8]
 801aa5c:	681a      	ldr	r2, [r3, #0]
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	336c      	adds	r3, #108	@ 0x6c
 801aa66:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801aa68:	e002      	b.n	801aa70 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d011      	beq.n	801aa9c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	691b      	ldr	r3, [r3, #16]
 801aa7e:	685b      	ldr	r3, [r3, #4]
 801aa80:	4618      	mov	r0, r3
 801aa82:	f7f8 f993 	bl	8012dac <lwip_htonl>
 801aa86:	4604      	mov	r4, r0
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	691b      	ldr	r3, [r3, #16]
 801aa8c:	685b      	ldr	r3, [r3, #4]
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7f8 f98c 	bl	8012dac <lwip_htonl>
 801aa94:	4603      	mov	r3, r0
 801aa96:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	dbe6      	blt.n	801aa6a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	681a      	ldr	r2, [r3, #0]
 801aaa0:	68bb      	ldr	r3, [r7, #8]
 801aaa2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	68ba      	ldr	r2, [r7, #8]
 801aaa8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d103      	bne.n	801aaba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	2200      	movs	r2, #0
 801aab6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801aac0:	2bff      	cmp	r3, #255	@ 0xff
 801aac2:	d007      	beq.n	801aad4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801aaca:	3301      	adds	r3, #1
 801aacc:	b2da      	uxtb	r2, r3
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	2200      	movs	r2, #0
 801aad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801aada:	2300      	movs	r3, #0
}
 801aadc:	4618      	mov	r0, r3
 801aade:	3714      	adds	r7, #20
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd90      	pop	{r4, r7, pc}
 801aae4:	08024374 	.word	0x08024374
 801aae8:	08024a70 	.word	0x08024a70
 801aaec:	080243c8 	.word	0x080243c8

0801aaf0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b082      	sub	sp, #8
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d106      	bne.n	801ab0c <tcp_rexmit_fast+0x1c>
 801aafe:	4b2a      	ldr	r3, [pc, #168]	@ (801aba8 <tcp_rexmit_fast+0xb8>)
 801ab00:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801ab04:	4929      	ldr	r1, [pc, #164]	@ (801abac <tcp_rexmit_fast+0xbc>)
 801ab06:	482a      	ldr	r0, [pc, #168]	@ (801abb0 <tcp_rexmit_fast+0xc0>)
 801ab08:	f005 fdc4 	bl	8020694 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d045      	beq.n	801aba0 <tcp_rexmit_fast+0xb0>
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	8b5b      	ldrh	r3, [r3, #26]
 801ab18:	f003 0304 	and.w	r3, r3, #4
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d13f      	bne.n	801aba0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ab20:	6878      	ldr	r0, [r7, #4]
 801ab22:	f7ff ff79 	bl	801aa18 <tcp_rexmit>
 801ab26:	4603      	mov	r3, r0
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d139      	bne.n	801aba0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ab38:	4293      	cmp	r3, r2
 801ab3a:	bf28      	it	cs
 801ab3c:	4613      	movcs	r3, r2
 801ab3e:	b29b      	uxth	r3, r3
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	da00      	bge.n	801ab46 <tcp_rexmit_fast+0x56>
 801ab44:	3301      	adds	r3, #1
 801ab46:	105b      	asrs	r3, r3, #1
 801ab48:	b29a      	uxth	r2, r3
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801ab56:	461a      	mov	r2, r3
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ab5c:	005b      	lsls	r3, r3, #1
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d206      	bcs.n	801ab70 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ab66:	005b      	lsls	r3, r3, #1
 801ab68:	b29a      	uxth	r2, r3
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ab7a:	4619      	mov	r1, r3
 801ab7c:	0049      	lsls	r1, r1, #1
 801ab7e:	440b      	add	r3, r1
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	4413      	add	r3, r2
 801ab84:	b29a      	uxth	r2, r3
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	8b5b      	ldrh	r3, [r3, #26]
 801ab90:	f043 0304 	orr.w	r3, r3, #4
 801ab94:	b29a      	uxth	r2, r3
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	2200      	movs	r2, #0
 801ab9e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801aba0:	bf00      	nop
 801aba2:	3708      	adds	r7, #8
 801aba4:	46bd      	mov	sp, r7
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	08024374 	.word	0x08024374
 801abac:	08024a88 	.word	0x08024a88
 801abb0:	080243c8 	.word	0x080243c8

0801abb4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b086      	sub	sp, #24
 801abb8:	af00      	add	r7, sp, #0
 801abba:	60f8      	str	r0, [r7, #12]
 801abbc:	607b      	str	r3, [r7, #4]
 801abbe:	460b      	mov	r3, r1
 801abc0:	817b      	strh	r3, [r7, #10]
 801abc2:	4613      	mov	r3, r2
 801abc4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801abc6:	897a      	ldrh	r2, [r7, #10]
 801abc8:	893b      	ldrh	r3, [r7, #8]
 801abca:	4413      	add	r3, r2
 801abcc:	b29b      	uxth	r3, r3
 801abce:	3314      	adds	r3, #20
 801abd0:	b29b      	uxth	r3, r3
 801abd2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801abd6:	4619      	mov	r1, r3
 801abd8:	2022      	movs	r0, #34	@ 0x22
 801abda:	f7f9 fbd3 	bl	8014384 <pbuf_alloc>
 801abde:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d04d      	beq.n	801ac82 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801abe6:	897b      	ldrh	r3, [r7, #10]
 801abe8:	3313      	adds	r3, #19
 801abea:	697a      	ldr	r2, [r7, #20]
 801abec:	8952      	ldrh	r2, [r2, #10]
 801abee:	4293      	cmp	r3, r2
 801abf0:	db06      	blt.n	801ac00 <tcp_output_alloc_header_common+0x4c>
 801abf2:	4b26      	ldr	r3, [pc, #152]	@ (801ac8c <tcp_output_alloc_header_common+0xd8>)
 801abf4:	f240 7223 	movw	r2, #1827	@ 0x723
 801abf8:	4925      	ldr	r1, [pc, #148]	@ (801ac90 <tcp_output_alloc_header_common+0xdc>)
 801abfa:	4826      	ldr	r0, [pc, #152]	@ (801ac94 <tcp_output_alloc_header_common+0xe0>)
 801abfc:	f005 fd4a 	bl	8020694 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ac00:	697b      	ldr	r3, [r7, #20]
 801ac02:	685b      	ldr	r3, [r3, #4]
 801ac04:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ac06:	8c3b      	ldrh	r3, [r7, #32]
 801ac08:	4618      	mov	r0, r3
 801ac0a:	f7f8 f8b9 	bl	8012d80 <lwip_htons>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	461a      	mov	r2, r3
 801ac12:	693b      	ldr	r3, [r7, #16]
 801ac14:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ac16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac18:	4618      	mov	r0, r3
 801ac1a:	f7f8 f8b1 	bl	8012d80 <lwip_htons>
 801ac1e:	4603      	mov	r3, r0
 801ac20:	461a      	mov	r2, r3
 801ac22:	693b      	ldr	r3, [r7, #16]
 801ac24:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ac26:	693b      	ldr	r3, [r7, #16]
 801ac28:	687a      	ldr	r2, [r7, #4]
 801ac2a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ac2c:	68f8      	ldr	r0, [r7, #12]
 801ac2e:	f7f8 f8bd 	bl	8012dac <lwip_htonl>
 801ac32:	4602      	mov	r2, r0
 801ac34:	693b      	ldr	r3, [r7, #16]
 801ac36:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ac38:	897b      	ldrh	r3, [r7, #10]
 801ac3a:	089b      	lsrs	r3, r3, #2
 801ac3c:	b29b      	uxth	r3, r3
 801ac3e:	3305      	adds	r3, #5
 801ac40:	b29b      	uxth	r3, r3
 801ac42:	031b      	lsls	r3, r3, #12
 801ac44:	b29a      	uxth	r2, r3
 801ac46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	4313      	orrs	r3, r2
 801ac4e:	b29b      	uxth	r3, r3
 801ac50:	4618      	mov	r0, r3
 801ac52:	f7f8 f895 	bl	8012d80 <lwip_htons>
 801ac56:	4603      	mov	r3, r0
 801ac58:	461a      	mov	r2, r3
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ac5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ac60:	4618      	mov	r0, r3
 801ac62:	f7f8 f88d 	bl	8012d80 <lwip_htons>
 801ac66:	4603      	mov	r3, r0
 801ac68:	461a      	mov	r2, r3
 801ac6a:	693b      	ldr	r3, [r7, #16]
 801ac6c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ac6e:	693b      	ldr	r3, [r7, #16]
 801ac70:	2200      	movs	r2, #0
 801ac72:	741a      	strb	r2, [r3, #16]
 801ac74:	2200      	movs	r2, #0
 801ac76:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ac78:	693b      	ldr	r3, [r7, #16]
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	749a      	strb	r2, [r3, #18]
 801ac7e:	2200      	movs	r2, #0
 801ac80:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ac82:	697b      	ldr	r3, [r7, #20]
}
 801ac84:	4618      	mov	r0, r3
 801ac86:	3718      	adds	r7, #24
 801ac88:	46bd      	mov	sp, r7
 801ac8a:	bd80      	pop	{r7, pc}
 801ac8c:	08024374 	.word	0x08024374
 801ac90:	08024aa8 	.word	0x08024aa8
 801ac94:	080243c8 	.word	0x080243c8

0801ac98 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ac98:	b5b0      	push	{r4, r5, r7, lr}
 801ac9a:	b08a      	sub	sp, #40	@ 0x28
 801ac9c:	af04      	add	r7, sp, #16
 801ac9e:	60f8      	str	r0, [r7, #12]
 801aca0:	607b      	str	r3, [r7, #4]
 801aca2:	460b      	mov	r3, r1
 801aca4:	817b      	strh	r3, [r7, #10]
 801aca6:	4613      	mov	r3, r2
 801aca8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d106      	bne.n	801acbe <tcp_output_alloc_header+0x26>
 801acb0:	4b15      	ldr	r3, [pc, #84]	@ (801ad08 <tcp_output_alloc_header+0x70>)
 801acb2:	f240 7242 	movw	r2, #1858	@ 0x742
 801acb6:	4915      	ldr	r1, [pc, #84]	@ (801ad0c <tcp_output_alloc_header+0x74>)
 801acb8:	4815      	ldr	r0, [pc, #84]	@ (801ad10 <tcp_output_alloc_header+0x78>)
 801acba:	f005 fceb 	bl	8020694 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	8adb      	ldrh	r3, [r3, #22]
 801acc6:	68fa      	ldr	r2, [r7, #12]
 801acc8:	8b12      	ldrh	r2, [r2, #24]
 801acca:	68f9      	ldr	r1, [r7, #12]
 801accc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801acce:	893d      	ldrh	r5, [r7, #8]
 801acd0:	897c      	ldrh	r4, [r7, #10]
 801acd2:	9103      	str	r1, [sp, #12]
 801acd4:	2110      	movs	r1, #16
 801acd6:	9102      	str	r1, [sp, #8]
 801acd8:	9201      	str	r2, [sp, #4]
 801acda:	9300      	str	r3, [sp, #0]
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	462a      	mov	r2, r5
 801ace0:	4621      	mov	r1, r4
 801ace2:	f7ff ff67 	bl	801abb4 <tcp_output_alloc_header_common>
 801ace6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ace8:	697b      	ldr	r3, [r7, #20]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d006      	beq.n	801acfc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801acf2:	68fa      	ldr	r2, [r7, #12]
 801acf4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801acf6:	441a      	add	r2, r3
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801acfc:	697b      	ldr	r3, [r7, #20]
}
 801acfe:	4618      	mov	r0, r3
 801ad00:	3718      	adds	r7, #24
 801ad02:	46bd      	mov	sp, r7
 801ad04:	bdb0      	pop	{r4, r5, r7, pc}
 801ad06:	bf00      	nop
 801ad08:	08024374 	.word	0x08024374
 801ad0c:	08024ad8 	.word	0x08024ad8
 801ad10:	080243c8 	.word	0x080243c8

0801ad14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ad14:	b580      	push	{r7, lr}
 801ad16:	b088      	sub	sp, #32
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	60f8      	str	r0, [r7, #12]
 801ad1c:	60b9      	str	r1, [r7, #8]
 801ad1e:	4611      	mov	r1, r2
 801ad20:	461a      	mov	r2, r3
 801ad22:	460b      	mov	r3, r1
 801ad24:	71fb      	strb	r3, [r7, #7]
 801ad26:	4613      	mov	r3, r2
 801ad28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ad2a:	2300      	movs	r3, #0
 801ad2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d106      	bne.n	801ad42 <tcp_output_fill_options+0x2e>
 801ad34:	4b12      	ldr	r3, [pc, #72]	@ (801ad80 <tcp_output_fill_options+0x6c>)
 801ad36:	f240 7256 	movw	r2, #1878	@ 0x756
 801ad3a:	4912      	ldr	r1, [pc, #72]	@ (801ad84 <tcp_output_fill_options+0x70>)
 801ad3c:	4812      	ldr	r0, [pc, #72]	@ (801ad88 <tcp_output_fill_options+0x74>)
 801ad3e:	f005 fca9 	bl	8020694 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ad42:	68bb      	ldr	r3, [r7, #8]
 801ad44:	685b      	ldr	r3, [r3, #4]
 801ad46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ad48:	69bb      	ldr	r3, [r7, #24]
 801ad4a:	3314      	adds	r3, #20
 801ad4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801ad4e:	8bfb      	ldrh	r3, [r7, #30]
 801ad50:	009b      	lsls	r3, r3, #2
 801ad52:	461a      	mov	r2, r3
 801ad54:	79fb      	ldrb	r3, [r7, #7]
 801ad56:	009b      	lsls	r3, r3, #2
 801ad58:	f003 0304 	and.w	r3, r3, #4
 801ad5c:	4413      	add	r3, r2
 801ad5e:	3314      	adds	r3, #20
 801ad60:	69ba      	ldr	r2, [r7, #24]
 801ad62:	4413      	add	r3, r2
 801ad64:	697a      	ldr	r2, [r7, #20]
 801ad66:	429a      	cmp	r2, r3
 801ad68:	d006      	beq.n	801ad78 <tcp_output_fill_options+0x64>
 801ad6a:	4b05      	ldr	r3, [pc, #20]	@ (801ad80 <tcp_output_fill_options+0x6c>)
 801ad6c:	f240 7275 	movw	r2, #1909	@ 0x775
 801ad70:	4906      	ldr	r1, [pc, #24]	@ (801ad8c <tcp_output_fill_options+0x78>)
 801ad72:	4805      	ldr	r0, [pc, #20]	@ (801ad88 <tcp_output_fill_options+0x74>)
 801ad74:	f005 fc8e 	bl	8020694 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ad78:	bf00      	nop
 801ad7a:	3720      	adds	r7, #32
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	bd80      	pop	{r7, pc}
 801ad80:	08024374 	.word	0x08024374
 801ad84:	08024b00 	.word	0x08024b00
 801ad88:	080243c8 	.word	0x080243c8
 801ad8c:	080249f8 	.word	0x080249f8

0801ad90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b08a      	sub	sp, #40	@ 0x28
 801ad94:	af04      	add	r7, sp, #16
 801ad96:	60f8      	str	r0, [r7, #12]
 801ad98:	60b9      	str	r1, [r7, #8]
 801ad9a:	607a      	str	r2, [r7, #4]
 801ad9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ad9e:	68bb      	ldr	r3, [r7, #8]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d106      	bne.n	801adb2 <tcp_output_control_segment+0x22>
 801ada4:	4b20      	ldr	r3, [pc, #128]	@ (801ae28 <tcp_output_control_segment+0x98>)
 801ada6:	f240 7287 	movw	r2, #1927	@ 0x787
 801adaa:	4920      	ldr	r1, [pc, #128]	@ (801ae2c <tcp_output_control_segment+0x9c>)
 801adac:	4820      	ldr	r0, [pc, #128]	@ (801ae30 <tcp_output_control_segment+0xa0>)
 801adae:	f005 fc71 	bl	8020694 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801adb2:	683a      	ldr	r2, [r7, #0]
 801adb4:	6879      	ldr	r1, [r7, #4]
 801adb6:	68f8      	ldr	r0, [r7, #12]
 801adb8:	f7fe fa38 	bl	801922c <tcp_route>
 801adbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801adbe:	693b      	ldr	r3, [r7, #16]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d102      	bne.n	801adca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801adc4:	23fc      	movs	r3, #252	@ 0xfc
 801adc6:	75fb      	strb	r3, [r7, #23]
 801adc8:	e024      	b.n	801ae14 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d006      	beq.n	801adde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	7adb      	ldrb	r3, [r3, #11]
 801add4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	7a9b      	ldrb	r3, [r3, #10]
 801adda:	757b      	strb	r3, [r7, #21]
 801addc:	e003      	b.n	801ade6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801adde:	23ff      	movs	r3, #255	@ 0xff
 801ade0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ade2:	2300      	movs	r3, #0
 801ade4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801ade6:	4b13      	ldr	r3, [pc, #76]	@ (801ae34 <tcp_output_control_segment+0xa4>)
 801ade8:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801adec:	3301      	adds	r3, #1
 801adee:	b29a      	uxth	r2, r3
 801adf0:	4b10      	ldr	r3, [pc, #64]	@ (801ae34 <tcp_output_control_segment+0xa4>)
 801adf2:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801adf6:	7dba      	ldrb	r2, [r7, #22]
 801adf8:	693b      	ldr	r3, [r7, #16]
 801adfa:	9302      	str	r3, [sp, #8]
 801adfc:	2306      	movs	r3, #6
 801adfe:	9301      	str	r3, [sp, #4]
 801ae00:	7d7b      	ldrb	r3, [r7, #21]
 801ae02:	9300      	str	r3, [sp, #0]
 801ae04:	4613      	mov	r3, r2
 801ae06:	683a      	ldr	r2, [r7, #0]
 801ae08:	6879      	ldr	r1, [r7, #4]
 801ae0a:	68b8      	ldr	r0, [r7, #8]
 801ae0c:	f002 fe86 	bl	801db1c <ip4_output_if>
 801ae10:	4603      	mov	r3, r0
 801ae12:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ae14:	68b8      	ldr	r0, [r7, #8]
 801ae16:	f7f9 fde1 	bl	80149dc <pbuf_free>
  return err;
 801ae1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ae1e:	4618      	mov	r0, r3
 801ae20:	3718      	adds	r7, #24
 801ae22:	46bd      	mov	sp, r7
 801ae24:	bd80      	pop	{r7, pc}
 801ae26:	bf00      	nop
 801ae28:	08024374 	.word	0x08024374
 801ae2c:	08024b28 	.word	0x08024b28
 801ae30:	080243c8 	.word	0x080243c8
 801ae34:	2002d36c 	.word	0x2002d36c

0801ae38 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ae38:	b590      	push	{r4, r7, lr}
 801ae3a:	b08b      	sub	sp, #44	@ 0x2c
 801ae3c:	af04      	add	r7, sp, #16
 801ae3e:	60f8      	str	r0, [r7, #12]
 801ae40:	60b9      	str	r1, [r7, #8]
 801ae42:	607a      	str	r2, [r7, #4]
 801ae44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ae46:	683b      	ldr	r3, [r7, #0]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d106      	bne.n	801ae5a <tcp_rst+0x22>
 801ae4c:	4b1f      	ldr	r3, [pc, #124]	@ (801aecc <tcp_rst+0x94>)
 801ae4e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801ae52:	491f      	ldr	r1, [pc, #124]	@ (801aed0 <tcp_rst+0x98>)
 801ae54:	481f      	ldr	r0, [pc, #124]	@ (801aed4 <tcp_rst+0x9c>)
 801ae56:	f005 fc1d 	bl	8020694 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ae5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d106      	bne.n	801ae6e <tcp_rst+0x36>
 801ae60:	4b1a      	ldr	r3, [pc, #104]	@ (801aecc <tcp_rst+0x94>)
 801ae62:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801ae66:	491c      	ldr	r1, [pc, #112]	@ (801aed8 <tcp_rst+0xa0>)
 801ae68:	481a      	ldr	r0, [pc, #104]	@ (801aed4 <tcp_rst+0x9c>)
 801ae6a:	f005 fc13 	bl	8020694 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ae6e:	2300      	movs	r3, #0
 801ae70:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ae72:	f246 0308 	movw	r3, #24584	@ 0x6008
 801ae76:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ae78:	7dfb      	ldrb	r3, [r7, #23]
 801ae7a:	b29c      	uxth	r4, r3
 801ae7c:	68b8      	ldr	r0, [r7, #8]
 801ae7e:	f7f7 ff95 	bl	8012dac <lwip_htonl>
 801ae82:	4602      	mov	r2, r0
 801ae84:	8abb      	ldrh	r3, [r7, #20]
 801ae86:	9303      	str	r3, [sp, #12]
 801ae88:	2314      	movs	r3, #20
 801ae8a:	9302      	str	r3, [sp, #8]
 801ae8c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801ae8e:	9301      	str	r3, [sp, #4]
 801ae90:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ae92:	9300      	str	r3, [sp, #0]
 801ae94:	4613      	mov	r3, r2
 801ae96:	2200      	movs	r2, #0
 801ae98:	4621      	mov	r1, r4
 801ae9a:	6878      	ldr	r0, [r7, #4]
 801ae9c:	f7ff fe8a 	bl	801abb4 <tcp_output_alloc_header_common>
 801aea0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801aea2:	693b      	ldr	r3, [r7, #16]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d00c      	beq.n	801aec2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aea8:	7dfb      	ldrb	r3, [r7, #23]
 801aeaa:	2200      	movs	r2, #0
 801aeac:	6939      	ldr	r1, [r7, #16]
 801aeae:	68f8      	ldr	r0, [r7, #12]
 801aeb0:	f7ff ff30 	bl	801ad14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeb6:	683a      	ldr	r2, [r7, #0]
 801aeb8:	6939      	ldr	r1, [r7, #16]
 801aeba:	68f8      	ldr	r0, [r7, #12]
 801aebc:	f7ff ff68 	bl	801ad90 <tcp_output_control_segment>
 801aec0:	e000      	b.n	801aec4 <tcp_rst+0x8c>
    return;
 801aec2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801aec4:	371c      	adds	r7, #28
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd90      	pop	{r4, r7, pc}
 801aeca:	bf00      	nop
 801aecc:	08024374 	.word	0x08024374
 801aed0:	08024b54 	.word	0x08024b54
 801aed4:	080243c8 	.word	0x080243c8
 801aed8:	08024b70 	.word	0x08024b70

0801aedc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801aedc:	b590      	push	{r4, r7, lr}
 801aede:	b087      	sub	sp, #28
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801aee4:	2300      	movs	r3, #0
 801aee6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801aee8:	2300      	movs	r3, #0
 801aeea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d106      	bne.n	801af00 <tcp_send_empty_ack+0x24>
 801aef2:	4b28      	ldr	r3, [pc, #160]	@ (801af94 <tcp_send_empty_ack+0xb8>)
 801aef4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801aef8:	4927      	ldr	r1, [pc, #156]	@ (801af98 <tcp_send_empty_ack+0xbc>)
 801aefa:	4828      	ldr	r0, [pc, #160]	@ (801af9c <tcp_send_empty_ack+0xc0>)
 801aefc:	f005 fbca 	bl	8020694 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801af00:	7dfb      	ldrb	r3, [r7, #23]
 801af02:	009b      	lsls	r3, r3, #2
 801af04:	b2db      	uxtb	r3, r3
 801af06:	f003 0304 	and.w	r3, r3, #4
 801af0a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801af0c:	7d7b      	ldrb	r3, [r7, #21]
 801af0e:	b29c      	uxth	r4, r3
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801af14:	4618      	mov	r0, r3
 801af16:	f7f7 ff49 	bl	8012dac <lwip_htonl>
 801af1a:	4603      	mov	r3, r0
 801af1c:	2200      	movs	r2, #0
 801af1e:	4621      	mov	r1, r4
 801af20:	6878      	ldr	r0, [r7, #4]
 801af22:	f7ff feb9 	bl	801ac98 <tcp_output_alloc_header>
 801af26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801af28:	693b      	ldr	r3, [r7, #16]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d109      	bne.n	801af42 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	8b5b      	ldrh	r3, [r3, #26]
 801af32:	f043 0303 	orr.w	r3, r3, #3
 801af36:	b29a      	uxth	r2, r3
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801af3c:	f06f 0301 	mvn.w	r3, #1
 801af40:	e023      	b.n	801af8a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801af42:	7dbb      	ldrb	r3, [r7, #22]
 801af44:	7dfa      	ldrb	r2, [r7, #23]
 801af46:	6939      	ldr	r1, [r7, #16]
 801af48:	6878      	ldr	r0, [r7, #4]
 801af4a:	f7ff fee3 	bl	801ad14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801af4e:	687a      	ldr	r2, [r7, #4]
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	3304      	adds	r3, #4
 801af54:	6939      	ldr	r1, [r7, #16]
 801af56:	6878      	ldr	r0, [r7, #4]
 801af58:	f7ff ff1a 	bl	801ad90 <tcp_output_control_segment>
 801af5c:	4603      	mov	r3, r0
 801af5e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801af60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d007      	beq.n	801af78 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	8b5b      	ldrh	r3, [r3, #26]
 801af6c:	f043 0303 	orr.w	r3, r3, #3
 801af70:	b29a      	uxth	r2, r3
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	835a      	strh	r2, [r3, #26]
 801af76:	e006      	b.n	801af86 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	8b5b      	ldrh	r3, [r3, #26]
 801af7c:	f023 0303 	bic.w	r3, r3, #3
 801af80:	b29a      	uxth	r2, r3
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801af86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801af8a:	4618      	mov	r0, r3
 801af8c:	371c      	adds	r7, #28
 801af8e:	46bd      	mov	sp, r7
 801af90:	bd90      	pop	{r4, r7, pc}
 801af92:	bf00      	nop
 801af94:	08024374 	.word	0x08024374
 801af98:	08024b8c 	.word	0x08024b8c
 801af9c:	080243c8 	.word	0x080243c8

0801afa0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801afa0:	b590      	push	{r4, r7, lr}
 801afa2:	b085      	sub	sp, #20
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801afa8:	2300      	movs	r3, #0
 801afaa:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d106      	bne.n	801afc0 <tcp_keepalive+0x20>
 801afb2:	4b18      	ldr	r3, [pc, #96]	@ (801b014 <tcp_keepalive+0x74>)
 801afb4:	f640 0224 	movw	r2, #2084	@ 0x824
 801afb8:	4917      	ldr	r1, [pc, #92]	@ (801b018 <tcp_keepalive+0x78>)
 801afba:	4818      	ldr	r0, [pc, #96]	@ (801b01c <tcp_keepalive+0x7c>)
 801afbc:	f005 fb6a 	bl	8020694 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801afc0:	7abb      	ldrb	r3, [r7, #10]
 801afc2:	b29c      	uxth	r4, r3
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801afc8:	3b01      	subs	r3, #1
 801afca:	4618      	mov	r0, r3
 801afcc:	f7f7 feee 	bl	8012dac <lwip_htonl>
 801afd0:	4603      	mov	r3, r0
 801afd2:	2200      	movs	r2, #0
 801afd4:	4621      	mov	r1, r4
 801afd6:	6878      	ldr	r0, [r7, #4]
 801afd8:	f7ff fe5e 	bl	801ac98 <tcp_output_alloc_header>
 801afdc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d102      	bne.n	801afea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801afe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801afe8:	e010      	b.n	801b00c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801afea:	7abb      	ldrb	r3, [r7, #10]
 801afec:	2200      	movs	r2, #0
 801afee:	68f9      	ldr	r1, [r7, #12]
 801aff0:	6878      	ldr	r0, [r7, #4]
 801aff2:	f7ff fe8f 	bl	801ad14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aff6:	687a      	ldr	r2, [r7, #4]
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	3304      	adds	r3, #4
 801affc:	68f9      	ldr	r1, [r7, #12]
 801affe:	6878      	ldr	r0, [r7, #4]
 801b000:	f7ff fec6 	bl	801ad90 <tcp_output_control_segment>
 801b004:	4603      	mov	r3, r0
 801b006:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b008:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b00c:	4618      	mov	r0, r3
 801b00e:	3714      	adds	r7, #20
 801b010:	46bd      	mov	sp, r7
 801b012:	bd90      	pop	{r4, r7, pc}
 801b014:	08024374 	.word	0x08024374
 801b018:	08024bac 	.word	0x08024bac
 801b01c:	080243c8 	.word	0x080243c8

0801b020 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b020:	b590      	push	{r4, r7, lr}
 801b022:	b08b      	sub	sp, #44	@ 0x2c
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b028:	2300      	movs	r3, #0
 801b02a:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d106      	bne.n	801b040 <tcp_zero_window_probe+0x20>
 801b032:	4b4d      	ldr	r3, [pc, #308]	@ (801b168 <tcp_zero_window_probe+0x148>)
 801b034:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b038:	494c      	ldr	r1, [pc, #304]	@ (801b16c <tcp_zero_window_probe+0x14c>)
 801b03a:	484d      	ldr	r0, [pc, #308]	@ (801b170 <tcp_zero_window_probe+0x150>)
 801b03c:	f005 fb2a 	bl	8020694 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b044:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 801b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d101      	bne.n	801b050 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b04c:	2300      	movs	r3, #0
 801b04e:	e087      	b.n	801b160 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b056:	2bff      	cmp	r3, #255	@ 0xff
 801b058:	d007      	beq.n	801b06a <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b060:	3301      	adds	r3, #1
 801b062:	b2da      	uxtb	r2, r3
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b06c:	691b      	ldr	r3, [r3, #16]
 801b06e:	899b      	ldrh	r3, [r3, #12]
 801b070:	b29b      	uxth	r3, r3
 801b072:	4618      	mov	r0, r3
 801b074:	f7f7 fe84 	bl	8012d80 <lwip_htons>
 801b078:	4603      	mov	r3, r0
 801b07a:	b2db      	uxtb	r3, r3
 801b07c:	f003 0301 	and.w	r3, r3, #1
 801b080:	2b00      	cmp	r3, #0
 801b082:	d005      	beq.n	801b090 <tcp_zero_window_probe+0x70>
 801b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b086:	891b      	ldrh	r3, [r3, #8]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d101      	bne.n	801b090 <tcp_zero_window_probe+0x70>
 801b08c:	2301      	movs	r3, #1
 801b08e:	e000      	b.n	801b092 <tcp_zero_window_probe+0x72>
 801b090:	2300      	movs	r3, #0
 801b092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b096:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	bf0c      	ite	eq
 801b09e:	2301      	moveq	r3, #1
 801b0a0:	2300      	movne	r3, #0
 801b0a2:	b2db      	uxtb	r3, r3
 801b0a4:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b0a6:	7cfb      	ldrb	r3, [r7, #19]
 801b0a8:	b299      	uxth	r1, r3
 801b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ac:	691b      	ldr	r3, [r3, #16]
 801b0ae:	685b      	ldr	r3, [r3, #4]
 801b0b0:	8c3a      	ldrh	r2, [r7, #32]
 801b0b2:	6878      	ldr	r0, [r7, #4]
 801b0b4:	f7ff fdf0 	bl	801ac98 <tcp_output_alloc_header>
 801b0b8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801b0ba:	69fb      	ldr	r3, [r7, #28]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d102      	bne.n	801b0c6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b0c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b0c4:	e04c      	b.n	801b160 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b0c6:	69fb      	ldr	r3, [r7, #28]
 801b0c8:	685b      	ldr	r3, [r3, #4]
 801b0ca:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801b0cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d011      	beq.n	801b0f8 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b0d4:	69bb      	ldr	r3, [r7, #24]
 801b0d6:	899b      	ldrh	r3, [r3, #12]
 801b0d8:	b29b      	uxth	r3, r3
 801b0da:	b21b      	sxth	r3, r3
 801b0dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b0e0:	b21c      	sxth	r4, r3
 801b0e2:	2011      	movs	r0, #17
 801b0e4:	f7f7 fe4c 	bl	8012d80 <lwip_htons>
 801b0e8:	4603      	mov	r3, r0
 801b0ea:	b21b      	sxth	r3, r3
 801b0ec:	4323      	orrs	r3, r4
 801b0ee:	b21b      	sxth	r3, r3
 801b0f0:	b29a      	uxth	r2, r3
 801b0f2:	69bb      	ldr	r3, [r7, #24]
 801b0f4:	819a      	strh	r2, [r3, #12]
 801b0f6:	e010      	b.n	801b11a <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b0f8:	69fb      	ldr	r3, [r7, #28]
 801b0fa:	685b      	ldr	r3, [r3, #4]
 801b0fc:	3314      	adds	r3, #20
 801b0fe:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b102:	6858      	ldr	r0, [r3, #4]
 801b104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b106:	685b      	ldr	r3, [r3, #4]
 801b108:	891a      	ldrh	r2, [r3, #8]
 801b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b10c:	891b      	ldrh	r3, [r3, #8]
 801b10e:	1ad3      	subs	r3, r2, r3
 801b110:	b29b      	uxth	r3, r3
 801b112:	2201      	movs	r2, #1
 801b114:	6979      	ldr	r1, [r7, #20]
 801b116:	f7f9 fe93 	bl	8014e40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b11c:	691b      	ldr	r3, [r3, #16]
 801b11e:	685b      	ldr	r3, [r3, #4]
 801b120:	4618      	mov	r0, r3
 801b122:	f7f7 fe43 	bl	8012dac <lwip_htonl>
 801b126:	4603      	mov	r3, r0
 801b128:	3301      	adds	r3, #1
 801b12a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	1ad3      	subs	r3, r2, r3
 801b134:	2b00      	cmp	r3, #0
 801b136:	da02      	bge.n	801b13e <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	68fa      	ldr	r2, [r7, #12]
 801b13c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b13e:	7cfb      	ldrb	r3, [r7, #19]
 801b140:	2200      	movs	r2, #0
 801b142:	69f9      	ldr	r1, [r7, #28]
 801b144:	6878      	ldr	r0, [r7, #4]
 801b146:	f7ff fde5 	bl	801ad14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b14a:	687a      	ldr	r2, [r7, #4]
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	3304      	adds	r3, #4
 801b150:	69f9      	ldr	r1, [r7, #28]
 801b152:	6878      	ldr	r0, [r7, #4]
 801b154:	f7ff fe1c 	bl	801ad90 <tcp_output_control_segment>
 801b158:	4603      	mov	r3, r0
 801b15a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b15c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b160:	4618      	mov	r0, r3
 801b162:	372c      	adds	r7, #44	@ 0x2c
 801b164:	46bd      	mov	sp, r7
 801b166:	bd90      	pop	{r4, r7, pc}
 801b168:	08024374 	.word	0x08024374
 801b16c:	08024bc8 	.word	0x08024bc8
 801b170:	080243c8 	.word	0x080243c8

0801b174 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b082      	sub	sp, #8
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b17c:	f7f9 ff5e 	bl	801503c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b180:	4b0a      	ldr	r3, [pc, #40]	@ (801b1ac <tcpip_tcp_timer+0x38>)
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d103      	bne.n	801b190 <tcpip_tcp_timer+0x1c>
 801b188:	4b09      	ldr	r3, [pc, #36]	@ (801b1b0 <tcpip_tcp_timer+0x3c>)
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d005      	beq.n	801b19c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b190:	2200      	movs	r2, #0
 801b192:	4908      	ldr	r1, [pc, #32]	@ (801b1b4 <tcpip_tcp_timer+0x40>)
 801b194:	20fa      	movs	r0, #250	@ 0xfa
 801b196:	f000 f8f3 	bl	801b380 <sys_timeout>
 801b19a:	e003      	b.n	801b1a4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b19c:	4b06      	ldr	r3, [pc, #24]	@ (801b1b8 <tcpip_tcp_timer+0x44>)
 801b19e:	2200      	movs	r2, #0
 801b1a0:	601a      	str	r2, [r3, #0]
  }
}
 801b1a2:	bf00      	nop
 801b1a4:	bf00      	nop
 801b1a6:	3708      	adds	r7, #8
 801b1a8:	46bd      	mov	sp, r7
 801b1aa:	bd80      	pop	{r7, pc}
 801b1ac:	2002d478 	.word	0x2002d478
 801b1b0:	2002d47c 	.word	0x2002d47c
 801b1b4:	0801b175 	.word	0x0801b175
 801b1b8:	2002d4c8 	.word	0x2002d4c8

0801b1bc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b1bc:	b580      	push	{r7, lr}
 801b1be:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b1c0:	4b0a      	ldr	r3, [pc, #40]	@ (801b1ec <tcp_timer_needed+0x30>)
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d10f      	bne.n	801b1e8 <tcp_timer_needed+0x2c>
 801b1c8:	4b09      	ldr	r3, [pc, #36]	@ (801b1f0 <tcp_timer_needed+0x34>)
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d103      	bne.n	801b1d8 <tcp_timer_needed+0x1c>
 801b1d0:	4b08      	ldr	r3, [pc, #32]	@ (801b1f4 <tcp_timer_needed+0x38>)
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d007      	beq.n	801b1e8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b1d8:	4b04      	ldr	r3, [pc, #16]	@ (801b1ec <tcp_timer_needed+0x30>)
 801b1da:	2201      	movs	r2, #1
 801b1dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b1de:	2200      	movs	r2, #0
 801b1e0:	4905      	ldr	r1, [pc, #20]	@ (801b1f8 <tcp_timer_needed+0x3c>)
 801b1e2:	20fa      	movs	r0, #250	@ 0xfa
 801b1e4:	f000 f8cc 	bl	801b380 <sys_timeout>
  }
}
 801b1e8:	bf00      	nop
 801b1ea:	bd80      	pop	{r7, pc}
 801b1ec:	2002d4c8 	.word	0x2002d4c8
 801b1f0:	2002d478 	.word	0x2002d478
 801b1f4:	2002d47c 	.word	0x2002d47c
 801b1f8:	0801b175 	.word	0x0801b175

0801b1fc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b086      	sub	sp, #24
 801b200:	af00      	add	r7, sp, #0
 801b202:	60f8      	str	r0, [r7, #12]
 801b204:	60b9      	str	r1, [r7, #8]
 801b206:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b208:	200a      	movs	r0, #10
 801b20a:	f7f8 fb85 	bl	8013918 <memp_malloc>
 801b20e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b210:	693b      	ldr	r3, [r7, #16]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d109      	bne.n	801b22a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b216:	693b      	ldr	r3, [r7, #16]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d151      	bne.n	801b2c0 <sys_timeout_abs+0xc4>
 801b21c:	4b2a      	ldr	r3, [pc, #168]	@ (801b2c8 <sys_timeout_abs+0xcc>)
 801b21e:	22be      	movs	r2, #190	@ 0xbe
 801b220:	492a      	ldr	r1, [pc, #168]	@ (801b2cc <sys_timeout_abs+0xd0>)
 801b222:	482b      	ldr	r0, [pc, #172]	@ (801b2d0 <sys_timeout_abs+0xd4>)
 801b224:	f005 fa36 	bl	8020694 <iprintf>
    return;
 801b228:	e04a      	b.n	801b2c0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b22a:	693b      	ldr	r3, [r7, #16]
 801b22c:	2200      	movs	r2, #0
 801b22e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b230:	693b      	ldr	r3, [r7, #16]
 801b232:	68ba      	ldr	r2, [r7, #8]
 801b234:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b236:	693b      	ldr	r3, [r7, #16]
 801b238:	687a      	ldr	r2, [r7, #4]
 801b23a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b23c:	693b      	ldr	r3, [r7, #16]
 801b23e:	68fa      	ldr	r2, [r7, #12]
 801b240:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b242:	4b24      	ldr	r3, [pc, #144]	@ (801b2d4 <sys_timeout_abs+0xd8>)
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d103      	bne.n	801b252 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b24a:	4a22      	ldr	r2, [pc, #136]	@ (801b2d4 <sys_timeout_abs+0xd8>)
 801b24c:	693b      	ldr	r3, [r7, #16]
 801b24e:	6013      	str	r3, [r2, #0]
    return;
 801b250:	e037      	b.n	801b2c2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b252:	693b      	ldr	r3, [r7, #16]
 801b254:	685a      	ldr	r2, [r3, #4]
 801b256:	4b1f      	ldr	r3, [pc, #124]	@ (801b2d4 <sys_timeout_abs+0xd8>)
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	685b      	ldr	r3, [r3, #4]
 801b25c:	1ad3      	subs	r3, r2, r3
 801b25e:	0fdb      	lsrs	r3, r3, #31
 801b260:	f003 0301 	and.w	r3, r3, #1
 801b264:	b2db      	uxtb	r3, r3
 801b266:	2b00      	cmp	r3, #0
 801b268:	d007      	beq.n	801b27a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b26a:	4b1a      	ldr	r3, [pc, #104]	@ (801b2d4 <sys_timeout_abs+0xd8>)
 801b26c:	681a      	ldr	r2, [r3, #0]
 801b26e:	693b      	ldr	r3, [r7, #16]
 801b270:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b272:	4a18      	ldr	r2, [pc, #96]	@ (801b2d4 <sys_timeout_abs+0xd8>)
 801b274:	693b      	ldr	r3, [r7, #16]
 801b276:	6013      	str	r3, [r2, #0]
 801b278:	e023      	b.n	801b2c2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b27a:	4b16      	ldr	r3, [pc, #88]	@ (801b2d4 <sys_timeout_abs+0xd8>)
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	617b      	str	r3, [r7, #20]
 801b280:	e01a      	b.n	801b2b8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b282:	697b      	ldr	r3, [r7, #20]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d00b      	beq.n	801b2a2 <sys_timeout_abs+0xa6>
 801b28a:	693b      	ldr	r3, [r7, #16]
 801b28c:	685a      	ldr	r2, [r3, #4]
 801b28e:	697b      	ldr	r3, [r7, #20]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	685b      	ldr	r3, [r3, #4]
 801b294:	1ad3      	subs	r3, r2, r3
 801b296:	0fdb      	lsrs	r3, r3, #31
 801b298:	f003 0301 	and.w	r3, r3, #1
 801b29c:	b2db      	uxtb	r3, r3
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d007      	beq.n	801b2b2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b2a2:	697b      	ldr	r3, [r7, #20]
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	693b      	ldr	r3, [r7, #16]
 801b2a8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b2aa:	697b      	ldr	r3, [r7, #20]
 801b2ac:	693a      	ldr	r2, [r7, #16]
 801b2ae:	601a      	str	r2, [r3, #0]
        break;
 801b2b0:	e007      	b.n	801b2c2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b2b2:	697b      	ldr	r3, [r7, #20]
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	617b      	str	r3, [r7, #20]
 801b2b8:	697b      	ldr	r3, [r7, #20]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d1e1      	bne.n	801b282 <sys_timeout_abs+0x86>
 801b2be:	e000      	b.n	801b2c2 <sys_timeout_abs+0xc6>
    return;
 801b2c0:	bf00      	nop
      }
    }
  }
}
 801b2c2:	3718      	adds	r7, #24
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	bd80      	pop	{r7, pc}
 801b2c8:	08024bec 	.word	0x08024bec
 801b2cc:	08024c20 	.word	0x08024c20
 801b2d0:	08024c60 	.word	0x08024c60
 801b2d4:	2002d4c0 	.word	0x2002d4c0

0801b2d8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b086      	sub	sp, #24
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	685b      	ldr	r3, [r3, #4]
 801b2e8:	4798      	blx	r3

  now = sys_now();
 801b2ea:	f7f1 f96b 	bl	800c5c4 <sys_now>
 801b2ee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b2f0:	697b      	ldr	r3, [r7, #20]
 801b2f2:	681a      	ldr	r2, [r3, #0]
 801b2f4:	4b0f      	ldr	r3, [pc, #60]	@ (801b334 <lwip_cyclic_timer+0x5c>)
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	4413      	add	r3, r2
 801b2fa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b2fc:	68fa      	ldr	r2, [r7, #12]
 801b2fe:	693b      	ldr	r3, [r7, #16]
 801b300:	1ad3      	subs	r3, r2, r3
 801b302:	0fdb      	lsrs	r3, r3, #31
 801b304:	f003 0301 	and.w	r3, r3, #1
 801b308:	b2db      	uxtb	r3, r3
 801b30a:	2b00      	cmp	r3, #0
 801b30c:	d009      	beq.n	801b322 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	681a      	ldr	r2, [r3, #0]
 801b312:	693b      	ldr	r3, [r7, #16]
 801b314:	4413      	add	r3, r2
 801b316:	687a      	ldr	r2, [r7, #4]
 801b318:	4907      	ldr	r1, [pc, #28]	@ (801b338 <lwip_cyclic_timer+0x60>)
 801b31a:	4618      	mov	r0, r3
 801b31c:	f7ff ff6e 	bl	801b1fc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b320:	e004      	b.n	801b32c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b322:	687a      	ldr	r2, [r7, #4]
 801b324:	4904      	ldr	r1, [pc, #16]	@ (801b338 <lwip_cyclic_timer+0x60>)
 801b326:	68f8      	ldr	r0, [r7, #12]
 801b328:	f7ff ff68 	bl	801b1fc <sys_timeout_abs>
}
 801b32c:	bf00      	nop
 801b32e:	3718      	adds	r7, #24
 801b330:	46bd      	mov	sp, r7
 801b332:	bd80      	pop	{r7, pc}
 801b334:	2002d4c4 	.word	0x2002d4c4
 801b338:	0801b2d9 	.word	0x0801b2d9

0801b33c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b082      	sub	sp, #8
 801b340:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b342:	2301      	movs	r3, #1
 801b344:	607b      	str	r3, [r7, #4]
 801b346:	e00e      	b.n	801b366 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b348:	4a0b      	ldr	r2, [pc, #44]	@ (801b378 <sys_timeouts_init+0x3c>)
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	00db      	lsls	r3, r3, #3
 801b354:	4a08      	ldr	r2, [pc, #32]	@ (801b378 <sys_timeouts_init+0x3c>)
 801b356:	4413      	add	r3, r2
 801b358:	461a      	mov	r2, r3
 801b35a:	4908      	ldr	r1, [pc, #32]	@ (801b37c <sys_timeouts_init+0x40>)
 801b35c:	f000 f810 	bl	801b380 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	3301      	adds	r3, #1
 801b364:	607b      	str	r3, [r7, #4]
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	2b02      	cmp	r3, #2
 801b36a:	d9ed      	bls.n	801b348 <sys_timeouts_init+0xc>
  }
}
 801b36c:	bf00      	nop
 801b36e:	bf00      	nop
 801b370:	3708      	adds	r7, #8
 801b372:	46bd      	mov	sp, r7
 801b374:	bd80      	pop	{r7, pc}
 801b376:	bf00      	nop
 801b378:	08026750 	.word	0x08026750
 801b37c:	0801b2d9 	.word	0x0801b2d9

0801b380 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b380:	b580      	push	{r7, lr}
 801b382:	b086      	sub	sp, #24
 801b384:	af00      	add	r7, sp, #0
 801b386:	60f8      	str	r0, [r7, #12]
 801b388:	60b9      	str	r1, [r7, #8]
 801b38a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b392:	d306      	bcc.n	801b3a2 <sys_timeout+0x22>
 801b394:	4b0a      	ldr	r3, [pc, #40]	@ (801b3c0 <sys_timeout+0x40>)
 801b396:	f240 1229 	movw	r2, #297	@ 0x129
 801b39a:	490a      	ldr	r1, [pc, #40]	@ (801b3c4 <sys_timeout+0x44>)
 801b39c:	480a      	ldr	r0, [pc, #40]	@ (801b3c8 <sys_timeout+0x48>)
 801b39e:	f005 f979 	bl	8020694 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b3a2:	f7f1 f90f 	bl	800c5c4 <sys_now>
 801b3a6:	4602      	mov	r2, r0
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	4413      	add	r3, r2
 801b3ac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b3ae:	687a      	ldr	r2, [r7, #4]
 801b3b0:	68b9      	ldr	r1, [r7, #8]
 801b3b2:	6978      	ldr	r0, [r7, #20]
 801b3b4:	f7ff ff22 	bl	801b1fc <sys_timeout_abs>
#endif
}
 801b3b8:	bf00      	nop
 801b3ba:	3718      	adds	r7, #24
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd80      	pop	{r7, pc}
 801b3c0:	08024bec 	.word	0x08024bec
 801b3c4:	08024c88 	.word	0x08024c88
 801b3c8:	08024c60 	.word	0x08024c60

0801b3cc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b3cc:	b580      	push	{r7, lr}
 801b3ce:	b084      	sub	sp, #16
 801b3d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b3d2:	f7f1 f8f7 	bl	800c5c4 <sys_now>
 801b3d6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b3d8:	4b17      	ldr	r3, [pc, #92]	@ (801b438 <sys_check_timeouts+0x6c>)
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b3de:	68bb      	ldr	r3, [r7, #8]
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d022      	beq.n	801b42a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	685b      	ldr	r3, [r3, #4]
 801b3e8:	68fa      	ldr	r2, [r7, #12]
 801b3ea:	1ad3      	subs	r3, r2, r3
 801b3ec:	0fdb      	lsrs	r3, r3, #31
 801b3ee:	f003 0301 	and.w	r3, r3, #1
 801b3f2:	b2db      	uxtb	r3, r3
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d11a      	bne.n	801b42e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b3f8:	68bb      	ldr	r3, [r7, #8]
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	4a0e      	ldr	r2, [pc, #56]	@ (801b438 <sys_check_timeouts+0x6c>)
 801b3fe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b400:	68bb      	ldr	r3, [r7, #8]
 801b402:	689b      	ldr	r3, [r3, #8]
 801b404:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b406:	68bb      	ldr	r3, [r7, #8]
 801b408:	68db      	ldr	r3, [r3, #12]
 801b40a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b40c:	68bb      	ldr	r3, [r7, #8]
 801b40e:	685b      	ldr	r3, [r3, #4]
 801b410:	4a0a      	ldr	r2, [pc, #40]	@ (801b43c <sys_check_timeouts+0x70>)
 801b412:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b414:	68b9      	ldr	r1, [r7, #8]
 801b416:	200a      	movs	r0, #10
 801b418:	f7f8 fafa 	bl	8013a10 <memp_free>
    if (handler != NULL) {
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d0da      	beq.n	801b3d8 <sys_check_timeouts+0xc>
      handler(arg);
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	6838      	ldr	r0, [r7, #0]
 801b426:	4798      	blx	r3
  do {
 801b428:	e7d6      	b.n	801b3d8 <sys_check_timeouts+0xc>
      return;
 801b42a:	bf00      	nop
 801b42c:	e000      	b.n	801b430 <sys_check_timeouts+0x64>
      return;
 801b42e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b430:	3710      	adds	r7, #16
 801b432:	46bd      	mov	sp, r7
 801b434:	bd80      	pop	{r7, pc}
 801b436:	bf00      	nop
 801b438:	2002d4c0 	.word	0x2002d4c0
 801b43c:	2002d4c4 	.word	0x2002d4c4

0801b440 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b082      	sub	sp, #8
 801b444:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b446:	4b16      	ldr	r3, [pc, #88]	@ (801b4a0 <sys_timeouts_sleeptime+0x60>)
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d102      	bne.n	801b454 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b44e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b452:	e020      	b.n	801b496 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b454:	f7f1 f8b6 	bl	800c5c4 <sys_now>
 801b458:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b45a:	4b11      	ldr	r3, [pc, #68]	@ (801b4a0 <sys_timeouts_sleeptime+0x60>)
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	685a      	ldr	r2, [r3, #4]
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	1ad3      	subs	r3, r2, r3
 801b464:	0fdb      	lsrs	r3, r3, #31
 801b466:	f003 0301 	and.w	r3, r3, #1
 801b46a:	b2db      	uxtb	r3, r3
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d001      	beq.n	801b474 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b470:	2300      	movs	r3, #0
 801b472:	e010      	b.n	801b496 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b474:	4b0a      	ldr	r3, [pc, #40]	@ (801b4a0 <sys_timeouts_sleeptime+0x60>)
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	685a      	ldr	r2, [r3, #4]
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	1ad3      	subs	r3, r2, r3
 801b47e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b480:	683b      	ldr	r3, [r7, #0]
 801b482:	2b00      	cmp	r3, #0
 801b484:	da06      	bge.n	801b494 <sys_timeouts_sleeptime+0x54>
 801b486:	4b07      	ldr	r3, [pc, #28]	@ (801b4a4 <sys_timeouts_sleeptime+0x64>)
 801b488:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801b48c:	4906      	ldr	r1, [pc, #24]	@ (801b4a8 <sys_timeouts_sleeptime+0x68>)
 801b48e:	4807      	ldr	r0, [pc, #28]	@ (801b4ac <sys_timeouts_sleeptime+0x6c>)
 801b490:	f005 f900 	bl	8020694 <iprintf>
    return ret;
 801b494:	683b      	ldr	r3, [r7, #0]
  }
}
 801b496:	4618      	mov	r0, r3
 801b498:	3708      	adds	r7, #8
 801b49a:	46bd      	mov	sp, r7
 801b49c:	bd80      	pop	{r7, pc}
 801b49e:	bf00      	nop
 801b4a0:	2002d4c0 	.word	0x2002d4c0
 801b4a4:	08024bec 	.word	0x08024bec
 801b4a8:	08024cc0 	.word	0x08024cc0
 801b4ac:	08024c60 	.word	0x08024c60

0801b4b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b4b0:	b580      	push	{r7, lr}
 801b4b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b4b4:	f004 ffee 	bl	8020494 <rand>
 801b4b8:	4603      	mov	r3, r0
 801b4ba:	b29b      	uxth	r3, r3
 801b4bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b4c0:	b29b      	uxth	r3, r3
 801b4c2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b4c6:	b29a      	uxth	r2, r3
 801b4c8:	4b01      	ldr	r3, [pc, #4]	@ (801b4d0 <udp_init+0x20>)
 801b4ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b4cc:	bf00      	nop
 801b4ce:	bd80      	pop	{r7, pc}
 801b4d0:	20000070 	.word	0x20000070

0801b4d4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b4d4:	b480      	push	{r7}
 801b4d6:	b083      	sub	sp, #12
 801b4d8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b4da:	2300      	movs	r3, #0
 801b4dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b4de:	4b17      	ldr	r3, [pc, #92]	@ (801b53c <udp_new_port+0x68>)
 801b4e0:	881b      	ldrh	r3, [r3, #0]
 801b4e2:	1c5a      	adds	r2, r3, #1
 801b4e4:	b291      	uxth	r1, r2
 801b4e6:	4a15      	ldr	r2, [pc, #84]	@ (801b53c <udp_new_port+0x68>)
 801b4e8:	8011      	strh	r1, [r2, #0]
 801b4ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b4ee:	4293      	cmp	r3, r2
 801b4f0:	d103      	bne.n	801b4fa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b4f2:	4b12      	ldr	r3, [pc, #72]	@ (801b53c <udp_new_port+0x68>)
 801b4f4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b4f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b4fa:	4b11      	ldr	r3, [pc, #68]	@ (801b540 <udp_new_port+0x6c>)
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	603b      	str	r3, [r7, #0]
 801b500:	e011      	b.n	801b526 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b502:	683b      	ldr	r3, [r7, #0]
 801b504:	8a5a      	ldrh	r2, [r3, #18]
 801b506:	4b0d      	ldr	r3, [pc, #52]	@ (801b53c <udp_new_port+0x68>)
 801b508:	881b      	ldrh	r3, [r3, #0]
 801b50a:	429a      	cmp	r2, r3
 801b50c:	d108      	bne.n	801b520 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b50e:	88fb      	ldrh	r3, [r7, #6]
 801b510:	3301      	adds	r3, #1
 801b512:	80fb      	strh	r3, [r7, #6]
 801b514:	88fb      	ldrh	r3, [r7, #6]
 801b516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b51a:	d3e0      	bcc.n	801b4de <udp_new_port+0xa>
        return 0;
 801b51c:	2300      	movs	r3, #0
 801b51e:	e007      	b.n	801b530 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	68db      	ldr	r3, [r3, #12]
 801b524:	603b      	str	r3, [r7, #0]
 801b526:	683b      	ldr	r3, [r7, #0]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d1ea      	bne.n	801b502 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b52c:	4b03      	ldr	r3, [pc, #12]	@ (801b53c <udp_new_port+0x68>)
 801b52e:	881b      	ldrh	r3, [r3, #0]
}
 801b530:	4618      	mov	r0, r3
 801b532:	370c      	adds	r7, #12
 801b534:	46bd      	mov	sp, r7
 801b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b53a:	4770      	bx	lr
 801b53c:	20000070 	.word	0x20000070
 801b540:	2002d4cc 	.word	0x2002d4cc

0801b544 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b544:	b580      	push	{r7, lr}
 801b546:	b084      	sub	sp, #16
 801b548:	af00      	add	r7, sp, #0
 801b54a:	60f8      	str	r0, [r7, #12]
 801b54c:	60b9      	str	r1, [r7, #8]
 801b54e:	4613      	mov	r3, r2
 801b550:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d105      	bne.n	801b564 <udp_input_local_match+0x20>
 801b558:	4b27      	ldr	r3, [pc, #156]	@ (801b5f8 <udp_input_local_match+0xb4>)
 801b55a:	2287      	movs	r2, #135	@ 0x87
 801b55c:	4927      	ldr	r1, [pc, #156]	@ (801b5fc <udp_input_local_match+0xb8>)
 801b55e:	4828      	ldr	r0, [pc, #160]	@ (801b600 <udp_input_local_match+0xbc>)
 801b560:	f005 f898 	bl	8020694 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b564:	68bb      	ldr	r3, [r7, #8]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d105      	bne.n	801b576 <udp_input_local_match+0x32>
 801b56a:	4b23      	ldr	r3, [pc, #140]	@ (801b5f8 <udp_input_local_match+0xb4>)
 801b56c:	2288      	movs	r2, #136	@ 0x88
 801b56e:	4925      	ldr	r1, [pc, #148]	@ (801b604 <udp_input_local_match+0xc0>)
 801b570:	4823      	ldr	r0, [pc, #140]	@ (801b600 <udp_input_local_match+0xbc>)
 801b572:	f005 f88f 	bl	8020694 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	7a1b      	ldrb	r3, [r3, #8]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d00b      	beq.n	801b596 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	7a1a      	ldrb	r2, [r3, #8]
 801b582:	4b21      	ldr	r3, [pc, #132]	@ (801b608 <udp_input_local_match+0xc4>)
 801b584:	685b      	ldr	r3, [r3, #4]
 801b586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b58a:	3301      	adds	r3, #1
 801b58c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b58e:	429a      	cmp	r2, r3
 801b590:	d001      	beq.n	801b596 <udp_input_local_match+0x52>
    return 0;
 801b592:	2300      	movs	r3, #0
 801b594:	e02b      	b.n	801b5ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b596:	79fb      	ldrb	r3, [r7, #7]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d018      	beq.n	801b5ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d013      	beq.n	801b5ca <udp_input_local_match+0x86>
 801b5a2:	68fb      	ldr	r3, [r7, #12]
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d00f      	beq.n	801b5ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b5aa:	4b17      	ldr	r3, [pc, #92]	@ (801b608 <udp_input_local_match+0xc4>)
 801b5ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b5b2:	d00a      	beq.n	801b5ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	681a      	ldr	r2, [r3, #0]
 801b5b8:	4b13      	ldr	r3, [pc, #76]	@ (801b608 <udp_input_local_match+0xc4>)
 801b5ba:	695b      	ldr	r3, [r3, #20]
 801b5bc:	405a      	eors	r2, r3
 801b5be:	68bb      	ldr	r3, [r7, #8]
 801b5c0:	3308      	adds	r3, #8
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d110      	bne.n	801b5ec <udp_input_local_match+0xa8>
          return 1;
 801b5ca:	2301      	movs	r3, #1
 801b5cc:	e00f      	b.n	801b5ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d009      	beq.n	801b5e8 <udp_input_local_match+0xa4>
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d005      	beq.n	801b5e8 <udp_input_local_match+0xa4>
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	681a      	ldr	r2, [r3, #0]
 801b5e0:	4b09      	ldr	r3, [pc, #36]	@ (801b608 <udp_input_local_match+0xc4>)
 801b5e2:	695b      	ldr	r3, [r3, #20]
 801b5e4:	429a      	cmp	r2, r3
 801b5e6:	d101      	bne.n	801b5ec <udp_input_local_match+0xa8>
        return 1;
 801b5e8:	2301      	movs	r3, #1
 801b5ea:	e000      	b.n	801b5ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b5ec:	2300      	movs	r3, #0
}
 801b5ee:	4618      	mov	r0, r3
 801b5f0:	3710      	adds	r7, #16
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	bd80      	pop	{r7, pc}
 801b5f6:	bf00      	nop
 801b5f8:	08024cd4 	.word	0x08024cd4
 801b5fc:	08024d04 	.word	0x08024d04
 801b600:	08024d28 	.word	0x08024d28
 801b604:	08024d50 	.word	0x08024d50
 801b608:	200270fc 	.word	0x200270fc

0801b60c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b60c:	b590      	push	{r4, r7, lr}
 801b60e:	b08d      	sub	sp, #52	@ 0x34
 801b610:	af02      	add	r7, sp, #8
 801b612:	6078      	str	r0, [r7, #4]
 801b614:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b616:	2300      	movs	r3, #0
 801b618:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d105      	bne.n	801b62c <udp_input+0x20>
 801b620:	4b9c      	ldr	r3, [pc, #624]	@ (801b894 <udp_input+0x288>)
 801b622:	22cf      	movs	r2, #207	@ 0xcf
 801b624:	499c      	ldr	r1, [pc, #624]	@ (801b898 <udp_input+0x28c>)
 801b626:	489d      	ldr	r0, [pc, #628]	@ (801b89c <udp_input+0x290>)
 801b628:	f005 f834 	bl	8020694 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b62c:	683b      	ldr	r3, [r7, #0]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d105      	bne.n	801b63e <udp_input+0x32>
 801b632:	4b98      	ldr	r3, [pc, #608]	@ (801b894 <udp_input+0x288>)
 801b634:	22d0      	movs	r2, #208	@ 0xd0
 801b636:	499a      	ldr	r1, [pc, #616]	@ (801b8a0 <udp_input+0x294>)
 801b638:	4898      	ldr	r0, [pc, #608]	@ (801b89c <udp_input+0x290>)
 801b63a:	f005 f82b 	bl	8020694 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b63e:	4b99      	ldr	r3, [pc, #612]	@ (801b8a4 <udp_input+0x298>)
 801b640:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801b644:	3301      	adds	r3, #1
 801b646:	b29a      	uxth	r2, r3
 801b648:	4b96      	ldr	r3, [pc, #600]	@ (801b8a4 <udp_input+0x298>)
 801b64a:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	895b      	ldrh	r3, [r3, #10]
 801b652:	2b07      	cmp	r3, #7
 801b654:	d819      	bhi.n	801b68a <udp_input+0x7e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	891b      	ldrh	r3, [r3, #8]
 801b65a:	4619      	mov	r1, r3
 801b65c:	4892      	ldr	r0, [pc, #584]	@ (801b8a8 <udp_input+0x29c>)
 801b65e:	f005 f819 	bl	8020694 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801b662:	4b90      	ldr	r3, [pc, #576]	@ (801b8a4 <udp_input+0x298>)
 801b664:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801b668:	3301      	adds	r3, #1
 801b66a:	b29a      	uxth	r2, r3
 801b66c:	4b8d      	ldr	r3, [pc, #564]	@ (801b8a4 <udp_input+0x298>)
 801b66e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801b672:	4b8c      	ldr	r3, [pc, #560]	@ (801b8a4 <udp_input+0x298>)
 801b674:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b678:	3301      	adds	r3, #1
 801b67a:	b29a      	uxth	r2, r3
 801b67c:	4b89      	ldr	r3, [pc, #548]	@ (801b8a4 <udp_input+0x298>)
 801b67e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b682:	6878      	ldr	r0, [r7, #4]
 801b684:	f7f9 f9aa 	bl	80149dc <pbuf_free>
    goto end;
 801b688:	e1ae      	b.n	801b9e8 <udp_input+0x3dc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	685b      	ldr	r3, [r3, #4]
 801b68e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b690:	4b86      	ldr	r3, [pc, #536]	@ (801b8ac <udp_input+0x2a0>)
 801b692:	695b      	ldr	r3, [r3, #20]
 801b694:	4a85      	ldr	r2, [pc, #532]	@ (801b8ac <udp_input+0x2a0>)
 801b696:	6812      	ldr	r2, [r2, #0]
 801b698:	4611      	mov	r1, r2
 801b69a:	4618      	mov	r0, r3
 801b69c:	f002 fb30 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 801b6a0:	4603      	mov	r3, r0
 801b6a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	891b      	ldrh	r3, [r3, #8]
 801b6a8:	4619      	mov	r1, r3
 801b6aa:	4881      	ldr	r0, [pc, #516]	@ (801b8b0 <udp_input+0x2a4>)
 801b6ac:	f004 fff2 	bl	8020694 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b6b0:	697b      	ldr	r3, [r7, #20]
 801b6b2:	881b      	ldrh	r3, [r3, #0]
 801b6b4:	b29b      	uxth	r3, r3
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	f7f7 fb62 	bl	8012d80 <lwip_htons>
 801b6bc:	4603      	mov	r3, r0
 801b6be:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b6c0:	697b      	ldr	r3, [r7, #20]
 801b6c2:	885b      	ldrh	r3, [r3, #2]
 801b6c4:	b29b      	uxth	r3, r3
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	f7f7 fb5a 	bl	8012d80 <lwip_htons>
 801b6cc:	4603      	mov	r3, r0
 801b6ce:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801b6d0:	6978      	ldr	r0, [r7, #20]
 801b6d2:	f000 fdb1 	bl	801c238 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801b6d6:	4877      	ldr	r0, [pc, #476]	@ (801b8b4 <udp_input+0x2a8>)
 801b6d8:	f004 ffdc 	bl	8020694 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801b6dc:	4b73      	ldr	r3, [pc, #460]	@ (801b8ac <udp_input+0x2a0>)
 801b6de:	695b      	ldr	r3, [r3, #20]
 801b6e0:	b2db      	uxtb	r3, r3
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	4b71      	ldr	r3, [pc, #452]	@ (801b8ac <udp_input+0x2a0>)
 801b6e6:	695b      	ldr	r3, [r3, #20]
 801b6e8:	0a1b      	lsrs	r3, r3, #8
 801b6ea:	b2db      	uxtb	r3, r3
 801b6ec:	461a      	mov	r2, r3
 801b6ee:	4b6f      	ldr	r3, [pc, #444]	@ (801b8ac <udp_input+0x2a0>)
 801b6f0:	695b      	ldr	r3, [r3, #20]
 801b6f2:	0c1b      	lsrs	r3, r3, #16
 801b6f4:	b2db      	uxtb	r3, r3
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	4b6c      	ldr	r3, [pc, #432]	@ (801b8ac <udp_input+0x2a0>)
 801b6fa:	695b      	ldr	r3, [r3, #20]
 801b6fc:	0e1b      	lsrs	r3, r3, #24
 801b6fe:	b2db      	uxtb	r3, r3
 801b700:	9300      	str	r3, [sp, #0]
 801b702:	4603      	mov	r3, r0
 801b704:	486c      	ldr	r0, [pc, #432]	@ (801b8b8 <udp_input+0x2ac>)
 801b706:	f004 ffc5 	bl	8020694 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801b70a:	697b      	ldr	r3, [r7, #20]
 801b70c:	885b      	ldrh	r3, [r3, #2]
 801b70e:	b29b      	uxth	r3, r3
 801b710:	4618      	mov	r0, r3
 801b712:	f7f7 fb35 	bl	8012d80 <lwip_htons>
 801b716:	4603      	mov	r3, r0
 801b718:	4619      	mov	r1, r3
 801b71a:	4868      	ldr	r0, [pc, #416]	@ (801b8bc <udp_input+0x2b0>)
 801b71c:	f004 ffba 	bl	8020694 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801b720:	4b62      	ldr	r3, [pc, #392]	@ (801b8ac <udp_input+0x2a0>)
 801b722:	691b      	ldr	r3, [r3, #16]
 801b724:	b2db      	uxtb	r3, r3
 801b726:	4619      	mov	r1, r3
 801b728:	4b60      	ldr	r3, [pc, #384]	@ (801b8ac <udp_input+0x2a0>)
 801b72a:	691b      	ldr	r3, [r3, #16]
 801b72c:	0a1b      	lsrs	r3, r3, #8
 801b72e:	b2db      	uxtb	r3, r3
 801b730:	461a      	mov	r2, r3
 801b732:	4b5e      	ldr	r3, [pc, #376]	@ (801b8ac <udp_input+0x2a0>)
 801b734:	691b      	ldr	r3, [r3, #16]
 801b736:	0c1b      	lsrs	r3, r3, #16
 801b738:	b2db      	uxtb	r3, r3
 801b73a:	4618      	mov	r0, r3
 801b73c:	4b5b      	ldr	r3, [pc, #364]	@ (801b8ac <udp_input+0x2a0>)
 801b73e:	691b      	ldr	r3, [r3, #16]
 801b740:	0e1b      	lsrs	r3, r3, #24
 801b742:	b2db      	uxtb	r3, r3
 801b744:	9300      	str	r3, [sp, #0]
 801b746:	4603      	mov	r3, r0
 801b748:	485b      	ldr	r0, [pc, #364]	@ (801b8b8 <udp_input+0x2ac>)
 801b74a:	f004 ffa3 	bl	8020694 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801b74e:	697b      	ldr	r3, [r7, #20]
 801b750:	881b      	ldrh	r3, [r3, #0]
 801b752:	b29b      	uxth	r3, r3
 801b754:	4618      	mov	r0, r3
 801b756:	f7f7 fb13 	bl	8012d80 <lwip_htons>
 801b75a:	4603      	mov	r3, r0
 801b75c:	4619      	mov	r1, r3
 801b75e:	4858      	ldr	r0, [pc, #352]	@ (801b8c0 <udp_input+0x2b4>)
 801b760:	f004 ff98 	bl	8020694 <iprintf>

  pcb = NULL;
 801b764:	2300      	movs	r3, #0
 801b766:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b768:	2300      	movs	r3, #0
 801b76a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b76c:	2300      	movs	r3, #0
 801b76e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b770:	4b54      	ldr	r3, [pc, #336]	@ (801b8c4 <udp_input+0x2b8>)
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	627b      	str	r3, [r7, #36]	@ 0x24
 801b776:	e0b7      	b.n	801b8e8 <udp_input+0x2dc>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 801b778:	4853      	ldr	r0, [pc, #332]	@ (801b8c8 <udp_input+0x2bc>)
 801b77a:	f004 ff8b 	bl	8020694 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 801b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	b2db      	uxtb	r3, r3
 801b784:	4619      	mov	r1, r3
 801b786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	0a1b      	lsrs	r3, r3, #8
 801b78c:	b2db      	uxtb	r3, r3
 801b78e:	461a      	mov	r2, r3
 801b790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	0c1b      	lsrs	r3, r3, #16
 801b796:	b2db      	uxtb	r3, r3
 801b798:	4618      	mov	r0, r3
 801b79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	0e1b      	lsrs	r3, r3, #24
 801b7a0:	b2db      	uxtb	r3, r3
 801b7a2:	9300      	str	r3, [sp, #0]
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	4844      	ldr	r0, [pc, #272]	@ (801b8b8 <udp_input+0x2ac>)
 801b7a8:	f004 ff74 	bl	8020694 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 801b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ae:	8a5b      	ldrh	r3, [r3, #18]
 801b7b0:	4619      	mov	r1, r3
 801b7b2:	4842      	ldr	r0, [pc, #264]	@ (801b8bc <udp_input+0x2b0>)
 801b7b4:	f004 ff6e 	bl	8020694 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 801b7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ba:	685b      	ldr	r3, [r3, #4]
 801b7bc:	b2db      	uxtb	r3, r3
 801b7be:	4619      	mov	r1, r3
 801b7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7c2:	685b      	ldr	r3, [r3, #4]
 801b7c4:	0a1b      	lsrs	r3, r3, #8
 801b7c6:	b2db      	uxtb	r3, r3
 801b7c8:	461a      	mov	r2, r3
 801b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7cc:	685b      	ldr	r3, [r3, #4]
 801b7ce:	0c1b      	lsrs	r3, r3, #16
 801b7d0:	b2db      	uxtb	r3, r3
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7d6:	685b      	ldr	r3, [r3, #4]
 801b7d8:	0e1b      	lsrs	r3, r3, #24
 801b7da:	b2db      	uxtb	r3, r3
 801b7dc:	9300      	str	r3, [sp, #0]
 801b7de:	4603      	mov	r3, r0
 801b7e0:	4835      	ldr	r0, [pc, #212]	@ (801b8b8 <udp_input+0x2ac>)
 801b7e2:	f004 ff57 	bl	8020694 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7e8:	8a9b      	ldrh	r3, [r3, #20]
 801b7ea:	4619      	mov	r1, r3
 801b7ec:	4834      	ldr	r0, [pc, #208]	@ (801b8c0 <udp_input+0x2b4>)
 801b7ee:	f004 ff51 	bl	8020694 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7f4:	8a5b      	ldrh	r3, [r3, #18]
 801b7f6:	89fa      	ldrh	r2, [r7, #14]
 801b7f8:	429a      	cmp	r2, r3
 801b7fa:	d170      	bne.n	801b8de <udp_input+0x2d2>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b7fc:	7cfb      	ldrb	r3, [r7, #19]
 801b7fe:	461a      	mov	r2, r3
 801b800:	6839      	ldr	r1, [r7, #0]
 801b802:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b804:	f7ff fe9e 	bl	801b544 <udp_input_local_match>
 801b808:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d067      	beq.n	801b8de <udp_input+0x2d2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b810:	7c1b      	ldrb	r3, [r3, #16]
 801b812:	f003 0304 	and.w	r3, r3, #4
 801b816:	2b00      	cmp	r3, #0
 801b818:	d11d      	bne.n	801b856 <udp_input+0x24a>
        if (uncon_pcb == NULL) {
 801b81a:	69fb      	ldr	r3, [r7, #28]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d102      	bne.n	801b826 <udp_input+0x21a>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b822:	61fb      	str	r3, [r7, #28]
 801b824:	e017      	b.n	801b856 <udp_input+0x24a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b826:	7cfb      	ldrb	r3, [r7, #19]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d014      	beq.n	801b856 <udp_input+0x24a>
 801b82c:	4b1f      	ldr	r3, [pc, #124]	@ (801b8ac <udp_input+0x2a0>)
 801b82e:	695b      	ldr	r3, [r3, #20]
 801b830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b834:	d10f      	bne.n	801b856 <udp_input+0x24a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b836:	69fb      	ldr	r3, [r7, #28]
 801b838:	681a      	ldr	r2, [r3, #0]
 801b83a:	683b      	ldr	r3, [r7, #0]
 801b83c:	3304      	adds	r3, #4
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	429a      	cmp	r2, r3
 801b842:	d008      	beq.n	801b856 <udp_input+0x24a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b846:	681a      	ldr	r2, [r3, #0]
 801b848:	683b      	ldr	r3, [r7, #0]
 801b84a:	3304      	adds	r3, #4
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	429a      	cmp	r2, r3
 801b850:	d101      	bne.n	801b856 <udp_input+0x24a>
              /* better match */
              uncon_pcb = pcb;
 801b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b854:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b858:	8a9b      	ldrh	r3, [r3, #20]
 801b85a:	8a3a      	ldrh	r2, [r7, #16]
 801b85c:	429a      	cmp	r2, r3
 801b85e:	d13e      	bne.n	801b8de <udp_input+0x2d2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b862:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b864:	2b00      	cmp	r3, #0
 801b866:	d005      	beq.n	801b874 <udp_input+0x268>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b86a:	685a      	ldr	r2, [r3, #4]
 801b86c:	4b0f      	ldr	r3, [pc, #60]	@ (801b8ac <udp_input+0x2a0>)
 801b86e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b870:	429a      	cmp	r2, r3
 801b872:	d134      	bne.n	801b8de <udp_input+0x2d2>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b874:	6a3b      	ldr	r3, [r7, #32]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d028      	beq.n	801b8cc <udp_input+0x2c0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b87c:	68da      	ldr	r2, [r3, #12]
 801b87e:	6a3b      	ldr	r3, [r7, #32]
 801b880:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b882:	4b10      	ldr	r3, [pc, #64]	@ (801b8c4 <udp_input+0x2b8>)
 801b884:	681a      	ldr	r2, [r3, #0]
 801b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b888:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b88a:	4a0e      	ldr	r2, [pc, #56]	@ (801b8c4 <udp_input+0x2b8>)
 801b88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b88e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b890:	e02e      	b.n	801b8f0 <udp_input+0x2e4>
 801b892:	bf00      	nop
 801b894:	08024cd4 	.word	0x08024cd4
 801b898:	08024d78 	.word	0x08024d78
 801b89c:	08024d28 	.word	0x08024d28
 801b8a0:	08024d90 	.word	0x08024d90
 801b8a4:	2002d36c 	.word	0x2002d36c
 801b8a8:	08024dac 	.word	0x08024dac
 801b8ac:	200270fc 	.word	0x200270fc
 801b8b0:	08024de4 	.word	0x08024de4
 801b8b4:	08024e10 	.word	0x08024e10
 801b8b8:	08024e18 	.word	0x08024e18
 801b8bc:	08024e28 	.word	0x08024e28
 801b8c0:	08024e38 	.word	0x08024e38
 801b8c4:	2002d4cc 	.word	0x2002d4cc
 801b8c8:	08024e40 	.word	0x08024e40
          UDP_STATS_INC(udp.cachehit);
 801b8cc:	4b48      	ldr	r3, [pc, #288]	@ (801b9f0 <udp_input+0x3e4>)
 801b8ce:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801b8d2:	3301      	adds	r3, #1
 801b8d4:	b29a      	uxth	r2, r3
 801b8d6:	4b46      	ldr	r3, [pc, #280]	@ (801b9f0 <udp_input+0x3e4>)
 801b8d8:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801b8dc:	e008      	b.n	801b8f0 <udp_input+0x2e4>
      }
    }

    prev = pcb;
 801b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8e0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8e4:	68db      	ldr	r3, [r3, #12]
 801b8e6:	627b      	str	r3, [r7, #36]	@ 0x24
 801b8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	f47f af44 	bne.w	801b778 <udp_input+0x16c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d101      	bne.n	801b8fa <udp_input+0x2ee>
    pcb = uncon_pcb;
 801b8f6:	69fb      	ldr	r3, [r7, #28]
 801b8f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	d002      	beq.n	801b906 <udp_input+0x2fa>
    for_us = 1;
 801b900:	2301      	movs	r3, #1
 801b902:	76fb      	strb	r3, [r7, #27]
 801b904:	e00a      	b.n	801b91c <udp_input+0x310>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b906:	683b      	ldr	r3, [r7, #0]
 801b908:	3304      	adds	r3, #4
 801b90a:	681a      	ldr	r2, [r3, #0]
 801b90c:	4b39      	ldr	r3, [pc, #228]	@ (801b9f4 <udp_input+0x3e8>)
 801b90e:	695b      	ldr	r3, [r3, #20]
 801b910:	429a      	cmp	r2, r3
 801b912:	bf0c      	ite	eq
 801b914:	2301      	moveq	r3, #1
 801b916:	2300      	movne	r3, #0
 801b918:	b2db      	uxtb	r3, r3
 801b91a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b91c:	7efb      	ldrb	r3, [r7, #27]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d05f      	beq.n	801b9e2 <udp_input+0x3d6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801b922:	4835      	ldr	r0, [pc, #212]	@ (801b9f8 <udp_input+0x3ec>)
 801b924:	f004 ff26 	bl	8020774 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b928:	2108      	movs	r1, #8
 801b92a:	6878      	ldr	r0, [r7, #4]
 801b92c:	f7f8 ffc8 	bl	80148c0 <pbuf_remove_header>
 801b930:	4603      	mov	r3, r0
 801b932:	2b00      	cmp	r3, #0
 801b934:	d012      	beq.n	801b95c <udp_input+0x350>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b936:	4b31      	ldr	r3, [pc, #196]	@ (801b9fc <udp_input+0x3f0>)
 801b938:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801b93c:	4930      	ldr	r1, [pc, #192]	@ (801ba00 <udp_input+0x3f4>)
 801b93e:	4831      	ldr	r0, [pc, #196]	@ (801ba04 <udp_input+0x3f8>)
 801b940:	f004 fea8 	bl	8020694 <iprintf>
      UDP_STATS_INC(udp.drop);
 801b944:	4b2a      	ldr	r3, [pc, #168]	@ (801b9f0 <udp_input+0x3e4>)
 801b946:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b94a:	3301      	adds	r3, #1
 801b94c:	b29a      	uxth	r2, r3
 801b94e:	4b28      	ldr	r3, [pc, #160]	@ (801b9f0 <udp_input+0x3e4>)
 801b950:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b954:	6878      	ldr	r0, [r7, #4]
 801b956:	f7f9 f841 	bl	80149dc <pbuf_free>
      goto end;
 801b95a:	e045      	b.n	801b9e8 <udp_input+0x3dc>
    }

    if (pcb != NULL) {
 801b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d012      	beq.n	801b988 <udp_input+0x37c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b964:	699b      	ldr	r3, [r3, #24]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d00a      	beq.n	801b980 <udp_input+0x374>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b96c:	699c      	ldr	r4, [r3, #24]
 801b96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b970:	69d8      	ldr	r0, [r3, #28]
 801b972:	8a3b      	ldrh	r3, [r7, #16]
 801b974:	9300      	str	r3, [sp, #0]
 801b976:	4b24      	ldr	r3, [pc, #144]	@ (801ba08 <udp_input+0x3fc>)
 801b978:	687a      	ldr	r2, [r7, #4]
 801b97a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b97c:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b97e:	e034      	b.n	801b9ea <udp_input+0x3de>
        pbuf_free(p);
 801b980:	6878      	ldr	r0, [r7, #4]
 801b982:	f7f9 f82b 	bl	80149dc <pbuf_free>
        goto end;
 801b986:	e02f      	b.n	801b9e8 <udp_input+0x3dc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 801b988:	4820      	ldr	r0, [pc, #128]	@ (801ba0c <udp_input+0x400>)
 801b98a:	f004 fef3 	bl	8020774 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b98e:	7cfb      	ldrb	r3, [r7, #19]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d112      	bne.n	801b9ba <udp_input+0x3ae>
 801b994:	4b17      	ldr	r3, [pc, #92]	@ (801b9f4 <udp_input+0x3e8>)
 801b996:	695b      	ldr	r3, [r3, #20]
 801b998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b99c:	2be0      	cmp	r3, #224	@ 0xe0
 801b99e:	d00c      	beq.n	801b9ba <udp_input+0x3ae>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b9a0:	4b14      	ldr	r3, [pc, #80]	@ (801b9f4 <udp_input+0x3e8>)
 801b9a2:	899b      	ldrh	r3, [r3, #12]
 801b9a4:	3308      	adds	r3, #8
 801b9a6:	b29b      	uxth	r3, r3
 801b9a8:	b21b      	sxth	r3, r3
 801b9aa:	4619      	mov	r1, r3
 801b9ac:	6878      	ldr	r0, [r7, #4]
 801b9ae:	f7f9 f802 	bl	80149b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b9b2:	2103      	movs	r1, #3
 801b9b4:	6878      	ldr	r0, [r7, #4]
 801b9b6:	f001 fdc7 	bl	801d548 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801b9ba:	4b0d      	ldr	r3, [pc, #52]	@ (801b9f0 <udp_input+0x3e4>)
 801b9bc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801b9c0:	3301      	adds	r3, #1
 801b9c2:	b29a      	uxth	r2, r3
 801b9c4:	4b0a      	ldr	r3, [pc, #40]	@ (801b9f0 <udp_input+0x3e4>)
 801b9c6:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801b9ca:	4b09      	ldr	r3, [pc, #36]	@ (801b9f0 <udp_input+0x3e4>)
 801b9cc:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b9d0:	3301      	adds	r3, #1
 801b9d2:	b29a      	uxth	r2, r3
 801b9d4:	4b06      	ldr	r3, [pc, #24]	@ (801b9f0 <udp_input+0x3e4>)
 801b9d6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801b9da:	6878      	ldr	r0, [r7, #4]
 801b9dc:	f7f8 fffe 	bl	80149dc <pbuf_free>
  return;
 801b9e0:	e003      	b.n	801b9ea <udp_input+0x3de>
    pbuf_free(p);
 801b9e2:	6878      	ldr	r0, [r7, #4]
 801b9e4:	f7f8 fffa 	bl	80149dc <pbuf_free>
  return;
 801b9e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b9ea:	372c      	adds	r7, #44	@ 0x2c
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	bd90      	pop	{r4, r7, pc}
 801b9f0:	2002d36c 	.word	0x2002d36c
 801b9f4:	200270fc 	.word	0x200270fc
 801b9f8:	08024e48 	.word	0x08024e48
 801b9fc:	08024cd4 	.word	0x08024cd4
 801ba00:	08024e68 	.word	0x08024e68
 801ba04:	08024d28 	.word	0x08024d28
 801ba08:	2002710c 	.word	0x2002710c
 801ba0c:	08024e84 	.word	0x08024e84

0801ba10 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b082      	sub	sp, #8
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
 801ba18:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d109      	bne.n	801ba34 <udp_send+0x24>
 801ba20:	4b11      	ldr	r3, [pc, #68]	@ (801ba68 <udp_send+0x58>)
 801ba22:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801ba26:	4911      	ldr	r1, [pc, #68]	@ (801ba6c <udp_send+0x5c>)
 801ba28:	4811      	ldr	r0, [pc, #68]	@ (801ba70 <udp_send+0x60>)
 801ba2a:	f004 fe33 	bl	8020694 <iprintf>
 801ba2e:	f06f 030f 	mvn.w	r3, #15
 801ba32:	e015      	b.n	801ba60 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801ba34:	683b      	ldr	r3, [r7, #0]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d109      	bne.n	801ba4e <udp_send+0x3e>
 801ba3a:	4b0b      	ldr	r3, [pc, #44]	@ (801ba68 <udp_send+0x58>)
 801ba3c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801ba40:	490c      	ldr	r1, [pc, #48]	@ (801ba74 <udp_send+0x64>)
 801ba42:	480b      	ldr	r0, [pc, #44]	@ (801ba70 <udp_send+0x60>)
 801ba44:	f004 fe26 	bl	8020694 <iprintf>
 801ba48:	f06f 030f 	mvn.w	r3, #15
 801ba4c:	e008      	b.n	801ba60 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	1d1a      	adds	r2, r3, #4
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	8a9b      	ldrh	r3, [r3, #20]
 801ba56:	6839      	ldr	r1, [r7, #0]
 801ba58:	6878      	ldr	r0, [r7, #4]
 801ba5a:	f000 f80d 	bl	801ba78 <udp_sendto>
 801ba5e:	4603      	mov	r3, r0
}
 801ba60:	4618      	mov	r0, r3
 801ba62:	3708      	adds	r7, #8
 801ba64:	46bd      	mov	sp, r7
 801ba66:	bd80      	pop	{r7, pc}
 801ba68:	08024cd4 	.word	0x08024cd4
 801ba6c:	08024e9c 	.word	0x08024e9c
 801ba70:	08024d28 	.word	0x08024d28
 801ba74:	08024eb4 	.word	0x08024eb4

0801ba78 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b088      	sub	sp, #32
 801ba7c:	af02      	add	r7, sp, #8
 801ba7e:	60f8      	str	r0, [r7, #12]
 801ba80:	60b9      	str	r1, [r7, #8]
 801ba82:	607a      	str	r2, [r7, #4]
 801ba84:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d109      	bne.n	801baa0 <udp_sendto+0x28>
 801ba8c:	4b3f      	ldr	r3, [pc, #252]	@ (801bb8c <udp_sendto+0x114>)
 801ba8e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801ba92:	493f      	ldr	r1, [pc, #252]	@ (801bb90 <udp_sendto+0x118>)
 801ba94:	483f      	ldr	r0, [pc, #252]	@ (801bb94 <udp_sendto+0x11c>)
 801ba96:	f004 fdfd 	bl	8020694 <iprintf>
 801ba9a:	f06f 030f 	mvn.w	r3, #15
 801ba9e:	e070      	b.n	801bb82 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801baa0:	68bb      	ldr	r3, [r7, #8]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d109      	bne.n	801baba <udp_sendto+0x42>
 801baa6:	4b39      	ldr	r3, [pc, #228]	@ (801bb8c <udp_sendto+0x114>)
 801baa8:	f240 2219 	movw	r2, #537	@ 0x219
 801baac:	493a      	ldr	r1, [pc, #232]	@ (801bb98 <udp_sendto+0x120>)
 801baae:	4839      	ldr	r0, [pc, #228]	@ (801bb94 <udp_sendto+0x11c>)
 801bab0:	f004 fdf0 	bl	8020694 <iprintf>
 801bab4:	f06f 030f 	mvn.w	r3, #15
 801bab8:	e063      	b.n	801bb82 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d109      	bne.n	801bad4 <udp_sendto+0x5c>
 801bac0:	4b32      	ldr	r3, [pc, #200]	@ (801bb8c <udp_sendto+0x114>)
 801bac2:	f240 221a 	movw	r2, #538	@ 0x21a
 801bac6:	4935      	ldr	r1, [pc, #212]	@ (801bb9c <udp_sendto+0x124>)
 801bac8:	4832      	ldr	r0, [pc, #200]	@ (801bb94 <udp_sendto+0x11c>)
 801baca:	f004 fde3 	bl	8020694 <iprintf>
 801bace:	f06f 030f 	mvn.w	r3, #15
 801bad2:	e056      	b.n	801bb82 <udp_sendto+0x10a>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801bad4:	4832      	ldr	r0, [pc, #200]	@ (801bba0 <udp_sendto+0x128>)
 801bad6:	f004 fe4d 	bl	8020774 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	7a1b      	ldrb	r3, [r3, #8]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d006      	beq.n	801baf0 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	7a1b      	ldrb	r3, [r3, #8]
 801bae6:	4618      	mov	r0, r3
 801bae8:	f7f8 fb9e 	bl	8014228 <netif_get_by_index>
 801baec:	6178      	str	r0, [r7, #20]
 801baee:	e003      	b.n	801baf8 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801baf0:	6878      	ldr	r0, [r7, #4]
 801baf2:	f001 fdfd 	bl	801d6f0 <ip4_route>
 801baf6:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801baf8:	697b      	ldr	r3, [r7, #20]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d137      	bne.n	801bb6e <udp_sendto+0xf6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801bafe:	4829      	ldr	r0, [pc, #164]	@ (801bba4 <udp_sendto+0x12c>)
 801bb00:	f004 fdc8 	bl	8020694 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	2b00      	cmp	r3, #0
 801bb08:	d003      	beq.n	801bb12 <udp_sendto+0x9a>
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	781b      	ldrb	r3, [r3, #0]
 801bb0e:	4619      	mov	r1, r3
 801bb10:	e000      	b.n	801bb14 <udp_sendto+0x9c>
 801bb12:	2100      	movs	r1, #0
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d004      	beq.n	801bb24 <udp_sendto+0xac>
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	3301      	adds	r3, #1
 801bb1e:	781b      	ldrb	r3, [r3, #0]
 801bb20:	461a      	mov	r2, r3
 801bb22:	e000      	b.n	801bb26 <udp_sendto+0xae>
 801bb24:	2200      	movs	r2, #0
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d004      	beq.n	801bb36 <udp_sendto+0xbe>
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	3302      	adds	r3, #2
 801bb30:	781b      	ldrb	r3, [r3, #0]
 801bb32:	4618      	mov	r0, r3
 801bb34:	e000      	b.n	801bb38 <udp_sendto+0xc0>
 801bb36:	2000      	movs	r0, #0
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d003      	beq.n	801bb46 <udp_sendto+0xce>
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	3303      	adds	r3, #3
 801bb42:	781b      	ldrb	r3, [r3, #0]
 801bb44:	e000      	b.n	801bb48 <udp_sendto+0xd0>
 801bb46:	2300      	movs	r3, #0
 801bb48:	9300      	str	r3, [sp, #0]
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	4816      	ldr	r0, [pc, #88]	@ (801bba8 <udp_sendto+0x130>)
 801bb4e:	f004 fda1 	bl	8020694 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801bb52:	200a      	movs	r0, #10
 801bb54:	f004 fdb0 	bl	80206b8 <putchar>
    UDP_STATS_INC(udp.rterr);
 801bb58:	4b14      	ldr	r3, [pc, #80]	@ (801bbac <udp_sendto+0x134>)
 801bb5a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801bb5e:	3301      	adds	r3, #1
 801bb60:	b29a      	uxth	r2, r3
 801bb62:	4b12      	ldr	r3, [pc, #72]	@ (801bbac <udp_sendto+0x134>)
 801bb64:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801bb68:	f06f 0303 	mvn.w	r3, #3
 801bb6c:	e009      	b.n	801bb82 <udp_sendto+0x10a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bb6e:	887a      	ldrh	r2, [r7, #2]
 801bb70:	697b      	ldr	r3, [r7, #20]
 801bb72:	9300      	str	r3, [sp, #0]
 801bb74:	4613      	mov	r3, r2
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	68b9      	ldr	r1, [r7, #8]
 801bb7a:	68f8      	ldr	r0, [r7, #12]
 801bb7c:	f000 f818 	bl	801bbb0 <udp_sendto_if>
 801bb80:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bb82:	4618      	mov	r0, r3
 801bb84:	3718      	adds	r7, #24
 801bb86:	46bd      	mov	sp, r7
 801bb88:	bd80      	pop	{r7, pc}
 801bb8a:	bf00      	nop
 801bb8c:	08024cd4 	.word	0x08024cd4
 801bb90:	08024ecc 	.word	0x08024ecc
 801bb94:	08024d28 	.word	0x08024d28
 801bb98:	08024ee4 	.word	0x08024ee4
 801bb9c:	08024f00 	.word	0x08024f00
 801bba0:	08024f1c 	.word	0x08024f1c
 801bba4:	08024f28 	.word	0x08024f28
 801bba8:	08024e18 	.word	0x08024e18
 801bbac:	2002d36c 	.word	0x2002d36c

0801bbb0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bbb0:	b580      	push	{r7, lr}
 801bbb2:	b088      	sub	sp, #32
 801bbb4:	af02      	add	r7, sp, #8
 801bbb6:	60f8      	str	r0, [r7, #12]
 801bbb8:	60b9      	str	r1, [r7, #8]
 801bbba:	607a      	str	r2, [r7, #4]
 801bbbc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d109      	bne.n	801bbd8 <udp_sendto_if+0x28>
 801bbc4:	4b2e      	ldr	r3, [pc, #184]	@ (801bc80 <udp_sendto_if+0xd0>)
 801bbc6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bbca:	492e      	ldr	r1, [pc, #184]	@ (801bc84 <udp_sendto_if+0xd4>)
 801bbcc:	482e      	ldr	r0, [pc, #184]	@ (801bc88 <udp_sendto_if+0xd8>)
 801bbce:	f004 fd61 	bl	8020694 <iprintf>
 801bbd2:	f06f 030f 	mvn.w	r3, #15
 801bbd6:	e04f      	b.n	801bc78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bbd8:	68bb      	ldr	r3, [r7, #8]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d109      	bne.n	801bbf2 <udp_sendto_if+0x42>
 801bbde:	4b28      	ldr	r3, [pc, #160]	@ (801bc80 <udp_sendto_if+0xd0>)
 801bbe0:	f240 2281 	movw	r2, #641	@ 0x281
 801bbe4:	4929      	ldr	r1, [pc, #164]	@ (801bc8c <udp_sendto_if+0xdc>)
 801bbe6:	4828      	ldr	r0, [pc, #160]	@ (801bc88 <udp_sendto_if+0xd8>)
 801bbe8:	f004 fd54 	bl	8020694 <iprintf>
 801bbec:	f06f 030f 	mvn.w	r3, #15
 801bbf0:	e042      	b.n	801bc78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d109      	bne.n	801bc0c <udp_sendto_if+0x5c>
 801bbf8:	4b21      	ldr	r3, [pc, #132]	@ (801bc80 <udp_sendto_if+0xd0>)
 801bbfa:	f240 2282 	movw	r2, #642	@ 0x282
 801bbfe:	4924      	ldr	r1, [pc, #144]	@ (801bc90 <udp_sendto_if+0xe0>)
 801bc00:	4821      	ldr	r0, [pc, #132]	@ (801bc88 <udp_sendto_if+0xd8>)
 801bc02:	f004 fd47 	bl	8020694 <iprintf>
 801bc06:	f06f 030f 	mvn.w	r3, #15
 801bc0a:	e035      	b.n	801bc78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bc0c:	6a3b      	ldr	r3, [r7, #32]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d109      	bne.n	801bc26 <udp_sendto_if+0x76>
 801bc12:	4b1b      	ldr	r3, [pc, #108]	@ (801bc80 <udp_sendto_if+0xd0>)
 801bc14:	f240 2283 	movw	r2, #643	@ 0x283
 801bc18:	491e      	ldr	r1, [pc, #120]	@ (801bc94 <udp_sendto_if+0xe4>)
 801bc1a:	481b      	ldr	r0, [pc, #108]	@ (801bc88 <udp_sendto_if+0xd8>)
 801bc1c:	f004 fd3a 	bl	8020694 <iprintf>
 801bc20:	f06f 030f 	mvn.w	r3, #15
 801bc24:	e028      	b.n	801bc78 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d009      	beq.n	801bc40 <udp_sendto_if+0x90>
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d005      	beq.n	801bc40 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bc3c:	2be0      	cmp	r3, #224	@ 0xe0
 801bc3e:	d103      	bne.n	801bc48 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801bc40:	6a3b      	ldr	r3, [r7, #32]
 801bc42:	3304      	adds	r3, #4
 801bc44:	617b      	str	r3, [r7, #20]
 801bc46:	e00b      	b.n	801bc60 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bc48:	68fb      	ldr	r3, [r7, #12]
 801bc4a:	681a      	ldr	r2, [r3, #0]
 801bc4c:	6a3b      	ldr	r3, [r7, #32]
 801bc4e:	3304      	adds	r3, #4
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	429a      	cmp	r2, r3
 801bc54:	d002      	beq.n	801bc5c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bc56:	f06f 0303 	mvn.w	r3, #3
 801bc5a:	e00d      	b.n	801bc78 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bc60:	887a      	ldrh	r2, [r7, #2]
 801bc62:	697b      	ldr	r3, [r7, #20]
 801bc64:	9301      	str	r3, [sp, #4]
 801bc66:	6a3b      	ldr	r3, [r7, #32]
 801bc68:	9300      	str	r3, [sp, #0]
 801bc6a:	4613      	mov	r3, r2
 801bc6c:	687a      	ldr	r2, [r7, #4]
 801bc6e:	68b9      	ldr	r1, [r7, #8]
 801bc70:	68f8      	ldr	r0, [r7, #12]
 801bc72:	f000 f811 	bl	801bc98 <udp_sendto_if_src>
 801bc76:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bc78:	4618      	mov	r0, r3
 801bc7a:	3718      	adds	r7, #24
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	bd80      	pop	{r7, pc}
 801bc80:	08024cd4 	.word	0x08024cd4
 801bc84:	08024f40 	.word	0x08024f40
 801bc88:	08024d28 	.word	0x08024d28
 801bc8c:	08024f5c 	.word	0x08024f5c
 801bc90:	08024f78 	.word	0x08024f78
 801bc94:	08024f98 	.word	0x08024f98

0801bc98 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bc98:	b580      	push	{r7, lr}
 801bc9a:	b08c      	sub	sp, #48	@ 0x30
 801bc9c:	af04      	add	r7, sp, #16
 801bc9e:	60f8      	str	r0, [r7, #12]
 801bca0:	60b9      	str	r1, [r7, #8]
 801bca2:	607a      	str	r2, [r7, #4]
 801bca4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d109      	bne.n	801bcc0 <udp_sendto_if_src+0x28>
 801bcac:	4b7e      	ldr	r3, [pc, #504]	@ (801bea8 <udp_sendto_if_src+0x210>)
 801bcae:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801bcb2:	497e      	ldr	r1, [pc, #504]	@ (801beac <udp_sendto_if_src+0x214>)
 801bcb4:	487e      	ldr	r0, [pc, #504]	@ (801beb0 <udp_sendto_if_src+0x218>)
 801bcb6:	f004 fced 	bl	8020694 <iprintf>
 801bcba:	f06f 030f 	mvn.w	r3, #15
 801bcbe:	e0ee      	b.n	801be9e <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bcc0:	68bb      	ldr	r3, [r7, #8]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d109      	bne.n	801bcda <udp_sendto_if_src+0x42>
 801bcc6:	4b78      	ldr	r3, [pc, #480]	@ (801bea8 <udp_sendto_if_src+0x210>)
 801bcc8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801bccc:	4979      	ldr	r1, [pc, #484]	@ (801beb4 <udp_sendto_if_src+0x21c>)
 801bcce:	4878      	ldr	r0, [pc, #480]	@ (801beb0 <udp_sendto_if_src+0x218>)
 801bcd0:	f004 fce0 	bl	8020694 <iprintf>
 801bcd4:	f06f 030f 	mvn.w	r3, #15
 801bcd8:	e0e1      	b.n	801be9e <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d109      	bne.n	801bcf4 <udp_sendto_if_src+0x5c>
 801bce0:	4b71      	ldr	r3, [pc, #452]	@ (801bea8 <udp_sendto_if_src+0x210>)
 801bce2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801bce6:	4974      	ldr	r1, [pc, #464]	@ (801beb8 <udp_sendto_if_src+0x220>)
 801bce8:	4871      	ldr	r0, [pc, #452]	@ (801beb0 <udp_sendto_if_src+0x218>)
 801bcea:	f004 fcd3 	bl	8020694 <iprintf>
 801bcee:	f06f 030f 	mvn.w	r3, #15
 801bcf2:	e0d4      	b.n	801be9e <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d109      	bne.n	801bd0e <udp_sendto_if_src+0x76>
 801bcfa:	4b6b      	ldr	r3, [pc, #428]	@ (801bea8 <udp_sendto_if_src+0x210>)
 801bcfc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801bd00:	496e      	ldr	r1, [pc, #440]	@ (801bebc <udp_sendto_if_src+0x224>)
 801bd02:	486b      	ldr	r0, [pc, #428]	@ (801beb0 <udp_sendto_if_src+0x218>)
 801bd04:	f004 fcc6 	bl	8020694 <iprintf>
 801bd08:	f06f 030f 	mvn.w	r3, #15
 801bd0c:	e0c7      	b.n	801be9e <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d109      	bne.n	801bd28 <udp_sendto_if_src+0x90>
 801bd14:	4b64      	ldr	r3, [pc, #400]	@ (801bea8 <udp_sendto_if_src+0x210>)
 801bd16:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801bd1a:	4969      	ldr	r1, [pc, #420]	@ (801bec0 <udp_sendto_if_src+0x228>)
 801bd1c:	4864      	ldr	r0, [pc, #400]	@ (801beb0 <udp_sendto_if_src+0x218>)
 801bd1e:	f004 fcb9 	bl	8020694 <iprintf>
 801bd22:	f06f 030f 	mvn.w	r3, #15
 801bd26:	e0ba      	b.n	801be9e <udp_sendto_if_src+0x206>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	8a5b      	ldrh	r3, [r3, #18]
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d115      	bne.n	801bd5c <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801bd30:	4864      	ldr	r0, [pc, #400]	@ (801bec4 <udp_sendto_if_src+0x22c>)
 801bd32:	f004 fd1f 	bl	8020774 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bd36:	68f9      	ldr	r1, [r7, #12]
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	8a5b      	ldrh	r3, [r3, #18]
 801bd3c:	461a      	mov	r2, r3
 801bd3e:	68f8      	ldr	r0, [r7, #12]
 801bd40:	f000 f8d6 	bl	801bef0 <udp_bind>
 801bd44:	4603      	mov	r3, r0
 801bd46:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bd48:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d005      	beq.n	801bd5c <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801bd50:	485d      	ldr	r0, [pc, #372]	@ (801bec8 <udp_sendto_if_src+0x230>)
 801bd52:	f004 fd0f 	bl	8020774 <puts>
      return err;
 801bd56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bd5a:	e0a0      	b.n	801be9e <udp_sendto_if_src+0x206>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bd5c:	68bb      	ldr	r3, [r7, #8]
 801bd5e:	891b      	ldrh	r3, [r3, #8]
 801bd60:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801bd64:	4293      	cmp	r3, r2
 801bd66:	d902      	bls.n	801bd6e <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801bd68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bd6c:	e097      	b.n	801be9e <udp_sendto_if_src+0x206>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bd6e:	2108      	movs	r1, #8
 801bd70:	68b8      	ldr	r0, [r7, #8]
 801bd72:	f7f8 fd95 	bl	80148a0 <pbuf_add_header>
 801bd76:	4603      	mov	r3, r0
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d01d      	beq.n	801bdb8 <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bd7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bd80:	2108      	movs	r1, #8
 801bd82:	2022      	movs	r0, #34	@ 0x22
 801bd84:	f7f8 fafe 	bl	8014384 <pbuf_alloc>
 801bd88:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bd8a:	69fb      	ldr	r3, [r7, #28]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d105      	bne.n	801bd9c <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 801bd90:	484e      	ldr	r0, [pc, #312]	@ (801becc <udp_sendto_if_src+0x234>)
 801bd92:	f004 fcef 	bl	8020774 <puts>
      return ERR_MEM;
 801bd96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bd9a:	e080      	b.n	801be9e <udp_sendto_if_src+0x206>
    }
    if (p->tot_len != 0) {
 801bd9c:	68bb      	ldr	r3, [r7, #8]
 801bd9e:	891b      	ldrh	r3, [r3, #8]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d003      	beq.n	801bdac <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bda4:	68b9      	ldr	r1, [r7, #8]
 801bda6:	69f8      	ldr	r0, [r7, #28]
 801bda8:	f7f8 ff54 	bl	8014c54 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 801bdac:	68ba      	ldr	r2, [r7, #8]
 801bdae:	69f9      	ldr	r1, [r7, #28]
 801bdb0:	4847      	ldr	r0, [pc, #284]	@ (801bed0 <udp_sendto_if_src+0x238>)
 801bdb2:	f004 fc6f 	bl	8020694 <iprintf>
 801bdb6:	e005      	b.n	801bdc4 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801bdb8:	68bb      	ldr	r3, [r7, #8]
 801bdba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 801bdbc:	68b9      	ldr	r1, [r7, #8]
 801bdbe:	4845      	ldr	r0, [pc, #276]	@ (801bed4 <udp_sendto_if_src+0x23c>)
 801bdc0:	f004 fc68 	bl	8020694 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bdc4:	69fb      	ldr	r3, [r7, #28]
 801bdc6:	895b      	ldrh	r3, [r3, #10]
 801bdc8:	2b07      	cmp	r3, #7
 801bdca:	d806      	bhi.n	801bdda <udp_sendto_if_src+0x142>
 801bdcc:	4b36      	ldr	r3, [pc, #216]	@ (801bea8 <udp_sendto_if_src+0x210>)
 801bdce:	f240 320d 	movw	r2, #781	@ 0x30d
 801bdd2:	4941      	ldr	r1, [pc, #260]	@ (801bed8 <udp_sendto_if_src+0x240>)
 801bdd4:	4836      	ldr	r0, [pc, #216]	@ (801beb0 <udp_sendto_if_src+0x218>)
 801bdd6:	f004 fc5d 	bl	8020694 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801bdda:	69fb      	ldr	r3, [r7, #28]
 801bddc:	685b      	ldr	r3, [r3, #4]
 801bdde:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	8a5b      	ldrh	r3, [r3, #18]
 801bde4:	4618      	mov	r0, r3
 801bde6:	f7f6 ffcb 	bl	8012d80 <lwip_htons>
 801bdea:	4603      	mov	r3, r0
 801bdec:	461a      	mov	r2, r3
 801bdee:	697b      	ldr	r3, [r7, #20]
 801bdf0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801bdf2:	887b      	ldrh	r3, [r7, #2]
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	f7f6 ffc3 	bl	8012d80 <lwip_htons>
 801bdfa:	4603      	mov	r3, r0
 801bdfc:	461a      	mov	r2, r3
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801be02:	697b      	ldr	r3, [r7, #20]
 801be04:	2200      	movs	r2, #0
 801be06:	719a      	strb	r2, [r3, #6]
 801be08:	2200      	movs	r2, #0
 801be0a:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801be0c:	69fb      	ldr	r3, [r7, #28]
 801be0e:	891b      	ldrh	r3, [r3, #8]
 801be10:	4619      	mov	r1, r3
 801be12:	4832      	ldr	r0, [pc, #200]	@ (801bedc <udp_sendto_if_src+0x244>)
 801be14:	f004 fc3e 	bl	8020694 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801be18:	69fb      	ldr	r3, [r7, #28]
 801be1a:	891b      	ldrh	r3, [r3, #8]
 801be1c:	4619      	mov	r1, r3
 801be1e:	4830      	ldr	r0, [pc, #192]	@ (801bee0 <udp_sendto_if_src+0x248>)
 801be20:	f004 fc38 	bl	8020694 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801be24:	69fb      	ldr	r3, [r7, #28]
 801be26:	891b      	ldrh	r3, [r3, #8]
 801be28:	4618      	mov	r0, r3
 801be2a:	f7f6 ffa9 	bl	8012d80 <lwip_htons>
 801be2e:	4603      	mov	r3, r0
 801be30:	461a      	mov	r2, r3
 801be32:	697b      	ldr	r3, [r7, #20]
 801be34:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801be36:	2311      	movs	r3, #17
 801be38:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801be3a:	68fb      	ldr	r3, [r7, #12]
 801be3c:	7adb      	ldrb	r3, [r3, #11]
 801be3e:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801be40:	697b      	ldr	r3, [r7, #20]
 801be42:	88db      	ldrh	r3, [r3, #6]
 801be44:	b29b      	uxth	r3, r3
 801be46:	4619      	mov	r1, r3
 801be48:	4826      	ldr	r0, [pc, #152]	@ (801bee4 <udp_sendto_if_src+0x24c>)
 801be4a:	f004 fc23 	bl	8020694 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801be4e:	7cfb      	ldrb	r3, [r7, #19]
 801be50:	4619      	mov	r1, r3
 801be52:	4825      	ldr	r0, [pc, #148]	@ (801bee8 <udp_sendto_if_src+0x250>)
 801be54:	f004 fc1e 	bl	8020694 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	7a9b      	ldrb	r3, [r3, #10]
 801be5c:	7cb9      	ldrb	r1, [r7, #18]
 801be5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801be60:	9202      	str	r2, [sp, #8]
 801be62:	7cfa      	ldrb	r2, [r7, #19]
 801be64:	9201      	str	r2, [sp, #4]
 801be66:	9300      	str	r3, [sp, #0]
 801be68:	460b      	mov	r3, r1
 801be6a:	687a      	ldr	r2, [r7, #4]
 801be6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801be6e:	69f8      	ldr	r0, [r7, #28]
 801be70:	f001 fe7e 	bl	801db70 <ip4_output_if_src>
 801be74:	4603      	mov	r3, r0
 801be76:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801be78:	69fa      	ldr	r2, [r7, #28]
 801be7a:	68bb      	ldr	r3, [r7, #8]
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d004      	beq.n	801be8a <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 801be80:	69f8      	ldr	r0, [r7, #28]
 801be82:	f7f8 fdab 	bl	80149dc <pbuf_free>
    q = NULL;
 801be86:	2300      	movs	r3, #0
 801be88:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801be8a:	4b18      	ldr	r3, [pc, #96]	@ (801beec <udp_sendto_if_src+0x254>)
 801be8c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801be90:	3301      	adds	r3, #1
 801be92:	b29a      	uxth	r2, r3
 801be94:	4b15      	ldr	r3, [pc, #84]	@ (801beec <udp_sendto_if_src+0x254>)
 801be96:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801be9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801be9e:	4618      	mov	r0, r3
 801bea0:	3720      	adds	r7, #32
 801bea2:	46bd      	mov	sp, r7
 801bea4:	bd80      	pop	{r7, pc}
 801bea6:	bf00      	nop
 801bea8:	08024cd4 	.word	0x08024cd4
 801beac:	08024fb8 	.word	0x08024fb8
 801beb0:	08024d28 	.word	0x08024d28
 801beb4:	08024fd8 	.word	0x08024fd8
 801beb8:	08024ff8 	.word	0x08024ff8
 801bebc:	0802501c 	.word	0x0802501c
 801bec0:	08025040 	.word	0x08025040
 801bec4:	08025064 	.word	0x08025064
 801bec8:	08025094 	.word	0x08025094
 801becc:	080250b8 	.word	0x080250b8
 801bed0:	080250dc 	.word	0x080250dc
 801bed4:	08025114 	.word	0x08025114
 801bed8:	08025140 	.word	0x08025140
 801bedc:	08025170 	.word	0x08025170
 801bee0:	0802519c 	.word	0x0802519c
 801bee4:	080251c0 	.word	0x080251c0
 801bee8:	080251e0 	.word	0x080251e0
 801beec:	2002d36c 	.word	0x2002d36c

0801bef0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bef0:	b580      	push	{r7, lr}
 801bef2:	b088      	sub	sp, #32
 801bef4:	af02      	add	r7, sp, #8
 801bef6:	60f8      	str	r0, [r7, #12]
 801bef8:	60b9      	str	r1, [r7, #8]
 801befa:	4613      	mov	r3, r2
 801befc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801befe:	68bb      	ldr	r3, [r7, #8]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d101      	bne.n	801bf08 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801bf04:	4b65      	ldr	r3, [pc, #404]	@ (801c09c <udp_bind+0x1ac>)
 801bf06:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d109      	bne.n	801bf22 <udp_bind+0x32>
 801bf0e:	4b64      	ldr	r3, [pc, #400]	@ (801c0a0 <udp_bind+0x1b0>)
 801bf10:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801bf14:	4963      	ldr	r1, [pc, #396]	@ (801c0a4 <udp_bind+0x1b4>)
 801bf16:	4864      	ldr	r0, [pc, #400]	@ (801c0a8 <udp_bind+0x1b8>)
 801bf18:	f004 fbbc 	bl	8020694 <iprintf>
 801bf1c:	f06f 030f 	mvn.w	r3, #15
 801bf20:	e0b7      	b.n	801c092 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801bf22:	4862      	ldr	r0, [pc, #392]	@ (801c0ac <udp_bind+0x1bc>)
 801bf24:	f004 fbb6 	bl	8020694 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801bf28:	68bb      	ldr	r3, [r7, #8]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d003      	beq.n	801bf36 <udp_bind+0x46>
 801bf2e:	68bb      	ldr	r3, [r7, #8]
 801bf30:	781b      	ldrb	r3, [r3, #0]
 801bf32:	4619      	mov	r1, r3
 801bf34:	e000      	b.n	801bf38 <udp_bind+0x48>
 801bf36:	2100      	movs	r1, #0
 801bf38:	68bb      	ldr	r3, [r7, #8]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d004      	beq.n	801bf48 <udp_bind+0x58>
 801bf3e:	68bb      	ldr	r3, [r7, #8]
 801bf40:	3301      	adds	r3, #1
 801bf42:	781b      	ldrb	r3, [r3, #0]
 801bf44:	461a      	mov	r2, r3
 801bf46:	e000      	b.n	801bf4a <udp_bind+0x5a>
 801bf48:	2200      	movs	r2, #0
 801bf4a:	68bb      	ldr	r3, [r7, #8]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d004      	beq.n	801bf5a <udp_bind+0x6a>
 801bf50:	68bb      	ldr	r3, [r7, #8]
 801bf52:	3302      	adds	r3, #2
 801bf54:	781b      	ldrb	r3, [r3, #0]
 801bf56:	4618      	mov	r0, r3
 801bf58:	e000      	b.n	801bf5c <udp_bind+0x6c>
 801bf5a:	2000      	movs	r0, #0
 801bf5c:	68bb      	ldr	r3, [r7, #8]
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d003      	beq.n	801bf6a <udp_bind+0x7a>
 801bf62:	68bb      	ldr	r3, [r7, #8]
 801bf64:	3303      	adds	r3, #3
 801bf66:	781b      	ldrb	r3, [r3, #0]
 801bf68:	e000      	b.n	801bf6c <udp_bind+0x7c>
 801bf6a:	2300      	movs	r3, #0
 801bf6c:	9300      	str	r3, [sp, #0]
 801bf6e:	4603      	mov	r3, r0
 801bf70:	484f      	ldr	r0, [pc, #316]	@ (801c0b0 <udp_bind+0x1c0>)
 801bf72:	f004 fb8f 	bl	8020694 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801bf76:	88fb      	ldrh	r3, [r7, #6]
 801bf78:	4619      	mov	r1, r3
 801bf7a:	484e      	ldr	r0, [pc, #312]	@ (801c0b4 <udp_bind+0x1c4>)
 801bf7c:	f004 fb8a 	bl	8020694 <iprintf>

  rebind = 0;
 801bf80:	2300      	movs	r3, #0
 801bf82:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf84:	4b4c      	ldr	r3, [pc, #304]	@ (801c0b8 <udp_bind+0x1c8>)
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	617b      	str	r3, [r7, #20]
 801bf8a:	e009      	b.n	801bfa0 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801bf8c:	68fa      	ldr	r2, [r7, #12]
 801bf8e:	697b      	ldr	r3, [r7, #20]
 801bf90:	429a      	cmp	r2, r3
 801bf92:	d102      	bne.n	801bf9a <udp_bind+0xaa>
      rebind = 1;
 801bf94:	2301      	movs	r3, #1
 801bf96:	74fb      	strb	r3, [r7, #19]
      break;
 801bf98:	e005      	b.n	801bfa6 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf9a:	697b      	ldr	r3, [r7, #20]
 801bf9c:	68db      	ldr	r3, [r3, #12]
 801bf9e:	617b      	str	r3, [r7, #20]
 801bfa0:	697b      	ldr	r3, [r7, #20]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d1f2      	bne.n	801bf8c <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801bfa6:	88fb      	ldrh	r3, [r7, #6]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d10c      	bne.n	801bfc6 <udp_bind+0xd6>
    port = udp_new_port();
 801bfac:	f7ff fa92 	bl	801b4d4 <udp_new_port>
 801bfb0:	4603      	mov	r3, r0
 801bfb2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801bfb4:	88fb      	ldrh	r3, [r7, #6]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d134      	bne.n	801c024 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801bfba:	4840      	ldr	r0, [pc, #256]	@ (801c0bc <udp_bind+0x1cc>)
 801bfbc:	f004 fbda 	bl	8020774 <puts>
      return ERR_USE;
 801bfc0:	f06f 0307 	mvn.w	r3, #7
 801bfc4:	e065      	b.n	801c092 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bfc6:	4b3c      	ldr	r3, [pc, #240]	@ (801c0b8 <udp_bind+0x1c8>)
 801bfc8:	681b      	ldr	r3, [r3, #0]
 801bfca:	617b      	str	r3, [r7, #20]
 801bfcc:	e027      	b.n	801c01e <udp_bind+0x12e>
      if (pcb != ipcb) {
 801bfce:	68fa      	ldr	r2, [r7, #12]
 801bfd0:	697b      	ldr	r3, [r7, #20]
 801bfd2:	429a      	cmp	r2, r3
 801bfd4:	d020      	beq.n	801c018 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	8a5b      	ldrh	r3, [r3, #18]
 801bfda:	88fa      	ldrh	r2, [r7, #6]
 801bfdc:	429a      	cmp	r2, r3
 801bfde:	d11b      	bne.n	801c018 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bfe0:	697b      	ldr	r3, [r7, #20]
 801bfe2:	681a      	ldr	r2, [r3, #0]
 801bfe4:	68bb      	ldr	r3, [r7, #8]
 801bfe6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801bfe8:	429a      	cmp	r2, r3
 801bfea:	d00d      	beq.n	801c008 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bfec:	68bb      	ldr	r3, [r7, #8]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d00a      	beq.n	801c008 <udp_bind+0x118>
 801bff2:	68bb      	ldr	r3, [r7, #8]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d006      	beq.n	801c008 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801bffa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d003      	beq.n	801c008 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c000:	697b      	ldr	r3, [r7, #20]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d107      	bne.n	801c018 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801c008:	88fb      	ldrh	r3, [r7, #6]
 801c00a:	4619      	mov	r1, r3
 801c00c:	482c      	ldr	r0, [pc, #176]	@ (801c0c0 <udp_bind+0x1d0>)
 801c00e:	f004 fb41 	bl	8020694 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c012:	f06f 0307 	mvn.w	r3, #7
 801c016:	e03c      	b.n	801c092 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c018:	697b      	ldr	r3, [r7, #20]
 801c01a:	68db      	ldr	r3, [r3, #12]
 801c01c:	617b      	str	r3, [r7, #20]
 801c01e:	697b      	ldr	r3, [r7, #20]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d1d4      	bne.n	801bfce <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c024:	68bb      	ldr	r3, [r7, #8]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d002      	beq.n	801c030 <udp_bind+0x140>
 801c02a:	68bb      	ldr	r3, [r7, #8]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	e000      	b.n	801c032 <udp_bind+0x142>
 801c030:	2300      	movs	r3, #0
 801c032:	68fa      	ldr	r2, [r7, #12]
 801c034:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	88fa      	ldrh	r2, [r7, #6]
 801c03a:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c03c:	7cfb      	ldrb	r3, [r7, #19]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d106      	bne.n	801c050 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c042:	4b1d      	ldr	r3, [pc, #116]	@ (801c0b8 <udp_bind+0x1c8>)
 801c044:	681a      	ldr	r2, [r3, #0]
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c04a:	4a1b      	ldr	r2, [pc, #108]	@ (801c0b8 <udp_bind+0x1c8>)
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801c050:	481c      	ldr	r0, [pc, #112]	@ (801c0c4 <udp_bind+0x1d4>)
 801c052:	f004 fb1f 	bl	8020694 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	681b      	ldr	r3, [r3, #0]
 801c05a:	b2db      	uxtb	r3, r3
 801c05c:	4619      	mov	r1, r3
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	0a1b      	lsrs	r3, r3, #8
 801c064:	b2db      	uxtb	r3, r3
 801c066:	461a      	mov	r2, r3
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	0c1b      	lsrs	r3, r3, #16
 801c06e:	b2db      	uxtb	r3, r3
 801c070:	4618      	mov	r0, r3
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	0e1b      	lsrs	r3, r3, #24
 801c078:	b2db      	uxtb	r3, r3
 801c07a:	9300      	str	r3, [sp, #0]
 801c07c:	4603      	mov	r3, r0
 801c07e:	480c      	ldr	r0, [pc, #48]	@ (801c0b0 <udp_bind+0x1c0>)
 801c080:	f004 fb08 	bl	8020694 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	8a5b      	ldrh	r3, [r3, #18]
 801c088:	4619      	mov	r1, r3
 801c08a:	480f      	ldr	r0, [pc, #60]	@ (801c0c8 <udp_bind+0x1d8>)
 801c08c:	f004 fb02 	bl	8020694 <iprintf>
  return ERR_OK;
 801c090:	2300      	movs	r3, #0
}
 801c092:	4618      	mov	r0, r3
 801c094:	3718      	adds	r7, #24
 801c096:	46bd      	mov	sp, r7
 801c098:	bd80      	pop	{r7, pc}
 801c09a:	bf00      	nop
 801c09c:	08026768 	.word	0x08026768
 801c0a0:	08024cd4 	.word	0x08024cd4
 801c0a4:	08025208 	.word	0x08025208
 801c0a8:	08024d28 	.word	0x08024d28
 801c0ac:	08025220 	.word	0x08025220
 801c0b0:	08024e18 	.word	0x08024e18
 801c0b4:	08025234 	.word	0x08025234
 801c0b8:	2002d4cc 	.word	0x2002d4cc
 801c0bc:	08025244 	.word	0x08025244
 801c0c0:	08025264 	.word	0x08025264
 801c0c4:	0802529c 	.word	0x0802529c
 801c0c8:	080252b0 	.word	0x080252b0

0801c0cc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b084      	sub	sp, #16
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	60f8      	str	r0, [r7, #12]
 801c0d4:	60b9      	str	r1, [r7, #8]
 801c0d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d107      	bne.n	801c0ee <udp_recv+0x22>
 801c0de:	4b08      	ldr	r3, [pc, #32]	@ (801c100 <udp_recv+0x34>)
 801c0e0:	f240 428a 	movw	r2, #1162	@ 0x48a
 801c0e4:	4907      	ldr	r1, [pc, #28]	@ (801c104 <udp_recv+0x38>)
 801c0e6:	4808      	ldr	r0, [pc, #32]	@ (801c108 <udp_recv+0x3c>)
 801c0e8:	f004 fad4 	bl	8020694 <iprintf>
 801c0ec:	e005      	b.n	801c0fa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	68ba      	ldr	r2, [r7, #8]
 801c0f2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	61da      	str	r2, [r3, #28]
}
 801c0fa:	3710      	adds	r7, #16
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	bd80      	pop	{r7, pc}
 801c100:	08024cd4 	.word	0x08024cd4
 801c104:	08025330 	.word	0x08025330
 801c108:	08024d28 	.word	0x08024d28

0801c10c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b084      	sub	sp, #16
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	2b00      	cmp	r3, #0
 801c118:	d107      	bne.n	801c12a <udp_remove+0x1e>
 801c11a:	4b19      	ldr	r3, [pc, #100]	@ (801c180 <udp_remove+0x74>)
 801c11c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801c120:	4918      	ldr	r1, [pc, #96]	@ (801c184 <udp_remove+0x78>)
 801c122:	4819      	ldr	r0, [pc, #100]	@ (801c188 <udp_remove+0x7c>)
 801c124:	f004 fab6 	bl	8020694 <iprintf>
 801c128:	e026      	b.n	801c178 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c12a:	4b18      	ldr	r3, [pc, #96]	@ (801c18c <udp_remove+0x80>)
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	687a      	ldr	r2, [r7, #4]
 801c130:	429a      	cmp	r2, r3
 801c132:	d105      	bne.n	801c140 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c134:	4b15      	ldr	r3, [pc, #84]	@ (801c18c <udp_remove+0x80>)
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	68db      	ldr	r3, [r3, #12]
 801c13a:	4a14      	ldr	r2, [pc, #80]	@ (801c18c <udp_remove+0x80>)
 801c13c:	6013      	str	r3, [r2, #0]
 801c13e:	e017      	b.n	801c170 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c140:	4b12      	ldr	r3, [pc, #72]	@ (801c18c <udp_remove+0x80>)
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	60fb      	str	r3, [r7, #12]
 801c146:	e010      	b.n	801c16a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	68db      	ldr	r3, [r3, #12]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d009      	beq.n	801c164 <udp_remove+0x58>
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	68db      	ldr	r3, [r3, #12]
 801c154:	687a      	ldr	r2, [r7, #4]
 801c156:	429a      	cmp	r2, r3
 801c158:	d104      	bne.n	801c164 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	68da      	ldr	r2, [r3, #12]
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	60da      	str	r2, [r3, #12]
        break;
 801c162:	e005      	b.n	801c170 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	68db      	ldr	r3, [r3, #12]
 801c168:	60fb      	str	r3, [r7, #12]
 801c16a:	68fb      	ldr	r3, [r7, #12]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d1eb      	bne.n	801c148 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c170:	6879      	ldr	r1, [r7, #4]
 801c172:	2000      	movs	r0, #0
 801c174:	f7f7 fc4c 	bl	8013a10 <memp_free>
}
 801c178:	3710      	adds	r7, #16
 801c17a:	46bd      	mov	sp, r7
 801c17c:	bd80      	pop	{r7, pc}
 801c17e:	bf00      	nop
 801c180:	08024cd4 	.word	0x08024cd4
 801c184:	08025348 	.word	0x08025348
 801c188:	08024d28 	.word	0x08024d28
 801c18c:	2002d4cc 	.word	0x2002d4cc

0801c190 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b082      	sub	sp, #8
 801c194:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c196:	2000      	movs	r0, #0
 801c198:	f7f7 fbbe 	bl	8013918 <memp_malloc>
 801c19c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d007      	beq.n	801c1b4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c1a4:	2220      	movs	r2, #32
 801c1a6:	2100      	movs	r1, #0
 801c1a8:	6878      	ldr	r0, [r7, #4]
 801c1aa:	f004 fbd3 	bl	8020954 <memset>
    pcb->ttl = UDP_TTL;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	22ff      	movs	r2, #255	@ 0xff
 801c1b2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c1b4:	687b      	ldr	r3, [r7, #4]
}
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	3708      	adds	r7, #8
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	bd80      	pop	{r7, pc}

0801c1be <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c1be:	b580      	push	{r7, lr}
 801c1c0:	b084      	sub	sp, #16
 801c1c2:	af00      	add	r7, sp, #0
 801c1c4:	4603      	mov	r3, r0
 801c1c6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c1c8:	f7ff ffe2 	bl	801c190 <udp_new>
 801c1cc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c1ce:	68fb      	ldr	r3, [r7, #12]
}
 801c1d0:	4618      	mov	r0, r3
 801c1d2:	3710      	adds	r7, #16
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	bd80      	pop	{r7, pc}

0801c1d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c1d8:	b480      	push	{r7}
 801c1da:	b085      	sub	sp, #20
 801c1dc:	af00      	add	r7, sp, #0
 801c1de:	6078      	str	r0, [r7, #4]
 801c1e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d01e      	beq.n	801c226 <udp_netif_ip_addr_changed+0x4e>
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d01a      	beq.n	801c226 <udp_netif_ip_addr_changed+0x4e>
 801c1f0:	683b      	ldr	r3, [r7, #0]
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d017      	beq.n	801c226 <udp_netif_ip_addr_changed+0x4e>
 801c1f6:	683b      	ldr	r3, [r7, #0]
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d013      	beq.n	801c226 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c1fe:	4b0d      	ldr	r3, [pc, #52]	@ (801c234 <udp_netif_ip_addr_changed+0x5c>)
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	60fb      	str	r3, [r7, #12]
 801c204:	e00c      	b.n	801c220 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	681a      	ldr	r2, [r3, #0]
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	429a      	cmp	r2, r3
 801c210:	d103      	bne.n	801c21a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c212:	683b      	ldr	r3, [r7, #0]
 801c214:	681a      	ldr	r2, [r3, #0]
 801c216:	68fb      	ldr	r3, [r7, #12]
 801c218:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	68db      	ldr	r3, [r3, #12]
 801c21e:	60fb      	str	r3, [r7, #12]
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d1ef      	bne.n	801c206 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c226:	bf00      	nop
 801c228:	3714      	adds	r7, #20
 801c22a:	46bd      	mov	sp, r7
 801c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c230:	4770      	bx	lr
 801c232:	bf00      	nop
 801c234:	2002d4cc 	.word	0x2002d4cc

0801c238 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801c238:	b590      	push	{r4, r7, lr}
 801c23a:	b083      	sub	sp, #12
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801c240:	481b      	ldr	r0, [pc, #108]	@ (801c2b0 <udp_debug_print+0x78>)
 801c242:	f004 fa97 	bl	8020774 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c246:	481b      	ldr	r0, [pc, #108]	@ (801c2b4 <udp_debug_print+0x7c>)
 801c248:	f004 fa94 	bl	8020774 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	881b      	ldrh	r3, [r3, #0]
 801c250:	b29b      	uxth	r3, r3
 801c252:	4618      	mov	r0, r3
 801c254:	f7f6 fd94 	bl	8012d80 <lwip_htons>
 801c258:	4603      	mov	r3, r0
 801c25a:	461c      	mov	r4, r3
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	885b      	ldrh	r3, [r3, #2]
 801c260:	b29b      	uxth	r3, r3
 801c262:	4618      	mov	r0, r3
 801c264:	f7f6 fd8c 	bl	8012d80 <lwip_htons>
 801c268:	4603      	mov	r3, r0
 801c26a:	461a      	mov	r2, r3
 801c26c:	4621      	mov	r1, r4
 801c26e:	4812      	ldr	r0, [pc, #72]	@ (801c2b8 <udp_debug_print+0x80>)
 801c270:	f004 fa10 	bl	8020694 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c274:	480f      	ldr	r0, [pc, #60]	@ (801c2b4 <udp_debug_print+0x7c>)
 801c276:	f004 fa7d 	bl	8020774 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	889b      	ldrh	r3, [r3, #4]
 801c27e:	b29b      	uxth	r3, r3
 801c280:	4618      	mov	r0, r3
 801c282:	f7f6 fd7d 	bl	8012d80 <lwip_htons>
 801c286:	4603      	mov	r3, r0
 801c288:	461c      	mov	r4, r3
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	88db      	ldrh	r3, [r3, #6]
 801c28e:	b29b      	uxth	r3, r3
 801c290:	4618      	mov	r0, r3
 801c292:	f7f6 fd75 	bl	8012d80 <lwip_htons>
 801c296:	4603      	mov	r3, r0
 801c298:	461a      	mov	r2, r3
 801c29a:	4621      	mov	r1, r4
 801c29c:	4807      	ldr	r0, [pc, #28]	@ (801c2bc <udp_debug_print+0x84>)
 801c29e:	f004 f9f9 	bl	8020694 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801c2a2:	4804      	ldr	r0, [pc, #16]	@ (801c2b4 <udp_debug_print+0x7c>)
 801c2a4:	f004 fa66 	bl	8020774 <puts>
}
 801c2a8:	bf00      	nop
 801c2aa:	370c      	adds	r7, #12
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	bd90      	pop	{r4, r7, pc}
 801c2b0:	08025360 	.word	0x08025360
 801c2b4:	0802536c 	.word	0x0802536c
 801c2b8:	08025390 	.word	0x08025390
 801c2bc:	080253c8 	.word	0x080253c8

0801c2c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b082      	sub	sp, #8
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c2c8:	492b      	ldr	r1, [pc, #172]	@ (801c378 <etharp_free_entry+0xb8>)
 801c2ca:	687a      	ldr	r2, [r7, #4]
 801c2cc:	4613      	mov	r3, r2
 801c2ce:	005b      	lsls	r3, r3, #1
 801c2d0:	4413      	add	r3, r2
 801c2d2:	00db      	lsls	r3, r3, #3
 801c2d4:	440b      	add	r3, r1
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d013      	beq.n	801c304 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c2dc:	4926      	ldr	r1, [pc, #152]	@ (801c378 <etharp_free_entry+0xb8>)
 801c2de:	687a      	ldr	r2, [r7, #4]
 801c2e0:	4613      	mov	r3, r2
 801c2e2:	005b      	lsls	r3, r3, #1
 801c2e4:	4413      	add	r3, r2
 801c2e6:	00db      	lsls	r3, r3, #3
 801c2e8:	440b      	add	r3, r1
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	f7f8 fb75 	bl	80149dc <pbuf_free>
    arp_table[i].q = NULL;
 801c2f2:	4921      	ldr	r1, [pc, #132]	@ (801c378 <etharp_free_entry+0xb8>)
 801c2f4:	687a      	ldr	r2, [r7, #4]
 801c2f6:	4613      	mov	r3, r2
 801c2f8:	005b      	lsls	r3, r3, #1
 801c2fa:	4413      	add	r3, r2
 801c2fc:	00db      	lsls	r3, r3, #3
 801c2fe:	440b      	add	r3, r1
 801c300:	2200      	movs	r2, #0
 801c302:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c304:	491c      	ldr	r1, [pc, #112]	@ (801c378 <etharp_free_entry+0xb8>)
 801c306:	687a      	ldr	r2, [r7, #4]
 801c308:	4613      	mov	r3, r2
 801c30a:	005b      	lsls	r3, r3, #1
 801c30c:	4413      	add	r3, r2
 801c30e:	00db      	lsls	r3, r3, #3
 801c310:	440b      	add	r3, r1
 801c312:	3314      	adds	r3, #20
 801c314:	2200      	movs	r2, #0
 801c316:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801c318:	4917      	ldr	r1, [pc, #92]	@ (801c378 <etharp_free_entry+0xb8>)
 801c31a:	687a      	ldr	r2, [r7, #4]
 801c31c:	4613      	mov	r3, r2
 801c31e:	005b      	lsls	r3, r3, #1
 801c320:	4413      	add	r3, r2
 801c322:	00db      	lsls	r3, r3, #3
 801c324:	440b      	add	r3, r1
 801c326:	3312      	adds	r3, #18
 801c328:	2200      	movs	r2, #0
 801c32a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801c32c:	4912      	ldr	r1, [pc, #72]	@ (801c378 <etharp_free_entry+0xb8>)
 801c32e:	687a      	ldr	r2, [r7, #4]
 801c330:	4613      	mov	r3, r2
 801c332:	005b      	lsls	r3, r3, #1
 801c334:	4413      	add	r3, r2
 801c336:	00db      	lsls	r3, r3, #3
 801c338:	440b      	add	r3, r1
 801c33a:	3308      	adds	r3, #8
 801c33c:	2200      	movs	r2, #0
 801c33e:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801c340:	490d      	ldr	r1, [pc, #52]	@ (801c378 <etharp_free_entry+0xb8>)
 801c342:	687a      	ldr	r2, [r7, #4]
 801c344:	4613      	mov	r3, r2
 801c346:	005b      	lsls	r3, r3, #1
 801c348:	4413      	add	r3, r2
 801c34a:	00db      	lsls	r3, r3, #3
 801c34c:	440b      	add	r3, r1
 801c34e:	3304      	adds	r3, #4
 801c350:	2200      	movs	r2, #0
 801c352:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801c354:	4908      	ldr	r1, [pc, #32]	@ (801c378 <etharp_free_entry+0xb8>)
 801c356:	687a      	ldr	r2, [r7, #4]
 801c358:	4613      	mov	r3, r2
 801c35a:	005b      	lsls	r3, r3, #1
 801c35c:	4413      	add	r3, r2
 801c35e:	00db      	lsls	r3, r3, #3
 801c360:	440b      	add	r3, r1
 801c362:	3308      	adds	r3, #8
 801c364:	4a05      	ldr	r2, [pc, #20]	@ (801c37c <etharp_free_entry+0xbc>)
 801c366:	3304      	adds	r3, #4
 801c368:	6810      	ldr	r0, [r2, #0]
 801c36a:	6018      	str	r0, [r3, #0]
 801c36c:	8892      	ldrh	r2, [r2, #4]
 801c36e:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801c370:	bf00      	nop
 801c372:	3708      	adds	r7, #8
 801c374:	46bd      	mov	sp, r7
 801c376:	bd80      	pop	{r7, pc}
 801c378:	2002d4d0 	.word	0x2002d4d0
 801c37c:	08026774 	.word	0x08026774

0801c380 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c380:	b580      	push	{r7, lr}
 801c382:	b082      	sub	sp, #8
 801c384:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c386:	2300      	movs	r3, #0
 801c388:	607b      	str	r3, [r7, #4]
 801c38a:	e096      	b.n	801c4ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c38c:	494f      	ldr	r1, [pc, #316]	@ (801c4cc <etharp_tmr+0x14c>)
 801c38e:	687a      	ldr	r2, [r7, #4]
 801c390:	4613      	mov	r3, r2
 801c392:	005b      	lsls	r3, r3, #1
 801c394:	4413      	add	r3, r2
 801c396:	00db      	lsls	r3, r3, #3
 801c398:	440b      	add	r3, r1
 801c39a:	3314      	adds	r3, #20
 801c39c:	781b      	ldrb	r3, [r3, #0]
 801c39e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c3a0:	78fb      	ldrb	r3, [r7, #3]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	f000 8086 	beq.w	801c4b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c3a8:	4948      	ldr	r1, [pc, #288]	@ (801c4cc <etharp_tmr+0x14c>)
 801c3aa:	687a      	ldr	r2, [r7, #4]
 801c3ac:	4613      	mov	r3, r2
 801c3ae:	005b      	lsls	r3, r3, #1
 801c3b0:	4413      	add	r3, r2
 801c3b2:	00db      	lsls	r3, r3, #3
 801c3b4:	440b      	add	r3, r1
 801c3b6:	3312      	adds	r3, #18
 801c3b8:	881b      	ldrh	r3, [r3, #0]
 801c3ba:	3301      	adds	r3, #1
 801c3bc:	b298      	uxth	r0, r3
 801c3be:	4943      	ldr	r1, [pc, #268]	@ (801c4cc <etharp_tmr+0x14c>)
 801c3c0:	687a      	ldr	r2, [r7, #4]
 801c3c2:	4613      	mov	r3, r2
 801c3c4:	005b      	lsls	r3, r3, #1
 801c3c6:	4413      	add	r3, r2
 801c3c8:	00db      	lsls	r3, r3, #3
 801c3ca:	440b      	add	r3, r1
 801c3cc:	3312      	adds	r3, #18
 801c3ce:	4602      	mov	r2, r0
 801c3d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c3d2:	493e      	ldr	r1, [pc, #248]	@ (801c4cc <etharp_tmr+0x14c>)
 801c3d4:	687a      	ldr	r2, [r7, #4]
 801c3d6:	4613      	mov	r3, r2
 801c3d8:	005b      	lsls	r3, r3, #1
 801c3da:	4413      	add	r3, r2
 801c3dc:	00db      	lsls	r3, r3, #3
 801c3de:	440b      	add	r3, r1
 801c3e0:	3312      	adds	r3, #18
 801c3e2:	881b      	ldrh	r3, [r3, #0]
 801c3e4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801c3e8:	d215      	bcs.n	801c416 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c3ea:	4938      	ldr	r1, [pc, #224]	@ (801c4cc <etharp_tmr+0x14c>)
 801c3ec:	687a      	ldr	r2, [r7, #4]
 801c3ee:	4613      	mov	r3, r2
 801c3f0:	005b      	lsls	r3, r3, #1
 801c3f2:	4413      	add	r3, r2
 801c3f4:	00db      	lsls	r3, r3, #3
 801c3f6:	440b      	add	r3, r1
 801c3f8:	3314      	adds	r3, #20
 801c3fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c3fc:	2b01      	cmp	r3, #1
 801c3fe:	d10e      	bne.n	801c41e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c400:	4932      	ldr	r1, [pc, #200]	@ (801c4cc <etharp_tmr+0x14c>)
 801c402:	687a      	ldr	r2, [r7, #4]
 801c404:	4613      	mov	r3, r2
 801c406:	005b      	lsls	r3, r3, #1
 801c408:	4413      	add	r3, r2
 801c40a:	00db      	lsls	r3, r3, #3
 801c40c:	440b      	add	r3, r1
 801c40e:	3312      	adds	r3, #18
 801c410:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c412:	2b04      	cmp	r3, #4
 801c414:	d903      	bls.n	801c41e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c416:	6878      	ldr	r0, [r7, #4]
 801c418:	f7ff ff52 	bl	801c2c0 <etharp_free_entry>
 801c41c:	e04a      	b.n	801c4b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c41e:	492b      	ldr	r1, [pc, #172]	@ (801c4cc <etharp_tmr+0x14c>)
 801c420:	687a      	ldr	r2, [r7, #4]
 801c422:	4613      	mov	r3, r2
 801c424:	005b      	lsls	r3, r3, #1
 801c426:	4413      	add	r3, r2
 801c428:	00db      	lsls	r3, r3, #3
 801c42a:	440b      	add	r3, r1
 801c42c:	3314      	adds	r3, #20
 801c42e:	781b      	ldrb	r3, [r3, #0]
 801c430:	2b03      	cmp	r3, #3
 801c432:	d10a      	bne.n	801c44a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c434:	4925      	ldr	r1, [pc, #148]	@ (801c4cc <etharp_tmr+0x14c>)
 801c436:	687a      	ldr	r2, [r7, #4]
 801c438:	4613      	mov	r3, r2
 801c43a:	005b      	lsls	r3, r3, #1
 801c43c:	4413      	add	r3, r2
 801c43e:	00db      	lsls	r3, r3, #3
 801c440:	440b      	add	r3, r1
 801c442:	3314      	adds	r3, #20
 801c444:	2204      	movs	r2, #4
 801c446:	701a      	strb	r2, [r3, #0]
 801c448:	e034      	b.n	801c4b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c44a:	4920      	ldr	r1, [pc, #128]	@ (801c4cc <etharp_tmr+0x14c>)
 801c44c:	687a      	ldr	r2, [r7, #4]
 801c44e:	4613      	mov	r3, r2
 801c450:	005b      	lsls	r3, r3, #1
 801c452:	4413      	add	r3, r2
 801c454:	00db      	lsls	r3, r3, #3
 801c456:	440b      	add	r3, r1
 801c458:	3314      	adds	r3, #20
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	2b04      	cmp	r3, #4
 801c45e:	d10a      	bne.n	801c476 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c460:	491a      	ldr	r1, [pc, #104]	@ (801c4cc <etharp_tmr+0x14c>)
 801c462:	687a      	ldr	r2, [r7, #4]
 801c464:	4613      	mov	r3, r2
 801c466:	005b      	lsls	r3, r3, #1
 801c468:	4413      	add	r3, r2
 801c46a:	00db      	lsls	r3, r3, #3
 801c46c:	440b      	add	r3, r1
 801c46e:	3314      	adds	r3, #20
 801c470:	2202      	movs	r2, #2
 801c472:	701a      	strb	r2, [r3, #0]
 801c474:	e01e      	b.n	801c4b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c476:	4915      	ldr	r1, [pc, #84]	@ (801c4cc <etharp_tmr+0x14c>)
 801c478:	687a      	ldr	r2, [r7, #4]
 801c47a:	4613      	mov	r3, r2
 801c47c:	005b      	lsls	r3, r3, #1
 801c47e:	4413      	add	r3, r2
 801c480:	00db      	lsls	r3, r3, #3
 801c482:	440b      	add	r3, r1
 801c484:	3314      	adds	r3, #20
 801c486:	781b      	ldrb	r3, [r3, #0]
 801c488:	2b01      	cmp	r3, #1
 801c48a:	d113      	bne.n	801c4b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c48c:	490f      	ldr	r1, [pc, #60]	@ (801c4cc <etharp_tmr+0x14c>)
 801c48e:	687a      	ldr	r2, [r7, #4]
 801c490:	4613      	mov	r3, r2
 801c492:	005b      	lsls	r3, r3, #1
 801c494:	4413      	add	r3, r2
 801c496:	00db      	lsls	r3, r3, #3
 801c498:	440b      	add	r3, r1
 801c49a:	3308      	adds	r3, #8
 801c49c:	6818      	ldr	r0, [r3, #0]
 801c49e:	687a      	ldr	r2, [r7, #4]
 801c4a0:	4613      	mov	r3, r2
 801c4a2:	005b      	lsls	r3, r3, #1
 801c4a4:	4413      	add	r3, r2
 801c4a6:	00db      	lsls	r3, r3, #3
 801c4a8:	4a08      	ldr	r2, [pc, #32]	@ (801c4cc <etharp_tmr+0x14c>)
 801c4aa:	4413      	add	r3, r2
 801c4ac:	3304      	adds	r3, #4
 801c4ae:	4619      	mov	r1, r3
 801c4b0:	f000 feae 	bl	801d210 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	3301      	adds	r3, #1
 801c4b8:	607b      	str	r3, [r7, #4]
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	2b09      	cmp	r3, #9
 801c4be:	f77f af65 	ble.w	801c38c <etharp_tmr+0xc>
      }
    }
  }
}
 801c4c2:	bf00      	nop
 801c4c4:	bf00      	nop
 801c4c6:	3708      	adds	r7, #8
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bd80      	pop	{r7, pc}
 801c4cc:	2002d4d0 	.word	0x2002d4d0

0801c4d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b08a      	sub	sp, #40	@ 0x28
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	60f8      	str	r0, [r7, #12]
 801c4d8:	460b      	mov	r3, r1
 801c4da:	607a      	str	r2, [r7, #4]
 801c4dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c4de:	230a      	movs	r3, #10
 801c4e0:	843b      	strh	r3, [r7, #32]
 801c4e2:	230a      	movs	r3, #10
 801c4e4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801c4e6:	230a      	movs	r3, #10
 801c4e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801c4ea:	2300      	movs	r3, #0
 801c4ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c4ee:	230a      	movs	r3, #10
 801c4f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c4f2:	2300      	movs	r3, #0
 801c4f4:	83bb      	strh	r3, [r7, #28]
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	837b      	strh	r3, [r7, #26]
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c4fe:	2300      	movs	r3, #0
 801c500:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c502:	e0ae      	b.n	801c662 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c504:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c508:	49a6      	ldr	r1, [pc, #664]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c50a:	4613      	mov	r3, r2
 801c50c:	005b      	lsls	r3, r3, #1
 801c50e:	4413      	add	r3, r2
 801c510:	00db      	lsls	r3, r3, #3
 801c512:	440b      	add	r3, r1
 801c514:	3314      	adds	r3, #20
 801c516:	781b      	ldrb	r3, [r3, #0]
 801c518:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c51a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c51e:	2b0a      	cmp	r3, #10
 801c520:	d105      	bne.n	801c52e <etharp_find_entry+0x5e>
 801c522:	7dfb      	ldrb	r3, [r7, #23]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d102      	bne.n	801c52e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c528:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c52a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c52c:	e095      	b.n	801c65a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c52e:	7dfb      	ldrb	r3, [r7, #23]
 801c530:	2b00      	cmp	r3, #0
 801c532:	f000 8092 	beq.w	801c65a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c536:	7dfb      	ldrb	r3, [r7, #23]
 801c538:	2b01      	cmp	r3, #1
 801c53a:	d009      	beq.n	801c550 <etharp_find_entry+0x80>
 801c53c:	7dfb      	ldrb	r3, [r7, #23]
 801c53e:	2b01      	cmp	r3, #1
 801c540:	d806      	bhi.n	801c550 <etharp_find_entry+0x80>
 801c542:	4b99      	ldr	r3, [pc, #612]	@ (801c7a8 <etharp_find_entry+0x2d8>)
 801c544:	f240 1223 	movw	r2, #291	@ 0x123
 801c548:	4998      	ldr	r1, [pc, #608]	@ (801c7ac <etharp_find_entry+0x2dc>)
 801c54a:	4899      	ldr	r0, [pc, #612]	@ (801c7b0 <etharp_find_entry+0x2e0>)
 801c54c:	f004 f8a2 	bl	8020694 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	2b00      	cmp	r3, #0
 801c554:	d020      	beq.n	801c598 <etharp_find_entry+0xc8>
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	6819      	ldr	r1, [r3, #0]
 801c55a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c55e:	4891      	ldr	r0, [pc, #580]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c560:	4613      	mov	r3, r2
 801c562:	005b      	lsls	r3, r3, #1
 801c564:	4413      	add	r3, r2
 801c566:	00db      	lsls	r3, r3, #3
 801c568:	4403      	add	r3, r0
 801c56a:	3304      	adds	r3, #4
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	4299      	cmp	r1, r3
 801c570:	d112      	bne.n	801c598 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d00c      	beq.n	801c592 <etharp_find_entry+0xc2>
 801c578:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c57c:	4989      	ldr	r1, [pc, #548]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c57e:	4613      	mov	r3, r2
 801c580:	005b      	lsls	r3, r3, #1
 801c582:	4413      	add	r3, r2
 801c584:	00db      	lsls	r3, r3, #3
 801c586:	440b      	add	r3, r1
 801c588:	3308      	adds	r3, #8
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	687a      	ldr	r2, [r7, #4]
 801c58e:	429a      	cmp	r2, r3
 801c590:	d102      	bne.n	801c598 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c592:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c596:	e100      	b.n	801c79a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c598:	7dfb      	ldrb	r3, [r7, #23]
 801c59a:	2b01      	cmp	r3, #1
 801c59c:	d140      	bne.n	801c620 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c59e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c5a2:	4980      	ldr	r1, [pc, #512]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c5a4:	4613      	mov	r3, r2
 801c5a6:	005b      	lsls	r3, r3, #1
 801c5a8:	4413      	add	r3, r2
 801c5aa:	00db      	lsls	r3, r3, #3
 801c5ac:	440b      	add	r3, r1
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d01a      	beq.n	801c5ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c5b4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c5b8:	497a      	ldr	r1, [pc, #488]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c5ba:	4613      	mov	r3, r2
 801c5bc:	005b      	lsls	r3, r3, #1
 801c5be:	4413      	add	r3, r2
 801c5c0:	00db      	lsls	r3, r3, #3
 801c5c2:	440b      	add	r3, r1
 801c5c4:	3312      	adds	r3, #18
 801c5c6:	881b      	ldrh	r3, [r3, #0]
 801c5c8:	8bba      	ldrh	r2, [r7, #28]
 801c5ca:	429a      	cmp	r2, r3
 801c5cc:	d845      	bhi.n	801c65a <etharp_find_entry+0x18a>
            old_queue = i;
 801c5ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c5d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c5d2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c5d6:	4973      	ldr	r1, [pc, #460]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c5d8:	4613      	mov	r3, r2
 801c5da:	005b      	lsls	r3, r3, #1
 801c5dc:	4413      	add	r3, r2
 801c5de:	00db      	lsls	r3, r3, #3
 801c5e0:	440b      	add	r3, r1
 801c5e2:	3312      	adds	r3, #18
 801c5e4:	881b      	ldrh	r3, [r3, #0]
 801c5e6:	83bb      	strh	r3, [r7, #28]
 801c5e8:	e037      	b.n	801c65a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c5ea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c5ee:	496d      	ldr	r1, [pc, #436]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c5f0:	4613      	mov	r3, r2
 801c5f2:	005b      	lsls	r3, r3, #1
 801c5f4:	4413      	add	r3, r2
 801c5f6:	00db      	lsls	r3, r3, #3
 801c5f8:	440b      	add	r3, r1
 801c5fa:	3312      	adds	r3, #18
 801c5fc:	881b      	ldrh	r3, [r3, #0]
 801c5fe:	8b7a      	ldrh	r2, [r7, #26]
 801c600:	429a      	cmp	r2, r3
 801c602:	d82a      	bhi.n	801c65a <etharp_find_entry+0x18a>
            old_pending = i;
 801c604:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c606:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801c608:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c60c:	4965      	ldr	r1, [pc, #404]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c60e:	4613      	mov	r3, r2
 801c610:	005b      	lsls	r3, r3, #1
 801c612:	4413      	add	r3, r2
 801c614:	00db      	lsls	r3, r3, #3
 801c616:	440b      	add	r3, r1
 801c618:	3312      	adds	r3, #18
 801c61a:	881b      	ldrh	r3, [r3, #0]
 801c61c:	837b      	strh	r3, [r7, #26]
 801c61e:	e01c      	b.n	801c65a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c620:	7dfb      	ldrb	r3, [r7, #23]
 801c622:	2b01      	cmp	r3, #1
 801c624:	d919      	bls.n	801c65a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c626:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c62a:	495e      	ldr	r1, [pc, #376]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c62c:	4613      	mov	r3, r2
 801c62e:	005b      	lsls	r3, r3, #1
 801c630:	4413      	add	r3, r2
 801c632:	00db      	lsls	r3, r3, #3
 801c634:	440b      	add	r3, r1
 801c636:	3312      	adds	r3, #18
 801c638:	881b      	ldrh	r3, [r3, #0]
 801c63a:	8b3a      	ldrh	r2, [r7, #24]
 801c63c:	429a      	cmp	r2, r3
 801c63e:	d80c      	bhi.n	801c65a <etharp_find_entry+0x18a>
            old_stable = i;
 801c640:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c642:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801c644:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c648:	4956      	ldr	r1, [pc, #344]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c64a:	4613      	mov	r3, r2
 801c64c:	005b      	lsls	r3, r3, #1
 801c64e:	4413      	add	r3, r2
 801c650:	00db      	lsls	r3, r3, #3
 801c652:	440b      	add	r3, r1
 801c654:	3312      	adds	r3, #18
 801c656:	881b      	ldrh	r3, [r3, #0]
 801c658:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c65a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c65c:	3301      	adds	r3, #1
 801c65e:	b29b      	uxth	r3, r3
 801c660:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c662:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c666:	2b09      	cmp	r3, #9
 801c668:	f77f af4c 	ble.w	801c504 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c66c:	7afb      	ldrb	r3, [r7, #11]
 801c66e:	f003 0302 	and.w	r3, r3, #2
 801c672:	2b00      	cmp	r3, #0
 801c674:	d108      	bne.n	801c688 <etharp_find_entry+0x1b8>
 801c676:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c67a:	2b0a      	cmp	r3, #10
 801c67c:	d107      	bne.n	801c68e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c67e:	7afb      	ldrb	r3, [r7, #11]
 801c680:	f003 0301 	and.w	r3, r3, #1
 801c684:	2b00      	cmp	r3, #0
 801c686:	d102      	bne.n	801c68e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c68c:	e085      	b.n	801c79a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c68e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c692:	2b09      	cmp	r3, #9
 801c694:	dc02      	bgt.n	801c69c <etharp_find_entry+0x1cc>
    i = empty;
 801c696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c698:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c69a:	e039      	b.n	801c710 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c69c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c6a0:	2b09      	cmp	r3, #9
 801c6a2:	dc14      	bgt.n	801c6ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c6a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c6a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c6a8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c6ac:	493d      	ldr	r1, [pc, #244]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c6ae:	4613      	mov	r3, r2
 801c6b0:	005b      	lsls	r3, r3, #1
 801c6b2:	4413      	add	r3, r2
 801c6b4:	00db      	lsls	r3, r3, #3
 801c6b6:	440b      	add	r3, r1
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d018      	beq.n	801c6f0 <etharp_find_entry+0x220>
 801c6be:	4b3a      	ldr	r3, [pc, #232]	@ (801c7a8 <etharp_find_entry+0x2d8>)
 801c6c0:	f240 126d 	movw	r2, #365	@ 0x16d
 801c6c4:	493b      	ldr	r1, [pc, #236]	@ (801c7b4 <etharp_find_entry+0x2e4>)
 801c6c6:	483a      	ldr	r0, [pc, #232]	@ (801c7b0 <etharp_find_entry+0x2e0>)
 801c6c8:	f003 ffe4 	bl	8020694 <iprintf>
 801c6cc:	e010      	b.n	801c6f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c6ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c6d2:	2b09      	cmp	r3, #9
 801c6d4:	dc02      	bgt.n	801c6dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c6d6:	8c3b      	ldrh	r3, [r7, #32]
 801c6d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c6da:	e009      	b.n	801c6f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c6dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c6e0:	2b09      	cmp	r3, #9
 801c6e2:	dc02      	bgt.n	801c6ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c6e4:	8bfb      	ldrh	r3, [r7, #30]
 801c6e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c6e8:	e002      	b.n	801c6f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c6ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c6ee:	e054      	b.n	801c79a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c6f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c6f4:	2b09      	cmp	r3, #9
 801c6f6:	dd06      	ble.n	801c706 <etharp_find_entry+0x236>
 801c6f8:	4b2b      	ldr	r3, [pc, #172]	@ (801c7a8 <etharp_find_entry+0x2d8>)
 801c6fa:	f240 127f 	movw	r2, #383	@ 0x17f
 801c6fe:	492e      	ldr	r1, [pc, #184]	@ (801c7b8 <etharp_find_entry+0x2e8>)
 801c700:	482b      	ldr	r0, [pc, #172]	@ (801c7b0 <etharp_find_entry+0x2e0>)
 801c702:	f003 ffc7 	bl	8020694 <iprintf>
    etharp_free_entry(i);
 801c706:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c70a:	4618      	mov	r0, r3
 801c70c:	f7ff fdd8 	bl	801c2c0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c710:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c714:	2b09      	cmp	r3, #9
 801c716:	dd06      	ble.n	801c726 <etharp_find_entry+0x256>
 801c718:	4b23      	ldr	r3, [pc, #140]	@ (801c7a8 <etharp_find_entry+0x2d8>)
 801c71a:	f240 1283 	movw	r2, #387	@ 0x183
 801c71e:	4926      	ldr	r1, [pc, #152]	@ (801c7b8 <etharp_find_entry+0x2e8>)
 801c720:	4823      	ldr	r0, [pc, #140]	@ (801c7b0 <etharp_find_entry+0x2e0>)
 801c722:	f003 ffb7 	bl	8020694 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c726:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c72a:	491e      	ldr	r1, [pc, #120]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c72c:	4613      	mov	r3, r2
 801c72e:	005b      	lsls	r3, r3, #1
 801c730:	4413      	add	r3, r2
 801c732:	00db      	lsls	r3, r3, #3
 801c734:	440b      	add	r3, r1
 801c736:	3314      	adds	r3, #20
 801c738:	781b      	ldrb	r3, [r3, #0]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d006      	beq.n	801c74c <etharp_find_entry+0x27c>
 801c73e:	4b1a      	ldr	r3, [pc, #104]	@ (801c7a8 <etharp_find_entry+0x2d8>)
 801c740:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801c744:	491d      	ldr	r1, [pc, #116]	@ (801c7bc <etharp_find_entry+0x2ec>)
 801c746:	481a      	ldr	r0, [pc, #104]	@ (801c7b0 <etharp_find_entry+0x2e0>)
 801c748:	f003 ffa4 	bl	8020694 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d00b      	beq.n	801c76a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c752:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	6819      	ldr	r1, [r3, #0]
 801c75a:	4812      	ldr	r0, [pc, #72]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c75c:	4613      	mov	r3, r2
 801c75e:	005b      	lsls	r3, r3, #1
 801c760:	4413      	add	r3, r2
 801c762:	00db      	lsls	r3, r3, #3
 801c764:	4403      	add	r3, r0
 801c766:	3304      	adds	r3, #4
 801c768:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c76a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c76e:	490d      	ldr	r1, [pc, #52]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c770:	4613      	mov	r3, r2
 801c772:	005b      	lsls	r3, r3, #1
 801c774:	4413      	add	r3, r2
 801c776:	00db      	lsls	r3, r3, #3
 801c778:	440b      	add	r3, r1
 801c77a:	3312      	adds	r3, #18
 801c77c:	2200      	movs	r2, #0
 801c77e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c780:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801c784:	4907      	ldr	r1, [pc, #28]	@ (801c7a4 <etharp_find_entry+0x2d4>)
 801c786:	4613      	mov	r3, r2
 801c788:	005b      	lsls	r3, r3, #1
 801c78a:	4413      	add	r3, r2
 801c78c:	00db      	lsls	r3, r3, #3
 801c78e:	440b      	add	r3, r1
 801c790:	3308      	adds	r3, #8
 801c792:	687a      	ldr	r2, [r7, #4]
 801c794:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c796:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801c79a:	4618      	mov	r0, r3
 801c79c:	3728      	adds	r7, #40	@ 0x28
 801c79e:	46bd      	mov	sp, r7
 801c7a0:	bd80      	pop	{r7, pc}
 801c7a2:	bf00      	nop
 801c7a4:	2002d4d0 	.word	0x2002d4d0
 801c7a8:	080253fc 	.word	0x080253fc
 801c7ac:	08025434 	.word	0x08025434
 801c7b0:	08025474 	.word	0x08025474
 801c7b4:	0802549c 	.word	0x0802549c
 801c7b8:	080254b4 	.word	0x080254b4
 801c7bc:	080254c8 	.word	0x080254c8

0801c7c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c7c0:	b580      	push	{r7, lr}
 801c7c2:	b088      	sub	sp, #32
 801c7c4:	af02      	add	r7, sp, #8
 801c7c6:	60f8      	str	r0, [r7, #12]
 801c7c8:	60b9      	str	r1, [r7, #8]
 801c7ca:	607a      	str	r2, [r7, #4]
 801c7cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c7d4:	2b06      	cmp	r3, #6
 801c7d6:	d006      	beq.n	801c7e6 <etharp_update_arp_entry+0x26>
 801c7d8:	4b48      	ldr	r3, [pc, #288]	@ (801c8fc <etharp_update_arp_entry+0x13c>)
 801c7da:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801c7de:	4948      	ldr	r1, [pc, #288]	@ (801c900 <etharp_update_arp_entry+0x140>)
 801c7e0:	4848      	ldr	r0, [pc, #288]	@ (801c904 <etharp_update_arp_entry+0x144>)
 801c7e2:	f003 ff57 	bl	8020694 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c7e6:	68bb      	ldr	r3, [r7, #8]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d012      	beq.n	801c812 <etharp_update_arp_entry+0x52>
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d00e      	beq.n	801c812 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c7f4:	68bb      	ldr	r3, [r7, #8]
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	68f9      	ldr	r1, [r7, #12]
 801c7fa:	4618      	mov	r0, r3
 801c7fc:	f001 fa80 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 801c800:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c802:	2b00      	cmp	r3, #0
 801c804:	d105      	bne.n	801c812 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c806:	68bb      	ldr	r3, [r7, #8]
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c80e:	2be0      	cmp	r3, #224	@ 0xe0
 801c810:	d102      	bne.n	801c818 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c812:	f06f 030f 	mvn.w	r3, #15
 801c816:	e06c      	b.n	801c8f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c818:	78fb      	ldrb	r3, [r7, #3]
 801c81a:	68fa      	ldr	r2, [r7, #12]
 801c81c:	4619      	mov	r1, r3
 801c81e:	68b8      	ldr	r0, [r7, #8]
 801c820:	f7ff fe56 	bl	801c4d0 <etharp_find_entry>
 801c824:	4603      	mov	r3, r0
 801c826:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c828:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	da02      	bge.n	801c836 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c830:	8afb      	ldrh	r3, [r7, #22]
 801c832:	b25b      	sxtb	r3, r3
 801c834:	e05d      	b.n	801c8f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c83a:	4933      	ldr	r1, [pc, #204]	@ (801c908 <etharp_update_arp_entry+0x148>)
 801c83c:	4613      	mov	r3, r2
 801c83e:	005b      	lsls	r3, r3, #1
 801c840:	4413      	add	r3, r2
 801c842:	00db      	lsls	r3, r3, #3
 801c844:	440b      	add	r3, r1
 801c846:	3314      	adds	r3, #20
 801c848:	2202      	movs	r2, #2
 801c84a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c84c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c850:	492d      	ldr	r1, [pc, #180]	@ (801c908 <etharp_update_arp_entry+0x148>)
 801c852:	4613      	mov	r3, r2
 801c854:	005b      	lsls	r3, r3, #1
 801c856:	4413      	add	r3, r2
 801c858:	00db      	lsls	r3, r3, #3
 801c85a:	440b      	add	r3, r1
 801c85c:	3308      	adds	r3, #8
 801c85e:	68fa      	ldr	r2, [r7, #12]
 801c860:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c862:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c866:	4613      	mov	r3, r2
 801c868:	005b      	lsls	r3, r3, #1
 801c86a:	4413      	add	r3, r2
 801c86c:	00db      	lsls	r3, r3, #3
 801c86e:	3308      	adds	r3, #8
 801c870:	4a25      	ldr	r2, [pc, #148]	@ (801c908 <etharp_update_arp_entry+0x148>)
 801c872:	4413      	add	r3, r2
 801c874:	3304      	adds	r3, #4
 801c876:	2206      	movs	r2, #6
 801c878:	6879      	ldr	r1, [r7, #4]
 801c87a:	4618      	mov	r0, r3
 801c87c:	f004 f93d 	bl	8020afa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c880:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c884:	4920      	ldr	r1, [pc, #128]	@ (801c908 <etharp_update_arp_entry+0x148>)
 801c886:	4613      	mov	r3, r2
 801c888:	005b      	lsls	r3, r3, #1
 801c88a:	4413      	add	r3, r2
 801c88c:	00db      	lsls	r3, r3, #3
 801c88e:	440b      	add	r3, r1
 801c890:	3312      	adds	r3, #18
 801c892:	2200      	movs	r2, #0
 801c894:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c896:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c89a:	491b      	ldr	r1, [pc, #108]	@ (801c908 <etharp_update_arp_entry+0x148>)
 801c89c:	4613      	mov	r3, r2
 801c89e:	005b      	lsls	r3, r3, #1
 801c8a0:	4413      	add	r3, r2
 801c8a2:	00db      	lsls	r3, r3, #3
 801c8a4:	440b      	add	r3, r1
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d021      	beq.n	801c8f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c8ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c8b0:	4915      	ldr	r1, [pc, #84]	@ (801c908 <etharp_update_arp_entry+0x148>)
 801c8b2:	4613      	mov	r3, r2
 801c8b4:	005b      	lsls	r3, r3, #1
 801c8b6:	4413      	add	r3, r2
 801c8b8:	00db      	lsls	r3, r3, #3
 801c8ba:	440b      	add	r3, r1
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c8c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c8c4:	4910      	ldr	r1, [pc, #64]	@ (801c908 <etharp_update_arp_entry+0x148>)
 801c8c6:	4613      	mov	r3, r2
 801c8c8:	005b      	lsls	r3, r3, #1
 801c8ca:	4413      	add	r3, r2
 801c8cc:	00db      	lsls	r3, r3, #3
 801c8ce:	440b      	add	r3, r1
 801c8d0:	2200      	movs	r2, #0
 801c8d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c8da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c8de:	9300      	str	r3, [sp, #0]
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	6939      	ldr	r1, [r7, #16]
 801c8e4:	68f8      	ldr	r0, [r7, #12]
 801c8e6:	f002 f9fb 	bl	801ece0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c8ea:	6938      	ldr	r0, [r7, #16]
 801c8ec:	f7f8 f876 	bl	80149dc <pbuf_free>
  }
  return ERR_OK;
 801c8f0:	2300      	movs	r3, #0
}
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	3718      	adds	r7, #24
 801c8f6:	46bd      	mov	sp, r7
 801c8f8:	bd80      	pop	{r7, pc}
 801c8fa:	bf00      	nop
 801c8fc:	080253fc 	.word	0x080253fc
 801c900:	080254f4 	.word	0x080254f4
 801c904:	08025474 	.word	0x08025474
 801c908:	2002d4d0 	.word	0x2002d4d0

0801c90c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b084      	sub	sp, #16
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c914:	2300      	movs	r3, #0
 801c916:	60fb      	str	r3, [r7, #12]
 801c918:	e01e      	b.n	801c958 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c91a:	4913      	ldr	r1, [pc, #76]	@ (801c968 <etharp_cleanup_netif+0x5c>)
 801c91c:	68fa      	ldr	r2, [r7, #12]
 801c91e:	4613      	mov	r3, r2
 801c920:	005b      	lsls	r3, r3, #1
 801c922:	4413      	add	r3, r2
 801c924:	00db      	lsls	r3, r3, #3
 801c926:	440b      	add	r3, r1
 801c928:	3314      	adds	r3, #20
 801c92a:	781b      	ldrb	r3, [r3, #0]
 801c92c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c92e:	7afb      	ldrb	r3, [r7, #11]
 801c930:	2b00      	cmp	r3, #0
 801c932:	d00e      	beq.n	801c952 <etharp_cleanup_netif+0x46>
 801c934:	490c      	ldr	r1, [pc, #48]	@ (801c968 <etharp_cleanup_netif+0x5c>)
 801c936:	68fa      	ldr	r2, [r7, #12]
 801c938:	4613      	mov	r3, r2
 801c93a:	005b      	lsls	r3, r3, #1
 801c93c:	4413      	add	r3, r2
 801c93e:	00db      	lsls	r3, r3, #3
 801c940:	440b      	add	r3, r1
 801c942:	3308      	adds	r3, #8
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	687a      	ldr	r2, [r7, #4]
 801c948:	429a      	cmp	r2, r3
 801c94a:	d102      	bne.n	801c952 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c94c:	68f8      	ldr	r0, [r7, #12]
 801c94e:	f7ff fcb7 	bl	801c2c0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	3301      	adds	r3, #1
 801c956:	60fb      	str	r3, [r7, #12]
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	2b09      	cmp	r3, #9
 801c95c:	dddd      	ble.n	801c91a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c95e:	bf00      	nop
 801c960:	bf00      	nop
 801c962:	3710      	adds	r7, #16
 801c964:	46bd      	mov	sp, r7
 801c966:	bd80      	pop	{r7, pc}
 801c968:	2002d4d0 	.word	0x2002d4d0

0801c96c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c96c:	b5b0      	push	{r4, r5, r7, lr}
 801c96e:	b08a      	sub	sp, #40	@ 0x28
 801c970:	af04      	add	r7, sp, #16
 801c972:	6078      	str	r0, [r7, #4]
 801c974:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c976:	683b      	ldr	r3, [r7, #0]
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d107      	bne.n	801c98c <etharp_input+0x20>
 801c97c:	4b49      	ldr	r3, [pc, #292]	@ (801caa4 <etharp_input+0x138>)
 801c97e:	f240 228a 	movw	r2, #650	@ 0x28a
 801c982:	4949      	ldr	r1, [pc, #292]	@ (801caa8 <etharp_input+0x13c>)
 801c984:	4849      	ldr	r0, [pc, #292]	@ (801caac <etharp_input+0x140>)
 801c986:	f003 fe85 	bl	8020694 <iprintf>
 801c98a:	e088      	b.n	801ca9e <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	685b      	ldr	r3, [r3, #4]
 801c990:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c992:	697b      	ldr	r3, [r7, #20]
 801c994:	881b      	ldrh	r3, [r3, #0]
 801c996:	b29b      	uxth	r3, r3
 801c998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c99c:	d10c      	bne.n	801c9b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c99e:	697b      	ldr	r3, [r7, #20]
 801c9a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c9a2:	2b06      	cmp	r3, #6
 801c9a4:	d108      	bne.n	801c9b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c9a6:	697b      	ldr	r3, [r7, #20]
 801c9a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c9aa:	2b04      	cmp	r3, #4
 801c9ac:	d104      	bne.n	801c9b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c9ae:	697b      	ldr	r3, [r7, #20]
 801c9b0:	885b      	ldrh	r3, [r3, #2]
 801c9b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c9b4:	2b08      	cmp	r3, #8
 801c9b6:	d00f      	beq.n	801c9d8 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801c9b8:	4b3d      	ldr	r3, [pc, #244]	@ (801cab0 <etharp_input+0x144>)
 801c9ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c9bc:	3301      	adds	r3, #1
 801c9be:	b29a      	uxth	r2, r3
 801c9c0:	4b3b      	ldr	r3, [pc, #236]	@ (801cab0 <etharp_input+0x144>)
 801c9c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801c9c4:	4b3a      	ldr	r3, [pc, #232]	@ (801cab0 <etharp_input+0x144>)
 801c9c6:	8bdb      	ldrh	r3, [r3, #30]
 801c9c8:	3301      	adds	r3, #1
 801c9ca:	b29a      	uxth	r2, r3
 801c9cc:	4b38      	ldr	r3, [pc, #224]	@ (801cab0 <etharp_input+0x144>)
 801c9ce:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801c9d0:	6878      	ldr	r0, [r7, #4]
 801c9d2:	f7f8 f803 	bl	80149dc <pbuf_free>
    return;
 801c9d6:	e062      	b.n	801ca9e <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801c9d8:	4b35      	ldr	r3, [pc, #212]	@ (801cab0 <etharp_input+0x144>)
 801c9da:	8b5b      	ldrh	r3, [r3, #26]
 801c9dc:	3301      	adds	r3, #1
 801c9de:	b29a      	uxth	r2, r3
 801c9e0:	4b33      	ldr	r3, [pc, #204]	@ (801cab0 <etharp_input+0x144>)
 801c9e2:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c9e4:	697b      	ldr	r3, [r7, #20]
 801c9e6:	330e      	adds	r3, #14
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c9ec:	697b      	ldr	r3, [r7, #20]
 801c9ee:	3318      	adds	r3, #24
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c9f4:	683b      	ldr	r3, [r7, #0]
 801c9f6:	3304      	adds	r3, #4
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d102      	bne.n	801ca04 <etharp_input+0x98>
    for_us = 0;
 801c9fe:	2300      	movs	r3, #0
 801ca00:	74fb      	strb	r3, [r7, #19]
 801ca02:	e009      	b.n	801ca18 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801ca04:	68ba      	ldr	r2, [r7, #8]
 801ca06:	683b      	ldr	r3, [r7, #0]
 801ca08:	3304      	adds	r3, #4
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	429a      	cmp	r2, r3
 801ca0e:	bf0c      	ite	eq
 801ca10:	2301      	moveq	r3, #1
 801ca12:	2300      	movne	r3, #0
 801ca14:	b2db      	uxtb	r3, r3
 801ca16:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801ca18:	697b      	ldr	r3, [r7, #20]
 801ca1a:	f103 0208 	add.w	r2, r3, #8
 801ca1e:	7cfb      	ldrb	r3, [r7, #19]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d001      	beq.n	801ca28 <etharp_input+0xbc>
 801ca24:	2301      	movs	r3, #1
 801ca26:	e000      	b.n	801ca2a <etharp_input+0xbe>
 801ca28:	2302      	movs	r3, #2
 801ca2a:	f107 010c 	add.w	r1, r7, #12
 801ca2e:	6838      	ldr	r0, [r7, #0]
 801ca30:	f7ff fec6 	bl	801c7c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ca34:	697b      	ldr	r3, [r7, #20]
 801ca36:	88db      	ldrh	r3, [r3, #6]
 801ca38:	b29b      	uxth	r3, r3
 801ca3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ca3e:	d003      	beq.n	801ca48 <etharp_input+0xdc>
 801ca40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ca44:	d025      	beq.n	801ca92 <etharp_input+0x126>
 801ca46:	e01d      	b.n	801ca84 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801ca48:	7cfb      	ldrb	r3, [r7, #19]
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d023      	beq.n	801ca96 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ca4e:	683b      	ldr	r3, [r7, #0]
 801ca50:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801ca54:	697b      	ldr	r3, [r7, #20]
 801ca56:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ca5a:	683b      	ldr	r3, [r7, #0]
 801ca5c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801ca60:	683b      	ldr	r3, [r7, #0]
 801ca62:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801ca64:	697a      	ldr	r2, [r7, #20]
 801ca66:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ca68:	2102      	movs	r1, #2
 801ca6a:	9103      	str	r1, [sp, #12]
 801ca6c:	f107 010c 	add.w	r1, r7, #12
 801ca70:	9102      	str	r1, [sp, #8]
 801ca72:	9201      	str	r2, [sp, #4]
 801ca74:	9300      	str	r3, [sp, #0]
 801ca76:	462b      	mov	r3, r5
 801ca78:	4622      	mov	r2, r4
 801ca7a:	4601      	mov	r1, r0
 801ca7c:	6838      	ldr	r0, [r7, #0]
 801ca7e:	f000 fb0b 	bl	801d098 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801ca82:	e008      	b.n	801ca96 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801ca84:	4b0a      	ldr	r3, [pc, #40]	@ (801cab0 <etharp_input+0x144>)
 801ca86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801ca88:	3301      	adds	r3, #1
 801ca8a:	b29a      	uxth	r2, r3
 801ca8c:	4b08      	ldr	r3, [pc, #32]	@ (801cab0 <etharp_input+0x144>)
 801ca8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801ca90:	e002      	b.n	801ca98 <etharp_input+0x12c>
      break;
 801ca92:	bf00      	nop
 801ca94:	e000      	b.n	801ca98 <etharp_input+0x12c>
      break;
 801ca96:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ca98:	6878      	ldr	r0, [r7, #4]
 801ca9a:	f7f7 ff9f 	bl	80149dc <pbuf_free>
}
 801ca9e:	3718      	adds	r7, #24
 801caa0:	46bd      	mov	sp, r7
 801caa2:	bdb0      	pop	{r4, r5, r7, pc}
 801caa4:	080253fc 	.word	0x080253fc
 801caa8:	0802554c 	.word	0x0802554c
 801caac:	08025474 	.word	0x08025474
 801cab0:	2002d36c 	.word	0x2002d36c

0801cab4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801cab4:	b580      	push	{r7, lr}
 801cab6:	b086      	sub	sp, #24
 801cab8:	af02      	add	r7, sp, #8
 801caba:	60f8      	str	r0, [r7, #12]
 801cabc:	60b9      	str	r1, [r7, #8]
 801cabe:	4613      	mov	r3, r2
 801cac0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801cac2:	79fa      	ldrb	r2, [r7, #7]
 801cac4:	4944      	ldr	r1, [pc, #272]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cac6:	4613      	mov	r3, r2
 801cac8:	005b      	lsls	r3, r3, #1
 801caca:	4413      	add	r3, r2
 801cacc:	00db      	lsls	r3, r3, #3
 801cace:	440b      	add	r3, r1
 801cad0:	3314      	adds	r3, #20
 801cad2:	781b      	ldrb	r3, [r3, #0]
 801cad4:	2b01      	cmp	r3, #1
 801cad6:	d806      	bhi.n	801cae6 <etharp_output_to_arp_index+0x32>
 801cad8:	4b40      	ldr	r3, [pc, #256]	@ (801cbdc <etharp_output_to_arp_index+0x128>)
 801cada:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801cade:	4940      	ldr	r1, [pc, #256]	@ (801cbe0 <etharp_output_to_arp_index+0x12c>)
 801cae0:	4840      	ldr	r0, [pc, #256]	@ (801cbe4 <etharp_output_to_arp_index+0x130>)
 801cae2:	f003 fdd7 	bl	8020694 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801cae6:	79fa      	ldrb	r2, [r7, #7]
 801cae8:	493b      	ldr	r1, [pc, #236]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801caea:	4613      	mov	r3, r2
 801caec:	005b      	lsls	r3, r3, #1
 801caee:	4413      	add	r3, r2
 801caf0:	00db      	lsls	r3, r3, #3
 801caf2:	440b      	add	r3, r1
 801caf4:	3314      	adds	r3, #20
 801caf6:	781b      	ldrb	r3, [r3, #0]
 801caf8:	2b02      	cmp	r3, #2
 801cafa:	d153      	bne.n	801cba4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801cafc:	79fa      	ldrb	r2, [r7, #7]
 801cafe:	4936      	ldr	r1, [pc, #216]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cb00:	4613      	mov	r3, r2
 801cb02:	005b      	lsls	r3, r3, #1
 801cb04:	4413      	add	r3, r2
 801cb06:	00db      	lsls	r3, r3, #3
 801cb08:	440b      	add	r3, r1
 801cb0a:	3312      	adds	r3, #18
 801cb0c:	881b      	ldrh	r3, [r3, #0]
 801cb0e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801cb12:	d919      	bls.n	801cb48 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801cb14:	79fa      	ldrb	r2, [r7, #7]
 801cb16:	4613      	mov	r3, r2
 801cb18:	005b      	lsls	r3, r3, #1
 801cb1a:	4413      	add	r3, r2
 801cb1c:	00db      	lsls	r3, r3, #3
 801cb1e:	4a2e      	ldr	r2, [pc, #184]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cb20:	4413      	add	r3, r2
 801cb22:	3304      	adds	r3, #4
 801cb24:	4619      	mov	r1, r3
 801cb26:	68f8      	ldr	r0, [r7, #12]
 801cb28:	f000 fb72 	bl	801d210 <etharp_request>
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d138      	bne.n	801cba4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cb32:	79fa      	ldrb	r2, [r7, #7]
 801cb34:	4928      	ldr	r1, [pc, #160]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cb36:	4613      	mov	r3, r2
 801cb38:	005b      	lsls	r3, r3, #1
 801cb3a:	4413      	add	r3, r2
 801cb3c:	00db      	lsls	r3, r3, #3
 801cb3e:	440b      	add	r3, r1
 801cb40:	3314      	adds	r3, #20
 801cb42:	2203      	movs	r2, #3
 801cb44:	701a      	strb	r2, [r3, #0]
 801cb46:	e02d      	b.n	801cba4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801cb48:	79fa      	ldrb	r2, [r7, #7]
 801cb4a:	4923      	ldr	r1, [pc, #140]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cb4c:	4613      	mov	r3, r2
 801cb4e:	005b      	lsls	r3, r3, #1
 801cb50:	4413      	add	r3, r2
 801cb52:	00db      	lsls	r3, r3, #3
 801cb54:	440b      	add	r3, r1
 801cb56:	3312      	adds	r3, #18
 801cb58:	881b      	ldrh	r3, [r3, #0]
 801cb5a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801cb5e:	d321      	bcc.n	801cba4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801cb60:	79fa      	ldrb	r2, [r7, #7]
 801cb62:	4613      	mov	r3, r2
 801cb64:	005b      	lsls	r3, r3, #1
 801cb66:	4413      	add	r3, r2
 801cb68:	00db      	lsls	r3, r3, #3
 801cb6a:	4a1b      	ldr	r2, [pc, #108]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cb6c:	4413      	add	r3, r2
 801cb6e:	1d19      	adds	r1, r3, #4
 801cb70:	79fa      	ldrb	r2, [r7, #7]
 801cb72:	4613      	mov	r3, r2
 801cb74:	005b      	lsls	r3, r3, #1
 801cb76:	4413      	add	r3, r2
 801cb78:	00db      	lsls	r3, r3, #3
 801cb7a:	3308      	adds	r3, #8
 801cb7c:	4a16      	ldr	r2, [pc, #88]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cb7e:	4413      	add	r3, r2
 801cb80:	3304      	adds	r3, #4
 801cb82:	461a      	mov	r2, r3
 801cb84:	68f8      	ldr	r0, [r7, #12]
 801cb86:	f000 fb21 	bl	801d1cc <etharp_request_dst>
 801cb8a:	4603      	mov	r3, r0
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d109      	bne.n	801cba4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801cb90:	79fa      	ldrb	r2, [r7, #7]
 801cb92:	4911      	ldr	r1, [pc, #68]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cb94:	4613      	mov	r3, r2
 801cb96:	005b      	lsls	r3, r3, #1
 801cb98:	4413      	add	r3, r2
 801cb9a:	00db      	lsls	r3, r3, #3
 801cb9c:	440b      	add	r3, r1
 801cb9e:	3314      	adds	r3, #20
 801cba0:	2203      	movs	r2, #3
 801cba2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801cbaa:	79fa      	ldrb	r2, [r7, #7]
 801cbac:	4613      	mov	r3, r2
 801cbae:	005b      	lsls	r3, r3, #1
 801cbb0:	4413      	add	r3, r2
 801cbb2:	00db      	lsls	r3, r3, #3
 801cbb4:	3308      	adds	r3, #8
 801cbb6:	4a08      	ldr	r2, [pc, #32]	@ (801cbd8 <etharp_output_to_arp_index+0x124>)
 801cbb8:	4413      	add	r3, r2
 801cbba:	3304      	adds	r3, #4
 801cbbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801cbc0:	9200      	str	r2, [sp, #0]
 801cbc2:	460a      	mov	r2, r1
 801cbc4:	68b9      	ldr	r1, [r7, #8]
 801cbc6:	68f8      	ldr	r0, [r7, #12]
 801cbc8:	f002 f88a 	bl	801ece0 <ethernet_output>
 801cbcc:	4603      	mov	r3, r0
}
 801cbce:	4618      	mov	r0, r3
 801cbd0:	3710      	adds	r7, #16
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd80      	pop	{r7, pc}
 801cbd6:	bf00      	nop
 801cbd8:	2002d4d0 	.word	0x2002d4d0
 801cbdc:	080253fc 	.word	0x080253fc
 801cbe0:	0802556c 	.word	0x0802556c
 801cbe4:	08025474 	.word	0x08025474

0801cbe8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b08a      	sub	sp, #40	@ 0x28
 801cbec:	af02      	add	r7, sp, #8
 801cbee:	60f8      	str	r0, [r7, #12]
 801cbf0:	60b9      	str	r1, [r7, #8]
 801cbf2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d106      	bne.n	801cc0c <etharp_output+0x24>
 801cbfe:	4b76      	ldr	r3, [pc, #472]	@ (801cdd8 <etharp_output+0x1f0>)
 801cc00:	f240 321e 	movw	r2, #798	@ 0x31e
 801cc04:	4975      	ldr	r1, [pc, #468]	@ (801cddc <etharp_output+0x1f4>)
 801cc06:	4876      	ldr	r0, [pc, #472]	@ (801cde0 <etharp_output+0x1f8>)
 801cc08:	f003 fd44 	bl	8020694 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801cc0c:	68bb      	ldr	r3, [r7, #8]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d106      	bne.n	801cc20 <etharp_output+0x38>
 801cc12:	4b71      	ldr	r3, [pc, #452]	@ (801cdd8 <etharp_output+0x1f0>)
 801cc14:	f240 321f 	movw	r2, #799	@ 0x31f
 801cc18:	4972      	ldr	r1, [pc, #456]	@ (801cde4 <etharp_output+0x1fc>)
 801cc1a:	4871      	ldr	r0, [pc, #452]	@ (801cde0 <etharp_output+0x1f8>)
 801cc1c:	f003 fd3a 	bl	8020694 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d106      	bne.n	801cc34 <etharp_output+0x4c>
 801cc26:	4b6c      	ldr	r3, [pc, #432]	@ (801cdd8 <etharp_output+0x1f0>)
 801cc28:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801cc2c:	496e      	ldr	r1, [pc, #440]	@ (801cde8 <etharp_output+0x200>)
 801cc2e:	486c      	ldr	r0, [pc, #432]	@ (801cde0 <etharp_output+0x1f8>)
 801cc30:	f003 fd30 	bl	8020694 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	68f9      	ldr	r1, [r7, #12]
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	f001 f860 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 801cc40:	4603      	mov	r3, r0
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d002      	beq.n	801cc4c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801cc46:	4b69      	ldr	r3, [pc, #420]	@ (801cdec <etharp_output+0x204>)
 801cc48:	61fb      	str	r3, [r7, #28]
 801cc4a:	e0b5      	b.n	801cdb8 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cc54:	2be0      	cmp	r3, #224	@ 0xe0
 801cc56:	d118      	bne.n	801cc8a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801cc58:	2301      	movs	r3, #1
 801cc5a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801cc5c:	2300      	movs	r3, #0
 801cc5e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801cc60:	235e      	movs	r3, #94	@ 0x5e
 801cc62:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	3301      	adds	r3, #1
 801cc68:	781b      	ldrb	r3, [r3, #0]
 801cc6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cc6e:	b2db      	uxtb	r3, r3
 801cc70:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	3302      	adds	r3, #2
 801cc76:	781b      	ldrb	r3, [r3, #0]
 801cc78:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	3303      	adds	r3, #3
 801cc7e:	781b      	ldrb	r3, [r3, #0]
 801cc80:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801cc82:	f107 0310 	add.w	r3, r7, #16
 801cc86:	61fb      	str	r3, [r7, #28]
 801cc88:	e096      	b.n	801cdb8 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681a      	ldr	r2, [r3, #0]
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	3304      	adds	r3, #4
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	405a      	eors	r2, r3
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	3308      	adds	r3, #8
 801cc9a:	681b      	ldr	r3, [r3, #0]
 801cc9c:	4013      	ands	r3, r2
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d012      	beq.n	801ccc8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801cca8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801ccac:	4293      	cmp	r3, r2
 801ccae:	d00b      	beq.n	801ccc8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	330c      	adds	r3, #12
 801ccb4:	681b      	ldr	r3, [r3, #0]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d003      	beq.n	801ccc2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	330c      	adds	r3, #12
 801ccbe:	61bb      	str	r3, [r7, #24]
 801ccc0:	e002      	b.n	801ccc8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ccc2:	f06f 0303 	mvn.w	r3, #3
 801ccc6:	e083      	b.n	801cdd0 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ccc8:	4b49      	ldr	r3, [pc, #292]	@ (801cdf0 <etharp_output+0x208>)
 801ccca:	781b      	ldrb	r3, [r3, #0]
 801cccc:	4619      	mov	r1, r3
 801ccce:	4a49      	ldr	r2, [pc, #292]	@ (801cdf4 <etharp_output+0x20c>)
 801ccd0:	460b      	mov	r3, r1
 801ccd2:	005b      	lsls	r3, r3, #1
 801ccd4:	440b      	add	r3, r1
 801ccd6:	00db      	lsls	r3, r3, #3
 801ccd8:	4413      	add	r3, r2
 801ccda:	3314      	adds	r3, #20
 801ccdc:	781b      	ldrb	r3, [r3, #0]
 801ccde:	2b01      	cmp	r3, #1
 801cce0:	d92b      	bls.n	801cd3a <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cce2:	4b43      	ldr	r3, [pc, #268]	@ (801cdf0 <etharp_output+0x208>)
 801cce4:	781b      	ldrb	r3, [r3, #0]
 801cce6:	4619      	mov	r1, r3
 801cce8:	4a42      	ldr	r2, [pc, #264]	@ (801cdf4 <etharp_output+0x20c>)
 801ccea:	460b      	mov	r3, r1
 801ccec:	005b      	lsls	r3, r3, #1
 801ccee:	440b      	add	r3, r1
 801ccf0:	00db      	lsls	r3, r3, #3
 801ccf2:	4413      	add	r3, r2
 801ccf4:	3308      	adds	r3, #8
 801ccf6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ccf8:	68fa      	ldr	r2, [r7, #12]
 801ccfa:	429a      	cmp	r2, r3
 801ccfc:	d11d      	bne.n	801cd3a <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ccfe:	69bb      	ldr	r3, [r7, #24]
 801cd00:	681a      	ldr	r2, [r3, #0]
 801cd02:	4b3b      	ldr	r3, [pc, #236]	@ (801cdf0 <etharp_output+0x208>)
 801cd04:	781b      	ldrb	r3, [r3, #0]
 801cd06:	4618      	mov	r0, r3
 801cd08:	493a      	ldr	r1, [pc, #232]	@ (801cdf4 <etharp_output+0x20c>)
 801cd0a:	4603      	mov	r3, r0
 801cd0c:	005b      	lsls	r3, r3, #1
 801cd0e:	4403      	add	r3, r0
 801cd10:	00db      	lsls	r3, r3, #3
 801cd12:	440b      	add	r3, r1
 801cd14:	3304      	adds	r3, #4
 801cd16:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cd18:	429a      	cmp	r2, r3
 801cd1a:	d10e      	bne.n	801cd3a <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801cd1c:	4b36      	ldr	r3, [pc, #216]	@ (801cdf8 <etharp_output+0x210>)
 801cd1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801cd20:	3301      	adds	r3, #1
 801cd22:	b29a      	uxth	r2, r3
 801cd24:	4b34      	ldr	r3, [pc, #208]	@ (801cdf8 <etharp_output+0x210>)
 801cd26:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801cd28:	4b31      	ldr	r3, [pc, #196]	@ (801cdf0 <etharp_output+0x208>)
 801cd2a:	781b      	ldrb	r3, [r3, #0]
 801cd2c:	461a      	mov	r2, r3
 801cd2e:	68b9      	ldr	r1, [r7, #8]
 801cd30:	68f8      	ldr	r0, [r7, #12]
 801cd32:	f7ff febf 	bl	801cab4 <etharp_output_to_arp_index>
 801cd36:	4603      	mov	r3, r0
 801cd38:	e04a      	b.n	801cdd0 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	75fb      	strb	r3, [r7, #23]
 801cd3e:	e031      	b.n	801cda4 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cd40:	7dfa      	ldrb	r2, [r7, #23]
 801cd42:	492c      	ldr	r1, [pc, #176]	@ (801cdf4 <etharp_output+0x20c>)
 801cd44:	4613      	mov	r3, r2
 801cd46:	005b      	lsls	r3, r3, #1
 801cd48:	4413      	add	r3, r2
 801cd4a:	00db      	lsls	r3, r3, #3
 801cd4c:	440b      	add	r3, r1
 801cd4e:	3314      	adds	r3, #20
 801cd50:	781b      	ldrb	r3, [r3, #0]
 801cd52:	2b01      	cmp	r3, #1
 801cd54:	d923      	bls.n	801cd9e <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801cd56:	7dfa      	ldrb	r2, [r7, #23]
 801cd58:	4926      	ldr	r1, [pc, #152]	@ (801cdf4 <etharp_output+0x20c>)
 801cd5a:	4613      	mov	r3, r2
 801cd5c:	005b      	lsls	r3, r3, #1
 801cd5e:	4413      	add	r3, r2
 801cd60:	00db      	lsls	r3, r3, #3
 801cd62:	440b      	add	r3, r1
 801cd64:	3308      	adds	r3, #8
 801cd66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cd68:	68fa      	ldr	r2, [r7, #12]
 801cd6a:	429a      	cmp	r2, r3
 801cd6c:	d117      	bne.n	801cd9e <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801cd6e:	69bb      	ldr	r3, [r7, #24]
 801cd70:	6819      	ldr	r1, [r3, #0]
 801cd72:	7dfa      	ldrb	r2, [r7, #23]
 801cd74:	481f      	ldr	r0, [pc, #124]	@ (801cdf4 <etharp_output+0x20c>)
 801cd76:	4613      	mov	r3, r2
 801cd78:	005b      	lsls	r3, r3, #1
 801cd7a:	4413      	add	r3, r2
 801cd7c:	00db      	lsls	r3, r3, #3
 801cd7e:	4403      	add	r3, r0
 801cd80:	3304      	adds	r3, #4
 801cd82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801cd84:	4299      	cmp	r1, r3
 801cd86:	d10a      	bne.n	801cd9e <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801cd88:	4a19      	ldr	r2, [pc, #100]	@ (801cdf0 <etharp_output+0x208>)
 801cd8a:	7dfb      	ldrb	r3, [r7, #23]
 801cd8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801cd8e:	7dfb      	ldrb	r3, [r7, #23]
 801cd90:	461a      	mov	r2, r3
 801cd92:	68b9      	ldr	r1, [r7, #8]
 801cd94:	68f8      	ldr	r0, [r7, #12]
 801cd96:	f7ff fe8d 	bl	801cab4 <etharp_output_to_arp_index>
 801cd9a:	4603      	mov	r3, r0
 801cd9c:	e018      	b.n	801cdd0 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cd9e:	7dfb      	ldrb	r3, [r7, #23]
 801cda0:	3301      	adds	r3, #1
 801cda2:	75fb      	strb	r3, [r7, #23]
 801cda4:	7dfb      	ldrb	r3, [r7, #23]
 801cda6:	2b09      	cmp	r3, #9
 801cda8:	d9ca      	bls.n	801cd40 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801cdaa:	68ba      	ldr	r2, [r7, #8]
 801cdac:	69b9      	ldr	r1, [r7, #24]
 801cdae:	68f8      	ldr	r0, [r7, #12]
 801cdb0:	f000 f824 	bl	801cdfc <etharp_query>
 801cdb4:	4603      	mov	r3, r0
 801cdb6:	e00b      	b.n	801cdd0 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801cdb8:	68fb      	ldr	r3, [r7, #12]
 801cdba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801cdbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801cdc2:	9300      	str	r3, [sp, #0]
 801cdc4:	69fb      	ldr	r3, [r7, #28]
 801cdc6:	68b9      	ldr	r1, [r7, #8]
 801cdc8:	68f8      	ldr	r0, [r7, #12]
 801cdca:	f001 ff89 	bl	801ece0 <ethernet_output>
 801cdce:	4603      	mov	r3, r0
}
 801cdd0:	4618      	mov	r0, r3
 801cdd2:	3720      	adds	r7, #32
 801cdd4:	46bd      	mov	sp, r7
 801cdd6:	bd80      	pop	{r7, pc}
 801cdd8:	080253fc 	.word	0x080253fc
 801cddc:	0802554c 	.word	0x0802554c
 801cde0:	08025474 	.word	0x08025474
 801cde4:	0802559c 	.word	0x0802559c
 801cde8:	0802553c 	.word	0x0802553c
 801cdec:	0802676c 	.word	0x0802676c
 801cdf0:	2002d5c0 	.word	0x2002d5c0
 801cdf4:	2002d4d0 	.word	0x2002d4d0
 801cdf8:	2002d36c 	.word	0x2002d36c

0801cdfc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801cdfc:	b580      	push	{r7, lr}
 801cdfe:	b08c      	sub	sp, #48	@ 0x30
 801ce00:	af02      	add	r7, sp, #8
 801ce02:	60f8      	str	r0, [r7, #12]
 801ce04:	60b9      	str	r1, [r7, #8]
 801ce06:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	3326      	adds	r3, #38	@ 0x26
 801ce0c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ce0e:	23ff      	movs	r3, #255	@ 0xff
 801ce10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ce14:	2300      	movs	r3, #0
 801ce16:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ce18:	68bb      	ldr	r3, [r7, #8]
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	68f9      	ldr	r1, [r7, #12]
 801ce1e:	4618      	mov	r0, r3
 801ce20:	f000 ff6e 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 801ce24:	4603      	mov	r3, r0
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d10c      	bne.n	801ce44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ce2a:	68bb      	ldr	r3, [r7, #8]
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ce32:	2be0      	cmp	r3, #224	@ 0xe0
 801ce34:	d006      	beq.n	801ce44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ce36:	68bb      	ldr	r3, [r7, #8]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d003      	beq.n	801ce44 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ce3c:	68bb      	ldr	r3, [r7, #8]
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d102      	bne.n	801ce4a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ce44:	f06f 030f 	mvn.w	r3, #15
 801ce48:	e110      	b.n	801d06c <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ce4a:	68fa      	ldr	r2, [r7, #12]
 801ce4c:	2101      	movs	r1, #1
 801ce4e:	68b8      	ldr	r0, [r7, #8]
 801ce50:	f7ff fb3e 	bl	801c4d0 <etharp_find_entry>
 801ce54:	4603      	mov	r3, r0
 801ce56:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ce58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	da0b      	bge.n	801ce78 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d005      	beq.n	801ce72 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801ce66:	4b83      	ldr	r3, [pc, #524]	@ (801d074 <etharp_query+0x278>)
 801ce68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ce6a:	3301      	adds	r3, #1
 801ce6c:	b29a      	uxth	r2, r3
 801ce6e:	4b81      	ldr	r3, [pc, #516]	@ (801d074 <etharp_query+0x278>)
 801ce70:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801ce72:	8a7b      	ldrh	r3, [r7, #18]
 801ce74:	b25b      	sxtb	r3, r3
 801ce76:	e0f9      	b.n	801d06c <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ce78:	8a7b      	ldrh	r3, [r7, #18]
 801ce7a:	2b7e      	cmp	r3, #126	@ 0x7e
 801ce7c:	d906      	bls.n	801ce8c <etharp_query+0x90>
 801ce7e:	4b7e      	ldr	r3, [pc, #504]	@ (801d078 <etharp_query+0x27c>)
 801ce80:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ce84:	497d      	ldr	r1, [pc, #500]	@ (801d07c <etharp_query+0x280>)
 801ce86:	487e      	ldr	r0, [pc, #504]	@ (801d080 <etharp_query+0x284>)
 801ce88:	f003 fc04 	bl	8020694 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ce8c:	8a7b      	ldrh	r3, [r7, #18]
 801ce8e:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ce90:	7c7a      	ldrb	r2, [r7, #17]
 801ce92:	497c      	ldr	r1, [pc, #496]	@ (801d084 <etharp_query+0x288>)
 801ce94:	4613      	mov	r3, r2
 801ce96:	005b      	lsls	r3, r3, #1
 801ce98:	4413      	add	r3, r2
 801ce9a:	00db      	lsls	r3, r3, #3
 801ce9c:	440b      	add	r3, r1
 801ce9e:	3314      	adds	r3, #20
 801cea0:	781b      	ldrb	r3, [r3, #0]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d115      	bne.n	801ced2 <etharp_query+0xd6>
    is_new_entry = 1;
 801cea6:	2301      	movs	r3, #1
 801cea8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ceaa:	7c7a      	ldrb	r2, [r7, #17]
 801ceac:	4975      	ldr	r1, [pc, #468]	@ (801d084 <etharp_query+0x288>)
 801ceae:	4613      	mov	r3, r2
 801ceb0:	005b      	lsls	r3, r3, #1
 801ceb2:	4413      	add	r3, r2
 801ceb4:	00db      	lsls	r3, r3, #3
 801ceb6:	440b      	add	r3, r1
 801ceb8:	3314      	adds	r3, #20
 801ceba:	2201      	movs	r2, #1
 801cebc:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801cebe:	7c7a      	ldrb	r2, [r7, #17]
 801cec0:	4970      	ldr	r1, [pc, #448]	@ (801d084 <etharp_query+0x288>)
 801cec2:	4613      	mov	r3, r2
 801cec4:	005b      	lsls	r3, r3, #1
 801cec6:	4413      	add	r3, r2
 801cec8:	00db      	lsls	r3, r3, #3
 801ceca:	440b      	add	r3, r1
 801cecc:	3308      	adds	r3, #8
 801cece:	68fa      	ldr	r2, [r7, #12]
 801ced0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ced2:	7c7a      	ldrb	r2, [r7, #17]
 801ced4:	496b      	ldr	r1, [pc, #428]	@ (801d084 <etharp_query+0x288>)
 801ced6:	4613      	mov	r3, r2
 801ced8:	005b      	lsls	r3, r3, #1
 801ceda:	4413      	add	r3, r2
 801cedc:	00db      	lsls	r3, r3, #3
 801cede:	440b      	add	r3, r1
 801cee0:	3314      	adds	r3, #20
 801cee2:	781b      	ldrb	r3, [r3, #0]
 801cee4:	2b01      	cmp	r3, #1
 801cee6:	d011      	beq.n	801cf0c <etharp_query+0x110>
 801cee8:	7c7a      	ldrb	r2, [r7, #17]
 801ceea:	4966      	ldr	r1, [pc, #408]	@ (801d084 <etharp_query+0x288>)
 801ceec:	4613      	mov	r3, r2
 801ceee:	005b      	lsls	r3, r3, #1
 801cef0:	4413      	add	r3, r2
 801cef2:	00db      	lsls	r3, r3, #3
 801cef4:	440b      	add	r3, r1
 801cef6:	3314      	adds	r3, #20
 801cef8:	781b      	ldrb	r3, [r3, #0]
 801cefa:	2b01      	cmp	r3, #1
 801cefc:	d806      	bhi.n	801cf0c <etharp_query+0x110>
 801cefe:	4b5e      	ldr	r3, [pc, #376]	@ (801d078 <etharp_query+0x27c>)
 801cf00:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801cf04:	4960      	ldr	r1, [pc, #384]	@ (801d088 <etharp_query+0x28c>)
 801cf06:	485e      	ldr	r0, [pc, #376]	@ (801d080 <etharp_query+0x284>)
 801cf08:	f003 fbc4 	bl	8020694 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801cf0c:	6a3b      	ldr	r3, [r7, #32]
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d102      	bne.n	801cf18 <etharp_query+0x11c>
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d10c      	bne.n	801cf32 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801cf18:	68b9      	ldr	r1, [r7, #8]
 801cf1a:	68f8      	ldr	r0, [r7, #12]
 801cf1c:	f000 f978 	bl	801d210 <etharp_request>
 801cf20:	4603      	mov	r3, r0
 801cf22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d102      	bne.n	801cf32 <etharp_query+0x136>
      return result;
 801cf2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cf30:	e09c      	b.n	801d06c <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d106      	bne.n	801cf46 <etharp_query+0x14a>
 801cf38:	4b4f      	ldr	r3, [pc, #316]	@ (801d078 <etharp_query+0x27c>)
 801cf3a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801cf3e:	4953      	ldr	r1, [pc, #332]	@ (801d08c <etharp_query+0x290>)
 801cf40:	484f      	ldr	r0, [pc, #316]	@ (801d080 <etharp_query+0x284>)
 801cf42:	f003 fba7 	bl	8020694 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801cf46:	7c7a      	ldrb	r2, [r7, #17]
 801cf48:	494e      	ldr	r1, [pc, #312]	@ (801d084 <etharp_query+0x288>)
 801cf4a:	4613      	mov	r3, r2
 801cf4c:	005b      	lsls	r3, r3, #1
 801cf4e:	4413      	add	r3, r2
 801cf50:	00db      	lsls	r3, r3, #3
 801cf52:	440b      	add	r3, r1
 801cf54:	3314      	adds	r3, #20
 801cf56:	781b      	ldrb	r3, [r3, #0]
 801cf58:	2b01      	cmp	r3, #1
 801cf5a:	d917      	bls.n	801cf8c <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801cf5c:	4a4c      	ldr	r2, [pc, #304]	@ (801d090 <etharp_query+0x294>)
 801cf5e:	7c7b      	ldrb	r3, [r7, #17]
 801cf60:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801cf62:	7c7a      	ldrb	r2, [r7, #17]
 801cf64:	4613      	mov	r3, r2
 801cf66:	005b      	lsls	r3, r3, #1
 801cf68:	4413      	add	r3, r2
 801cf6a:	00db      	lsls	r3, r3, #3
 801cf6c:	3308      	adds	r3, #8
 801cf6e:	4a45      	ldr	r2, [pc, #276]	@ (801d084 <etharp_query+0x288>)
 801cf70:	4413      	add	r3, r2
 801cf72:	3304      	adds	r3, #4
 801cf74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801cf78:	9200      	str	r2, [sp, #0]
 801cf7a:	697a      	ldr	r2, [r7, #20]
 801cf7c:	6879      	ldr	r1, [r7, #4]
 801cf7e:	68f8      	ldr	r0, [r7, #12]
 801cf80:	f001 feae 	bl	801ece0 <ethernet_output>
 801cf84:	4603      	mov	r3, r0
 801cf86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cf8a:	e06d      	b.n	801d068 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cf8c:	7c7a      	ldrb	r2, [r7, #17]
 801cf8e:	493d      	ldr	r1, [pc, #244]	@ (801d084 <etharp_query+0x288>)
 801cf90:	4613      	mov	r3, r2
 801cf92:	005b      	lsls	r3, r3, #1
 801cf94:	4413      	add	r3, r2
 801cf96:	00db      	lsls	r3, r3, #3
 801cf98:	440b      	add	r3, r1
 801cf9a:	3314      	adds	r3, #20
 801cf9c:	781b      	ldrb	r3, [r3, #0]
 801cf9e:	2b01      	cmp	r3, #1
 801cfa0:	d162      	bne.n	801d068 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cfaa:	e01c      	b.n	801cfe6 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801cfac:	69fb      	ldr	r3, [r7, #28]
 801cfae:	895a      	ldrh	r2, [r3, #10]
 801cfb0:	69fb      	ldr	r3, [r7, #28]
 801cfb2:	891b      	ldrh	r3, [r3, #8]
 801cfb4:	429a      	cmp	r2, r3
 801cfb6:	d10a      	bne.n	801cfce <etharp_query+0x1d2>
 801cfb8:	69fb      	ldr	r3, [r7, #28]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d006      	beq.n	801cfce <etharp_query+0x1d2>
 801cfc0:	4b2d      	ldr	r3, [pc, #180]	@ (801d078 <etharp_query+0x27c>)
 801cfc2:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801cfc6:	4933      	ldr	r1, [pc, #204]	@ (801d094 <etharp_query+0x298>)
 801cfc8:	482d      	ldr	r0, [pc, #180]	@ (801d080 <etharp_query+0x284>)
 801cfca:	f003 fb63 	bl	8020694 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801cfce:	69fb      	ldr	r3, [r7, #28]
 801cfd0:	7b1b      	ldrb	r3, [r3, #12]
 801cfd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d002      	beq.n	801cfe0 <etharp_query+0x1e4>
        copy_needed = 1;
 801cfda:	2301      	movs	r3, #1
 801cfdc:	61bb      	str	r3, [r7, #24]
        break;
 801cfde:	e005      	b.n	801cfec <etharp_query+0x1f0>
      }
      p = p->next;
 801cfe0:	69fb      	ldr	r3, [r7, #28]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cfe6:	69fb      	ldr	r3, [r7, #28]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d1df      	bne.n	801cfac <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801cfec:	69bb      	ldr	r3, [r7, #24]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d007      	beq.n	801d002 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801cff2:	687a      	ldr	r2, [r7, #4]
 801cff4:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801cff8:	200e      	movs	r0, #14
 801cffa:	f7f7 ff93 	bl	8014f24 <pbuf_clone>
 801cffe:	61f8      	str	r0, [r7, #28]
 801d000:	e004      	b.n	801d00c <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d006:	69f8      	ldr	r0, [r7, #28]
 801d008:	f7f7 fda6 	bl	8014b58 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d00c:	69fb      	ldr	r3, [r7, #28]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d021      	beq.n	801d056 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d012:	7c7a      	ldrb	r2, [r7, #17]
 801d014:	491b      	ldr	r1, [pc, #108]	@ (801d084 <etharp_query+0x288>)
 801d016:	4613      	mov	r3, r2
 801d018:	005b      	lsls	r3, r3, #1
 801d01a:	4413      	add	r3, r2
 801d01c:	00db      	lsls	r3, r3, #3
 801d01e:	440b      	add	r3, r1
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d00a      	beq.n	801d03c <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d026:	7c7a      	ldrb	r2, [r7, #17]
 801d028:	4916      	ldr	r1, [pc, #88]	@ (801d084 <etharp_query+0x288>)
 801d02a:	4613      	mov	r3, r2
 801d02c:	005b      	lsls	r3, r3, #1
 801d02e:	4413      	add	r3, r2
 801d030:	00db      	lsls	r3, r3, #3
 801d032:	440b      	add	r3, r1
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	4618      	mov	r0, r3
 801d038:	f7f7 fcd0 	bl	80149dc <pbuf_free>
      }
      arp_table[i].q = p;
 801d03c:	7c7a      	ldrb	r2, [r7, #17]
 801d03e:	4911      	ldr	r1, [pc, #68]	@ (801d084 <etharp_query+0x288>)
 801d040:	4613      	mov	r3, r2
 801d042:	005b      	lsls	r3, r3, #1
 801d044:	4413      	add	r3, r2
 801d046:	00db      	lsls	r3, r3, #3
 801d048:	440b      	add	r3, r1
 801d04a:	69fa      	ldr	r2, [r7, #28]
 801d04c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d04e:	2300      	movs	r3, #0
 801d050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d054:	e008      	b.n	801d068 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801d056:	4b07      	ldr	r3, [pc, #28]	@ (801d074 <etharp_query+0x278>)
 801d058:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d05a:	3301      	adds	r3, #1
 801d05c:	b29a      	uxth	r2, r3
 801d05e:	4b05      	ldr	r3, [pc, #20]	@ (801d074 <etharp_query+0x278>)
 801d060:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d062:	23ff      	movs	r3, #255	@ 0xff
 801d064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801d068:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801d06c:	4618      	mov	r0, r3
 801d06e:	3728      	adds	r7, #40	@ 0x28
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}
 801d074:	2002d36c 	.word	0x2002d36c
 801d078:	080253fc 	.word	0x080253fc
 801d07c:	080255a8 	.word	0x080255a8
 801d080:	08025474 	.word	0x08025474
 801d084:	2002d4d0 	.word	0x2002d4d0
 801d088:	080255b8 	.word	0x080255b8
 801d08c:	0802559c 	.word	0x0802559c
 801d090:	2002d5c0 	.word	0x2002d5c0
 801d094:	080255e0 	.word	0x080255e0

0801d098 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d098:	b580      	push	{r7, lr}
 801d09a:	b08a      	sub	sp, #40	@ 0x28
 801d09c:	af02      	add	r7, sp, #8
 801d09e:	60f8      	str	r0, [r7, #12]
 801d0a0:	60b9      	str	r1, [r7, #8]
 801d0a2:	607a      	str	r2, [r7, #4]
 801d0a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d0aa:	68fb      	ldr	r3, [r7, #12]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d106      	bne.n	801d0be <etharp_raw+0x26>
 801d0b0:	4b40      	ldr	r3, [pc, #256]	@ (801d1b4 <etharp_raw+0x11c>)
 801d0b2:	f240 4257 	movw	r2, #1111	@ 0x457
 801d0b6:	4940      	ldr	r1, [pc, #256]	@ (801d1b8 <etharp_raw+0x120>)
 801d0b8:	4840      	ldr	r0, [pc, #256]	@ (801d1bc <etharp_raw+0x124>)
 801d0ba:	f003 faeb 	bl	8020694 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d0be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d0c2:	211c      	movs	r1, #28
 801d0c4:	200e      	movs	r0, #14
 801d0c6:	f7f7 f95d 	bl	8014384 <pbuf_alloc>
 801d0ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d0cc:	69bb      	ldr	r3, [r7, #24]
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d108      	bne.n	801d0e4 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801d0d2:	4b3b      	ldr	r3, [pc, #236]	@ (801d1c0 <etharp_raw+0x128>)
 801d0d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d0d6:	3301      	adds	r3, #1
 801d0d8:	b29a      	uxth	r2, r3
 801d0da:	4b39      	ldr	r3, [pc, #228]	@ (801d1c0 <etharp_raw+0x128>)
 801d0dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801d0de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d0e2:	e063      	b.n	801d1ac <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d0e4:	69bb      	ldr	r3, [r7, #24]
 801d0e6:	895b      	ldrh	r3, [r3, #10]
 801d0e8:	2b1b      	cmp	r3, #27
 801d0ea:	d806      	bhi.n	801d0fa <etharp_raw+0x62>
 801d0ec:	4b31      	ldr	r3, [pc, #196]	@ (801d1b4 <etharp_raw+0x11c>)
 801d0ee:	f240 4262 	movw	r2, #1122	@ 0x462
 801d0f2:	4934      	ldr	r1, [pc, #208]	@ (801d1c4 <etharp_raw+0x12c>)
 801d0f4:	4831      	ldr	r0, [pc, #196]	@ (801d1bc <etharp_raw+0x124>)
 801d0f6:	f003 facd 	bl	8020694 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d0fa:	69bb      	ldr	r3, [r7, #24]
 801d0fc:	685b      	ldr	r3, [r3, #4]
 801d0fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d100:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801d102:	4618      	mov	r0, r3
 801d104:	f7f5 fe3c 	bl	8012d80 <lwip_htons>
 801d108:	4603      	mov	r3, r0
 801d10a:	461a      	mov	r2, r3
 801d10c:	697b      	ldr	r3, [r7, #20]
 801d10e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d116:	2b06      	cmp	r3, #6
 801d118:	d006      	beq.n	801d128 <etharp_raw+0x90>
 801d11a:	4b26      	ldr	r3, [pc, #152]	@ (801d1b4 <etharp_raw+0x11c>)
 801d11c:	f240 4269 	movw	r2, #1129	@ 0x469
 801d120:	4929      	ldr	r1, [pc, #164]	@ (801d1c8 <etharp_raw+0x130>)
 801d122:	4826      	ldr	r0, [pc, #152]	@ (801d1bc <etharp_raw+0x124>)
 801d124:	f003 fab6 	bl	8020694 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d128:	697b      	ldr	r3, [r7, #20]
 801d12a:	3308      	adds	r3, #8
 801d12c:	2206      	movs	r2, #6
 801d12e:	6839      	ldr	r1, [r7, #0]
 801d130:	4618      	mov	r0, r3
 801d132:	f003 fce2 	bl	8020afa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d136:	697b      	ldr	r3, [r7, #20]
 801d138:	3312      	adds	r3, #18
 801d13a:	2206      	movs	r2, #6
 801d13c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d13e:	4618      	mov	r0, r3
 801d140:	f003 fcdb 	bl	8020afa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d144:	697b      	ldr	r3, [r7, #20]
 801d146:	330e      	adds	r3, #14
 801d148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d14a:	6812      	ldr	r2, [r2, #0]
 801d14c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d14e:	697b      	ldr	r3, [r7, #20]
 801d150:	3318      	adds	r3, #24
 801d152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d154:	6812      	ldr	r2, [r2, #0]
 801d156:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d158:	697b      	ldr	r3, [r7, #20]
 801d15a:	2200      	movs	r2, #0
 801d15c:	701a      	strb	r2, [r3, #0]
 801d15e:	2200      	movs	r2, #0
 801d160:	f042 0201 	orr.w	r2, r2, #1
 801d164:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d166:	697b      	ldr	r3, [r7, #20]
 801d168:	2200      	movs	r2, #0
 801d16a:	f042 0208 	orr.w	r2, r2, #8
 801d16e:	709a      	strb	r2, [r3, #2]
 801d170:	2200      	movs	r2, #0
 801d172:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d174:	697b      	ldr	r3, [r7, #20]
 801d176:	2206      	movs	r2, #6
 801d178:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d17a:	697b      	ldr	r3, [r7, #20]
 801d17c:	2204      	movs	r2, #4
 801d17e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d180:	f640 0306 	movw	r3, #2054	@ 0x806
 801d184:	9300      	str	r3, [sp, #0]
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	68ba      	ldr	r2, [r7, #8]
 801d18a:	69b9      	ldr	r1, [r7, #24]
 801d18c:	68f8      	ldr	r0, [r7, #12]
 801d18e:	f001 fda7 	bl	801ece0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801d192:	4b0b      	ldr	r3, [pc, #44]	@ (801d1c0 <etharp_raw+0x128>)
 801d194:	8b1b      	ldrh	r3, [r3, #24]
 801d196:	3301      	adds	r3, #1
 801d198:	b29a      	uxth	r2, r3
 801d19a:	4b09      	ldr	r3, [pc, #36]	@ (801d1c0 <etharp_raw+0x128>)
 801d19c:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801d19e:	69b8      	ldr	r0, [r7, #24]
 801d1a0:	f7f7 fc1c 	bl	80149dc <pbuf_free>
  p = NULL;
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d1a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	3720      	adds	r7, #32
 801d1b0:	46bd      	mov	sp, r7
 801d1b2:	bd80      	pop	{r7, pc}
 801d1b4:	080253fc 	.word	0x080253fc
 801d1b8:	0802554c 	.word	0x0802554c
 801d1bc:	08025474 	.word	0x08025474
 801d1c0:	2002d36c 	.word	0x2002d36c
 801d1c4:	080255fc 	.word	0x080255fc
 801d1c8:	08025630 	.word	0x08025630

0801d1cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d1cc:	b580      	push	{r7, lr}
 801d1ce:	b088      	sub	sp, #32
 801d1d0:	af04      	add	r7, sp, #16
 801d1d2:	60f8      	str	r0, [r7, #12]
 801d1d4:	60b9      	str	r1, [r7, #8]
 801d1d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d1d8:	68fb      	ldr	r3, [r7, #12]
 801d1da:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d1e8:	2201      	movs	r2, #1
 801d1ea:	9203      	str	r2, [sp, #12]
 801d1ec:	68ba      	ldr	r2, [r7, #8]
 801d1ee:	9202      	str	r2, [sp, #8]
 801d1f0:	4a06      	ldr	r2, [pc, #24]	@ (801d20c <etharp_request_dst+0x40>)
 801d1f2:	9201      	str	r2, [sp, #4]
 801d1f4:	9300      	str	r3, [sp, #0]
 801d1f6:	4603      	mov	r3, r0
 801d1f8:	687a      	ldr	r2, [r7, #4]
 801d1fa:	68f8      	ldr	r0, [r7, #12]
 801d1fc:	f7ff ff4c 	bl	801d098 <etharp_raw>
 801d200:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d202:	4618      	mov	r0, r3
 801d204:	3710      	adds	r7, #16
 801d206:	46bd      	mov	sp, r7
 801d208:	bd80      	pop	{r7, pc}
 801d20a:	bf00      	nop
 801d20c:	08026774 	.word	0x08026774

0801d210 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d210:	b580      	push	{r7, lr}
 801d212:	b082      	sub	sp, #8
 801d214:	af00      	add	r7, sp, #0
 801d216:	6078      	str	r0, [r7, #4]
 801d218:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d21a:	4a05      	ldr	r2, [pc, #20]	@ (801d230 <etharp_request+0x20>)
 801d21c:	6839      	ldr	r1, [r7, #0]
 801d21e:	6878      	ldr	r0, [r7, #4]
 801d220:	f7ff ffd4 	bl	801d1cc <etharp_request_dst>
 801d224:	4603      	mov	r3, r0
}
 801d226:	4618      	mov	r0, r3
 801d228:	3708      	adds	r7, #8
 801d22a:	46bd      	mov	sp, r7
 801d22c:	bd80      	pop	{r7, pc}
 801d22e:	bf00      	nop
 801d230:	0802676c 	.word	0x0802676c

0801d234 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d234:	b580      	push	{r7, lr}
 801d236:	b08e      	sub	sp, #56	@ 0x38
 801d238:	af04      	add	r7, sp, #16
 801d23a:	6078      	str	r0, [r7, #4]
 801d23c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801d23e:	4ba5      	ldr	r3, [pc, #660]	@ (801d4d4 <icmp_input+0x2a0>)
 801d240:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801d244:	3301      	adds	r3, #1
 801d246:	b29a      	uxth	r2, r3
 801d248:	4ba2      	ldr	r3, [pc, #648]	@ (801d4d4 <icmp_input+0x2a0>)
 801d24a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d24e:	4ba2      	ldr	r3, [pc, #648]	@ (801d4d8 <icmp_input+0x2a4>)
 801d250:	689b      	ldr	r3, [r3, #8]
 801d252:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d256:	781b      	ldrb	r3, [r3, #0]
 801d258:	f003 030f 	and.w	r3, r3, #15
 801d25c:	b2db      	uxtb	r3, r3
 801d25e:	009b      	lsls	r3, r3, #2
 801d260:	b2db      	uxtb	r3, r3
 801d262:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801d264:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d266:	2b13      	cmp	r3, #19
 801d268:	d805      	bhi.n	801d276 <icmp_input+0x42>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801d26a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d26c:	4619      	mov	r1, r3
 801d26e:	489b      	ldr	r0, [pc, #620]	@ (801d4dc <icmp_input+0x2a8>)
 801d270:	f003 fa10 	bl	8020694 <iprintf>
    goto lenerr;
 801d274:	e122      	b.n	801d4bc <icmp_input+0x288>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	895b      	ldrh	r3, [r3, #10]
 801d27a:	2b03      	cmp	r3, #3
 801d27c:	d806      	bhi.n	801d28c <icmp_input+0x58>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	891b      	ldrh	r3, [r3, #8]
 801d282:	4619      	mov	r1, r3
 801d284:	4896      	ldr	r0, [pc, #600]	@ (801d4e0 <icmp_input+0x2ac>)
 801d286:	f003 fa05 	bl	8020694 <iprintf>
    goto lenerr;
 801d28a:	e117      	b.n	801d4bc <icmp_input+0x288>
  }

  type = *((u8_t *)p->payload);
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	685b      	ldr	r3, [r3, #4]
 801d290:	781b      	ldrb	r3, [r3, #0]
 801d292:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	685b      	ldr	r3, [r3, #4]
 801d29a:	785b      	ldrb	r3, [r3, #1]
 801d29c:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d2a0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	f000 8102 	beq.w	801d4ae <icmp_input+0x27a>
 801d2aa:	2b08      	cmp	r3, #8
 801d2ac:	f040 80e6 	bne.w	801d47c <icmp_input+0x248>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d2b0:	4b8c      	ldr	r3, [pc, #560]	@ (801d4e4 <icmp_input+0x2b0>)
 801d2b2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d2b4:	4b88      	ldr	r3, [pc, #544]	@ (801d4d8 <icmp_input+0x2a4>)
 801d2b6:	695b      	ldr	r3, [r3, #20]
 801d2b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d2bc:	2be0      	cmp	r3, #224	@ 0xe0
 801d2be:	d103      	bne.n	801d2c8 <icmp_input+0x94>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801d2c0:	4889      	ldr	r0, [pc, #548]	@ (801d4e8 <icmp_input+0x2b4>)
 801d2c2:	f003 fa57 	bl	8020774 <puts>
        goto icmperr;
 801d2c6:	e12d      	b.n	801d524 <icmp_input+0x2f0>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d2c8:	4b83      	ldr	r3, [pc, #524]	@ (801d4d8 <icmp_input+0x2a4>)
 801d2ca:	695b      	ldr	r3, [r3, #20]
 801d2cc:	4a82      	ldr	r2, [pc, #520]	@ (801d4d8 <icmp_input+0x2a4>)
 801d2ce:	6812      	ldr	r2, [r2, #0]
 801d2d0:	4611      	mov	r1, r2
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	f000 fd14 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 801d2d8:	4603      	mov	r3, r0
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d003      	beq.n	801d2e6 <icmp_input+0xb2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801d2de:	4883      	ldr	r0, [pc, #524]	@ (801d4ec <icmp_input+0x2b8>)
 801d2e0:	f003 fa48 	bl	8020774 <puts>
        goto icmperr;
 801d2e4:	e11e      	b.n	801d524 <icmp_input+0x2f0>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801d2e6:	4882      	ldr	r0, [pc, #520]	@ (801d4f0 <icmp_input+0x2bc>)
 801d2e8:	f003 fa44 	bl	8020774 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	891b      	ldrh	r3, [r3, #8]
 801d2f0:	2b07      	cmp	r3, #7
 801d2f2:	d803      	bhi.n	801d2fc <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801d2f4:	487f      	ldr	r0, [pc, #508]	@ (801d4f4 <icmp_input+0x2c0>)
 801d2f6:	f003 fa3d 	bl	8020774 <puts>
        goto lenerr;
 801d2fa:	e0df      	b.n	801d4bc <icmp_input+0x288>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d2fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d2fe:	330e      	adds	r3, #14
 801d300:	4619      	mov	r1, r3
 801d302:	6878      	ldr	r0, [r7, #4]
 801d304:	f7f7 facc 	bl	80148a0 <pbuf_add_header>
 801d308:	4603      	mov	r3, r0
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d057      	beq.n	801d3be <icmp_input+0x18a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	891a      	ldrh	r2, [r3, #8]
 801d312:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d314:	4413      	add	r3, r2
 801d316:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	891b      	ldrh	r3, [r3, #8]
 801d31c:	8b7a      	ldrh	r2, [r7, #26]
 801d31e:	429a      	cmp	r2, r3
 801d320:	d203      	bcs.n	801d32a <icmp_input+0xf6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801d322:	4875      	ldr	r0, [pc, #468]	@ (801d4f8 <icmp_input+0x2c4>)
 801d324:	f003 fa26 	bl	8020774 <puts>
          goto icmperr;
 801d328:	e0fc      	b.n	801d524 <icmp_input+0x2f0>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d32a:	8b7b      	ldrh	r3, [r7, #26]
 801d32c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d330:	4619      	mov	r1, r3
 801d332:	200e      	movs	r0, #14
 801d334:	f7f7 f826 	bl	8014384 <pbuf_alloc>
 801d338:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d33a:	697b      	ldr	r3, [r7, #20]
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d103      	bne.n	801d348 <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801d340:	486e      	ldr	r0, [pc, #440]	@ (801d4fc <icmp_input+0x2c8>)
 801d342:	f003 fa17 	bl	8020774 <puts>
          goto icmperr;
 801d346:	e0ed      	b.n	801d524 <icmp_input+0x2f0>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d348:	697b      	ldr	r3, [r7, #20]
 801d34a:	895b      	ldrh	r3, [r3, #10]
 801d34c:	461a      	mov	r2, r3
 801d34e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d350:	3308      	adds	r3, #8
 801d352:	429a      	cmp	r2, r3
 801d354:	d206      	bcs.n	801d364 <icmp_input+0x130>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801d356:	486a      	ldr	r0, [pc, #424]	@ (801d500 <icmp_input+0x2cc>)
 801d358:	f003 f99c 	bl	8020694 <iprintf>
          pbuf_free(r);
 801d35c:	6978      	ldr	r0, [r7, #20]
 801d35e:	f7f7 fb3d 	bl	80149dc <pbuf_free>
          goto icmperr;
 801d362:	e0df      	b.n	801d524 <icmp_input+0x2f0>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d364:	697b      	ldr	r3, [r7, #20]
 801d366:	685b      	ldr	r3, [r3, #4]
 801d368:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801d36a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d36c:	4618      	mov	r0, r3
 801d36e:	f003 fbc4 	bl	8020afa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d372:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d374:	4619      	mov	r1, r3
 801d376:	6978      	ldr	r0, [r7, #20]
 801d378:	f7f7 faa2 	bl	80148c0 <pbuf_remove_header>
 801d37c:	4603      	mov	r3, r0
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d009      	beq.n	801d396 <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d382:	4b60      	ldr	r3, [pc, #384]	@ (801d504 <icmp_input+0x2d0>)
 801d384:	22b6      	movs	r2, #182	@ 0xb6
 801d386:	4960      	ldr	r1, [pc, #384]	@ (801d508 <icmp_input+0x2d4>)
 801d388:	4860      	ldr	r0, [pc, #384]	@ (801d50c <icmp_input+0x2d8>)
 801d38a:	f003 f983 	bl	8020694 <iprintf>
          pbuf_free(r);
 801d38e:	6978      	ldr	r0, [r7, #20]
 801d390:	f7f7 fb24 	bl	80149dc <pbuf_free>
          goto icmperr;
 801d394:	e0c6      	b.n	801d524 <icmp_input+0x2f0>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d396:	6879      	ldr	r1, [r7, #4]
 801d398:	6978      	ldr	r0, [r7, #20]
 801d39a:	f7f7 fc73 	bl	8014c84 <pbuf_copy>
 801d39e:	4603      	mov	r3, r0
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d006      	beq.n	801d3b2 <icmp_input+0x17e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801d3a4:	485a      	ldr	r0, [pc, #360]	@ (801d510 <icmp_input+0x2dc>)
 801d3a6:	f003 f975 	bl	8020694 <iprintf>
          pbuf_free(r);
 801d3aa:	6978      	ldr	r0, [r7, #20]
 801d3ac:	f7f7 fb16 	bl	80149dc <pbuf_free>
          goto icmperr;
 801d3b0:	e0b8      	b.n	801d524 <icmp_input+0x2f0>
        }
        /* free the original p */
        pbuf_free(p);
 801d3b2:	6878      	ldr	r0, [r7, #4]
 801d3b4:	f7f7 fb12 	bl	80149dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d3b8:	697b      	ldr	r3, [r7, #20]
 801d3ba:	607b      	str	r3, [r7, #4]
 801d3bc:	e00f      	b.n	801d3de <icmp_input+0x1aa>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d3be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d3c0:	330e      	adds	r3, #14
 801d3c2:	4619      	mov	r1, r3
 801d3c4:	6878      	ldr	r0, [r7, #4]
 801d3c6:	f7f7 fa7b 	bl	80148c0 <pbuf_remove_header>
 801d3ca:	4603      	mov	r3, r0
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d006      	beq.n	801d3de <icmp_input+0x1aa>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d3d0:	4b4c      	ldr	r3, [pc, #304]	@ (801d504 <icmp_input+0x2d0>)
 801d3d2:	22c7      	movs	r2, #199	@ 0xc7
 801d3d4:	494f      	ldr	r1, [pc, #316]	@ (801d514 <icmp_input+0x2e0>)
 801d3d6:	484d      	ldr	r0, [pc, #308]	@ (801d50c <icmp_input+0x2d8>)
 801d3d8:	f003 f95c 	bl	8020694 <iprintf>
          goto icmperr;
 801d3dc:	e0a2      	b.n	801d524 <icmp_input+0x2f0>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	685b      	ldr	r3, [r3, #4]
 801d3e2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d3e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d3e6:	4619      	mov	r1, r3
 801d3e8:	6878      	ldr	r0, [r7, #4]
 801d3ea:	f7f7 fa59 	bl	80148a0 <pbuf_add_header>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d003      	beq.n	801d3fc <icmp_input+0x1c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801d3f4:	4848      	ldr	r0, [pc, #288]	@ (801d518 <icmp_input+0x2e4>)
 801d3f6:	f003 f94d 	bl	8020694 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d3fa:	e05a      	b.n	801d4b2 <icmp_input+0x27e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	685b      	ldr	r3, [r3, #4]
 801d400:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d402:	69fb      	ldr	r3, [r7, #28]
 801d404:	681a      	ldr	r2, [r3, #0]
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d40a:	4b33      	ldr	r3, [pc, #204]	@ (801d4d8 <icmp_input+0x2a4>)
 801d40c:	691a      	ldr	r2, [r3, #16]
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d412:	693b      	ldr	r3, [r7, #16]
 801d414:	2200      	movs	r2, #0
 801d416:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801d418:	693b      	ldr	r3, [r7, #16]
 801d41a:	2200      	movs	r2, #0
 801d41c:	709a      	strb	r2, [r3, #2]
 801d41e:	2200      	movs	r2, #0
 801d420:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	22ff      	movs	r2, #255	@ 0xff
 801d426:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	2200      	movs	r2, #0
 801d42c:	729a      	strb	r2, [r3, #10]
 801d42e:	2200      	movs	r2, #0
 801d430:	72da      	strb	r2, [r3, #11]
        ICMP_STATS_INC(icmp.xmit);
 801d432:	4b28      	ldr	r3, [pc, #160]	@ (801d4d4 <icmp_input+0x2a0>)
 801d434:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d438:	3301      	adds	r3, #1
 801d43a:	b29a      	uxth	r2, r3
 801d43c:	4b25      	ldr	r3, [pc, #148]	@ (801d4d4 <icmp_input+0x2a0>)
 801d43e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d442:	683b      	ldr	r3, [r7, #0]
 801d444:	9302      	str	r3, [sp, #8]
 801d446:	2301      	movs	r3, #1
 801d448:	9301      	str	r3, [sp, #4]
 801d44a:	2300      	movs	r3, #0
 801d44c:	9300      	str	r3, [sp, #0]
 801d44e:	23ff      	movs	r3, #255	@ 0xff
 801d450:	2200      	movs	r2, #0
 801d452:	69f9      	ldr	r1, [r7, #28]
 801d454:	6878      	ldr	r0, [r7, #4]
 801d456:	f000 fb61 	bl	801db1c <ip4_output_if>
 801d45a:	4603      	mov	r3, r0
 801d45c:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801d45e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d462:	2b00      	cmp	r3, #0
 801d464:	d025      	beq.n	801d4b2 <icmp_input+0x27e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801d466:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d46a:	4618      	mov	r0, r3
 801d46c:	f7f5 f9e8 	bl	8012840 <lwip_strerr>
 801d470:	4603      	mov	r3, r0
 801d472:	4619      	mov	r1, r3
 801d474:	4829      	ldr	r0, [pc, #164]	@ (801d51c <icmp_input+0x2e8>)
 801d476:	f003 f90d 	bl	8020694 <iprintf>
      break;
 801d47a:	e01a      	b.n	801d4b2 <icmp_input+0x27e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801d47c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801d480:	f897 2020 	ldrb.w	r2, [r7, #32]
 801d484:	4619      	mov	r1, r3
 801d486:	4826      	ldr	r0, [pc, #152]	@ (801d520 <icmp_input+0x2ec>)
 801d488:	f003 f904 	bl	8020694 <iprintf>
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801d48c:	4b11      	ldr	r3, [pc, #68]	@ (801d4d4 <icmp_input+0x2a0>)
 801d48e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801d492:	3301      	adds	r3, #1
 801d494:	b29a      	uxth	r2, r3
 801d496:	4b0f      	ldr	r3, [pc, #60]	@ (801d4d4 <icmp_input+0x2a0>)
 801d498:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801d49c:	4b0d      	ldr	r3, [pc, #52]	@ (801d4d4 <icmp_input+0x2a0>)
 801d49e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d4a2:	3301      	adds	r3, #1
 801d4a4:	b29a      	uxth	r2, r3
 801d4a6:	4b0b      	ldr	r3, [pc, #44]	@ (801d4d4 <icmp_input+0x2a0>)
 801d4a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801d4ac:	e002      	b.n	801d4b4 <icmp_input+0x280>
      break;
 801d4ae:	bf00      	nop
 801d4b0:	e000      	b.n	801d4b4 <icmp_input+0x280>
      break;
 801d4b2:	bf00      	nop
  }
  pbuf_free(p);
 801d4b4:	6878      	ldr	r0, [r7, #4]
 801d4b6:	f7f7 fa91 	bl	80149dc <pbuf_free>
  return;
 801d4ba:	e03f      	b.n	801d53c <icmp_input+0x308>
lenerr:
  pbuf_free(p);
 801d4bc:	6878      	ldr	r0, [r7, #4]
 801d4be:	f7f7 fa8d 	bl	80149dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801d4c2:	4b04      	ldr	r3, [pc, #16]	@ (801d4d4 <icmp_input+0x2a0>)
 801d4c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801d4c8:	3301      	adds	r3, #1
 801d4ca:	b29a      	uxth	r2, r3
 801d4cc:	4b01      	ldr	r3, [pc, #4]	@ (801d4d4 <icmp_input+0x2a0>)
 801d4ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d4d2:	e033      	b.n	801d53c <icmp_input+0x308>
 801d4d4:	2002d36c 	.word	0x2002d36c
 801d4d8:	200270fc 	.word	0x200270fc
 801d4dc:	08025674 	.word	0x08025674
 801d4e0:	080256a8 	.word	0x080256a8
 801d4e4:	20027110 	.word	0x20027110
 801d4e8:	080256d8 	.word	0x080256d8
 801d4ec:	08025704 	.word	0x08025704
 801d4f0:	08025730 	.word	0x08025730
 801d4f4:	08025744 	.word	0x08025744
 801d4f8:	08025768 	.word	0x08025768
 801d4fc:	080257a4 	.word	0x080257a4
 801d500:	080257cc 	.word	0x080257cc
 801d504:	080257f4 	.word	0x080257f4
 801d508:	0802582c 	.word	0x0802582c
 801d50c:	08025864 	.word	0x08025864
 801d510:	0802588c 	.word	0x0802588c
 801d514:	080258b4 	.word	0x080258b4
 801d518:	080258e8 	.word	0x080258e8
 801d51c:	0802590c 	.word	0x0802590c
 801d520:	0802593c 	.word	0x0802593c
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d524:	6878      	ldr	r0, [r7, #4]
 801d526:	f7f7 fa59 	bl	80149dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801d52a:	4b06      	ldr	r3, [pc, #24]	@ (801d544 <icmp_input+0x310>)
 801d52c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801d530:	3301      	adds	r3, #1
 801d532:	b29a      	uxth	r2, r3
 801d534:	4b03      	ldr	r3, [pc, #12]	@ (801d544 <icmp_input+0x310>)
 801d536:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d53a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d53c:	3728      	adds	r7, #40	@ 0x28
 801d53e:	46bd      	mov	sp, r7
 801d540:	bd80      	pop	{r7, pc}
 801d542:	bf00      	nop
 801d544:	2002d36c 	.word	0x2002d36c

0801d548 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b082      	sub	sp, #8
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
 801d550:	460b      	mov	r3, r1
 801d552:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d554:	78fb      	ldrb	r3, [r7, #3]
 801d556:	461a      	mov	r2, r3
 801d558:	2103      	movs	r1, #3
 801d55a:	6878      	ldr	r0, [r7, #4]
 801d55c:	f000 f814 	bl	801d588 <icmp_send_response>
}
 801d560:	bf00      	nop
 801d562:	3708      	adds	r7, #8
 801d564:	46bd      	mov	sp, r7
 801d566:	bd80      	pop	{r7, pc}

0801d568 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d568:	b580      	push	{r7, lr}
 801d56a:	b082      	sub	sp, #8
 801d56c:	af00      	add	r7, sp, #0
 801d56e:	6078      	str	r0, [r7, #4]
 801d570:	460b      	mov	r3, r1
 801d572:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d574:	78fb      	ldrb	r3, [r7, #3]
 801d576:	461a      	mov	r2, r3
 801d578:	210b      	movs	r1, #11
 801d57a:	6878      	ldr	r0, [r7, #4]
 801d57c:	f000 f804 	bl	801d588 <icmp_send_response>
}
 801d580:	bf00      	nop
 801d582:	3708      	adds	r7, #8
 801d584:	46bd      	mov	sp, r7
 801d586:	bd80      	pop	{r7, pc}

0801d588 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d588:	b580      	push	{r7, lr}
 801d58a:	b08c      	sub	sp, #48	@ 0x30
 801d58c:	af04      	add	r7, sp, #16
 801d58e:	6078      	str	r0, [r7, #4]
 801d590:	460b      	mov	r3, r1
 801d592:	70fb      	strb	r3, [r7, #3]
 801d594:	4613      	mov	r3, r2
 801d596:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d598:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d59c:	2124      	movs	r1, #36	@ 0x24
 801d59e:	2022      	movs	r0, #34	@ 0x22
 801d5a0:	f7f6 fef0 	bl	8014384 <pbuf_alloc>
 801d5a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d5a6:	69fb      	ldr	r3, [r7, #28]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d103      	bne.n	801d5b4 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801d5ac:	4848      	ldr	r0, [pc, #288]	@ (801d6d0 <icmp_send_response+0x148>)
 801d5ae:	f003 f8e1 	bl	8020774 <puts>
 801d5b2:	e08a      	b.n	801d6ca <icmp_send_response+0x142>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d5b4:	69fb      	ldr	r3, [r7, #28]
 801d5b6:	895b      	ldrh	r3, [r3, #10]
 801d5b8:	2b23      	cmp	r3, #35	@ 0x23
 801d5ba:	d806      	bhi.n	801d5ca <icmp_send_response+0x42>
 801d5bc:	4b45      	ldr	r3, [pc, #276]	@ (801d6d4 <icmp_send_response+0x14c>)
 801d5be:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801d5c2:	4945      	ldr	r1, [pc, #276]	@ (801d6d8 <icmp_send_response+0x150>)
 801d5c4:	4845      	ldr	r0, [pc, #276]	@ (801d6dc <icmp_send_response+0x154>)
 801d5c6:	f003 f865 	bl	8020694 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	685b      	ldr	r3, [r3, #4]
 801d5ce:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801d5d0:	4843      	ldr	r0, [pc, #268]	@ (801d6e0 <icmp_send_response+0x158>)
 801d5d2:	f003 f85f 	bl	8020694 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801d5d6:	69bb      	ldr	r3, [r7, #24]
 801d5d8:	68db      	ldr	r3, [r3, #12]
 801d5da:	b2db      	uxtb	r3, r3
 801d5dc:	4619      	mov	r1, r3
 801d5de:	69bb      	ldr	r3, [r7, #24]
 801d5e0:	68db      	ldr	r3, [r3, #12]
 801d5e2:	0a1b      	lsrs	r3, r3, #8
 801d5e4:	b2db      	uxtb	r3, r3
 801d5e6:	461a      	mov	r2, r3
 801d5e8:	69bb      	ldr	r3, [r7, #24]
 801d5ea:	68db      	ldr	r3, [r3, #12]
 801d5ec:	0c1b      	lsrs	r3, r3, #16
 801d5ee:	b2db      	uxtb	r3, r3
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	69bb      	ldr	r3, [r7, #24]
 801d5f4:	68db      	ldr	r3, [r3, #12]
 801d5f6:	0e1b      	lsrs	r3, r3, #24
 801d5f8:	b2db      	uxtb	r3, r3
 801d5fa:	9300      	str	r3, [sp, #0]
 801d5fc:	4603      	mov	r3, r0
 801d5fe:	4839      	ldr	r0, [pc, #228]	@ (801d6e4 <icmp_send_response+0x15c>)
 801d600:	f003 f848 	bl	8020694 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801d604:	4838      	ldr	r0, [pc, #224]	@ (801d6e8 <icmp_send_response+0x160>)
 801d606:	f003 f845 	bl	8020694 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801d60a:	69bb      	ldr	r3, [r7, #24]
 801d60c:	691b      	ldr	r3, [r3, #16]
 801d60e:	b2db      	uxtb	r3, r3
 801d610:	4619      	mov	r1, r3
 801d612:	69bb      	ldr	r3, [r7, #24]
 801d614:	691b      	ldr	r3, [r3, #16]
 801d616:	0a1b      	lsrs	r3, r3, #8
 801d618:	b2db      	uxtb	r3, r3
 801d61a:	461a      	mov	r2, r3
 801d61c:	69bb      	ldr	r3, [r7, #24]
 801d61e:	691b      	ldr	r3, [r3, #16]
 801d620:	0c1b      	lsrs	r3, r3, #16
 801d622:	b2db      	uxtb	r3, r3
 801d624:	4618      	mov	r0, r3
 801d626:	69bb      	ldr	r3, [r7, #24]
 801d628:	691b      	ldr	r3, [r3, #16]
 801d62a:	0e1b      	lsrs	r3, r3, #24
 801d62c:	b2db      	uxtb	r3, r3
 801d62e:	9300      	str	r3, [sp, #0]
 801d630:	4603      	mov	r3, r0
 801d632:	482c      	ldr	r0, [pc, #176]	@ (801d6e4 <icmp_send_response+0x15c>)
 801d634:	f003 f82e 	bl	8020694 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801d638:	200a      	movs	r0, #10
 801d63a:	f003 f83d 	bl	80206b8 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d63e:	69fb      	ldr	r3, [r7, #28]
 801d640:	685b      	ldr	r3, [r3, #4]
 801d642:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d644:	697b      	ldr	r3, [r7, #20]
 801d646:	78fa      	ldrb	r2, [r7, #3]
 801d648:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d64a:	697b      	ldr	r3, [r7, #20]
 801d64c:	78ba      	ldrb	r2, [r7, #2]
 801d64e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d650:	697b      	ldr	r3, [r7, #20]
 801d652:	2200      	movs	r2, #0
 801d654:	711a      	strb	r2, [r3, #4]
 801d656:	2200      	movs	r2, #0
 801d658:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d65a:	697b      	ldr	r3, [r7, #20]
 801d65c:	2200      	movs	r2, #0
 801d65e:	719a      	strb	r2, [r3, #6]
 801d660:	2200      	movs	r2, #0
 801d662:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d664:	69fb      	ldr	r3, [r7, #28]
 801d666:	685b      	ldr	r3, [r3, #4]
 801d668:	f103 0008 	add.w	r0, r3, #8
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	685b      	ldr	r3, [r3, #4]
 801d670:	221c      	movs	r2, #28
 801d672:	4619      	mov	r1, r3
 801d674:	f003 fa41 	bl	8020afa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d678:	69bb      	ldr	r3, [r7, #24]
 801d67a:	68db      	ldr	r3, [r3, #12]
 801d67c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d67e:	f107 030c 	add.w	r3, r7, #12
 801d682:	4618      	mov	r0, r3
 801d684:	f000 f834 	bl	801d6f0 <ip4_route>
 801d688:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d68a:	693b      	ldr	r3, [r7, #16]
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d019      	beq.n	801d6c4 <icmp_send_response+0x13c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d690:	697b      	ldr	r3, [r7, #20]
 801d692:	2200      	movs	r2, #0
 801d694:	709a      	strb	r2, [r3, #2]
 801d696:	2200      	movs	r2, #0
 801d698:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801d69a:	4b14      	ldr	r3, [pc, #80]	@ (801d6ec <icmp_send_response+0x164>)
 801d69c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d6a0:	3301      	adds	r3, #1
 801d6a2:	b29a      	uxth	r2, r3
 801d6a4:	4b11      	ldr	r3, [pc, #68]	@ (801d6ec <icmp_send_response+0x164>)
 801d6a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d6aa:	f107 020c 	add.w	r2, r7, #12
 801d6ae:	693b      	ldr	r3, [r7, #16]
 801d6b0:	9302      	str	r3, [sp, #8]
 801d6b2:	2301      	movs	r3, #1
 801d6b4:	9301      	str	r3, [sp, #4]
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	9300      	str	r3, [sp, #0]
 801d6ba:	23ff      	movs	r3, #255	@ 0xff
 801d6bc:	2100      	movs	r1, #0
 801d6be:	69f8      	ldr	r0, [r7, #28]
 801d6c0:	f000 fa2c 	bl	801db1c <ip4_output_if>
  }
  pbuf_free(q);
 801d6c4:	69f8      	ldr	r0, [r7, #28]
 801d6c6:	f7f7 f989 	bl	80149dc <pbuf_free>
}
 801d6ca:	3720      	adds	r7, #32
 801d6cc:	46bd      	mov	sp, r7
 801d6ce:	bd80      	pop	{r7, pc}
 801d6d0:	08025970 	.word	0x08025970
 801d6d4:	080257f4 	.word	0x080257f4
 801d6d8:	080259b0 	.word	0x080259b0
 801d6dc:	08025864 	.word	0x08025864
 801d6e0:	080259dc 	.word	0x080259dc
 801d6e4:	080259f8 	.word	0x080259f8
 801d6e8:	08025a08 	.word	0x08025a08
 801d6ec:	2002d36c 	.word	0x2002d36c

0801d6f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d6f0:	b480      	push	{r7}
 801d6f2:	b085      	sub	sp, #20
 801d6f4:	af00      	add	r7, sp, #0
 801d6f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d6f8:	4b37      	ldr	r3, [pc, #220]	@ (801d7d8 <ip4_route+0xe8>)
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	60fb      	str	r3, [r7, #12]
 801d6fe:	e036      	b.n	801d76e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d706:	f003 0301 	and.w	r3, r3, #1
 801d70a:	b2db      	uxtb	r3, r3
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d02b      	beq.n	801d768 <ip4_route+0x78>
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d716:	089b      	lsrs	r3, r3, #2
 801d718:	f003 0301 	and.w	r3, r3, #1
 801d71c:	b2db      	uxtb	r3, r3
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d022      	beq.n	801d768 <ip4_route+0x78>
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	3304      	adds	r3, #4
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d01d      	beq.n	801d768 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	681a      	ldr	r2, [r3, #0]
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	3304      	adds	r3, #4
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	405a      	eors	r2, r3
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	3308      	adds	r3, #8
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	4013      	ands	r3, r2
 801d740:	2b00      	cmp	r3, #0
 801d742:	d101      	bne.n	801d748 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	e040      	b.n	801d7ca <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d74e:	f003 0302 	and.w	r3, r3, #2
 801d752:	2b00      	cmp	r3, #0
 801d754:	d108      	bne.n	801d768 <ip4_route+0x78>
 801d756:	687b      	ldr	r3, [r7, #4]
 801d758:	681a      	ldr	r2, [r3, #0]
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	330c      	adds	r3, #12
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	429a      	cmp	r2, r3
 801d762:	d101      	bne.n	801d768 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	e030      	b.n	801d7ca <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	60fb      	str	r3, [r7, #12]
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d1c5      	bne.n	801d700 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d774:	4b19      	ldr	r3, [pc, #100]	@ (801d7dc <ip4_route+0xec>)
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d01a      	beq.n	801d7b2 <ip4_route+0xc2>
 801d77c:	4b17      	ldr	r3, [pc, #92]	@ (801d7dc <ip4_route+0xec>)
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d784:	f003 0301 	and.w	r3, r3, #1
 801d788:	2b00      	cmp	r3, #0
 801d78a:	d012      	beq.n	801d7b2 <ip4_route+0xc2>
 801d78c:	4b13      	ldr	r3, [pc, #76]	@ (801d7dc <ip4_route+0xec>)
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d794:	f003 0304 	and.w	r3, r3, #4
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d00a      	beq.n	801d7b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d79c:	4b0f      	ldr	r3, [pc, #60]	@ (801d7dc <ip4_route+0xec>)
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	3304      	adds	r3, #4
 801d7a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d004      	beq.n	801d7b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	681b      	ldr	r3, [r3, #0]
 801d7ac:	b2db      	uxtb	r3, r3
 801d7ae:	2b7f      	cmp	r3, #127	@ 0x7f
 801d7b0:	d109      	bne.n	801d7c6 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801d7b2:	4b0b      	ldr	r3, [pc, #44]	@ (801d7e0 <ip4_route+0xf0>)
 801d7b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801d7b8:	3301      	adds	r3, #1
 801d7ba:	b29a      	uxth	r2, r3
 801d7bc:	4b08      	ldr	r3, [pc, #32]	@ (801d7e0 <ip4_route+0xf0>)
 801d7be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d7c2:	2300      	movs	r3, #0
 801d7c4:	e001      	b.n	801d7ca <ip4_route+0xda>
  }

  return netif_default;
 801d7c6:	4b05      	ldr	r3, [pc, #20]	@ (801d7dc <ip4_route+0xec>)
 801d7c8:	681b      	ldr	r3, [r3, #0]
}
 801d7ca:	4618      	mov	r0, r3
 801d7cc:	3714      	adds	r7, #20
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d4:	4770      	bx	lr
 801d7d6:	bf00      	nop
 801d7d8:	2002d360 	.word	0x2002d360
 801d7dc:	2002d364 	.word	0x2002d364
 801d7e0:	2002d36c 	.word	0x2002d36c

0801d7e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d7e4:	b580      	push	{r7, lr}
 801d7e6:	b082      	sub	sp, #8
 801d7e8:	af00      	add	r7, sp, #0
 801d7ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d7f2:	f003 0301 	and.w	r3, r3, #1
 801d7f6:	b2db      	uxtb	r3, r3
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	d016      	beq.n	801d82a <ip4_input_accept+0x46>
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	3304      	adds	r3, #4
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	2b00      	cmp	r3, #0
 801d804:	d011      	beq.n	801d82a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d806:	4b0b      	ldr	r3, [pc, #44]	@ (801d834 <ip4_input_accept+0x50>)
 801d808:	695a      	ldr	r2, [r3, #20]
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	3304      	adds	r3, #4
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	429a      	cmp	r2, r3
 801d812:	d008      	beq.n	801d826 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d814:	4b07      	ldr	r3, [pc, #28]	@ (801d834 <ip4_input_accept+0x50>)
 801d816:	695b      	ldr	r3, [r3, #20]
 801d818:	6879      	ldr	r1, [r7, #4]
 801d81a:	4618      	mov	r0, r3
 801d81c:	f000 fa70 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 801d820:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d822:	2b00      	cmp	r3, #0
 801d824:	d001      	beq.n	801d82a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d826:	2301      	movs	r3, #1
 801d828:	e000      	b.n	801d82c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d82a:	2300      	movs	r3, #0
}
 801d82c:	4618      	mov	r0, r3
 801d82e:	3708      	adds	r7, #8
 801d830:	46bd      	mov	sp, r7
 801d832:	bd80      	pop	{r7, pc}
 801d834:	200270fc 	.word	0x200270fc

0801d838 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d838:	b580      	push	{r7, lr}
 801d83a:	b086      	sub	sp, #24
 801d83c:	af00      	add	r7, sp, #0
 801d83e:	6078      	str	r0, [r7, #4]
 801d840:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801d842:	4b8f      	ldr	r3, [pc, #572]	@ (801da80 <ip4_input+0x248>)
 801d844:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801d848:	3301      	adds	r3, #1
 801d84a:	b29a      	uxth	r2, r3
 801d84c:	4b8c      	ldr	r3, [pc, #560]	@ (801da80 <ip4_input+0x248>)
 801d84e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	685b      	ldr	r3, [r3, #4]
 801d856:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801d858:	693b      	ldr	r3, [r7, #16]
 801d85a:	781b      	ldrb	r3, [r3, #0]
 801d85c:	091b      	lsrs	r3, r3, #4
 801d85e:	b2db      	uxtb	r3, r3
 801d860:	2b04      	cmp	r3, #4
 801d862:	d014      	beq.n	801d88e <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d864:	6878      	ldr	r0, [r7, #4]
 801d866:	f7f7 f8b9 	bl	80149dc <pbuf_free>
    IP_STATS_INC(ip.err);
 801d86a:	4b85      	ldr	r3, [pc, #532]	@ (801da80 <ip4_input+0x248>)
 801d86c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d870:	3301      	adds	r3, #1
 801d872:	b29a      	uxth	r2, r3
 801d874:	4b82      	ldr	r3, [pc, #520]	@ (801da80 <ip4_input+0x248>)
 801d876:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801d87a:	4b81      	ldr	r3, [pc, #516]	@ (801da80 <ip4_input+0x248>)
 801d87c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d880:	3301      	adds	r3, #1
 801d882:	b29a      	uxth	r2, r3
 801d884:	4b7e      	ldr	r3, [pc, #504]	@ (801da80 <ip4_input+0x248>)
 801d886:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d88a:	2300      	movs	r3, #0
 801d88c:	e13e      	b.n	801db0c <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d88e:	693b      	ldr	r3, [r7, #16]
 801d890:	781b      	ldrb	r3, [r3, #0]
 801d892:	f003 030f 	and.w	r3, r3, #15
 801d896:	b2db      	uxtb	r3, r3
 801d898:	009b      	lsls	r3, r3, #2
 801d89a:	b2db      	uxtb	r3, r3
 801d89c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d89e:	693b      	ldr	r3, [r7, #16]
 801d8a0:	885b      	ldrh	r3, [r3, #2]
 801d8a2:	b29b      	uxth	r3, r3
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	f7f5 fa6b 	bl	8012d80 <lwip_htons>
 801d8aa:	4603      	mov	r3, r0
 801d8ac:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	891b      	ldrh	r3, [r3, #8]
 801d8b2:	89ba      	ldrh	r2, [r7, #12]
 801d8b4:	429a      	cmp	r2, r3
 801d8b6:	d204      	bcs.n	801d8c2 <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801d8b8:	89bb      	ldrh	r3, [r7, #12]
 801d8ba:	4619      	mov	r1, r3
 801d8bc:	6878      	ldr	r0, [r7, #4]
 801d8be:	f7f6 feed 	bl	801469c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	895b      	ldrh	r3, [r3, #10]
 801d8c6:	89fa      	ldrh	r2, [r7, #14]
 801d8c8:	429a      	cmp	r2, r3
 801d8ca:	d807      	bhi.n	801d8dc <ip4_input+0xa4>
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	891b      	ldrh	r3, [r3, #8]
 801d8d0:	89ba      	ldrh	r2, [r7, #12]
 801d8d2:	429a      	cmp	r2, r3
 801d8d4:	d802      	bhi.n	801d8dc <ip4_input+0xa4>
 801d8d6:	89fb      	ldrh	r3, [r7, #14]
 801d8d8:	2b13      	cmp	r3, #19
 801d8da:	d814      	bhi.n	801d906 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d8dc:	6878      	ldr	r0, [r7, #4]
 801d8de:	f7f7 f87d 	bl	80149dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801d8e2:	4b67      	ldr	r3, [pc, #412]	@ (801da80 <ip4_input+0x248>)
 801d8e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801d8e8:	3301      	adds	r3, #1
 801d8ea:	b29a      	uxth	r2, r3
 801d8ec:	4b64      	ldr	r3, [pc, #400]	@ (801da80 <ip4_input+0x248>)
 801d8ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801d8f2:	4b63      	ldr	r3, [pc, #396]	@ (801da80 <ip4_input+0x248>)
 801d8f4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d8f8:	3301      	adds	r3, #1
 801d8fa:	b29a      	uxth	r2, r3
 801d8fc:	4b60      	ldr	r3, [pc, #384]	@ (801da80 <ip4_input+0x248>)
 801d8fe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d902:	2300      	movs	r3, #0
 801d904:	e102      	b.n	801db0c <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d906:	693b      	ldr	r3, [r7, #16]
 801d908:	691b      	ldr	r3, [r3, #16]
 801d90a:	4a5e      	ldr	r2, [pc, #376]	@ (801da84 <ip4_input+0x24c>)
 801d90c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d90e:	693b      	ldr	r3, [r7, #16]
 801d910:	68db      	ldr	r3, [r3, #12]
 801d912:	4a5c      	ldr	r2, [pc, #368]	@ (801da84 <ip4_input+0x24c>)
 801d914:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d916:	4b5b      	ldr	r3, [pc, #364]	@ (801da84 <ip4_input+0x24c>)
 801d918:	695b      	ldr	r3, [r3, #20]
 801d91a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d91e:	2be0      	cmp	r3, #224	@ 0xe0
 801d920:	d112      	bne.n	801d948 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d922:	683b      	ldr	r3, [r7, #0]
 801d924:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d928:	f003 0301 	and.w	r3, r3, #1
 801d92c:	b2db      	uxtb	r3, r3
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d007      	beq.n	801d942 <ip4_input+0x10a>
 801d932:	683b      	ldr	r3, [r7, #0]
 801d934:	3304      	adds	r3, #4
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d002      	beq.n	801d942 <ip4_input+0x10a>
      netif = inp;
 801d93c:	683b      	ldr	r3, [r7, #0]
 801d93e:	617b      	str	r3, [r7, #20]
 801d940:	e02a      	b.n	801d998 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d942:	2300      	movs	r3, #0
 801d944:	617b      	str	r3, [r7, #20]
 801d946:	e027      	b.n	801d998 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d948:	6838      	ldr	r0, [r7, #0]
 801d94a:	f7ff ff4b 	bl	801d7e4 <ip4_input_accept>
 801d94e:	4603      	mov	r3, r0
 801d950:	2b00      	cmp	r3, #0
 801d952:	d002      	beq.n	801d95a <ip4_input+0x122>
      netif = inp;
 801d954:	683b      	ldr	r3, [r7, #0]
 801d956:	617b      	str	r3, [r7, #20]
 801d958:	e01e      	b.n	801d998 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d95a:	2300      	movs	r3, #0
 801d95c:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d95e:	4b49      	ldr	r3, [pc, #292]	@ (801da84 <ip4_input+0x24c>)
 801d960:	695b      	ldr	r3, [r3, #20]
 801d962:	b2db      	uxtb	r3, r3
 801d964:	2b7f      	cmp	r3, #127	@ 0x7f
 801d966:	d017      	beq.n	801d998 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d968:	4b47      	ldr	r3, [pc, #284]	@ (801da88 <ip4_input+0x250>)
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	617b      	str	r3, [r7, #20]
 801d96e:	e00e      	b.n	801d98e <ip4_input+0x156>
          if (netif == inp) {
 801d970:	697a      	ldr	r2, [r7, #20]
 801d972:	683b      	ldr	r3, [r7, #0]
 801d974:	429a      	cmp	r2, r3
 801d976:	d006      	beq.n	801d986 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d978:	6978      	ldr	r0, [r7, #20]
 801d97a:	f7ff ff33 	bl	801d7e4 <ip4_input_accept>
 801d97e:	4603      	mov	r3, r0
 801d980:	2b00      	cmp	r3, #0
 801d982:	d108      	bne.n	801d996 <ip4_input+0x15e>
 801d984:	e000      	b.n	801d988 <ip4_input+0x150>
            continue;
 801d986:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d988:	697b      	ldr	r3, [r7, #20]
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	617b      	str	r3, [r7, #20]
 801d98e:	697b      	ldr	r3, [r7, #20]
 801d990:	2b00      	cmp	r3, #0
 801d992:	d1ed      	bne.n	801d970 <ip4_input+0x138>
 801d994:	e000      	b.n	801d998 <ip4_input+0x160>
            break;
 801d996:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d998:	4b3a      	ldr	r3, [pc, #232]	@ (801da84 <ip4_input+0x24c>)
 801d99a:	691b      	ldr	r3, [r3, #16]
 801d99c:	6839      	ldr	r1, [r7, #0]
 801d99e:	4618      	mov	r0, r3
 801d9a0:	f000 f9ae 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 801d9a4:	4603      	mov	r3, r0
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d105      	bne.n	801d9b6 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d9aa:	4b36      	ldr	r3, [pc, #216]	@ (801da84 <ip4_input+0x24c>)
 801d9ac:	691b      	ldr	r3, [r3, #16]
 801d9ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d9b2:	2be0      	cmp	r3, #224	@ 0xe0
 801d9b4:	d10c      	bne.n	801d9d0 <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d9b6:	6878      	ldr	r0, [r7, #4]
 801d9b8:	f7f7 f810 	bl	80149dc <pbuf_free>
      IP_STATS_INC(ip.drop);
 801d9bc:	4b30      	ldr	r3, [pc, #192]	@ (801da80 <ip4_input+0x248>)
 801d9be:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d9c2:	3301      	adds	r3, #1
 801d9c4:	b29a      	uxth	r2, r3
 801d9c6:	4b2e      	ldr	r3, [pc, #184]	@ (801da80 <ip4_input+0x248>)
 801d9c8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	e09d      	b.n	801db0c <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d9d0:	697b      	ldr	r3, [r7, #20]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d10c      	bne.n	801d9f0 <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801d9d6:	4b2a      	ldr	r3, [pc, #168]	@ (801da80 <ip4_input+0x248>)
 801d9d8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d9dc:	3301      	adds	r3, #1
 801d9de:	b29a      	uxth	r2, r3
 801d9e0:	4b27      	ldr	r3, [pc, #156]	@ (801da80 <ip4_input+0x248>)
 801d9e2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d9e6:	6878      	ldr	r0, [r7, #4]
 801d9e8:	f7f6 fff8 	bl	80149dc <pbuf_free>
    return ERR_OK;
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	e08d      	b.n	801db0c <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d9f0:	693b      	ldr	r3, [r7, #16]
 801d9f2:	88db      	ldrh	r3, [r3, #6]
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	461a      	mov	r2, r3
 801d9f8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801d9fc:	4013      	ands	r3, r2
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d00b      	beq.n	801da1a <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801da02:	6878      	ldr	r0, [r7, #4]
 801da04:	f000 fd5a 	bl	801e4bc <ip4_reass>
 801da08:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d101      	bne.n	801da14 <ip4_input+0x1dc>
      return ERR_OK;
 801da10:	2300      	movs	r3, #0
 801da12:	e07b      	b.n	801db0c <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	685b      	ldr	r3, [r3, #4]
 801da18:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801da1a:	4a1a      	ldr	r2, [pc, #104]	@ (801da84 <ip4_input+0x24c>)
 801da1c:	697b      	ldr	r3, [r7, #20]
 801da1e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801da20:	4a18      	ldr	r2, [pc, #96]	@ (801da84 <ip4_input+0x24c>)
 801da22:	683b      	ldr	r3, [r7, #0]
 801da24:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801da26:	4a17      	ldr	r2, [pc, #92]	@ (801da84 <ip4_input+0x24c>)
 801da28:	693b      	ldr	r3, [r7, #16]
 801da2a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801da2c:	693b      	ldr	r3, [r7, #16]
 801da2e:	781b      	ldrb	r3, [r3, #0]
 801da30:	f003 030f 	and.w	r3, r3, #15
 801da34:	b2db      	uxtb	r3, r3
 801da36:	009b      	lsls	r3, r3, #2
 801da38:	b2db      	uxtb	r3, r3
 801da3a:	461a      	mov	r2, r3
 801da3c:	4b11      	ldr	r3, [pc, #68]	@ (801da84 <ip4_input+0x24c>)
 801da3e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801da40:	89fb      	ldrh	r3, [r7, #14]
 801da42:	4619      	mov	r1, r3
 801da44:	6878      	ldr	r0, [r7, #4]
 801da46:	f7f6 ff3b 	bl	80148c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801da4a:	693b      	ldr	r3, [r7, #16]
 801da4c:	7a5b      	ldrb	r3, [r3, #9]
 801da4e:	2b11      	cmp	r3, #17
 801da50:	d006      	beq.n	801da60 <ip4_input+0x228>
 801da52:	2b11      	cmp	r3, #17
 801da54:	dc1a      	bgt.n	801da8c <ip4_input+0x254>
 801da56:	2b01      	cmp	r3, #1
 801da58:	d00c      	beq.n	801da74 <ip4_input+0x23c>
 801da5a:	2b06      	cmp	r3, #6
 801da5c:	d005      	beq.n	801da6a <ip4_input+0x232>
 801da5e:	e015      	b.n	801da8c <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801da60:	6839      	ldr	r1, [r7, #0]
 801da62:	6878      	ldr	r0, [r7, #4]
 801da64:	f7fd fdd2 	bl	801b60c <udp_input>
        break;
 801da68:	e03d      	b.n	801dae6 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801da6a:	6839      	ldr	r1, [r7, #0]
 801da6c:	6878      	ldr	r0, [r7, #4]
 801da6e:	f7f9 f86f 	bl	8016b50 <tcp_input>
        break;
 801da72:	e038      	b.n	801dae6 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801da74:	6839      	ldr	r1, [r7, #0]
 801da76:	6878      	ldr	r0, [r7, #4]
 801da78:	f7ff fbdc 	bl	801d234 <icmp_input>
        break;
 801da7c:	e033      	b.n	801dae6 <ip4_input+0x2ae>
 801da7e:	bf00      	nop
 801da80:	2002d36c 	.word	0x2002d36c
 801da84:	200270fc 	.word	0x200270fc
 801da88:	2002d360 	.word	0x2002d360
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801da8c:	4b21      	ldr	r3, [pc, #132]	@ (801db14 <ip4_input+0x2dc>)
 801da8e:	695b      	ldr	r3, [r3, #20]
 801da90:	6979      	ldr	r1, [r7, #20]
 801da92:	4618      	mov	r0, r3
 801da94:	f000 f934 	bl	801dd00 <ip4_addr_isbroadcast_u32>
 801da98:	4603      	mov	r3, r0
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d10f      	bne.n	801dabe <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801da9e:	4b1d      	ldr	r3, [pc, #116]	@ (801db14 <ip4_input+0x2dc>)
 801daa0:	695b      	ldr	r3, [r3, #20]
 801daa2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801daa6:	2be0      	cmp	r3, #224	@ 0xe0
 801daa8:	d009      	beq.n	801dabe <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801daaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801daae:	4619      	mov	r1, r3
 801dab0:	6878      	ldr	r0, [r7, #4]
 801dab2:	f7f6 ff80 	bl	80149b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801dab6:	2102      	movs	r1, #2
 801dab8:	6878      	ldr	r0, [r7, #4]
 801daba:	f7ff fd45 	bl	801d548 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801dabe:	4b16      	ldr	r3, [pc, #88]	@ (801db18 <ip4_input+0x2e0>)
 801dac0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801dac4:	3301      	adds	r3, #1
 801dac6:	b29a      	uxth	r2, r3
 801dac8:	4b13      	ldr	r3, [pc, #76]	@ (801db18 <ip4_input+0x2e0>)
 801daca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801dace:	4b12      	ldr	r3, [pc, #72]	@ (801db18 <ip4_input+0x2e0>)
 801dad0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801dad4:	3301      	adds	r3, #1
 801dad6:	b29a      	uxth	r2, r3
 801dad8:	4b0f      	ldr	r3, [pc, #60]	@ (801db18 <ip4_input+0x2e0>)
 801dada:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801dade:	6878      	ldr	r0, [r7, #4]
 801dae0:	f7f6 ff7c 	bl	80149dc <pbuf_free>
        break;
 801dae4:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801dae6:	4b0b      	ldr	r3, [pc, #44]	@ (801db14 <ip4_input+0x2dc>)
 801dae8:	2200      	movs	r2, #0
 801daea:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801daec:	4b09      	ldr	r3, [pc, #36]	@ (801db14 <ip4_input+0x2dc>)
 801daee:	2200      	movs	r2, #0
 801daf0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801daf2:	4b08      	ldr	r3, [pc, #32]	@ (801db14 <ip4_input+0x2dc>)
 801daf4:	2200      	movs	r2, #0
 801daf6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801daf8:	4b06      	ldr	r3, [pc, #24]	@ (801db14 <ip4_input+0x2dc>)
 801dafa:	2200      	movs	r2, #0
 801dafc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801dafe:	4b05      	ldr	r3, [pc, #20]	@ (801db14 <ip4_input+0x2dc>)
 801db00:	2200      	movs	r2, #0
 801db02:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801db04:	4b03      	ldr	r3, [pc, #12]	@ (801db14 <ip4_input+0x2dc>)
 801db06:	2200      	movs	r2, #0
 801db08:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801db0a:	2300      	movs	r3, #0
}
 801db0c:	4618      	mov	r0, r3
 801db0e:	3718      	adds	r7, #24
 801db10:	46bd      	mov	sp, r7
 801db12:	bd80      	pop	{r7, pc}
 801db14:	200270fc 	.word	0x200270fc
 801db18:	2002d36c 	.word	0x2002d36c

0801db1c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801db1c:	b580      	push	{r7, lr}
 801db1e:	b08a      	sub	sp, #40	@ 0x28
 801db20:	af04      	add	r7, sp, #16
 801db22:	60f8      	str	r0, [r7, #12]
 801db24:	60b9      	str	r1, [r7, #8]
 801db26:	607a      	str	r2, [r7, #4]
 801db28:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801db2a:	68bb      	ldr	r3, [r7, #8]
 801db2c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	2b00      	cmp	r3, #0
 801db32:	d009      	beq.n	801db48 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801db34:	68bb      	ldr	r3, [r7, #8]
 801db36:	2b00      	cmp	r3, #0
 801db38:	d003      	beq.n	801db42 <ip4_output_if+0x26>
 801db3a:	68bb      	ldr	r3, [r7, #8]
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d102      	bne.n	801db48 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801db42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db44:	3304      	adds	r3, #4
 801db46:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801db48:	78fa      	ldrb	r2, [r7, #3]
 801db4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db4c:	9302      	str	r3, [sp, #8]
 801db4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801db52:	9301      	str	r3, [sp, #4]
 801db54:	f897 3020 	ldrb.w	r3, [r7, #32]
 801db58:	9300      	str	r3, [sp, #0]
 801db5a:	4613      	mov	r3, r2
 801db5c:	687a      	ldr	r2, [r7, #4]
 801db5e:	6979      	ldr	r1, [r7, #20]
 801db60:	68f8      	ldr	r0, [r7, #12]
 801db62:	f000 f805 	bl	801db70 <ip4_output_if_src>
 801db66:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801db68:	4618      	mov	r0, r3
 801db6a:	3718      	adds	r7, #24
 801db6c:	46bd      	mov	sp, r7
 801db6e:	bd80      	pop	{r7, pc}

0801db70 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801db70:	b580      	push	{r7, lr}
 801db72:	b088      	sub	sp, #32
 801db74:	af00      	add	r7, sp, #0
 801db76:	60f8      	str	r0, [r7, #12]
 801db78:	60b9      	str	r1, [r7, #8]
 801db7a:	607a      	str	r2, [r7, #4]
 801db7c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	7b9b      	ldrb	r3, [r3, #14]
 801db82:	2b01      	cmp	r3, #1
 801db84:	d006      	beq.n	801db94 <ip4_output_if_src+0x24>
 801db86:	4b57      	ldr	r3, [pc, #348]	@ (801dce4 <ip4_output_if_src+0x174>)
 801db88:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801db8c:	4956      	ldr	r1, [pc, #344]	@ (801dce8 <ip4_output_if_src+0x178>)
 801db8e:	4857      	ldr	r0, [pc, #348]	@ (801dcec <ip4_output_if_src+0x17c>)
 801db90:	f002 fd80 	bl	8020694 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	2b00      	cmp	r3, #0
 801db98:	d068      	beq.n	801dc6c <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801db9a:	2314      	movs	r3, #20
 801db9c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801db9e:	2114      	movs	r1, #20
 801dba0:	68f8      	ldr	r0, [r7, #12]
 801dba2:	f7f6 fe7d 	bl	80148a0 <pbuf_add_header>
 801dba6:	4603      	mov	r3, r0
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	d00a      	beq.n	801dbc2 <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801dbac:	4b50      	ldr	r3, [pc, #320]	@ (801dcf0 <ip4_output_if_src+0x180>)
 801dbae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801dbb2:	3301      	adds	r3, #1
 801dbb4:	b29a      	uxth	r2, r3
 801dbb6:	4b4e      	ldr	r3, [pc, #312]	@ (801dcf0 <ip4_output_if_src+0x180>)
 801dbb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dbbc:	f06f 0301 	mvn.w	r3, #1
 801dbc0:	e08c      	b.n	801dcdc <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	685b      	ldr	r3, [r3, #4]
 801dbc6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	895b      	ldrh	r3, [r3, #10]
 801dbcc:	2b13      	cmp	r3, #19
 801dbce:	d806      	bhi.n	801dbde <ip4_output_if_src+0x6e>
 801dbd0:	4b44      	ldr	r3, [pc, #272]	@ (801dce4 <ip4_output_if_src+0x174>)
 801dbd2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801dbd6:	4947      	ldr	r1, [pc, #284]	@ (801dcf4 <ip4_output_if_src+0x184>)
 801dbd8:	4844      	ldr	r0, [pc, #272]	@ (801dcec <ip4_output_if_src+0x17c>)
 801dbda:	f002 fd5b 	bl	8020694 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801dbde:	69fb      	ldr	r3, [r7, #28]
 801dbe0:	78fa      	ldrb	r2, [r7, #3]
 801dbe2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801dbe4:	69fb      	ldr	r3, [r7, #28]
 801dbe6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801dbea:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	681a      	ldr	r2, [r3, #0]
 801dbf0:	69fb      	ldr	r3, [r7, #28]
 801dbf2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801dbf4:	8b7b      	ldrh	r3, [r7, #26]
 801dbf6:	089b      	lsrs	r3, r3, #2
 801dbf8:	b29b      	uxth	r3, r3
 801dbfa:	b2db      	uxtb	r3, r3
 801dbfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc00:	b2da      	uxtb	r2, r3
 801dc02:	69fb      	ldr	r3, [r7, #28]
 801dc04:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801dc06:	69fb      	ldr	r3, [r7, #28]
 801dc08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801dc0c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	891b      	ldrh	r3, [r3, #8]
 801dc12:	4618      	mov	r0, r3
 801dc14:	f7f5 f8b4 	bl	8012d80 <lwip_htons>
 801dc18:	4603      	mov	r3, r0
 801dc1a:	461a      	mov	r2, r3
 801dc1c:	69fb      	ldr	r3, [r7, #28]
 801dc1e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801dc20:	69fb      	ldr	r3, [r7, #28]
 801dc22:	2200      	movs	r2, #0
 801dc24:	719a      	strb	r2, [r3, #6]
 801dc26:	2200      	movs	r2, #0
 801dc28:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801dc2a:	4b33      	ldr	r3, [pc, #204]	@ (801dcf8 <ip4_output_if_src+0x188>)
 801dc2c:	881b      	ldrh	r3, [r3, #0]
 801dc2e:	4618      	mov	r0, r3
 801dc30:	f7f5 f8a6 	bl	8012d80 <lwip_htons>
 801dc34:	4603      	mov	r3, r0
 801dc36:	461a      	mov	r2, r3
 801dc38:	69fb      	ldr	r3, [r7, #28]
 801dc3a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801dc3c:	4b2e      	ldr	r3, [pc, #184]	@ (801dcf8 <ip4_output_if_src+0x188>)
 801dc3e:	881b      	ldrh	r3, [r3, #0]
 801dc40:	3301      	adds	r3, #1
 801dc42:	b29a      	uxth	r2, r3
 801dc44:	4b2c      	ldr	r3, [pc, #176]	@ (801dcf8 <ip4_output_if_src+0x188>)
 801dc46:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801dc48:	68bb      	ldr	r3, [r7, #8]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d104      	bne.n	801dc58 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801dc4e:	4b2b      	ldr	r3, [pc, #172]	@ (801dcfc <ip4_output_if_src+0x18c>)
 801dc50:	681a      	ldr	r2, [r3, #0]
 801dc52:	69fb      	ldr	r3, [r7, #28]
 801dc54:	60da      	str	r2, [r3, #12]
 801dc56:	e003      	b.n	801dc60 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801dc58:	68bb      	ldr	r3, [r7, #8]
 801dc5a:	681a      	ldr	r2, [r3, #0]
 801dc5c:	69fb      	ldr	r3, [r7, #28]
 801dc5e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801dc60:	69fb      	ldr	r3, [r7, #28]
 801dc62:	2200      	movs	r2, #0
 801dc64:	729a      	strb	r2, [r3, #10]
 801dc66:	2200      	movs	r2, #0
 801dc68:	72da      	strb	r2, [r3, #11]
 801dc6a:	e017      	b.n	801dc9c <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801dc6c:	68fb      	ldr	r3, [r7, #12]
 801dc6e:	895b      	ldrh	r3, [r3, #10]
 801dc70:	2b13      	cmp	r3, #19
 801dc72:	d80a      	bhi.n	801dc8a <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801dc74:	4b1e      	ldr	r3, [pc, #120]	@ (801dcf0 <ip4_output_if_src+0x180>)
 801dc76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801dc7a:	3301      	adds	r3, #1
 801dc7c:	b29a      	uxth	r2, r3
 801dc7e:	4b1c      	ldr	r3, [pc, #112]	@ (801dcf0 <ip4_output_if_src+0x180>)
 801dc80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801dc84:	f06f 0301 	mvn.w	r3, #1
 801dc88:	e028      	b.n	801dcdc <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801dc8a:	68fb      	ldr	r3, [r7, #12]
 801dc8c:	685b      	ldr	r3, [r3, #4]
 801dc8e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801dc90:	69fb      	ldr	r3, [r7, #28]
 801dc92:	691b      	ldr	r3, [r3, #16]
 801dc94:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801dc96:	f107 0314 	add.w	r3, r7, #20
 801dc9a:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801dc9c:	4b14      	ldr	r3, [pc, #80]	@ (801dcf0 <ip4_output_if_src+0x180>)
 801dc9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801dca2:	3301      	adds	r3, #1
 801dca4:	b29a      	uxth	r2, r3
 801dca6:	4b12      	ldr	r3, [pc, #72]	@ (801dcf0 <ip4_output_if_src+0x180>)
 801dca8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801dcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d00c      	beq.n	801dcce <ip4_output_if_src+0x15e>
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	891a      	ldrh	r2, [r3, #8]
 801dcb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dcbc:	429a      	cmp	r2, r3
 801dcbe:	d906      	bls.n	801dcce <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801dcc0:	687a      	ldr	r2, [r7, #4]
 801dcc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801dcc4:	68f8      	ldr	r0, [r7, #12]
 801dcc6:	f000 fe0b 	bl	801e8e0 <ip4_frag>
 801dcca:	4603      	mov	r3, r0
 801dccc:	e006      	b.n	801dcdc <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801dcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcd0:	695b      	ldr	r3, [r3, #20]
 801dcd2:	687a      	ldr	r2, [r7, #4]
 801dcd4:	68f9      	ldr	r1, [r7, #12]
 801dcd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801dcd8:	4798      	blx	r3
 801dcda:	4603      	mov	r3, r0
}
 801dcdc:	4618      	mov	r0, r3
 801dcde:	3720      	adds	r7, #32
 801dce0:	46bd      	mov	sp, r7
 801dce2:	bd80      	pop	{r7, pc}
 801dce4:	08025a10 	.word	0x08025a10
 801dce8:	08025a44 	.word	0x08025a44
 801dcec:	08025a50 	.word	0x08025a50
 801dcf0:	2002d36c 	.word	0x2002d36c
 801dcf4:	08025a78 	.word	0x08025a78
 801dcf8:	2002d5c2 	.word	0x2002d5c2
 801dcfc:	08026768 	.word	0x08026768

0801dd00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801dd00:	b480      	push	{r7}
 801dd02:	b085      	sub	sp, #20
 801dd04:	af00      	add	r7, sp, #0
 801dd06:	6078      	str	r0, [r7, #4]
 801dd08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dd14:	d002      	beq.n	801dd1c <ip4_addr_isbroadcast_u32+0x1c>
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d101      	bne.n	801dd20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801dd1c:	2301      	movs	r3, #1
 801dd1e:	e02a      	b.n	801dd76 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801dd20:	683b      	ldr	r3, [r7, #0]
 801dd22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801dd26:	f003 0302 	and.w	r3, r3, #2
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d101      	bne.n	801dd32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801dd2e:	2300      	movs	r3, #0
 801dd30:	e021      	b.n	801dd76 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801dd32:	683b      	ldr	r3, [r7, #0]
 801dd34:	3304      	adds	r3, #4
 801dd36:	681b      	ldr	r3, [r3, #0]
 801dd38:	687a      	ldr	r2, [r7, #4]
 801dd3a:	429a      	cmp	r2, r3
 801dd3c:	d101      	bne.n	801dd42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801dd3e:	2300      	movs	r3, #0
 801dd40:	e019      	b.n	801dd76 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801dd42:	68fa      	ldr	r2, [r7, #12]
 801dd44:	683b      	ldr	r3, [r7, #0]
 801dd46:	3304      	adds	r3, #4
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	405a      	eors	r2, r3
 801dd4c:	683b      	ldr	r3, [r7, #0]
 801dd4e:	3308      	adds	r3, #8
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	4013      	ands	r3, r2
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d10d      	bne.n	801dd74 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801dd58:	683b      	ldr	r3, [r7, #0]
 801dd5a:	3308      	adds	r3, #8
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	43da      	mvns	r2, r3
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801dd64:	683b      	ldr	r3, [r7, #0]
 801dd66:	3308      	adds	r3, #8
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801dd6c:	429a      	cmp	r2, r3
 801dd6e:	d101      	bne.n	801dd74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801dd70:	2301      	movs	r3, #1
 801dd72:	e000      	b.n	801dd76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801dd74:	2300      	movs	r3, #0
  }
}
 801dd76:	4618      	mov	r0, r3
 801dd78:	3714      	adds	r7, #20
 801dd7a:	46bd      	mov	sp, r7
 801dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd80:	4770      	bx	lr
	...

0801dd84 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801dd84:	b580      	push	{r7, lr}
 801dd86:	b082      	sub	sp, #8
 801dd88:	af00      	add	r7, sp, #0
 801dd8a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801dd8c:	2210      	movs	r2, #16
 801dd8e:	4904      	ldr	r1, [pc, #16]	@ (801dda0 <ip4addr_ntoa+0x1c>)
 801dd90:	6878      	ldr	r0, [r7, #4]
 801dd92:	f000 f807 	bl	801dda4 <ip4addr_ntoa_r>
 801dd96:	4603      	mov	r3, r0
}
 801dd98:	4618      	mov	r0, r3
 801dd9a:	3708      	adds	r7, #8
 801dd9c:	46bd      	mov	sp, r7
 801dd9e:	bd80      	pop	{r7, pc}
 801dda0:	2002d5c4 	.word	0x2002d5c4

0801dda4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801dda4:	b480      	push	{r7}
 801dda6:	b08d      	sub	sp, #52	@ 0x34
 801dda8:	af00      	add	r7, sp, #0
 801ddaa:	60f8      	str	r0, [r7, #12]
 801ddac:	60b9      	str	r1, [r7, #8]
 801ddae:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801ddb0:	2300      	movs	r3, #0
 801ddb2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801ddba:	68bb      	ldr	r3, [r7, #8]
 801ddbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801ddbe:	f107 0318 	add.w	r3, r7, #24
 801ddc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801ddc4:	2300      	movs	r3, #0
 801ddc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ddca:	e058      	b.n	801de7e <ip4addr_ntoa_r+0xda>
    i = 0;
 801ddcc:	2300      	movs	r3, #0
 801ddce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801ddd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddd4:	781a      	ldrb	r2, [r3, #0]
 801ddd6:	4b32      	ldr	r3, [pc, #200]	@ (801dea0 <ip4addr_ntoa_r+0xfc>)
 801ddd8:	fba3 1302 	umull	r1, r3, r3, r2
 801dddc:	08d9      	lsrs	r1, r3, #3
 801ddde:	460b      	mov	r3, r1
 801dde0:	009b      	lsls	r3, r3, #2
 801dde2:	440b      	add	r3, r1
 801dde4:	005b      	lsls	r3, r3, #1
 801dde6:	1ad3      	subs	r3, r2, r3
 801dde8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801ddea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddec:	781b      	ldrb	r3, [r3, #0]
 801ddee:	4a2c      	ldr	r2, [pc, #176]	@ (801dea0 <ip4addr_ntoa_r+0xfc>)
 801ddf0:	fba2 2303 	umull	r2, r3, r2, r3
 801ddf4:	08db      	lsrs	r3, r3, #3
 801ddf6:	b2da      	uxtb	r2, r3
 801ddf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddfa:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801ddfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801de00:	1c5a      	adds	r2, r3, #1
 801de02:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801de06:	4619      	mov	r1, r3
 801de08:	7ffb      	ldrb	r3, [r7, #31]
 801de0a:	3330      	adds	r3, #48	@ 0x30
 801de0c:	b2da      	uxtb	r2, r3
 801de0e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801de12:	443b      	add	r3, r7
 801de14:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801de18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de1a:	781b      	ldrb	r3, [r3, #0]
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d1d8      	bne.n	801ddd2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801de20:	e011      	b.n	801de46 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801de22:	6a3b      	ldr	r3, [r7, #32]
 801de24:	1c5a      	adds	r2, r3, #1
 801de26:	623a      	str	r2, [r7, #32]
 801de28:	687a      	ldr	r2, [r7, #4]
 801de2a:	429a      	cmp	r2, r3
 801de2c:	dc01      	bgt.n	801de32 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801de2e:	2300      	movs	r3, #0
 801de30:	e030      	b.n	801de94 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801de32:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801de36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de38:	1c59      	adds	r1, r3, #1
 801de3a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801de3c:	3230      	adds	r2, #48	@ 0x30
 801de3e:	443a      	add	r2, r7
 801de40:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801de44:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801de46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801de4a:	1e5a      	subs	r2, r3, #1
 801de4c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801de50:	2b00      	cmp	r3, #0
 801de52:	d1e6      	bne.n	801de22 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801de54:	6a3b      	ldr	r3, [r7, #32]
 801de56:	1c5a      	adds	r2, r3, #1
 801de58:	623a      	str	r2, [r7, #32]
 801de5a:	687a      	ldr	r2, [r7, #4]
 801de5c:	429a      	cmp	r2, r3
 801de5e:	dc01      	bgt.n	801de64 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801de60:	2300      	movs	r3, #0
 801de62:	e017      	b.n	801de94 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801de64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de66:	1c5a      	adds	r2, r3, #1
 801de68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801de6a:	222e      	movs	r2, #46	@ 0x2e
 801de6c:	701a      	strb	r2, [r3, #0]
    ap++;
 801de6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de70:	3301      	adds	r3, #1
 801de72:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801de74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801de78:	3301      	adds	r3, #1
 801de7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801de7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801de82:	2b03      	cmp	r3, #3
 801de84:	d9a2      	bls.n	801ddcc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801de86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de88:	3b01      	subs	r3, #1
 801de8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801de8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de8e:	2200      	movs	r2, #0
 801de90:	701a      	strb	r2, [r3, #0]
  return buf;
 801de92:	68bb      	ldr	r3, [r7, #8]
}
 801de94:	4618      	mov	r0, r3
 801de96:	3734      	adds	r7, #52	@ 0x34
 801de98:	46bd      	mov	sp, r7
 801de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de9e:	4770      	bx	lr
 801dea0:	cccccccd 	.word	0xcccccccd

0801dea4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801dea4:	b580      	push	{r7, lr}
 801dea6:	b084      	sub	sp, #16
 801dea8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801deaa:	2300      	movs	r3, #0
 801deac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801deae:	4b12      	ldr	r3, [pc, #72]	@ (801def8 <ip_reass_tmr+0x54>)
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801deb4:	e018      	b.n	801dee8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	7fdb      	ldrb	r3, [r3, #31]
 801deba:	2b00      	cmp	r3, #0
 801debc:	d00b      	beq.n	801ded6 <ip_reass_tmr+0x32>
      r->timer--;
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	7fdb      	ldrb	r3, [r3, #31]
 801dec2:	3b01      	subs	r3, #1
 801dec4:	b2da      	uxtb	r2, r3
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	60fb      	str	r3, [r7, #12]
 801ded4:	e008      	b.n	801dee8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801dee0:	68b9      	ldr	r1, [r7, #8]
 801dee2:	6878      	ldr	r0, [r7, #4]
 801dee4:	f000 f80a 	bl	801defc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	2b00      	cmp	r3, #0
 801deec:	d1e3      	bne.n	801deb6 <ip_reass_tmr+0x12>
    }
  }
}
 801deee:	bf00      	nop
 801def0:	bf00      	nop
 801def2:	3710      	adds	r7, #16
 801def4:	46bd      	mov	sp, r7
 801def6:	bd80      	pop	{r7, pc}
 801def8:	2002d5d4 	.word	0x2002d5d4

0801defc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b088      	sub	sp, #32
 801df00:	af00      	add	r7, sp, #0
 801df02:	6078      	str	r0, [r7, #4]
 801df04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801df06:	2300      	movs	r3, #0
 801df08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801df0a:	683a      	ldr	r2, [r7, #0]
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	429a      	cmp	r2, r3
 801df10:	d105      	bne.n	801df1e <ip_reass_free_complete_datagram+0x22>
 801df12:	4b45      	ldr	r3, [pc, #276]	@ (801e028 <ip_reass_free_complete_datagram+0x12c>)
 801df14:	22ab      	movs	r2, #171	@ 0xab
 801df16:	4945      	ldr	r1, [pc, #276]	@ (801e02c <ip_reass_free_complete_datagram+0x130>)
 801df18:	4845      	ldr	r0, [pc, #276]	@ (801e030 <ip_reass_free_complete_datagram+0x134>)
 801df1a:	f002 fbbb 	bl	8020694 <iprintf>
  if (prev != NULL) {
 801df1e:	683b      	ldr	r3, [r7, #0]
 801df20:	2b00      	cmp	r3, #0
 801df22:	d00a      	beq.n	801df3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801df24:	683b      	ldr	r3, [r7, #0]
 801df26:	681b      	ldr	r3, [r3, #0]
 801df28:	687a      	ldr	r2, [r7, #4]
 801df2a:	429a      	cmp	r2, r3
 801df2c:	d005      	beq.n	801df3a <ip_reass_free_complete_datagram+0x3e>
 801df2e:	4b3e      	ldr	r3, [pc, #248]	@ (801e028 <ip_reass_free_complete_datagram+0x12c>)
 801df30:	22ad      	movs	r2, #173	@ 0xad
 801df32:	4940      	ldr	r1, [pc, #256]	@ (801e034 <ip_reass_free_complete_datagram+0x138>)
 801df34:	483e      	ldr	r0, [pc, #248]	@ (801e030 <ip_reass_free_complete_datagram+0x134>)
 801df36:	f002 fbad 	bl	8020694 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	685b      	ldr	r3, [r3, #4]
 801df3e:	685b      	ldr	r3, [r3, #4]
 801df40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801df42:	697b      	ldr	r3, [r7, #20]
 801df44:	889b      	ldrh	r3, [r3, #4]
 801df46:	b29b      	uxth	r3, r3
 801df48:	2b00      	cmp	r3, #0
 801df4a:	d12a      	bne.n	801dfa2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	685b      	ldr	r3, [r3, #4]
 801df50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801df52:	697b      	ldr	r3, [r7, #20]
 801df54:	681a      	ldr	r2, [r3, #0]
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801df5a:	69bb      	ldr	r3, [r7, #24]
 801df5c:	6858      	ldr	r0, [r3, #4]
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	3308      	adds	r3, #8
 801df62:	2214      	movs	r2, #20
 801df64:	4619      	mov	r1, r3
 801df66:	f002 fdc8 	bl	8020afa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801df6a:	2101      	movs	r1, #1
 801df6c:	69b8      	ldr	r0, [r7, #24]
 801df6e:	f7ff fafb 	bl	801d568 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801df72:	69b8      	ldr	r0, [r7, #24]
 801df74:	f7f6 fdd8 	bl	8014b28 <pbuf_clen>
 801df78:	4603      	mov	r3, r0
 801df7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801df7c:	8bfa      	ldrh	r2, [r7, #30]
 801df7e:	8a7b      	ldrh	r3, [r7, #18]
 801df80:	4413      	add	r3, r2
 801df82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801df86:	db05      	blt.n	801df94 <ip_reass_free_complete_datagram+0x98>
 801df88:	4b27      	ldr	r3, [pc, #156]	@ (801e028 <ip_reass_free_complete_datagram+0x12c>)
 801df8a:	22bc      	movs	r2, #188	@ 0xbc
 801df8c:	492a      	ldr	r1, [pc, #168]	@ (801e038 <ip_reass_free_complete_datagram+0x13c>)
 801df8e:	4828      	ldr	r0, [pc, #160]	@ (801e030 <ip_reass_free_complete_datagram+0x134>)
 801df90:	f002 fb80 	bl	8020694 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801df94:	8bfa      	ldrh	r2, [r7, #30]
 801df96:	8a7b      	ldrh	r3, [r7, #18]
 801df98:	4413      	add	r3, r2
 801df9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801df9c:	69b8      	ldr	r0, [r7, #24]
 801df9e:	f7f6 fd1d 	bl	80149dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	685b      	ldr	r3, [r3, #4]
 801dfa6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801dfa8:	e01f      	b.n	801dfea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801dfaa:	69bb      	ldr	r3, [r7, #24]
 801dfac:	685b      	ldr	r3, [r3, #4]
 801dfae:	617b      	str	r3, [r7, #20]
    pcur = p;
 801dfb0:	69bb      	ldr	r3, [r7, #24]
 801dfb2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801dfb4:	697b      	ldr	r3, [r7, #20]
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801dfba:	68f8      	ldr	r0, [r7, #12]
 801dfbc:	f7f6 fdb4 	bl	8014b28 <pbuf_clen>
 801dfc0:	4603      	mov	r3, r0
 801dfc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801dfc4:	8bfa      	ldrh	r2, [r7, #30]
 801dfc6:	8a7b      	ldrh	r3, [r7, #18]
 801dfc8:	4413      	add	r3, r2
 801dfca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dfce:	db05      	blt.n	801dfdc <ip_reass_free_complete_datagram+0xe0>
 801dfd0:	4b15      	ldr	r3, [pc, #84]	@ (801e028 <ip_reass_free_complete_datagram+0x12c>)
 801dfd2:	22cc      	movs	r2, #204	@ 0xcc
 801dfd4:	4918      	ldr	r1, [pc, #96]	@ (801e038 <ip_reass_free_complete_datagram+0x13c>)
 801dfd6:	4816      	ldr	r0, [pc, #88]	@ (801e030 <ip_reass_free_complete_datagram+0x134>)
 801dfd8:	f002 fb5c 	bl	8020694 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801dfdc:	8bfa      	ldrh	r2, [r7, #30]
 801dfde:	8a7b      	ldrh	r3, [r7, #18]
 801dfe0:	4413      	add	r3, r2
 801dfe2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801dfe4:	68f8      	ldr	r0, [r7, #12]
 801dfe6:	f7f6 fcf9 	bl	80149dc <pbuf_free>
  while (p != NULL) {
 801dfea:	69bb      	ldr	r3, [r7, #24]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d1dc      	bne.n	801dfaa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801dff0:	6839      	ldr	r1, [r7, #0]
 801dff2:	6878      	ldr	r0, [r7, #4]
 801dff4:	f000 f8ca 	bl	801e18c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801dff8:	4b10      	ldr	r3, [pc, #64]	@ (801e03c <ip_reass_free_complete_datagram+0x140>)
 801dffa:	881b      	ldrh	r3, [r3, #0]
 801dffc:	8bfa      	ldrh	r2, [r7, #30]
 801dffe:	429a      	cmp	r2, r3
 801e000:	d905      	bls.n	801e00e <ip_reass_free_complete_datagram+0x112>
 801e002:	4b09      	ldr	r3, [pc, #36]	@ (801e028 <ip_reass_free_complete_datagram+0x12c>)
 801e004:	22d2      	movs	r2, #210	@ 0xd2
 801e006:	490e      	ldr	r1, [pc, #56]	@ (801e040 <ip_reass_free_complete_datagram+0x144>)
 801e008:	4809      	ldr	r0, [pc, #36]	@ (801e030 <ip_reass_free_complete_datagram+0x134>)
 801e00a:	f002 fb43 	bl	8020694 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e00e:	4b0b      	ldr	r3, [pc, #44]	@ (801e03c <ip_reass_free_complete_datagram+0x140>)
 801e010:	881a      	ldrh	r2, [r3, #0]
 801e012:	8bfb      	ldrh	r3, [r7, #30]
 801e014:	1ad3      	subs	r3, r2, r3
 801e016:	b29a      	uxth	r2, r3
 801e018:	4b08      	ldr	r3, [pc, #32]	@ (801e03c <ip_reass_free_complete_datagram+0x140>)
 801e01a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e01c:	8bfb      	ldrh	r3, [r7, #30]
}
 801e01e:	4618      	mov	r0, r3
 801e020:	3720      	adds	r7, #32
 801e022:	46bd      	mov	sp, r7
 801e024:	bd80      	pop	{r7, pc}
 801e026:	bf00      	nop
 801e028:	08025aa8 	.word	0x08025aa8
 801e02c:	08025ae4 	.word	0x08025ae4
 801e030:	08025af0 	.word	0x08025af0
 801e034:	08025b18 	.word	0x08025b18
 801e038:	08025b2c 	.word	0x08025b2c
 801e03c:	2002d5d8 	.word	0x2002d5d8
 801e040:	08025b4c 	.word	0x08025b4c

0801e044 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e044:	b580      	push	{r7, lr}
 801e046:	b08a      	sub	sp, #40	@ 0x28
 801e048:	af00      	add	r7, sp, #0
 801e04a:	6078      	str	r0, [r7, #4]
 801e04c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e04e:	2300      	movs	r3, #0
 801e050:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e052:	2300      	movs	r3, #0
 801e054:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e056:	2300      	movs	r3, #0
 801e058:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e05a:	2300      	movs	r3, #0
 801e05c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e05e:	2300      	movs	r3, #0
 801e060:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e062:	4b28      	ldr	r3, [pc, #160]	@ (801e104 <ip_reass_remove_oldest_datagram+0xc0>)
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801e068:	e030      	b.n	801e0cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e06c:	695a      	ldr	r2, [r3, #20]
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	68db      	ldr	r3, [r3, #12]
 801e072:	429a      	cmp	r2, r3
 801e074:	d10c      	bne.n	801e090 <ip_reass_remove_oldest_datagram+0x4c>
 801e076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e078:	699a      	ldr	r2, [r3, #24]
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	691b      	ldr	r3, [r3, #16]
 801e07e:	429a      	cmp	r2, r3
 801e080:	d106      	bne.n	801e090 <ip_reass_remove_oldest_datagram+0x4c>
 801e082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e084:	899a      	ldrh	r2, [r3, #12]
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	889b      	ldrh	r3, [r3, #4]
 801e08a:	b29b      	uxth	r3, r3
 801e08c:	429a      	cmp	r2, r3
 801e08e:	d014      	beq.n	801e0ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e090:	693b      	ldr	r3, [r7, #16]
 801e092:	3301      	adds	r3, #1
 801e094:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e096:	6a3b      	ldr	r3, [r7, #32]
 801e098:	2b00      	cmp	r3, #0
 801e09a:	d104      	bne.n	801e0a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e09e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e0a0:	69fb      	ldr	r3, [r7, #28]
 801e0a2:	61bb      	str	r3, [r7, #24]
 801e0a4:	e009      	b.n	801e0ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0a8:	7fda      	ldrb	r2, [r3, #31]
 801e0aa:	6a3b      	ldr	r3, [r7, #32]
 801e0ac:	7fdb      	ldrb	r3, [r3, #31]
 801e0ae:	429a      	cmp	r2, r3
 801e0b0:	d803      	bhi.n	801e0ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e0b6:	69fb      	ldr	r3, [r7, #28]
 801e0b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0bc:	681b      	ldr	r3, [r3, #0]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d001      	beq.n	801e0c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801e0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d1cb      	bne.n	801e06a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e0d2:	6a3b      	ldr	r3, [r7, #32]
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d008      	beq.n	801e0ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e0d8:	69b9      	ldr	r1, [r7, #24]
 801e0da:	6a38      	ldr	r0, [r7, #32]
 801e0dc:	f7ff ff0e 	bl	801defc <ip_reass_free_complete_datagram>
 801e0e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e0e2:	697a      	ldr	r2, [r7, #20]
 801e0e4:	68fb      	ldr	r3, [r7, #12]
 801e0e6:	4413      	add	r3, r2
 801e0e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e0ea:	697a      	ldr	r2, [r7, #20]
 801e0ec:	683b      	ldr	r3, [r7, #0]
 801e0ee:	429a      	cmp	r2, r3
 801e0f0:	da02      	bge.n	801e0f8 <ip_reass_remove_oldest_datagram+0xb4>
 801e0f2:	693b      	ldr	r3, [r7, #16]
 801e0f4:	2b01      	cmp	r3, #1
 801e0f6:	dcac      	bgt.n	801e052 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e0f8:	697b      	ldr	r3, [r7, #20]
}
 801e0fa:	4618      	mov	r0, r3
 801e0fc:	3728      	adds	r7, #40	@ 0x28
 801e0fe:	46bd      	mov	sp, r7
 801e100:	bd80      	pop	{r7, pc}
 801e102:	bf00      	nop
 801e104:	2002d5d4 	.word	0x2002d5d4

0801e108 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e108:	b580      	push	{r7, lr}
 801e10a:	b084      	sub	sp, #16
 801e10c:	af00      	add	r7, sp, #0
 801e10e:	6078      	str	r0, [r7, #4]
 801e110:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e112:	2004      	movs	r0, #4
 801e114:	f7f5 fc00 	bl	8013918 <memp_malloc>
 801e118:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e11a:	68fb      	ldr	r3, [r7, #12]
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d116      	bne.n	801e14e <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e120:	6839      	ldr	r1, [r7, #0]
 801e122:	6878      	ldr	r0, [r7, #4]
 801e124:	f7ff ff8e 	bl	801e044 <ip_reass_remove_oldest_datagram>
 801e128:	4602      	mov	r2, r0
 801e12a:	683b      	ldr	r3, [r7, #0]
 801e12c:	4293      	cmp	r3, r2
 801e12e:	dc03      	bgt.n	801e138 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e130:	2004      	movs	r0, #4
 801e132:	f7f5 fbf1 	bl	8013918 <memp_malloc>
 801e136:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	d107      	bne.n	801e14e <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801e13e:	4b11      	ldr	r3, [pc, #68]	@ (801e184 <ip_reass_enqueue_new_datagram+0x7c>)
 801e140:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801e142:	3301      	adds	r3, #1
 801e144:	b29a      	uxth	r2, r3
 801e146:	4b0f      	ldr	r3, [pc, #60]	@ (801e184 <ip_reass_enqueue_new_datagram+0x7c>)
 801e148:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e14a:	2300      	movs	r3, #0
 801e14c:	e016      	b.n	801e17c <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e14e:	2220      	movs	r2, #32
 801e150:	2100      	movs	r1, #0
 801e152:	68f8      	ldr	r0, [r7, #12]
 801e154:	f002 fbfe 	bl	8020954 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	220f      	movs	r2, #15
 801e15c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e15e:	4b0a      	ldr	r3, [pc, #40]	@ (801e188 <ip_reass_enqueue_new_datagram+0x80>)
 801e160:	681a      	ldr	r2, [r3, #0]
 801e162:	68fb      	ldr	r3, [r7, #12]
 801e164:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e166:	4a08      	ldr	r2, [pc, #32]	@ (801e188 <ip_reass_enqueue_new_datagram+0x80>)
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	3308      	adds	r3, #8
 801e170:	2214      	movs	r2, #20
 801e172:	6879      	ldr	r1, [r7, #4]
 801e174:	4618      	mov	r0, r3
 801e176:	f002 fcc0 	bl	8020afa <memcpy>
  return ipr;
 801e17a:	68fb      	ldr	r3, [r7, #12]
}
 801e17c:	4618      	mov	r0, r3
 801e17e:	3710      	adds	r7, #16
 801e180:	46bd      	mov	sp, r7
 801e182:	bd80      	pop	{r7, pc}
 801e184:	2002d36c 	.word	0x2002d36c
 801e188:	2002d5d4 	.word	0x2002d5d4

0801e18c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e18c:	b580      	push	{r7, lr}
 801e18e:	b082      	sub	sp, #8
 801e190:	af00      	add	r7, sp, #0
 801e192:	6078      	str	r0, [r7, #4]
 801e194:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e196:	4b10      	ldr	r3, [pc, #64]	@ (801e1d8 <ip_reass_dequeue_datagram+0x4c>)
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	687a      	ldr	r2, [r7, #4]
 801e19c:	429a      	cmp	r2, r3
 801e19e:	d104      	bne.n	801e1aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	4a0c      	ldr	r2, [pc, #48]	@ (801e1d8 <ip_reass_dequeue_datagram+0x4c>)
 801e1a6:	6013      	str	r3, [r2, #0]
 801e1a8:	e00d      	b.n	801e1c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e1aa:	683b      	ldr	r3, [r7, #0]
 801e1ac:	2b00      	cmp	r3, #0
 801e1ae:	d106      	bne.n	801e1be <ip_reass_dequeue_datagram+0x32>
 801e1b0:	4b0a      	ldr	r3, [pc, #40]	@ (801e1dc <ip_reass_dequeue_datagram+0x50>)
 801e1b2:	f240 1245 	movw	r2, #325	@ 0x145
 801e1b6:	490a      	ldr	r1, [pc, #40]	@ (801e1e0 <ip_reass_dequeue_datagram+0x54>)
 801e1b8:	480a      	ldr	r0, [pc, #40]	@ (801e1e4 <ip_reass_dequeue_datagram+0x58>)
 801e1ba:	f002 fa6b 	bl	8020694 <iprintf>
    prev->next = ipr->next;
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	681a      	ldr	r2, [r3, #0]
 801e1c2:	683b      	ldr	r3, [r7, #0]
 801e1c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e1c6:	6879      	ldr	r1, [r7, #4]
 801e1c8:	2004      	movs	r0, #4
 801e1ca:	f7f5 fc21 	bl	8013a10 <memp_free>
}
 801e1ce:	bf00      	nop
 801e1d0:	3708      	adds	r7, #8
 801e1d2:	46bd      	mov	sp, r7
 801e1d4:	bd80      	pop	{r7, pc}
 801e1d6:	bf00      	nop
 801e1d8:	2002d5d4 	.word	0x2002d5d4
 801e1dc:	08025aa8 	.word	0x08025aa8
 801e1e0:	08025b70 	.word	0x08025b70
 801e1e4:	08025af0 	.word	0x08025af0

0801e1e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e1e8:	b580      	push	{r7, lr}
 801e1ea:	b08c      	sub	sp, #48	@ 0x30
 801e1ec:	af00      	add	r7, sp, #0
 801e1ee:	60f8      	str	r0, [r7, #12]
 801e1f0:	60b9      	str	r1, [r7, #8]
 801e1f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e1f4:	2300      	movs	r3, #0
 801e1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e1f8:	2301      	movs	r3, #1
 801e1fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e1fc:	68bb      	ldr	r3, [r7, #8]
 801e1fe:	685b      	ldr	r3, [r3, #4]
 801e200:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e202:	69fb      	ldr	r3, [r7, #28]
 801e204:	885b      	ldrh	r3, [r3, #2]
 801e206:	b29b      	uxth	r3, r3
 801e208:	4618      	mov	r0, r3
 801e20a:	f7f4 fdb9 	bl	8012d80 <lwip_htons>
 801e20e:	4603      	mov	r3, r0
 801e210:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e212:	69fb      	ldr	r3, [r7, #28]
 801e214:	781b      	ldrb	r3, [r3, #0]
 801e216:	f003 030f 	and.w	r3, r3, #15
 801e21a:	b2db      	uxtb	r3, r3
 801e21c:	009b      	lsls	r3, r3, #2
 801e21e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e220:	7e7b      	ldrb	r3, [r7, #25]
 801e222:	b29b      	uxth	r3, r3
 801e224:	8b7a      	ldrh	r2, [r7, #26]
 801e226:	429a      	cmp	r2, r3
 801e228:	d202      	bcs.n	801e230 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e22a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e22e:	e135      	b.n	801e49c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e230:	7e7b      	ldrb	r3, [r7, #25]
 801e232:	b29b      	uxth	r3, r3
 801e234:	8b7a      	ldrh	r2, [r7, #26]
 801e236:	1ad3      	subs	r3, r2, r3
 801e238:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e23a:	69fb      	ldr	r3, [r7, #28]
 801e23c:	88db      	ldrh	r3, [r3, #6]
 801e23e:	b29b      	uxth	r3, r3
 801e240:	4618      	mov	r0, r3
 801e242:	f7f4 fd9d 	bl	8012d80 <lwip_htons>
 801e246:	4603      	mov	r3, r0
 801e248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e24c:	b29b      	uxth	r3, r3
 801e24e:	00db      	lsls	r3, r3, #3
 801e250:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e252:	68bb      	ldr	r3, [r7, #8]
 801e254:	685b      	ldr	r3, [r3, #4]
 801e256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801e258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e25a:	2200      	movs	r2, #0
 801e25c:	701a      	strb	r2, [r3, #0]
 801e25e:	2200      	movs	r2, #0
 801e260:	705a      	strb	r2, [r3, #1]
 801e262:	2200      	movs	r2, #0
 801e264:	709a      	strb	r2, [r3, #2]
 801e266:	2200      	movs	r2, #0
 801e268:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e26c:	8afa      	ldrh	r2, [r7, #22]
 801e26e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e270:	8afa      	ldrh	r2, [r7, #22]
 801e272:	8b7b      	ldrh	r3, [r7, #26]
 801e274:	4413      	add	r3, r2
 801e276:	b29a      	uxth	r2, r3
 801e278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e27a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e27e:	88db      	ldrh	r3, [r3, #6]
 801e280:	b29b      	uxth	r3, r3
 801e282:	8afa      	ldrh	r2, [r7, #22]
 801e284:	429a      	cmp	r2, r3
 801e286:	d902      	bls.n	801e28e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e288:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e28c:	e106      	b.n	801e49c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e28e:	68fb      	ldr	r3, [r7, #12]
 801e290:	685b      	ldr	r3, [r3, #4]
 801e292:	627b      	str	r3, [r7, #36]	@ 0x24
 801e294:	e068      	b.n	801e368 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e298:	685b      	ldr	r3, [r3, #4]
 801e29a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e29e:	889b      	ldrh	r3, [r3, #4]
 801e2a0:	b29a      	uxth	r2, r3
 801e2a2:	693b      	ldr	r3, [r7, #16]
 801e2a4:	889b      	ldrh	r3, [r3, #4]
 801e2a6:	b29b      	uxth	r3, r3
 801e2a8:	429a      	cmp	r2, r3
 801e2aa:	d235      	bcs.n	801e318 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e2b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d020      	beq.n	801e2fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2ba:	889b      	ldrh	r3, [r3, #4]
 801e2bc:	b29a      	uxth	r2, r3
 801e2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2c0:	88db      	ldrh	r3, [r3, #6]
 801e2c2:	b29b      	uxth	r3, r3
 801e2c4:	429a      	cmp	r2, r3
 801e2c6:	d307      	bcc.n	801e2d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2ca:	88db      	ldrh	r3, [r3, #6]
 801e2cc:	b29a      	uxth	r2, r3
 801e2ce:	693b      	ldr	r3, [r7, #16]
 801e2d0:	889b      	ldrh	r3, [r3, #4]
 801e2d2:	b29b      	uxth	r3, r3
 801e2d4:	429a      	cmp	r2, r3
 801e2d6:	d902      	bls.n	801e2de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e2d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2dc:	e0de      	b.n	801e49c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2e0:	68ba      	ldr	r2, [r7, #8]
 801e2e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2e6:	88db      	ldrh	r3, [r3, #6]
 801e2e8:	b29a      	uxth	r2, r3
 801e2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2ec:	889b      	ldrh	r3, [r3, #4]
 801e2ee:	b29b      	uxth	r3, r3
 801e2f0:	429a      	cmp	r2, r3
 801e2f2:	d03d      	beq.n	801e370 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e2f8:	e03a      	b.n	801e370 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e2fc:	88db      	ldrh	r3, [r3, #6]
 801e2fe:	b29a      	uxth	r2, r3
 801e300:	693b      	ldr	r3, [r7, #16]
 801e302:	889b      	ldrh	r3, [r3, #4]
 801e304:	b29b      	uxth	r3, r3
 801e306:	429a      	cmp	r2, r3
 801e308:	d902      	bls.n	801e310 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e30a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e30e:	e0c5      	b.n	801e49c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	68ba      	ldr	r2, [r7, #8]
 801e314:	605a      	str	r2, [r3, #4]
      break;
 801e316:	e02b      	b.n	801e370 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e31a:	889b      	ldrh	r3, [r3, #4]
 801e31c:	b29a      	uxth	r2, r3
 801e31e:	693b      	ldr	r3, [r7, #16]
 801e320:	889b      	ldrh	r3, [r3, #4]
 801e322:	b29b      	uxth	r3, r3
 801e324:	429a      	cmp	r2, r3
 801e326:	d102      	bne.n	801e32e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e32c:	e0b6      	b.n	801e49c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e330:	889b      	ldrh	r3, [r3, #4]
 801e332:	b29a      	uxth	r2, r3
 801e334:	693b      	ldr	r3, [r7, #16]
 801e336:	88db      	ldrh	r3, [r3, #6]
 801e338:	b29b      	uxth	r3, r3
 801e33a:	429a      	cmp	r2, r3
 801e33c:	d202      	bcs.n	801e344 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e33e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e342:	e0ab      	b.n	801e49c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e346:	2b00      	cmp	r3, #0
 801e348:	d009      	beq.n	801e35e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e34c:	88db      	ldrh	r3, [r3, #6]
 801e34e:	b29a      	uxth	r2, r3
 801e350:	693b      	ldr	r3, [r7, #16]
 801e352:	889b      	ldrh	r3, [r3, #4]
 801e354:	b29b      	uxth	r3, r3
 801e356:	429a      	cmp	r2, r3
 801e358:	d001      	beq.n	801e35e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e35a:	2300      	movs	r3, #0
 801e35c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e35e:	693b      	ldr	r3, [r7, #16]
 801e360:	681b      	ldr	r3, [r3, #0]
 801e362:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801e364:	693b      	ldr	r3, [r7, #16]
 801e366:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801e368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d193      	bne.n	801e296 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e36e:	e000      	b.n	801e372 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e370:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e374:	2b00      	cmp	r3, #0
 801e376:	d12d      	bne.n	801e3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d01c      	beq.n	801e3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e380:	88db      	ldrh	r3, [r3, #6]
 801e382:	b29a      	uxth	r2, r3
 801e384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e386:	889b      	ldrh	r3, [r3, #4]
 801e388:	b29b      	uxth	r3, r3
 801e38a:	429a      	cmp	r2, r3
 801e38c:	d906      	bls.n	801e39c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e38e:	4b45      	ldr	r3, [pc, #276]	@ (801e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e390:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801e394:	4944      	ldr	r1, [pc, #272]	@ (801e4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e396:	4845      	ldr	r0, [pc, #276]	@ (801e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e398:	f002 f97c 	bl	8020694 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e39e:	68ba      	ldr	r2, [r7, #8]
 801e3a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e3a4:	88db      	ldrh	r3, [r3, #6]
 801e3a6:	b29a      	uxth	r2, r3
 801e3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e3aa:	889b      	ldrh	r3, [r3, #4]
 801e3ac:	b29b      	uxth	r3, r3
 801e3ae:	429a      	cmp	r2, r3
 801e3b0:	d010      	beq.n	801e3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e3b2:	2300      	movs	r3, #0
 801e3b4:	623b      	str	r3, [r7, #32]
 801e3b6:	e00d      	b.n	801e3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	685b      	ldr	r3, [r3, #4]
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d006      	beq.n	801e3ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e3c0:	4b38      	ldr	r3, [pc, #224]	@ (801e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e3c2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801e3c6:	493a      	ldr	r1, [pc, #232]	@ (801e4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e3c8:	4838      	ldr	r0, [pc, #224]	@ (801e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e3ca:	f002 f963 	bl	8020694 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	68ba      	ldr	r2, [r7, #8]
 801e3d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d105      	bne.n	801e3e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e3da:	68fb      	ldr	r3, [r7, #12]
 801e3dc:	7f9b      	ldrb	r3, [r3, #30]
 801e3de:	f003 0301 	and.w	r3, r3, #1
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d059      	beq.n	801e49a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e3e6:	6a3b      	ldr	r3, [r7, #32]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d04f      	beq.n	801e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	685b      	ldr	r3, [r3, #4]
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d006      	beq.n	801e402 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	685b      	ldr	r3, [r3, #4]
 801e3f8:	685b      	ldr	r3, [r3, #4]
 801e3fa:	889b      	ldrh	r3, [r3, #4]
 801e3fc:	b29b      	uxth	r3, r3
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d002      	beq.n	801e408 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e402:	2300      	movs	r3, #0
 801e404:	623b      	str	r3, [r7, #32]
 801e406:	e041      	b.n	801e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e40a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801e40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e40e:	681b      	ldr	r3, [r3, #0]
 801e410:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801e412:	e012      	b.n	801e43a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e416:	685b      	ldr	r3, [r3, #4]
 801e418:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801e41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e41c:	88db      	ldrh	r3, [r3, #6]
 801e41e:	b29a      	uxth	r2, r3
 801e420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e422:	889b      	ldrh	r3, [r3, #4]
 801e424:	b29b      	uxth	r3, r3
 801e426:	429a      	cmp	r2, r3
 801e428:	d002      	beq.n	801e430 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e42a:	2300      	movs	r3, #0
 801e42c:	623b      	str	r3, [r7, #32]
            break;
 801e42e:	e007      	b.n	801e440 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e432:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801e434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801e43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d1e9      	bne.n	801e414 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e440:	6a3b      	ldr	r3, [r7, #32]
 801e442:	2b00      	cmp	r3, #0
 801e444:	d022      	beq.n	801e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	685b      	ldr	r3, [r3, #4]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d106      	bne.n	801e45c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e44e:	4b15      	ldr	r3, [pc, #84]	@ (801e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e450:	f240 12df 	movw	r2, #479	@ 0x1df
 801e454:	4917      	ldr	r1, [pc, #92]	@ (801e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e456:	4815      	ldr	r0, [pc, #84]	@ (801e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e458:	f002 f91c 	bl	8020694 <iprintf>
          LWIP_ASSERT("sanity check",
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	685b      	ldr	r3, [r3, #4]
 801e460:	685b      	ldr	r3, [r3, #4]
 801e462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e464:	429a      	cmp	r2, r3
 801e466:	d106      	bne.n	801e476 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e468:	4b0e      	ldr	r3, [pc, #56]	@ (801e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e46a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801e46e:	4911      	ldr	r1, [pc, #68]	@ (801e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e470:	480e      	ldr	r0, [pc, #56]	@ (801e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e472:	f002 f90f 	bl	8020694 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d006      	beq.n	801e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e47e:	4b09      	ldr	r3, [pc, #36]	@ (801e4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e480:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801e484:	490c      	ldr	r1, [pc, #48]	@ (801e4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e486:	4809      	ldr	r0, [pc, #36]	@ (801e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e488:	f002 f904 	bl	8020694 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e48c:	6a3b      	ldr	r3, [r7, #32]
 801e48e:	2b00      	cmp	r3, #0
 801e490:	bf14      	ite	ne
 801e492:	2301      	movne	r3, #1
 801e494:	2300      	moveq	r3, #0
 801e496:	b2db      	uxtb	r3, r3
 801e498:	e000      	b.n	801e49c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e49a:	2300      	movs	r3, #0
}
 801e49c:	4618      	mov	r0, r3
 801e49e:	3730      	adds	r7, #48	@ 0x30
 801e4a0:	46bd      	mov	sp, r7
 801e4a2:	bd80      	pop	{r7, pc}
 801e4a4:	08025aa8 	.word	0x08025aa8
 801e4a8:	08025b8c 	.word	0x08025b8c
 801e4ac:	08025af0 	.word	0x08025af0
 801e4b0:	08025bac 	.word	0x08025bac
 801e4b4:	08025be4 	.word	0x08025be4
 801e4b8:	08025bf4 	.word	0x08025bf4

0801e4bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	b08e      	sub	sp, #56	@ 0x38
 801e4c0:	af00      	add	r7, sp, #0
 801e4c2:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801e4c4:	4b9d      	ldr	r3, [pc, #628]	@ (801e73c <ip4_reass+0x280>)
 801e4c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e4c8:	3301      	adds	r3, #1
 801e4ca:	b29a      	uxth	r2, r3
 801e4cc:	4b9b      	ldr	r3, [pc, #620]	@ (801e73c <ip4_reass+0x280>)
 801e4ce:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	685b      	ldr	r3, [r3, #4]
 801e4d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4d8:	781b      	ldrb	r3, [r3, #0]
 801e4da:	f003 030f 	and.w	r3, r3, #15
 801e4de:	b2db      	uxtb	r3, r3
 801e4e0:	009b      	lsls	r3, r3, #2
 801e4e2:	b2db      	uxtb	r3, r3
 801e4e4:	2b14      	cmp	r3, #20
 801e4e6:	d008      	beq.n	801e4fa <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801e4e8:	4b94      	ldr	r3, [pc, #592]	@ (801e73c <ip4_reass+0x280>)
 801e4ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801e4ee:	3301      	adds	r3, #1
 801e4f0:	b29a      	uxth	r2, r3
 801e4f2:	4b92      	ldr	r3, [pc, #584]	@ (801e73c <ip4_reass+0x280>)
 801e4f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801e4f8:	e17c      	b.n	801e7f4 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4fc:	88db      	ldrh	r3, [r3, #6]
 801e4fe:	b29b      	uxth	r3, r3
 801e500:	4618      	mov	r0, r3
 801e502:	f7f4 fc3d 	bl	8012d80 <lwip_htons>
 801e506:	4603      	mov	r3, r0
 801e508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e50c:	b29b      	uxth	r3, r3
 801e50e:	00db      	lsls	r3, r3, #3
 801e510:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e514:	885b      	ldrh	r3, [r3, #2]
 801e516:	b29b      	uxth	r3, r3
 801e518:	4618      	mov	r0, r3
 801e51a:	f7f4 fc31 	bl	8012d80 <lwip_htons>
 801e51e:	4603      	mov	r3, r0
 801e520:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e524:	781b      	ldrb	r3, [r3, #0]
 801e526:	f003 030f 	and.w	r3, r3, #15
 801e52a:	b2db      	uxtb	r3, r3
 801e52c:	009b      	lsls	r3, r3, #2
 801e52e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801e532:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e536:	b29b      	uxth	r3, r3
 801e538:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e53a:	429a      	cmp	r2, r3
 801e53c:	f0c0 8157 	bcc.w	801e7ee <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e540:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e544:	b29b      	uxth	r3, r3
 801e546:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e548:	1ad3      	subs	r3, r2, r3
 801e54a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e54c:	6878      	ldr	r0, [r7, #4]
 801e54e:	f7f6 faeb 	bl	8014b28 <pbuf_clen>
 801e552:	4603      	mov	r3, r0
 801e554:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e556:	4b7a      	ldr	r3, [pc, #488]	@ (801e740 <ip4_reass+0x284>)
 801e558:	881b      	ldrh	r3, [r3, #0]
 801e55a:	461a      	mov	r2, r3
 801e55c:	8c3b      	ldrh	r3, [r7, #32]
 801e55e:	4413      	add	r3, r2
 801e560:	2b0a      	cmp	r3, #10
 801e562:	dd15      	ble.n	801e590 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e564:	8c3b      	ldrh	r3, [r7, #32]
 801e566:	4619      	mov	r1, r3
 801e568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e56a:	f7ff fd6b 	bl	801e044 <ip_reass_remove_oldest_datagram>
 801e56e:	4603      	mov	r3, r0
 801e570:	2b00      	cmp	r3, #0
 801e572:	d006      	beq.n	801e582 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e574:	4b72      	ldr	r3, [pc, #456]	@ (801e740 <ip4_reass+0x284>)
 801e576:	881b      	ldrh	r3, [r3, #0]
 801e578:	461a      	mov	r2, r3
 801e57a:	8c3b      	ldrh	r3, [r7, #32]
 801e57c:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e57e:	2b0a      	cmp	r3, #10
 801e580:	dd06      	ble.n	801e590 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801e582:	4b6e      	ldr	r3, [pc, #440]	@ (801e73c <ip4_reass+0x280>)
 801e584:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801e586:	3301      	adds	r3, #1
 801e588:	b29a      	uxth	r2, r3
 801e58a:	4b6c      	ldr	r3, [pc, #432]	@ (801e73c <ip4_reass+0x280>)
 801e58c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801e58e:	e131      	b.n	801e7f4 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e590:	4b6c      	ldr	r3, [pc, #432]	@ (801e744 <ip4_reass+0x288>)
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	633b      	str	r3, [r7, #48]	@ 0x30
 801e596:	e01e      	b.n	801e5d6 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e59a:	695a      	ldr	r2, [r3, #20]
 801e59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e59e:	68db      	ldr	r3, [r3, #12]
 801e5a0:	429a      	cmp	r2, r3
 801e5a2:	d115      	bne.n	801e5d0 <ip4_reass+0x114>
 801e5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5a6:	699a      	ldr	r2, [r3, #24]
 801e5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5aa:	691b      	ldr	r3, [r3, #16]
 801e5ac:	429a      	cmp	r2, r3
 801e5ae:	d10f      	bne.n	801e5d0 <ip4_reass+0x114>
 801e5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5b2:	899a      	ldrh	r2, [r3, #12]
 801e5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5b6:	889b      	ldrh	r3, [r3, #4]
 801e5b8:	b29b      	uxth	r3, r3
 801e5ba:	429a      	cmp	r2, r3
 801e5bc:	d108      	bne.n	801e5d0 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801e5be:	4b5f      	ldr	r3, [pc, #380]	@ (801e73c <ip4_reass+0x280>)
 801e5c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e5c4:	3301      	adds	r3, #1
 801e5c6:	b29a      	uxth	r2, r3
 801e5c8:	4b5c      	ldr	r3, [pc, #368]	@ (801e73c <ip4_reass+0x280>)
 801e5ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801e5ce:	e005      	b.n	801e5dc <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	633b      	str	r3, [r7, #48]	@ 0x30
 801e5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d1dd      	bne.n	801e598 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801e5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	d109      	bne.n	801e5f6 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e5e2:	8c3b      	ldrh	r3, [r7, #32]
 801e5e4:	4619      	mov	r1, r3
 801e5e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e5e8:	f7ff fd8e 	bl	801e108 <ip_reass_enqueue_new_datagram>
 801e5ec:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d11c      	bne.n	801e62e <ip4_reass+0x172>
      goto nullreturn;
 801e5f4:	e0fe      	b.n	801e7f4 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e5f8:	88db      	ldrh	r3, [r3, #6]
 801e5fa:	b29b      	uxth	r3, r3
 801e5fc:	4618      	mov	r0, r3
 801e5fe:	f7f4 fbbf 	bl	8012d80 <lwip_htons>
 801e602:	4603      	mov	r3, r0
 801e604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d110      	bne.n	801e62e <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e60e:	89db      	ldrh	r3, [r3, #14]
 801e610:	4618      	mov	r0, r3
 801e612:	f7f4 fbb5 	bl	8012d80 <lwip_htons>
 801e616:	4603      	mov	r3, r0
 801e618:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d006      	beq.n	801e62e <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e622:	3308      	adds	r3, #8
 801e624:	2214      	movs	r2, #20
 801e626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e628:	4618      	mov	r0, r3
 801e62a:	f002 fa66 	bl	8020afa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e630:	88db      	ldrh	r3, [r3, #6]
 801e632:	b29b      	uxth	r3, r3
 801e634:	f003 0320 	and.w	r3, r3, #32
 801e638:	2b00      	cmp	r3, #0
 801e63a:	bf0c      	ite	eq
 801e63c:	2301      	moveq	r3, #1
 801e63e:	2300      	movne	r3, #0
 801e640:	b2db      	uxtb	r3, r3
 801e642:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e644:	69fb      	ldr	r3, [r7, #28]
 801e646:	2b00      	cmp	r3, #0
 801e648:	d00e      	beq.n	801e668 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801e64a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e64c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e64e:	4413      	add	r3, r2
 801e650:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e652:	8b7a      	ldrh	r2, [r7, #26]
 801e654:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801e656:	429a      	cmp	r2, r3
 801e658:	f0c0 80a7 	bcc.w	801e7aa <ip4_reass+0x2ee>
 801e65c:	8b7b      	ldrh	r3, [r7, #26]
 801e65e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801e662:	4293      	cmp	r3, r2
 801e664:	f200 80a1 	bhi.w	801e7aa <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e668:	69fa      	ldr	r2, [r7, #28]
 801e66a:	6879      	ldr	r1, [r7, #4]
 801e66c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e66e:	f7ff fdbb 	bl	801e1e8 <ip_reass_chain_frag_into_datagram_and_validate>
 801e672:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e674:	697b      	ldr	r3, [r7, #20]
 801e676:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e67a:	f000 8098 	beq.w	801e7ae <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e67e:	4b30      	ldr	r3, [pc, #192]	@ (801e740 <ip4_reass+0x284>)
 801e680:	881a      	ldrh	r2, [r3, #0]
 801e682:	8c3b      	ldrh	r3, [r7, #32]
 801e684:	4413      	add	r3, r2
 801e686:	b29a      	uxth	r2, r3
 801e688:	4b2d      	ldr	r3, [pc, #180]	@ (801e740 <ip4_reass+0x284>)
 801e68a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e68c:	69fb      	ldr	r3, [r7, #28]
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d00d      	beq.n	801e6ae <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801e692:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e694:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e696:	4413      	add	r3, r2
 801e698:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e69c:	8a7a      	ldrh	r2, [r7, #18]
 801e69e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6a2:	7f9b      	ldrb	r3, [r3, #30]
 801e6a4:	f043 0301 	orr.w	r3, r3, #1
 801e6a8:	b2da      	uxtb	r2, r3
 801e6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e6ae:	697b      	ldr	r3, [r7, #20]
 801e6b0:	2b01      	cmp	r3, #1
 801e6b2:	d178      	bne.n	801e7a6 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6b6:	8b9b      	ldrh	r3, [r3, #28]
 801e6b8:	3314      	adds	r3, #20
 801e6ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6be:	685b      	ldr	r3, [r3, #4]
 801e6c0:	685b      	ldr	r3, [r3, #4]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6c8:	685b      	ldr	r3, [r3, #4]
 801e6ca:	685b      	ldr	r3, [r3, #4]
 801e6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6d0:	3308      	adds	r3, #8
 801e6d2:	2214      	movs	r2, #20
 801e6d4:	4619      	mov	r1, r3
 801e6d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e6d8:	f002 fa0f 	bl	8020afa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e6dc:	8a3b      	ldrh	r3, [r7, #16]
 801e6de:	4618      	mov	r0, r3
 801e6e0:	f7f4 fb4e 	bl	8012d80 <lwip_htons>
 801e6e4:	4603      	mov	r3, r0
 801e6e6:	461a      	mov	r2, r3
 801e6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6ee:	2200      	movs	r2, #0
 801e6f0:	719a      	strb	r2, [r3, #6]
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6f8:	2200      	movs	r2, #0
 801e6fa:	729a      	strb	r2, [r3, #10]
 801e6fc:	2200      	movs	r2, #0
 801e6fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e702:	685b      	ldr	r3, [r3, #4]
 801e704:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e706:	e00d      	b.n	801e724 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801e708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e70a:	685b      	ldr	r3, [r3, #4]
 801e70c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e70e:	2114      	movs	r1, #20
 801e710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801e712:	f7f6 f8d5 	bl	80148c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801e716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e718:	6878      	ldr	r0, [r7, #4]
 801e71a:	f7f6 fa45 	bl	8014ba8 <pbuf_cat>
      r = iprh->next_pbuf;
 801e71e:	68fb      	ldr	r3, [r7, #12]
 801e720:	681b      	ldr	r3, [r3, #0]
 801e722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801e724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e726:	2b00      	cmp	r3, #0
 801e728:	d1ee      	bne.n	801e708 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e72a:	4b06      	ldr	r3, [pc, #24]	@ (801e744 <ip4_reass+0x288>)
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e730:	429a      	cmp	r2, r3
 801e732:	d109      	bne.n	801e748 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801e734:	2300      	movs	r3, #0
 801e736:	637b      	str	r3, [r7, #52]	@ 0x34
 801e738:	e017      	b.n	801e76a <ip4_reass+0x2ae>
 801e73a:	bf00      	nop
 801e73c:	2002d36c 	.word	0x2002d36c
 801e740:	2002d5d8 	.word	0x2002d5d8
 801e744:	2002d5d4 	.word	0x2002d5d4
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e748:	4b31      	ldr	r3, [pc, #196]	@ (801e810 <ip4_reass+0x354>)
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	637b      	str	r3, [r7, #52]	@ 0x34
 801e74e:	e007      	b.n	801e760 <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801e750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e756:	429a      	cmp	r2, r3
 801e758:	d006      	beq.n	801e768 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e75c:	681b      	ldr	r3, [r3, #0]
 801e75e:	637b      	str	r3, [r7, #52]	@ 0x34
 801e760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e762:	2b00      	cmp	r3, #0
 801e764:	d1f4      	bne.n	801e750 <ip4_reass+0x294>
 801e766:	e000      	b.n	801e76a <ip4_reass+0x2ae>
          break;
 801e768:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e76a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e76c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e76e:	f7ff fd0d 	bl	801e18c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e772:	6878      	ldr	r0, [r7, #4]
 801e774:	f7f6 f9d8 	bl	8014b28 <pbuf_clen>
 801e778:	4603      	mov	r3, r0
 801e77a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e77c:	4b25      	ldr	r3, [pc, #148]	@ (801e814 <ip4_reass+0x358>)
 801e77e:	881b      	ldrh	r3, [r3, #0]
 801e780:	8c3a      	ldrh	r2, [r7, #32]
 801e782:	429a      	cmp	r2, r3
 801e784:	d906      	bls.n	801e794 <ip4_reass+0x2d8>
 801e786:	4b24      	ldr	r3, [pc, #144]	@ (801e818 <ip4_reass+0x35c>)
 801e788:	f240 229b 	movw	r2, #667	@ 0x29b
 801e78c:	4923      	ldr	r1, [pc, #140]	@ (801e81c <ip4_reass+0x360>)
 801e78e:	4824      	ldr	r0, [pc, #144]	@ (801e820 <ip4_reass+0x364>)
 801e790:	f001 ff80 	bl	8020694 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e794:	4b1f      	ldr	r3, [pc, #124]	@ (801e814 <ip4_reass+0x358>)
 801e796:	881a      	ldrh	r2, [r3, #0]
 801e798:	8c3b      	ldrh	r3, [r7, #32]
 801e79a:	1ad3      	subs	r3, r2, r3
 801e79c:	b29a      	uxth	r2, r3
 801e79e:	4b1d      	ldr	r3, [pc, #116]	@ (801e814 <ip4_reass+0x358>)
 801e7a0:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	e030      	b.n	801e808 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	e02e      	b.n	801e808 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801e7aa:	bf00      	nop
 801e7ac:	e000      	b.n	801e7b0 <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801e7ae:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d106      	bne.n	801e7c4 <ip4_reass+0x308>
 801e7b6:	4b18      	ldr	r3, [pc, #96]	@ (801e818 <ip4_reass+0x35c>)
 801e7b8:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801e7bc:	4919      	ldr	r1, [pc, #100]	@ (801e824 <ip4_reass+0x368>)
 801e7be:	4818      	ldr	r0, [pc, #96]	@ (801e820 <ip4_reass+0x364>)
 801e7c0:	f001 ff68 	bl	8020694 <iprintf>
  if (ipr->p == NULL) {
 801e7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e7c6:	685b      	ldr	r3, [r3, #4]
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d112      	bne.n	801e7f2 <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e7cc:	4b10      	ldr	r3, [pc, #64]	@ (801e810 <ip4_reass+0x354>)
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e7d2:	429a      	cmp	r2, r3
 801e7d4:	d006      	beq.n	801e7e4 <ip4_reass+0x328>
 801e7d6:	4b10      	ldr	r3, [pc, #64]	@ (801e818 <ip4_reass+0x35c>)
 801e7d8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801e7dc:	4912      	ldr	r1, [pc, #72]	@ (801e828 <ip4_reass+0x36c>)
 801e7de:	4810      	ldr	r0, [pc, #64]	@ (801e820 <ip4_reass+0x364>)
 801e7e0:	f001 ff58 	bl	8020694 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e7e4:	2100      	movs	r1, #0
 801e7e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e7e8:	f7ff fcd0 	bl	801e18c <ip_reass_dequeue_datagram>
 801e7ec:	e002      	b.n	801e7f4 <ip4_reass+0x338>
    goto nullreturn;
 801e7ee:	bf00      	nop
 801e7f0:	e000      	b.n	801e7f4 <ip4_reass+0x338>
  }

nullreturn:
 801e7f2:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801e7f4:	4b0d      	ldr	r3, [pc, #52]	@ (801e82c <ip4_reass+0x370>)
 801e7f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801e7f8:	3301      	adds	r3, #1
 801e7fa:	b29a      	uxth	r2, r3
 801e7fc:	4b0b      	ldr	r3, [pc, #44]	@ (801e82c <ip4_reass+0x370>)
 801e7fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801e800:	6878      	ldr	r0, [r7, #4]
 801e802:	f7f6 f8eb 	bl	80149dc <pbuf_free>
  return NULL;
 801e806:	2300      	movs	r3, #0
}
 801e808:	4618      	mov	r0, r3
 801e80a:	3738      	adds	r7, #56	@ 0x38
 801e80c:	46bd      	mov	sp, r7
 801e80e:	bd80      	pop	{r7, pc}
 801e810:	2002d5d4 	.word	0x2002d5d4
 801e814:	2002d5d8 	.word	0x2002d5d8
 801e818:	08025aa8 	.word	0x08025aa8
 801e81c:	08025c18 	.word	0x08025c18
 801e820:	08025af0 	.word	0x08025af0
 801e824:	08025c34 	.word	0x08025c34
 801e828:	08025c40 	.word	0x08025c40
 801e82c:	2002d36c 	.word	0x2002d36c

0801e830 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e830:	b580      	push	{r7, lr}
 801e832:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e834:	2005      	movs	r0, #5
 801e836:	f7f5 f86f 	bl	8013918 <memp_malloc>
 801e83a:	4603      	mov	r3, r0
}
 801e83c:	4618      	mov	r0, r3
 801e83e:	bd80      	pop	{r7, pc}

0801e840 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e840:	b580      	push	{r7, lr}
 801e842:	b082      	sub	sp, #8
 801e844:	af00      	add	r7, sp, #0
 801e846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d106      	bne.n	801e85c <ip_frag_free_pbuf_custom_ref+0x1c>
 801e84e:	4b07      	ldr	r3, [pc, #28]	@ (801e86c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e850:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801e854:	4906      	ldr	r1, [pc, #24]	@ (801e870 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e856:	4807      	ldr	r0, [pc, #28]	@ (801e874 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e858:	f001 ff1c 	bl	8020694 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e85c:	6879      	ldr	r1, [r7, #4]
 801e85e:	2005      	movs	r0, #5
 801e860:	f7f5 f8d6 	bl	8013a10 <memp_free>
}
 801e864:	bf00      	nop
 801e866:	3708      	adds	r7, #8
 801e868:	46bd      	mov	sp, r7
 801e86a:	bd80      	pop	{r7, pc}
 801e86c:	08025aa8 	.word	0x08025aa8
 801e870:	08025c60 	.word	0x08025c60
 801e874:	08025af0 	.word	0x08025af0

0801e878 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e878:	b580      	push	{r7, lr}
 801e87a:	b084      	sub	sp, #16
 801e87c:	af00      	add	r7, sp, #0
 801e87e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	2b00      	cmp	r3, #0
 801e888:	d106      	bne.n	801e898 <ipfrag_free_pbuf_custom+0x20>
 801e88a:	4b11      	ldr	r3, [pc, #68]	@ (801e8d0 <ipfrag_free_pbuf_custom+0x58>)
 801e88c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801e890:	4910      	ldr	r1, [pc, #64]	@ (801e8d4 <ipfrag_free_pbuf_custom+0x5c>)
 801e892:	4811      	ldr	r0, [pc, #68]	@ (801e8d8 <ipfrag_free_pbuf_custom+0x60>)
 801e894:	f001 fefe 	bl	8020694 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e898:	68fa      	ldr	r2, [r7, #12]
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	429a      	cmp	r2, r3
 801e89e:	d006      	beq.n	801e8ae <ipfrag_free_pbuf_custom+0x36>
 801e8a0:	4b0b      	ldr	r3, [pc, #44]	@ (801e8d0 <ipfrag_free_pbuf_custom+0x58>)
 801e8a2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801e8a6:	490d      	ldr	r1, [pc, #52]	@ (801e8dc <ipfrag_free_pbuf_custom+0x64>)
 801e8a8:	480b      	ldr	r0, [pc, #44]	@ (801e8d8 <ipfrag_free_pbuf_custom+0x60>)
 801e8aa:	f001 fef3 	bl	8020694 <iprintf>
  if (pcr->original != NULL) {
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	695b      	ldr	r3, [r3, #20]
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	d004      	beq.n	801e8c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	695b      	ldr	r3, [r3, #20]
 801e8ba:	4618      	mov	r0, r3
 801e8bc:	f7f6 f88e 	bl	80149dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e8c0:	68f8      	ldr	r0, [r7, #12]
 801e8c2:	f7ff ffbd 	bl	801e840 <ip_frag_free_pbuf_custom_ref>
}
 801e8c6:	bf00      	nop
 801e8c8:	3710      	adds	r7, #16
 801e8ca:	46bd      	mov	sp, r7
 801e8cc:	bd80      	pop	{r7, pc}
 801e8ce:	bf00      	nop
 801e8d0:	08025aa8 	.word	0x08025aa8
 801e8d4:	08025c6c 	.word	0x08025c6c
 801e8d8:	08025af0 	.word	0x08025af0
 801e8dc:	08025c78 	.word	0x08025c78

0801e8e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e8e0:	b580      	push	{r7, lr}
 801e8e2:	b094      	sub	sp, #80	@ 0x50
 801e8e4:	af02      	add	r7, sp, #8
 801e8e6:	60f8      	str	r0, [r7, #12]
 801e8e8:	60b9      	str	r1, [r7, #8]
 801e8ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e8f2:	68bb      	ldr	r3, [r7, #8]
 801e8f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e8f6:	3b14      	subs	r3, #20
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	da00      	bge.n	801e8fe <ip4_frag+0x1e>
 801e8fc:	3307      	adds	r3, #7
 801e8fe:	10db      	asrs	r3, r3, #3
 801e900:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e902:	2314      	movs	r3, #20
 801e904:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e906:	68fb      	ldr	r3, [r7, #12]
 801e908:	685b      	ldr	r3, [r3, #4]
 801e90a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801e90c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e90e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e912:	781b      	ldrb	r3, [r3, #0]
 801e914:	f003 030f 	and.w	r3, r3, #15
 801e918:	b2db      	uxtb	r3, r3
 801e91a:	009b      	lsls	r3, r3, #2
 801e91c:	b2db      	uxtb	r3, r3
 801e91e:	2b14      	cmp	r3, #20
 801e920:	d002      	beq.n	801e928 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e922:	f06f 0305 	mvn.w	r3, #5
 801e926:	e116      	b.n	801eb56 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e928:	68fb      	ldr	r3, [r7, #12]
 801e92a:	895b      	ldrh	r3, [r3, #10]
 801e92c:	2b13      	cmp	r3, #19
 801e92e:	d809      	bhi.n	801e944 <ip4_frag+0x64>
 801e930:	4b8b      	ldr	r3, [pc, #556]	@ (801eb60 <ip4_frag+0x280>)
 801e932:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801e936:	498b      	ldr	r1, [pc, #556]	@ (801eb64 <ip4_frag+0x284>)
 801e938:	488b      	ldr	r0, [pc, #556]	@ (801eb68 <ip4_frag+0x288>)
 801e93a:	f001 feab 	bl	8020694 <iprintf>
 801e93e:	f06f 0305 	mvn.w	r3, #5
 801e942:	e108      	b.n	801eb56 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e946:	88db      	ldrh	r3, [r3, #6]
 801e948:	b29b      	uxth	r3, r3
 801e94a:	4618      	mov	r0, r3
 801e94c:	f7f4 fa18 	bl	8012d80 <lwip_htons>
 801e950:	4603      	mov	r3, r0
 801e952:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801e954:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e956:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e95a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e95e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e960:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801e964:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e966:	68fb      	ldr	r3, [r7, #12]
 801e968:	891b      	ldrh	r3, [r3, #8]
 801e96a:	3b14      	subs	r3, #20
 801e96c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801e970:	e0e7      	b.n	801eb42 <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e972:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e974:	00db      	lsls	r3, r3, #3
 801e976:	b29b      	uxth	r3, r3
 801e978:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e97c:	4293      	cmp	r3, r2
 801e97e:	bf28      	it	cs
 801e980:	4613      	movcs	r3, r2
 801e982:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e984:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e988:	2114      	movs	r1, #20
 801e98a:	200e      	movs	r0, #14
 801e98c:	f7f5 fcfa 	bl	8014384 <pbuf_alloc>
 801e990:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801e992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e994:	2b00      	cmp	r3, #0
 801e996:	f000 80db 	beq.w	801eb50 <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e99c:	895b      	ldrh	r3, [r3, #10]
 801e99e:	2b13      	cmp	r3, #19
 801e9a0:	d806      	bhi.n	801e9b0 <ip4_frag+0xd0>
 801e9a2:	4b6f      	ldr	r3, [pc, #444]	@ (801eb60 <ip4_frag+0x280>)
 801e9a4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801e9a8:	4970      	ldr	r1, [pc, #448]	@ (801eb6c <ip4_frag+0x28c>)
 801e9aa:	486f      	ldr	r0, [pc, #444]	@ (801eb68 <ip4_frag+0x288>)
 801e9ac:	f001 fe72 	bl	8020694 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9b2:	685b      	ldr	r3, [r3, #4]
 801e9b4:	2214      	movs	r2, #20
 801e9b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e9b8:	4618      	mov	r0, r3
 801e9ba:	f002 f89e 	bl	8020afa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9c0:	685b      	ldr	r3, [r3, #4]
 801e9c2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801e9c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e9c6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801e9ca:	e064      	b.n	801ea96 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	895a      	ldrh	r2, [r3, #10]
 801e9d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e9d2:	1ad3      	subs	r3, r2, r3
 801e9d4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	895b      	ldrh	r3, [r3, #10]
 801e9da:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e9dc:	429a      	cmp	r2, r3
 801e9de:	d906      	bls.n	801e9ee <ip4_frag+0x10e>
 801e9e0:	4b5f      	ldr	r3, [pc, #380]	@ (801eb60 <ip4_frag+0x280>)
 801e9e2:	f240 322d 	movw	r2, #813	@ 0x32d
 801e9e6:	4962      	ldr	r1, [pc, #392]	@ (801eb70 <ip4_frag+0x290>)
 801e9e8:	485f      	ldr	r0, [pc, #380]	@ (801eb68 <ip4_frag+0x288>)
 801e9ea:	f001 fe53 	bl	8020694 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e9ee:	8bfa      	ldrh	r2, [r7, #30]
 801e9f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e9f4:	4293      	cmp	r3, r2
 801e9f6:	bf28      	it	cs
 801e9f8:	4613      	movcs	r3, r2
 801e9fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e9fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d105      	bne.n	801ea12 <ip4_frag+0x132>
        poff = 0;
 801ea06:	2300      	movs	r3, #0
 801ea08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ea0a:	68fb      	ldr	r3, [r7, #12]
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	60fb      	str	r3, [r7, #12]
        continue;
 801ea10:	e041      	b.n	801ea96 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ea12:	f7ff ff0d 	bl	801e830 <ip_frag_alloc_pbuf_custom_ref>
 801ea16:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ea18:	69bb      	ldr	r3, [r7, #24]
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d103      	bne.n	801ea26 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ea1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ea20:	f7f5 ffdc 	bl	80149dc <pbuf_free>
        goto memerr;
 801ea24:	e095      	b.n	801eb52 <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ea26:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ea28:	68fb      	ldr	r3, [r7, #12]
 801ea2a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ea2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ea2e:	4413      	add	r3, r2
 801ea30:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801ea34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ea38:	9201      	str	r2, [sp, #4]
 801ea3a:	9300      	str	r3, [sp, #0]
 801ea3c:	4603      	mov	r3, r0
 801ea3e:	2241      	movs	r2, #65	@ 0x41
 801ea40:	2000      	movs	r0, #0
 801ea42:	f7f5 fde9 	bl	8014618 <pbuf_alloced_custom>
 801ea46:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ea48:	697b      	ldr	r3, [r7, #20]
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d106      	bne.n	801ea5c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ea4e:	69b8      	ldr	r0, [r7, #24]
 801ea50:	f7ff fef6 	bl	801e840 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ea54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ea56:	f7f5 ffc1 	bl	80149dc <pbuf_free>
        goto memerr;
 801ea5a:	e07a      	b.n	801eb52 <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801ea5c:	68f8      	ldr	r0, [r7, #12]
 801ea5e:	f7f6 f87b 	bl	8014b58 <pbuf_ref>
      pcr->original = p;
 801ea62:	69bb      	ldr	r3, [r7, #24]
 801ea64:	68fa      	ldr	r2, [r7, #12]
 801ea66:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ea68:	69bb      	ldr	r3, [r7, #24]
 801ea6a:	4a42      	ldr	r2, [pc, #264]	@ (801eb74 <ip4_frag+0x294>)
 801ea6c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ea6e:	6979      	ldr	r1, [r7, #20]
 801ea70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ea72:	f7f6 f899 	bl	8014ba8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ea76:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801ea7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ea7e:	1ad3      	subs	r3, r2, r3
 801ea80:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801ea84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	d004      	beq.n	801ea96 <ip4_frag+0x1b6>
        poff = 0;
 801ea8c:	2300      	movs	r3, #0
 801ea8e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ea96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	d196      	bne.n	801e9cc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ea9e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801eaa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801eaa4:	4413      	add	r3, r2
 801eaa6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801eaa8:	68bb      	ldr	r3, [r7, #8]
 801eaaa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801eaac:	f1a3 0213 	sub.w	r2, r3, #19
 801eab0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801eab4:	429a      	cmp	r2, r3
 801eab6:	bfcc      	ite	gt
 801eab8:	2301      	movgt	r3, #1
 801eaba:	2300      	movle	r3, #0
 801eabc:	b2db      	uxtb	r3, r3
 801eabe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801eac0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801eac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eac8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801eaca:	6a3b      	ldr	r3, [r7, #32]
 801eacc:	2b00      	cmp	r3, #0
 801eace:	d002      	beq.n	801ead6 <ip4_frag+0x1f6>
 801ead0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ead2:	2b00      	cmp	r3, #0
 801ead4:	d003      	beq.n	801eade <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ead6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ead8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801eadc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801eade:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801eae0:	4618      	mov	r0, r3
 801eae2:	f7f4 f94d 	bl	8012d80 <lwip_htons>
 801eae6:	4603      	mov	r3, r0
 801eae8:	461a      	mov	r2, r3
 801eaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eaec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801eaee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801eaf0:	3314      	adds	r3, #20
 801eaf2:	b29b      	uxth	r3, r3
 801eaf4:	4618      	mov	r0, r3
 801eaf6:	f7f4 f943 	bl	8012d80 <lwip_htons>
 801eafa:	4603      	mov	r3, r0
 801eafc:	461a      	mov	r2, r3
 801eafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb00:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801eb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eb04:	2200      	movs	r2, #0
 801eb06:	729a      	strb	r2, [r3, #10]
 801eb08:	2200      	movs	r2, #0
 801eb0a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801eb0c:	68bb      	ldr	r3, [r7, #8]
 801eb0e:	695b      	ldr	r3, [r3, #20]
 801eb10:	687a      	ldr	r2, [r7, #4]
 801eb12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801eb14:	68b8      	ldr	r0, [r7, #8]
 801eb16:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801eb18:	4b17      	ldr	r3, [pc, #92]	@ (801eb78 <ip4_frag+0x298>)
 801eb1a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801eb1c:	3301      	adds	r3, #1
 801eb1e:	b29a      	uxth	r2, r3
 801eb20:	4b15      	ldr	r3, [pc, #84]	@ (801eb78 <ip4_frag+0x298>)
 801eb22:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801eb24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801eb26:	f7f5 ff59 	bl	80149dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801eb2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801eb2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801eb30:	1ad3      	subs	r3, r2, r3
 801eb32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801eb36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801eb3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801eb3c:	4413      	add	r3, r2
 801eb3e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801eb42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	f47f af13 	bne.w	801e972 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801eb4c:	2300      	movs	r3, #0
 801eb4e:	e002      	b.n	801eb56 <ip4_frag+0x276>
      goto memerr;
 801eb50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801eb52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801eb56:	4618      	mov	r0, r3
 801eb58:	3748      	adds	r7, #72	@ 0x48
 801eb5a:	46bd      	mov	sp, r7
 801eb5c:	bd80      	pop	{r7, pc}
 801eb5e:	bf00      	nop
 801eb60:	08025aa8 	.word	0x08025aa8
 801eb64:	08025c84 	.word	0x08025c84
 801eb68:	08025af0 	.word	0x08025af0
 801eb6c:	08025ca0 	.word	0x08025ca0
 801eb70:	08025cc0 	.word	0x08025cc0
 801eb74:	0801e879 	.word	0x0801e879
 801eb78:	2002d36c 	.word	0x2002d36c

0801eb7c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801eb7c:	b580      	push	{r7, lr}
 801eb7e:	b086      	sub	sp, #24
 801eb80:	af00      	add	r7, sp, #0
 801eb82:	6078      	str	r0, [r7, #4]
 801eb84:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801eb86:	230e      	movs	r3, #14
 801eb88:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	895b      	ldrh	r3, [r3, #10]
 801eb8e:	2b0e      	cmp	r3, #14
 801eb90:	d80c      	bhi.n	801ebac <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801eb92:	4b51      	ldr	r3, [pc, #324]	@ (801ecd8 <ethernet_input+0x15c>)
 801eb94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801eb96:	3301      	adds	r3, #1
 801eb98:	b29a      	uxth	r2, r3
 801eb9a:	4b4f      	ldr	r3, [pc, #316]	@ (801ecd8 <ethernet_input+0x15c>)
 801eb9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801eb9e:	4b4e      	ldr	r3, [pc, #312]	@ (801ecd8 <ethernet_input+0x15c>)
 801eba0:	8bdb      	ldrh	r3, [r3, #30]
 801eba2:	3301      	adds	r3, #1
 801eba4:	b29a      	uxth	r2, r3
 801eba6:	4b4c      	ldr	r3, [pc, #304]	@ (801ecd8 <ethernet_input+0x15c>)
 801eba8:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801ebaa:	e08d      	b.n	801ecc8 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	7bdb      	ldrb	r3, [r3, #15]
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	d106      	bne.n	801ebc2 <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801ebb4:	683b      	ldr	r3, [r7, #0]
 801ebb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ebba:	3301      	adds	r3, #1
 801ebbc:	b2da      	uxtb	r2, r3
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	685b      	ldr	r3, [r3, #4]
 801ebc6:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ebc8:	693b      	ldr	r3, [r7, #16]
 801ebca:	7b1a      	ldrb	r2, [r3, #12]
 801ebcc:	7b5b      	ldrb	r3, [r3, #13]
 801ebce:	021b      	lsls	r3, r3, #8
 801ebd0:	4313      	orrs	r3, r2
 801ebd2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ebd4:	693b      	ldr	r3, [r7, #16]
 801ebd6:	781b      	ldrb	r3, [r3, #0]
 801ebd8:	f003 0301 	and.w	r3, r3, #1
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d023      	beq.n	801ec28 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ebe0:	693b      	ldr	r3, [r7, #16]
 801ebe2:	781b      	ldrb	r3, [r3, #0]
 801ebe4:	2b01      	cmp	r3, #1
 801ebe6:	d10f      	bne.n	801ec08 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ebe8:	693b      	ldr	r3, [r7, #16]
 801ebea:	785b      	ldrb	r3, [r3, #1]
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	d11b      	bne.n	801ec28 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ebf0:	693b      	ldr	r3, [r7, #16]
 801ebf2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ebf4:	2b5e      	cmp	r3, #94	@ 0x5e
 801ebf6:	d117      	bne.n	801ec28 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	7b5b      	ldrb	r3, [r3, #13]
 801ebfc:	f043 0310 	orr.w	r3, r3, #16
 801ec00:	b2da      	uxtb	r2, r3
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	735a      	strb	r2, [r3, #13]
 801ec06:	e00f      	b.n	801ec28 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ec08:	693b      	ldr	r3, [r7, #16]
 801ec0a:	2206      	movs	r2, #6
 801ec0c:	4933      	ldr	r1, [pc, #204]	@ (801ecdc <ethernet_input+0x160>)
 801ec0e:	4618      	mov	r0, r3
 801ec10:	f001 fe90 	bl	8020934 <memcmp>
 801ec14:	4603      	mov	r3, r0
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d106      	bne.n	801ec28 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	7b5b      	ldrb	r3, [r3, #13]
 801ec1e:	f043 0308 	orr.w	r3, r3, #8
 801ec22:	b2da      	uxtb	r2, r3
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ec28:	89fb      	ldrh	r3, [r7, #14]
 801ec2a:	2b08      	cmp	r3, #8
 801ec2c:	d003      	beq.n	801ec36 <ethernet_input+0xba>
 801ec2e:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801ec32:	d014      	beq.n	801ec5e <ethernet_input+0xe2>
 801ec34:	e034      	b.n	801eca0 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ec36:	683b      	ldr	r3, [r7, #0]
 801ec38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ec3c:	f003 0308 	and.w	r3, r3, #8
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d03c      	beq.n	801ecbe <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ec44:	8afb      	ldrh	r3, [r7, #22]
 801ec46:	4619      	mov	r1, r3
 801ec48:	6878      	ldr	r0, [r7, #4]
 801ec4a:	f7f5 fe39 	bl	80148c0 <pbuf_remove_header>
 801ec4e:	4603      	mov	r3, r0
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d136      	bne.n	801ecc2 <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801ec54:	6839      	ldr	r1, [r7, #0]
 801ec56:	6878      	ldr	r0, [r7, #4]
 801ec58:	f7fe fdee 	bl	801d838 <ip4_input>
      }
      break;
 801ec5c:	e02d      	b.n	801ecba <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ec5e:	683b      	ldr	r3, [r7, #0]
 801ec60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ec64:	f003 0308 	and.w	r3, r3, #8
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d02c      	beq.n	801ecc6 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ec6c:	8afb      	ldrh	r3, [r7, #22]
 801ec6e:	4619      	mov	r1, r3
 801ec70:	6878      	ldr	r0, [r7, #4]
 801ec72:	f7f5 fe25 	bl	80148c0 <pbuf_remove_header>
 801ec76:	4603      	mov	r3, r0
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d00c      	beq.n	801ec96 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801ec7c:	4b16      	ldr	r3, [pc, #88]	@ (801ecd8 <ethernet_input+0x15c>)
 801ec7e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801ec80:	3301      	adds	r3, #1
 801ec82:	b29a      	uxth	r2, r3
 801ec84:	4b14      	ldr	r3, [pc, #80]	@ (801ecd8 <ethernet_input+0x15c>)
 801ec86:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801ec88:	4b13      	ldr	r3, [pc, #76]	@ (801ecd8 <ethernet_input+0x15c>)
 801ec8a:	8bdb      	ldrh	r3, [r3, #30]
 801ec8c:	3301      	adds	r3, #1
 801ec8e:	b29a      	uxth	r2, r3
 801ec90:	4b11      	ldr	r3, [pc, #68]	@ (801ecd8 <ethernet_input+0x15c>)
 801ec92:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801ec94:	e018      	b.n	801ecc8 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801ec96:	6839      	ldr	r1, [r7, #0]
 801ec98:	6878      	ldr	r0, [r7, #4]
 801ec9a:	f7fd fe67 	bl	801c96c <etharp_input>
      }
      break;
 801ec9e:	e00c      	b.n	801ecba <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801eca0:	4b0d      	ldr	r3, [pc, #52]	@ (801ecd8 <ethernet_input+0x15c>)
 801eca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801eca4:	3301      	adds	r3, #1
 801eca6:	b29a      	uxth	r2, r3
 801eca8:	4b0b      	ldr	r3, [pc, #44]	@ (801ecd8 <ethernet_input+0x15c>)
 801ecaa:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801ecac:	4b0a      	ldr	r3, [pc, #40]	@ (801ecd8 <ethernet_input+0x15c>)
 801ecae:	8bdb      	ldrh	r3, [r3, #30]
 801ecb0:	3301      	adds	r3, #1
 801ecb2:	b29a      	uxth	r2, r3
 801ecb4:	4b08      	ldr	r3, [pc, #32]	@ (801ecd8 <ethernet_input+0x15c>)
 801ecb6:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ecb8:	e006      	b.n	801ecc8 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ecba:	2300      	movs	r3, #0
 801ecbc:	e008      	b.n	801ecd0 <ethernet_input+0x154>
        goto free_and_return;
 801ecbe:	bf00      	nop
 801ecc0:	e002      	b.n	801ecc8 <ethernet_input+0x14c>
        goto free_and_return;
 801ecc2:	bf00      	nop
 801ecc4:	e000      	b.n	801ecc8 <ethernet_input+0x14c>
        goto free_and_return;
 801ecc6:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ecc8:	6878      	ldr	r0, [r7, #4]
 801ecca:	f7f5 fe87 	bl	80149dc <pbuf_free>
  return ERR_OK;
 801ecce:	2300      	movs	r3, #0
}
 801ecd0:	4618      	mov	r0, r3
 801ecd2:	3718      	adds	r7, #24
 801ecd4:	46bd      	mov	sp, r7
 801ecd6:	bd80      	pop	{r7, pc}
 801ecd8:	2002d36c 	.word	0x2002d36c
 801ecdc:	0802676c 	.word	0x0802676c

0801ece0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ece0:	b580      	push	{r7, lr}
 801ece2:	b086      	sub	sp, #24
 801ece4:	af00      	add	r7, sp, #0
 801ece6:	60f8      	str	r0, [r7, #12]
 801ece8:	60b9      	str	r1, [r7, #8]
 801ecea:	607a      	str	r2, [r7, #4]
 801ecec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ecee:	8c3b      	ldrh	r3, [r7, #32]
 801ecf0:	4618      	mov	r0, r3
 801ecf2:	f7f4 f845 	bl	8012d80 <lwip_htons>
 801ecf6:	4603      	mov	r3, r0
 801ecf8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ecfa:	210e      	movs	r1, #14
 801ecfc:	68b8      	ldr	r0, [r7, #8]
 801ecfe:	f7f5 fdcf 	bl	80148a0 <pbuf_add_header>
 801ed02:	4603      	mov	r3, r0
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	d125      	bne.n	801ed54 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ed08:	68bb      	ldr	r3, [r7, #8]
 801ed0a:	685b      	ldr	r3, [r3, #4]
 801ed0c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ed0e:	693b      	ldr	r3, [r7, #16]
 801ed10:	8afa      	ldrh	r2, [r7, #22]
 801ed12:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ed14:	693b      	ldr	r3, [r7, #16]
 801ed16:	2206      	movs	r2, #6
 801ed18:	6839      	ldr	r1, [r7, #0]
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	f001 feed 	bl	8020afa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ed20:	693b      	ldr	r3, [r7, #16]
 801ed22:	3306      	adds	r3, #6
 801ed24:	2206      	movs	r2, #6
 801ed26:	6879      	ldr	r1, [r7, #4]
 801ed28:	4618      	mov	r0, r3
 801ed2a:	f001 fee6 	bl	8020afa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ed2e:	68fb      	ldr	r3, [r7, #12]
 801ed30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ed34:	2b06      	cmp	r3, #6
 801ed36:	d006      	beq.n	801ed46 <ethernet_output+0x66>
 801ed38:	4b0d      	ldr	r3, [pc, #52]	@ (801ed70 <ethernet_output+0x90>)
 801ed3a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801ed3e:	490d      	ldr	r1, [pc, #52]	@ (801ed74 <ethernet_output+0x94>)
 801ed40:	480d      	ldr	r0, [pc, #52]	@ (801ed78 <ethernet_output+0x98>)
 801ed42:	f001 fca7 	bl	8020694 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	699b      	ldr	r3, [r3, #24]
 801ed4a:	68b9      	ldr	r1, [r7, #8]
 801ed4c:	68f8      	ldr	r0, [r7, #12]
 801ed4e:	4798      	blx	r3
 801ed50:	4603      	mov	r3, r0
 801ed52:	e008      	b.n	801ed66 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801ed54:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801ed56:	4b09      	ldr	r3, [pc, #36]	@ (801ed7c <ethernet_output+0x9c>)
 801ed58:	895b      	ldrh	r3, [r3, #10]
 801ed5a:	3301      	adds	r3, #1
 801ed5c:	b29a      	uxth	r2, r3
 801ed5e:	4b07      	ldr	r3, [pc, #28]	@ (801ed7c <ethernet_output+0x9c>)
 801ed60:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801ed62:	f06f 0301 	mvn.w	r3, #1
}
 801ed66:	4618      	mov	r0, r3
 801ed68:	3718      	adds	r7, #24
 801ed6a:	46bd      	mov	sp, r7
 801ed6c:	bd80      	pop	{r7, pc}
 801ed6e:	bf00      	nop
 801ed70:	08025cd0 	.word	0x08025cd0
 801ed74:	08025d08 	.word	0x08025d08
 801ed78:	08025d3c 	.word	0x08025d3c
 801ed7c:	2002d36c 	.word	0x2002d36c

0801ed80 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ed80:	b580      	push	{r7, lr}
 801ed82:	b082      	sub	sp, #8
 801ed84:	af00      	add	r7, sp, #0
 801ed86:	6078      	str	r0, [r7, #4]
 801ed88:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ed8a:	683b      	ldr	r3, [r7, #0]
 801ed8c:	2200      	movs	r2, #0
 801ed8e:	2104      	movs	r1, #4
 801ed90:	4618      	mov	r0, r3
 801ed92:	f7ee fa8d 	bl	800d2b0 <osMessageQueueNew>
 801ed96:	4602      	mov	r2, r0
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801ed9c:	4b10      	ldr	r3, [pc, #64]	@ (801ede0 <sys_mbox_new+0x60>)
 801ed9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801eda2:	3301      	adds	r3, #1
 801eda4:	b29a      	uxth	r2, r3
 801eda6:	4b0e      	ldr	r3, [pc, #56]	@ (801ede0 <sys_mbox_new+0x60>)
 801eda8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801edac:	4b0c      	ldr	r3, [pc, #48]	@ (801ede0 <sys_mbox_new+0x60>)
 801edae:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 801edb2:	4b0b      	ldr	r3, [pc, #44]	@ (801ede0 <sys_mbox_new+0x60>)
 801edb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801edb8:	429a      	cmp	r2, r3
 801edba:	d205      	bcs.n	801edc8 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801edbc:	4b08      	ldr	r3, [pc, #32]	@ (801ede0 <sys_mbox_new+0x60>)
 801edbe:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801edc2:	4b07      	ldr	r3, [pc, #28]	@ (801ede0 <sys_mbox_new+0x60>)
 801edc4:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	2b00      	cmp	r3, #0
 801edce:	d102      	bne.n	801edd6 <sys_mbox_new+0x56>
    return ERR_MEM;
 801edd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801edd4:	e000      	b.n	801edd8 <sys_mbox_new+0x58>

  return ERR_OK;
 801edd6:	2300      	movs	r3, #0
}
 801edd8:	4618      	mov	r0, r3
 801edda:	3708      	adds	r7, #8
 801eddc:	46bd      	mov	sp, r7
 801edde:	bd80      	pop	{r7, pc}
 801ede0:	2002d36c 	.word	0x2002d36c

0801ede4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ede4:	b580      	push	{r7, lr}
 801ede6:	b082      	sub	sp, #8
 801ede8:	af00      	add	r7, sp, #0
 801edea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	4618      	mov	r0, r3
 801edf2:	f7ee fbc9 	bl	800d588 <osMessageQueueGetCount>
 801edf6:	4603      	mov	r3, r0
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d007      	beq.n	801ee0c <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801edfc:	4b0c      	ldr	r3, [pc, #48]	@ (801ee30 <sys_mbox_free+0x4c>)
 801edfe:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801ee02:	3301      	adds	r3, #1
 801ee04:	b29a      	uxth	r2, r3
 801ee06:	4b0a      	ldr	r3, [pc, #40]	@ (801ee30 <sys_mbox_free+0x4c>)
 801ee08:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	4618      	mov	r0, r3
 801ee12:	f7ee fbeb 	bl	800d5ec <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801ee16:	4b06      	ldr	r3, [pc, #24]	@ (801ee30 <sys_mbox_free+0x4c>)
 801ee18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801ee1c:	3b01      	subs	r3, #1
 801ee1e:	b29a      	uxth	r2, r3
 801ee20:	4b03      	ldr	r3, [pc, #12]	@ (801ee30 <sys_mbox_free+0x4c>)
 801ee22:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
}
 801ee26:	bf00      	nop
 801ee28:	3708      	adds	r7, #8
 801ee2a:	46bd      	mov	sp, r7
 801ee2c:	bd80      	pop	{r7, pc}
 801ee2e:	bf00      	nop
 801ee30:	2002d36c 	.word	0x2002d36c

0801ee34 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ee34:	b580      	push	{r7, lr}
 801ee36:	b084      	sub	sp, #16
 801ee38:	af00      	add	r7, sp, #0
 801ee3a:	6078      	str	r0, [r7, #4]
 801ee3c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	6818      	ldr	r0, [r3, #0]
 801ee42:	4639      	mov	r1, r7
 801ee44:	2300      	movs	r3, #0
 801ee46:	2200      	movs	r2, #0
 801ee48:	f7ee fab8 	bl	800d3bc <osMessageQueuePut>
 801ee4c:	4603      	mov	r3, r0
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d102      	bne.n	801ee58 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ee52:	2300      	movs	r3, #0
 801ee54:	73fb      	strb	r3, [r7, #15]
 801ee56:	e009      	b.n	801ee6c <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ee58:	23ff      	movs	r3, #255	@ 0xff
 801ee5a:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801ee5c:	4b06      	ldr	r3, [pc, #24]	@ (801ee78 <sys_mbox_trypost+0x44>)
 801ee5e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801ee62:	3301      	adds	r3, #1
 801ee64:	b29a      	uxth	r2, r3
 801ee66:	4b04      	ldr	r3, [pc, #16]	@ (801ee78 <sys_mbox_trypost+0x44>)
 801ee68:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
#endif /* SYS_STATS */
  }

  return result;
 801ee6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ee70:	4618      	mov	r0, r3
 801ee72:	3710      	adds	r7, #16
 801ee74:	46bd      	mov	sp, r7
 801ee76:	bd80      	pop	{r7, pc}
 801ee78:	2002d36c 	.word	0x2002d36c

0801ee7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ee7c:	b580      	push	{r7, lr}
 801ee7e:	b086      	sub	sp, #24
 801ee80:	af00      	add	r7, sp, #0
 801ee82:	60f8      	str	r0, [r7, #12]
 801ee84:	60b9      	str	r1, [r7, #8]
 801ee86:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ee88:	f7ed fe36 	bl	800caf8 <osKernelGetTickCount>
 801ee8c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d013      	beq.n	801eebc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	6818      	ldr	r0, [r3, #0]
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	2200      	movs	r2, #0
 801ee9c:	68b9      	ldr	r1, [r7, #8]
 801ee9e:	f7ee fb01 	bl	800d4a4 <osMessageQueueGet>
 801eea2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801eea4:	693b      	ldr	r3, [r7, #16]
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d105      	bne.n	801eeb6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801eeaa:	f7ed fe25 	bl	800caf8 <osKernelGetTickCount>
 801eeae:	4602      	mov	r2, r0
 801eeb0:	697b      	ldr	r3, [r7, #20]
 801eeb2:	1ad3      	subs	r3, r2, r3
 801eeb4:	e00f      	b.n	801eed6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801eeb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eeba:	e00c      	b.n	801eed6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801eebc:	68fb      	ldr	r3, [r7, #12]
 801eebe:	6818      	ldr	r0, [r3, #0]
 801eec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eec4:	2200      	movs	r2, #0
 801eec6:	68b9      	ldr	r1, [r7, #8]
 801eec8:	f7ee faec 	bl	800d4a4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801eecc:	f7ed fe14 	bl	800caf8 <osKernelGetTickCount>
 801eed0:	4602      	mov	r2, r0
 801eed2:	697b      	ldr	r3, [r7, #20]
 801eed4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801eed6:	4618      	mov	r0, r3
 801eed8:	3718      	adds	r7, #24
 801eeda:	46bd      	mov	sp, r7
 801eedc:	bd80      	pop	{r7, pc}

0801eede <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801eede:	b580      	push	{r7, lr}
 801eee0:	b082      	sub	sp, #8
 801eee2:	af00      	add	r7, sp, #0
 801eee4:	6078      	str	r0, [r7, #4]
 801eee6:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	6818      	ldr	r0, [r3, #0]
 801eeec:	2300      	movs	r3, #0
 801eeee:	2200      	movs	r2, #0
 801eef0:	6839      	ldr	r1, [r7, #0]
 801eef2:	f7ee fad7 	bl	800d4a4 <osMessageQueueGet>
 801eef6:	4603      	mov	r3, r0
 801eef8:	2b00      	cmp	r3, #0
 801eefa:	d101      	bne.n	801ef00 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801eefc:	2300      	movs	r3, #0
 801eefe:	e001      	b.n	801ef04 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ef00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801ef04:	4618      	mov	r0, r3
 801ef06:	3708      	adds	r7, #8
 801ef08:	46bd      	mov	sp, r7
 801ef0a:	bd80      	pop	{r7, pc}

0801ef0c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ef0c:	b480      	push	{r7}
 801ef0e:	b083      	sub	sp, #12
 801ef10:	af00      	add	r7, sp, #0
 801ef12:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d101      	bne.n	801ef20 <sys_mbox_valid+0x14>
    return 0;
 801ef1c:	2300      	movs	r3, #0
 801ef1e:	e000      	b.n	801ef22 <sys_mbox_valid+0x16>
  else
    return 1;
 801ef20:	2301      	movs	r3, #1
}
 801ef22:	4618      	mov	r0, r3
 801ef24:	370c      	adds	r7, #12
 801ef26:	46bd      	mov	sp, r7
 801ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef2c:	4770      	bx	lr

0801ef2e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ef2e:	b480      	push	{r7}
 801ef30:	b083      	sub	sp, #12
 801ef32:	af00      	add	r7, sp, #0
 801ef34:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	2200      	movs	r2, #0
 801ef3a:	601a      	str	r2, [r3, #0]
}
 801ef3c:	bf00      	nop
 801ef3e:	370c      	adds	r7, #12
 801ef40:	46bd      	mov	sp, r7
 801ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef46:	4770      	bx	lr

0801ef48 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801ef48:	b580      	push	{r7, lr}
 801ef4a:	b082      	sub	sp, #8
 801ef4c:	af00      	add	r7, sp, #0
 801ef4e:	6078      	str	r0, [r7, #4]
 801ef50:	460b      	mov	r3, r1
 801ef52:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801ef54:	78fb      	ldrb	r3, [r7, #3]
 801ef56:	2200      	movs	r2, #0
 801ef58:	4619      	mov	r1, r3
 801ef5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801ef5e:	f7ee f817 	bl	800cf90 <osSemaphoreNew>
 801ef62:	4602      	mov	r2, r0
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	2b00      	cmp	r3, #0
 801ef6e:	d10a      	bne.n	801ef86 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801ef70:	4b17      	ldr	r3, [pc, #92]	@ (801efd0 <sys_sem_new+0x88>)
 801ef72:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 801ef76:	3301      	adds	r3, #1
 801ef78:	b29a      	uxth	r2, r3
 801ef7a:	4b15      	ldr	r3, [pc, #84]	@ (801efd0 <sys_sem_new+0x88>)
 801ef7c:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
#endif /* SYS_STATS */
    return ERR_MEM;
 801ef80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef84:	e01f      	b.n	801efc6 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 801ef86:	78fb      	ldrb	r3, [r7, #3]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d105      	bne.n	801ef98 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	2100      	movs	r1, #0
 801ef92:	4618      	mov	r0, r3
 801ef94:	f7ee f898 	bl	800d0c8 <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801ef98:	4b0d      	ldr	r3, [pc, #52]	@ (801efd0 <sys_sem_new+0x88>)
 801ef9a:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801ef9e:	3301      	adds	r3, #1
 801efa0:	b29a      	uxth	r2, r3
 801efa2:	4b0b      	ldr	r3, [pc, #44]	@ (801efd0 <sys_sem_new+0x88>)
 801efa4:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801efa8:	4b09      	ldr	r3, [pc, #36]	@ (801efd0 <sys_sem_new+0x88>)
 801efaa:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 801efae:	4b08      	ldr	r3, [pc, #32]	@ (801efd0 <sys_sem_new+0x88>)
 801efb0:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801efb4:	429a      	cmp	r2, r3
 801efb6:	d205      	bcs.n	801efc4 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801efb8:	4b05      	ldr	r3, [pc, #20]	@ (801efd0 <sys_sem_new+0x88>)
 801efba:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	@ 0xec
 801efbe:	4b04      	ldr	r3, [pc, #16]	@ (801efd0 <sys_sem_new+0x88>)
 801efc0:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801efc4:	2300      	movs	r3, #0
}
 801efc6:	4618      	mov	r0, r3
 801efc8:	3708      	adds	r7, #8
 801efca:	46bd      	mov	sp, r7
 801efcc:	bd80      	pop	{r7, pc}
 801efce:	bf00      	nop
 801efd0:	2002d36c 	.word	0x2002d36c

0801efd4 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801efd4:	b580      	push	{r7, lr}
 801efd6:	b084      	sub	sp, #16
 801efd8:	af00      	add	r7, sp, #0
 801efda:	6078      	str	r0, [r7, #4]
 801efdc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801efde:	f7ed fd8b 	bl	800caf8 <osKernelGetTickCount>
 801efe2:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801efe4:	683b      	ldr	r3, [r7, #0]
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d011      	beq.n	801f00e <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801efea:	687b      	ldr	r3, [r7, #4]
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	6839      	ldr	r1, [r7, #0]
 801eff0:	4618      	mov	r0, r3
 801eff2:	f7ee f869 	bl	800d0c8 <osSemaphoreAcquire>
 801eff6:	4603      	mov	r3, r0
 801eff8:	2b00      	cmp	r3, #0
 801effa:	d105      	bne.n	801f008 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801effc:	f7ed fd7c 	bl	800caf8 <osKernelGetTickCount>
 801f000:	4602      	mov	r2, r0
 801f002:	68fb      	ldr	r3, [r7, #12]
 801f004:	1ad3      	subs	r3, r2, r3
 801f006:	e012      	b.n	801f02e <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f00c:	e00f      	b.n	801f02e <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801f00e:	bf00      	nop
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f018:	4618      	mov	r0, r3
 801f01a:	f7ee f855 	bl	800d0c8 <osSemaphoreAcquire>
 801f01e:	4603      	mov	r3, r0
 801f020:	2b00      	cmp	r3, #0
 801f022:	d1f5      	bne.n	801f010 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801f024:	f7ed fd68 	bl	800caf8 <osKernelGetTickCount>
 801f028:	4602      	mov	r2, r0
 801f02a:	68fb      	ldr	r3, [r7, #12]
 801f02c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801f02e:	4618      	mov	r0, r3
 801f030:	3710      	adds	r7, #16
 801f032:	46bd      	mov	sp, r7
 801f034:	bd80      	pop	{r7, pc}

0801f036 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801f036:	b580      	push	{r7, lr}
 801f038:	b082      	sub	sp, #8
 801f03a:	af00      	add	r7, sp, #0
 801f03c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	681b      	ldr	r3, [r3, #0]
 801f042:	4618      	mov	r0, r3
 801f044:	f7ee f8a6 	bl	800d194 <osSemaphoreRelease>
}
 801f048:	bf00      	nop
 801f04a:	3708      	adds	r7, #8
 801f04c:	46bd      	mov	sp, r7
 801f04e:	bd80      	pop	{r7, pc}

0801f050 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801f050:	b580      	push	{r7, lr}
 801f052:	b082      	sub	sp, #8
 801f054:	af00      	add	r7, sp, #0
 801f056:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801f058:	4b08      	ldr	r3, [pc, #32]	@ (801f07c <sys_sem_free+0x2c>)
 801f05a:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801f05e:	3b01      	subs	r3, #1
 801f060:	b29a      	uxth	r2, r3
 801f062:	4b06      	ldr	r3, [pc, #24]	@ (801f07c <sys_sem_free+0x2c>)
 801f064:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	4618      	mov	r0, r3
 801f06e:	f7ee f8e9 	bl	800d244 <osSemaphoreDelete>
}
 801f072:	bf00      	nop
 801f074:	3708      	adds	r7, #8
 801f076:	46bd      	mov	sp, r7
 801f078:	bd80      	pop	{r7, pc}
 801f07a:	bf00      	nop
 801f07c:	2002d36c 	.word	0x2002d36c

0801f080 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801f080:	b480      	push	{r7}
 801f082:	b083      	sub	sp, #12
 801f084:	af00      	add	r7, sp, #0
 801f086:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d101      	bne.n	801f094 <sys_sem_valid+0x14>
    return 0;
 801f090:	2300      	movs	r3, #0
 801f092:	e000      	b.n	801f096 <sys_sem_valid+0x16>
  else
    return 1;
 801f094:	2301      	movs	r3, #1
}
 801f096:	4618      	mov	r0, r3
 801f098:	370c      	adds	r7, #12
 801f09a:	46bd      	mov	sp, r7
 801f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0a0:	4770      	bx	lr

0801f0a2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801f0a2:	b480      	push	{r7}
 801f0a4:	b083      	sub	sp, #12
 801f0a6:	af00      	add	r7, sp, #0
 801f0a8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	2200      	movs	r2, #0
 801f0ae:	601a      	str	r2, [r3, #0]
}
 801f0b0:	bf00      	nop
 801f0b2:	370c      	adds	r7, #12
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0ba:	4770      	bx	lr

0801f0bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f0bc:	b580      	push	{r7, lr}
 801f0be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801f0c0:	2000      	movs	r0, #0
 801f0c2:	f7ed fe1d 	bl	800cd00 <osMutexNew>
 801f0c6:	4603      	mov	r3, r0
 801f0c8:	4a01      	ldr	r2, [pc, #4]	@ (801f0d0 <sys_init+0x14>)
 801f0ca:	6013      	str	r3, [r2, #0]
#endif
}
 801f0cc:	bf00      	nop
 801f0ce:	bd80      	pop	{r7, pc}
 801f0d0:	2002d5dc 	.word	0x2002d5dc

0801f0d4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f0d4:	b580      	push	{r7, lr}
 801f0d6:	b082      	sub	sp, #8
 801f0d8:	af00      	add	r7, sp, #0
 801f0da:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801f0dc:	2000      	movs	r0, #0
 801f0de:	f7ed fe0f 	bl	800cd00 <osMutexNew>
 801f0e2:	4602      	mov	r2, r0
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d10a      	bne.n	801f106 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801f0f0:	4b12      	ldr	r3, [pc, #72]	@ (801f13c <sys_mutex_new+0x68>)
 801f0f2:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 801f0f6:	3301      	adds	r3, #1
 801f0f8:	b29a      	uxth	r2, r3
 801f0fa:	4b10      	ldr	r3, [pc, #64]	@ (801f13c <sys_mutex_new+0x68>)
 801f0fc:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
#endif /* SYS_STATS */
    return ERR_MEM;
 801f100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f104:	e016      	b.n	801f134 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801f106:	4b0d      	ldr	r3, [pc, #52]	@ (801f13c <sys_mutex_new+0x68>)
 801f108:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801f10c:	3301      	adds	r3, #1
 801f10e:	b29a      	uxth	r2, r3
 801f110:	4b0a      	ldr	r3, [pc, #40]	@ (801f13c <sys_mutex_new+0x68>)
 801f112:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801f116:	4b09      	ldr	r3, [pc, #36]	@ (801f13c <sys_mutex_new+0x68>)
 801f118:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 801f11c:	4b07      	ldr	r3, [pc, #28]	@ (801f13c <sys_mutex_new+0x68>)
 801f11e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801f122:	429a      	cmp	r2, r3
 801f124:	d205      	bcs.n	801f132 <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801f126:	4b05      	ldr	r3, [pc, #20]	@ (801f13c <sys_mutex_new+0x68>)
 801f128:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	@ 0xf2
 801f12c:	4b03      	ldr	r3, [pc, #12]	@ (801f13c <sys_mutex_new+0x68>)
 801f12e:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f132:	2300      	movs	r3, #0
}
 801f134:	4618      	mov	r0, r3
 801f136:	3708      	adds	r7, #8
 801f138:	46bd      	mov	sp, r7
 801f13a:	bd80      	pop	{r7, pc}
 801f13c:	2002d36c 	.word	0x2002d36c

0801f140 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801f140:	b580      	push	{r7, lr}
 801f142:	b082      	sub	sp, #8
 801f144:	af00      	add	r7, sp, #0
 801f146:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	681b      	ldr	r3, [r3, #0]
 801f14c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f150:	4618      	mov	r0, r3
 801f152:	f7ed fe6f 	bl	800ce34 <osMutexAcquire>
#endif
}
 801f156:	bf00      	nop
 801f158:	3708      	adds	r7, #8
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bd80      	pop	{r7, pc}

0801f15e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801f15e:	b580      	push	{r7, lr}
 801f160:	b082      	sub	sp, #8
 801f162:	af00      	add	r7, sp, #0
 801f164:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	4618      	mov	r0, r3
 801f16c:	f7ed fec0 	bl	800cef0 <osMutexRelease>
}
 801f170:	bf00      	nop
 801f172:	3708      	adds	r7, #8
 801f174:	46bd      	mov	sp, r7
 801f176:	bd80      	pop	{r7, pc}

0801f178 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f178:	b580      	push	{r7, lr}
 801f17a:	b08e      	sub	sp, #56	@ 0x38
 801f17c:	af00      	add	r7, sp, #0
 801f17e:	60f8      	str	r0, [r7, #12]
 801f180:	60b9      	str	r1, [r7, #8]
 801f182:	607a      	str	r2, [r7, #4]
 801f184:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801f186:	f107 0314 	add.w	r3, r7, #20
 801f18a:	2224      	movs	r2, #36	@ 0x24
 801f18c:	2100      	movs	r1, #0
 801f18e:	4618      	mov	r0, r3
 801f190:	f001 fbe0 	bl	8020954 <memset>
 801f194:	68fb      	ldr	r3, [r7, #12]
 801f196:	617b      	str	r3, [r7, #20]
 801f198:	683b      	ldr	r3, [r7, #0]
 801f19a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f19c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801f1a0:	f107 0314 	add.w	r3, r7, #20
 801f1a4:	461a      	mov	r2, r3
 801f1a6:	6879      	ldr	r1, [r7, #4]
 801f1a8:	68b8      	ldr	r0, [r7, #8]
 801f1aa:	f7ed fccd 	bl	800cb48 <osThreadNew>
 801f1ae:	4603      	mov	r3, r0
#endif
}
 801f1b0:	4618      	mov	r0, r3
 801f1b2:	3738      	adds	r7, #56	@ 0x38
 801f1b4:	46bd      	mov	sp, r7
 801f1b6:	bd80      	pop	{r7, pc}

0801f1b8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f1b8:	b580      	push	{r7, lr}
 801f1ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801f1bc:	4b04      	ldr	r3, [pc, #16]	@ (801f1d0 <sys_arch_protect+0x18>)
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f1c4:	4618      	mov	r0, r3
 801f1c6:	f7ed fe35 	bl	800ce34 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801f1ca:	2301      	movs	r3, #1
}
 801f1cc:	4618      	mov	r0, r3
 801f1ce:	bd80      	pop	{r7, pc}
 801f1d0:	2002d5dc 	.word	0x2002d5dc

0801f1d4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f1d4:	b580      	push	{r7, lr}
 801f1d6:	b082      	sub	sp, #8
 801f1d8:	af00      	add	r7, sp, #0
 801f1da:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f1dc:	4b04      	ldr	r3, [pc, #16]	@ (801f1f0 <sys_arch_unprotect+0x1c>)
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	4618      	mov	r0, r3
 801f1e2:	f7ed fe85 	bl	800cef0 <osMutexRelease>
}
 801f1e6:	bf00      	nop
 801f1e8:	3708      	adds	r7, #8
 801f1ea:	46bd      	mov	sp, r7
 801f1ec:	bd80      	pop	{r7, pc}
 801f1ee:	bf00      	nop
 801f1f0:	2002d5dc 	.word	0x2002d5dc

0801f1f4 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801f1f4:	b580      	push	{r7, lr}
 801f1f6:	b0ca      	sub	sp, #296	@ 0x128
 801f1f8:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;
	osStatus_t status;

	adcReadySem = osSemaphoreNew(1, 0, NULL);
 801f1fa:	2200      	movs	r2, #0
 801f1fc:	2100      	movs	r1, #0
 801f1fe:	2001      	movs	r0, #1
 801f200:	f7ed fec6 	bl	800cf90 <osSemaphoreNew>
 801f204:	4603      	mov	r3, r0
 801f206:	4a3b      	ldr	r2, [pc, #236]	@ (801f2f4 <AdcTestTask+0x100>)
 801f208:	6013      	str	r3, [r2, #0]

	while (1)
	{
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801f20a:	4b3b      	ldr	r3, [pc, #236]	@ (801f2f8 <AdcTestTask+0x104>)
 801f20c:	6818      	ldr	r0, [r3, #0]
 801f20e:	f107 0110 	add.w	r1, r7, #16
 801f212:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f216:	2200      	movs	r2, #0
 801f218:	f7ee f944 	bl	800d4a4 <osMessageQueueGet>
 801f21c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 801f220:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f224:	2b00      	cmp	r3, #0
 801f226:	d153      	bne.n	801f2d0 <AdcTestTask+0xdc>
		{
			printf("adc received test ID: %lu\n", test_data.test_id);
 801f228:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f22c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f230:	689b      	ldr	r3, [r3, #8]
 801f232:	4619      	mov	r1, r3
 801f234:	4831      	ldr	r0, [pc, #196]	@ (801f2fc <AdcTestTask+0x108>)
 801f236:	f001 fa2d 	bl	8020694 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f23a:	2300      	movs	r3, #0
 801f23c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f240:	e00d      	b.n	801f25e <AdcTestTask+0x6a>
			{
				result = ADC_Test_Perform();
 801f242:	f000 f861 	bl	801f308 <ADC_Test_Perform>
 801f246:	4603      	mov	r3, r0
 801f248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f24c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f250:	2bff      	cmp	r3, #255	@ 0xff
 801f252:	d00e      	beq.n	801f272 <AdcTestTask+0x7e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f254:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f258:	3301      	adds	r3, #1
 801f25a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f25e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f262:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f266:	7b1b      	ldrb	r3, [r3, #12]
 801f268:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f26c:	429a      	cmp	r2, r3
 801f26e:	d3e8      	bcc.n	801f242 <AdcTestTask+0x4e>
 801f270:	e000      	b.n	801f274 <AdcTestTask+0x80>
					break;
 801f272:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f274:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f278:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f27c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f280:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801f284:	6812      	ldr	r2, [r2, #0]
 801f286:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f288:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f28c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f290:	889a      	ldrh	r2, [r3, #4]
 801f292:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f296:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f29a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f29c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801f2a4:	689a      	ldr	r2, [r3, #8]
 801f2a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f2ae:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f2b0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2b4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f2b8:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f2bc:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f2be:	4b10      	ldr	r3, [pc, #64]	@ (801f300 <AdcTestTask+0x10c>)
 801f2c0:	6818      	ldr	r0, [r3, #0]
 801f2c2:	4639      	mov	r1, r7
 801f2c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f2c8:	2200      	movs	r2, #0
 801f2ca:	f7ee f877 	bl	800d3bc <osMessageQueuePut>
 801f2ce:	e79c      	b.n	801f20a <AdcTestTask+0x16>
		}
		else if (status == osErrorTimeout)
 801f2d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f2d4:	f113 0f02 	cmn.w	r3, #2
 801f2d8:	d103      	bne.n	801f2e2 <AdcTestTask+0xee>
		{
			osDelay(1);
 801f2da:	2001      	movs	r0, #1
 801f2dc:	f7ed fce2 	bl	800cca4 <osDelay>
 801f2e0:	e793      	b.n	801f20a <AdcTestTask+0x16>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 801f2e2:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801f2e6:	4807      	ldr	r0, [pc, #28]	@ (801f304 <AdcTestTask+0x110>)
 801f2e8:	f001 f9d4 	bl	8020694 <iprintf>
			osDelay(1);
 801f2ec:	2001      	movs	r0, #1
 801f2ee:	f7ed fcd9 	bl	800cca4 <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801f2f2:	e78a      	b.n	801f20a <AdcTestTask+0x16>
 801f2f4:	2002d5e0 	.word	0x2002d5e0
 801f2f8:	20000334 	.word	0x20000334
 801f2fc:	08025d64 	.word	0x08025d64
 801f300:	20000324 	.word	0x20000324
 801f304:	08025d80 	.word	0x08025d80

0801f308 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 801f308:	b580      	push	{r7, lr}
 801f30a:	b082      	sub	sp, #8
 801f30c:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing adc test\n");
 801f30e:	4819      	ldr	r0, [pc, #100]	@ (801f374 <ADC_Test_Perform+0x6c>)
 801f310:	f001 fa30 	bl	8020774 <puts>
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801f314:	2201      	movs	r2, #1
 801f316:	4918      	ldr	r1, [pc, #96]	@ (801f378 <ADC_Test_Perform+0x70>)
 801f318:	4818      	ldr	r0, [pc, #96]	@ (801f37c <ADC_Test_Perform+0x74>)
 801f31a:	f7e3 f8b7 	bl	800248c <HAL_ADC_Start_DMA>
 801f31e:	4603      	mov	r3, r0
 801f320:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801f322:	79fb      	ldrb	r3, [r7, #7]
 801f324:	2b00      	cmp	r3, #0
 801f326:	d004      	beq.n	801f332 <ADC_Test_Perform+0x2a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
 801f328:	4815      	ldr	r0, [pc, #84]	@ (801f380 <ADC_Test_Perform+0x78>)
 801f32a:	f001 fa23 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801f32e:	23ff      	movs	r3, #255	@ 0xff
 801f330:	e01b      	b.n	801f36a <ADC_Test_Perform+0x62>
	}

	if (osSemaphoreAcquire(adcReadySem, 10) != osOK) {
 801f332:	4b14      	ldr	r3, [pc, #80]	@ (801f384 <ADC_Test_Perform+0x7c>)
 801f334:	681b      	ldr	r3, [r3, #0]
 801f336:	210a      	movs	r1, #10
 801f338:	4618      	mov	r0, r3
 801f33a:	f7ed fec5 	bl	800d0c8 <osSemaphoreAcquire>
 801f33e:	4603      	mov	r3, r0
 801f340:	2b00      	cmp	r3, #0
 801f342:	d004      	beq.n	801f34e <ADC_Test_Perform+0x46>
#ifdef PRINT_TESTS_DEBUG
		printf("ADC semaphore timeout\n");
 801f344:	4810      	ldr	r0, [pc, #64]	@ (801f388 <ADC_Test_Perform+0x80>)
 801f346:	f001 fa15 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801f34a:	23ff      	movs	r3, #255	@ 0xff
 801f34c:	e00d      	b.n	801f36a <ADC_Test_Perform+0x62>
	}

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
 801f34e:	4b0a      	ldr	r3, [pc, #40]	@ (801f378 <ADC_Test_Perform+0x70>)
 801f350:	881b      	ldrh	r3, [r3, #0]
 801f352:	4619      	mov	r1, r3
 801f354:	480d      	ldr	r0, [pc, #52]	@ (801f38c <ADC_Test_Perform+0x84>)
 801f356:	f001 f99d 	bl	8020694 <iprintf>
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801f35a:	4b07      	ldr	r3, [pc, #28]	@ (801f378 <ADC_Test_Perform+0x70>)
 801f35c:	881b      	ldrh	r3, [r3, #0]
 801f35e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801f362:	d301      	bcc.n	801f368 <ADC_Test_Perform+0x60>
 801f364:	2301      	movs	r3, #1
 801f366:	e000      	b.n	801f36a <ADC_Test_Perform+0x62>

	return TEST_FAILED;
 801f368:	23ff      	movs	r3, #255	@ 0xff
}
 801f36a:	4618      	mov	r0, r3
 801f36c:	3708      	adds	r7, #8
 801f36e:	46bd      	mov	sp, r7
 801f370:	bd80      	pop	{r7, pc}
 801f372:	bf00      	nop
 801f374:	08025d98 	.word	0x08025d98
 801f378:	2002d5e4 	.word	0x2002d5e4
 801f37c:	2000022c 	.word	0x2000022c
 801f380:	08025dac 	.word	0x08025dac
 801f384:	2002d5e0 	.word	0x2002d5e0
 801f388:	08025dc4 	.word	0x08025dc4
 801f38c:	08025ddc 	.word	0x08025ddc

0801f390 <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801f390:	b580      	push	{r7, lr}
 801f392:	b082      	sub	sp, #8
 801f394:	af00      	add	r7, sp, #0
 801f396:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(adcReadySem);
 801f398:	4b09      	ldr	r3, [pc, #36]	@ (801f3c0 <HAL_ADC_ConvCpltCallback+0x30>)
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	4618      	mov	r0, r3
 801f39e:	f7ed fef9 	bl	800d194 <osSemaphoreRelease>
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801f3a2:	4808      	ldr	r0, [pc, #32]	@ (801f3c4 <HAL_ADC_ConvCpltCallback+0x34>)
 801f3a4:	f7e3 f970 	bl	8002688 <HAL_ADC_Stop_DMA>
 801f3a8:	4603      	mov	r3, r0
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d004      	beq.n	801f3b8 <HAL_ADC_ConvCpltCallback+0x28>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
 801f3ae:	4806      	ldr	r0, [pc, #24]	@ (801f3c8 <HAL_ADC_ConvCpltCallback+0x38>)
 801f3b0:	f001 f9e0 	bl	8020774 <puts>
#endif
		Error_Handler();
 801f3b4:	f7e1 ff3a 	bl	800122c <Error_Handler>
	}
}
 801f3b8:	bf00      	nop
 801f3ba:	3708      	adds	r7, #8
 801f3bc:	46bd      	mov	sp, r7
 801f3be:	bd80      	pop	{r7, pc}
 801f3c0:	2002d5e0 	.word	0x2002d5e0
 801f3c4:	2000022c 	.word	0x2000022c
 801f3c8:	08025dec 	.word	0x08025dec

0801f3cc <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 801f3cc:	b580      	push	{r7, lr}
 801f3ce:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801f3d2:	af00      	add	r7, sp, #0
	while(1)
	{
		InMsg_t in_msg;
		TestData_t test_data;

		printf("Dispatcher waiting for messages...\n");
 801f3d4:	4861      	ldr	r0, [pc, #388]	@ (801f55c <TestDispatcher+0x190>)
 801f3d6:	f001 f9cd 	bl	8020774 <puts>
		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801f3da:	4b61      	ldr	r3, [pc, #388]	@ (801f560 <TestDispatcher+0x194>)
 801f3dc:	6818      	ldr	r0, [r3, #0]
 801f3de:	4639      	mov	r1, r7
 801f3e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f3e4:	2200      	movs	r2, #0
 801f3e6:	f7ee f85d 	bl	800d4a4 <osMessageQueueGet>
 801f3ea:	4603      	mov	r3, r0
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d1f1      	bne.n	801f3d4 <TestDispatcher+0x8>
		{
			printf("Dispatcher got msg to periph %d!\n", in_msg.peripheral);
 801f3f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f3f4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f3f8:	7b1b      	ldrb	r3, [r3, #12]
 801f3fa:	4619      	mov	r1, r3
 801f3fc:	4859      	ldr	r0, [pc, #356]	@ (801f564 <TestDispatcher+0x198>)
 801f3fe:	f001 f949 	bl	8020694 <iprintf>

			// load test_data
			test_data.addr = in_msg.addr;
 801f402:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f406:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f40a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801f40e:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801f412:	6812      	ldr	r2, [r2, #0]
 801f414:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801f416:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f41a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f41e:	889a      	ldrh	r2, [r3, #4]
 801f420:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f424:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f428:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801f42a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f42e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f432:	689a      	ldr	r2, [r3, #8]
 801f434:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f438:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f43c:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801f43e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f442:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f446:	7b5a      	ldrb	r2, [r3, #13]
 801f448:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f44c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f450:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801f452:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f456:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f45a:	7b9a      	ldrb	r2, [r3, #14]
 801f45c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f460:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801f464:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801f466:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f46a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f46e:	7b9b      	ldrb	r3, [r3, #14]
 801f470:	461a      	mov	r2, r3
 801f472:	463b      	mov	r3, r7
 801f474:	f103 010f 	add.w	r1, r3, #15
 801f478:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801f47c:	330e      	adds	r3, #14
 801f47e:	4618      	mov	r0, r3
 801f480:	f001 fb3b 	bl	8020afa <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801f484:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f488:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f48c:	7b1b      	ldrb	r3, [r3, #12]
 801f48e:	f003 0302 	and.w	r3, r3, #2
 801f492:	2b00      	cmp	r3, #0
 801f494:	d00b      	beq.n	801f4ae <TestDispatcher+0xe2>
			{
				printf("dispatcher sent to UART\n");
 801f496:	4834      	ldr	r0, [pc, #208]	@ (801f568 <TestDispatcher+0x19c>)
 801f498:	f001 f96c 	bl	8020774 <puts>
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801f49c:	4b33      	ldr	r3, [pc, #204]	@ (801f56c <TestDispatcher+0x1a0>)
 801f49e:	6818      	ldr	r0, [r3, #0]
 801f4a0:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f4a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f4a8:	2200      	movs	r2, #0
 801f4aa:	f7ed ff87 	bl	800d3bc <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801f4ae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4b2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f4b6:	7b1b      	ldrb	r3, [r3, #12]
 801f4b8:	f003 0308 	and.w	r3, r3, #8
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	d00b      	beq.n	801f4d8 <TestDispatcher+0x10c>
			{
				printf("dispatcher sent to I2C\n");
 801f4c0:	482b      	ldr	r0, [pc, #172]	@ (801f570 <TestDispatcher+0x1a4>)
 801f4c2:	f001 f957 	bl	8020774 <puts>
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801f4c6:	4b2b      	ldr	r3, [pc, #172]	@ (801f574 <TestDispatcher+0x1a8>)
 801f4c8:	6818      	ldr	r0, [r3, #0]
 801f4ca:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f4ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	f7ed ff72 	bl	800d3bc <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_SPI)
 801f4d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f4dc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f4e0:	7b1b      	ldrb	r3, [r3, #12]
 801f4e2:	f003 0304 	and.w	r3, r3, #4
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d00b      	beq.n	801f502 <TestDispatcher+0x136>
			{
				printf("dispatcher sent to SPI\n");
 801f4ea:	4823      	ldr	r0, [pc, #140]	@ (801f578 <TestDispatcher+0x1ac>)
 801f4ec:	f001 f942 	bl	8020774 <puts>
				osMessageQueuePut(spiQueueHandle, &test_data, 0, osWaitForever);
 801f4f0:	4b22      	ldr	r3, [pc, #136]	@ (801f57c <TestDispatcher+0x1b0>)
 801f4f2:	6818      	ldr	r0, [r3, #0]
 801f4f4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f4f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f4fc:	2200      	movs	r2, #0
 801f4fe:	f7ed ff5d 	bl	800d3bc <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_ADC)
 801f502:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f506:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f50a:	7b1b      	ldrb	r3, [r3, #12]
 801f50c:	f003 0310 	and.w	r3, r3, #16
 801f510:	2b00      	cmp	r3, #0
 801f512:	d00b      	beq.n	801f52c <TestDispatcher+0x160>
			{
				printf("dispatcher sent to ADC\n");
 801f514:	481a      	ldr	r0, [pc, #104]	@ (801f580 <TestDispatcher+0x1b4>)
 801f516:	f001 f92d 	bl	8020774 <puts>
				osMessageQueuePut(adcQueueHandle, &test_data, 0, osWaitForever);
 801f51a:	4b1a      	ldr	r3, [pc, #104]	@ (801f584 <TestDispatcher+0x1b8>)
 801f51c:	6818      	ldr	r0, [r3, #0]
 801f51e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f526:	2200      	movs	r2, #0
 801f528:	f7ed ff48 	bl	800d3bc <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_TIM)
 801f52c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f530:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f534:	7b1b      	ldrb	r3, [r3, #12]
 801f536:	f003 0301 	and.w	r3, r3, #1
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	f43f af4a 	beq.w	801f3d4 <TestDispatcher+0x8>
			{
				printf("dispatcher sent to TIM\n");
 801f540:	4811      	ldr	r0, [pc, #68]	@ (801f588 <TestDispatcher+0x1bc>)
 801f542:	f001 f917 	bl	8020774 <puts>
				osMessageQueuePut(timQueueHandle, &test_data, 0, osWaitForever);
 801f546:	4b11      	ldr	r3, [pc, #68]	@ (801f58c <TestDispatcher+0x1c0>)
 801f548:	6818      	ldr	r0, [r3, #0]
 801f54a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f54e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f552:	2200      	movs	r2, #0
 801f554:	f7ed ff32 	bl	800d3bc <osMessageQueuePut>
	{
 801f558:	e73c      	b.n	801f3d4 <TestDispatcher+0x8>
 801f55a:	bf00      	nop
 801f55c:	08025e00 	.word	0x08025e00
 801f560:	20000320 	.word	0x20000320
 801f564:	08025e24 	.word	0x08025e24
 801f568:	08025e48 	.word	0x08025e48
 801f56c:	20000328 	.word	0x20000328
 801f570:	08025e60 	.word	0x08025e60
 801f574:	2000032c 	.word	0x2000032c
 801f578:	08025e78 	.word	0x08025e78
 801f57c:	20000330 	.word	0x20000330
 801f580:	08025e90 	.word	0x08025e90
 801f584:	20000334 	.word	0x20000334
 801f588:	08025ea8 	.word	0x08025ea8
 801f58c:	20000338 	.word	0x20000338

0801f590 <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801f590:	b580      	push	{r7, lr}
 801f592:	b086      	sub	sp, #24
 801f594:	af00      	add	r7, sp, #0
 801f596:	60f8      	str	r0, [r7, #12]
 801f598:	607a      	str	r2, [r7, #4]
 801f59a:	461a      	mov	r2, r3
 801f59c:	460b      	mov	r3, r1
 801f59e:	72fb      	strb	r3, [r7, #11]
 801f5a0:	4613      	mov	r3, r2
 801f5a2:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801f5a4:	7afb      	ldrb	r3, [r7, #11]
 801f5a6:	461a      	mov	r2, r3
 801f5a8:	68f9      	ldr	r1, [r7, #12]
 801f5aa:	480b      	ldr	r0, [pc, #44]	@ (801f5d8 <Match_CRC+0x48>)
 801f5ac:	f7e3 fcf6 	bl	8002f9c <HAL_CRC_Calculate>
 801f5b0:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801f5b2:	7abb      	ldrb	r3, [r7, #10]
 801f5b4:	461a      	mov	r2, r3
 801f5b6:	6879      	ldr	r1, [r7, #4]
 801f5b8:	4807      	ldr	r0, [pc, #28]	@ (801f5d8 <Match_CRC+0x48>)
 801f5ba:	f7e3 fcef 	bl	8002f9c <HAL_CRC_Calculate>
 801f5be:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 801f5c0:	697a      	ldr	r2, [r7, #20]
 801f5c2:	693b      	ldr	r3, [r7, #16]
 801f5c4:	429a      	cmp	r2, r3
 801f5c6:	d101      	bne.n	801f5cc <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 801f5c8:	2301      	movs	r3, #1
 801f5ca:	e000      	b.n	801f5ce <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 801f5cc:	2300      	movs	r3, #0
}
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	3718      	adds	r7, #24
 801f5d2:	46bd      	mov	sp, r7
 801f5d4:	bd80      	pop	{r7, pc}
 801f5d6:	bf00      	nop
 801f5d8:	200002d4 	.word	0x200002d4

0801f5dc <UDP_Listen>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Listen(void)
{
 801f5dc:	b580      	push	{r7, lr}
 801f5de:	b0ca      	sub	sp, #296	@ 0x128
 801f5e0:	af00      	add	r7, sp, #0
	void *raw_data;
	uint16_t len;
	InMsg_t in_msg;
	int n_read;

	conn_recv = netconn_new(NETCONN_UDP);
 801f5e2:	2200      	movs	r2, #0
 801f5e4:	2100      	movs	r1, #0
 801f5e6:	2020      	movs	r0, #32
 801f5e8:	f7f1 fb64 	bl	8010cb4 <netconn_new_with_proto_and_callback>
 801f5ec:	4603      	mov	r3, r0
 801f5ee:	4a6f      	ldr	r2, [pc, #444]	@ (801f7ac <UDP_Listen+0x1d0>)
 801f5f0:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 801f5f2:	4b6e      	ldr	r3, [pc, #440]	@ (801f7ac <UDP_Listen+0x1d0>)
 801f5f4:	681b      	ldr	r3, [r3, #0]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d104      	bne.n	801f604 <UDP_Listen+0x28>
	{
		printf("error initializing UDP receive netconn\n");
 801f5fa:	486d      	ldr	r0, [pc, #436]	@ (801f7b0 <UDP_Listen+0x1d4>)
 801f5fc:	f001 f8ba 	bl	8020774 <puts>
		osThreadExit();
 801f600:	f7ed fb48 	bl	800cc94 <osThreadExit>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 801f604:	4b69      	ldr	r3, [pc, #420]	@ (801f7ac <UDP_Listen+0x1d0>)
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801f60c:	4969      	ldr	r1, [pc, #420]	@ (801f7b4 <UDP_Listen+0x1d8>)
 801f60e:	4618      	mov	r0, r3
 801f610:	f7f1 fc0a 	bl	8010e28 <netconn_bind>
 801f614:	4603      	mov	r3, r0
 801f616:	2b00      	cmp	r3, #0
 801f618:	d00c      	beq.n	801f634 <UDP_Listen+0x58>
	{
		printf("error binding UDP port\n");
 801f61a:	4867      	ldr	r0, [pc, #412]	@ (801f7b8 <UDP_Listen+0x1dc>)
 801f61c:	f001 f8aa 	bl	8020774 <puts>
		netconn_delete(conn_recv);
 801f620:	4b62      	ldr	r3, [pc, #392]	@ (801f7ac <UDP_Listen+0x1d0>)
 801f622:	681b      	ldr	r3, [r3, #0]
 801f624:	4618      	mov	r0, r3
 801f626:	f7f1 fbe3 	bl	8010df0 <netconn_delete>
		conn_recv = NULL;
 801f62a:	4b60      	ldr	r3, [pc, #384]	@ (801f7ac <UDP_Listen+0x1d0>)
 801f62c:	2200      	movs	r2, #0
 801f62e:	601a      	str	r2, [r3, #0]
		osThreadExit();
 801f630:	f7ed fb30 	bl	800cc94 <osThreadExit>
	}

	printf("Listening started\n");
 801f634:	4861      	ldr	r0, [pc, #388]	@ (801f7bc <UDP_Listen+0x1e0>)
 801f636:	f001 f89d 	bl	8020774 <puts>

	while (1)
	{
		printf("Listener waiting for messages...\n");
 801f63a:	4861      	ldr	r0, [pc, #388]	@ (801f7c0 <UDP_Listen+0x1e4>)
 801f63c:	f001 f89a 	bl	8020774 <puts>
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 801f640:	4b5a      	ldr	r3, [pc, #360]	@ (801f7ac <UDP_Listen+0x1d0>)
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 801f648:	4611      	mov	r1, r2
 801f64a:	4618      	mov	r0, r3
 801f64c:	f7f1 fda0 	bl	8011190 <netconn_recv>
 801f650:	4603      	mov	r3, r0
 801f652:	2b00      	cmp	r3, #0
 801f654:	f040 80a5 	bne.w	801f7a2 <UDP_Listen+0x1c6>
		{
			printf("listener got a message\n");
 801f658:	485a      	ldr	r0, [pc, #360]	@ (801f7c4 <UDP_Listen+0x1e8>)
 801f65a:	f001 f88b 	bl	8020774 <puts>
			// Load in_msg
			in_msg.addr = *netbuf_fromaddr(buf);
 801f65e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801f662:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f666:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f66a:	6892      	ldr	r2, [r2, #8]
 801f66c:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 801f66e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f672:	899a      	ldrh	r2, [r3, #12]
 801f674:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f678:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f67c:	809a      	strh	r2, [r3, #4]

			netbuf_data(buf, &raw_data, &len);
 801f67e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f682:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 801f686:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 801f68a:	4618      	mov	r0, r3
 801f68c:	f7f3 f976 	bl	801297c <netbuf_data>

			n_read = 0;
 801f690:	2300      	movs	r3, #0
 801f692:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 801f696:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	461a      	mov	r2, r3
 801f69e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f6a2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f6a6:	609a      	str	r2, [r3, #8]
			n_read += sizeof(in_msg.test_id);
 801f6a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f6ac:	3304      	adds	r3, #4
 801f6ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

			memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 801f6b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f6b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f6ba:	1c59      	adds	r1, r3, #1
 801f6bc:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f6c0:	4413      	add	r3, r2
 801f6c2:	781a      	ldrb	r2, [r3, #0]
 801f6c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f6c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f6cc:	731a      	strb	r2, [r3, #12]
			memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 801f6ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f6d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f6d6:	1c59      	adds	r1, r3, #1
 801f6d8:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f6dc:	4413      	add	r3, r2
 801f6de:	781a      	ldrb	r2, [r3, #0]
 801f6e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f6e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f6e8:	735a      	strb	r2, [r3, #13]
			memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 801f6ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f6ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f6f2:	1c59      	adds	r1, r3, #1
 801f6f4:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f6f8:	4413      	add	r3, r2
 801f6fa:	781a      	ldrb	r2, [r3, #0]
 801f6fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f700:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f704:	739a      	strb	r2, [r3, #14]
			memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 801f706:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f70a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f70e:	18d1      	adds	r1, r2, r3
 801f710:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f714:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f718:	7b9b      	ldrb	r3, [r3, #14]
 801f71a:	461a      	mov	r2, r3
 801f71c:	1d3b      	adds	r3, r7, #4
 801f71e:	330f      	adds	r3, #15
 801f720:	4618      	mov	r0, r3
 801f722:	f001 f9ea 	bl	8020afa <memcpy>

			if (in_msg.p_len < sizeof(in_msg.payload))
				in_msg.payload[in_msg.p_len] = '\0';
 801f726:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f72a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f72e:	7b9b      	ldrb	r3, [r3, #14]
 801f730:	461a      	mov	r2, r3
 801f732:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f736:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f73a:	4413      	add	r3, r2
 801f73c:	2200      	movs	r2, #0
 801f73e:	73da      	strb	r2, [r3, #15]
			printf("Peripheral is: %d\n", in_msg.peripheral);
 801f740:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f744:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f748:	7b1b      	ldrb	r3, [r3, #12]
 801f74a:	4619      	mov	r1, r3
 801f74c:	481e      	ldr	r0, [pc, #120]	@ (801f7c8 <UDP_Listen+0x1ec>)
 801f74e:	f000 ffa1 	bl	8020694 <iprintf>
			printf("n iterations is: %d\n", in_msg.n_iter);
 801f752:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f756:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f75a:	7b5b      	ldrb	r3, [r3, #13]
 801f75c:	4619      	mov	r1, r3
 801f75e:	481b      	ldr	r0, [pc, #108]	@ (801f7cc <UDP_Listen+0x1f0>)
 801f760:	f000 ff98 	bl	8020694 <iprintf>
			printf("Message is: %s\n", in_msg.payload);
 801f764:	1d3b      	adds	r3, r7, #4
 801f766:	330f      	adds	r3, #15
 801f768:	4619      	mov	r1, r3
 801f76a:	4819      	ldr	r0, [pc, #100]	@ (801f7d0 <UDP_Listen+0x1f4>)
 801f76c:	f000 ff92 	bl	8020694 <iprintf>

			// send in_msg to InMsgQueue
			osStatus_t status = osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801f770:	4b18      	ldr	r3, [pc, #96]	@ (801f7d4 <UDP_Listen+0x1f8>)
 801f772:	6818      	ldr	r0, [r3, #0]
 801f774:	1d39      	adds	r1, r7, #4
 801f776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f77a:	2200      	movs	r2, #0
 801f77c:	f7ed fe1e 	bl	800d3bc <osMessageQueuePut>
 801f780:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
			if (status != osOK)
 801f784:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d004      	beq.n	801f796 <UDP_Listen+0x1ba>
			{
				printf("inMsg put error: %d\n", status);
 801f78c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801f790:	4811      	ldr	r0, [pc, #68]	@ (801f7d8 <UDP_Listen+0x1fc>)
 801f792:	f000 ff7f 	bl	8020694 <iprintf>
			}

			netbuf_delete(buf);
 801f796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f79a:	4618      	mov	r0, r3
 801f79c:	f7f3 f884 	bl	80128a8 <netbuf_delete>
 801f7a0:	e74b      	b.n	801f63a <UDP_Listen+0x5e>
		}
		else
		{
			printf("netconn_recv failed\n");
 801f7a2:	480e      	ldr	r0, [pc, #56]	@ (801f7dc <UDP_Listen+0x200>)
 801f7a4:	f000 ffe6 	bl	8020774 <puts>
		printf("Listener waiting for messages...\n");
 801f7a8:	e747      	b.n	801f63a <UDP_Listen+0x5e>
 801f7aa:	bf00      	nop
 801f7ac:	2002d7e4 	.word	0x2002d7e4
 801f7b0:	08025ec0 	.word	0x08025ec0
 801f7b4:	08026768 	.word	0x08026768
 801f7b8:	08025ee8 	.word	0x08025ee8
 801f7bc:	08025f00 	.word	0x08025f00
 801f7c0:	08025f14 	.word	0x08025f14
 801f7c4:	08025f38 	.word	0x08025f38
 801f7c8:	08025f50 	.word	0x08025f50
 801f7cc:	08025f64 	.word	0x08025f64
 801f7d0:	08025f7c 	.word	0x08025f7c
 801f7d4:	20000320 	.word	0x20000320
 801f7d8:	08025f8c 	.word	0x08025f8c
 801f7dc:	08025fa4 	.word	0x08025fa4

0801f7e0 <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 801f7e0:	b580      	push	{r7, lr}
 801f7e2:	b086      	sub	sp, #24
 801f7e4:	af00      	add	r7, sp, #0
	struct netbuf *buf;
	OutMsg_t out_msg;

	conn_send = netconn_new(NETCONN_UDP);
 801f7e6:	2200      	movs	r2, #0
 801f7e8:	2100      	movs	r1, #0
 801f7ea:	2020      	movs	r0, #32
 801f7ec:	f7f1 fa62 	bl	8010cb4 <netconn_new_with_proto_and_callback>
 801f7f0:	4603      	mov	r3, r0
 801f7f2:	4a28      	ldr	r2, [pc, #160]	@ (801f894 <UDP_Response+0xb4>)
 801f7f4:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 801f7f6:	4b27      	ldr	r3, [pc, #156]	@ (801f894 <UDP_Response+0xb4>)
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	d104      	bne.n	801f808 <UDP_Response+0x28>
	{
		printf("error initializing UDP send netconn\n");
 801f7fe:	4826      	ldr	r0, [pc, #152]	@ (801f898 <UDP_Response+0xb8>)
 801f800:	f000 ffb8 	bl	8020774 <puts>
		osThreadExit();
 801f804:	f7ed fa46 	bl	800cc94 <osThreadExit>
	}

	while(1)
	{
		printf("Responder waiting for messages...\n");
 801f808:	4824      	ldr	r0, [pc, #144]	@ (801f89c <UDP_Response+0xbc>)
 801f80a:	f000 ffb3 	bl	8020774 <puts>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801f80e:	4b24      	ldr	r3, [pc, #144]	@ (801f8a0 <UDP_Response+0xc0>)
 801f810:	6818      	ldr	r0, [r3, #0]
 801f812:	4639      	mov	r1, r7
 801f814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f818:	2200      	movs	r2, #0
 801f81a:	f7ed fe43 	bl	800d4a4 <osMessageQueueGet>
 801f81e:	4603      	mov	r3, r0
 801f820:	2b00      	cmp	r3, #0
 801f822:	d1f1      	bne.n	801f808 <UDP_Response+0x28>
		{
			printf("responder got a response to send\n");
 801f824:	481f      	ldr	r0, [pc, #124]	@ (801f8a4 <UDP_Response+0xc4>)
 801f826:	f000 ffa5 	bl	8020774 <puts>
			//Load response buffer
			buf = netbuf_new();
 801f82a:	f7f3 f829 	bl	8012880 <netbuf_new>
 801f82e:	6178      	str	r0, [r7, #20]
			if (!buf)
 801f830:	697b      	ldr	r3, [r7, #20]
 801f832:	2b00      	cmp	r3, #0
 801f834:	d103      	bne.n	801f83e <UDP_Response+0x5e>
			{
				printf("responder netbuf_new() failed");
 801f836:	481c      	ldr	r0, [pc, #112]	@ (801f8a8 <UDP_Response+0xc8>)
 801f838:	f000 ff2c 	bl	8020694 <iprintf>
				continue;
 801f83c:	e029      	b.n	801f892 <UDP_Response+0xb2>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 801f83e:	2105      	movs	r1, #5
 801f840:	6978      	ldr	r0, [r7, #20]
 801f842:	f7f3 f851 	bl	80128e8 <netbuf_alloc>
 801f846:	6138      	str	r0, [r7, #16]
			if (!data)
 801f848:	693b      	ldr	r3, [r7, #16]
 801f84a:	2b00      	cmp	r3, #0
 801f84c:	d106      	bne.n	801f85c <UDP_Response+0x7c>
			{
				printf("responder netbuf_alloc() failed");
 801f84e:	4817      	ldr	r0, [pc, #92]	@ (801f8ac <UDP_Response+0xcc>)
 801f850:	f000 ff20 	bl	8020694 <iprintf>
			    netbuf_delete(buf);
 801f854:	6978      	ldr	r0, [r7, #20]
 801f856:	f7f3 f827 	bl	80128a8 <netbuf_delete>
			    continue;
 801f85a:	e01a      	b.n	801f892 <UDP_Response+0xb2>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 801f85c:	68ba      	ldr	r2, [r7, #8]
 801f85e:	693b      	ldr	r3, [r7, #16]
 801f860:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 801f862:	693b      	ldr	r3, [r7, #16]
 801f864:	3304      	adds	r3, #4
 801f866:	7b3a      	ldrb	r2, [r7, #12]
 801f868:	701a      	strb	r2, [r3, #0]

			// Send response
			netconn_sendto(conn_send, buf, &out_msg.addr, out_msg.port);
 801f86a:	4b0a      	ldr	r3, [pc, #40]	@ (801f894 <UDP_Response+0xb4>)
 801f86c:	6818      	ldr	r0, [r3, #0]
 801f86e:	88bb      	ldrh	r3, [r7, #4]
 801f870:	463a      	mov	r2, r7
 801f872:	6979      	ldr	r1, [r7, #20]
 801f874:	f7f1 fd06 	bl	8011284 <netconn_sendto>
			netbuf_delete(buf);
 801f878:	6978      	ldr	r0, [r7, #20]
 801f87a:	f7f3 f815 	bl	80128a8 <netbuf_delete>
			printf("responder sent to %s:%d\n", ipaddr_ntoa(&out_msg.addr), out_msg.port);
 801f87e:	463b      	mov	r3, r7
 801f880:	4618      	mov	r0, r3
 801f882:	f7fe fa7f 	bl	801dd84 <ip4addr_ntoa>
 801f886:	4603      	mov	r3, r0
 801f888:	88ba      	ldrh	r2, [r7, #4]
 801f88a:	4619      	mov	r1, r3
 801f88c:	4808      	ldr	r0, [pc, #32]	@ (801f8b0 <UDP_Response+0xd0>)
 801f88e:	f000 ff01 	bl	8020694 <iprintf>
		printf("Responder waiting for messages...\n");
 801f892:	e7b9      	b.n	801f808 <UDP_Response+0x28>
 801f894:	2002d7e8 	.word	0x2002d7e8
 801f898:	08025fb8 	.word	0x08025fb8
 801f89c:	08025fdc 	.word	0x08025fdc
 801f8a0:	20000324 	.word	0x20000324
 801f8a4:	08026000 	.word	0x08026000
 801f8a8:	08026024 	.word	0x08026024
 801f8ac:	08026044 	.word	0x08026044
 801f8b0:	08026064 	.word	0x08026064

0801f8b4 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801f8b4:	b580      	push	{r7, lr}
 801f8b6:	b0ca      	sub	sp, #296	@ 0x128
 801f8b8:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	i2c1TxSem = osSemaphoreNew(1, 0, NULL);
 801f8ba:	2200      	movs	r2, #0
 801f8bc:	2100      	movs	r1, #0
 801f8be:	2001      	movs	r0, #1
 801f8c0:	f7ed fb66 	bl	800cf90 <osSemaphoreNew>
 801f8c4:	4603      	mov	r3, r0
 801f8c6:	4a45      	ldr	r2, [pc, #276]	@ (801f9dc <I2cTestTask+0x128>)
 801f8c8:	6013      	str	r3, [r2, #0]
	i2c1RxSem = osSemaphoreNew(1, 0, NULL);
 801f8ca:	2200      	movs	r2, #0
 801f8cc:	2100      	movs	r1, #0
 801f8ce:	2001      	movs	r0, #1
 801f8d0:	f7ed fb5e 	bl	800cf90 <osSemaphoreNew>
 801f8d4:	4603      	mov	r3, r0
 801f8d6:	4a42      	ldr	r2, [pc, #264]	@ (801f9e0 <I2cTestTask+0x12c>)
 801f8d8:	6013      	str	r3, [r2, #0]
	i2c2TxSem = osSemaphoreNew(1, 0, NULL);
 801f8da:	2200      	movs	r2, #0
 801f8dc:	2100      	movs	r1, #0
 801f8de:	2001      	movs	r0, #1
 801f8e0:	f7ed fb56 	bl	800cf90 <osSemaphoreNew>
 801f8e4:	4603      	mov	r3, r0
 801f8e6:	4a3f      	ldr	r2, [pc, #252]	@ (801f9e4 <I2cTestTask+0x130>)
 801f8e8:	6013      	str	r3, [r2, #0]
	i2c2RxSem = osSemaphoreNew(1, 0, NULL);
 801f8ea:	2200      	movs	r2, #0
 801f8ec:	2100      	movs	r1, #0
 801f8ee:	2001      	movs	r0, #1
 801f8f0:	f7ed fb4e 	bl	800cf90 <osSemaphoreNew>
 801f8f4:	4603      	mov	r3, r0
 801f8f6:	4a3c      	ldr	r2, [pc, #240]	@ (801f9e8 <I2cTestTask+0x134>)
 801f8f8:	6013      	str	r3, [r2, #0]

	while (1)
	{
		printf("i2c waiting for messages\n");
 801f8fa:	483c      	ldr	r0, [pc, #240]	@ (801f9ec <I2cTestTask+0x138>)
 801f8fc:	f000 ff3a 	bl	8020774 <puts>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f900:	4b3b      	ldr	r3, [pc, #236]	@ (801f9f0 <I2cTestTask+0x13c>)
 801f902:	6818      	ldr	r0, [r3, #0]
 801f904:	f107 0114 	add.w	r1, r7, #20
 801f908:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f90c:	2200      	movs	r2, #0
 801f90e:	f7ed fdc9 	bl	800d4a4 <osMessageQueueGet>
 801f912:	4603      	mov	r3, r0
 801f914:	2b00      	cmp	r3, #0
 801f916:	d15d      	bne.n	801f9d4 <I2cTestTask+0x120>
		{
			printf("i2c received test ID: %lu\n", test_data.test_id);
 801f918:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f91c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f920:	689b      	ldr	r3, [r3, #8]
 801f922:	4619      	mov	r1, r3
 801f924:	4833      	ldr	r0, [pc, #204]	@ (801f9f4 <I2cTestTask+0x140>)
 801f926:	f000 feb5 	bl	8020694 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f92a:	2300      	movs	r3, #0
 801f92c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f930:	e017      	b.n	801f962 <I2cTestTask+0xae>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f932:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f936:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f93a:	7b5a      	ldrb	r2, [r3, #13]
 801f93c:	f107 0314 	add.w	r3, r7, #20
 801f940:	330e      	adds	r3, #14
 801f942:	4611      	mov	r1, r2
 801f944:	4618      	mov	r0, r3
 801f946:	f000 f859 	bl	801f9fc <I2C_Test_Perform>
 801f94a:	4603      	mov	r3, r0
 801f94c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f954:	2bff      	cmp	r3, #255	@ 0xff
 801f956:	d00e      	beq.n	801f976 <I2cTestTask+0xc2>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f958:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f95c:	3301      	adds	r3, #1
 801f95e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f962:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f966:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f96a:	7b1b      	ldrb	r3, [r3, #12]
 801f96c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f970:	429a      	cmp	r2, r3
 801f972:	d3de      	bcc.n	801f932 <I2cTestTask+0x7e>
 801f974:	e000      	b.n	801f978 <I2cTestTask+0xc4>
					break;
 801f976:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f978:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f97c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f980:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f984:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f988:	6812      	ldr	r2, [r2, #0]
 801f98a:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f98c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f990:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f994:	889a      	ldrh	r2, [r3, #4]
 801f996:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f99a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f99e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f9a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f9a8:	689a      	ldr	r2, [r3, #8]
 801f9aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f9b2:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f9b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f9bc:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f9c0:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f9c2:	4b0d      	ldr	r3, [pc, #52]	@ (801f9f8 <I2cTestTask+0x144>)
 801f9c4:	6818      	ldr	r0, [r3, #0]
 801f9c6:	1d39      	adds	r1, r7, #4
 801f9c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f9cc:	2200      	movs	r2, #0
 801f9ce:	f7ed fcf5 	bl	800d3bc <osMessageQueuePut>
 801f9d2:	e792      	b.n	801f8fa <I2cTestTask+0x46>
		}
		else osDelay(1);
 801f9d4:	2001      	movs	r0, #1
 801f9d6:	f7ed f965 	bl	800cca4 <osDelay>
		printf("i2c waiting for messages\n");
 801f9da:	e78e      	b.n	801f8fa <I2cTestTask+0x46>
 801f9dc:	2002d7ec 	.word	0x2002d7ec
 801f9e0:	2002d7f0 	.word	0x2002d7f0
 801f9e4:	2002d7f4 	.word	0x2002d7f4
 801f9e8:	2002d7f8 	.word	0x2002d7f8
 801f9ec:	08026080 	.word	0x08026080
 801f9f0:	2000032c 	.word	0x2000032c
 801f9f4:	0802609c 	.word	0x0802609c
 801f9f8:	20000324 	.word	0x20000324

0801f9fc <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f9fc:	b590      	push	{r4, r7, lr}
 801f9fe:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801fa02:	af00      	add	r7, sp, #0
 801fa04:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa08:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fa0c:	6018      	str	r0, [r3, #0]
 801fa0e:	460a      	mov	r2, r1
 801fa10:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa14:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fa18:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801fa1a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa1e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fa22:	781b      	ldrb	r3, [r3, #0]
 801fa24:	b29a      	uxth	r2, r3
 801fa26:	f107 0308 	add.w	r3, r7, #8
 801fa2a:	4619      	mov	r1, r3
 801fa2c:	4854      	ldr	r0, [pc, #336]	@ (801fb80 <I2C_Test_Perform+0x184>)
 801fa2e:	f7e6 f82d 	bl	8005a8c <HAL_I2C_Slave_Receive_DMA>
 801fa32:	4603      	mov	r3, r0
 801fa34:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fa38:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d004      	beq.n	801fa4a <I2C_Test_Perform+0x4e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
 801fa40:	4850      	ldr	r0, [pc, #320]	@ (801fb84 <I2C_Test_Perform+0x188>)
 801fa42:	f000 fe97 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fa46:	23ff      	movs	r3, #255	@ 0xff
 801fa48:	e095      	b.n	801fb76 <I2C_Test_Perform+0x17a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801fa4a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa4e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fa52:	781b      	ldrb	r3, [r3, #0]
 801fa54:	b29b      	uxth	r3, r3
 801fa56:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801fa5a:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801fa5e:	6812      	ldr	r2, [r2, #0]
 801fa60:	2114      	movs	r1, #20
 801fa62:	4849      	ldr	r0, [pc, #292]	@ (801fb88 <I2C_Test_Perform+0x18c>)
 801fa64:	f7e5 fd22 	bl	80054ac <HAL_I2C_Master_Transmit_DMA>
 801fa68:	4603      	mov	r3, r0
 801fa6a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fa6e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d004      	beq.n	801fa80 <I2C_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
 801fa76:	4845      	ldr	r0, [pc, #276]	@ (801fb8c <I2C_Test_Perform+0x190>)
 801fa78:	f000 fe7c 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fa7c:	23ff      	movs	r3, #255	@ 0xff
 801fa7e:	e07a      	b.n	801fb76 <I2C_Test_Perform+0x17a>
	}
	if (osSemaphoreAcquire(i2c1TxSem, 10) != osOK || osSemaphoreAcquire(i2c2RxSem, 10) != osOK)
 801fa80:	4b43      	ldr	r3, [pc, #268]	@ (801fb90 <I2C_Test_Perform+0x194>)
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	210a      	movs	r1, #10
 801fa86:	4618      	mov	r0, r3
 801fa88:	f7ed fb1e 	bl	800d0c8 <osSemaphoreAcquire>
 801fa8c:	4603      	mov	r3, r0
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	d108      	bne.n	801faa4 <I2C_Test_Perform+0xa8>
 801fa92:	4b40      	ldr	r3, [pc, #256]	@ (801fb94 <I2C_Test_Perform+0x198>)
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	210a      	movs	r1, #10
 801fa98:	4618      	mov	r0, r3
 801fa9a:	f7ed fb15 	bl	800d0c8 <osSemaphoreAcquire>
 801fa9e:	4603      	mov	r3, r0
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d004      	beq.n	801faae <I2C_Test_Perform+0xb2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 semaphore timeout\n");
 801faa4:	483c      	ldr	r0, [pc, #240]	@ (801fb98 <I2C_Test_Perform+0x19c>)
 801faa6:	f000 fe65 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801faaa:	23ff      	movs	r3, #255	@ 0xff
 801faac:	e063      	b.n	801fb76 <I2C_Test_Perform+0x17a>
	}

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801faae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fab2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fab6:	781b      	ldrb	r3, [r3, #0]
 801fab8:	b29b      	uxth	r3, r3
 801faba:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801fabe:	2114      	movs	r1, #20
 801fac0:	4831      	ldr	r0, [pc, #196]	@ (801fb88 <I2C_Test_Perform+0x18c>)
 801fac2:	f7e5 fe07 	bl	80056d4 <HAL_I2C_Master_Receive_DMA>
 801fac6:	4603      	mov	r3, r0
 801fac8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801facc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fad0:	2b00      	cmp	r3, #0
 801fad2:	d004      	beq.n	801fade <I2C_Test_Perform+0xe2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
 801fad4:	4831      	ldr	r0, [pc, #196]	@ (801fb9c <I2C_Test_Perform+0x1a0>)
 801fad6:	f000 fe4d 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fada:	23ff      	movs	r3, #255	@ 0xff
 801fadc:	e04b      	b.n	801fb76 <I2C_Test_Perform+0x17a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801fade:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fae2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fae6:	781b      	ldrb	r3, [r3, #0]
 801fae8:	b29a      	uxth	r2, r3
 801faea:	f107 0308 	add.w	r3, r7, #8
 801faee:	4619      	mov	r1, r3
 801faf0:	4823      	ldr	r0, [pc, #140]	@ (801fb80 <I2C_Test_Perform+0x184>)
 801faf2:	f7e5 fedf 	bl	80058b4 <HAL_I2C_Slave_Transmit_DMA>
 801faf6:	4603      	mov	r3, r0
 801faf8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fafc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fb00:	2b00      	cmp	r3, #0
 801fb02:	d004      	beq.n	801fb0e <I2C_Test_Perform+0x112>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
 801fb04:	4826      	ldr	r0, [pc, #152]	@ (801fba0 <I2C_Test_Perform+0x1a4>)
 801fb06:	f000 fe35 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fb0a:	23ff      	movs	r3, #255	@ 0xff
 801fb0c:	e033      	b.n	801fb76 <I2C_Test_Perform+0x17a>
	}
	if (osSemaphoreAcquire(i2c2TxSem, 10) != osOK || osSemaphoreAcquire(i2c1RxSem, 10) != osOK)
 801fb0e:	4b25      	ldr	r3, [pc, #148]	@ (801fba4 <I2C_Test_Perform+0x1a8>)
 801fb10:	681b      	ldr	r3, [r3, #0]
 801fb12:	210a      	movs	r1, #10
 801fb14:	4618      	mov	r0, r3
 801fb16:	f7ed fad7 	bl	800d0c8 <osSemaphoreAcquire>
 801fb1a:	4603      	mov	r3, r0
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d108      	bne.n	801fb32 <I2C_Test_Perform+0x136>
 801fb20:	4b21      	ldr	r3, [pc, #132]	@ (801fba8 <I2C_Test_Perform+0x1ac>)
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	210a      	movs	r1, #10
 801fb26:	4618      	mov	r0, r3
 801fb28:	f7ed face 	bl	800d0c8 <osSemaphoreAcquire>
 801fb2c:	4603      	mov	r3, r0
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d004      	beq.n	801fb3c <I2C_Test_Perform+0x140>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 semaphore timeout\n");
 801fb32:	481e      	ldr	r0, [pc, #120]	@ (801fbac <I2C_Test_Perform+0x1b0>)
 801fb34:	f000 fe1e 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fb38:	23ff      	movs	r3, #255	@ 0xff
 801fb3a:	e01c      	b.n	801fb76 <I2C_Test_Perform+0x17a>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801fb3c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb40:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb44:	781c      	ldrb	r4, [r3, #0]
 801fb46:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801fb4a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb4e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb52:	7819      	ldrb	r1, [r3, #0]
 801fb54:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb58:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801fb5c:	4623      	mov	r3, r4
 801fb5e:	6800      	ldr	r0, [r0, #0]
 801fb60:	f7ff fd16 	bl	801f590 <Match_CRC>
 801fb64:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801fb68:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801fb6c:	2b01      	cmp	r3, #1
 801fb6e:	d101      	bne.n	801fb74 <I2C_Test_Perform+0x178>
 801fb70:	2301      	movs	r3, #1
 801fb72:	e000      	b.n	801fb76 <I2C_Test_Perform+0x17a>

	return TEST_FAILED;
 801fb74:	23ff      	movs	r3, #255	@ 0xff
}
 801fb76:	4618      	mov	r0, r3
 801fb78:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801fb7c:	46bd      	mov	sp, r7
 801fb7e:	bd90      	pop	{r4, r7, pc}
 801fb80:	20000390 	.word	0x20000390
 801fb84:	080260b8 	.word	0x080260b8
 801fb88:	2000033c 	.word	0x2000033c
 801fb8c:	080260d0 	.word	0x080260d0
 801fb90:	2002d7ec 	.word	0x2002d7ec
 801fb94:	2002d7f8 	.word	0x2002d7f8
 801fb98:	080260e8 	.word	0x080260e8
 801fb9c:	08026108 	.word	0x08026108
 801fba0:	08026120 	.word	0x08026120
 801fba4:	2002d7f4 	.word	0x2002d7f4
 801fba8:	2002d7f0 	.word	0x2002d7f0
 801fbac:	08026138 	.word	0x08026138

0801fbb0 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fbb0:	b580      	push	{r7, lr}
 801fbb2:	b082      	sub	sp, #8
 801fbb4:	af00      	add	r7, sp, #0
 801fbb6:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1TxSem);
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	4a06      	ldr	r2, [pc, #24]	@ (801fbd4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 801fbbc:	4293      	cmp	r3, r2
 801fbbe:	d104      	bne.n	801fbca <HAL_I2C_MasterTxCpltCallback+0x1a>
 801fbc0:	4b05      	ldr	r3, [pc, #20]	@ (801fbd8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	4618      	mov	r0, r3
 801fbc6:	f7ed fae5 	bl	800d194 <osSemaphoreRelease>
}
 801fbca:	bf00      	nop
 801fbcc:	3708      	adds	r7, #8
 801fbce:	46bd      	mov	sp, r7
 801fbd0:	bd80      	pop	{r7, pc}
 801fbd2:	bf00      	nop
 801fbd4:	2000033c 	.word	0x2000033c
 801fbd8:	2002d7ec 	.word	0x2002d7ec

0801fbdc <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fbdc:	b580      	push	{r7, lr}
 801fbde:	b082      	sub	sp, #8
 801fbe0:	af00      	add	r7, sp, #0
 801fbe2:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1RxSem);
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	4a06      	ldr	r2, [pc, #24]	@ (801fc00 <HAL_I2C_MasterRxCpltCallback+0x24>)
 801fbe8:	4293      	cmp	r3, r2
 801fbea:	d104      	bne.n	801fbf6 <HAL_I2C_MasterRxCpltCallback+0x1a>
 801fbec:	4b05      	ldr	r3, [pc, #20]	@ (801fc04 <HAL_I2C_MasterRxCpltCallback+0x28>)
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	4618      	mov	r0, r3
 801fbf2:	f7ed facf 	bl	800d194 <osSemaphoreRelease>
}
 801fbf6:	bf00      	nop
 801fbf8:	3708      	adds	r7, #8
 801fbfa:	46bd      	mov	sp, r7
 801fbfc:	bd80      	pop	{r7, pc}
 801fbfe:	bf00      	nop
 801fc00:	2000033c 	.word	0x2000033c
 801fc04:	2002d7f0 	.word	0x2002d7f0

0801fc08 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fc08:	b580      	push	{r7, lr}
 801fc0a:	b082      	sub	sp, #8
 801fc0c:	af00      	add	r7, sp, #0
 801fc0e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2TxSem);
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	4a06      	ldr	r2, [pc, #24]	@ (801fc2c <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801fc14:	4293      	cmp	r3, r2
 801fc16:	d104      	bne.n	801fc22 <HAL_I2C_SlaveTxCpltCallback+0x1a>
 801fc18:	4b05      	ldr	r3, [pc, #20]	@ (801fc30 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	4618      	mov	r0, r3
 801fc1e:	f7ed fab9 	bl	800d194 <osSemaphoreRelease>
}
 801fc22:	bf00      	nop
 801fc24:	3708      	adds	r7, #8
 801fc26:	46bd      	mov	sp, r7
 801fc28:	bd80      	pop	{r7, pc}
 801fc2a:	bf00      	nop
 801fc2c:	20000390 	.word	0x20000390
 801fc30:	2002d7f4 	.word	0x2002d7f4

0801fc34 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801fc34:	b580      	push	{r7, lr}
 801fc36:	b082      	sub	sp, #8
 801fc38:	af00      	add	r7, sp, #0
 801fc3a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2RxSem);
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	4a06      	ldr	r2, [pc, #24]	@ (801fc58 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801fc40:	4293      	cmp	r3, r2
 801fc42:	d104      	bne.n	801fc4e <HAL_I2C_SlaveRxCpltCallback+0x1a>
 801fc44:	4b05      	ldr	r3, [pc, #20]	@ (801fc5c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	4618      	mov	r0, r3
 801fc4a:	f7ed faa3 	bl	800d194 <osSemaphoreRelease>
}
 801fc4e:	bf00      	nop
 801fc50:	3708      	adds	r7, #8
 801fc52:	46bd      	mov	sp, r7
 801fc54:	bd80      	pop	{r7, pc}
 801fc56:	bf00      	nop
 801fc58:	20000390 	.word	0x20000390
 801fc5c:	2002d7f8 	.word	0x2002d7f8

0801fc60 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 801fc60:	b580      	push	{r7, lr}
 801fc62:	b0ca      	sub	sp, #296	@ 0x128
 801fc64:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	spi1TxSem = osSemaphoreNew(1, 0, NULL);
 801fc66:	2200      	movs	r2, #0
 801fc68:	2100      	movs	r1, #0
 801fc6a:	2001      	movs	r0, #1
 801fc6c:	f7ed f990 	bl	800cf90 <osSemaphoreNew>
 801fc70:	4603      	mov	r3, r0
 801fc72:	4a45      	ldr	r2, [pc, #276]	@ (801fd88 <SpiTestTask+0x128>)
 801fc74:	6013      	str	r3, [r2, #0]
	spi1RxSem = osSemaphoreNew(1, 0, NULL);
 801fc76:	2200      	movs	r2, #0
 801fc78:	2100      	movs	r1, #0
 801fc7a:	2001      	movs	r0, #1
 801fc7c:	f7ed f988 	bl	800cf90 <osSemaphoreNew>
 801fc80:	4603      	mov	r3, r0
 801fc82:	4a42      	ldr	r2, [pc, #264]	@ (801fd8c <SpiTestTask+0x12c>)
 801fc84:	6013      	str	r3, [r2, #0]
	spi4TxSem = osSemaphoreNew(1, 0, NULL);
 801fc86:	2200      	movs	r2, #0
 801fc88:	2100      	movs	r1, #0
 801fc8a:	2001      	movs	r0, #1
 801fc8c:	f7ed f980 	bl	800cf90 <osSemaphoreNew>
 801fc90:	4603      	mov	r3, r0
 801fc92:	4a3f      	ldr	r2, [pc, #252]	@ (801fd90 <SpiTestTask+0x130>)
 801fc94:	6013      	str	r3, [r2, #0]
	spi4RxSem = osSemaphoreNew(1, 0, NULL);
 801fc96:	2200      	movs	r2, #0
 801fc98:	2100      	movs	r1, #0
 801fc9a:	2001      	movs	r0, #1
 801fc9c:	f7ed f978 	bl	800cf90 <osSemaphoreNew>
 801fca0:	4603      	mov	r3, r0
 801fca2:	4a3c      	ldr	r2, [pc, #240]	@ (801fd94 <SpiTestTask+0x134>)
 801fca4:	6013      	str	r3, [r2, #0]

	while (1)
	{
		printf("spi waiting for messages\n");
 801fca6:	483c      	ldr	r0, [pc, #240]	@ (801fd98 <SpiTestTask+0x138>)
 801fca8:	f000 fd64 	bl	8020774 <puts>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fcac:	4b3b      	ldr	r3, [pc, #236]	@ (801fd9c <SpiTestTask+0x13c>)
 801fcae:	6818      	ldr	r0, [r3, #0]
 801fcb0:	f107 0114 	add.w	r1, r7, #20
 801fcb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fcb8:	2200      	movs	r2, #0
 801fcba:	f7ed fbf3 	bl	800d4a4 <osMessageQueueGet>
 801fcbe:	4603      	mov	r3, r0
 801fcc0:	2b00      	cmp	r3, #0
 801fcc2:	d15d      	bne.n	801fd80 <SpiTestTask+0x120>
		{
			printf("spi received test ID: %lu\n", test_data.test_id);
 801fcc4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fcc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fccc:	689b      	ldr	r3, [r3, #8]
 801fcce:	4619      	mov	r1, r3
 801fcd0:	4833      	ldr	r0, [pc, #204]	@ (801fda0 <SpiTestTask+0x140>)
 801fcd2:	f000 fcdf 	bl	8020694 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fcd6:	2300      	movs	r3, #0
 801fcd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fcdc:	e017      	b.n	801fd0e <SpiTestTask+0xae>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801fcde:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fce2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fce6:	7b5a      	ldrb	r2, [r3, #13]
 801fce8:	f107 0314 	add.w	r3, r7, #20
 801fcec:	330e      	adds	r3, #14
 801fcee:	4611      	mov	r1, r2
 801fcf0:	4618      	mov	r0, r3
 801fcf2:	f000 f859 	bl	801fda8 <SPI_Test_Perform>
 801fcf6:	4603      	mov	r3, r0
 801fcf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fcfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd00:	2bff      	cmp	r3, #255	@ 0xff
 801fd02:	d00e      	beq.n	801fd22 <SpiTestTask+0xc2>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fd04:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fd08:	3301      	adds	r3, #1
 801fd0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fd0e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd12:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fd16:	7b1b      	ldrb	r3, [r3, #12]
 801fd18:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fd1c:	429a      	cmp	r2, r3
 801fd1e:	d3de      	bcc.n	801fcde <SpiTestTask+0x7e>
 801fd20:	e000      	b.n	801fd24 <SpiTestTask+0xc4>
					break;
 801fd22:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fd24:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd28:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fd2c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fd30:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fd34:	6812      	ldr	r2, [r2, #0]
 801fd36:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fd38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd3c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fd40:	889a      	ldrh	r2, [r3, #4]
 801fd42:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd46:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fd4a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fd4c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fd54:	689a      	ldr	r2, [r3, #8]
 801fd56:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd5a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fd5e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fd60:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fd64:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fd68:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fd6c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fd6e:	4b0d      	ldr	r3, [pc, #52]	@ (801fda4 <SpiTestTask+0x144>)
 801fd70:	6818      	ldr	r0, [r3, #0]
 801fd72:	1d39      	adds	r1, r7, #4
 801fd74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fd78:	2200      	movs	r2, #0
 801fd7a:	f7ed fb1f 	bl	800d3bc <osMessageQueuePut>
 801fd7e:	e792      	b.n	801fca6 <SpiTestTask+0x46>
		}
		else osDelay(1);
 801fd80:	2001      	movs	r0, #1
 801fd82:	f7ec ff8f 	bl	800cca4 <osDelay>
		printf("spi waiting for messages\n");
 801fd86:	e78e      	b.n	801fca6 <SpiTestTask+0x46>
 801fd88:	2002d7fc 	.word	0x2002d7fc
 801fd8c:	2002d800 	.word	0x2002d800
 801fd90:	2002d804 	.word	0x2002d804
 801fd94:	2002d808 	.word	0x2002d808
 801fd98:	08026158 	.word	0x08026158
 801fd9c:	20000330 	.word	0x20000330
 801fda0:	08026174 	.word	0x08026174
 801fda4:	20000324 	.word	0x20000324

0801fda8 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801fda8:	b590      	push	{r4, r7, lr}
 801fdaa:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801fdae:	af00      	add	r7, sp, #0
 801fdb0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fdb4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fdb8:	6018      	str	r0, [r3, #0]
 801fdba:	460a      	mov	r2, r1
 801fdbc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fdc0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fdc4:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 801fdc6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fdca:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fdce:	781b      	ldrb	r3, [r3, #0]
 801fdd0:	b29a      	uxth	r2, r3
 801fdd2:	f107 0308 	add.w	r3, r7, #8
 801fdd6:	4619      	mov	r1, r3
 801fdd8:	4854      	ldr	r0, [pc, #336]	@ (801ff2c <SPI_Test_Perform+0x184>)
 801fdda:	f7e8 ffa5 	bl	8008d28 <HAL_SPI_Receive_DMA>
 801fdde:	4603      	mov	r3, r0
 801fde0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fde4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d004      	beq.n	801fdf6 <SPI_Test_Perform+0x4e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
 801fdec:	4850      	ldr	r0, [pc, #320]	@ (801ff30 <SPI_Test_Perform+0x188>)
 801fdee:	f000 fcc1 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fdf2:	23ff      	movs	r3, #255	@ 0xff
 801fdf4:	e094      	b.n	801ff20 <SPI_Test_Perform+0x178>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 801fdf6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fdfa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fdfe:	781b      	ldrb	r3, [r3, #0]
 801fe00:	b29a      	uxth	r2, r3
 801fe02:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe06:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fe0a:	6819      	ldr	r1, [r3, #0]
 801fe0c:	4849      	ldr	r0, [pc, #292]	@ (801ff34 <SPI_Test_Perform+0x18c>)
 801fe0e:	f7e8 fe9d 	bl	8008b4c <HAL_SPI_Transmit_DMA>
 801fe12:	4603      	mov	r3, r0
 801fe14:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fe18:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	d004      	beq.n	801fe2a <SPI_Test_Perform+0x82>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
 801fe20:	4845      	ldr	r0, [pc, #276]	@ (801ff38 <SPI_Test_Perform+0x190>)
 801fe22:	f000 fca7 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fe26:	23ff      	movs	r3, #255	@ 0xff
 801fe28:	e07a      	b.n	801ff20 <SPI_Test_Perform+0x178>
	}
	if (osSemaphoreAcquire(spi1TxSem, 10) != osOK || osSemaphoreAcquire(spi4RxSem, 10) != osOK)
 801fe2a:	4b44      	ldr	r3, [pc, #272]	@ (801ff3c <SPI_Test_Perform+0x194>)
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	210a      	movs	r1, #10
 801fe30:	4618      	mov	r0, r3
 801fe32:	f7ed f949 	bl	800d0c8 <osSemaphoreAcquire>
 801fe36:	4603      	mov	r3, r0
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	d108      	bne.n	801fe4e <SPI_Test_Perform+0xa6>
 801fe3c:	4b40      	ldr	r3, [pc, #256]	@ (801ff40 <SPI_Test_Perform+0x198>)
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	210a      	movs	r1, #10
 801fe42:	4618      	mov	r0, r3
 801fe44:	f7ed f940 	bl	800d0c8 <osSemaphoreAcquire>
 801fe48:	4603      	mov	r3, r0
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	d004      	beq.n	801fe58 <SPI_Test_Perform+0xb0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 semaphore timeout\n");
 801fe4e:	483d      	ldr	r0, [pc, #244]	@ (801ff44 <SPI_Test_Perform+0x19c>)
 801fe50:	f000 fc90 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fe54:	23ff      	movs	r3, #255	@ 0xff
 801fe56:	e063      	b.n	801ff20 <SPI_Test_Perform+0x178>
	}

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 801fe58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe5c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fe60:	781b      	ldrb	r3, [r3, #0]
 801fe62:	b29a      	uxth	r2, r3
 801fe64:	f107 0308 	add.w	r3, r7, #8
 801fe68:	4619      	mov	r1, r3
 801fe6a:	4830      	ldr	r0, [pc, #192]	@ (801ff2c <SPI_Test_Perform+0x184>)
 801fe6c:	f7e8 fe6e 	bl	8008b4c <HAL_SPI_Transmit_DMA>
 801fe70:	4603      	mov	r3, r0
 801fe72:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fe76:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d004      	beq.n	801fe88 <SPI_Test_Perform+0xe0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
 801fe7e:	4832      	ldr	r0, [pc, #200]	@ (801ff48 <SPI_Test_Perform+0x1a0>)
 801fe80:	f000 fc78 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fe84:	23ff      	movs	r3, #255	@ 0xff
 801fe86:	e04b      	b.n	801ff20 <SPI_Test_Perform+0x178>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 801fe88:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fe8c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fe90:	781b      	ldrb	r3, [r3, #0]
 801fe92:	b29a      	uxth	r2, r3
 801fe94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801fe98:	4619      	mov	r1, r3
 801fe9a:	4826      	ldr	r0, [pc, #152]	@ (801ff34 <SPI_Test_Perform+0x18c>)
 801fe9c:	f7e8 ff44 	bl	8008d28 <HAL_SPI_Receive_DMA>
 801fea0:	4603      	mov	r3, r0
 801fea2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fea6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d004      	beq.n	801feb8 <SPI_Test_Perform+0x110>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
 801feae:	4827      	ldr	r0, [pc, #156]	@ (801ff4c <SPI_Test_Perform+0x1a4>)
 801feb0:	f000 fc60 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801feb4:	23ff      	movs	r3, #255	@ 0xff
 801feb6:	e033      	b.n	801ff20 <SPI_Test_Perform+0x178>
	}
	if (osSemaphoreAcquire(spi4TxSem, 10) != osOK || osSemaphoreAcquire(spi1RxSem, 10) != osOK)
 801feb8:	4b25      	ldr	r3, [pc, #148]	@ (801ff50 <SPI_Test_Perform+0x1a8>)
 801feba:	681b      	ldr	r3, [r3, #0]
 801febc:	210a      	movs	r1, #10
 801febe:	4618      	mov	r0, r3
 801fec0:	f7ed f902 	bl	800d0c8 <osSemaphoreAcquire>
 801fec4:	4603      	mov	r3, r0
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	d108      	bne.n	801fedc <SPI_Test_Perform+0x134>
 801feca:	4b22      	ldr	r3, [pc, #136]	@ (801ff54 <SPI_Test_Perform+0x1ac>)
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	210a      	movs	r1, #10
 801fed0:	4618      	mov	r0, r3
 801fed2:	f7ed f8f9 	bl	800d0c8 <osSemaphoreAcquire>
 801fed6:	4603      	mov	r3, r0
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d004      	beq.n	801fee6 <SPI_Test_Perform+0x13e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 semaphore timeout\n");
 801fedc:	481e      	ldr	r0, [pc, #120]	@ (801ff58 <SPI_Test_Perform+0x1b0>)
 801fede:	f000 fc49 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 801fee2:	23ff      	movs	r3, #255	@ 0xff
 801fee4:	e01c      	b.n	801ff20 <SPI_Test_Perform+0x178>
	}

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 801fee6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801feea:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801feee:	781c      	ldrb	r4, [r3, #0]
 801fef0:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801fef4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fef8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fefc:	7819      	ldrb	r1, [r3, #0]
 801fefe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff02:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801ff06:	4623      	mov	r3, r4
 801ff08:	6800      	ldr	r0, [r0, #0]
 801ff0a:	f7ff fb41 	bl	801f590 <Match_CRC>
 801ff0e:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801ff12:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801ff16:	2b01      	cmp	r3, #1
 801ff18:	d101      	bne.n	801ff1e <SPI_Test_Perform+0x176>
 801ff1a:	2301      	movs	r3, #1
 801ff1c:	e000      	b.n	801ff20 <SPI_Test_Perform+0x178>

	return TEST_FAILED;
 801ff1e:	23ff      	movs	r3, #255	@ 0xff
}
 801ff20:	4618      	mov	r0, r3
 801ff22:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801ff26:	46bd      	mov	sp, r7
 801ff28:	bd90      	pop	{r4, r7, pc}
 801ff2a:	bf00      	nop
 801ff2c:	200005c8 	.word	0x200005c8
 801ff30:	08026190 	.word	0x08026190
 801ff34:	20000564 	.word	0x20000564
 801ff38:	080261a8 	.word	0x080261a8
 801ff3c:	2002d7fc 	.word	0x2002d7fc
 801ff40:	2002d808 	.word	0x2002d808
 801ff44:	080261c0 	.word	0x080261c0
 801ff48:	080261e0 	.word	0x080261e0
 801ff4c:	080261f8 	.word	0x080261f8
 801ff50:	2002d804 	.word	0x2002d804
 801ff54:	2002d800 	.word	0x2002d800
 801ff58:	08026210 	.word	0x08026210

0801ff5c <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801ff5c:	b580      	push	{r7, lr}
 801ff5e:	b082      	sub	sp, #8
 801ff60:	af00      	add	r7, sp, #0
 801ff62:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1TxSem);
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	4a0a      	ldr	r2, [pc, #40]	@ (801ff90 <HAL_SPI_TxCpltCallback+0x34>)
 801ff68:	4293      	cmp	r3, r2
 801ff6a:	d104      	bne.n	801ff76 <HAL_SPI_TxCpltCallback+0x1a>
 801ff6c:	4b09      	ldr	r3, [pc, #36]	@ (801ff94 <HAL_SPI_TxCpltCallback+0x38>)
 801ff6e:	681b      	ldr	r3, [r3, #0]
 801ff70:	4618      	mov	r0, r3
 801ff72:	f7ed f90f 	bl	800d194 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4TxSem);
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	4a07      	ldr	r2, [pc, #28]	@ (801ff98 <HAL_SPI_TxCpltCallback+0x3c>)
 801ff7a:	4293      	cmp	r3, r2
 801ff7c:	d104      	bne.n	801ff88 <HAL_SPI_TxCpltCallback+0x2c>
 801ff7e:	4b07      	ldr	r3, [pc, #28]	@ (801ff9c <HAL_SPI_TxCpltCallback+0x40>)
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	4618      	mov	r0, r3
 801ff84:	f7ed f906 	bl	800d194 <osSemaphoreRelease>
}
 801ff88:	bf00      	nop
 801ff8a:	3708      	adds	r7, #8
 801ff8c:	46bd      	mov	sp, r7
 801ff8e:	bd80      	pop	{r7, pc}
 801ff90:	20000564 	.word	0x20000564
 801ff94:	2002d7fc 	.word	0x2002d7fc
 801ff98:	200005c8 	.word	0x200005c8
 801ff9c:	2002d804 	.word	0x2002d804

0801ffa0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801ffa0:	b580      	push	{r7, lr}
 801ffa2:	b082      	sub	sp, #8
 801ffa4:	af00      	add	r7, sp, #0
 801ffa6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1RxSem);
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	4a0a      	ldr	r2, [pc, #40]	@ (801ffd4 <HAL_SPI_RxCpltCallback+0x34>)
 801ffac:	4293      	cmp	r3, r2
 801ffae:	d104      	bne.n	801ffba <HAL_SPI_RxCpltCallback+0x1a>
 801ffb0:	4b09      	ldr	r3, [pc, #36]	@ (801ffd8 <HAL_SPI_RxCpltCallback+0x38>)
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	4618      	mov	r0, r3
 801ffb6:	f7ed f8ed 	bl	800d194 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4RxSem);
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	4a07      	ldr	r2, [pc, #28]	@ (801ffdc <HAL_SPI_RxCpltCallback+0x3c>)
 801ffbe:	4293      	cmp	r3, r2
 801ffc0:	d104      	bne.n	801ffcc <HAL_SPI_RxCpltCallback+0x2c>
 801ffc2:	4b07      	ldr	r3, [pc, #28]	@ (801ffe0 <HAL_SPI_RxCpltCallback+0x40>)
 801ffc4:	681b      	ldr	r3, [r3, #0]
 801ffc6:	4618      	mov	r0, r3
 801ffc8:	f7ed f8e4 	bl	800d194 <osSemaphoreRelease>
}
 801ffcc:	bf00      	nop
 801ffce:	3708      	adds	r7, #8
 801ffd0:	46bd      	mov	sp, r7
 801ffd2:	bd80      	pop	{r7, pc}
 801ffd4:	20000564 	.word	0x20000564
 801ffd8:	2002d800 	.word	0x2002d800
 801ffdc:	200005c8 	.word	0x200005c8
 801ffe0:	2002d808 	.word	0x2002d808

0801ffe4 <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 801ffe4:	b580      	push	{r7, lr}
 801ffe6:	b0ca      	sub	sp, #296	@ 0x128
 801ffe8:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("timer waiting for messages\n");
 801ffea:	4833      	ldr	r0, [pc, #204]	@ (80200b8 <TimTestTask+0xd4>)
 801ffec:	f000 fbc2 	bl	8020774 <puts>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fff0:	4b32      	ldr	r3, [pc, #200]	@ (80200bc <TimTestTask+0xd8>)
 801fff2:	6818      	ldr	r0, [r3, #0]
 801fff4:	f107 0114 	add.w	r1, r7, #20
 801fff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fffc:	2200      	movs	r2, #0
 801fffe:	f7ed fa51 	bl	800d4a4 <osMessageQueueGet>
 8020002:	4603      	mov	r3, r0
 8020004:	2b00      	cmp	r3, #0
 8020006:	d153      	bne.n	80200b0 <TimTestTask+0xcc>
		{
			printf("timer received test ID: %lu\n", test_data.test_id);
 8020008:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802000c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020010:	689b      	ldr	r3, [r3, #8]
 8020012:	4619      	mov	r1, r3
 8020014:	482a      	ldr	r0, [pc, #168]	@ (80200c0 <TimTestTask+0xdc>)
 8020016:	f000 fb3d 	bl	8020694 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 802001a:	2300      	movs	r3, #0
 802001c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020020:	e00d      	b.n	802003e <TimTestTask+0x5a>
			{
				result = TIM_Test_Perform();
 8020022:	f000 f851 	bl	80200c8 <TIM_Test_Perform>
 8020026:	4603      	mov	r3, r0
 8020028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 802002c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020030:	2bff      	cmp	r3, #255	@ 0xff
 8020032:	d00e      	beq.n	8020052 <TimTestTask+0x6e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020034:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020038:	3301      	adds	r3, #1
 802003a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 802003e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020042:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020046:	7b1b      	ldrb	r3, [r3, #12]
 8020048:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 802004c:	429a      	cmp	r2, r3
 802004e:	d3e8      	bcc.n	8020022 <TimTestTask+0x3e>
 8020050:	e000      	b.n	8020054 <TimTestTask+0x70>
					break;
 8020052:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020054:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020058:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802005c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020060:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020064:	6812      	ldr	r2, [r2, #0]
 8020066:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020068:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802006c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020070:	889a      	ldrh	r2, [r3, #4]
 8020072:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020076:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802007a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 802007c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020080:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020084:	689a      	ldr	r2, [r3, #8]
 8020086:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802008a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802008e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020090:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020094:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020098:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 802009c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 802009e:	4b09      	ldr	r3, [pc, #36]	@ (80200c4 <TimTestTask+0xe0>)
 80200a0:	6818      	ldr	r0, [r3, #0]
 80200a2:	1d39      	adds	r1, r7, #4
 80200a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80200a8:	2200      	movs	r2, #0
 80200aa:	f7ed f987 	bl	800d3bc <osMessageQueuePut>
 80200ae:	e79c      	b.n	801ffea <TimTestTask+0x6>
		}
		else osDelay(1);
 80200b0:	2001      	movs	r0, #1
 80200b2:	f7ec fdf7 	bl	800cca4 <osDelay>
		printf("timer waiting for messages\n");
 80200b6:	e798      	b.n	801ffea <TimTestTask+0x6>
 80200b8:	08026230 	.word	0x08026230
 80200bc:	20000338 	.word	0x20000338
 80200c0:	0802624c 	.word	0x0802624c
 80200c4:	20000324 	.word	0x20000324

080200c8 <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 80200c8:	b580      	push	{r7, lr}
 80200ca:	b082      	sub	sp, #8
 80200cc:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing timer test\n");
 80200ce:	4834      	ldr	r0, [pc, #208]	@ (80201a0 <TIM_Test_Perform+0xd8>)
 80200d0:	f000 fb50 	bl	8020774 <puts>
#endif

	tim6_count = 0;
 80200d4:	4b33      	ldr	r3, [pc, #204]	@ (80201a4 <TIM_Test_Perform+0xdc>)
 80200d6:	2200      	movs	r2, #0
 80200d8:	601a      	str	r2, [r3, #0]
	test_running = 1;
 80200da:	4b33      	ldr	r3, [pc, #204]	@ (80201a8 <TIM_Test_Perform+0xe0>)
 80200dc:	2201      	movs	r2, #1
 80200de:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 80200e0:	4832      	ldr	r0, [pc, #200]	@ (80201ac <TIM_Test_Perform+0xe4>)
 80200e2:	f7e9 fda7 	bl	8009c34 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 80200e6:	4832      	ldr	r0, [pc, #200]	@ (80201b0 <TIM_Test_Perform+0xe8>)
 80200e8:	f7e9 fda4 	bl	8009c34 <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 80200ec:	4b2f      	ldr	r3, [pc, #188]	@ (80201ac <TIM_Test_Perform+0xe4>)
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	3324      	adds	r3, #36	@ 0x24
 80200f2:	4619      	mov	r1, r3
 80200f4:	4a2f      	ldr	r2, [pc, #188]	@ (80201b4 <TIM_Test_Perform+0xec>)
 80200f6:	230a      	movs	r3, #10
 80200f8:	482f      	ldr	r0, [pc, #188]	@ (80201b8 <TIM_Test_Perform+0xf0>)
 80200fa:	f7e3 f9a3 	bl	8003444 <HAL_DMA_Start_IT>
 80200fe:	4603      	mov	r3, r0
 8020100:	2b00      	cmp	r3, #0
 8020102:	d004      	beq.n	802010e <TIM_Test_Perform+0x46>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
 8020104:	482d      	ldr	r0, [pc, #180]	@ (80201bc <TIM_Test_Perform+0xf4>)
 8020106:	f000 fb35 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 802010a:	23ff      	movs	r3, #255	@ 0xff
 802010c:	e043      	b.n	8020196 <TIM_Test_Perform+0xce>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 802010e:	4b28      	ldr	r3, [pc, #160]	@ (80201b0 <TIM_Test_Perform+0xe8>)
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	68da      	ldr	r2, [r3, #12]
 8020114:	4b26      	ldr	r3, [pc, #152]	@ (80201b0 <TIM_Test_Perform+0xe8>)
 8020116:	681b      	ldr	r3, [r3, #0]
 8020118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802011c:	60da      	str	r2, [r3, #12]

	while (test_running) osDelay(1);
 802011e:	e002      	b.n	8020126 <TIM_Test_Perform+0x5e>
 8020120:	2001      	movs	r0, #1
 8020122:	f7ec fdbf 	bl	800cca4 <osDelay>
 8020126:	4b20      	ldr	r3, [pc, #128]	@ (80201a8 <TIM_Test_Perform+0xe0>)
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	2b00      	cmp	r3, #0
 802012c:	d1f8      	bne.n	8020120 <TIM_Test_Perform+0x58>

	HAL_TIM_Base_Stop(&htim6);
 802012e:	4820      	ldr	r0, [pc, #128]	@ (80201b0 <TIM_Test_Perform+0xe8>)
 8020130:	f7e9 fdf0 	bl	8009d14 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 8020134:	481d      	ldr	r0, [pc, #116]	@ (80201ac <TIM_Test_Perform+0xe4>)
 8020136:	f7e9 fded 	bl	8009d14 <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG
	printf("Sampling complete\n");
 802013a:	4821      	ldr	r0, [pc, #132]	@ (80201c0 <TIM_Test_Perform+0xf8>)
 802013c:	f000 fb1a 	bl	8020774 <puts>
#endif
	for (int i = 1; i < N_SAMPLES; i++)
 8020140:	2301      	movs	r3, #1
 8020142:	607b      	str	r3, [r7, #4]
 8020144:	e023      	b.n	802018e <TIM_Test_Perform+0xc6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	1e59      	subs	r1, r3, #1
			   tim2_samples[i] - tim2_samples[i-1]);
 802014a:	4a1a      	ldr	r2, [pc, #104]	@ (80201b4 <TIM_Test_Perform+0xec>)
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	3b01      	subs	r3, #1
 8020156:	4817      	ldr	r0, [pc, #92]	@ (80201b4 <TIM_Test_Perform+0xec>)
 8020158:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
 802015c:	1ad3      	subs	r3, r2, r3
 802015e:	460a      	mov	r2, r1
 8020160:	6879      	ldr	r1, [r7, #4]
 8020162:	4818      	ldr	r0, [pc, #96]	@ (80201c4 <TIM_Test_Perform+0xfc>)
 8020164:	f000 fa96 	bl	8020694 <iprintf>
#endif

		if (tim2_samples[i] - tim2_samples[i-1] != EXPECTED_INTERVAL)
 8020168:	4a12      	ldr	r2, [pc, #72]	@ (80201b4 <TIM_Test_Perform+0xec>)
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	3b01      	subs	r3, #1
 8020174:	490f      	ldr	r1, [pc, #60]	@ (80201b4 <TIM_Test_Perform+0xec>)
 8020176:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802017a:	1ad3      	subs	r3, r2, r3
 802017c:	f24d 22f0 	movw	r2, #54000	@ 0xd2f0
 8020180:	4293      	cmp	r3, r2
 8020182:	d001      	beq.n	8020188 <TIM_Test_Perform+0xc0>
			return TEST_FAILED;
 8020184:	23ff      	movs	r3, #255	@ 0xff
 8020186:	e006      	b.n	8020196 <TIM_Test_Perform+0xce>
	for (int i = 1; i < N_SAMPLES; i++)
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	3301      	adds	r3, #1
 802018c:	607b      	str	r3, [r7, #4]
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	2b09      	cmp	r3, #9
 8020192:	ddd8      	ble.n	8020146 <TIM_Test_Perform+0x7e>
	}

	return TEST_SUCCESS;
 8020194:	2301      	movs	r3, #1
}
 8020196:	4618      	mov	r0, r3
 8020198:	3708      	adds	r7, #8
 802019a:	46bd      	mov	sp, r7
 802019c:	bd80      	pop	{r7, pc}
 802019e:	bf00      	nop
 80201a0:	0802626c 	.word	0x0802626c
 80201a4:	2002d810 	.word	0x2002d810
 80201a8:	2002d80c 	.word	0x2002d80c
 80201ac:	200007fc 	.word	0x200007fc
 80201b0:	20000848 	.word	0x20000848
 80201b4:	2002d814 	.word	0x2002d814
 80201b8:	20000894 	.word	0x20000894
 80201bc:	08026284 	.word	0x08026284
 80201c0:	080262a0 	.word	0x080262a0
 80201c4:	080262b4 	.word	0x080262b4

080201c8 <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 80201c8:	b580      	push	{r7, lr}
 80201ca:	b0ca      	sub	sp, #296	@ 0x128
 80201cc:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	uart4RxSem = osSemaphoreNew(1, 0, NULL);
 80201ce:	2200      	movs	r2, #0
 80201d0:	2100      	movs	r1, #0
 80201d2:	2001      	movs	r0, #1
 80201d4:	f7ec fedc 	bl	800cf90 <osSemaphoreNew>
 80201d8:	4603      	mov	r3, r0
 80201da:	4a3d      	ldr	r2, [pc, #244]	@ (80202d0 <UartTestTask+0x108>)
 80201dc:	6013      	str	r3, [r2, #0]
	uart5RxSem = osSemaphoreNew(1, 0, NULL);
 80201de:	2200      	movs	r2, #0
 80201e0:	2100      	movs	r1, #0
 80201e2:	2001      	movs	r0, #1
 80201e4:	f7ec fed4 	bl	800cf90 <osSemaphoreNew>
 80201e8:	4603      	mov	r3, r0
 80201ea:	4a3a      	ldr	r2, [pc, #232]	@ (80202d4 <UartTestTask+0x10c>)
 80201ec:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80201ee:	4b3a      	ldr	r3, [pc, #232]	@ (80202d8 <UartTestTask+0x110>)
 80201f0:	6818      	ldr	r0, [r3, #0]
 80201f2:	f107 0114 	add.w	r1, r7, #20
 80201f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80201fa:	2200      	movs	r2, #0
 80201fc:	f7ed f952 	bl	800d4a4 <osMessageQueueGet>
 8020200:	4603      	mov	r3, r0
 8020202:	2b00      	cmp	r3, #0
 8020204:	d1f3      	bne.n	80201ee <UartTestTask+0x26>
		{
			printf("uart received test ID: %lu\n", test_data.test_id);
 8020206:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802020a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802020e:	689b      	ldr	r3, [r3, #8]
 8020210:	4619      	mov	r1, r3
 8020212:	4832      	ldr	r0, [pc, #200]	@ (80202dc <UartTestTask+0x114>)
 8020214:	f000 fa3e 	bl	8020694 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020218:	2300      	movs	r3, #0
 802021a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 802021e:	e017      	b.n	8020250 <UartTestTask+0x88>
			{
                result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 8020220:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020224:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020228:	7b5a      	ldrb	r2, [r3, #13]
 802022a:	f107 0314 	add.w	r3, r7, #20
 802022e:	330e      	adds	r3, #14
 8020230:	4611      	mov	r1, r2
 8020232:	4618      	mov	r0, r3
 8020234:	f000 f858 	bl	80202e8 <UART_Test_Perform>
 8020238:	4603      	mov	r3, r0
 802023a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 802023e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020242:	2bff      	cmp	r3, #255	@ 0xff
 8020244:	d00e      	beq.n	8020264 <UartTestTask+0x9c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020246:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 802024a:	3301      	adds	r3, #1
 802024c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020250:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020254:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020258:	7b1b      	ldrb	r3, [r3, #12]
 802025a:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 802025e:	429a      	cmp	r2, r3
 8020260:	d3de      	bcc.n	8020220 <UartTestTask+0x58>
 8020262:	e000      	b.n	8020266 <UartTestTask+0x9e>
					break;
 8020264:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020266:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802026a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802026e:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020272:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020276:	6812      	ldr	r2, [r2, #0]
 8020278:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 802027a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802027e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020282:	889a      	ldrh	r2, [r3, #4]
 8020284:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020288:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802028c:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 802028e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020292:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020296:	689a      	ldr	r2, [r3, #8]
 8020298:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802029c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80202a0:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 80202a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80202aa:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80202ae:	731a      	strb	r2, [r3, #12]

			// send result to queue
			if (osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever) != osOK)
 80202b0:	4b0b      	ldr	r3, [pc, #44]	@ (80202e0 <UartTestTask+0x118>)
 80202b2:	6818      	ldr	r0, [r3, #0]
 80202b4:	1d39      	adds	r1, r7, #4
 80202b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80202ba:	2200      	movs	r2, #0
 80202bc:	f7ed f87e 	bl	800d3bc <osMessageQueuePut>
 80202c0:	4603      	mov	r3, r0
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d093      	beq.n	80201ee <UartTestTask+0x26>
			{
				printf("outMsg q full!\n");
 80202c6:	4807      	ldr	r0, [pc, #28]	@ (80202e4 <UartTestTask+0x11c>)
 80202c8:	f000 fa54 	bl	8020774 <puts>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80202cc:	e78f      	b.n	80201ee <UartTestTask+0x26>
 80202ce:	bf00      	nop
 80202d0:	2002d83c 	.word	0x2002d83c
 80202d4:	2002d840 	.word	0x2002d840
 80202d8:	20000328 	.word	0x20000328
 80202dc:	080262d4 	.word	0x080262d4
 80202e0:	20000324 	.word	0x20000324
 80202e4:	080262f0 	.word	0x080262f0

080202e8 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 80202e8:	b590      	push	{r4, r7, lr}
 80202ea:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 80202ee:	af00      	add	r7, sp, #0
 80202f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80202f4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80202f8:	6018      	str	r0, [r3, #0]
 80202fa:	460a      	mov	r2, r1
 80202fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020300:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020304:	701a      	strb	r2, [r3, #0]
	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 8020306:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802030a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802030e:	781b      	ldrb	r3, [r3, #0]
 8020310:	b29a      	uxth	r2, r3
 8020312:	f107 030c 	add.w	r3, r7, #12
 8020316:	4619      	mov	r1, r3
 8020318:	4843      	ldr	r0, [pc, #268]	@ (8020428 <UART_Test_Perform+0x140>)
 802031a:	f7ea fab7 	bl	800a88c <HAL_UART_Receive_DMA>
 802031e:	4603      	mov	r3, r0
 8020320:	2b00      	cmp	r3, #0
 8020322:	d004      	beq.n	802032e <UART_Test_Perform+0x46>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
 8020324:	4841      	ldr	r0, [pc, #260]	@ (802042c <UART_Test_Perform+0x144>)
 8020326:	f000 fa25 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 802032a:	23ff      	movs	r3, #255	@ 0xff
 802032c:	e076      	b.n	802041c <UART_Test_Perform+0x134>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 802032e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020332:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020336:	781b      	ldrb	r3, [r3, #0]
 8020338:	b29a      	uxth	r2, r3
 802033a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802033e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020342:	6819      	ldr	r1, [r3, #0]
 8020344:	483a      	ldr	r0, [pc, #232]	@ (8020430 <UART_Test_Perform+0x148>)
 8020346:	f7ea fa43 	bl	800a7d0 <HAL_UART_Transmit_IT>
 802034a:	4603      	mov	r3, r0
 802034c:	2b00      	cmp	r3, #0
 802034e:	d004      	beq.n	802035a <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
 8020350:	4838      	ldr	r0, [pc, #224]	@ (8020434 <UART_Test_Perform+0x14c>)
 8020352:	f000 fa0f 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 8020356:	23ff      	movs	r3, #255	@ 0xff
 8020358:	e060      	b.n	802041c <UART_Test_Perform+0x134>
	}
	if (osSemaphoreAcquire(uart5RxSem, 10) != osOK) {
 802035a:	4b37      	ldr	r3, [pc, #220]	@ (8020438 <UART_Test_Perform+0x150>)
 802035c:	681b      	ldr	r3, [r3, #0]
 802035e:	210a      	movs	r1, #10
 8020360:	4618      	mov	r0, r3
 8020362:	f7ec feb1 	bl	800d0c8 <osSemaphoreAcquire>
 8020366:	4603      	mov	r3, r0
 8020368:	2b00      	cmp	r3, #0
 802036a:	d004      	beq.n	8020376 <UART_Test_Perform+0x8e>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart5 RX semaphore timeout\n");
 802036c:	4833      	ldr	r0, [pc, #204]	@ (802043c <UART_Test_Perform+0x154>)
 802036e:	f000 fa01 	bl	8020774 <puts>
#endif
	    return TEST_FAILED;
 8020372:	23ff      	movs	r3, #255	@ 0xff
 8020374:	e052      	b.n	802041c <UART_Test_Perform+0x134>
	}

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8020376:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802037a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802037e:	781b      	ldrb	r3, [r3, #0]
 8020380:	b29a      	uxth	r2, r3
 8020382:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8020386:	4619      	mov	r1, r3
 8020388:	4829      	ldr	r0, [pc, #164]	@ (8020430 <UART_Test_Perform+0x148>)
 802038a:	f7ea fa7f 	bl	800a88c <HAL_UART_Receive_DMA>
 802038e:	4603      	mov	r3, r0
 8020390:	2b00      	cmp	r3, #0
 8020392:	d004      	beq.n	802039e <UART_Test_Perform+0xb6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
 8020394:	482a      	ldr	r0, [pc, #168]	@ (8020440 <UART_Test_Perform+0x158>)
 8020396:	f000 f9ed 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 802039a:	23ff      	movs	r3, #255	@ 0xff
 802039c:	e03e      	b.n	802041c <UART_Test_Perform+0x134>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 802039e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80203a2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80203a6:	781b      	ldrb	r3, [r3, #0]
 80203a8:	b29a      	uxth	r2, r3
 80203aa:	f107 030c 	add.w	r3, r7, #12
 80203ae:	4619      	mov	r1, r3
 80203b0:	481d      	ldr	r0, [pc, #116]	@ (8020428 <UART_Test_Perform+0x140>)
 80203b2:	f7ea fa0d 	bl	800a7d0 <HAL_UART_Transmit_IT>
 80203b6:	4603      	mov	r3, r0
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d004      	beq.n	80203c6 <UART_Test_Perform+0xde>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
 80203bc:	4821      	ldr	r0, [pc, #132]	@ (8020444 <UART_Test_Perform+0x15c>)
 80203be:	f000 f9d9 	bl	8020774 <puts>
#endif
		return TEST_FAILED;
 80203c2:	23ff      	movs	r3, #255	@ 0xff
 80203c4:	e02a      	b.n	802041c <UART_Test_Perform+0x134>
	}
	if (osSemaphoreAcquire(uart4RxSem, 10) != osOK) {
 80203c6:	4b20      	ldr	r3, [pc, #128]	@ (8020448 <UART_Test_Perform+0x160>)
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	210a      	movs	r1, #10
 80203cc:	4618      	mov	r0, r3
 80203ce:	f7ec fe7b 	bl	800d0c8 <osSemaphoreAcquire>
 80203d2:	4603      	mov	r3, r0
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d004      	beq.n	80203e2 <UART_Test_Perform+0xfa>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart4 RX semaphore timeout\n");
 80203d8:	481c      	ldr	r0, [pc, #112]	@ (802044c <UART_Test_Perform+0x164>)
 80203da:	f000 f9cb 	bl	8020774 <puts>
#endif
	    return TEST_FAILED;
 80203de:	23ff      	movs	r3, #255	@ 0xff
 80203e0:	e01c      	b.n	802041c <UART_Test_Perform+0x134>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 80203e2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80203e6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80203ea:	781c      	ldrb	r4, [r3, #0]
 80203ec:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 80203f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80203f4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80203f8:	7819      	ldrb	r1, [r3, #0]
 80203fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80203fe:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020402:	4623      	mov	r3, r4
 8020404:	6800      	ldr	r0, [r0, #0]
 8020406:	f7ff f8c3 	bl	801f590 <Match_CRC>
 802040a:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 802040e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020412:	2b01      	cmp	r3, #1
 8020414:	d101      	bne.n	802041a <UART_Test_Perform+0x132>
 8020416:	2301      	movs	r3, #1
 8020418:	e000      	b.n	802041c <UART_Test_Perform+0x134>

	return TEST_FAILED;
 802041a:	23ff      	movs	r3, #255	@ 0xff
}
 802041c:	4618      	mov	r0, r3
 802041e:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020422:	46bd      	mov	sp, r7
 8020424:	bd90      	pop	{r4, r7, pc}
 8020426:	bf00      	nop
 8020428:	2000097c 	.word	0x2000097c
 802042c:	08026300 	.word	0x08026300
 8020430:	200008f4 	.word	0x200008f4
 8020434:	0802631c 	.word	0x0802631c
 8020438:	2002d840 	.word	0x2002d840
 802043c:	08026338 	.word	0x08026338
 8020440:	08026354 	.word	0x08026354
 8020444:	08026370 	.word	0x08026370
 8020448:	2002d83c 	.word	0x2002d83c
 802044c:	0802638c 	.word	0x0802638c

08020450 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8020450:	b580      	push	{r7, lr}
 8020452:	b082      	sub	sp, #8
 8020454:	af00      	add	r7, sp, #0
 8020456:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) osSemaphoreRelease(uart4RxSem);
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	4a0a      	ldr	r2, [pc, #40]	@ (8020484 <HAL_UART_RxCpltCallback+0x34>)
 802045c:	4293      	cmp	r3, r2
 802045e:	d104      	bne.n	802046a <HAL_UART_RxCpltCallback+0x1a>
 8020460:	4b09      	ldr	r3, [pc, #36]	@ (8020488 <HAL_UART_RxCpltCallback+0x38>)
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	4618      	mov	r0, r3
 8020466:	f7ec fe95 	bl	800d194 <osSemaphoreRelease>
    if (huart == &huart5) osSemaphoreRelease(uart5RxSem);
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	4a07      	ldr	r2, [pc, #28]	@ (802048c <HAL_UART_RxCpltCallback+0x3c>)
 802046e:	4293      	cmp	r3, r2
 8020470:	d104      	bne.n	802047c <HAL_UART_RxCpltCallback+0x2c>
 8020472:	4b07      	ldr	r3, [pc, #28]	@ (8020490 <HAL_UART_RxCpltCallback+0x40>)
 8020474:	681b      	ldr	r3, [r3, #0]
 8020476:	4618      	mov	r0, r3
 8020478:	f7ec fe8c 	bl	800d194 <osSemaphoreRelease>
}
 802047c:	bf00      	nop
 802047e:	3708      	adds	r7, #8
 8020480:	46bd      	mov	sp, r7
 8020482:	bd80      	pop	{r7, pc}
 8020484:	200008f4 	.word	0x200008f4
 8020488:	2002d83c 	.word	0x2002d83c
 802048c:	2000097c 	.word	0x2000097c
 8020490:	2002d840 	.word	0x2002d840

08020494 <rand>:
 8020494:	4b16      	ldr	r3, [pc, #88]	@ (80204f0 <rand+0x5c>)
 8020496:	b510      	push	{r4, lr}
 8020498:	681c      	ldr	r4, [r3, #0]
 802049a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802049c:	b9b3      	cbnz	r3, 80204cc <rand+0x38>
 802049e:	2018      	movs	r0, #24
 80204a0:	f000 fba2 	bl	8020be8 <malloc>
 80204a4:	4602      	mov	r2, r0
 80204a6:	6320      	str	r0, [r4, #48]	@ 0x30
 80204a8:	b920      	cbnz	r0, 80204b4 <rand+0x20>
 80204aa:	4b12      	ldr	r3, [pc, #72]	@ (80204f4 <rand+0x60>)
 80204ac:	4812      	ldr	r0, [pc, #72]	@ (80204f8 <rand+0x64>)
 80204ae:	2152      	movs	r1, #82	@ 0x52
 80204b0:	f000 fb32 	bl	8020b18 <__assert_func>
 80204b4:	4911      	ldr	r1, [pc, #68]	@ (80204fc <rand+0x68>)
 80204b6:	4b12      	ldr	r3, [pc, #72]	@ (8020500 <rand+0x6c>)
 80204b8:	e9c0 1300 	strd	r1, r3, [r0]
 80204bc:	4b11      	ldr	r3, [pc, #68]	@ (8020504 <rand+0x70>)
 80204be:	6083      	str	r3, [r0, #8]
 80204c0:	230b      	movs	r3, #11
 80204c2:	8183      	strh	r3, [r0, #12]
 80204c4:	2100      	movs	r1, #0
 80204c6:	2001      	movs	r0, #1
 80204c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80204cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80204ce:	480e      	ldr	r0, [pc, #56]	@ (8020508 <rand+0x74>)
 80204d0:	690b      	ldr	r3, [r1, #16]
 80204d2:	694c      	ldr	r4, [r1, #20]
 80204d4:	4a0d      	ldr	r2, [pc, #52]	@ (802050c <rand+0x78>)
 80204d6:	4358      	muls	r0, r3
 80204d8:	fb02 0004 	mla	r0, r2, r4, r0
 80204dc:	fba3 3202 	umull	r3, r2, r3, r2
 80204e0:	3301      	adds	r3, #1
 80204e2:	eb40 0002 	adc.w	r0, r0, r2
 80204e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80204ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80204ee:	bd10      	pop	{r4, pc}
 80204f0:	20000080 	.word	0x20000080
 80204f4:	0802677a 	.word	0x0802677a
 80204f8:	08026791 	.word	0x08026791
 80204fc:	abcd330e 	.word	0xabcd330e
 8020500:	e66d1234 	.word	0xe66d1234
 8020504:	0005deec 	.word	0x0005deec
 8020508:	5851f42d 	.word	0x5851f42d
 802050c:	4c957f2d 	.word	0x4c957f2d

08020510 <std>:
 8020510:	2300      	movs	r3, #0
 8020512:	b510      	push	{r4, lr}
 8020514:	4604      	mov	r4, r0
 8020516:	e9c0 3300 	strd	r3, r3, [r0]
 802051a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802051e:	6083      	str	r3, [r0, #8]
 8020520:	8181      	strh	r1, [r0, #12]
 8020522:	6643      	str	r3, [r0, #100]	@ 0x64
 8020524:	81c2      	strh	r2, [r0, #14]
 8020526:	6183      	str	r3, [r0, #24]
 8020528:	4619      	mov	r1, r3
 802052a:	2208      	movs	r2, #8
 802052c:	305c      	adds	r0, #92	@ 0x5c
 802052e:	f000 fa11 	bl	8020954 <memset>
 8020532:	4b0d      	ldr	r3, [pc, #52]	@ (8020568 <std+0x58>)
 8020534:	6263      	str	r3, [r4, #36]	@ 0x24
 8020536:	4b0d      	ldr	r3, [pc, #52]	@ (802056c <std+0x5c>)
 8020538:	62a3      	str	r3, [r4, #40]	@ 0x28
 802053a:	4b0d      	ldr	r3, [pc, #52]	@ (8020570 <std+0x60>)
 802053c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802053e:	4b0d      	ldr	r3, [pc, #52]	@ (8020574 <std+0x64>)
 8020540:	6323      	str	r3, [r4, #48]	@ 0x30
 8020542:	4b0d      	ldr	r3, [pc, #52]	@ (8020578 <std+0x68>)
 8020544:	6224      	str	r4, [r4, #32]
 8020546:	429c      	cmp	r4, r3
 8020548:	d006      	beq.n	8020558 <std+0x48>
 802054a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802054e:	4294      	cmp	r4, r2
 8020550:	d002      	beq.n	8020558 <std+0x48>
 8020552:	33d0      	adds	r3, #208	@ 0xd0
 8020554:	429c      	cmp	r4, r3
 8020556:	d105      	bne.n	8020564 <std+0x54>
 8020558:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802055c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020560:	f000 bac8 	b.w	8020af4 <__retarget_lock_init_recursive>
 8020564:	bd10      	pop	{r4, pc}
 8020566:	bf00      	nop
 8020568:	08020785 	.word	0x08020785
 802056c:	080207a7 	.word	0x080207a7
 8020570:	080207df 	.word	0x080207df
 8020574:	08020803 	.word	0x08020803
 8020578:	2002d844 	.word	0x2002d844

0802057c <stdio_exit_handler>:
 802057c:	4a02      	ldr	r2, [pc, #8]	@ (8020588 <stdio_exit_handler+0xc>)
 802057e:	4903      	ldr	r1, [pc, #12]	@ (802058c <stdio_exit_handler+0x10>)
 8020580:	4803      	ldr	r0, [pc, #12]	@ (8020590 <stdio_exit_handler+0x14>)
 8020582:	f000 b869 	b.w	8020658 <_fwalk_sglue>
 8020586:	bf00      	nop
 8020588:	20000074 	.word	0x20000074
 802058c:	080213f9 	.word	0x080213f9
 8020590:	20000084 	.word	0x20000084

08020594 <cleanup_stdio>:
 8020594:	6841      	ldr	r1, [r0, #4]
 8020596:	4b0c      	ldr	r3, [pc, #48]	@ (80205c8 <cleanup_stdio+0x34>)
 8020598:	4299      	cmp	r1, r3
 802059a:	b510      	push	{r4, lr}
 802059c:	4604      	mov	r4, r0
 802059e:	d001      	beq.n	80205a4 <cleanup_stdio+0x10>
 80205a0:	f000 ff2a 	bl	80213f8 <_fflush_r>
 80205a4:	68a1      	ldr	r1, [r4, #8]
 80205a6:	4b09      	ldr	r3, [pc, #36]	@ (80205cc <cleanup_stdio+0x38>)
 80205a8:	4299      	cmp	r1, r3
 80205aa:	d002      	beq.n	80205b2 <cleanup_stdio+0x1e>
 80205ac:	4620      	mov	r0, r4
 80205ae:	f000 ff23 	bl	80213f8 <_fflush_r>
 80205b2:	68e1      	ldr	r1, [r4, #12]
 80205b4:	4b06      	ldr	r3, [pc, #24]	@ (80205d0 <cleanup_stdio+0x3c>)
 80205b6:	4299      	cmp	r1, r3
 80205b8:	d004      	beq.n	80205c4 <cleanup_stdio+0x30>
 80205ba:	4620      	mov	r0, r4
 80205bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205c0:	f000 bf1a 	b.w	80213f8 <_fflush_r>
 80205c4:	bd10      	pop	{r4, pc}
 80205c6:	bf00      	nop
 80205c8:	2002d844 	.word	0x2002d844
 80205cc:	2002d8ac 	.word	0x2002d8ac
 80205d0:	2002d914 	.word	0x2002d914

080205d4 <global_stdio_init.part.0>:
 80205d4:	b510      	push	{r4, lr}
 80205d6:	4b0b      	ldr	r3, [pc, #44]	@ (8020604 <global_stdio_init.part.0+0x30>)
 80205d8:	4c0b      	ldr	r4, [pc, #44]	@ (8020608 <global_stdio_init.part.0+0x34>)
 80205da:	4a0c      	ldr	r2, [pc, #48]	@ (802060c <global_stdio_init.part.0+0x38>)
 80205dc:	601a      	str	r2, [r3, #0]
 80205de:	4620      	mov	r0, r4
 80205e0:	2200      	movs	r2, #0
 80205e2:	2104      	movs	r1, #4
 80205e4:	f7ff ff94 	bl	8020510 <std>
 80205e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80205ec:	2201      	movs	r2, #1
 80205ee:	2109      	movs	r1, #9
 80205f0:	f7ff ff8e 	bl	8020510 <std>
 80205f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80205f8:	2202      	movs	r2, #2
 80205fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205fe:	2112      	movs	r1, #18
 8020600:	f7ff bf86 	b.w	8020510 <std>
 8020604:	2002d97c 	.word	0x2002d97c
 8020608:	2002d844 	.word	0x2002d844
 802060c:	0802057d 	.word	0x0802057d

08020610 <__sfp_lock_acquire>:
 8020610:	4801      	ldr	r0, [pc, #4]	@ (8020618 <__sfp_lock_acquire+0x8>)
 8020612:	f000 ba70 	b.w	8020af6 <__retarget_lock_acquire_recursive>
 8020616:	bf00      	nop
 8020618:	2002d985 	.word	0x2002d985

0802061c <__sfp_lock_release>:
 802061c:	4801      	ldr	r0, [pc, #4]	@ (8020624 <__sfp_lock_release+0x8>)
 802061e:	f000 ba6b 	b.w	8020af8 <__retarget_lock_release_recursive>
 8020622:	bf00      	nop
 8020624:	2002d985 	.word	0x2002d985

08020628 <__sinit>:
 8020628:	b510      	push	{r4, lr}
 802062a:	4604      	mov	r4, r0
 802062c:	f7ff fff0 	bl	8020610 <__sfp_lock_acquire>
 8020630:	6a23      	ldr	r3, [r4, #32]
 8020632:	b11b      	cbz	r3, 802063c <__sinit+0x14>
 8020634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020638:	f7ff bff0 	b.w	802061c <__sfp_lock_release>
 802063c:	4b04      	ldr	r3, [pc, #16]	@ (8020650 <__sinit+0x28>)
 802063e:	6223      	str	r3, [r4, #32]
 8020640:	4b04      	ldr	r3, [pc, #16]	@ (8020654 <__sinit+0x2c>)
 8020642:	681b      	ldr	r3, [r3, #0]
 8020644:	2b00      	cmp	r3, #0
 8020646:	d1f5      	bne.n	8020634 <__sinit+0xc>
 8020648:	f7ff ffc4 	bl	80205d4 <global_stdio_init.part.0>
 802064c:	e7f2      	b.n	8020634 <__sinit+0xc>
 802064e:	bf00      	nop
 8020650:	08020595 	.word	0x08020595
 8020654:	2002d97c 	.word	0x2002d97c

08020658 <_fwalk_sglue>:
 8020658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802065c:	4607      	mov	r7, r0
 802065e:	4688      	mov	r8, r1
 8020660:	4614      	mov	r4, r2
 8020662:	2600      	movs	r6, #0
 8020664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020668:	f1b9 0901 	subs.w	r9, r9, #1
 802066c:	d505      	bpl.n	802067a <_fwalk_sglue+0x22>
 802066e:	6824      	ldr	r4, [r4, #0]
 8020670:	2c00      	cmp	r4, #0
 8020672:	d1f7      	bne.n	8020664 <_fwalk_sglue+0xc>
 8020674:	4630      	mov	r0, r6
 8020676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802067a:	89ab      	ldrh	r3, [r5, #12]
 802067c:	2b01      	cmp	r3, #1
 802067e:	d907      	bls.n	8020690 <_fwalk_sglue+0x38>
 8020680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020684:	3301      	adds	r3, #1
 8020686:	d003      	beq.n	8020690 <_fwalk_sglue+0x38>
 8020688:	4629      	mov	r1, r5
 802068a:	4638      	mov	r0, r7
 802068c:	47c0      	blx	r8
 802068e:	4306      	orrs	r6, r0
 8020690:	3568      	adds	r5, #104	@ 0x68
 8020692:	e7e9      	b.n	8020668 <_fwalk_sglue+0x10>

08020694 <iprintf>:
 8020694:	b40f      	push	{r0, r1, r2, r3}
 8020696:	b507      	push	{r0, r1, r2, lr}
 8020698:	4906      	ldr	r1, [pc, #24]	@ (80206b4 <iprintf+0x20>)
 802069a:	ab04      	add	r3, sp, #16
 802069c:	6808      	ldr	r0, [r1, #0]
 802069e:	f853 2b04 	ldr.w	r2, [r3], #4
 80206a2:	6881      	ldr	r1, [r0, #8]
 80206a4:	9301      	str	r3, [sp, #4]
 80206a6:	f000 fb7f 	bl	8020da8 <_vfiprintf_r>
 80206aa:	b003      	add	sp, #12
 80206ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80206b0:	b004      	add	sp, #16
 80206b2:	4770      	bx	lr
 80206b4:	20000080 	.word	0x20000080

080206b8 <putchar>:
 80206b8:	4b02      	ldr	r3, [pc, #8]	@ (80206c4 <putchar+0xc>)
 80206ba:	4601      	mov	r1, r0
 80206bc:	6818      	ldr	r0, [r3, #0]
 80206be:	6882      	ldr	r2, [r0, #8]
 80206c0:	f000 bf36 	b.w	8021530 <_putc_r>
 80206c4:	20000080 	.word	0x20000080

080206c8 <_puts_r>:
 80206c8:	6a03      	ldr	r3, [r0, #32]
 80206ca:	b570      	push	{r4, r5, r6, lr}
 80206cc:	6884      	ldr	r4, [r0, #8]
 80206ce:	4605      	mov	r5, r0
 80206d0:	460e      	mov	r6, r1
 80206d2:	b90b      	cbnz	r3, 80206d8 <_puts_r+0x10>
 80206d4:	f7ff ffa8 	bl	8020628 <__sinit>
 80206d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80206da:	07db      	lsls	r3, r3, #31
 80206dc:	d405      	bmi.n	80206ea <_puts_r+0x22>
 80206de:	89a3      	ldrh	r3, [r4, #12]
 80206e0:	0598      	lsls	r0, r3, #22
 80206e2:	d402      	bmi.n	80206ea <_puts_r+0x22>
 80206e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80206e6:	f000 fa06 	bl	8020af6 <__retarget_lock_acquire_recursive>
 80206ea:	89a3      	ldrh	r3, [r4, #12]
 80206ec:	0719      	lsls	r1, r3, #28
 80206ee:	d502      	bpl.n	80206f6 <_puts_r+0x2e>
 80206f0:	6923      	ldr	r3, [r4, #16]
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d135      	bne.n	8020762 <_puts_r+0x9a>
 80206f6:	4621      	mov	r1, r4
 80206f8:	4628      	mov	r0, r5
 80206fa:	f000 f8c5 	bl	8020888 <__swsetup_r>
 80206fe:	b380      	cbz	r0, 8020762 <_puts_r+0x9a>
 8020700:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8020704:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020706:	07da      	lsls	r2, r3, #31
 8020708:	d405      	bmi.n	8020716 <_puts_r+0x4e>
 802070a:	89a3      	ldrh	r3, [r4, #12]
 802070c:	059b      	lsls	r3, r3, #22
 802070e:	d402      	bmi.n	8020716 <_puts_r+0x4e>
 8020710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020712:	f000 f9f1 	bl	8020af8 <__retarget_lock_release_recursive>
 8020716:	4628      	mov	r0, r5
 8020718:	bd70      	pop	{r4, r5, r6, pc}
 802071a:	2b00      	cmp	r3, #0
 802071c:	da04      	bge.n	8020728 <_puts_r+0x60>
 802071e:	69a2      	ldr	r2, [r4, #24]
 8020720:	429a      	cmp	r2, r3
 8020722:	dc17      	bgt.n	8020754 <_puts_r+0x8c>
 8020724:	290a      	cmp	r1, #10
 8020726:	d015      	beq.n	8020754 <_puts_r+0x8c>
 8020728:	6823      	ldr	r3, [r4, #0]
 802072a:	1c5a      	adds	r2, r3, #1
 802072c:	6022      	str	r2, [r4, #0]
 802072e:	7019      	strb	r1, [r3, #0]
 8020730:	68a3      	ldr	r3, [r4, #8]
 8020732:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020736:	3b01      	subs	r3, #1
 8020738:	60a3      	str	r3, [r4, #8]
 802073a:	2900      	cmp	r1, #0
 802073c:	d1ed      	bne.n	802071a <_puts_r+0x52>
 802073e:	2b00      	cmp	r3, #0
 8020740:	da11      	bge.n	8020766 <_puts_r+0x9e>
 8020742:	4622      	mov	r2, r4
 8020744:	210a      	movs	r1, #10
 8020746:	4628      	mov	r0, r5
 8020748:	f000 f85f 	bl	802080a <__swbuf_r>
 802074c:	3001      	adds	r0, #1
 802074e:	d0d7      	beq.n	8020700 <_puts_r+0x38>
 8020750:	250a      	movs	r5, #10
 8020752:	e7d7      	b.n	8020704 <_puts_r+0x3c>
 8020754:	4622      	mov	r2, r4
 8020756:	4628      	mov	r0, r5
 8020758:	f000 f857 	bl	802080a <__swbuf_r>
 802075c:	3001      	adds	r0, #1
 802075e:	d1e7      	bne.n	8020730 <_puts_r+0x68>
 8020760:	e7ce      	b.n	8020700 <_puts_r+0x38>
 8020762:	3e01      	subs	r6, #1
 8020764:	e7e4      	b.n	8020730 <_puts_r+0x68>
 8020766:	6823      	ldr	r3, [r4, #0]
 8020768:	1c5a      	adds	r2, r3, #1
 802076a:	6022      	str	r2, [r4, #0]
 802076c:	220a      	movs	r2, #10
 802076e:	701a      	strb	r2, [r3, #0]
 8020770:	e7ee      	b.n	8020750 <_puts_r+0x88>
	...

08020774 <puts>:
 8020774:	4b02      	ldr	r3, [pc, #8]	@ (8020780 <puts+0xc>)
 8020776:	4601      	mov	r1, r0
 8020778:	6818      	ldr	r0, [r3, #0]
 802077a:	f7ff bfa5 	b.w	80206c8 <_puts_r>
 802077e:	bf00      	nop
 8020780:	20000080 	.word	0x20000080

08020784 <__sread>:
 8020784:	b510      	push	{r4, lr}
 8020786:	460c      	mov	r4, r1
 8020788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802078c:	f000 f96a 	bl	8020a64 <_read_r>
 8020790:	2800      	cmp	r0, #0
 8020792:	bfab      	itete	ge
 8020794:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020796:	89a3      	ldrhlt	r3, [r4, #12]
 8020798:	181b      	addge	r3, r3, r0
 802079a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802079e:	bfac      	ite	ge
 80207a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80207a2:	81a3      	strhlt	r3, [r4, #12]
 80207a4:	bd10      	pop	{r4, pc}

080207a6 <__swrite>:
 80207a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80207aa:	461f      	mov	r7, r3
 80207ac:	898b      	ldrh	r3, [r1, #12]
 80207ae:	05db      	lsls	r3, r3, #23
 80207b0:	4605      	mov	r5, r0
 80207b2:	460c      	mov	r4, r1
 80207b4:	4616      	mov	r6, r2
 80207b6:	d505      	bpl.n	80207c4 <__swrite+0x1e>
 80207b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80207bc:	2302      	movs	r3, #2
 80207be:	2200      	movs	r2, #0
 80207c0:	f000 f93e 	bl	8020a40 <_lseek_r>
 80207c4:	89a3      	ldrh	r3, [r4, #12]
 80207c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80207ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80207ce:	81a3      	strh	r3, [r4, #12]
 80207d0:	4632      	mov	r2, r6
 80207d2:	463b      	mov	r3, r7
 80207d4:	4628      	mov	r0, r5
 80207d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80207da:	f000 b955 	b.w	8020a88 <_write_r>

080207de <__sseek>:
 80207de:	b510      	push	{r4, lr}
 80207e0:	460c      	mov	r4, r1
 80207e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80207e6:	f000 f92b 	bl	8020a40 <_lseek_r>
 80207ea:	1c43      	adds	r3, r0, #1
 80207ec:	89a3      	ldrh	r3, [r4, #12]
 80207ee:	bf15      	itete	ne
 80207f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80207f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80207f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80207fa:	81a3      	strheq	r3, [r4, #12]
 80207fc:	bf18      	it	ne
 80207fe:	81a3      	strhne	r3, [r4, #12]
 8020800:	bd10      	pop	{r4, pc}

08020802 <__sclose>:
 8020802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020806:	f000 b8ad 	b.w	8020964 <_close_r>

0802080a <__swbuf_r>:
 802080a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802080c:	460e      	mov	r6, r1
 802080e:	4614      	mov	r4, r2
 8020810:	4605      	mov	r5, r0
 8020812:	b118      	cbz	r0, 802081c <__swbuf_r+0x12>
 8020814:	6a03      	ldr	r3, [r0, #32]
 8020816:	b90b      	cbnz	r3, 802081c <__swbuf_r+0x12>
 8020818:	f7ff ff06 	bl	8020628 <__sinit>
 802081c:	69a3      	ldr	r3, [r4, #24]
 802081e:	60a3      	str	r3, [r4, #8]
 8020820:	89a3      	ldrh	r3, [r4, #12]
 8020822:	071a      	lsls	r2, r3, #28
 8020824:	d501      	bpl.n	802082a <__swbuf_r+0x20>
 8020826:	6923      	ldr	r3, [r4, #16]
 8020828:	b943      	cbnz	r3, 802083c <__swbuf_r+0x32>
 802082a:	4621      	mov	r1, r4
 802082c:	4628      	mov	r0, r5
 802082e:	f000 f82b 	bl	8020888 <__swsetup_r>
 8020832:	b118      	cbz	r0, 802083c <__swbuf_r+0x32>
 8020834:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8020838:	4638      	mov	r0, r7
 802083a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802083c:	6823      	ldr	r3, [r4, #0]
 802083e:	6922      	ldr	r2, [r4, #16]
 8020840:	1a98      	subs	r0, r3, r2
 8020842:	6963      	ldr	r3, [r4, #20]
 8020844:	b2f6      	uxtb	r6, r6
 8020846:	4283      	cmp	r3, r0
 8020848:	4637      	mov	r7, r6
 802084a:	dc05      	bgt.n	8020858 <__swbuf_r+0x4e>
 802084c:	4621      	mov	r1, r4
 802084e:	4628      	mov	r0, r5
 8020850:	f000 fdd2 	bl	80213f8 <_fflush_r>
 8020854:	2800      	cmp	r0, #0
 8020856:	d1ed      	bne.n	8020834 <__swbuf_r+0x2a>
 8020858:	68a3      	ldr	r3, [r4, #8]
 802085a:	3b01      	subs	r3, #1
 802085c:	60a3      	str	r3, [r4, #8]
 802085e:	6823      	ldr	r3, [r4, #0]
 8020860:	1c5a      	adds	r2, r3, #1
 8020862:	6022      	str	r2, [r4, #0]
 8020864:	701e      	strb	r6, [r3, #0]
 8020866:	6962      	ldr	r2, [r4, #20]
 8020868:	1c43      	adds	r3, r0, #1
 802086a:	429a      	cmp	r2, r3
 802086c:	d004      	beq.n	8020878 <__swbuf_r+0x6e>
 802086e:	89a3      	ldrh	r3, [r4, #12]
 8020870:	07db      	lsls	r3, r3, #31
 8020872:	d5e1      	bpl.n	8020838 <__swbuf_r+0x2e>
 8020874:	2e0a      	cmp	r6, #10
 8020876:	d1df      	bne.n	8020838 <__swbuf_r+0x2e>
 8020878:	4621      	mov	r1, r4
 802087a:	4628      	mov	r0, r5
 802087c:	f000 fdbc 	bl	80213f8 <_fflush_r>
 8020880:	2800      	cmp	r0, #0
 8020882:	d0d9      	beq.n	8020838 <__swbuf_r+0x2e>
 8020884:	e7d6      	b.n	8020834 <__swbuf_r+0x2a>
	...

08020888 <__swsetup_r>:
 8020888:	b538      	push	{r3, r4, r5, lr}
 802088a:	4b29      	ldr	r3, [pc, #164]	@ (8020930 <__swsetup_r+0xa8>)
 802088c:	4605      	mov	r5, r0
 802088e:	6818      	ldr	r0, [r3, #0]
 8020890:	460c      	mov	r4, r1
 8020892:	b118      	cbz	r0, 802089c <__swsetup_r+0x14>
 8020894:	6a03      	ldr	r3, [r0, #32]
 8020896:	b90b      	cbnz	r3, 802089c <__swsetup_r+0x14>
 8020898:	f7ff fec6 	bl	8020628 <__sinit>
 802089c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80208a0:	0719      	lsls	r1, r3, #28
 80208a2:	d422      	bmi.n	80208ea <__swsetup_r+0x62>
 80208a4:	06da      	lsls	r2, r3, #27
 80208a6:	d407      	bmi.n	80208b8 <__swsetup_r+0x30>
 80208a8:	2209      	movs	r2, #9
 80208aa:	602a      	str	r2, [r5, #0]
 80208ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80208b0:	81a3      	strh	r3, [r4, #12]
 80208b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80208b6:	e033      	b.n	8020920 <__swsetup_r+0x98>
 80208b8:	0758      	lsls	r0, r3, #29
 80208ba:	d512      	bpl.n	80208e2 <__swsetup_r+0x5a>
 80208bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80208be:	b141      	cbz	r1, 80208d2 <__swsetup_r+0x4a>
 80208c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80208c4:	4299      	cmp	r1, r3
 80208c6:	d002      	beq.n	80208ce <__swsetup_r+0x46>
 80208c8:	4628      	mov	r0, r5
 80208ca:	f000 f943 	bl	8020b54 <_free_r>
 80208ce:	2300      	movs	r3, #0
 80208d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80208d2:	89a3      	ldrh	r3, [r4, #12]
 80208d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80208d8:	81a3      	strh	r3, [r4, #12]
 80208da:	2300      	movs	r3, #0
 80208dc:	6063      	str	r3, [r4, #4]
 80208de:	6923      	ldr	r3, [r4, #16]
 80208e0:	6023      	str	r3, [r4, #0]
 80208e2:	89a3      	ldrh	r3, [r4, #12]
 80208e4:	f043 0308 	orr.w	r3, r3, #8
 80208e8:	81a3      	strh	r3, [r4, #12]
 80208ea:	6923      	ldr	r3, [r4, #16]
 80208ec:	b94b      	cbnz	r3, 8020902 <__swsetup_r+0x7a>
 80208ee:	89a3      	ldrh	r3, [r4, #12]
 80208f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80208f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80208f8:	d003      	beq.n	8020902 <__swsetup_r+0x7a>
 80208fa:	4621      	mov	r1, r4
 80208fc:	4628      	mov	r0, r5
 80208fe:	f000 fddb 	bl	80214b8 <__smakebuf_r>
 8020902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020906:	f013 0201 	ands.w	r2, r3, #1
 802090a:	d00a      	beq.n	8020922 <__swsetup_r+0x9a>
 802090c:	2200      	movs	r2, #0
 802090e:	60a2      	str	r2, [r4, #8]
 8020910:	6962      	ldr	r2, [r4, #20]
 8020912:	4252      	negs	r2, r2
 8020914:	61a2      	str	r2, [r4, #24]
 8020916:	6922      	ldr	r2, [r4, #16]
 8020918:	b942      	cbnz	r2, 802092c <__swsetup_r+0xa4>
 802091a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802091e:	d1c5      	bne.n	80208ac <__swsetup_r+0x24>
 8020920:	bd38      	pop	{r3, r4, r5, pc}
 8020922:	0799      	lsls	r1, r3, #30
 8020924:	bf58      	it	pl
 8020926:	6962      	ldrpl	r2, [r4, #20]
 8020928:	60a2      	str	r2, [r4, #8]
 802092a:	e7f4      	b.n	8020916 <__swsetup_r+0x8e>
 802092c:	2000      	movs	r0, #0
 802092e:	e7f7      	b.n	8020920 <__swsetup_r+0x98>
 8020930:	20000080 	.word	0x20000080

08020934 <memcmp>:
 8020934:	b510      	push	{r4, lr}
 8020936:	3901      	subs	r1, #1
 8020938:	4402      	add	r2, r0
 802093a:	4290      	cmp	r0, r2
 802093c:	d101      	bne.n	8020942 <memcmp+0xe>
 802093e:	2000      	movs	r0, #0
 8020940:	e005      	b.n	802094e <memcmp+0x1a>
 8020942:	7803      	ldrb	r3, [r0, #0]
 8020944:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020948:	42a3      	cmp	r3, r4
 802094a:	d001      	beq.n	8020950 <memcmp+0x1c>
 802094c:	1b18      	subs	r0, r3, r4
 802094e:	bd10      	pop	{r4, pc}
 8020950:	3001      	adds	r0, #1
 8020952:	e7f2      	b.n	802093a <memcmp+0x6>

08020954 <memset>:
 8020954:	4402      	add	r2, r0
 8020956:	4603      	mov	r3, r0
 8020958:	4293      	cmp	r3, r2
 802095a:	d100      	bne.n	802095e <memset+0xa>
 802095c:	4770      	bx	lr
 802095e:	f803 1b01 	strb.w	r1, [r3], #1
 8020962:	e7f9      	b.n	8020958 <memset+0x4>

08020964 <_close_r>:
 8020964:	b538      	push	{r3, r4, r5, lr}
 8020966:	4d06      	ldr	r5, [pc, #24]	@ (8020980 <_close_r+0x1c>)
 8020968:	2300      	movs	r3, #0
 802096a:	4604      	mov	r4, r0
 802096c:	4608      	mov	r0, r1
 802096e:	602b      	str	r3, [r5, #0]
 8020970:	f7e1 f840 	bl	80019f4 <_close>
 8020974:	1c43      	adds	r3, r0, #1
 8020976:	d102      	bne.n	802097e <_close_r+0x1a>
 8020978:	682b      	ldr	r3, [r5, #0]
 802097a:	b103      	cbz	r3, 802097e <_close_r+0x1a>
 802097c:	6023      	str	r3, [r4, #0]
 802097e:	bd38      	pop	{r3, r4, r5, pc}
 8020980:	2002d980 	.word	0x2002d980

08020984 <_reclaim_reent>:
 8020984:	4b2d      	ldr	r3, [pc, #180]	@ (8020a3c <_reclaim_reent+0xb8>)
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	4283      	cmp	r3, r0
 802098a:	b570      	push	{r4, r5, r6, lr}
 802098c:	4604      	mov	r4, r0
 802098e:	d053      	beq.n	8020a38 <_reclaim_reent+0xb4>
 8020990:	69c3      	ldr	r3, [r0, #28]
 8020992:	b31b      	cbz	r3, 80209dc <_reclaim_reent+0x58>
 8020994:	68db      	ldr	r3, [r3, #12]
 8020996:	b163      	cbz	r3, 80209b2 <_reclaim_reent+0x2e>
 8020998:	2500      	movs	r5, #0
 802099a:	69e3      	ldr	r3, [r4, #28]
 802099c:	68db      	ldr	r3, [r3, #12]
 802099e:	5959      	ldr	r1, [r3, r5]
 80209a0:	b9b1      	cbnz	r1, 80209d0 <_reclaim_reent+0x4c>
 80209a2:	3504      	adds	r5, #4
 80209a4:	2d80      	cmp	r5, #128	@ 0x80
 80209a6:	d1f8      	bne.n	802099a <_reclaim_reent+0x16>
 80209a8:	69e3      	ldr	r3, [r4, #28]
 80209aa:	4620      	mov	r0, r4
 80209ac:	68d9      	ldr	r1, [r3, #12]
 80209ae:	f000 f8d1 	bl	8020b54 <_free_r>
 80209b2:	69e3      	ldr	r3, [r4, #28]
 80209b4:	6819      	ldr	r1, [r3, #0]
 80209b6:	b111      	cbz	r1, 80209be <_reclaim_reent+0x3a>
 80209b8:	4620      	mov	r0, r4
 80209ba:	f000 f8cb 	bl	8020b54 <_free_r>
 80209be:	69e3      	ldr	r3, [r4, #28]
 80209c0:	689d      	ldr	r5, [r3, #8]
 80209c2:	b15d      	cbz	r5, 80209dc <_reclaim_reent+0x58>
 80209c4:	4629      	mov	r1, r5
 80209c6:	4620      	mov	r0, r4
 80209c8:	682d      	ldr	r5, [r5, #0]
 80209ca:	f000 f8c3 	bl	8020b54 <_free_r>
 80209ce:	e7f8      	b.n	80209c2 <_reclaim_reent+0x3e>
 80209d0:	680e      	ldr	r6, [r1, #0]
 80209d2:	4620      	mov	r0, r4
 80209d4:	f000 f8be 	bl	8020b54 <_free_r>
 80209d8:	4631      	mov	r1, r6
 80209da:	e7e1      	b.n	80209a0 <_reclaim_reent+0x1c>
 80209dc:	6961      	ldr	r1, [r4, #20]
 80209de:	b111      	cbz	r1, 80209e6 <_reclaim_reent+0x62>
 80209e0:	4620      	mov	r0, r4
 80209e2:	f000 f8b7 	bl	8020b54 <_free_r>
 80209e6:	69e1      	ldr	r1, [r4, #28]
 80209e8:	b111      	cbz	r1, 80209f0 <_reclaim_reent+0x6c>
 80209ea:	4620      	mov	r0, r4
 80209ec:	f000 f8b2 	bl	8020b54 <_free_r>
 80209f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80209f2:	b111      	cbz	r1, 80209fa <_reclaim_reent+0x76>
 80209f4:	4620      	mov	r0, r4
 80209f6:	f000 f8ad 	bl	8020b54 <_free_r>
 80209fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80209fc:	b111      	cbz	r1, 8020a04 <_reclaim_reent+0x80>
 80209fe:	4620      	mov	r0, r4
 8020a00:	f000 f8a8 	bl	8020b54 <_free_r>
 8020a04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8020a06:	b111      	cbz	r1, 8020a0e <_reclaim_reent+0x8a>
 8020a08:	4620      	mov	r0, r4
 8020a0a:	f000 f8a3 	bl	8020b54 <_free_r>
 8020a0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8020a10:	b111      	cbz	r1, 8020a18 <_reclaim_reent+0x94>
 8020a12:	4620      	mov	r0, r4
 8020a14:	f000 f89e 	bl	8020b54 <_free_r>
 8020a18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8020a1a:	b111      	cbz	r1, 8020a22 <_reclaim_reent+0x9e>
 8020a1c:	4620      	mov	r0, r4
 8020a1e:	f000 f899 	bl	8020b54 <_free_r>
 8020a22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8020a24:	b111      	cbz	r1, 8020a2c <_reclaim_reent+0xa8>
 8020a26:	4620      	mov	r0, r4
 8020a28:	f000 f894 	bl	8020b54 <_free_r>
 8020a2c:	6a23      	ldr	r3, [r4, #32]
 8020a2e:	b11b      	cbz	r3, 8020a38 <_reclaim_reent+0xb4>
 8020a30:	4620      	mov	r0, r4
 8020a32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020a36:	4718      	bx	r3
 8020a38:	bd70      	pop	{r4, r5, r6, pc}
 8020a3a:	bf00      	nop
 8020a3c:	20000080 	.word	0x20000080

08020a40 <_lseek_r>:
 8020a40:	b538      	push	{r3, r4, r5, lr}
 8020a42:	4d07      	ldr	r5, [pc, #28]	@ (8020a60 <_lseek_r+0x20>)
 8020a44:	4604      	mov	r4, r0
 8020a46:	4608      	mov	r0, r1
 8020a48:	4611      	mov	r1, r2
 8020a4a:	2200      	movs	r2, #0
 8020a4c:	602a      	str	r2, [r5, #0]
 8020a4e:	461a      	mov	r2, r3
 8020a50:	f7e0 fff7 	bl	8001a42 <_lseek>
 8020a54:	1c43      	adds	r3, r0, #1
 8020a56:	d102      	bne.n	8020a5e <_lseek_r+0x1e>
 8020a58:	682b      	ldr	r3, [r5, #0]
 8020a5a:	b103      	cbz	r3, 8020a5e <_lseek_r+0x1e>
 8020a5c:	6023      	str	r3, [r4, #0]
 8020a5e:	bd38      	pop	{r3, r4, r5, pc}
 8020a60:	2002d980 	.word	0x2002d980

08020a64 <_read_r>:
 8020a64:	b538      	push	{r3, r4, r5, lr}
 8020a66:	4d07      	ldr	r5, [pc, #28]	@ (8020a84 <_read_r+0x20>)
 8020a68:	4604      	mov	r4, r0
 8020a6a:	4608      	mov	r0, r1
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	2200      	movs	r2, #0
 8020a70:	602a      	str	r2, [r5, #0]
 8020a72:	461a      	mov	r2, r3
 8020a74:	f7e0 ffa1 	bl	80019ba <_read>
 8020a78:	1c43      	adds	r3, r0, #1
 8020a7a:	d102      	bne.n	8020a82 <_read_r+0x1e>
 8020a7c:	682b      	ldr	r3, [r5, #0]
 8020a7e:	b103      	cbz	r3, 8020a82 <_read_r+0x1e>
 8020a80:	6023      	str	r3, [r4, #0]
 8020a82:	bd38      	pop	{r3, r4, r5, pc}
 8020a84:	2002d980 	.word	0x2002d980

08020a88 <_write_r>:
 8020a88:	b538      	push	{r3, r4, r5, lr}
 8020a8a:	4d07      	ldr	r5, [pc, #28]	@ (8020aa8 <_write_r+0x20>)
 8020a8c:	4604      	mov	r4, r0
 8020a8e:	4608      	mov	r0, r1
 8020a90:	4611      	mov	r1, r2
 8020a92:	2200      	movs	r2, #0
 8020a94:	602a      	str	r2, [r5, #0]
 8020a96:	461a      	mov	r2, r3
 8020a98:	f7e0 fb00 	bl	800109c <_write>
 8020a9c:	1c43      	adds	r3, r0, #1
 8020a9e:	d102      	bne.n	8020aa6 <_write_r+0x1e>
 8020aa0:	682b      	ldr	r3, [r5, #0]
 8020aa2:	b103      	cbz	r3, 8020aa6 <_write_r+0x1e>
 8020aa4:	6023      	str	r3, [r4, #0]
 8020aa6:	bd38      	pop	{r3, r4, r5, pc}
 8020aa8:	2002d980 	.word	0x2002d980

08020aac <__libc_init_array>:
 8020aac:	b570      	push	{r4, r5, r6, lr}
 8020aae:	4d0d      	ldr	r5, [pc, #52]	@ (8020ae4 <__libc_init_array+0x38>)
 8020ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8020ae8 <__libc_init_array+0x3c>)
 8020ab2:	1b64      	subs	r4, r4, r5
 8020ab4:	10a4      	asrs	r4, r4, #2
 8020ab6:	2600      	movs	r6, #0
 8020ab8:	42a6      	cmp	r6, r4
 8020aba:	d109      	bne.n	8020ad0 <__libc_init_array+0x24>
 8020abc:	4d0b      	ldr	r5, [pc, #44]	@ (8020aec <__libc_init_array+0x40>)
 8020abe:	4c0c      	ldr	r4, [pc, #48]	@ (8020af0 <__libc_init_array+0x44>)
 8020ac0:	f000 fde8 	bl	8021694 <_init>
 8020ac4:	1b64      	subs	r4, r4, r5
 8020ac6:	10a4      	asrs	r4, r4, #2
 8020ac8:	2600      	movs	r6, #0
 8020aca:	42a6      	cmp	r6, r4
 8020acc:	d105      	bne.n	8020ada <__libc_init_array+0x2e>
 8020ace:	bd70      	pop	{r4, r5, r6, pc}
 8020ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8020ad4:	4798      	blx	r3
 8020ad6:	3601      	adds	r6, #1
 8020ad8:	e7ee      	b.n	8020ab8 <__libc_init_array+0xc>
 8020ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8020ade:	4798      	blx	r3
 8020ae0:	3601      	adds	r6, #1
 8020ae2:	e7f2      	b.n	8020aca <__libc_init_array+0x1e>
 8020ae4:	08026860 	.word	0x08026860
 8020ae8:	08026860 	.word	0x08026860
 8020aec:	08026860 	.word	0x08026860
 8020af0:	08026864 	.word	0x08026864

08020af4 <__retarget_lock_init_recursive>:
 8020af4:	4770      	bx	lr

08020af6 <__retarget_lock_acquire_recursive>:
 8020af6:	4770      	bx	lr

08020af8 <__retarget_lock_release_recursive>:
 8020af8:	4770      	bx	lr

08020afa <memcpy>:
 8020afa:	440a      	add	r2, r1
 8020afc:	4291      	cmp	r1, r2
 8020afe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8020b02:	d100      	bne.n	8020b06 <memcpy+0xc>
 8020b04:	4770      	bx	lr
 8020b06:	b510      	push	{r4, lr}
 8020b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020b10:	4291      	cmp	r1, r2
 8020b12:	d1f9      	bne.n	8020b08 <memcpy+0xe>
 8020b14:	bd10      	pop	{r4, pc}
	...

08020b18 <__assert_func>:
 8020b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020b1a:	4614      	mov	r4, r2
 8020b1c:	461a      	mov	r2, r3
 8020b1e:	4b09      	ldr	r3, [pc, #36]	@ (8020b44 <__assert_func+0x2c>)
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	4605      	mov	r5, r0
 8020b24:	68d8      	ldr	r0, [r3, #12]
 8020b26:	b14c      	cbz	r4, 8020b3c <__assert_func+0x24>
 8020b28:	4b07      	ldr	r3, [pc, #28]	@ (8020b48 <__assert_func+0x30>)
 8020b2a:	9100      	str	r1, [sp, #0]
 8020b2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020b30:	4906      	ldr	r1, [pc, #24]	@ (8020b4c <__assert_func+0x34>)
 8020b32:	462b      	mov	r3, r5
 8020b34:	f000 fc88 	bl	8021448 <fiprintf>
 8020b38:	f000 fd60 	bl	80215fc <abort>
 8020b3c:	4b04      	ldr	r3, [pc, #16]	@ (8020b50 <__assert_func+0x38>)
 8020b3e:	461c      	mov	r4, r3
 8020b40:	e7f3      	b.n	8020b2a <__assert_func+0x12>
 8020b42:	bf00      	nop
 8020b44:	20000080 	.word	0x20000080
 8020b48:	080267e9 	.word	0x080267e9
 8020b4c:	080267f6 	.word	0x080267f6
 8020b50:	08026824 	.word	0x08026824

08020b54 <_free_r>:
 8020b54:	b538      	push	{r3, r4, r5, lr}
 8020b56:	4605      	mov	r5, r0
 8020b58:	2900      	cmp	r1, #0
 8020b5a:	d041      	beq.n	8020be0 <_free_r+0x8c>
 8020b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020b60:	1f0c      	subs	r4, r1, #4
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	bfb8      	it	lt
 8020b66:	18e4      	addlt	r4, r4, r3
 8020b68:	f000 f8e8 	bl	8020d3c <__malloc_lock>
 8020b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8020be4 <_free_r+0x90>)
 8020b6e:	6813      	ldr	r3, [r2, #0]
 8020b70:	b933      	cbnz	r3, 8020b80 <_free_r+0x2c>
 8020b72:	6063      	str	r3, [r4, #4]
 8020b74:	6014      	str	r4, [r2, #0]
 8020b76:	4628      	mov	r0, r5
 8020b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020b7c:	f000 b8e4 	b.w	8020d48 <__malloc_unlock>
 8020b80:	42a3      	cmp	r3, r4
 8020b82:	d908      	bls.n	8020b96 <_free_r+0x42>
 8020b84:	6820      	ldr	r0, [r4, #0]
 8020b86:	1821      	adds	r1, r4, r0
 8020b88:	428b      	cmp	r3, r1
 8020b8a:	bf01      	itttt	eq
 8020b8c:	6819      	ldreq	r1, [r3, #0]
 8020b8e:	685b      	ldreq	r3, [r3, #4]
 8020b90:	1809      	addeq	r1, r1, r0
 8020b92:	6021      	streq	r1, [r4, #0]
 8020b94:	e7ed      	b.n	8020b72 <_free_r+0x1e>
 8020b96:	461a      	mov	r2, r3
 8020b98:	685b      	ldr	r3, [r3, #4]
 8020b9a:	b10b      	cbz	r3, 8020ba0 <_free_r+0x4c>
 8020b9c:	42a3      	cmp	r3, r4
 8020b9e:	d9fa      	bls.n	8020b96 <_free_r+0x42>
 8020ba0:	6811      	ldr	r1, [r2, #0]
 8020ba2:	1850      	adds	r0, r2, r1
 8020ba4:	42a0      	cmp	r0, r4
 8020ba6:	d10b      	bne.n	8020bc0 <_free_r+0x6c>
 8020ba8:	6820      	ldr	r0, [r4, #0]
 8020baa:	4401      	add	r1, r0
 8020bac:	1850      	adds	r0, r2, r1
 8020bae:	4283      	cmp	r3, r0
 8020bb0:	6011      	str	r1, [r2, #0]
 8020bb2:	d1e0      	bne.n	8020b76 <_free_r+0x22>
 8020bb4:	6818      	ldr	r0, [r3, #0]
 8020bb6:	685b      	ldr	r3, [r3, #4]
 8020bb8:	6053      	str	r3, [r2, #4]
 8020bba:	4408      	add	r0, r1
 8020bbc:	6010      	str	r0, [r2, #0]
 8020bbe:	e7da      	b.n	8020b76 <_free_r+0x22>
 8020bc0:	d902      	bls.n	8020bc8 <_free_r+0x74>
 8020bc2:	230c      	movs	r3, #12
 8020bc4:	602b      	str	r3, [r5, #0]
 8020bc6:	e7d6      	b.n	8020b76 <_free_r+0x22>
 8020bc8:	6820      	ldr	r0, [r4, #0]
 8020bca:	1821      	adds	r1, r4, r0
 8020bcc:	428b      	cmp	r3, r1
 8020bce:	bf04      	itt	eq
 8020bd0:	6819      	ldreq	r1, [r3, #0]
 8020bd2:	685b      	ldreq	r3, [r3, #4]
 8020bd4:	6063      	str	r3, [r4, #4]
 8020bd6:	bf04      	itt	eq
 8020bd8:	1809      	addeq	r1, r1, r0
 8020bda:	6021      	streq	r1, [r4, #0]
 8020bdc:	6054      	str	r4, [r2, #4]
 8020bde:	e7ca      	b.n	8020b76 <_free_r+0x22>
 8020be0:	bd38      	pop	{r3, r4, r5, pc}
 8020be2:	bf00      	nop
 8020be4:	2002d98c 	.word	0x2002d98c

08020be8 <malloc>:
 8020be8:	4b02      	ldr	r3, [pc, #8]	@ (8020bf4 <malloc+0xc>)
 8020bea:	4601      	mov	r1, r0
 8020bec:	6818      	ldr	r0, [r3, #0]
 8020bee:	f000 b825 	b.w	8020c3c <_malloc_r>
 8020bf2:	bf00      	nop
 8020bf4:	20000080 	.word	0x20000080

08020bf8 <sbrk_aligned>:
 8020bf8:	b570      	push	{r4, r5, r6, lr}
 8020bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8020c38 <sbrk_aligned+0x40>)
 8020bfc:	460c      	mov	r4, r1
 8020bfe:	6831      	ldr	r1, [r6, #0]
 8020c00:	4605      	mov	r5, r0
 8020c02:	b911      	cbnz	r1, 8020c0a <sbrk_aligned+0x12>
 8020c04:	f000 fcea 	bl	80215dc <_sbrk_r>
 8020c08:	6030      	str	r0, [r6, #0]
 8020c0a:	4621      	mov	r1, r4
 8020c0c:	4628      	mov	r0, r5
 8020c0e:	f000 fce5 	bl	80215dc <_sbrk_r>
 8020c12:	1c43      	adds	r3, r0, #1
 8020c14:	d103      	bne.n	8020c1e <sbrk_aligned+0x26>
 8020c16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020c1a:	4620      	mov	r0, r4
 8020c1c:	bd70      	pop	{r4, r5, r6, pc}
 8020c1e:	1cc4      	adds	r4, r0, #3
 8020c20:	f024 0403 	bic.w	r4, r4, #3
 8020c24:	42a0      	cmp	r0, r4
 8020c26:	d0f8      	beq.n	8020c1a <sbrk_aligned+0x22>
 8020c28:	1a21      	subs	r1, r4, r0
 8020c2a:	4628      	mov	r0, r5
 8020c2c:	f000 fcd6 	bl	80215dc <_sbrk_r>
 8020c30:	3001      	adds	r0, #1
 8020c32:	d1f2      	bne.n	8020c1a <sbrk_aligned+0x22>
 8020c34:	e7ef      	b.n	8020c16 <sbrk_aligned+0x1e>
 8020c36:	bf00      	nop
 8020c38:	2002d988 	.word	0x2002d988

08020c3c <_malloc_r>:
 8020c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020c40:	1ccd      	adds	r5, r1, #3
 8020c42:	f025 0503 	bic.w	r5, r5, #3
 8020c46:	3508      	adds	r5, #8
 8020c48:	2d0c      	cmp	r5, #12
 8020c4a:	bf38      	it	cc
 8020c4c:	250c      	movcc	r5, #12
 8020c4e:	2d00      	cmp	r5, #0
 8020c50:	4606      	mov	r6, r0
 8020c52:	db01      	blt.n	8020c58 <_malloc_r+0x1c>
 8020c54:	42a9      	cmp	r1, r5
 8020c56:	d904      	bls.n	8020c62 <_malloc_r+0x26>
 8020c58:	230c      	movs	r3, #12
 8020c5a:	6033      	str	r3, [r6, #0]
 8020c5c:	2000      	movs	r0, #0
 8020c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020d38 <_malloc_r+0xfc>
 8020c66:	f000 f869 	bl	8020d3c <__malloc_lock>
 8020c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8020c6e:	461c      	mov	r4, r3
 8020c70:	bb44      	cbnz	r4, 8020cc4 <_malloc_r+0x88>
 8020c72:	4629      	mov	r1, r5
 8020c74:	4630      	mov	r0, r6
 8020c76:	f7ff ffbf 	bl	8020bf8 <sbrk_aligned>
 8020c7a:	1c43      	adds	r3, r0, #1
 8020c7c:	4604      	mov	r4, r0
 8020c7e:	d158      	bne.n	8020d32 <_malloc_r+0xf6>
 8020c80:	f8d8 4000 	ldr.w	r4, [r8]
 8020c84:	4627      	mov	r7, r4
 8020c86:	2f00      	cmp	r7, #0
 8020c88:	d143      	bne.n	8020d12 <_malloc_r+0xd6>
 8020c8a:	2c00      	cmp	r4, #0
 8020c8c:	d04b      	beq.n	8020d26 <_malloc_r+0xea>
 8020c8e:	6823      	ldr	r3, [r4, #0]
 8020c90:	4639      	mov	r1, r7
 8020c92:	4630      	mov	r0, r6
 8020c94:	eb04 0903 	add.w	r9, r4, r3
 8020c98:	f000 fca0 	bl	80215dc <_sbrk_r>
 8020c9c:	4581      	cmp	r9, r0
 8020c9e:	d142      	bne.n	8020d26 <_malloc_r+0xea>
 8020ca0:	6821      	ldr	r1, [r4, #0]
 8020ca2:	1a6d      	subs	r5, r5, r1
 8020ca4:	4629      	mov	r1, r5
 8020ca6:	4630      	mov	r0, r6
 8020ca8:	f7ff ffa6 	bl	8020bf8 <sbrk_aligned>
 8020cac:	3001      	adds	r0, #1
 8020cae:	d03a      	beq.n	8020d26 <_malloc_r+0xea>
 8020cb0:	6823      	ldr	r3, [r4, #0]
 8020cb2:	442b      	add	r3, r5
 8020cb4:	6023      	str	r3, [r4, #0]
 8020cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8020cba:	685a      	ldr	r2, [r3, #4]
 8020cbc:	bb62      	cbnz	r2, 8020d18 <_malloc_r+0xdc>
 8020cbe:	f8c8 7000 	str.w	r7, [r8]
 8020cc2:	e00f      	b.n	8020ce4 <_malloc_r+0xa8>
 8020cc4:	6822      	ldr	r2, [r4, #0]
 8020cc6:	1b52      	subs	r2, r2, r5
 8020cc8:	d420      	bmi.n	8020d0c <_malloc_r+0xd0>
 8020cca:	2a0b      	cmp	r2, #11
 8020ccc:	d917      	bls.n	8020cfe <_malloc_r+0xc2>
 8020cce:	1961      	adds	r1, r4, r5
 8020cd0:	42a3      	cmp	r3, r4
 8020cd2:	6025      	str	r5, [r4, #0]
 8020cd4:	bf18      	it	ne
 8020cd6:	6059      	strne	r1, [r3, #4]
 8020cd8:	6863      	ldr	r3, [r4, #4]
 8020cda:	bf08      	it	eq
 8020cdc:	f8c8 1000 	streq.w	r1, [r8]
 8020ce0:	5162      	str	r2, [r4, r5]
 8020ce2:	604b      	str	r3, [r1, #4]
 8020ce4:	4630      	mov	r0, r6
 8020ce6:	f000 f82f 	bl	8020d48 <__malloc_unlock>
 8020cea:	f104 000b 	add.w	r0, r4, #11
 8020cee:	1d23      	adds	r3, r4, #4
 8020cf0:	f020 0007 	bic.w	r0, r0, #7
 8020cf4:	1ac2      	subs	r2, r0, r3
 8020cf6:	bf1c      	itt	ne
 8020cf8:	1a1b      	subne	r3, r3, r0
 8020cfa:	50a3      	strne	r3, [r4, r2]
 8020cfc:	e7af      	b.n	8020c5e <_malloc_r+0x22>
 8020cfe:	6862      	ldr	r2, [r4, #4]
 8020d00:	42a3      	cmp	r3, r4
 8020d02:	bf0c      	ite	eq
 8020d04:	f8c8 2000 	streq.w	r2, [r8]
 8020d08:	605a      	strne	r2, [r3, #4]
 8020d0a:	e7eb      	b.n	8020ce4 <_malloc_r+0xa8>
 8020d0c:	4623      	mov	r3, r4
 8020d0e:	6864      	ldr	r4, [r4, #4]
 8020d10:	e7ae      	b.n	8020c70 <_malloc_r+0x34>
 8020d12:	463c      	mov	r4, r7
 8020d14:	687f      	ldr	r7, [r7, #4]
 8020d16:	e7b6      	b.n	8020c86 <_malloc_r+0x4a>
 8020d18:	461a      	mov	r2, r3
 8020d1a:	685b      	ldr	r3, [r3, #4]
 8020d1c:	42a3      	cmp	r3, r4
 8020d1e:	d1fb      	bne.n	8020d18 <_malloc_r+0xdc>
 8020d20:	2300      	movs	r3, #0
 8020d22:	6053      	str	r3, [r2, #4]
 8020d24:	e7de      	b.n	8020ce4 <_malloc_r+0xa8>
 8020d26:	230c      	movs	r3, #12
 8020d28:	6033      	str	r3, [r6, #0]
 8020d2a:	4630      	mov	r0, r6
 8020d2c:	f000 f80c 	bl	8020d48 <__malloc_unlock>
 8020d30:	e794      	b.n	8020c5c <_malloc_r+0x20>
 8020d32:	6005      	str	r5, [r0, #0]
 8020d34:	e7d6      	b.n	8020ce4 <_malloc_r+0xa8>
 8020d36:	bf00      	nop
 8020d38:	2002d98c 	.word	0x2002d98c

08020d3c <__malloc_lock>:
 8020d3c:	4801      	ldr	r0, [pc, #4]	@ (8020d44 <__malloc_lock+0x8>)
 8020d3e:	f7ff beda 	b.w	8020af6 <__retarget_lock_acquire_recursive>
 8020d42:	bf00      	nop
 8020d44:	2002d984 	.word	0x2002d984

08020d48 <__malloc_unlock>:
 8020d48:	4801      	ldr	r0, [pc, #4]	@ (8020d50 <__malloc_unlock+0x8>)
 8020d4a:	f7ff bed5 	b.w	8020af8 <__retarget_lock_release_recursive>
 8020d4e:	bf00      	nop
 8020d50:	2002d984 	.word	0x2002d984

08020d54 <__sfputc_r>:
 8020d54:	6893      	ldr	r3, [r2, #8]
 8020d56:	3b01      	subs	r3, #1
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	b410      	push	{r4}
 8020d5c:	6093      	str	r3, [r2, #8]
 8020d5e:	da08      	bge.n	8020d72 <__sfputc_r+0x1e>
 8020d60:	6994      	ldr	r4, [r2, #24]
 8020d62:	42a3      	cmp	r3, r4
 8020d64:	db01      	blt.n	8020d6a <__sfputc_r+0x16>
 8020d66:	290a      	cmp	r1, #10
 8020d68:	d103      	bne.n	8020d72 <__sfputc_r+0x1e>
 8020d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020d6e:	f7ff bd4c 	b.w	802080a <__swbuf_r>
 8020d72:	6813      	ldr	r3, [r2, #0]
 8020d74:	1c58      	adds	r0, r3, #1
 8020d76:	6010      	str	r0, [r2, #0]
 8020d78:	7019      	strb	r1, [r3, #0]
 8020d7a:	4608      	mov	r0, r1
 8020d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020d80:	4770      	bx	lr

08020d82 <__sfputs_r>:
 8020d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d84:	4606      	mov	r6, r0
 8020d86:	460f      	mov	r7, r1
 8020d88:	4614      	mov	r4, r2
 8020d8a:	18d5      	adds	r5, r2, r3
 8020d8c:	42ac      	cmp	r4, r5
 8020d8e:	d101      	bne.n	8020d94 <__sfputs_r+0x12>
 8020d90:	2000      	movs	r0, #0
 8020d92:	e007      	b.n	8020da4 <__sfputs_r+0x22>
 8020d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d98:	463a      	mov	r2, r7
 8020d9a:	4630      	mov	r0, r6
 8020d9c:	f7ff ffda 	bl	8020d54 <__sfputc_r>
 8020da0:	1c43      	adds	r3, r0, #1
 8020da2:	d1f3      	bne.n	8020d8c <__sfputs_r+0xa>
 8020da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020da8 <_vfiprintf_r>:
 8020da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dac:	460d      	mov	r5, r1
 8020dae:	b09d      	sub	sp, #116	@ 0x74
 8020db0:	4614      	mov	r4, r2
 8020db2:	4698      	mov	r8, r3
 8020db4:	4606      	mov	r6, r0
 8020db6:	b118      	cbz	r0, 8020dc0 <_vfiprintf_r+0x18>
 8020db8:	6a03      	ldr	r3, [r0, #32]
 8020dba:	b90b      	cbnz	r3, 8020dc0 <_vfiprintf_r+0x18>
 8020dbc:	f7ff fc34 	bl	8020628 <__sinit>
 8020dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020dc2:	07d9      	lsls	r1, r3, #31
 8020dc4:	d405      	bmi.n	8020dd2 <_vfiprintf_r+0x2a>
 8020dc6:	89ab      	ldrh	r3, [r5, #12]
 8020dc8:	059a      	lsls	r2, r3, #22
 8020dca:	d402      	bmi.n	8020dd2 <_vfiprintf_r+0x2a>
 8020dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020dce:	f7ff fe92 	bl	8020af6 <__retarget_lock_acquire_recursive>
 8020dd2:	89ab      	ldrh	r3, [r5, #12]
 8020dd4:	071b      	lsls	r3, r3, #28
 8020dd6:	d501      	bpl.n	8020ddc <_vfiprintf_r+0x34>
 8020dd8:	692b      	ldr	r3, [r5, #16]
 8020dda:	b99b      	cbnz	r3, 8020e04 <_vfiprintf_r+0x5c>
 8020ddc:	4629      	mov	r1, r5
 8020dde:	4630      	mov	r0, r6
 8020de0:	f7ff fd52 	bl	8020888 <__swsetup_r>
 8020de4:	b170      	cbz	r0, 8020e04 <_vfiprintf_r+0x5c>
 8020de6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020de8:	07dc      	lsls	r4, r3, #31
 8020dea:	d504      	bpl.n	8020df6 <_vfiprintf_r+0x4e>
 8020dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020df0:	b01d      	add	sp, #116	@ 0x74
 8020df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020df6:	89ab      	ldrh	r3, [r5, #12]
 8020df8:	0598      	lsls	r0, r3, #22
 8020dfa:	d4f7      	bmi.n	8020dec <_vfiprintf_r+0x44>
 8020dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020dfe:	f7ff fe7b 	bl	8020af8 <__retarget_lock_release_recursive>
 8020e02:	e7f3      	b.n	8020dec <_vfiprintf_r+0x44>
 8020e04:	2300      	movs	r3, #0
 8020e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e08:	2320      	movs	r3, #32
 8020e0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020e12:	2330      	movs	r3, #48	@ 0x30
 8020e14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020fc4 <_vfiprintf_r+0x21c>
 8020e18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020e1c:	f04f 0901 	mov.w	r9, #1
 8020e20:	4623      	mov	r3, r4
 8020e22:	469a      	mov	sl, r3
 8020e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020e28:	b10a      	cbz	r2, 8020e2e <_vfiprintf_r+0x86>
 8020e2a:	2a25      	cmp	r2, #37	@ 0x25
 8020e2c:	d1f9      	bne.n	8020e22 <_vfiprintf_r+0x7a>
 8020e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8020e32:	d00b      	beq.n	8020e4c <_vfiprintf_r+0xa4>
 8020e34:	465b      	mov	r3, fp
 8020e36:	4622      	mov	r2, r4
 8020e38:	4629      	mov	r1, r5
 8020e3a:	4630      	mov	r0, r6
 8020e3c:	f7ff ffa1 	bl	8020d82 <__sfputs_r>
 8020e40:	3001      	adds	r0, #1
 8020e42:	f000 80a7 	beq.w	8020f94 <_vfiprintf_r+0x1ec>
 8020e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020e48:	445a      	add	r2, fp
 8020e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8020e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	f000 809f 	beq.w	8020f94 <_vfiprintf_r+0x1ec>
 8020e56:	2300      	movs	r3, #0
 8020e58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020e60:	f10a 0a01 	add.w	sl, sl, #1
 8020e64:	9304      	str	r3, [sp, #16]
 8020e66:	9307      	str	r3, [sp, #28]
 8020e68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020e6e:	4654      	mov	r4, sl
 8020e70:	2205      	movs	r2, #5
 8020e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e76:	4853      	ldr	r0, [pc, #332]	@ (8020fc4 <_vfiprintf_r+0x21c>)
 8020e78:	f7df f9ca 	bl	8000210 <memchr>
 8020e7c:	9a04      	ldr	r2, [sp, #16]
 8020e7e:	b9d8      	cbnz	r0, 8020eb8 <_vfiprintf_r+0x110>
 8020e80:	06d1      	lsls	r1, r2, #27
 8020e82:	bf44      	itt	mi
 8020e84:	2320      	movmi	r3, #32
 8020e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020e8a:	0713      	lsls	r3, r2, #28
 8020e8c:	bf44      	itt	mi
 8020e8e:	232b      	movmi	r3, #43	@ 0x2b
 8020e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020e94:	f89a 3000 	ldrb.w	r3, [sl]
 8020e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8020e9a:	d015      	beq.n	8020ec8 <_vfiprintf_r+0x120>
 8020e9c:	9a07      	ldr	r2, [sp, #28]
 8020e9e:	4654      	mov	r4, sl
 8020ea0:	2000      	movs	r0, #0
 8020ea2:	f04f 0c0a 	mov.w	ip, #10
 8020ea6:	4621      	mov	r1, r4
 8020ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020eac:	3b30      	subs	r3, #48	@ 0x30
 8020eae:	2b09      	cmp	r3, #9
 8020eb0:	d94b      	bls.n	8020f4a <_vfiprintf_r+0x1a2>
 8020eb2:	b1b0      	cbz	r0, 8020ee2 <_vfiprintf_r+0x13a>
 8020eb4:	9207      	str	r2, [sp, #28]
 8020eb6:	e014      	b.n	8020ee2 <_vfiprintf_r+0x13a>
 8020eb8:	eba0 0308 	sub.w	r3, r0, r8
 8020ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8020ec0:	4313      	orrs	r3, r2
 8020ec2:	9304      	str	r3, [sp, #16]
 8020ec4:	46a2      	mov	sl, r4
 8020ec6:	e7d2      	b.n	8020e6e <_vfiprintf_r+0xc6>
 8020ec8:	9b03      	ldr	r3, [sp, #12]
 8020eca:	1d19      	adds	r1, r3, #4
 8020ecc:	681b      	ldr	r3, [r3, #0]
 8020ece:	9103      	str	r1, [sp, #12]
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	bfbb      	ittet	lt
 8020ed4:	425b      	neglt	r3, r3
 8020ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8020eda:	9307      	strge	r3, [sp, #28]
 8020edc:	9307      	strlt	r3, [sp, #28]
 8020ede:	bfb8      	it	lt
 8020ee0:	9204      	strlt	r2, [sp, #16]
 8020ee2:	7823      	ldrb	r3, [r4, #0]
 8020ee4:	2b2e      	cmp	r3, #46	@ 0x2e
 8020ee6:	d10a      	bne.n	8020efe <_vfiprintf_r+0x156>
 8020ee8:	7863      	ldrb	r3, [r4, #1]
 8020eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8020eec:	d132      	bne.n	8020f54 <_vfiprintf_r+0x1ac>
 8020eee:	9b03      	ldr	r3, [sp, #12]
 8020ef0:	1d1a      	adds	r2, r3, #4
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	9203      	str	r2, [sp, #12]
 8020ef6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020efa:	3402      	adds	r4, #2
 8020efc:	9305      	str	r3, [sp, #20]
 8020efe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020fd4 <_vfiprintf_r+0x22c>
 8020f02:	7821      	ldrb	r1, [r4, #0]
 8020f04:	2203      	movs	r2, #3
 8020f06:	4650      	mov	r0, sl
 8020f08:	f7df f982 	bl	8000210 <memchr>
 8020f0c:	b138      	cbz	r0, 8020f1e <_vfiprintf_r+0x176>
 8020f0e:	9b04      	ldr	r3, [sp, #16]
 8020f10:	eba0 000a 	sub.w	r0, r0, sl
 8020f14:	2240      	movs	r2, #64	@ 0x40
 8020f16:	4082      	lsls	r2, r0
 8020f18:	4313      	orrs	r3, r2
 8020f1a:	3401      	adds	r4, #1
 8020f1c:	9304      	str	r3, [sp, #16]
 8020f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f22:	4829      	ldr	r0, [pc, #164]	@ (8020fc8 <_vfiprintf_r+0x220>)
 8020f24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020f28:	2206      	movs	r2, #6
 8020f2a:	f7df f971 	bl	8000210 <memchr>
 8020f2e:	2800      	cmp	r0, #0
 8020f30:	d03f      	beq.n	8020fb2 <_vfiprintf_r+0x20a>
 8020f32:	4b26      	ldr	r3, [pc, #152]	@ (8020fcc <_vfiprintf_r+0x224>)
 8020f34:	bb1b      	cbnz	r3, 8020f7e <_vfiprintf_r+0x1d6>
 8020f36:	9b03      	ldr	r3, [sp, #12]
 8020f38:	3307      	adds	r3, #7
 8020f3a:	f023 0307 	bic.w	r3, r3, #7
 8020f3e:	3308      	adds	r3, #8
 8020f40:	9303      	str	r3, [sp, #12]
 8020f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f44:	443b      	add	r3, r7
 8020f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f48:	e76a      	b.n	8020e20 <_vfiprintf_r+0x78>
 8020f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8020f4e:	460c      	mov	r4, r1
 8020f50:	2001      	movs	r0, #1
 8020f52:	e7a8      	b.n	8020ea6 <_vfiprintf_r+0xfe>
 8020f54:	2300      	movs	r3, #0
 8020f56:	3401      	adds	r4, #1
 8020f58:	9305      	str	r3, [sp, #20]
 8020f5a:	4619      	mov	r1, r3
 8020f5c:	f04f 0c0a 	mov.w	ip, #10
 8020f60:	4620      	mov	r0, r4
 8020f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020f66:	3a30      	subs	r2, #48	@ 0x30
 8020f68:	2a09      	cmp	r2, #9
 8020f6a:	d903      	bls.n	8020f74 <_vfiprintf_r+0x1cc>
 8020f6c:	2b00      	cmp	r3, #0
 8020f6e:	d0c6      	beq.n	8020efe <_vfiprintf_r+0x156>
 8020f70:	9105      	str	r1, [sp, #20]
 8020f72:	e7c4      	b.n	8020efe <_vfiprintf_r+0x156>
 8020f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8020f78:	4604      	mov	r4, r0
 8020f7a:	2301      	movs	r3, #1
 8020f7c:	e7f0      	b.n	8020f60 <_vfiprintf_r+0x1b8>
 8020f7e:	ab03      	add	r3, sp, #12
 8020f80:	9300      	str	r3, [sp, #0]
 8020f82:	462a      	mov	r2, r5
 8020f84:	4b12      	ldr	r3, [pc, #72]	@ (8020fd0 <_vfiprintf_r+0x228>)
 8020f86:	a904      	add	r1, sp, #16
 8020f88:	4630      	mov	r0, r6
 8020f8a:	f3af 8000 	nop.w
 8020f8e:	4607      	mov	r7, r0
 8020f90:	1c78      	adds	r0, r7, #1
 8020f92:	d1d6      	bne.n	8020f42 <_vfiprintf_r+0x19a>
 8020f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020f96:	07d9      	lsls	r1, r3, #31
 8020f98:	d405      	bmi.n	8020fa6 <_vfiprintf_r+0x1fe>
 8020f9a:	89ab      	ldrh	r3, [r5, #12]
 8020f9c:	059a      	lsls	r2, r3, #22
 8020f9e:	d402      	bmi.n	8020fa6 <_vfiprintf_r+0x1fe>
 8020fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020fa2:	f7ff fda9 	bl	8020af8 <__retarget_lock_release_recursive>
 8020fa6:	89ab      	ldrh	r3, [r5, #12]
 8020fa8:	065b      	lsls	r3, r3, #25
 8020faa:	f53f af1f 	bmi.w	8020dec <_vfiprintf_r+0x44>
 8020fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020fb0:	e71e      	b.n	8020df0 <_vfiprintf_r+0x48>
 8020fb2:	ab03      	add	r3, sp, #12
 8020fb4:	9300      	str	r3, [sp, #0]
 8020fb6:	462a      	mov	r2, r5
 8020fb8:	4b05      	ldr	r3, [pc, #20]	@ (8020fd0 <_vfiprintf_r+0x228>)
 8020fba:	a904      	add	r1, sp, #16
 8020fbc:	4630      	mov	r0, r6
 8020fbe:	f000 f879 	bl	80210b4 <_printf_i>
 8020fc2:	e7e4      	b.n	8020f8e <_vfiprintf_r+0x1e6>
 8020fc4:	08026825 	.word	0x08026825
 8020fc8:	0802682f 	.word	0x0802682f
 8020fcc:	00000000 	.word	0x00000000
 8020fd0:	08020d83 	.word	0x08020d83
 8020fd4:	0802682b 	.word	0x0802682b

08020fd8 <_printf_common>:
 8020fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020fdc:	4616      	mov	r6, r2
 8020fde:	4698      	mov	r8, r3
 8020fe0:	688a      	ldr	r2, [r1, #8]
 8020fe2:	690b      	ldr	r3, [r1, #16]
 8020fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020fe8:	4293      	cmp	r3, r2
 8020fea:	bfb8      	it	lt
 8020fec:	4613      	movlt	r3, r2
 8020fee:	6033      	str	r3, [r6, #0]
 8020ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020ff4:	4607      	mov	r7, r0
 8020ff6:	460c      	mov	r4, r1
 8020ff8:	b10a      	cbz	r2, 8020ffe <_printf_common+0x26>
 8020ffa:	3301      	adds	r3, #1
 8020ffc:	6033      	str	r3, [r6, #0]
 8020ffe:	6823      	ldr	r3, [r4, #0]
 8021000:	0699      	lsls	r1, r3, #26
 8021002:	bf42      	ittt	mi
 8021004:	6833      	ldrmi	r3, [r6, #0]
 8021006:	3302      	addmi	r3, #2
 8021008:	6033      	strmi	r3, [r6, #0]
 802100a:	6825      	ldr	r5, [r4, #0]
 802100c:	f015 0506 	ands.w	r5, r5, #6
 8021010:	d106      	bne.n	8021020 <_printf_common+0x48>
 8021012:	f104 0a19 	add.w	sl, r4, #25
 8021016:	68e3      	ldr	r3, [r4, #12]
 8021018:	6832      	ldr	r2, [r6, #0]
 802101a:	1a9b      	subs	r3, r3, r2
 802101c:	42ab      	cmp	r3, r5
 802101e:	dc26      	bgt.n	802106e <_printf_common+0x96>
 8021020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021024:	6822      	ldr	r2, [r4, #0]
 8021026:	3b00      	subs	r3, #0
 8021028:	bf18      	it	ne
 802102a:	2301      	movne	r3, #1
 802102c:	0692      	lsls	r2, r2, #26
 802102e:	d42b      	bmi.n	8021088 <_printf_common+0xb0>
 8021030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021034:	4641      	mov	r1, r8
 8021036:	4638      	mov	r0, r7
 8021038:	47c8      	blx	r9
 802103a:	3001      	adds	r0, #1
 802103c:	d01e      	beq.n	802107c <_printf_common+0xa4>
 802103e:	6823      	ldr	r3, [r4, #0]
 8021040:	6922      	ldr	r2, [r4, #16]
 8021042:	f003 0306 	and.w	r3, r3, #6
 8021046:	2b04      	cmp	r3, #4
 8021048:	bf02      	ittt	eq
 802104a:	68e5      	ldreq	r5, [r4, #12]
 802104c:	6833      	ldreq	r3, [r6, #0]
 802104e:	1aed      	subeq	r5, r5, r3
 8021050:	68a3      	ldr	r3, [r4, #8]
 8021052:	bf0c      	ite	eq
 8021054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021058:	2500      	movne	r5, #0
 802105a:	4293      	cmp	r3, r2
 802105c:	bfc4      	itt	gt
 802105e:	1a9b      	subgt	r3, r3, r2
 8021060:	18ed      	addgt	r5, r5, r3
 8021062:	2600      	movs	r6, #0
 8021064:	341a      	adds	r4, #26
 8021066:	42b5      	cmp	r5, r6
 8021068:	d11a      	bne.n	80210a0 <_printf_common+0xc8>
 802106a:	2000      	movs	r0, #0
 802106c:	e008      	b.n	8021080 <_printf_common+0xa8>
 802106e:	2301      	movs	r3, #1
 8021070:	4652      	mov	r2, sl
 8021072:	4641      	mov	r1, r8
 8021074:	4638      	mov	r0, r7
 8021076:	47c8      	blx	r9
 8021078:	3001      	adds	r0, #1
 802107a:	d103      	bne.n	8021084 <_printf_common+0xac>
 802107c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021084:	3501      	adds	r5, #1
 8021086:	e7c6      	b.n	8021016 <_printf_common+0x3e>
 8021088:	18e1      	adds	r1, r4, r3
 802108a:	1c5a      	adds	r2, r3, #1
 802108c:	2030      	movs	r0, #48	@ 0x30
 802108e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021092:	4422      	add	r2, r4
 8021094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802109c:	3302      	adds	r3, #2
 802109e:	e7c7      	b.n	8021030 <_printf_common+0x58>
 80210a0:	2301      	movs	r3, #1
 80210a2:	4622      	mov	r2, r4
 80210a4:	4641      	mov	r1, r8
 80210a6:	4638      	mov	r0, r7
 80210a8:	47c8      	blx	r9
 80210aa:	3001      	adds	r0, #1
 80210ac:	d0e6      	beq.n	802107c <_printf_common+0xa4>
 80210ae:	3601      	adds	r6, #1
 80210b0:	e7d9      	b.n	8021066 <_printf_common+0x8e>
	...

080210b4 <_printf_i>:
 80210b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80210b8:	7e0f      	ldrb	r7, [r1, #24]
 80210ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80210bc:	2f78      	cmp	r7, #120	@ 0x78
 80210be:	4691      	mov	r9, r2
 80210c0:	4680      	mov	r8, r0
 80210c2:	460c      	mov	r4, r1
 80210c4:	469a      	mov	sl, r3
 80210c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80210ca:	d807      	bhi.n	80210dc <_printf_i+0x28>
 80210cc:	2f62      	cmp	r7, #98	@ 0x62
 80210ce:	d80a      	bhi.n	80210e6 <_printf_i+0x32>
 80210d0:	2f00      	cmp	r7, #0
 80210d2:	f000 80d1 	beq.w	8021278 <_printf_i+0x1c4>
 80210d6:	2f58      	cmp	r7, #88	@ 0x58
 80210d8:	f000 80b8 	beq.w	802124c <_printf_i+0x198>
 80210dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80210e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80210e4:	e03a      	b.n	802115c <_printf_i+0xa8>
 80210e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80210ea:	2b15      	cmp	r3, #21
 80210ec:	d8f6      	bhi.n	80210dc <_printf_i+0x28>
 80210ee:	a101      	add	r1, pc, #4	@ (adr r1, 80210f4 <_printf_i+0x40>)
 80210f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80210f4:	0802114d 	.word	0x0802114d
 80210f8:	08021161 	.word	0x08021161
 80210fc:	080210dd 	.word	0x080210dd
 8021100:	080210dd 	.word	0x080210dd
 8021104:	080210dd 	.word	0x080210dd
 8021108:	080210dd 	.word	0x080210dd
 802110c:	08021161 	.word	0x08021161
 8021110:	080210dd 	.word	0x080210dd
 8021114:	080210dd 	.word	0x080210dd
 8021118:	080210dd 	.word	0x080210dd
 802111c:	080210dd 	.word	0x080210dd
 8021120:	0802125f 	.word	0x0802125f
 8021124:	0802118b 	.word	0x0802118b
 8021128:	08021219 	.word	0x08021219
 802112c:	080210dd 	.word	0x080210dd
 8021130:	080210dd 	.word	0x080210dd
 8021134:	08021281 	.word	0x08021281
 8021138:	080210dd 	.word	0x080210dd
 802113c:	0802118b 	.word	0x0802118b
 8021140:	080210dd 	.word	0x080210dd
 8021144:	080210dd 	.word	0x080210dd
 8021148:	08021221 	.word	0x08021221
 802114c:	6833      	ldr	r3, [r6, #0]
 802114e:	1d1a      	adds	r2, r3, #4
 8021150:	681b      	ldr	r3, [r3, #0]
 8021152:	6032      	str	r2, [r6, #0]
 8021154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802115c:	2301      	movs	r3, #1
 802115e:	e09c      	b.n	802129a <_printf_i+0x1e6>
 8021160:	6833      	ldr	r3, [r6, #0]
 8021162:	6820      	ldr	r0, [r4, #0]
 8021164:	1d19      	adds	r1, r3, #4
 8021166:	6031      	str	r1, [r6, #0]
 8021168:	0606      	lsls	r6, r0, #24
 802116a:	d501      	bpl.n	8021170 <_printf_i+0xbc>
 802116c:	681d      	ldr	r5, [r3, #0]
 802116e:	e003      	b.n	8021178 <_printf_i+0xc4>
 8021170:	0645      	lsls	r5, r0, #25
 8021172:	d5fb      	bpl.n	802116c <_printf_i+0xb8>
 8021174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021178:	2d00      	cmp	r5, #0
 802117a:	da03      	bge.n	8021184 <_printf_i+0xd0>
 802117c:	232d      	movs	r3, #45	@ 0x2d
 802117e:	426d      	negs	r5, r5
 8021180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021184:	4858      	ldr	r0, [pc, #352]	@ (80212e8 <_printf_i+0x234>)
 8021186:	230a      	movs	r3, #10
 8021188:	e011      	b.n	80211ae <_printf_i+0xfa>
 802118a:	6821      	ldr	r1, [r4, #0]
 802118c:	6833      	ldr	r3, [r6, #0]
 802118e:	0608      	lsls	r0, r1, #24
 8021190:	f853 5b04 	ldr.w	r5, [r3], #4
 8021194:	d402      	bmi.n	802119c <_printf_i+0xe8>
 8021196:	0649      	lsls	r1, r1, #25
 8021198:	bf48      	it	mi
 802119a:	b2ad      	uxthmi	r5, r5
 802119c:	2f6f      	cmp	r7, #111	@ 0x6f
 802119e:	4852      	ldr	r0, [pc, #328]	@ (80212e8 <_printf_i+0x234>)
 80211a0:	6033      	str	r3, [r6, #0]
 80211a2:	bf14      	ite	ne
 80211a4:	230a      	movne	r3, #10
 80211a6:	2308      	moveq	r3, #8
 80211a8:	2100      	movs	r1, #0
 80211aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80211ae:	6866      	ldr	r6, [r4, #4]
 80211b0:	60a6      	str	r6, [r4, #8]
 80211b2:	2e00      	cmp	r6, #0
 80211b4:	db05      	blt.n	80211c2 <_printf_i+0x10e>
 80211b6:	6821      	ldr	r1, [r4, #0]
 80211b8:	432e      	orrs	r6, r5
 80211ba:	f021 0104 	bic.w	r1, r1, #4
 80211be:	6021      	str	r1, [r4, #0]
 80211c0:	d04b      	beq.n	802125a <_printf_i+0x1a6>
 80211c2:	4616      	mov	r6, r2
 80211c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80211c8:	fb03 5711 	mls	r7, r3, r1, r5
 80211cc:	5dc7      	ldrb	r7, [r0, r7]
 80211ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80211d2:	462f      	mov	r7, r5
 80211d4:	42bb      	cmp	r3, r7
 80211d6:	460d      	mov	r5, r1
 80211d8:	d9f4      	bls.n	80211c4 <_printf_i+0x110>
 80211da:	2b08      	cmp	r3, #8
 80211dc:	d10b      	bne.n	80211f6 <_printf_i+0x142>
 80211de:	6823      	ldr	r3, [r4, #0]
 80211e0:	07df      	lsls	r7, r3, #31
 80211e2:	d508      	bpl.n	80211f6 <_printf_i+0x142>
 80211e4:	6923      	ldr	r3, [r4, #16]
 80211e6:	6861      	ldr	r1, [r4, #4]
 80211e8:	4299      	cmp	r1, r3
 80211ea:	bfde      	ittt	le
 80211ec:	2330      	movle	r3, #48	@ 0x30
 80211ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80211f2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80211f6:	1b92      	subs	r2, r2, r6
 80211f8:	6122      	str	r2, [r4, #16]
 80211fa:	f8cd a000 	str.w	sl, [sp]
 80211fe:	464b      	mov	r3, r9
 8021200:	aa03      	add	r2, sp, #12
 8021202:	4621      	mov	r1, r4
 8021204:	4640      	mov	r0, r8
 8021206:	f7ff fee7 	bl	8020fd8 <_printf_common>
 802120a:	3001      	adds	r0, #1
 802120c:	d14a      	bne.n	80212a4 <_printf_i+0x1f0>
 802120e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021212:	b004      	add	sp, #16
 8021214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021218:	6823      	ldr	r3, [r4, #0]
 802121a:	f043 0320 	orr.w	r3, r3, #32
 802121e:	6023      	str	r3, [r4, #0]
 8021220:	4832      	ldr	r0, [pc, #200]	@ (80212ec <_printf_i+0x238>)
 8021222:	2778      	movs	r7, #120	@ 0x78
 8021224:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021228:	6823      	ldr	r3, [r4, #0]
 802122a:	6831      	ldr	r1, [r6, #0]
 802122c:	061f      	lsls	r7, r3, #24
 802122e:	f851 5b04 	ldr.w	r5, [r1], #4
 8021232:	d402      	bmi.n	802123a <_printf_i+0x186>
 8021234:	065f      	lsls	r7, r3, #25
 8021236:	bf48      	it	mi
 8021238:	b2ad      	uxthmi	r5, r5
 802123a:	6031      	str	r1, [r6, #0]
 802123c:	07d9      	lsls	r1, r3, #31
 802123e:	bf44      	itt	mi
 8021240:	f043 0320 	orrmi.w	r3, r3, #32
 8021244:	6023      	strmi	r3, [r4, #0]
 8021246:	b11d      	cbz	r5, 8021250 <_printf_i+0x19c>
 8021248:	2310      	movs	r3, #16
 802124a:	e7ad      	b.n	80211a8 <_printf_i+0xf4>
 802124c:	4826      	ldr	r0, [pc, #152]	@ (80212e8 <_printf_i+0x234>)
 802124e:	e7e9      	b.n	8021224 <_printf_i+0x170>
 8021250:	6823      	ldr	r3, [r4, #0]
 8021252:	f023 0320 	bic.w	r3, r3, #32
 8021256:	6023      	str	r3, [r4, #0]
 8021258:	e7f6      	b.n	8021248 <_printf_i+0x194>
 802125a:	4616      	mov	r6, r2
 802125c:	e7bd      	b.n	80211da <_printf_i+0x126>
 802125e:	6833      	ldr	r3, [r6, #0]
 8021260:	6825      	ldr	r5, [r4, #0]
 8021262:	6961      	ldr	r1, [r4, #20]
 8021264:	1d18      	adds	r0, r3, #4
 8021266:	6030      	str	r0, [r6, #0]
 8021268:	062e      	lsls	r6, r5, #24
 802126a:	681b      	ldr	r3, [r3, #0]
 802126c:	d501      	bpl.n	8021272 <_printf_i+0x1be>
 802126e:	6019      	str	r1, [r3, #0]
 8021270:	e002      	b.n	8021278 <_printf_i+0x1c4>
 8021272:	0668      	lsls	r0, r5, #25
 8021274:	d5fb      	bpl.n	802126e <_printf_i+0x1ba>
 8021276:	8019      	strh	r1, [r3, #0]
 8021278:	2300      	movs	r3, #0
 802127a:	6123      	str	r3, [r4, #16]
 802127c:	4616      	mov	r6, r2
 802127e:	e7bc      	b.n	80211fa <_printf_i+0x146>
 8021280:	6833      	ldr	r3, [r6, #0]
 8021282:	1d1a      	adds	r2, r3, #4
 8021284:	6032      	str	r2, [r6, #0]
 8021286:	681e      	ldr	r6, [r3, #0]
 8021288:	6862      	ldr	r2, [r4, #4]
 802128a:	2100      	movs	r1, #0
 802128c:	4630      	mov	r0, r6
 802128e:	f7de ffbf 	bl	8000210 <memchr>
 8021292:	b108      	cbz	r0, 8021298 <_printf_i+0x1e4>
 8021294:	1b80      	subs	r0, r0, r6
 8021296:	6060      	str	r0, [r4, #4]
 8021298:	6863      	ldr	r3, [r4, #4]
 802129a:	6123      	str	r3, [r4, #16]
 802129c:	2300      	movs	r3, #0
 802129e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80212a2:	e7aa      	b.n	80211fa <_printf_i+0x146>
 80212a4:	6923      	ldr	r3, [r4, #16]
 80212a6:	4632      	mov	r2, r6
 80212a8:	4649      	mov	r1, r9
 80212aa:	4640      	mov	r0, r8
 80212ac:	47d0      	blx	sl
 80212ae:	3001      	adds	r0, #1
 80212b0:	d0ad      	beq.n	802120e <_printf_i+0x15a>
 80212b2:	6823      	ldr	r3, [r4, #0]
 80212b4:	079b      	lsls	r3, r3, #30
 80212b6:	d413      	bmi.n	80212e0 <_printf_i+0x22c>
 80212b8:	68e0      	ldr	r0, [r4, #12]
 80212ba:	9b03      	ldr	r3, [sp, #12]
 80212bc:	4298      	cmp	r0, r3
 80212be:	bfb8      	it	lt
 80212c0:	4618      	movlt	r0, r3
 80212c2:	e7a6      	b.n	8021212 <_printf_i+0x15e>
 80212c4:	2301      	movs	r3, #1
 80212c6:	4632      	mov	r2, r6
 80212c8:	4649      	mov	r1, r9
 80212ca:	4640      	mov	r0, r8
 80212cc:	47d0      	blx	sl
 80212ce:	3001      	adds	r0, #1
 80212d0:	d09d      	beq.n	802120e <_printf_i+0x15a>
 80212d2:	3501      	adds	r5, #1
 80212d4:	68e3      	ldr	r3, [r4, #12]
 80212d6:	9903      	ldr	r1, [sp, #12]
 80212d8:	1a5b      	subs	r3, r3, r1
 80212da:	42ab      	cmp	r3, r5
 80212dc:	dcf2      	bgt.n	80212c4 <_printf_i+0x210>
 80212de:	e7eb      	b.n	80212b8 <_printf_i+0x204>
 80212e0:	2500      	movs	r5, #0
 80212e2:	f104 0619 	add.w	r6, r4, #25
 80212e6:	e7f5      	b.n	80212d4 <_printf_i+0x220>
 80212e8:	08026836 	.word	0x08026836
 80212ec:	08026847 	.word	0x08026847

080212f0 <__sflush_r>:
 80212f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80212f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80212f8:	0716      	lsls	r6, r2, #28
 80212fa:	4605      	mov	r5, r0
 80212fc:	460c      	mov	r4, r1
 80212fe:	d454      	bmi.n	80213aa <__sflush_r+0xba>
 8021300:	684b      	ldr	r3, [r1, #4]
 8021302:	2b00      	cmp	r3, #0
 8021304:	dc02      	bgt.n	802130c <__sflush_r+0x1c>
 8021306:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021308:	2b00      	cmp	r3, #0
 802130a:	dd48      	ble.n	802139e <__sflush_r+0xae>
 802130c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802130e:	2e00      	cmp	r6, #0
 8021310:	d045      	beq.n	802139e <__sflush_r+0xae>
 8021312:	2300      	movs	r3, #0
 8021314:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021318:	682f      	ldr	r7, [r5, #0]
 802131a:	6a21      	ldr	r1, [r4, #32]
 802131c:	602b      	str	r3, [r5, #0]
 802131e:	d030      	beq.n	8021382 <__sflush_r+0x92>
 8021320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021322:	89a3      	ldrh	r3, [r4, #12]
 8021324:	0759      	lsls	r1, r3, #29
 8021326:	d505      	bpl.n	8021334 <__sflush_r+0x44>
 8021328:	6863      	ldr	r3, [r4, #4]
 802132a:	1ad2      	subs	r2, r2, r3
 802132c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802132e:	b10b      	cbz	r3, 8021334 <__sflush_r+0x44>
 8021330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021332:	1ad2      	subs	r2, r2, r3
 8021334:	2300      	movs	r3, #0
 8021336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021338:	6a21      	ldr	r1, [r4, #32]
 802133a:	4628      	mov	r0, r5
 802133c:	47b0      	blx	r6
 802133e:	1c43      	adds	r3, r0, #1
 8021340:	89a3      	ldrh	r3, [r4, #12]
 8021342:	d106      	bne.n	8021352 <__sflush_r+0x62>
 8021344:	6829      	ldr	r1, [r5, #0]
 8021346:	291d      	cmp	r1, #29
 8021348:	d82b      	bhi.n	80213a2 <__sflush_r+0xb2>
 802134a:	4a2a      	ldr	r2, [pc, #168]	@ (80213f4 <__sflush_r+0x104>)
 802134c:	40ca      	lsrs	r2, r1
 802134e:	07d6      	lsls	r6, r2, #31
 8021350:	d527      	bpl.n	80213a2 <__sflush_r+0xb2>
 8021352:	2200      	movs	r2, #0
 8021354:	6062      	str	r2, [r4, #4]
 8021356:	04d9      	lsls	r1, r3, #19
 8021358:	6922      	ldr	r2, [r4, #16]
 802135a:	6022      	str	r2, [r4, #0]
 802135c:	d504      	bpl.n	8021368 <__sflush_r+0x78>
 802135e:	1c42      	adds	r2, r0, #1
 8021360:	d101      	bne.n	8021366 <__sflush_r+0x76>
 8021362:	682b      	ldr	r3, [r5, #0]
 8021364:	b903      	cbnz	r3, 8021368 <__sflush_r+0x78>
 8021366:	6560      	str	r0, [r4, #84]	@ 0x54
 8021368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802136a:	602f      	str	r7, [r5, #0]
 802136c:	b1b9      	cbz	r1, 802139e <__sflush_r+0xae>
 802136e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021372:	4299      	cmp	r1, r3
 8021374:	d002      	beq.n	802137c <__sflush_r+0x8c>
 8021376:	4628      	mov	r0, r5
 8021378:	f7ff fbec 	bl	8020b54 <_free_r>
 802137c:	2300      	movs	r3, #0
 802137e:	6363      	str	r3, [r4, #52]	@ 0x34
 8021380:	e00d      	b.n	802139e <__sflush_r+0xae>
 8021382:	2301      	movs	r3, #1
 8021384:	4628      	mov	r0, r5
 8021386:	47b0      	blx	r6
 8021388:	4602      	mov	r2, r0
 802138a:	1c50      	adds	r0, r2, #1
 802138c:	d1c9      	bne.n	8021322 <__sflush_r+0x32>
 802138e:	682b      	ldr	r3, [r5, #0]
 8021390:	2b00      	cmp	r3, #0
 8021392:	d0c6      	beq.n	8021322 <__sflush_r+0x32>
 8021394:	2b1d      	cmp	r3, #29
 8021396:	d001      	beq.n	802139c <__sflush_r+0xac>
 8021398:	2b16      	cmp	r3, #22
 802139a:	d11e      	bne.n	80213da <__sflush_r+0xea>
 802139c:	602f      	str	r7, [r5, #0]
 802139e:	2000      	movs	r0, #0
 80213a0:	e022      	b.n	80213e8 <__sflush_r+0xf8>
 80213a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80213a6:	b21b      	sxth	r3, r3
 80213a8:	e01b      	b.n	80213e2 <__sflush_r+0xf2>
 80213aa:	690f      	ldr	r7, [r1, #16]
 80213ac:	2f00      	cmp	r7, #0
 80213ae:	d0f6      	beq.n	802139e <__sflush_r+0xae>
 80213b0:	0793      	lsls	r3, r2, #30
 80213b2:	680e      	ldr	r6, [r1, #0]
 80213b4:	bf08      	it	eq
 80213b6:	694b      	ldreq	r3, [r1, #20]
 80213b8:	600f      	str	r7, [r1, #0]
 80213ba:	bf18      	it	ne
 80213bc:	2300      	movne	r3, #0
 80213be:	eba6 0807 	sub.w	r8, r6, r7
 80213c2:	608b      	str	r3, [r1, #8]
 80213c4:	f1b8 0f00 	cmp.w	r8, #0
 80213c8:	dde9      	ble.n	802139e <__sflush_r+0xae>
 80213ca:	6a21      	ldr	r1, [r4, #32]
 80213cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80213ce:	4643      	mov	r3, r8
 80213d0:	463a      	mov	r2, r7
 80213d2:	4628      	mov	r0, r5
 80213d4:	47b0      	blx	r6
 80213d6:	2800      	cmp	r0, #0
 80213d8:	dc08      	bgt.n	80213ec <__sflush_r+0xfc>
 80213da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80213de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80213e2:	81a3      	strh	r3, [r4, #12]
 80213e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80213e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80213ec:	4407      	add	r7, r0
 80213ee:	eba8 0800 	sub.w	r8, r8, r0
 80213f2:	e7e7      	b.n	80213c4 <__sflush_r+0xd4>
 80213f4:	20400001 	.word	0x20400001

080213f8 <_fflush_r>:
 80213f8:	b538      	push	{r3, r4, r5, lr}
 80213fa:	690b      	ldr	r3, [r1, #16]
 80213fc:	4605      	mov	r5, r0
 80213fe:	460c      	mov	r4, r1
 8021400:	b913      	cbnz	r3, 8021408 <_fflush_r+0x10>
 8021402:	2500      	movs	r5, #0
 8021404:	4628      	mov	r0, r5
 8021406:	bd38      	pop	{r3, r4, r5, pc}
 8021408:	b118      	cbz	r0, 8021412 <_fflush_r+0x1a>
 802140a:	6a03      	ldr	r3, [r0, #32]
 802140c:	b90b      	cbnz	r3, 8021412 <_fflush_r+0x1a>
 802140e:	f7ff f90b 	bl	8020628 <__sinit>
 8021412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021416:	2b00      	cmp	r3, #0
 8021418:	d0f3      	beq.n	8021402 <_fflush_r+0xa>
 802141a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802141c:	07d0      	lsls	r0, r2, #31
 802141e:	d404      	bmi.n	802142a <_fflush_r+0x32>
 8021420:	0599      	lsls	r1, r3, #22
 8021422:	d402      	bmi.n	802142a <_fflush_r+0x32>
 8021424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021426:	f7ff fb66 	bl	8020af6 <__retarget_lock_acquire_recursive>
 802142a:	4628      	mov	r0, r5
 802142c:	4621      	mov	r1, r4
 802142e:	f7ff ff5f 	bl	80212f0 <__sflush_r>
 8021432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021434:	07da      	lsls	r2, r3, #31
 8021436:	4605      	mov	r5, r0
 8021438:	d4e4      	bmi.n	8021404 <_fflush_r+0xc>
 802143a:	89a3      	ldrh	r3, [r4, #12]
 802143c:	059b      	lsls	r3, r3, #22
 802143e:	d4e1      	bmi.n	8021404 <_fflush_r+0xc>
 8021440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021442:	f7ff fb59 	bl	8020af8 <__retarget_lock_release_recursive>
 8021446:	e7dd      	b.n	8021404 <_fflush_r+0xc>

08021448 <fiprintf>:
 8021448:	b40e      	push	{r1, r2, r3}
 802144a:	b503      	push	{r0, r1, lr}
 802144c:	4601      	mov	r1, r0
 802144e:	ab03      	add	r3, sp, #12
 8021450:	4805      	ldr	r0, [pc, #20]	@ (8021468 <fiprintf+0x20>)
 8021452:	f853 2b04 	ldr.w	r2, [r3], #4
 8021456:	6800      	ldr	r0, [r0, #0]
 8021458:	9301      	str	r3, [sp, #4]
 802145a:	f7ff fca5 	bl	8020da8 <_vfiprintf_r>
 802145e:	b002      	add	sp, #8
 8021460:	f85d eb04 	ldr.w	lr, [sp], #4
 8021464:	b003      	add	sp, #12
 8021466:	4770      	bx	lr
 8021468:	20000080 	.word	0x20000080

0802146c <__swhatbuf_r>:
 802146c:	b570      	push	{r4, r5, r6, lr}
 802146e:	460c      	mov	r4, r1
 8021470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021474:	2900      	cmp	r1, #0
 8021476:	b096      	sub	sp, #88	@ 0x58
 8021478:	4615      	mov	r5, r2
 802147a:	461e      	mov	r6, r3
 802147c:	da0d      	bge.n	802149a <__swhatbuf_r+0x2e>
 802147e:	89a3      	ldrh	r3, [r4, #12]
 8021480:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021484:	f04f 0100 	mov.w	r1, #0
 8021488:	bf14      	ite	ne
 802148a:	2340      	movne	r3, #64	@ 0x40
 802148c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021490:	2000      	movs	r0, #0
 8021492:	6031      	str	r1, [r6, #0]
 8021494:	602b      	str	r3, [r5, #0]
 8021496:	b016      	add	sp, #88	@ 0x58
 8021498:	bd70      	pop	{r4, r5, r6, pc}
 802149a:	466a      	mov	r2, sp
 802149c:	f000 f87c 	bl	8021598 <_fstat_r>
 80214a0:	2800      	cmp	r0, #0
 80214a2:	dbec      	blt.n	802147e <__swhatbuf_r+0x12>
 80214a4:	9901      	ldr	r1, [sp, #4]
 80214a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80214aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80214ae:	4259      	negs	r1, r3
 80214b0:	4159      	adcs	r1, r3
 80214b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80214b6:	e7eb      	b.n	8021490 <__swhatbuf_r+0x24>

080214b8 <__smakebuf_r>:
 80214b8:	898b      	ldrh	r3, [r1, #12]
 80214ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80214bc:	079d      	lsls	r5, r3, #30
 80214be:	4606      	mov	r6, r0
 80214c0:	460c      	mov	r4, r1
 80214c2:	d507      	bpl.n	80214d4 <__smakebuf_r+0x1c>
 80214c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80214c8:	6023      	str	r3, [r4, #0]
 80214ca:	6123      	str	r3, [r4, #16]
 80214cc:	2301      	movs	r3, #1
 80214ce:	6163      	str	r3, [r4, #20]
 80214d0:	b003      	add	sp, #12
 80214d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214d4:	ab01      	add	r3, sp, #4
 80214d6:	466a      	mov	r2, sp
 80214d8:	f7ff ffc8 	bl	802146c <__swhatbuf_r>
 80214dc:	9f00      	ldr	r7, [sp, #0]
 80214de:	4605      	mov	r5, r0
 80214e0:	4639      	mov	r1, r7
 80214e2:	4630      	mov	r0, r6
 80214e4:	f7ff fbaa 	bl	8020c3c <_malloc_r>
 80214e8:	b948      	cbnz	r0, 80214fe <__smakebuf_r+0x46>
 80214ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80214ee:	059a      	lsls	r2, r3, #22
 80214f0:	d4ee      	bmi.n	80214d0 <__smakebuf_r+0x18>
 80214f2:	f023 0303 	bic.w	r3, r3, #3
 80214f6:	f043 0302 	orr.w	r3, r3, #2
 80214fa:	81a3      	strh	r3, [r4, #12]
 80214fc:	e7e2      	b.n	80214c4 <__smakebuf_r+0xc>
 80214fe:	89a3      	ldrh	r3, [r4, #12]
 8021500:	6020      	str	r0, [r4, #0]
 8021502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021506:	81a3      	strh	r3, [r4, #12]
 8021508:	9b01      	ldr	r3, [sp, #4]
 802150a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802150e:	b15b      	cbz	r3, 8021528 <__smakebuf_r+0x70>
 8021510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021514:	4630      	mov	r0, r6
 8021516:	f000 f851 	bl	80215bc <_isatty_r>
 802151a:	b128      	cbz	r0, 8021528 <__smakebuf_r+0x70>
 802151c:	89a3      	ldrh	r3, [r4, #12]
 802151e:	f023 0303 	bic.w	r3, r3, #3
 8021522:	f043 0301 	orr.w	r3, r3, #1
 8021526:	81a3      	strh	r3, [r4, #12]
 8021528:	89a3      	ldrh	r3, [r4, #12]
 802152a:	431d      	orrs	r5, r3
 802152c:	81a5      	strh	r5, [r4, #12]
 802152e:	e7cf      	b.n	80214d0 <__smakebuf_r+0x18>

08021530 <_putc_r>:
 8021530:	b570      	push	{r4, r5, r6, lr}
 8021532:	460d      	mov	r5, r1
 8021534:	4614      	mov	r4, r2
 8021536:	4606      	mov	r6, r0
 8021538:	b118      	cbz	r0, 8021542 <_putc_r+0x12>
 802153a:	6a03      	ldr	r3, [r0, #32]
 802153c:	b90b      	cbnz	r3, 8021542 <_putc_r+0x12>
 802153e:	f7ff f873 	bl	8020628 <__sinit>
 8021542:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021544:	07d8      	lsls	r0, r3, #31
 8021546:	d405      	bmi.n	8021554 <_putc_r+0x24>
 8021548:	89a3      	ldrh	r3, [r4, #12]
 802154a:	0599      	lsls	r1, r3, #22
 802154c:	d402      	bmi.n	8021554 <_putc_r+0x24>
 802154e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021550:	f7ff fad1 	bl	8020af6 <__retarget_lock_acquire_recursive>
 8021554:	68a3      	ldr	r3, [r4, #8]
 8021556:	3b01      	subs	r3, #1
 8021558:	2b00      	cmp	r3, #0
 802155a:	60a3      	str	r3, [r4, #8]
 802155c:	da05      	bge.n	802156a <_putc_r+0x3a>
 802155e:	69a2      	ldr	r2, [r4, #24]
 8021560:	4293      	cmp	r3, r2
 8021562:	db12      	blt.n	802158a <_putc_r+0x5a>
 8021564:	b2eb      	uxtb	r3, r5
 8021566:	2b0a      	cmp	r3, #10
 8021568:	d00f      	beq.n	802158a <_putc_r+0x5a>
 802156a:	6823      	ldr	r3, [r4, #0]
 802156c:	1c5a      	adds	r2, r3, #1
 802156e:	6022      	str	r2, [r4, #0]
 8021570:	701d      	strb	r5, [r3, #0]
 8021572:	b2ed      	uxtb	r5, r5
 8021574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021576:	07da      	lsls	r2, r3, #31
 8021578:	d405      	bmi.n	8021586 <_putc_r+0x56>
 802157a:	89a3      	ldrh	r3, [r4, #12]
 802157c:	059b      	lsls	r3, r3, #22
 802157e:	d402      	bmi.n	8021586 <_putc_r+0x56>
 8021580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021582:	f7ff fab9 	bl	8020af8 <__retarget_lock_release_recursive>
 8021586:	4628      	mov	r0, r5
 8021588:	bd70      	pop	{r4, r5, r6, pc}
 802158a:	4629      	mov	r1, r5
 802158c:	4622      	mov	r2, r4
 802158e:	4630      	mov	r0, r6
 8021590:	f7ff f93b 	bl	802080a <__swbuf_r>
 8021594:	4605      	mov	r5, r0
 8021596:	e7ed      	b.n	8021574 <_putc_r+0x44>

08021598 <_fstat_r>:
 8021598:	b538      	push	{r3, r4, r5, lr}
 802159a:	4d07      	ldr	r5, [pc, #28]	@ (80215b8 <_fstat_r+0x20>)
 802159c:	2300      	movs	r3, #0
 802159e:	4604      	mov	r4, r0
 80215a0:	4608      	mov	r0, r1
 80215a2:	4611      	mov	r1, r2
 80215a4:	602b      	str	r3, [r5, #0]
 80215a6:	f7e0 fa31 	bl	8001a0c <_fstat>
 80215aa:	1c43      	adds	r3, r0, #1
 80215ac:	d102      	bne.n	80215b4 <_fstat_r+0x1c>
 80215ae:	682b      	ldr	r3, [r5, #0]
 80215b0:	b103      	cbz	r3, 80215b4 <_fstat_r+0x1c>
 80215b2:	6023      	str	r3, [r4, #0]
 80215b4:	bd38      	pop	{r3, r4, r5, pc}
 80215b6:	bf00      	nop
 80215b8:	2002d980 	.word	0x2002d980

080215bc <_isatty_r>:
 80215bc:	b538      	push	{r3, r4, r5, lr}
 80215be:	4d06      	ldr	r5, [pc, #24]	@ (80215d8 <_isatty_r+0x1c>)
 80215c0:	2300      	movs	r3, #0
 80215c2:	4604      	mov	r4, r0
 80215c4:	4608      	mov	r0, r1
 80215c6:	602b      	str	r3, [r5, #0]
 80215c8:	f7e0 fa30 	bl	8001a2c <_isatty>
 80215cc:	1c43      	adds	r3, r0, #1
 80215ce:	d102      	bne.n	80215d6 <_isatty_r+0x1a>
 80215d0:	682b      	ldr	r3, [r5, #0]
 80215d2:	b103      	cbz	r3, 80215d6 <_isatty_r+0x1a>
 80215d4:	6023      	str	r3, [r4, #0]
 80215d6:	bd38      	pop	{r3, r4, r5, pc}
 80215d8:	2002d980 	.word	0x2002d980

080215dc <_sbrk_r>:
 80215dc:	b538      	push	{r3, r4, r5, lr}
 80215de:	4d06      	ldr	r5, [pc, #24]	@ (80215f8 <_sbrk_r+0x1c>)
 80215e0:	2300      	movs	r3, #0
 80215e2:	4604      	mov	r4, r0
 80215e4:	4608      	mov	r0, r1
 80215e6:	602b      	str	r3, [r5, #0]
 80215e8:	f7e0 fa38 	bl	8001a5c <_sbrk>
 80215ec:	1c43      	adds	r3, r0, #1
 80215ee:	d102      	bne.n	80215f6 <_sbrk_r+0x1a>
 80215f0:	682b      	ldr	r3, [r5, #0]
 80215f2:	b103      	cbz	r3, 80215f6 <_sbrk_r+0x1a>
 80215f4:	6023      	str	r3, [r4, #0]
 80215f6:	bd38      	pop	{r3, r4, r5, pc}
 80215f8:	2002d980 	.word	0x2002d980

080215fc <abort>:
 80215fc:	b508      	push	{r3, lr}
 80215fe:	2006      	movs	r0, #6
 8021600:	f000 f82c 	bl	802165c <raise>
 8021604:	2001      	movs	r0, #1
 8021606:	f7e0 f9cd 	bl	80019a4 <_exit>

0802160a <_raise_r>:
 802160a:	291f      	cmp	r1, #31
 802160c:	b538      	push	{r3, r4, r5, lr}
 802160e:	4605      	mov	r5, r0
 8021610:	460c      	mov	r4, r1
 8021612:	d904      	bls.n	802161e <_raise_r+0x14>
 8021614:	2316      	movs	r3, #22
 8021616:	6003      	str	r3, [r0, #0]
 8021618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802161c:	bd38      	pop	{r3, r4, r5, pc}
 802161e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021620:	b112      	cbz	r2, 8021628 <_raise_r+0x1e>
 8021622:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021626:	b94b      	cbnz	r3, 802163c <_raise_r+0x32>
 8021628:	4628      	mov	r0, r5
 802162a:	f000 f831 	bl	8021690 <_getpid_r>
 802162e:	4622      	mov	r2, r4
 8021630:	4601      	mov	r1, r0
 8021632:	4628      	mov	r0, r5
 8021634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021638:	f000 b818 	b.w	802166c <_kill_r>
 802163c:	2b01      	cmp	r3, #1
 802163e:	d00a      	beq.n	8021656 <_raise_r+0x4c>
 8021640:	1c59      	adds	r1, r3, #1
 8021642:	d103      	bne.n	802164c <_raise_r+0x42>
 8021644:	2316      	movs	r3, #22
 8021646:	6003      	str	r3, [r0, #0]
 8021648:	2001      	movs	r0, #1
 802164a:	e7e7      	b.n	802161c <_raise_r+0x12>
 802164c:	2100      	movs	r1, #0
 802164e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021652:	4620      	mov	r0, r4
 8021654:	4798      	blx	r3
 8021656:	2000      	movs	r0, #0
 8021658:	e7e0      	b.n	802161c <_raise_r+0x12>
	...

0802165c <raise>:
 802165c:	4b02      	ldr	r3, [pc, #8]	@ (8021668 <raise+0xc>)
 802165e:	4601      	mov	r1, r0
 8021660:	6818      	ldr	r0, [r3, #0]
 8021662:	f7ff bfd2 	b.w	802160a <_raise_r>
 8021666:	bf00      	nop
 8021668:	20000080 	.word	0x20000080

0802166c <_kill_r>:
 802166c:	b538      	push	{r3, r4, r5, lr}
 802166e:	4d07      	ldr	r5, [pc, #28]	@ (802168c <_kill_r+0x20>)
 8021670:	2300      	movs	r3, #0
 8021672:	4604      	mov	r4, r0
 8021674:	4608      	mov	r0, r1
 8021676:	4611      	mov	r1, r2
 8021678:	602b      	str	r3, [r5, #0]
 802167a:	f7e0 f981 	bl	8001980 <_kill>
 802167e:	1c43      	adds	r3, r0, #1
 8021680:	d102      	bne.n	8021688 <_kill_r+0x1c>
 8021682:	682b      	ldr	r3, [r5, #0]
 8021684:	b103      	cbz	r3, 8021688 <_kill_r+0x1c>
 8021686:	6023      	str	r3, [r4, #0]
 8021688:	bd38      	pop	{r3, r4, r5, pc}
 802168a:	bf00      	nop
 802168c:	2002d980 	.word	0x2002d980

08021690 <_getpid_r>:
 8021690:	f7e0 b96e 	b.w	8001970 <_getpid>

08021694 <_init>:
 8021694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021696:	bf00      	nop
 8021698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802169a:	bc08      	pop	{r3}
 802169c:	469e      	mov	lr, r3
 802169e:	4770      	bx	lr

080216a0 <_fini>:
 80216a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216a2:	bf00      	nop
 80216a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80216a6:	bc08      	pop	{r3}
 80216a8:	469e      	mov	lr, r3
 80216aa:	4770      	bx	lr
