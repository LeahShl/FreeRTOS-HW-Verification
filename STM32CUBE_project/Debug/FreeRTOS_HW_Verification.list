
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b00  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f74  08017cd0  08017cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac44  0801ac44  0001c1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ac44  0801ac44  0001bc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac4c  0801ac4c  0001c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ac4c  0801ac4c  0001bc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ac50  0801ac50  0001bc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801ac54  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801ace0  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801ad80  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c7d0  200001cc  0801ae20  0001c1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00010004  2000c99c  0801ae20  0001c99c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001c1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000396b4  00000000  00000000  0001c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000901b  00000000  00000000  000558b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a90  00000000  00000000  0005e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002187  00000000  00000000  00061360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039c2a  00000000  00000000  000634e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004134d  00000000  00000000  0009d111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00120c57  00000000  00000000  000de45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ff0b5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b72c  00000000  00000000  001ff0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0020a824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017cb8 	.word	0x08017cb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08017cb8 	.word	0x08017cb8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 ff71 	bl	8002524 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fe74 	bl	8001334 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f001 ffa5 	bl	80025ac <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fe64 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001e8 	.word	0x200001e8
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 f989 	bl	80049fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fb65 	bl	8002dfc <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fdfc 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000230 	.word	0x20000230
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fa43 	bl	8002c18 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fdcc 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000290 	.word	0x20000290
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 f9ce 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 f9e7 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 f9c6 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 f9df 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 f9be 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 f9d7 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 f9b6 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 f9cf 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 f9ae 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 f9c7 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 f9a6 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 f9bf 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 f99e 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 f9b7 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 f996 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 f9af 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 f98e 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 f9a7 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 f986 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 f99f 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 f97e 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 f997 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 f976 	bl	8002bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 f98f 	bl	8002bfc <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <vApplicationGetIdleTaskMemory+0x2c>)
 8000914:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4a06      	ldr	r2, [pc, #24]	@ (8000934 <vApplicationGetIdleTaskMemory+0x30>)
 800091a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2280      	movs	r2, #128	@ 0x80
 8000920:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200002f8 	.word	0x200002f8
 8000934:	20000398 	.word	0x20000398

08000938 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b0e2      	sub	sp, #392	@ 0x188
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 800093e:	489e      	ldr	r0, [pc, #632]	@ (8000bb8 <MX_FREERTOS_Init+0x280>)
 8000940:	f016 fa5e 	bl	8016e00 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of inMsgQueue */
  osMessageQDef(inMsgQueue, 16, InMsg_t);
 8000944:	4b9d      	ldr	r3, [pc, #628]	@ (8000bbc <MX_FREERTOS_Init+0x284>)
 8000946:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 800094a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800094c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  inMsgQueueHandle = osMessageCreate(osMessageQ(inMsgQueue), NULL);
 8000950:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f009 f9c2 	bl	8009ce0 <osMessageCreate>
 800095c:	4603      	mov	r3, r0
 800095e:	4a98      	ldr	r2, [pc, #608]	@ (8000bc0 <MX_FREERTOS_Init+0x288>)
 8000960:	6013      	str	r3, [r2, #0]

  /* definition and creation of outMsgQueue */
  osMessageQDef(outMsgQueue, 16, OutMsg_t);
 8000962:	4b98      	ldr	r3, [pc, #608]	@ (8000bc4 <MX_FREERTOS_Init+0x28c>)
 8000964:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 8000968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  outMsgQueueHandle = osMessageCreate(osMessageQ(outMsgQueue), NULL);
 800096e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f009 f9b3 	bl	8009ce0 <osMessageCreate>
 800097a:	4603      	mov	r3, r0
 800097c:	4a92      	ldr	r2, [pc, #584]	@ (8000bc8 <MX_FREERTOS_Init+0x290>)
 800097e:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartQueue */
  osMessageQDef(uartQueue, 8, TestData_t);
 8000980:	4b92      	ldr	r3, [pc, #584]	@ (8000bcc <MX_FREERTOS_Init+0x294>)
 8000982:	f507 74ac 	add.w	r4, r7, #344	@ 0x158
 8000986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartQueueHandle = osMessageCreate(osMessageQ(uartQueue), NULL);
 800098c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f009 f9a4 	bl	8009ce0 <osMessageCreate>
 8000998:	4603      	mov	r3, r0
 800099a:	4a8d      	ldr	r2, [pc, #564]	@ (8000bd0 <MX_FREERTOS_Init+0x298>)
 800099c:	6013      	str	r3, [r2, #0]

  /* definition and creation of i2cQueue */
  osMessageQDef(i2cQueue, 8, TestData_t);
 800099e:	4b8b      	ldr	r3, [pc, #556]	@ (8000bcc <MX_FREERTOS_Init+0x294>)
 80009a0:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 80009a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  i2cQueueHandle = osMessageCreate(osMessageQ(i2cQueue), NULL);
 80009aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f009 f995 	bl	8009ce0 <osMessageCreate>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a86      	ldr	r2, [pc, #536]	@ (8000bd4 <MX_FREERTOS_Init+0x29c>)
 80009ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiQueue */
  osMessageQDef(spiQueue, 8, TestData_t);
 80009bc:	4b83      	ldr	r3, [pc, #524]	@ (8000bcc <MX_FREERTOS_Init+0x294>)
 80009be:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  spiQueueHandle = osMessageCreate(osMessageQ(spiQueue), NULL);
 80009c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f009 f986 	bl	8009ce0 <osMessageCreate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a80      	ldr	r2, [pc, #512]	@ (8000bd8 <MX_FREERTOS_Init+0x2a0>)
 80009d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 8, TestData_t);
 80009da:	4b7c      	ldr	r3, [pc, #496]	@ (8000bcc <MX_FREERTOS_Init+0x294>)
 80009dc:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80009e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 80009e6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f009 f977 	bl	8009ce0 <osMessageCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a79      	ldr	r2, [pc, #484]	@ (8000bdc <MX_FREERTOS_Init+0x2a4>)
 80009f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of timQueue */
  osMessageQDef(timQueue, 8, TestData_t);
 80009f8:	4b74      	ldr	r3, [pc, #464]	@ (8000bcc <MX_FREERTOS_Init+0x294>)
 80009fa:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 80009fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  timQueueHandle = osMessageCreate(osMessageQ(timQueue), NULL);
 8000a04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f009 f968 	bl	8009ce0 <osMessageCreate>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4a73      	ldr	r2, [pc, #460]	@ (8000be0 <MX_FREERTOS_Init+0x2a8>)
 8000a14:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a16:	4b73      	ldr	r3, [pc, #460]	@ (8000be4 <MX_FREERTOS_Init+0x2ac>)
 8000a18:	f107 04fc 	add.w	r4, r7, #252	@ 0xfc
 8000a1c:	461d      	mov	r5, r3
 8000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a2a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 ff96 	bl	8009962 <osThreadCreate>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a6b      	ldr	r2, [pc, #428]	@ (8000be8 <MX_FREERTOS_Init+0x2b0>)
 8000a3a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ListenTask */
  osThreadDef(ListenTask, StartTaskListen, osPriorityAboveNormal, 0, 512);
 8000a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8000bec <MX_FREERTOS_Init+0x2b4>)
 8000a3e:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 8000a42:	461d      	mov	r5, r3
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ListenTaskHandle = osThreadCreate(osThread(ListenTask), NULL);
 8000a50:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f008 ff83 	bl	8009962 <osThreadCreate>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a64      	ldr	r2, [pc, #400]	@ (8000bf0 <MX_FREERTOS_Init+0x2b8>)
 8000a60:	6013      	str	r3, [r2, #0]

  /* definition and creation of hwVerifTask */
  osThreadDef(hwVerifTask, StartTaskHwVerif, osPriorityNormal, 0, 256);
 8000a62:	4b64      	ldr	r3, [pc, #400]	@ (8000bf4 <MX_FREERTOS_Init+0x2bc>)
 8000a64:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 8000a68:	461d      	mov	r5, r3
 8000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  hwVerifTaskHandle = osThreadCreate(osThread(hwVerifTask), NULL);
 8000a76:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 ff70 	bl	8009962 <osThreadCreate>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a5c      	ldr	r2, [pc, #368]	@ (8000bf8 <MX_FREERTOS_Init+0x2c0>)
 8000a86:	6013      	str	r3, [r2, #0]

  /* definition and creation of uartTestTask */
  osThreadDef(uartTestTask, StartTaskUartTest, osPriorityNormal, 0, 256);
 8000a88:	4b5c      	ldr	r3, [pc, #368]	@ (8000bfc <MX_FREERTOS_Init+0x2c4>)
 8000a8a:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8000a8e:	461d      	mov	r5, r3
 8000a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTestTaskHandle = osThreadCreate(osThread(uartTestTask), NULL);
 8000a9c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f008 ff5d 	bl	8009962 <osThreadCreate>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4a55      	ldr	r2, [pc, #340]	@ (8000c00 <MX_FREERTOS_Init+0x2c8>)
 8000aac:	6013      	str	r3, [r2, #0]

  /* definition and creation of i2cTestTask */
  osThreadDef(i2cTestTask, StartTaskI2cTest, osPriorityNormal, 0, 256);
 8000aae:	4b55      	ldr	r3, [pc, #340]	@ (8000c04 <MX_FREERTOS_Init+0x2cc>)
 8000ab0:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8000ab4:	461d      	mov	r5, r3
 8000ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  i2cTestTaskHandle = osThreadCreate(osThread(i2cTestTask), NULL);
 8000ac2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f008 ff4a 	bl	8009962 <osThreadCreate>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a4d      	ldr	r2, [pc, #308]	@ (8000c08 <MX_FREERTOS_Init+0x2d0>)
 8000ad2:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiTestTask */
  osThreadDef(spiTestTask, StartTaskSpiTest, osPriorityNormal, 0, 256);
 8000ad4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ad8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000adc:	4a4b      	ldr	r2, [pc, #300]	@ (8000c0c <MX_FREERTOS_Init+0x2d4>)
 8000ade:	461c      	mov	r4, r3
 8000ae0:	4615      	mov	r5, r2
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spiTestTaskHandle = osThreadCreate(osThread(spiTestTask), NULL);
 8000aee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 ff34 	bl	8009962 <osThreadCreate>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a44      	ldr	r2, [pc, #272]	@ (8000c10 <MX_FREERTOS_Init+0x2d8>)
 8000afe:	6013      	str	r3, [r2, #0]

  /* definition and creation of adcTestTask */
  osThreadDef(adcTestTask, StartTaskAdcTest, osPriorityNormal, 0, 256);
 8000b00:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b08:	4a42      	ldr	r2, [pc, #264]	@ (8000c14 <MX_FREERTOS_Init+0x2dc>)
 8000b0a:	461c      	mov	r4, r3
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTestTaskHandle = osThreadCreate(osThread(adcTestTask), NULL);
 8000b1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f008 ff1e 	bl	8009962 <osThreadCreate>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a3b      	ldr	r2, [pc, #236]	@ (8000c18 <MX_FREERTOS_Init+0x2e0>)
 8000b2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of timTestTask */
  osThreadDef(timTestTask, StartTaskTimTest, osPriorityNormal, 0, 256);
 8000b2c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000b34:	4a39      	ldr	r2, [pc, #228]	@ (8000c1c <MX_FREERTOS_Init+0x2e4>)
 8000b36:	461c      	mov	r4, r3
 8000b38:	4615      	mov	r5, r2
 8000b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  timTestTaskHandle = osThreadCreate(osThread(timTestTask), NULL);
 8000b46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 ff08 	bl	8009962 <osThreadCreate>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a32      	ldr	r2, [pc, #200]	@ (8000c20 <MX_FREERTOS_Init+0x2e8>)
 8000b56:	6013      	str	r3, [r2, #0]

  /* definition and creation of responseTask */
  osThreadDef(responseTask, StartResponseTask, osPriorityAboveNormal, 0, 512);
 8000b58:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8000b60:	4a30      	ldr	r2, [pc, #192]	@ (8000c24 <MX_FREERTOS_Init+0x2ec>)
 8000b62:	461c      	mov	r4, r3
 8000b64:	4615      	mov	r5, r2
 8000b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  responseTaskHandle = osThreadCreate(osThread(responseTask), NULL);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f008 fef2 	bl	8009962 <osThreadCreate>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a29      	ldr	r2, [pc, #164]	@ (8000c28 <MX_FREERTOS_Init+0x2f0>)
 8000b82:	6013      	str	r3, [r2, #0]

  /* definition and creation of loggerTask */
  osThreadDef(loggerTask, StartLoggerTask, osPriorityLow, 0, 128);
 8000b84:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000b88:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8000b8c:	4a27      	ldr	r2, [pc, #156]	@ (8000c2c <MX_FREERTOS_Init+0x2f4>)
 8000b8e:	461c      	mov	r4, r3
 8000b90:	4615      	mov	r5, r2
 8000b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  loggerTaskHandle = osThreadCreate(osThread(loggerTask), NULL);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f008 fedd 	bl	8009962 <osThreadCreate>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a21      	ldr	r2, [pc, #132]	@ (8000c30 <MX_FREERTOS_Init+0x2f8>)
 8000bac:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bae:	bf00      	nop
 8000bb0:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb8:	08017cd0 	.word	0x08017cd0
 8000bbc:	08017ce8 	.word	0x08017ce8
 8000bc0:	200002dc 	.word	0x200002dc
 8000bc4:	08017cf8 	.word	0x08017cf8
 8000bc8:	200002e0 	.word	0x200002e0
 8000bcc:	08017d08 	.word	0x08017d08
 8000bd0:	200002e4 	.word	0x200002e4
 8000bd4:	200002e8 	.word	0x200002e8
 8000bd8:	200002ec 	.word	0x200002ec
 8000bdc:	200002f0 	.word	0x200002f0
 8000be0:	200002f4 	.word	0x200002f4
 8000be4:	08017d24 	.word	0x08017d24
 8000be8:	200002b4 	.word	0x200002b4
 8000bec:	08017d4c 	.word	0x08017d4c
 8000bf0:	200002b8 	.word	0x200002b8
 8000bf4:	08017d74 	.word	0x08017d74
 8000bf8:	200002bc 	.word	0x200002bc
 8000bfc:	08017da0 	.word	0x08017da0
 8000c00:	200002c0 	.word	0x200002c0
 8000c04:	08017dc8 	.word	0x08017dc8
 8000c08:	200002c4 	.word	0x200002c4
 8000c0c:	08017df0 	.word	0x08017df0
 8000c10:	200002c8 	.word	0x200002c8
 8000c14:	08017e18 	.word	0x08017e18
 8000c18:	200002cc 	.word	0x200002cc
 8000c1c:	08017e40 	.word	0x08017e40
 8000c20:	200002d0 	.word	0x200002d0
 8000c24:	08017e6c 	.word	0x08017e6c
 8000c28:	200002d4 	.word	0x200002d4
 8000c2c:	08017e94 	.word	0x08017e94
 8000c30:	200002d8 	.word	0x200002d8

08000c34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c3c:	f007 ffa0 	bl	8008b80 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f008 fee6 	bl	8009a12 <osDelay>
 8000c46:	e7fb      	b.n	8000c40 <StartDefaultTask+0xc>

08000c48 <StartTaskListen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskListen */
void StartTaskListen(void const * argument)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskListen */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f008 fede 	bl	8009a12 <osDelay>
 8000c56:	e7fb      	b.n	8000c50 <StartTaskListen+0x8>

08000c58 <StartTaskHwVerif>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskHwVerif */
void StartTaskHwVerif(void const * argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskHwVerif */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f008 fed6 	bl	8009a12 <osDelay>
 8000c66:	e7fb      	b.n	8000c60 <StartTaskHwVerif+0x8>

08000c68 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void const * argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f008 fece 	bl	8009a12 <osDelay>
 8000c76:	e7fb      	b.n	8000c70 <StartTaskUartTest+0x8>

08000c78 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void const * argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f008 fec6 	bl	8009a12 <osDelay>
 8000c86:	e7fb      	b.n	8000c80 <StartTaskI2cTest+0x8>

08000c88 <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void const * argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f008 febe 	bl	8009a12 <osDelay>
 8000c96:	e7fb      	b.n	8000c90 <StartTaskSpiTest+0x8>

08000c98 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void const * argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f008 feb6 	bl	8009a12 <osDelay>
 8000ca6:	e7fb      	b.n	8000ca0 <StartTaskAdcTest+0x8>

08000ca8 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void const * argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f008 feae 	bl	8009a12 <osDelay>
 8000cb6:	e7fb      	b.n	8000cb0 <StartTaskTimTest+0x8>

08000cb8 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void const * argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f008 fea6 	bl	8009a12 <osDelay>
 8000cc6:	e7fb      	b.n	8000cc0 <StartResponseTask+0x8>

08000cc8 <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void const * argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoggerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f008 fe9e 	bl	8009a12 <osDelay>
 8000cd6:	e7fb      	b.n	8000cd0 <StartLoggerTask+0x8>

08000cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	4b27      	ldr	r3, [pc, #156]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a26      	ldr	r2, [pc, #152]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000ce4:	f043 0310 	orr.w	r3, r3, #16
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a20      	ldr	r2, [pc, #128]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a1a      	ldr	r2, [pc, #104]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_GPIO_Init+0xa4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

}
 8000d6e:	bf00      	nop
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	@ (8000df8 <MX_I2C1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dfc <MX_I2C1_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000dbc:	f003 ffca 	bl	8004d54 <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 fab5 	bl	8001334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000dce:	f004 fe76 	bl	8005abe <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 faac 	bl	8001334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_I2C1_Init+0x74>)
 8000de0:	f004 feb8 	bl	8005b54 <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 faa3 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000598 	.word	0x20000598
 8000df8:	40005400 	.word	0x40005400
 8000dfc:	20404768 	.word	0x20404768

08000e00 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	@ (8000e78 <MX_I2C2_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <MX_I2C2_Init+0x7c>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e12:	2214      	movs	r2, #20
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e16:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e3a:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e3c:	f003 ff8a 	bl	8004d54 <HAL_I2C_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e46:	f000 fa75 	bl	8001334 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e4e:	f004 fe36 	bl	8005abe <HAL_I2CEx_ConfigAnalogFilter>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e58:	f000 fa6c 	bl	8001334 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_I2C2_Init+0x74>)
 8000e60:	f004 fe78 	bl	8005b54 <HAL_I2CEx_ConfigDigitalFilter>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 fa63 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200005ec 	.word	0x200005ec
 8000e78:	40005800 	.word	0x40005800
 8000e7c:	20404768 	.word	0x20404768

08000e80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0ac      	sub	sp, #176	@ 0xb0
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	2284      	movs	r2, #132	@ 0x84
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f016 f89d 	bl	8016fe0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a57      	ldr	r2, [pc, #348]	@ (8001008 <HAL_I2C_MspInit+0x188>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	f040 80b9 	bne.w	8001024 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000eb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 fb9f 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ecc:	f000 fa32 	bl	8001334 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800100c <HAL_I2C_MspInit+0x18c>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed4:	4a4d      	ldr	r2, [pc, #308]	@ (800100c <HAL_I2C_MspInit+0x18c>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000edc:	4b4b      	ldr	r3, [pc, #300]	@ (800100c <HAL_I2C_MspInit+0x18c>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ee8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f02:	2304      	movs	r3, #4
 8000f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4840      	ldr	r0, [pc, #256]	@ (8001010 <HAL_I2C_MspInit+0x190>)
 8000f10:	f003 fd74 	bl	80049fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f14:	4b3d      	ldr	r3, [pc, #244]	@ (800100c <HAL_I2C_MspInit+0x18c>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	4a3c      	ldr	r2, [pc, #240]	@ (800100c <HAL_I2C_MspInit+0x18c>)
 8000f1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f20:	4b3a      	ldr	r3, [pc, #232]	@ (800100c <HAL_I2C_MspInit+0x18c>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000f2c:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001018 <HAL_I2C_MspInit+0x198>)
 8000f30:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f38:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3a:	4b36      	ldr	r3, [pc, #216]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f40:	4b34      	ldr	r3, [pc, #208]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f46:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f4c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4e:	4b31      	ldr	r3, [pc, #196]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f54:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f60:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f66:	4b2b      	ldr	r3, [pc, #172]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f6c:	4829      	ldr	r0, [pc, #164]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f6e:	f001 ff45 	bl	8002dfc <HAL_DMA_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000f78:	f000 f9dc 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a25      	ldr	r2, [pc, #148]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f82:	4a24      	ldr	r2, [pc, #144]	@ (8001014 <HAL_I2C_MspInit+0x194>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000f88:	4b24      	ldr	r3, [pc, #144]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000f8a:	4a25      	ldr	r2, [pc, #148]	@ (8001020 <HAL_I2C_MspInit+0x1a0>)
 8000f8c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000f90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f94:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000f98:	2240      	movs	r2, #64	@ 0x40
 8000f9a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fc8:	4814      	ldr	r0, [pc, #80]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fca:	f001 ff17 	bl	8002dfc <HAL_DMA_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000fd4:	f000 f9ae 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a10      	ldr	r2, [pc, #64]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fde:	4a0f      	ldr	r2, [pc, #60]	@ (800101c <HAL_I2C_MspInit+0x19c>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	201f      	movs	r0, #31
 8000fea:	f001 fdeb 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fee:	201f      	movs	r0, #31
 8000ff0:	f001 fe04 	bl	8002bfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	2020      	movs	r0, #32
 8000ffa:	f001 fde3 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ffe:	2020      	movs	r0, #32
 8001000:	f001 fdfc 	bl	8002bfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001004:	e0be      	b.n	8001184 <HAL_I2C_MspInit+0x304>
 8001006:	bf00      	nop
 8001008:	40005400 	.word	0x40005400
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400
 8001014:	20000640 	.word	0x20000640
 8001018:	40026088 	.word	0x40026088
 800101c:	200006a0 	.word	0x200006a0
 8001020:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a58      	ldr	r2, [pc, #352]	@ (800118c <HAL_I2C_MspInit+0x30c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	f040 80aa 	bne.w	8001184 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001030:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001034:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4618      	mov	r0, r3
 8001042:	f005 fadf 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 800104c:	f000 f972 	bl	8001334 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	4b4f      	ldr	r3, [pc, #316]	@ (8001190 <HAL_I2C_MspInit+0x310>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	4a4e      	ldr	r2, [pc, #312]	@ (8001190 <HAL_I2C_MspInit+0x310>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	6313      	str	r3, [r2, #48]	@ 0x30
 800105c:	4b4c      	ldr	r3, [pc, #304]	@ (8001190 <HAL_I2C_MspInit+0x310>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001068:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800106c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001070:	2312      	movs	r3, #18
 8001072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001076:	2301      	movs	r3, #1
 8001078:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001082:	2304      	movs	r3, #4
 8001084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800108c:	4619      	mov	r1, r3
 800108e:	4841      	ldr	r0, [pc, #260]	@ (8001194 <HAL_I2C_MspInit+0x314>)
 8001090:	f003 fcb4 	bl	80049fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001094:	4b3e      	ldr	r3, [pc, #248]	@ (8001190 <HAL_I2C_MspInit+0x310>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	4a3d      	ldr	r2, [pc, #244]	@ (8001190 <HAL_I2C_MspInit+0x310>)
 800109a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800109e:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <HAL_I2C_MspInit+0x310>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010ae:	4a3b      	ldr	r2, [pc, #236]	@ (800119c <HAL_I2C_MspInit+0x31c>)
 80010b0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010b4:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80010b8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ba:	4b37      	ldr	r3, [pc, #220]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c6:	4b34      	ldr	r3, [pc, #208]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010cc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ce:	4b32      	ldr	r3, [pc, #200]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d4:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80010da:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80010ec:	482a      	ldr	r0, [pc, #168]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 80010ee:	f001 fe85 	bl	8002dfc <HAL_DMA_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80010f8:	f000 f91c 	bl	8001334 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a26      	ldr	r2, [pc, #152]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 8001100:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001102:	4a25      	ldr	r2, [pc, #148]	@ (8001198 <HAL_I2C_MspInit+0x318>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001108:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 800110a:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <HAL_I2C_MspInit+0x324>)
 800110c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800110e:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 8001110:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001114:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001116:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 8001118:	2240      	movs	r2, #64	@ 0x40
 800111a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 8001124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001128:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001148:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 800114a:	f001 fe57 	bl	8002dfc <HAL_DMA_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001154:	f000 f8ee 	bl	8001334 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a11      	ldr	r2, [pc, #68]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 800115c:	639a      	str	r2, [r3, #56]	@ 0x38
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <HAL_I2C_MspInit+0x320>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2105      	movs	r1, #5
 8001168:	2021      	movs	r0, #33	@ 0x21
 800116a:	f001 fd2b 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800116e:	2021      	movs	r0, #33	@ 0x21
 8001170:	f001 fd44 	bl	8002bfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2105      	movs	r1, #5
 8001178:	2022      	movs	r0, #34	@ 0x22
 800117a:	f001 fd23 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800117e:	2022      	movs	r0, #34	@ 0x22
 8001180:	f001 fd3c 	bl	8002bfc <HAL_NVIC_EnableIRQ>
}
 8001184:	bf00      	nop
 8001186:	37b0      	adds	r7, #176	@ 0xb0
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005800 	.word	0x40005800
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	20000700 	.word	0x20000700
 800119c:	40026058 	.word	0x40026058
 80011a0:	20000760 	.word	0x20000760
 80011a4:	400260b8 	.word	0x400260b8

080011a8 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <_write+0x3c>)
 80011b6:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <_write+0x40>)
 80011c4:	f006 fcdc 	bl	8007b80 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 80011c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011cc:	2201      	movs	r2, #1
 80011ce:	6979      	ldr	r1, [r7, #20]
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <_write+0x40>)
 80011d2:	f006 fcd5 	bl	8007b80 <HAL_UART_Transmit>
	return len + 1;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3301      	adds	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	08017eb0 	.word	0x08017eb0
 80011e8:	20000c60 	.word	0x20000c60

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f001 f93b 	bl	800246a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f820 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f7ff fd6e 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011fc:	f7ff faf4 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001200:	f000 fe4a 	bl	8001e98 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001204:	f7ff faae 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8001208:	f000 fde6 	bl	8001dd8 <MX_UART4_Init>
  MX_UART5_Init();
 800120c:	f000 fe14 	bl	8001e38 <MX_UART5_Init>
  MX_I2C1_Init();
 8001210:	f7ff fdb6 	bl	8000d80 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001214:	f7ff fdf4 	bl	8000e00 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001218:	f000 f892 	bl	8001340 <MX_SPI1_Init>
  MX_SPI4_Init();
 800121c:	f000 f8ce 	bl	80013bc <MX_SPI4_Init>
  MX_ADC1_Init();
 8001220:	f7ff f9dc 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001224:	f000 fd36 	bl	8001c94 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001228:	f000 fce6 	bl	8001bf8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800122c:	f7ff fb84 	bl	8000938 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001230:	f008 fb80 	bl	8009934 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <main+0x48>

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	@ 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	@ 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f015 feca 	bl	8016fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	4b2a      	ldr	r3, [pc, #168]	@ (8001308 <SystemClock_Config+0xd0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	4a29      	ldr	r2, [pc, #164]	@ (8001308 <SystemClock_Config+0xd0>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	@ 0x40
 8001268:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <SystemClock_Config+0xd0>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	4b25      	ldr	r3, [pc, #148]	@ (800130c <SystemClock_Config+0xd4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a24      	ldr	r2, [pc, #144]	@ (800130c <SystemClock_Config+0xd4>)
 800127a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b22      	ldr	r3, [pc, #136]	@ (800130c <SystemClock_Config+0xd4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001298:	2302      	movs	r3, #2
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129c:	2300      	movs	r3, #0
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a0:	2308      	movs	r3, #8
 80012a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012a4:	23d8      	movs	r3, #216	@ 0xd8
 80012a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fce9 	bl	8005c8c <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012c0:	f000 f838 	bl	8001334 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c4:	f004 fc92 	bl	8005bec <HAL_PWREx_EnableOverDrive>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ce:	f000 f831 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2107      	movs	r1, #7
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 ff6f 	bl	80061d4 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80012fc:	f000 f81a 	bl	8001334 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	@ 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001322:	f001 f8af 	bl	8002484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40001400 	.word	0x40001400

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <Error_Handler+0x8>

08001340 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <MX_SPI1_Init+0x78>)
 8001348:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800134c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001350:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001358:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800135a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800135e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800136e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001372:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001376:	2218      	movs	r2, #24
 8001378:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800138e:	2207      	movs	r2, #7
 8001390:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_SPI1_Init+0x74>)
 800139a:	2208      	movs	r2, #8
 800139c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_SPI1_Init+0x74>)
 80013a0:	f005 fd20 	bl	8006de4 <HAL_SPI_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f7ff ffc3 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200007c0 	.word	0x200007c0
 80013b8:	40013000 	.word	0x40013000

080013bc <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013c2:	4a19      	ldr	r2, [pc, #100]	@ (8001428 <MX_SPI4_Init+0x6c>)
 80013c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013d8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <MX_SPI4_Init+0x68>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_SPI4_Init+0x68>)
 8001400:	2207      	movs	r2, #7
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001404:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <MX_SPI4_Init+0x68>)
 8001406:	2200      	movs	r2, #0
 8001408:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_SPI4_Init+0x68>)
 800140c:	2200      	movs	r2, #0
 800140e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	@ (8001424 <MX_SPI4_Init+0x68>)
 8001412:	f005 fce7 	bl	8006de4 <HAL_SPI_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 800141c:	f7ff ff8a 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000824 	.word	0x20000824
 8001428:	40013400 	.word	0x40013400

0800142c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4aa1      	ldr	r2, [pc, #644]	@ (80016d0 <HAL_SPI_MspInit+0x2a4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	f040 80a9 	bne.w	80015a2 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001450:	4ba0      	ldr	r3, [pc, #640]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 8001452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001454:	4a9f      	ldr	r2, [pc, #636]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 8001456:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800145a:	6453      	str	r3, [r2, #68]	@ 0x44
 800145c:	4b9d      	ldr	r3, [pc, #628]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 800145e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b9a      	ldr	r3, [pc, #616]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146c:	4a99      	ldr	r2, [pc, #612]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6313      	str	r3, [r2, #48]	@ 0x30
 8001474:	4b97      	ldr	r3, [pc, #604]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b94      	ldr	r3, [pc, #592]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001484:	4a93      	ldr	r2, [pc, #588]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	6313      	str	r3, [r2, #48]	@ 0x30
 800148c:	4b91      	ldr	r3, [pc, #580]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001498:	2370      	movs	r3, #112	@ 0x70
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a8:	2305      	movs	r3, #5
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4889      	ldr	r0, [pc, #548]	@ (80016d8 <HAL_SPI_MspInit+0x2ac>)
 80014b4:	f003 faa2 	bl	80049fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014b8:	2320      	movs	r3, #32
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c8:	2305      	movs	r3, #5
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	4882      	ldr	r0, [pc, #520]	@ (80016dc <HAL_SPI_MspInit+0x2b0>)
 80014d4:	f003 fa92 	bl	80049fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80014d8:	4b81      	ldr	r3, [pc, #516]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 80014da:	4a82      	ldr	r2, [pc, #520]	@ (80016e4 <HAL_SPI_MspInit+0x2b8>)
 80014dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80014de:	4b80      	ldr	r3, [pc, #512]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 80014e0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e6:	4b7e      	ldr	r3, [pc, #504]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	4b7c      	ldr	r3, [pc, #496]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f2:	4b7b      	ldr	r3, [pc, #492]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 80014f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014fa:	4b79      	ldr	r3, [pc, #484]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001500:	4b77      	ldr	r3, [pc, #476]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001506:	4b76      	ldr	r3, [pc, #472]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800150c:	4b74      	ldr	r3, [pc, #464]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001512:	4b73      	ldr	r3, [pc, #460]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001518:	4871      	ldr	r0, [pc, #452]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 800151a:	f001 fc6f 	bl	8002dfc <HAL_DMA_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001524:	f7ff ff06 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a6d      	ldr	r2, [pc, #436]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 800152c:	659a      	str	r2, [r3, #88]	@ 0x58
 800152e:	4a6c      	ldr	r2, [pc, #432]	@ (80016e0 <HAL_SPI_MspInit+0x2b4>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001534:	4b6c      	ldr	r3, [pc, #432]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 8001536:	4a6d      	ldr	r2, [pc, #436]	@ (80016ec <HAL_SPI_MspInit+0x2c0>)
 8001538:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800153a:	4b6b      	ldr	r3, [pc, #428]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 800153c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001540:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001542:	4b69      	ldr	r3, [pc, #420]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 8001544:	2240      	movs	r2, #64	@ 0x40
 8001546:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b67      	ldr	r3, [pc, #412]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b66      	ldr	r3, [pc, #408]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 8001550:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001554:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001556:	4b64      	ldr	r3, [pc, #400]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155c:	4b62      	ldr	r3, [pc, #392]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001562:	4b61      	ldr	r3, [pc, #388]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	4b5f      	ldr	r3, [pc, #380]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156e:	4b5e      	ldr	r3, [pc, #376]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001574:	485c      	ldr	r0, [pc, #368]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 8001576:	f001 fc41 	bl	8002dfc <HAL_DMA_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001580:	f7ff fed8 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a58      	ldr	r2, [pc, #352]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 8001588:	655a      	str	r2, [r3, #84]	@ 0x54
 800158a:	4a57      	ldr	r2, [pc, #348]	@ (80016e8 <HAL_SPI_MspInit+0x2bc>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2105      	movs	r1, #5
 8001594:	2023      	movs	r0, #35	@ 0x23
 8001596:	f001 fb15 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800159a:	2023      	movs	r0, #35	@ 0x23
 800159c:	f001 fb2e 	bl	8002bfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80015a0:	e091      	b.n	80016c6 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a52      	ldr	r2, [pc, #328]	@ (80016f0 <HAL_SPI_MspInit+0x2c4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	f040 808c 	bne.w	80016c6 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015ae:	4b49      	ldr	r3, [pc, #292]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	4a48      	ldr	r2, [pc, #288]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 80015b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ba:	4b46      	ldr	r3, [pc, #280]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c6:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	4a42      	ldr	r2, [pc, #264]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d2:	4b40      	ldr	r3, [pc, #256]	@ (80016d4 <HAL_SPI_MspInit+0x2a8>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015de:	2374      	movs	r3, #116	@ 0x74
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015ee:	2305      	movs	r3, #5
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	483e      	ldr	r0, [pc, #248]	@ (80016f4 <HAL_SPI_MspInit+0x2c8>)
 80015fa:	f003 f9ff 	bl	80049fc <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80015fe:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001600:	4a3e      	ldr	r2, [pc, #248]	@ (80016fc <HAL_SPI_MspInit+0x2d0>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001604:	4b3c      	ldr	r3, [pc, #240]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001606:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800160a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160c:	4b3a      	ldr	r3, [pc, #232]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001618:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 800161a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800161e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001620:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800162c:	4b32      	ldr	r3, [pc, #200]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001632:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001638:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800163e:	482e      	ldr	r0, [pc, #184]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001640:	f001 fbdc 	bl	8002dfc <HAL_DMA_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800164a:	f7ff fe73 	bl	8001334 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a29      	ldr	r2, [pc, #164]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001652:	659a      	str	r2, [r3, #88]	@ 0x58
 8001654:	4a28      	ldr	r2, [pc, #160]	@ (80016f8 <HAL_SPI_MspInit+0x2cc>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800165a:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 800165c:	4a29      	ldr	r2, [pc, #164]	@ (8001704 <HAL_SPI_MspInit+0x2d8>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 8001662:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001666:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166e:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 8001676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800167a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800167c:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800168e:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800169a:	4819      	ldr	r0, [pc, #100]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 800169c:	f001 fbae 	bl	8002dfc <HAL_DMA_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80016a6:	f7ff fe45 	bl	8001334 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 80016ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80016b0:	4a13      	ldr	r2, [pc, #76]	@ (8001700 <HAL_SPI_MspInit+0x2d4>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2105      	movs	r1, #5
 80016ba:	2054      	movs	r0, #84	@ 0x54
 80016bc:	f001 fa82 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80016c0:	2054      	movs	r0, #84	@ 0x54
 80016c2:	f001 fa9b 	bl	8002bfc <HAL_NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3730      	adds	r7, #48	@ 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40013000 	.word	0x40013000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	20000888 	.word	0x20000888
 80016e4:	40026440 	.word	0x40026440
 80016e8:	200008e8 	.word	0x200008e8
 80016ec:	40026458 	.word	0x40026458
 80016f0:	40013400 	.word	0x40013400
 80016f4:	40021000 	.word	0x40021000
 80016f8:	20000948 	.word	0x20000948
 80016fc:	40026410 	.word	0x40026410
 8001700:	200009a8 	.word	0x200009a8
 8001704:	40026428 	.word	0x40026428

08001708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_MspInit+0x4c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_MspInit+0x4c>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001718:	6413      	str	r3, [r2, #64]	@ 0x40
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <HAL_MspInit+0x4c>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001730:	6453      	str	r3, [r2, #68]	@ 0x44
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	210f      	movs	r1, #15
 8001742:	f06f 0001 	mvn.w	r0, #1
 8001746:	f001 fa3d 	bl	8002bc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	@ 0x38
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001768:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_InitTick+0xe0>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	4a32      	ldr	r2, [pc, #200]	@ (8001838 <HAL_InitTick+0xe0>)
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	6413      	str	r3, [r2, #64]	@ 0x40
 8001774:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <HAL_InitTick+0xe0>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001780:	f107 0210 	add.w	r2, r7, #16
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f004 ff08 	bl	80065a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800179a:	f004 fed9 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 800179e:	6378      	str	r0, [r7, #52]	@ 0x34
 80017a0:	e004      	b.n	80017ac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017a2:	f004 fed5 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 80017a6:	4603      	mov	r3, r0
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ae:	4a23      	ldr	r2, [pc, #140]	@ (800183c <HAL_InitTick+0xe4>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9b      	lsrs	r3, r3, #18
 80017b6:	3b01      	subs	r3, #1
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80017ba:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <HAL_InitTick+0xe8>)
 80017bc:	4a21      	ldr	r2, [pc, #132]	@ (8001844 <HAL_InitTick+0xec>)
 80017be:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <HAL_InitTick+0xe8>)
 80017c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017c6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80017c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001840 <HAL_InitTick+0xe8>)
 80017ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017cc:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <HAL_InitTick+0xe8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <HAL_InitTick+0xe8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_InitTick+0xe8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80017e0:	4817      	ldr	r0, [pc, #92]	@ (8001840 <HAL_InitTick+0xe8>)
 80017e2:	f005 fcca 	bl	800717a <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d11b      	bne.n	800182c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80017f4:	4812      	ldr	r0, [pc, #72]	@ (8001840 <HAL_InitTick+0xe8>)
 80017f6:	f005 fd17 	bl	8007228 <HAL_TIM_Base_Start_IT>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001800:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001804:	2b00      	cmp	r3, #0
 8001806:	d111      	bne.n	800182c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001808:	2037      	movs	r0, #55	@ 0x37
 800180a:	f001 f9f7 	bl	8002bfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d808      	bhi.n	8001826 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	2037      	movs	r0, #55	@ 0x37
 800181a:	f001 f9d3 	bl	8002bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <HAL_InitTick+0xf0>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e002      	b.n	800182c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800182c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001830:	4618      	mov	r0, r3
 8001832:	3738      	adds	r7, #56	@ 0x38
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	431bde83 	.word	0x431bde83
 8001840:	20000a08 	.word	0x20000a08
 8001844:	40001400 	.word	0x40001400
 8001848:	20000004 	.word	0x20000004

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <NMI_Handler+0x4>

08001854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <MemManage_Handler+0x4>

08001864 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <UsageFault_Handler+0x4>

08001874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <DMA1_Stream0_IRQHandler+0x10>)
 800188a:	f001 fbf7 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000d48 	.word	0x20000d48

08001898 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <DMA1_Stream1_IRQHandler+0x10>)
 800189e:	f001 fbed 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000af0 	.word	0x20000af0

080018ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018b0:	4802      	ldr	r0, [pc, #8]	@ (80018bc <DMA1_Stream2_IRQHandler+0x10>)
 80018b2:	f001 fbe3 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000ce8 	.word	0x20000ce8

080018c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <DMA1_Stream3_IRQHandler+0x10>)
 80018c6:	f001 fbd9 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000700 	.word	0x20000700

080018d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018d8:	4802      	ldr	r0, [pc, #8]	@ (80018e4 <DMA1_Stream5_IRQHandler+0x10>)
 80018da:	f001 fbcf 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000640 	.word	0x20000640

080018e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80018ec:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x10>)
 80018ee:	f001 fbc5 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200006a0 	.word	0x200006a0

080018fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <I2C1_EV_IRQHandler+0x10>)
 8001902:	f003 fac3 	bl	8004e8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000598 	.word	0x20000598

08001910 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <I2C1_ER_IRQHandler+0x10>)
 8001916:	f003 fad3 	bl	8004ec0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000598 	.word	0x20000598

08001924 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <I2C2_EV_IRQHandler+0x10>)
 800192a:	f003 faaf 	bl	8004e8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200005ec 	.word	0x200005ec

08001938 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <I2C2_ER_IRQHandler+0x10>)
 800193e:	f003 fabf 	bl	8004ec0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200005ec 	.word	0x200005ec

0800194c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <SPI1_IRQHandler+0x10>)
 8001952:	f005 faf3 	bl	8006f3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200007c0 	.word	0x200007c0

08001960 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <USART3_IRQHandler+0x10>)
 8001966:	f006 f995 	bl	8007c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000c60 	.word	0x20000c60

08001974 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <DMA1_Stream7_IRQHandler+0x10>)
 800197a:	f001 fb7f 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000760 	.word	0x20000760

08001988 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <UART4_IRQHandler+0x10>)
 800198e:	f006 f981 	bl	8007c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000b50 	.word	0x20000b50

0800199c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <UART5_IRQHandler+0x10>)
 80019a2:	f006 f977 	bl	8007c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000bd8 	.word	0x20000bd8

080019b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <TIM6_DAC_IRQHandler+0x10>)
 80019b6:	f005 fcaf 	bl	8007318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000aa4 	.word	0x20000aa4

080019c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM7_IRQHandler+0x10>)
 80019ca:	f005 fca5 	bl	8007318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000a08 	.word	0x20000a08

080019d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <DMA2_Stream0_IRQHandler+0x10>)
 80019de:	f001 fb4d 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000948 	.word	0x20000948

080019ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <DMA2_Stream1_IRQHandler+0x10>)
 80019f2:	f001 fb43 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200009a8 	.word	0x200009a8

08001a00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <DMA2_Stream2_IRQHandler+0x10>)
 8001a06:	f001 fb39 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000888 	.word	0x20000888

08001a14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <DMA2_Stream3_IRQHandler+0x10>)
 8001a1a:	f001 fb2f 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200008e8 	.word	0x200008e8

08001a28 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <DMA2_Stream4_IRQHandler+0x10>)
 8001a2e:	f001 fb25 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000230 	.word	0x20000230

08001a3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <ETH_IRQHandler+0x10>)
 8001a42:	f002 f8f3 	bl	8003c2c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000578c 	.word	0x2000578c

08001a50 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <ETH_WKUP_IRQHandler+0x10>)
 8001a56:	f002 f8e9 	bl	8003c2c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000578c 	.word	0x2000578c

08001a64 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <SPI4_IRQHandler+0x10>)
 8001a6a:	f005 fa67 	bl	8006f3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000824 	.word	0x20000824

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_kill>:

int _kill(int pid, int sig)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <_kill+0x20>)
 8001a94:	2216      	movs	r2, #22
 8001a96:	601a      	str	r2, [r3, #0]
  return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	2000c98c 	.word	0x2000c98c

08001aac <_exit>:

void _exit (int status)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffe5 	bl	8001a88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001abe:	bf00      	nop
 8001ac0:	e7fd      	b.n	8001abe <_exit+0x12>

08001ac2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e00a      	b.n	8001aea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	4601      	mov	r1, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	60ba      	str	r2, [r7, #8]
 8001ae0:	b2ca      	uxtb	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf0      	blt.n	8001ad4 <_read+0x12>
  }

  return len;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_close>:
  }
  return len;
}

int _close(int file)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b24:	605a      	str	r2, [r3, #4]
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_isatty>:

int _isatty(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d205      	bcs.n	8001ba0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <_sbrk+0x6c>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	20050000 	.word	0x20050000
 8001bc4:	00008000 	.word	0x00008000
 8001bc8:	20000a54 	.word	0x20000a54
 8001bcc:	2000c9a0 	.word	0x2000c9a0
 8001bd0:	2000c98c 	.word	0x2000c98c

08001bd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <SystemInit+0x20>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bde:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <SystemInit+0x20>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	4b17      	ldr	r3, [pc, #92]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c3e:	4814      	ldr	r0, [pc, #80]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c40:	f005 fa9b 	bl	800717a <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c4a:	f7ff fb73 	bl	8001334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480d      	ldr	r0, [pc, #52]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c5c:	f005 fc64 	bl	8007528 <HAL_TIM_ConfigClockSource>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c66:	f7ff fb65 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <MX_TIM2_Init+0x98>)
 8001c78:	f005 fe88 	bl	800798c <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c82:	f7ff fb57 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c86:	bf00      	nop
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000a58 	.word	0x20000a58

08001c94 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <MX_TIM6_Init+0x64>)
 8001ca6:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <MX_TIM6_Init+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <MX_TIM6_Init+0x64>)
 8001cac:	f240 221b 	movw	r2, #539	@ 0x21b
 8001cb0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <MX_TIM6_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <MX_TIM6_Init+0x64>)
 8001cba:	2263      	movs	r2, #99	@ 0x63
 8001cbc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <MX_TIM6_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cc4:	480c      	ldr	r0, [pc, #48]	@ (8001cf8 <MX_TIM6_Init+0x64>)
 8001cc6:	f005 fa58 	bl	800717a <HAL_TIM_Base_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001cd0:	f7ff fb30 	bl	8001334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_TIM6_Init+0x64>)
 8001ce2:	f005 fe53 	bl	800798c <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001cec:	f7ff fb22 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000aa4 	.word	0x20000aa4
 8001cfc:	40001000 	.word	0x40001000

08001d00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d10:	d10c      	bne.n	8001d2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d12:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xc8>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xc8>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xc8>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d2a:	e049      	b.n	8001dc0 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_TIM_Base_MspInit+0xcc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d144      	bne.n	8001dc0 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d36:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xc8>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a23      	ldr	r2, [pc, #140]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xc8>)
 8001d3c:	f043 0310 	orr.w	r3, r3, #16
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xc8>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <HAL_TIM_Base_MspInit+0xd4>)
 8001d52:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d56:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001d5a:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6e:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d70:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d76:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d7e:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d8c:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001d94:	480e      	ldr	r0, [pc, #56]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001d96:	f001 f831 	bl	8002dfc <HAL_DMA_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001da0:	f7ff fac8 	bl	8001334 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001da8:	621a      	str	r2, [r3, #32]
 8001daa:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd0>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2105      	movs	r1, #5
 8001db4:	2036      	movs	r0, #54	@ 0x36
 8001db6:	f000 ff05 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dba:	2036      	movs	r0, #54	@ 0x36
 8001dbc:	f000 ff1e 	bl	8002bfc <HAL_NVIC_EnableIRQ>
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40001000 	.word	0x40001000
 8001dd0:	20000af0 	.word	0x20000af0
 8001dd4:	40026028 	.word	0x40026028

08001dd8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001dde:	4a15      	ldr	r2, [pc, #84]	@ (8001e34 <MX_UART4_Init+0x5c>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001de2:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <MX_UART4_Init+0x58>)
 8001e1c:	f005 fe62 	bl	8007ae4 <HAL_UART_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001e26:	f7ff fa85 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000b50 	.word	0x20000b50
 8001e34:	40004c00 	.word	0x40004c00

08001e38 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e3e:	4a15      	ldr	r2, [pc, #84]	@ (8001e94 <MX_UART5_Init+0x5c>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <MX_UART5_Init+0x58>)
 8001e7c:	f005 fe32 	bl	8007ae4 <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001e86:	f7ff fa55 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000bd8 	.word	0x20000bd8
 8001e94:	40005000 	.word	0x40005000

08001e98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001e9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ef4 <MX_USART3_UART_Init+0x5c>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <MX_USART3_UART_Init+0x58>)
 8001edc:	f005 fe02 	bl	8007ae4 <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ee6:	f7ff fa25 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000c60 	.word	0x20000c60
 8001ef4:	40004800 	.word	0x40004800

08001ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0b0      	sub	sp, #192	@ 0xc0
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f14:	2284      	movs	r2, #132	@ 0x84
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f015 f861 	bl	8016fe0 <memset>
  if(uartHandle->Instance==UART4)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4ab0      	ldr	r2, [pc, #704]	@ (80021e4 <HAL_UART_MspInit+0x2ec>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d173      	bne.n	8002010 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 fb64 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f42:	f7ff f9f7 	bl	8001334 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f46:	4ba8      	ldr	r3, [pc, #672]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4aa7      	ldr	r2, [pc, #668]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8001f4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4ba5      	ldr	r3, [pc, #660]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	4ba2      	ldr	r3, [pc, #648]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4aa1      	ldr	r2, [pc, #644]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b9f      	ldr	r3, [pc, #636]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f76:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f90:	2308      	movs	r3, #8
 8001f92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f96:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4893      	ldr	r0, [pc, #588]	@ (80021ec <HAL_UART_MspInit+0x2f4>)
 8001f9e:	f002 fd2d 	bl	80049fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001fa2:	4b93      	ldr	r3, [pc, #588]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fa4:	4a93      	ldr	r2, [pc, #588]	@ (80021f4 <HAL_UART_MspInit+0x2fc>)
 8001fa6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001fa8:	4b91      	ldr	r3, [pc, #580]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001faa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fae:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb6:	4b8e      	ldr	r3, [pc, #568]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc4:	4b8a      	ldr	r3, [pc, #552]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fca:	4b89      	ldr	r3, [pc, #548]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001fd0:	4b87      	ldr	r3, [pc, #540]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd6:	4b86      	ldr	r3, [pc, #536]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fdc:	4b84      	ldr	r3, [pc, #528]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001fe2:	4883      	ldr	r0, [pc, #524]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001fe4:	f000 ff0a 	bl	8002dfc <HAL_DMA_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001fee:	f7ff f9a1 	bl	8001334 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a7e      	ldr	r2, [pc, #504]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001ff6:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ff8:	4a7d      	ldr	r2, [pc, #500]	@ (80021f0 <HAL_UART_MspInit+0x2f8>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2105      	movs	r1, #5
 8002002:	2034      	movs	r0, #52	@ 0x34
 8002004:	f000 fdde 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002008:	2034      	movs	r0, #52	@ 0x34
 800200a:	f000 fdf7 	bl	8002bfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800200e:	e0e4      	b.n	80021da <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a78      	ldr	r2, [pc, #480]	@ (80021f8 <HAL_UART_MspInit+0x300>)
 8002016:	4293      	cmp	r3, r2
 8002018:	f040 8095 	bne.w	8002146 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800201c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002022:	2300      	movs	r3, #0
 8002024:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002026:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800202a:	4618      	mov	r0, r3
 800202c:	f004 faea 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_UART_MspInit+0x142>
      Error_Handler();
 8002036:	f7ff f97d 	bl	8001334 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800203a:	4b6b      	ldr	r3, [pc, #428]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a6a      	ldr	r2, [pc, #424]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002040:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b68      	ldr	r3, [pc, #416]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b65      	ldr	r3, [pc, #404]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a64      	ldr	r2, [pc, #400]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b62      	ldr	r3, [pc, #392]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206a:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a5e      	ldr	r2, [pc, #376]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b5c      	ldr	r3, [pc, #368]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800209c:	2308      	movs	r3, #8
 800209e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020a6:	4619      	mov	r1, r3
 80020a8:	4850      	ldr	r0, [pc, #320]	@ (80021ec <HAL_UART_MspInit+0x2f4>)
 80020aa:	f002 fca7 	bl	80049fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020ae:	2304      	movs	r3, #4
 80020b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020c6:	2308      	movs	r3, #8
 80020c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020d0:	4619      	mov	r1, r3
 80020d2:	484a      	ldr	r0, [pc, #296]	@ (80021fc <HAL_UART_MspInit+0x304>)
 80020d4:	f002 fc92 	bl	80049fc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80020d8:	4b49      	ldr	r3, [pc, #292]	@ (8002200 <HAL_UART_MspInit+0x308>)
 80020da:	4a4a      	ldr	r2, [pc, #296]	@ (8002204 <HAL_UART_MspInit+0x30c>)
 80020dc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80020de:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <HAL_UART_MspInit+0x308>)
 80020e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020e4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020e6:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <HAL_UART_MspInit+0x308>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ec:	4b44      	ldr	r3, [pc, #272]	@ (8002200 <HAL_UART_MspInit+0x308>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020f2:	4b43      	ldr	r3, [pc, #268]	@ (8002200 <HAL_UART_MspInit+0x308>)
 80020f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020f8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020fa:	4b41      	ldr	r3, [pc, #260]	@ (8002200 <HAL_UART_MspInit+0x308>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002100:	4b3f      	ldr	r3, [pc, #252]	@ (8002200 <HAL_UART_MspInit+0x308>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002106:	4b3e      	ldr	r3, [pc, #248]	@ (8002200 <HAL_UART_MspInit+0x308>)
 8002108:	2200      	movs	r2, #0
 800210a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800210c:	4b3c      	ldr	r3, [pc, #240]	@ (8002200 <HAL_UART_MspInit+0x308>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002112:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <HAL_UART_MspInit+0x308>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002118:	4839      	ldr	r0, [pc, #228]	@ (8002200 <HAL_UART_MspInit+0x308>)
 800211a:	f000 fe6f 	bl	8002dfc <HAL_DMA_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002124:	f7ff f906 	bl	8001334 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a35      	ldr	r2, [pc, #212]	@ (8002200 <HAL_UART_MspInit+0x308>)
 800212c:	675a      	str	r2, [r3, #116]	@ 0x74
 800212e:	4a34      	ldr	r2, [pc, #208]	@ (8002200 <HAL_UART_MspInit+0x308>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2105      	movs	r1, #5
 8002138:	2035      	movs	r0, #53	@ 0x35
 800213a:	f000 fd43 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800213e:	2035      	movs	r0, #53	@ 0x35
 8002140:	f000 fd5c 	bl	8002bfc <HAL_NVIC_EnableIRQ>
}
 8002144:	e049      	b.n	80021da <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2f      	ldr	r2, [pc, #188]	@ (8002208 <HAL_UART_MspInit+0x310>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d144      	bne.n	80021da <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002156:	2300      	movs	r3, #0
 8002158:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800215e:	4618      	mov	r0, r3
 8002160:	f004 fa50 	bl	8006604 <HAL_RCCEx_PeriphCLKConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_UART_MspInit+0x276>
      Error_Handler();
 800216a:	f7ff f8e3 	bl	8001334 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a1d      	ldr	r2, [pc, #116]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <HAL_UART_MspInit+0x2f0>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800219e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021b8:	2307      	movs	r3, #7
 80021ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021be:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80021c2:	4619      	mov	r1, r3
 80021c4:	480d      	ldr	r0, [pc, #52]	@ (80021fc <HAL_UART_MspInit+0x304>)
 80021c6:	f002 fc19 	bl	80049fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2105      	movs	r1, #5
 80021ce:	2027      	movs	r0, #39	@ 0x27
 80021d0:	f000 fcf8 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021d4:	2027      	movs	r0, #39	@ 0x27
 80021d6:	f000 fd11 	bl	8002bfc <HAL_NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	37c0      	adds	r7, #192	@ 0xc0
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40004c00 	.word	0x40004c00
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020800 	.word	0x40020800
 80021f0:	20000ce8 	.word	0x20000ce8
 80021f4:	40026040 	.word	0x40026040
 80021f8:	40005000 	.word	0x40005000
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	20000d48 	.word	0x20000d48
 8002204:	40026010 	.word	0x40026010
 8002208:	40004800 	.word	0x40004800

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002244 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002210:	f7ff fce0 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	@ (800224c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	@ (8002258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800223a:	f014 ff7d 	bl	8017138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223e:	f7fe ffd5 	bl	80011ec <main>
  bx  lr    
 8002242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002244:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002250:	0801ac54 	.word	0x0801ac54
  ldr r2, =_sbss
 8002254:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002258:	2000c99c 	.word	0x2000c99c

0800225c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC_IRQHandler>

0800225e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <LAN8742_RegisterBusIO+0x28>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <LAN8742_RegisterBusIO+0x28>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <LAN8742_RegisterBusIO+0x28>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800228a:	e014      	b.n	80022b6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d139      	bne.n	8002352 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e01c      	b.n	8002332 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f107 020c 	add.w	r2, r7, #12
 8002300:	2112      	movs	r1, #18
 8002302:	6978      	ldr	r0, [r7, #20]
 8002304:	4798      	blx	r3
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	da03      	bge.n	8002314 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800230c:	f06f 0304 	mvn.w	r3, #4
 8002310:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002312:	e00b      	b.n	800232c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	d105      	bne.n	800232c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
         break;
 800232a:	e005      	b.n	8002338 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b1f      	cmp	r3, #31
 8002336:	d9df      	bls.n	80022f8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b1f      	cmp	r3, #31
 800233e:	d902      	bls.n	8002346 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002340:	f06f 0302 	mvn.w	r3, #2
 8002344:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002352:	693b      	ldr	r3, [r7, #16]
 }
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6810      	ldr	r0, [r2, #0]
 8002370:	f107 020c 	add.w	r2, r7, #12
 8002374:	2101      	movs	r1, #1
 8002376:	4798      	blx	r3
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	da02      	bge.n	8002384 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800237e:	f06f 0304 	mvn.w	r3, #4
 8002382:	e06e      	b.n	8002462 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6810      	ldr	r0, [r2, #0]
 800238c:	f107 020c 	add.w	r2, r7, #12
 8002390:	2101      	movs	r1, #1
 8002392:	4798      	blx	r3
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	da02      	bge.n	80023a0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800239a:	f06f 0304 	mvn.w	r3, #4
 800239e:	e060      	b.n	8002462 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e059      	b.n	8002462 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6810      	ldr	r0, [r2, #0]
 80023b6:	f107 020c 	add.w	r2, r7, #12
 80023ba:	2100      	movs	r1, #0
 80023bc:	4798      	blx	r3
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da02      	bge.n	80023ca <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023c4:	f06f 0304 	mvn.w	r3, #4
 80023c8:	e04b      	b.n	8002462 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11b      	bne.n	800240c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <LAN8742_GetLinkState+0x90>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80023e8:	2302      	movs	r3, #2
 80023ea:	e03a      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e033      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002404:	2304      	movs	r3, #4
 8002406:	e02c      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002408:	2305      	movs	r3, #5
 800240a:	e02a      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6810      	ldr	r0, [r2, #0]
 8002414:	f107 020c 	add.w	r2, r7, #12
 8002418:	211f      	movs	r1, #31
 800241a:	4798      	blx	r3
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	da02      	bge.n	8002428 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002422:	f06f 0304 	mvn.w	r3, #4
 8002426:	e01c      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002432:	2306      	movs	r3, #6
 8002434:	e015      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 031c 	and.w	r3, r3, #28
 800243c:	2b18      	cmp	r3, #24
 800243e:	d101      	bne.n	8002444 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002440:	2302      	movs	r3, #2
 8002442:	e00e      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 031c 	and.w	r3, r3, #28
 800244a:	2b08      	cmp	r3, #8
 800244c:	d101      	bne.n	8002452 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800244e:	2303      	movs	r3, #3
 8002450:	e007      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f003 031c 	and.w	r3, r3, #28
 8002458:	2b14      	cmp	r3, #20
 800245a:	d101      	bne.n	8002460 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800245c:	2304      	movs	r3, #4
 800245e:	e000      	b.n	8002462 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002460:	2305      	movs	r3, #5
    }
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246e:	2003      	movs	r0, #3
 8002470:	f000 fb9d 	bl	8002bae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002474:	200f      	movs	r0, #15
 8002476:	f7ff f96f 	bl	8001758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247a:	f7ff f945 	bl	8001708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_IncTick+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_IncTick+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <HAL_IncTick+0x24>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20000da8 	.word	0x20000da8

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <HAL_GetTick+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000da8 	.word	0x20000da8

080024c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff ffee 	bl	80024ac <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024dc:	d005      	beq.n	80024ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <HAL_Delay+0x44>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ea:	bf00      	nop
 80024ec:	f7ff ffde 	bl	80024ac <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d8f7      	bhi.n	80024ec <HAL_Delay+0x28>
  {
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008

0800250c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002510:	4b03      	ldr	r3, [pc, #12]	@ (8002520 <HAL_GetREVID+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0c1b      	lsrs	r3, r3, #16
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e0042000 	.word	0xe0042000

08002524 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e031      	b.n	800259e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe f89c 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_ADC_Init+0x84>)
 8002568:	4013      	ands	r3, r2
 800256a:	f043 0202 	orr.w	r2, r3, #2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f974 	bl	8002860 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	f043 0201 	orr.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	@ 0x40
 800258e:	e001      	b.n	8002594 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	ffffeefd 	.word	0xffffeefd

080025ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1c>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e13a      	b.n	800283e <HAL_ADC_ConfigChannel+0x292>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b09      	cmp	r3, #9
 80025d6:	d93a      	bls.n	800264e <HAL_ADC_ConfigChannel+0xa2>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025e0:	d035      	beq.n	800264e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68d9      	ldr	r1, [r3, #12]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	3b1e      	subs	r3, #30
 80025f8:	2207      	movs	r2, #7
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	400a      	ands	r2, r1
 8002606:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a8f      	ldr	r2, [pc, #572]	@ (800284c <HAL_ADC_ConfigChannel+0x2a0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10a      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68d9      	ldr	r1, [r3, #12]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	061a      	lsls	r2, r3, #24
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002626:	e039      	b.n	800269c <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68d9      	ldr	r1, [r3, #12]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	4603      	mov	r3, r0
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4403      	add	r3, r0
 8002640:	3b1e      	subs	r3, #30
 8002642:	409a      	lsls	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264c:	e026      	b.n	800269c <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6919      	ldr	r1, [r3, #16]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2207      	movs	r2, #7
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43da      	mvns	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	400a      	ands	r2, r1
 8002674:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6919      	ldr	r1, [r3, #16]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4618      	mov	r0, r3
 8002688:	4603      	mov	r3, r0
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4403      	add	r3, r0
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	409a      	lsls	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d824      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b05      	subs	r3, #5
 80026b6:	221f      	movs	r2, #31
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43da      	mvns	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	400a      	ands	r2, r1
 80026c4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	3b05      	subs	r3, #5
 80026e0:	fa00 f203 	lsl.w	r2, r0, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80026ec:	e04c      	b.n	8002788 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d824      	bhi.n	8002740 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	3b23      	subs	r3, #35	@ 0x23
 8002708:	221f      	movs	r2, #31
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	400a      	ands	r2, r1
 8002716:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	3b23      	subs	r3, #35	@ 0x23
 8002732:	fa00 f203 	lsl.w	r2, r0, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	631a      	str	r2, [r3, #48]	@ 0x30
 800273e:	e023      	b.n	8002788 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3b41      	subs	r3, #65	@ 0x41
 8002752:	221f      	movs	r2, #31
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43da      	mvns	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	400a      	ands	r2, r1
 8002760:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4618      	mov	r0, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	3b41      	subs	r3, #65	@ 0x41
 800277c:	fa00 f203 	lsl.w	r2, r0, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a30      	ldr	r2, [pc, #192]	@ (8002850 <HAL_ADC_ConfigChannel+0x2a4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1fc>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800279a:	d105      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800279c:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 80027a2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a28      	ldr	r2, [pc, #160]	@ (8002850 <HAL_ADC_ConfigChannel+0x2a4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10f      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x226>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b12      	cmp	r3, #18
 80027b8:	d10b      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027ba:	4b26      	ldr	r3, [pc, #152]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a25      	ldr	r2, [pc, #148]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 80027c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80027c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027c6:	4b23      	ldr	r3, [pc, #140]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a22      	ldr	r2, [pc, #136]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 80027cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002850 <HAL_ADC_ConfigChannel+0x2a4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d12b      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x288>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <HAL_ADC_ConfigChannel+0x2a0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <HAL_ADC_ConfigChannel+0x242>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b11      	cmp	r3, #17
 80027ec:	d122      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027ee:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 80027f4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80027f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027fa:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a15      	ldr	r2, [pc, #84]	@ (8002854 <HAL_ADC_ConfigChannel+0x2a8>)
 8002800:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002804:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a10      	ldr	r2, [pc, #64]	@ (800284c <HAL_ADC_ConfigChannel+0x2a0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d111      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <HAL_ADC_ConfigChannel+0x2ac>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a11      	ldr	r2, [pc, #68]	@ (800285c <HAL_ADC_ConfigChannel+0x2b0>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0c9a      	lsrs	r2, r3, #18
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002826:	e002      	b.n	800282e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3b01      	subs	r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f9      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	10000012 	.word	0x10000012
 8002850:	40012000 	.word	0x40012000
 8002854:	40012300 	.word	0x40012300
 8002858:	20000000 	.word	0x20000000
 800285c:	431bde83 	.word	0x431bde83

08002860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002868:	4b78      	ldr	r3, [pc, #480]	@ (8002a4c <ADC_Init+0x1ec>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a77      	ldr	r2, [pc, #476]	@ (8002a4c <ADC_Init+0x1ec>)
 800286e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002872:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002874:	4b75      	ldr	r3, [pc, #468]	@ (8002a4c <ADC_Init+0x1ec>)
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4973      	ldr	r1, [pc, #460]	@ (8002a4c <ADC_Init+0x1ec>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ee:	4a58      	ldr	r2, [pc, #352]	@ (8002a50 <ADC_Init+0x1f0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002902:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e00f      	b.n	800295a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002958:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0202 	bic.w	r2, r2, #2
 8002968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	005a      	lsls	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002996:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	3b01      	subs	r3, #1
 80029b4:	035a      	lsls	r2, r3, #13
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	e007      	b.n	80029d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	051a      	lsls	r2, r3, #20
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a12:	025a      	lsls	r2, r3, #9
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	029a      	lsls	r2, r3, #10
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40012300 	.word	0x40012300
 8002a50:	0f000001 	.word	0x0f000001

08002a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <__NVIC_SetPriorityGrouping+0x40>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a82:	4a04      	ldr	r2, [pc, #16]	@ (8002a94 <__NVIC_SetPriorityGrouping+0x40>)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	60d3      	str	r3, [r2, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00
 8002a98:	05fa0000 	.word	0x05fa0000

08002a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa0:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0307 	and.w	r3, r3, #7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	db0b      	blt.n	8002ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	f003 021f 	and.w	r2, r3, #31
 8002ad0:	4907      	ldr	r1, [pc, #28]	@ (8002af0 <__NVIC_EnableIRQ+0x38>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2001      	movs	r0, #1
 8002ada:	fa00 f202 	lsl.w	r2, r0, r2
 8002ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000e100 	.word	0xe000e100

08002af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db0a      	blt.n	8002b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	490c      	ldr	r1, [pc, #48]	@ (8002b40 <__NVIC_SetPriority+0x4c>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	440b      	add	r3, r1
 8002b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b1c:	e00a      	b.n	8002b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4908      	ldr	r1, [pc, #32]	@ (8002b44 <__NVIC_SetPriority+0x50>)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3b04      	subs	r3, #4
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	440b      	add	r3, r1
 8002b32:	761a      	strb	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	@ 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	bf28      	it	cs
 8002b66:	2304      	movcs	r3, #4
 8002b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d902      	bls.n	8002b78 <NVIC_EncodePriority+0x30>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3b03      	subs	r3, #3
 8002b76:	e000      	b.n	8002b7a <NVIC_EncodePriority+0x32>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	4313      	orrs	r3, r2
         );
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ff4c 	bl	8002a54 <__NVIC_SetPriorityGrouping>
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd6:	f7ff ff61 	bl	8002a9c <__NVIC_GetPriorityGrouping>
 8002bda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	6978      	ldr	r0, [r7, #20]
 8002be2:	f7ff ffb1 	bl	8002b48 <NVIC_EncodePriority>
 8002be6:	4602      	mov	r2, r0
 8002be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff80 	bl	8002af4 <__NVIC_SetPriority>
}
 8002bf4:	bf00      	nop
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff54 	bl	8002ab8 <__NVIC_EnableIRQ>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e054      	b.n	8002cd4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7f5b      	ldrb	r3, [r3, #29]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd fdb4 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	791b      	ldrb	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a22      	ldr	r2, [pc, #136]	@ (8002cdc <HAL_CRC_Init+0xc4>)
 8002c54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0218 	bic.w	r2, r2, #24
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	e00c      	b.n	8002c82 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	461a      	mov	r2, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f834 	bl	8002ce0 <HAL_CRCEx_Polynomial_Set>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e028      	b.n	8002cd4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	795b      	ldrb	r3, [r3, #5]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c92:	611a      	str	r2, [r3, #16]
 8002c94:	e004      	b.n	8002ca0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6912      	ldr	r2, [r2, #16]
 8002c9e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	04c11db7 	.word	0x04c11db7

08002ce0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002cf0:	231f      	movs	r3, #31
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
 8002d02:	e063      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d04:	bf00      	nop
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1e5a      	subs	r2, r3, #1
 8002d0a:	613a      	str	r2, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_CRCEx_Polynomial_Set+0x44>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b18      	cmp	r3, #24
 8002d28:	d846      	bhi.n	8002db8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002dbf 	.word	0x08002dbf
 8002d34:	08002db9 	.word	0x08002db9
 8002d38:	08002db9 	.word	0x08002db9
 8002d3c:	08002db9 	.word	0x08002db9
 8002d40:	08002db9 	.word	0x08002db9
 8002d44:	08002db9 	.word	0x08002db9
 8002d48:	08002db9 	.word	0x08002db9
 8002d4c:	08002db9 	.word	0x08002db9
 8002d50:	08002dad 	.word	0x08002dad
 8002d54:	08002db9 	.word	0x08002db9
 8002d58:	08002db9 	.word	0x08002db9
 8002d5c:	08002db9 	.word	0x08002db9
 8002d60:	08002db9 	.word	0x08002db9
 8002d64:	08002db9 	.word	0x08002db9
 8002d68:	08002db9 	.word	0x08002db9
 8002d6c:	08002db9 	.word	0x08002db9
 8002d70:	08002da1 	.word	0x08002da1
 8002d74:	08002db9 	.word	0x08002db9
 8002d78:	08002db9 	.word	0x08002db9
 8002d7c:	08002db9 	.word	0x08002db9
 8002d80:	08002db9 	.word	0x08002db9
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002db9 	.word	0x08002db9
 8002d8c:	08002db9 	.word	0x08002db9
 8002d90:	08002d95 	.word	0x08002d95
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d913      	bls.n	8002dc2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002d9e:	e010      	b.n	8002dc2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b07      	cmp	r3, #7
 8002da4:	d90f      	bls.n	8002dc6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002daa:	e00c      	b.n	8002dc6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	d90b      	bls.n	8002dca <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002db6:	e008      	b.n	8002dca <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	75fb      	strb	r3, [r7, #23]
        break;
 8002dbc:	e006      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dbe:	bf00      	nop
 8002dc0:	e004      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002dca:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 0118 	bic.w	r1, r3, #24
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e08:	f7ff fb50 	bl	80024ac <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e099      	b.n	8002f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e38:	e00f      	b.n	8002e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e3a:	f7ff fb37 	bl	80024ac <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d908      	bls.n	8002e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e078      	b.n	8002f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1e8      	bne.n	8002e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <HAL_DMA_Init+0x158>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d107      	bne.n	8002ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0307 	bic.w	r3, r3, #7
 8002eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d117      	bne.n	8002f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fa89 	bl	8003418 <DMA_CheckFifoParam>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2240      	movs	r2, #64	@ 0x40
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e016      	b.n	8002f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa40 	bl	80033ac <DMA_CalcBaseAndBitshift>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f34:	223f      	movs	r2, #63	@ 0x3f
 8002f36:	409a      	lsls	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	f010803f 	.word	0xf010803f

08002f58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f66:	f7ff faa1 	bl	80024ac <HAL_GetTick>
 8002f6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e052      	b.n	8003030 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0216 	bic.w	r2, r2, #22
 8002f98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fa8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <HAL_DMA_Abort+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0208 	bic.w	r2, r2, #8
 8002fc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fda:	e013      	b.n	8003004 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fdc:	f7ff fa66 	bl	80024ac <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d90c      	bls.n	8003004 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e015      	b.n	8003030 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e4      	bne.n	8002fdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	223f      	movs	r2, #63	@ 0x3f
 8003018:	409a      	lsls	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d004      	beq.n	8003056 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2280      	movs	r2, #128	@ 0x80
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00c      	b.n	8003070 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2205      	movs	r2, #5
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003088:	4b8e      	ldr	r3, [pc, #568]	@ (80032c4 <HAL_DMA_IRQHandler+0x248>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a8e      	ldr	r2, [pc, #568]	@ (80032c8 <HAL_DMA_IRQHandler+0x24c>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0a9b      	lsrs	r3, r3, #10
 8003094:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	2208      	movs	r2, #8
 80030a8:	409a      	lsls	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01a      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2208      	movs	r2, #8
 80030d6:	409a      	lsls	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ec:	2201      	movs	r2, #1
 80030ee:	409a      	lsls	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d012      	beq.n	800311e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	2201      	movs	r2, #1
 800310c:	409a      	lsls	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003116:	f043 0202 	orr.w	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003122:	2204      	movs	r2, #4
 8003124:	409a      	lsls	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00b      	beq.n	8003154 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	2204      	movs	r2, #4
 8003142:	409a      	lsls	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	2210      	movs	r2, #16
 800315a:	409a      	lsls	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d043      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d03c      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	2210      	movs	r2, #16
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d018      	beq.n	80031be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d108      	bne.n	80031ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d024      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
 80031aa:	e01f      	b.n	80031ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01b      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
 80031bc:	e016      	b.n	80031ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d107      	bne.n	80031dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0208 	bic.w	r2, r2, #8
 80031da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	2220      	movs	r2, #32
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 808f 	beq.w	800331c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8087 	beq.w	800331c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	2220      	movs	r2, #32
 8003214:	409a      	lsls	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b05      	cmp	r3, #5
 8003224:	d136      	bne.n	8003294 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0216 	bic.w	r2, r2, #22
 8003234:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003244:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <HAL_DMA_IRQHandler+0x1da>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0208 	bic.w	r2, r2, #8
 8003264:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326a:	223f      	movs	r2, #63	@ 0x3f
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003286:	2b00      	cmp	r3, #0
 8003288:	d07e      	beq.n	8003388 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
        }
        return;
 8003292:	e079      	b.n	8003388 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01d      	beq.n	80032de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10d      	bne.n	80032cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d031      	beq.n	800331c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
 80032c0:	e02c      	b.n	800331c <HAL_DMA_IRQHandler+0x2a0>
 80032c2:	bf00      	nop
 80032c4:	20000000 	.word	0x20000000
 80032c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d023      	beq.n	800331c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
 80032dc:	e01e      	b.n	800331c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10f      	bne.n	800330c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0210 	bic.w	r2, r2, #16
 80032fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003320:	2b00      	cmp	r3, #0
 8003322:	d032      	beq.n	800338a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d022      	beq.n	8003376 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2205      	movs	r2, #5
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	3301      	adds	r3, #1
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	d307      	bcc.n	8003364 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f2      	bne.n	8003348 <HAL_DMA_IRQHandler+0x2cc>
 8003362:	e000      	b.n	8003366 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003364:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
 8003386:	e000      	b.n	800338a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003388:	bf00      	nop
    }
  }
}
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800339e:	b2db      	uxtb	r3, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3b10      	subs	r3, #16
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <DMA_CalcBaseAndBitshift+0x60>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033c6:	4a12      	ldr	r2, [pc, #72]	@ (8003410 <DMA_CalcBaseAndBitshift+0x64>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d908      	bls.n	80033ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <DMA_CalcBaseAndBitshift+0x68>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	1d1a      	adds	r2, r3, #4
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80033ea:	e006      	b.n	80033fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b08      	ldr	r3, [pc, #32]	@ (8003414 <DMA_CalcBaseAndBitshift+0x68>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	aaaaaaab 	.word	0xaaaaaaab
 8003410:	0801aa24 	.word	0x0801aa24
 8003414:	fffffc00 	.word	0xfffffc00

08003418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11f      	bne.n	8003472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d856      	bhi.n	80034e6 <DMA_CheckFifoParam+0xce>
 8003438:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <DMA_CheckFifoParam+0x28>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003451 	.word	0x08003451
 8003444:	08003463 	.word	0x08003463
 8003448:	08003451 	.word	0x08003451
 800344c:	080034e7 	.word	0x080034e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d046      	beq.n	80034ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003460:	e043      	b.n	80034ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800346a:	d140      	bne.n	80034ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e03d      	b.n	80034ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800347a:	d121      	bne.n	80034c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d837      	bhi.n	80034f2 <DMA_CheckFifoParam+0xda>
 8003482:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <DMA_CheckFifoParam+0x70>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	0800349f 	.word	0x0800349f
 8003490:	08003499 	.word	0x08003499
 8003494:	080034b1 	.word	0x080034b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e030      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d025      	beq.n	80034f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ae:	e022      	b.n	80034f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034b8:	d11f      	bne.n	80034fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034be:	e01c      	b.n	80034fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d903      	bls.n	80034ce <DMA_CheckFifoParam+0xb6>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d003      	beq.n	80034d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034cc:	e018      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      break;
 80034d2:	e015      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e00b      	b.n	80034fe <DMA_CheckFifoParam+0xe6>
      break;
 80034e6:	bf00      	nop
 80034e8:	e00a      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e008      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034ee:	bf00      	nop
 80034f0:	e006      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e004      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;   
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e086      	b.n	8003630 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f005 ff7d 	bl	8009434 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	4b3f      	ldr	r3, [pc, #252]	@ (8003638 <HAL_ETH_Init+0x128>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353e:	4a3e      	ldr	r2, [pc, #248]	@ (8003638 <HAL_ETH_Init+0x128>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003544:	6453      	str	r3, [r2, #68]	@ 0x44
 8003546:	4b3c      	ldr	r3, [pc, #240]	@ (8003638 <HAL_ETH_Init+0x128>)
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003552:	4b3a      	ldr	r3, [pc, #232]	@ (800363c <HAL_ETH_Init+0x12c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a39      	ldr	r2, [pc, #228]	@ (800363c <HAL_ETH_Init+0x12c>)
 8003558:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800355c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800355e:	4b37      	ldr	r3, [pc, #220]	@ (800363c <HAL_ETH_Init+0x12c>)
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	4935      	ldr	r1, [pc, #212]	@ (800363c <HAL_ETH_Init+0x12c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800356c:	4b33      	ldr	r3, [pc, #204]	@ (800363c <HAL_ETH_Init+0x12c>)
 800356e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003586:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003588:	f7fe ff90 	bl	80024ac <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800358e:	e011      	b.n	80035b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003590:	f7fe ff8c 	bl	80024ac <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800359e:	d909      	bls.n	80035b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2204      	movs	r2, #4
 80035a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	22e0      	movs	r2, #224	@ 0xe0
 80035ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e03d      	b.n	8003630 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1e4      	bne.n	8003590 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 ff5c 	bl	8004484 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f001 f807 	bl	80045e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 f85d 	bl	8004692 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	461a      	mov	r2, r3
 80035de:	2100      	movs	r1, #0
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 ffc5 	bl	8004570 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80035f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <HAL_ETH_Init+0x130>)
 8003604:	430b      	orrs	r3, r1
 8003606:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800361a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2210      	movs	r2, #16
 800362a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	40013800 	.word	0x40013800
 8003640:	00020060 	.word	0x00020060

08003644 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003652:	2b10      	cmp	r3, #16
 8003654:	d15f      	bne.n	8003716 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2204      	movs	r2, #4
 8003668:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f9f6 	bl	8003a5c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003678:	2001      	movs	r0, #1
 800367a:	f7fe ff23 	bl	80024c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003698:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800369c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	f043 0302 	orr.w	r3, r3, #2
 80036b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036b4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fd80 	bl	80041bc <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0208 	orr.w	r2, r2, #8
 80036ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036d4:	2001      	movs	r0, #1
 80036d6:	f7fe fef5 	bl	80024c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0204 	orr.w	r2, r2, #4
 80036f0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036fa:	69d9      	ldr	r1, [r3, #28]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <HAL_ETH_Start_IT+0xdc>)
 8003702:	430b      	orrs	r3, r1
 8003704:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003708:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2240      	movs	r2, #64	@ 0x40
 800370e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	e000      	b.n	8003718 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
  }
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	0001a0c1 	.word	0x0001a0c1

08003724 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d16e      	bne.n	8003814 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003746:	69d9      	ldr	r1, [r3, #28]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b34      	ldr	r3, [pc, #208]	@ (8003820 <HAL_ETH_Stop_IT+0xfc>)
 800374e:	400b      	ands	r3, r1
 8003750:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003754:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003768:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800376c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	f023 0302 	bic.w	r3, r3, #2
 8003780:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003784:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0204 	bic.w	r2, r2, #4
 8003794:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800379e:	2001      	movs	r0, #1
 80037a0:	f7fe fe90 	bl	80024c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fd05 	bl	80041bc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0208 	bic.w	r2, r2, #8
 80037c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80037ca:	2001      	movs	r0, #1
 80037cc:	f7fe fe7a 	bl	80024c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e00e      	b.n	80037fc <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	3212      	adds	r2, #18
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	3301      	adds	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d9ed      	bls.n	80037de <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2210      	movs	r2, #16
 800380c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	fffe5f3e 	.word	0xfffe5f3e

08003824 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e045      	b.n	80038d4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800384e:	2b40      	cmp	r3, #64	@ 0x40
 8003850:	d13f      	bne.n	80038d2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800385a:	2201      	movs	r2, #1
 800385c:	6839      	ldr	r1, [r7, #0]
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 ff86 	bl	8004770 <ETH_Prepare_Tx_Descriptors>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	f043 0202 	orr.w	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e02a      	b.n	80038d4 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800387e:	f3bf 8f4f 	dsb	sy
}
 8003882:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	2b03      	cmp	r3, #3
 8003894:	d904      	bls.n	80038a0 <HAL_ETH_Transmit_IT+0x7c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389a:	1f1a      	subs	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038ba:	461a      	mov	r2, r3
 80038bc:	2304      	movs	r3, #4
 80038be:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038c8:	461a      	mov	r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0a4      	b.n	8003a52 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800390e:	2b40      	cmp	r3, #64	@ 0x40
 8003910:	d001      	beq.n	8003916 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e09d      	b.n	8003a52 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	3212      	adds	r2, #18
 8003922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003926:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800392c:	f1c3 0304 	rsb	r3, r3, #4
 8003930:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003932:	e066      	b.n	8003a02 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <HAL_ETH_ReadData+0x88>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d03c      	beq.n	80039de <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003986:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800399c:	2301      	movs	r3, #1
 800399e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80039b8:	461a      	mov	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f005 ff0d 	bl	80097dc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3301      	adds	r3, #1
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d902      	bls.n	80039f0 <HAL_ETH_ReadData+0x114>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b04      	subs	r3, #4
 80039ee:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	3212      	adds	r2, #18
 80039f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	3301      	adds	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db06      	blt.n	8003a18 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d202      	bcs.n	8003a18 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d08d      	beq.n	8003934 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	441a      	add	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f815 	bl	8003a5c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003a38:	7cfb      	ldrb	r3, [r7, #19]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d108      	bne.n	8003a50 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a70:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	3212      	adds	r2, #18
 8003a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a82:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003a84:	e042      	b.n	8003b0c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d112      	bne.n	8003ab4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	4618      	mov	r0, r3
 8003a94:	f005 fe72 	bl	800977c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	74fb      	strb	r3, [r7, #19]
 8003aa2:	e007      	b.n	8003ab4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003ab4:	7cfb      	ldrb	r3, [r7, #19]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d028      	beq.n	8003b0c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <ETH_UpdateDescriptor+0x104>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	6053      	str	r3, [r2, #4]
 8003ace:	e005      	b.n	8003adc <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d902      	bls.n	8003afa <ETH_UpdateDescriptor+0x9e>
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	3b04      	subs	r3, #4
 8003af8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	3212      	adds	r2, #18
 8003b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b04:	617b      	str	r3, [r7, #20]
      desccount--;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <ETH_UpdateDescriptor+0xbc>
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1b6      	bne.n	8003a86 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d01a      	beq.n	8003b58 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3303      	adds	r3, #3
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003b2c:	f3bf 8f5f 	dmb	sy
}
 8003b30:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6919      	ldr	r1, [r3, #16]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	18ca      	adds	r2, r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b4a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003b58:	bf00      	nop
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	80004000 	.word	0x80004000

08003b64 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3318      	adds	r3, #24
 8003b70:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003b82:	e047      	b.n	8003c14 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3304      	adds	r3, #4
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d902      	bls.n	8003bb0 <HAL_ETH_ReleaseTxPacket+0x4c>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	3b04      	subs	r3, #4
 8003bae:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02c      	beq.n	8003c14 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68d9      	ldr	r1, [r3, #12]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	440b      	add	r3, r1
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	db1f      	blt.n	8003c10 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f005 fe3f 	bl	8009860 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	3304      	adds	r3, #4
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	2200      	movs	r2, #0
 8003bee:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d902      	bls.n	8003c02 <HAL_ETH_ReleaseTxPacket+0x9e>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c0e:	e001      	b.n	8003c14 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_ETH_ReleaseTxPacket+0xbc>
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1b1      	bne.n	8003b84 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003c54:	4b4b      	ldr	r3, [pc, #300]	@ (8003d84 <HAL_ETH_IRQHandler+0x158>)
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <HAL_ETH_IRQHandler+0x56>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d009      	beq.n	8003c82 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b43      	ldr	r3, [pc, #268]	@ (8003d88 <HAL_ETH_IRQHandler+0x15c>)
 8003c7a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f005 f8ed 	bl	8008e5c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00f      	beq.n	8003cac <HAL_ETH_IRQHandler+0x80>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003ca4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f005 f8e8 	bl	8008e7c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d042      	beq.n	8003d3c <HAL_ETH_IRQHandler+0x110>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03d      	beq.n	8003d3c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc6:	f043 0208 	orr.w	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01a      	beq.n	8003d10 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	4b29      	ldr	r3, [pc, #164]	@ (8003d8c <HAL_ETH_IRQHandler+0x160>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003d00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d04:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	22e0      	movs	r2, #224	@ 0xe0
 8003d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003d0e:	e012      	b.n	8003d36 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003d1e:	4013      	ands	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003d34:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f005 f8b0 	bl	8008e9c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f81a 	bl	8003d90 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003d6e:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <HAL_ETH_IRQHandler+0x158>)
 8003d70:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d74:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f814 	bl	8003da4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40013c00 	.word	0x40013c00
 8003d88:	00010040 	.word	0x00010040
 8003d8c:	007e2000 	.word	0x007e2000

08003d90 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 031c 	and.w	r3, r3, #28
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	02db      	lsls	r3, r3, #11
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	019b      	lsls	r3, r3, #6
 8003de6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0302 	bic.w	r3, r3, #2
 8003df6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003e08:	f7fe fb50 	bl	80024ac <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e0e:	e00d      	b.n	8003e2c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003e10:	f7fe fb4c 	bl	80024ac <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1e:	d301      	bcc.n	8003e24 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e010      	b.n	8003e46 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ec      	bne.n	8003e10 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 031c 	and.w	r3, r3, #28
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	02db      	lsls	r3, r3, #11
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ea8:	f7fe fb00 	bl	80024ac <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003eae:	e00d      	b.n	8003ecc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003eb0:	f7fe fafc 	bl	80024ac <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ebe:	d301      	bcc.n	8003ec4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e009      	b.n	8003ed8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ec      	bne.n	8003eb0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0e6      	b.n	80040c2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bf14      	ite	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	2300      	moveq	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400a:	2b00      	cmp	r3, #0
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf0c      	ite	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	2300      	movne	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	b29a      	uxth	r2, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e00b      	b.n	80040fa <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d105      	bne.n	80040f8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80040ec:	6839      	ldr	r1, [r7, #0]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f88a 	bl	8004208 <ETH_SetMACConfig>

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 031c 	bic.w	r3, r3, #28
 800411a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800411c:	f002 fa0c 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8004120:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4a14      	ldr	r2, [pc, #80]	@ (8004178 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d804      	bhi.n	8004134 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f043 0308 	orr.w	r3, r3, #8
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e019      	b.n	8004168 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a11      	ldr	r2, [pc, #68]	@ (800417c <HAL_ETH_SetMDIOClockRange+0x78>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d204      	bcs.n	8004146 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f043 030c 	orr.w	r3, r3, #12
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e010      	b.n	8004168 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4a0d      	ldr	r2, [pc, #52]	@ (8004180 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d90c      	bls.n	8004168 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4a0c      	ldr	r2, [pc, #48]	@ (8004184 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d804      	bhi.n	8004160 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e003      	b.n	8004168 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f043 0310 	orr.w	r3, r3, #16
 8004166:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	611a      	str	r2, [r3, #16]
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	02160ebf 	.word	0x02160ebf
 800417c:	03938700 	.word	0x03938700
 8004180:	05f5e0ff 	.word	0x05f5e0ff
 8004184:	08f0d17f 	.word	0x08f0d17f

08004188 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041de:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041ec:	2001      	movs	r0, #1
 80041ee:	f7fe f969 	bl	80024c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041fc:	6193      	str	r3, [r2, #24]
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4b53      	ldr	r3, [pc, #332]	@ (800436c <ETH_SetMACConfig+0x164>)
 800421e:	4013      	ands	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	7b9b      	ldrb	r3, [r3, #14]
 8004226:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	7c12      	ldrb	r2, [r2, #16]
 800422c:	2a00      	cmp	r2, #0
 800422e:	d102      	bne.n	8004236 <ETH_SetMACConfig+0x2e>
 8004230:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004234:	e000      	b.n	8004238 <ETH_SetMACConfig+0x30>
 8004236:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004238:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	7c52      	ldrb	r2, [r2, #17]
 800423e:	2a00      	cmp	r2, #0
 8004240:	d102      	bne.n	8004248 <ETH_SetMACConfig+0x40>
 8004242:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004246:	e000      	b.n	800424a <ETH_SetMACConfig+0x42>
 8004248:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800424a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004250:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	7fdb      	ldrb	r3, [r3, #31]
 8004256:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004258:	431a      	orrs	r2, r3
                        macconf->Speed |
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800425e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	7f92      	ldrb	r2, [r2, #30]
 8004264:	2a00      	cmp	r2, #0
 8004266:	d102      	bne.n	800426e <ETH_SetMACConfig+0x66>
 8004268:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800426c:	e000      	b.n	8004270 <ETH_SetMACConfig+0x68>
 800426e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004270:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	7f1b      	ldrb	r3, [r3, #28]
 8004276:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004278:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800427e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	791b      	ldrb	r3, [r3, #4]
 8004284:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004286:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800428e:	2a00      	cmp	r2, #0
 8004290:	d102      	bne.n	8004298 <ETH_SetMACConfig+0x90>
 8004292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004296:	e000      	b.n	800429a <ETH_SetMACConfig+0x92>
 8004298:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800429a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	7bdb      	ldrb	r3, [r3, #15]
 80042a0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80042a2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80042a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042b0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80042b2:	4313      	orrs	r3, r2
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042ca:	2001      	movs	r0, #1
 80042cc:	f7fe f8fa 	bl	80024c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80042e6:	4013      	ands	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ee:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80042f6:	2a00      	cmp	r2, #0
 80042f8:	d101      	bne.n	80042fe <ETH_SetMACConfig+0xf6>
 80042fa:	2280      	movs	r2, #128	@ 0x80
 80042fc:	e000      	b.n	8004300 <ETH_SetMACConfig+0xf8>
 80042fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004300:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004306:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800430e:	2a01      	cmp	r2, #1
 8004310:	d101      	bne.n	8004316 <ETH_SetMACConfig+0x10e>
 8004312:	2208      	movs	r2, #8
 8004314:	e000      	b.n	8004318 <ETH_SetMACConfig+0x110>
 8004316:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004318:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004320:	2a01      	cmp	r2, #1
 8004322:	d101      	bne.n	8004328 <ETH_SetMACConfig+0x120>
 8004324:	2204      	movs	r2, #4
 8004326:	e000      	b.n	800432a <ETH_SetMACConfig+0x122>
 8004328:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800432a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004332:	2a01      	cmp	r2, #1
 8004334:	d101      	bne.n	800433a <ETH_SetMACConfig+0x132>
 8004336:	2202      	movs	r2, #2
 8004338:	e000      	b.n	800433c <ETH_SetMACConfig+0x134>
 800433a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800433c:	4313      	orrs	r3, r2
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004354:	2001      	movs	r0, #1
 8004356:	f7fe f8b5 	bl	80024c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	619a      	str	r2, [r3, #24]
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	fd20810f 	.word	0xfd20810f

08004370 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4b3d      	ldr	r3, [pc, #244]	@ (8004480 <ETH_SetDMAConfig+0x110>)
 800438a:	4013      	ands	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	7b1b      	ldrb	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d102      	bne.n	800439c <ETH_SetDMAConfig+0x2c>
 8004396:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800439a:	e000      	b.n	800439e <ETH_SetDMAConfig+0x2e>
 800439c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	7b5b      	ldrb	r3, [r3, #13]
 80043a2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80043a4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	7f52      	ldrb	r2, [r2, #29]
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d102      	bne.n	80043b4 <ETH_SetDMAConfig+0x44>
 80043ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80043b2:	e000      	b.n	80043b6 <ETH_SetDMAConfig+0x46>
 80043b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80043b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	7b9b      	ldrb	r3, [r3, #14]
 80043bc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80043be:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80043c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	7f1b      	ldrb	r3, [r3, #28]
 80043ca:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80043cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	7f9b      	ldrb	r3, [r3, #30]
 80043d2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80043d4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80043da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043e2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80043e4:	4313      	orrs	r3, r2
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043f4:	461a      	mov	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004406:	2001      	movs	r0, #1
 8004408:	f7fe f85c 	bl	80024c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004414:	461a      	mov	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	791b      	ldrb	r3, [r3, #4]
 800441e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004424:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800442a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004430:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004438:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800443a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004442:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004448:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004452:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004456:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004464:	2001      	movs	r0, #1
 8004466:	f7fe f82d 	bl	80024c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	f8de3f23 	.word	0xf8de3f23

08004484 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b0a6      	sub	sp, #152	@ 0x98
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004498:	2300      	movs	r3, #0
 800449a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800449c:	2300      	movs	r3, #0
 800449e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80044c6:	2300      	movs	r3, #0
 80044c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80044ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80044f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80044fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fe7f 	bl	8004208 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800450a:	2301      	movs	r3, #1
 800450c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800450e:	2301      	movs	r3, #1
 8004510:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004518:	2301      	movs	r3, #1
 800451a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004520:	2300      	movs	r3, #0
 8004522:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004526:	2300      	movs	r3, #0
 8004528:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800452c:	2300      	movs	r3, #0
 800452e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004536:	2301      	movs	r3, #1
 8004538:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800453a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800453e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004540:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004544:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800454a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004552:	2300      	movs	r3, #0
 8004554:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	4619      	mov	r1, r3
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff05 	bl	8004370 <ETH_SetDMAConfig>
}
 8004566:	bf00      	nop
 8004568:	3798      	adds	r7, #152	@ 0x98
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3305      	adds	r3, #5
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	3204      	adds	r2, #4
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <ETH_MACAddressConfig+0x68>)
 8004592:	4413      	add	r3, r2
 8004594:	461a      	mov	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3303      	adds	r3, #3
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	061a      	lsls	r2, r3, #24
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3302      	adds	r3, #2
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3301      	adds	r3, #1
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	4313      	orrs	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <ETH_MACAddressConfig+0x6c>)
 80045c2:	4413      	add	r3, r2
 80045c4:	461a      	mov	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	6013      	str	r3, [r2, #0]
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40028040 	.word	0x40028040
 80045dc:	40028044 	.word	0x40028044

080045e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e03e      	b.n	800466c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68d9      	ldr	r1, [r3, #12]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	440b      	add	r3, r1
 80045fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2200      	movs	r2, #0
 800460a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2200      	movs	r2, #0
 8004616:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	3206      	adds	r2, #6
 8004620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d80c      	bhi.n	8004650 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68d9      	ldr	r1, [r3, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	461a      	mov	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	e004      	b.n	800465a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	461a      	mov	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3301      	adds	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d9bd      	bls.n	80045ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004684:	611a      	str	r2, [r3, #16]
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e048      	b.n	8004732 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6919      	ldr	r1, [r3, #16]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	440b      	add	r3, r1
 80046b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2200      	movs	r2, #0
 80046c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2200      	movs	r2, #0
 80046ce:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2200      	movs	r2, #0
 80046d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046dc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	3212      	adds	r2, #18
 80046fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d80c      	bhi.n	8004722 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6919      	ldr	r1, [r3, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	440b      	add	r3, r1
 800471a:	461a      	mov	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	60da      	str	r2, [r3, #12]
 8004720:	e004      	b.n	800472c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	461a      	mov	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d9b3      	bls.n	80046a0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004762:	60da      	str	r2, [r3, #12]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004770:	b480      	push	{r7}
 8004772:	b091      	sub	sp, #68	@ 0x44
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3318      	adds	r3, #24
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047b2:	d007      	beq.n	80047c4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80047b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b8:	3304      	adds	r3, #4
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80047c4:	2302      	movs	r3, #2
 80047c6:	e111      	b.n	80049ec <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80047c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ca:	3301      	adds	r3, #1
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4b86      	ldr	r3, [pc, #536]	@ (80049f8 <ETH_Prepare_Tx_Descriptors+0x288>)
 80047de:	4013      	ands	r3, r2
 80047e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e2:	6852      	ldr	r2, [r2, #4]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80047f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	431a      	orrs	r2, r3
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	431a      	orrs	r2, r3
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800484a:	e082      	b.n	8004952 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d006      	beq.n	800486c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e005      	b.n	8004878 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487a:	3301      	adds	r3, #1
 800487c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800487e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004880:	2b03      	cmp	r3, #3
 8004882:	d902      	bls.n	800488a <ETH_Prepare_Tx_Descriptors+0x11a>
 8004884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004886:	3b04      	subs	r3, #4
 8004888:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800488e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004892:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800489c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048a0:	d007      	beq.n	80048b2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80048a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a6:	3304      	adds	r3, #4
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d029      	beq.n	8004906 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048c4:	e019      	b.n	80048fa <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80048c6:	f3bf 8f5f 	dmb	sy
}
 80048ca:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80048d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048da:	3301      	adds	r3, #1
 80048dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d902      	bls.n	80048ea <ETH_Prepare_Tx_Descriptors+0x17a>
 80048e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e6:	3b04      	subs	r3, #4
 80048e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80048f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f6:	3301      	adds	r3, #1
 80048f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fe:	429a      	cmp	r2, r3
 8004900:	d3e1      	bcc.n	80048c6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004902:	2302      	movs	r3, #2
 8004904:	e072      	b.n	80049ec <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004914:	3301      	adds	r3, #1
 8004916:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4b32      	ldr	r3, [pc, #200]	@ (80049f8 <ETH_Prepare_Tx_Descriptors+0x288>)
 800492e:	4013      	ands	r3, r2
 8004930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004932:	6852      	ldr	r2, [r2, #4]
 8004934:	431a      	orrs	r2, r3
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	3301      	adds	r3, #1
 800493e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004940:	f3bf 8f5f 	dmb	sy
}
 8004944:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f47f af78 	bne.w	800484c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d006      	beq.n	8004970 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e005      	b.n	800497c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	6a3a      	ldr	r2, [r7, #32]
 800498c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004990:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004992:	f3bf 8f5f 	dmb	sy
}
 8004996:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ac:	3304      	adds	r3, #4
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049b8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ba:	f3ef 8310 	mrs	r3, PRIMASK
 80049be:	613b      	str	r3, [r7, #16]
  return(result);
 80049c0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	2301      	movs	r3, #1
 80049c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	4413      	add	r3, r2
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f383 8810 	msr	PRIMASK, r3
}
 80049e8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3744      	adds	r7, #68	@ 0x44
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	ffffe000 	.word	0xffffe000

080049fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	@ 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004a16:	2300      	movs	r3, #0
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e175      	b.n	8004d08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	f040 8164 	bne.w	8004d02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d005      	beq.n	8004a52 <HAL_GPIO_Init+0x56>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d130      	bne.n	8004ab4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a88:	2201      	movs	r2, #1
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 0201 	and.w	r2, r3, #1
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d017      	beq.n	8004af0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2203      	movs	r2, #3
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d123      	bne.n	8004b44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	08da      	lsrs	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3208      	adds	r2, #8
 8004b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	220f      	movs	r2, #15
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	08da      	lsrs	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3208      	adds	r2, #8
 8004b3e:	69b9      	ldr	r1, [r7, #24]
 8004b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	2203      	movs	r2, #3
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0203 	and.w	r2, r3, #3
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80be 	beq.w	8004d02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b86:	4b66      	ldr	r3, [pc, #408]	@ (8004d20 <HAL_GPIO_Init+0x324>)
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	4a65      	ldr	r2, [pc, #404]	@ (8004d20 <HAL_GPIO_Init+0x324>)
 8004b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b92:	4b63      	ldr	r3, [pc, #396]	@ (8004d20 <HAL_GPIO_Init+0x324>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b9e:	4a61      	ldr	r2, [pc, #388]	@ (8004d24 <HAL_GPIO_Init+0x328>)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	089b      	lsrs	r3, r3, #2
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	220f      	movs	r2, #15
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a58      	ldr	r2, [pc, #352]	@ (8004d28 <HAL_GPIO_Init+0x32c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d037      	beq.n	8004c3a <HAL_GPIO_Init+0x23e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a57      	ldr	r2, [pc, #348]	@ (8004d2c <HAL_GPIO_Init+0x330>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d031      	beq.n	8004c36 <HAL_GPIO_Init+0x23a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a56      	ldr	r2, [pc, #344]	@ (8004d30 <HAL_GPIO_Init+0x334>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d02b      	beq.n	8004c32 <HAL_GPIO_Init+0x236>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a55      	ldr	r2, [pc, #340]	@ (8004d34 <HAL_GPIO_Init+0x338>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d025      	beq.n	8004c2e <HAL_GPIO_Init+0x232>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a54      	ldr	r2, [pc, #336]	@ (8004d38 <HAL_GPIO_Init+0x33c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01f      	beq.n	8004c2a <HAL_GPIO_Init+0x22e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a53      	ldr	r2, [pc, #332]	@ (8004d3c <HAL_GPIO_Init+0x340>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d019      	beq.n	8004c26 <HAL_GPIO_Init+0x22a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a52      	ldr	r2, [pc, #328]	@ (8004d40 <HAL_GPIO_Init+0x344>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <HAL_GPIO_Init+0x226>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a51      	ldr	r2, [pc, #324]	@ (8004d44 <HAL_GPIO_Init+0x348>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00d      	beq.n	8004c1e <HAL_GPIO_Init+0x222>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a50      	ldr	r2, [pc, #320]	@ (8004d48 <HAL_GPIO_Init+0x34c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <HAL_GPIO_Init+0x21e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8004d4c <HAL_GPIO_Init+0x350>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d101      	bne.n	8004c16 <HAL_GPIO_Init+0x21a>
 8004c12:	2309      	movs	r3, #9
 8004c14:	e012      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c16:	230a      	movs	r3, #10
 8004c18:	e010      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	e00e      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c1e:	2307      	movs	r3, #7
 8004c20:	e00c      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c22:	2306      	movs	r3, #6
 8004c24:	e00a      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c26:	2305      	movs	r3, #5
 8004c28:	e008      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	e006      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e004      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e002      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_GPIO_Init+0x240>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	f002 0203 	and.w	r2, r2, #3
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	4093      	lsls	r3, r2
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c4c:	4935      	ldr	r1, [pc, #212]	@ (8004d24 <HAL_GPIO_Init+0x328>)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	3302      	adds	r3, #2
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d50 <HAL_GPIO_Init+0x354>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	43db      	mvns	r3, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4013      	ands	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c7e:	4a34      	ldr	r2, [pc, #208]	@ (8004d50 <HAL_GPIO_Init+0x354>)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c84:	4b32      	ldr	r3, [pc, #200]	@ (8004d50 <HAL_GPIO_Init+0x354>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ca8:	4a29      	ldr	r2, [pc, #164]	@ (8004d50 <HAL_GPIO_Init+0x354>)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cae:	4b28      	ldr	r3, [pc, #160]	@ (8004d50 <HAL_GPIO_Init+0x354>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d50 <HAL_GPIO_Init+0x354>)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <HAL_GPIO_Init+0x354>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cfc:	4a14      	ldr	r2, [pc, #80]	@ (8004d50 <HAL_GPIO_Init+0x354>)
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	3301      	adds	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2b0f      	cmp	r3, #15
 8004d0c:	f67f ae86 	bls.w	8004a1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3724      	adds	r7, #36	@ 0x24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40013800 	.word	0x40013800
 8004d28:	40020000 	.word	0x40020000
 8004d2c:	40020400 	.word	0x40020400
 8004d30:	40020800 	.word	0x40020800
 8004d34:	40020c00 	.word	0x40020c00
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40021400 	.word	0x40021400
 8004d40:	40021800 	.word	0x40021800
 8004d44:	40021c00 	.word	0x40021c00
 8004d48:	40022000 	.word	0x40022000
 8004d4c:	40022400 	.word	0x40022400
 8004d50:	40013c00 	.word	0x40013c00

08004d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e08b      	b.n	8004e7e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fc f880 	bl	8000e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2224      	movs	r2, #36	@ 0x24
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004da4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004db4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d107      	bne.n	8004dce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	e006      	b.n	8004ddc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d108      	bne.n	8004df6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004df2:	605a      	str	r2, [r3, #4]
 8004df4:	e007      	b.n	8004e06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b1d      	ldr	r3, [pc, #116]	@ (8004e88 <HAL_I2C_Init+0x134>)
 8004e12:	430b      	orrs	r3, r1
 8004e14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69d9      	ldr	r1, [r3, #28]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1a      	ldr	r2, [r3, #32]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	02008000 	.word	0x02008000

08004e8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d010      	beq.n	8004f06 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	09db      	lsrs	r3, r3, #7
 8004ee8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef4:	f043 0201 	orr.w	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f04:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	0a9b      	lsrs	r3, r3, #10
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d010      	beq.n	8004f34 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	09db      	lsrs	r3, r3, #7
 8004f16:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	f043 0208 	orr.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	0a5b      	lsrs	r3, r3, #9
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d010      	beq.n	8004f62 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	09db      	lsrs	r3, r3, #7
 8004f44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f50:	f043 0202 	orr.w	r2, r3, #2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 030b 	and.w	r3, r3, #11
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fbeb 	bl	8005750 <I2C_ITError>
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b086      	sub	sp, #24
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <I2C_Slave_ISR_IT+0x24>
 8005022:	2302      	movs	r3, #2
 8005024:	e0ed      	b.n	8005202 <I2C_Slave_ISR_IT+0x200>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005046:	6939      	ldr	r1, [r7, #16]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f9c1 	bl	80053d0 <I2C_ITSlaveCplt>
 800504e:	e0d3      	b.n	80051f8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d04d      	beq.n	80050f8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005064:	2b00      	cmp	r3, #0
 8005066:	d047      	beq.n	80050f8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d128      	bne.n	80050c4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b28      	cmp	r3, #40	@ 0x28
 800507c:	d108      	bne.n	8005090 <I2C_Slave_ISR_IT+0x8e>
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005084:	d104      	bne.n	8005090 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005086:	6939      	ldr	r1, [r7, #16]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fb0b 	bl	80056a4 <I2C_ITListenCplt>
 800508e:	e032      	b.n	80050f6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b29      	cmp	r3, #41	@ 0x29
 800509a:	d10e      	bne.n	80050ba <I2C_Slave_ISR_IT+0xb8>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050a2:	d00a      	beq.n	80050ba <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2210      	movs	r2, #16
 80050aa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fc66 	bl	800597e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f92d 	bl	8005312 <I2C_ITSlaveSeqCplt>
 80050b8:	e01d      	b.n	80050f6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2210      	movs	r2, #16
 80050c0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80050c2:	e096      	b.n	80051f2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2210      	movs	r2, #16
 80050ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d0:	f043 0204 	orr.w	r2, r3, #4
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <I2C_Slave_ISR_IT+0xe6>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050e4:	f040 8085 	bne.w	80051f2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ec:	4619      	mov	r1, r3
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fb2e 	bl	8005750 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80050f4:	e07d      	b.n	80051f2 <I2C_Slave_ISR_IT+0x1f0>
 80050f6:	e07c      	b.n	80051f2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d030      	beq.n	8005166 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	089b      	lsrs	r3, r3, #2
 8005108:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02a      	beq.n	8005166 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d14f      	bne.n	80051f6 <I2C_Slave_ISR_IT+0x1f4>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800515c:	d04b      	beq.n	80051f6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f8d7 	bl	8005312 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005164:	e047      	b.n	80051f6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	08db      	lsrs	r3, r3, #3
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	08db      	lsrs	r3, r3, #3
 8005176:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800517e:	6939      	ldr	r1, [r7, #16]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f842 	bl	800520a <I2C_ITAddrCplt>
 8005186:	e037      	b.n	80051f8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d031      	beq.n	80051f8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02b      	beq.n	80051f8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	781a      	ldrb	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80051da:	e00d      	b.n	80051f8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051e2:	d002      	beq.n	80051ea <I2C_Slave_ISR_IT+0x1e8>
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f891 	bl	8005312 <I2C_ITSlaveSeqCplt>
 80051f0:	e002      	b.n	80051f8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80051f2:	bf00      	nop
 80051f4:	e000      	b.n	80051f8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80051f6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005220:	2b28      	cmp	r3, #40	@ 0x28
 8005222:	d16a      	bne.n	80052fa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	b29b      	uxth	r3, r3
 800523e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005242:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005250:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800525e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d138      	bne.n	80052da <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005268:	897b      	ldrh	r3, [r7, #10]
 800526a:	09db      	lsrs	r3, r3, #7
 800526c:	b29a      	uxth	r2, r3
 800526e:	89bb      	ldrh	r3, [r7, #12]
 8005270:	4053      	eors	r3, r2
 8005272:	b29b      	uxth	r3, r3
 8005274:	f003 0306 	and.w	r3, r3, #6
 8005278:	2b00      	cmp	r3, #0
 800527a:	d11c      	bne.n	80052b6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800527c:	897b      	ldrh	r3, [r7, #10]
 800527e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528e:	2b02      	cmp	r3, #2
 8005290:	d13b      	bne.n	800530a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2208      	movs	r2, #8
 800529e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80052a8:	89ba      	ldrh	r2, [r7, #12]
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff fe7b 	bl	8004faa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80052b4:	e029      	b.n	800530a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80052b6:	893b      	ldrh	r3, [r7, #8]
 80052b8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80052ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fb9f 	bl	8005a02 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80052cc:	89ba      	ldrh	r2, [r7, #12]
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fe69 	bl	8004faa <HAL_I2C_AddrCallback>
}
 80052d8:	e017      	b.n	800530a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80052da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fb8f 	bl	8005a02 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80052ec:	89ba      	ldrh	r2, [r7, #12]
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff fe59 	bl	8004faa <HAL_I2C_AddrCallback>
}
 80052f8:	e007      	b.n	800530a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2208      	movs	r2, #8
 8005300:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	0b9b      	lsrs	r3, r3, #14
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e00d      	b.n	8005364 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0bdb      	lsrs	r3, r3, #15
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005362:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b29      	cmp	r3, #41	@ 0x29
 800536e:	d112      	bne.n	8005396 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2228      	movs	r2, #40	@ 0x28
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2221      	movs	r2, #33	@ 0x21
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800537e:	2101      	movs	r1, #1
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fb3e 	bl	8005a02 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fdf7 	bl	8004f82 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005394:	e017      	b.n	80053c6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a0:	d111      	bne.n	80053c6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2228      	movs	r2, #40	@ 0x28
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2222      	movs	r2, #34	@ 0x22
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80053b0:	2102      	movs	r1, #2
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb25 	bl	8005a02 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff fde8 	bl	8004f96 <HAL_I2C_SlaveRxCpltCallback>
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2220      	movs	r2, #32
 80053fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053fc:	7afb      	ldrb	r3, [r7, #11]
 80053fe:	2b21      	cmp	r3, #33	@ 0x21
 8005400:	d002      	beq.n	8005408 <I2C_ITSlaveCplt+0x38>
 8005402:	7afb      	ldrb	r3, [r7, #11]
 8005404:	2b29      	cmp	r3, #41	@ 0x29
 8005406:	d108      	bne.n	800541a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005408:	f248 0101 	movw	r1, #32769	@ 0x8001
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 faf8 	bl	8005a02 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2221      	movs	r2, #33	@ 0x21
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
 8005418:	e019      	b.n	800544e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800541a:	7afb      	ldrb	r3, [r7, #11]
 800541c:	2b22      	cmp	r3, #34	@ 0x22
 800541e:	d002      	beq.n	8005426 <I2C_ITSlaveCplt+0x56>
 8005420:	7afb      	ldrb	r3, [r7, #11]
 8005422:	2b2a      	cmp	r3, #42	@ 0x2a
 8005424:	d108      	bne.n	8005438 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005426:	f248 0102 	movw	r1, #32770	@ 0x8002
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fae9 	bl	8005a02 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2222      	movs	r2, #34	@ 0x22
 8005434:	631a      	str	r2, [r3, #48]	@ 0x30
 8005436:	e00a      	b.n	800544e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005438:	7afb      	ldrb	r3, [r7, #11]
 800543a:	2b28      	cmp	r3, #40	@ 0x28
 800543c:	d107      	bne.n	800544e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800543e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fadd 	bl	8005a02 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800545c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6859      	ldr	r1, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b8c      	ldr	r3, [pc, #560]	@ (800569c <I2C_ITSlaveCplt+0x2cc>)
 800546a:	400b      	ands	r3, r1
 800546c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa85 	bl	800597e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	0b9b      	lsrs	r3, r3, #14
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800548e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054a6:	e018      	b.n	80054da <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	0bdb      	lsrs	r3, r3, #15
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d012      	beq.n	80054da <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d006      	beq.n	80054da <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	089b      	lsrs	r3, r3, #2
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d020      	beq.n	8005528 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	f043 0204 	orr.w	r2, r3, #4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d04a      	beq.n	80055e0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005552:	2b00      	cmp	r3, #0
 8005554:	d044      	beq.n	80055e0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d128      	bne.n	80055b2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b28      	cmp	r3, #40	@ 0x28
 800556a:	d108      	bne.n	800557e <I2C_ITSlaveCplt+0x1ae>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005572:	d104      	bne.n	800557e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f894 	bl	80056a4 <I2C_ITListenCplt>
 800557c:	e030      	b.n	80055e0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b29      	cmp	r3, #41	@ 0x29
 8005588:	d10e      	bne.n	80055a8 <I2C_ITSlaveCplt+0x1d8>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005590:	d00a      	beq.n	80055a8 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2210      	movs	r2, #16
 8005598:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9ef 	bl	800597e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff feb6 	bl	8005312 <I2C_ITSlaveSeqCplt>
 80055a6:	e01b      	b.n	80055e0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2210      	movs	r2, #16
 80055ae:	61da      	str	r2, [r3, #28]
 80055b0:	e016      	b.n	80055e0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2210      	movs	r2, #16
 80055b8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	f043 0204 	orr.w	r2, r3, #4
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <I2C_ITSlaveCplt+0x204>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055d2:	d105      	bne.n	80055e0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8b8 	bl	8005750 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d010      	beq.n	8005618 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8a7 	bl	8005750 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b28      	cmp	r3, #40	@ 0x28
 800560c:	d141      	bne.n	8005692 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800560e:	6979      	ldr	r1, [r7, #20]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f847 	bl	80056a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005616:	e03c      	b.n	8005692 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005620:	d014      	beq.n	800564c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fe75 	bl	8005312 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <I2C_ITSlaveCplt+0x2d0>)
 800562c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff fcbe 	bl	8004fc6 <HAL_I2C_ListenCpltCallback>
}
 800564a:	e022      	b.n	8005692 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b22      	cmp	r3, #34	@ 0x22
 8005656:	d10e      	bne.n	8005676 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fc91 	bl	8004f96 <HAL_I2C_SlaveRxCpltCallback>
}
 8005674:	e00d      	b.n	8005692 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fc78 	bl	8004f82 <HAL_I2C_SlaveTxCpltCallback>
}
 8005692:	bf00      	nop
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	fe00e800 	.word	0xfe00e800
 80056a0:	ffff0000 	.word	0xffff0000

080056a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a26      	ldr	r2, [pc, #152]	@ (800574c <I2C_ITListenCplt+0xa8>)
 80056b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d022      	beq.n	8005722 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d012      	beq.n	8005722 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005722:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f96b 	bl	8005a02 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2210      	movs	r2, #16
 8005732:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff fc42 	bl	8004fc6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	ffff0000 	.word	0xffff0000

08005750 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005760:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a6d      	ldr	r2, [pc, #436]	@ (8005924 <I2C_ITError+0x1d4>)
 800576e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b28      	cmp	r3, #40	@ 0x28
 8005786:	d005      	beq.n	8005794 <I2C_ITError+0x44>
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b29      	cmp	r3, #41	@ 0x29
 800578c:	d002      	beq.n	8005794 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b2a      	cmp	r3, #42	@ 0x2a
 8005792:	d10b      	bne.n	80057ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005794:	2103      	movs	r1, #3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f933 	bl	8005a02 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2228      	movs	r2, #40	@ 0x28
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a60      	ldr	r2, [pc, #384]	@ (8005928 <I2C_ITError+0x1d8>)
 80057a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80057aa:	e030      	b.n	800580e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f926 	bl	8005a02 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8e1 	bl	800597e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b60      	cmp	r3, #96	@ 0x60
 80057c6:	d01f      	beq.n	8005808 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d114      	bne.n	8005808 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d109      	bne.n	8005800 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2210      	movs	r2, #16
 80057f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f8:	f043 0204 	orr.w	r2, r3, #4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2220      	movs	r2, #32
 8005806:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	2b00      	cmp	r3, #0
 800581a:	d039      	beq.n	8005890 <I2C_ITError+0x140>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b11      	cmp	r3, #17
 8005820:	d002      	beq.n	8005828 <I2C_ITError+0xd8>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b21      	cmp	r3, #33	@ 0x21
 8005826:	d133      	bne.n	8005890 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005836:	d107      	bne.n	8005848 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005846:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584c:	4618      	mov	r0, r3
 800584e:	f7fd fd9f 	bl	8003390 <HAL_DMA_GetState>
 8005852:	4603      	mov	r3, r0
 8005854:	2b01      	cmp	r3, #1
 8005856:	d017      	beq.n	8005888 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585c:	4a33      	ldr	r2, [pc, #204]	@ (800592c <I2C_ITError+0x1dc>)
 800585e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	4618      	mov	r0, r3
 800586e:	f7fd fbe3 	bl	8003038 <HAL_DMA_Abort_IT>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d04d      	beq.n	8005914 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005882:	4610      	mov	r0, r2
 8005884:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005886:	e045      	b.n	8005914 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f851 	bl	8005930 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800588e:	e041      	b.n	8005914 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d039      	beq.n	800590c <I2C_ITError+0x1bc>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b12      	cmp	r3, #18
 800589c:	d002      	beq.n	80058a4 <I2C_ITError+0x154>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b22      	cmp	r3, #34	@ 0x22
 80058a2:	d133      	bne.n	800590c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b2:	d107      	bne.n	80058c4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fd fd61 	bl	8003390 <HAL_DMA_GetState>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d017      	beq.n	8005904 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d8:	4a14      	ldr	r2, [pc, #80]	@ (800592c <I2C_ITError+0x1dc>)
 80058da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fd fba5 	bl	8003038 <HAL_DMA_Abort_IT>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d011      	beq.n	8005918 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058fe:	4610      	mov	r0, r2
 8005900:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005902:	e009      	b.n	8005918 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f813 	bl	8005930 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800590a:	e005      	b.n	8005918 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f80f 	bl	8005930 <I2C_TreatErrorCallback>
  }
}
 8005912:	e002      	b.n	800591a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005918:	bf00      	nop
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	ffff0000 	.word	0xffff0000
 8005928:	08005003 	.word	0x08005003
 800592c:	080059c7 	.word	0x080059c7

08005930 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b60      	cmp	r3, #96	@ 0x60
 8005942:	d10e      	bne.n	8005962 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff fb47 	bl	8004fee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005960:	e009      	b.n	8005976 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fb32 	bl	8004fda <HAL_I2C_ErrorCallback>
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b02      	cmp	r3, #2
 8005992:	d103      	bne.n	800599c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d007      	beq.n	80059ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699a      	ldr	r2, [r3, #24]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	619a      	str	r2, [r3, #24]
  }
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	2200      	movs	r2, #0
 80059e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f0:	2200      	movs	r2, #0
 80059f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff ff9b 	bl	8005930 <I2C_TreatErrorCallback>
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005a12:	887b      	ldrh	r3, [r7, #2]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00f      	beq.n	8005a3c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005a22:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a30:	2b28      	cmp	r3, #40	@ 0x28
 8005a32:	d003      	beq.n	8005a3c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005a3a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00f      	beq.n	8005a66 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005a4c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a5a:	2b28      	cmp	r3, #40	@ 0x28
 8005a5c:	d003      	beq.n	8005a66 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005a64:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005a66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	da03      	bge.n	8005a76 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005a76:	887b      	ldrh	r3, [r7, #2]
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d103      	bne.n	8005a84 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005a82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005a84:	887b      	ldrh	r3, [r7, #2]
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d103      	bne.n	8005a92 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f043 0320 	orr.w	r3, r3, #32
 8005a90:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005a92:	887b      	ldrh	r3, [r7, #2]
 8005a94:	2b40      	cmp	r3, #64	@ 0x40
 8005a96:	d103      	bne.n	8005aa0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6819      	ldr	r1, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	43da      	mvns	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	400a      	ands	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d138      	bne.n	8005b46 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e032      	b.n	8005b48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2224      	movs	r2, #36	@ 0x24
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0201 	bic.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b10:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6819      	ldr	r1, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e000      	b.n	8005b48 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b46:	2302      	movs	r3, #2
  }
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d139      	bne.n	8005bde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e033      	b.n	8005be0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	@ 0x24
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0201 	bic.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ba6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e000      	b.n	8005be0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005bf6:	4b23      	ldr	r3, [pc, #140]	@ (8005c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfa:	4a22      	ldr	r2, [pc, #136]	@ (8005c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c02:	4b20      	ldr	r3, [pc, #128]	@ (8005c84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1d      	ldr	r2, [pc, #116]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c1a:	f7fc fc47 	bl	80024ac <HAL_GetTick>
 8005c1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c20:	e009      	b.n	8005c36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c22:	f7fc fc43 	bl	80024ac <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c30:	d901      	bls.n	8005c36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e022      	b.n	8005c7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c36:	4b14      	ldr	r3, [pc, #80]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c42:	d1ee      	bne.n	8005c22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c44:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a0f      	ldr	r2, [pc, #60]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c50:	f7fc fc2c 	bl	80024ac <HAL_GetTick>
 8005c54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c56:	e009      	b.n	8005c6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c58:	f7fc fc28 	bl	80024ac <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c66:	d901      	bls.n	8005c6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e007      	b.n	8005c7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c6c:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c78:	d1ee      	bne.n	8005c58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40023800 	.word	0x40023800
 8005c88:	40007000 	.word	0x40007000

08005c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e291      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8087 	beq.w	8005dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cb0:	4b96      	ldr	r3, [pc, #600]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 030c 	and.w	r3, r3, #12
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d00c      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cbc:	4b93      	ldr	r3, [pc, #588]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 030c 	and.w	r3, r3, #12
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d112      	bne.n	8005cee <HAL_RCC_OscConfig+0x62>
 8005cc8:	4b90      	ldr	r3, [pc, #576]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd4:	d10b      	bne.n	8005cee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd6:	4b8d      	ldr	r3, [pc, #564]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d06c      	beq.n	8005dbc <HAL_RCC_OscConfig+0x130>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d168      	bne.n	8005dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e26b      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCC_OscConfig+0x7a>
 8005cf8:	4b84      	ldr	r3, [pc, #528]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a83      	ldr	r2, [pc, #524]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	e02e      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x9c>
 8005d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a7e      	ldr	r2, [pc, #504]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b7c      	ldr	r3, [pc, #496]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a7b      	ldr	r2, [pc, #492]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e01d      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d30:	d10c      	bne.n	8005d4c <HAL_RCC_OscConfig+0xc0>
 8005d32:	4b76      	ldr	r3, [pc, #472]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a75      	ldr	r2, [pc, #468]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	4b73      	ldr	r3, [pc, #460]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a72      	ldr	r2, [pc, #456]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCC_OscConfig+0xd8>
 8005d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a6e      	ldr	r2, [pc, #440]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	4b6c      	ldr	r3, [pc, #432]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d013      	beq.n	8005d94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fc fb9e 	bl	80024ac <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d74:	f7fc fb9a 	bl	80024ac <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	@ 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e21f      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d86:	4b61      	ldr	r3, [pc, #388]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0xe8>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fc fb8a 	bl	80024ac <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d9c:	f7fc fb86 	bl	80024ac <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b64      	cmp	r3, #100	@ 0x64
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e20b      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dae:	4b57      	ldr	r3, [pc, #348]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x110>
 8005dba:	e000      	b.n	8005dbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d069      	beq.n	8005e9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dca:	4b50      	ldr	r3, [pc, #320]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d11c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x190>
 8005de2:	4b4a      	ldr	r3, [pc, #296]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dee:	4b47      	ldr	r3, [pc, #284]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_RCC_OscConfig+0x17a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d001      	beq.n	8005e06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e1df      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e06:	4b41      	ldr	r3, [pc, #260]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	493d      	ldr	r1, [pc, #244]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1a:	e040      	b.n	8005e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d023      	beq.n	8005e6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e24:	4b39      	ldr	r3, [pc, #228]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a38      	ldr	r2, [pc, #224]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fc fb3c 	bl	80024ac <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e38:	f7fc fb38 	bl	80024ac <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e1bd      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4a:	4b30      	ldr	r3, [pc, #192]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e56:	4b2d      	ldr	r3, [pc, #180]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4929      	ldr	r1, [pc, #164]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]
 8005e6a:	e018      	b.n	8005e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e6c:	4b27      	ldr	r3, [pc, #156]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a26      	ldr	r2, [pc, #152]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fc fb18 	bl	80024ac <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e80:	f7fc fb14 	bl	80024ac <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e199      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e92:	4b1e      	ldr	r3, [pc, #120]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d038      	beq.n	8005f1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d019      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eb2:	4b16      	ldr	r3, [pc, #88]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eb6:	4a15      	ldr	r2, [pc, #84]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ebe:	f7fc faf5 	bl	80024ac <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ec6:	f7fc faf1 	bl	80024ac <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e176      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x23a>
 8005ee4:	e01a      	b.n	8005f1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee6:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eea:	4a08      	ldr	r2, [pc, #32]	@ (8005f0c <HAL_RCC_OscConfig+0x280>)
 8005eec:	f023 0301 	bic.w	r3, r3, #1
 8005ef0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fc fadb 	bl	80024ac <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005efa:	f7fc fad7 	bl	80024ac <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d903      	bls.n	8005f10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e15c      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
 8005f0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f10:	4b91      	ldr	r3, [pc, #580]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1ee      	bne.n	8005efa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80a4 	beq.w	8006072 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10d      	bne.n	8005f52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f36:	4b88      	ldr	r3, [pc, #544]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	4a87      	ldr	r2, [pc, #540]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f42:	4b85      	ldr	r3, [pc, #532]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f4a:	60bb      	str	r3, [r7, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f52:	4b82      	ldr	r3, [pc, #520]	@ (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d118      	bne.n	8005f90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a7e      	ldr	r2, [pc, #504]	@ (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6a:	f7fc fa9f 	bl	80024ac <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f72:	f7fc fa9b 	bl	80024ac <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b64      	cmp	r3, #100	@ 0x64
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e120      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f84:	4b75      	ldr	r3, [pc, #468]	@ (800615c <HAL_RCC_OscConfig+0x4d0>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f0      	beq.n	8005f72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d106      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x31a>
 8005f98:	4b6f      	ldr	r3, [pc, #444]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fa4:	e02d      	b.n	8006002 <HAL_RCC_OscConfig+0x376>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10c      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x33c>
 8005fae:	4b6a      	ldr	r3, [pc, #424]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	4a69      	ldr	r2, [pc, #420]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fba:	4b67      	ldr	r3, [pc, #412]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fbe:	4a66      	ldr	r2, [pc, #408]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fc6:	e01c      	b.n	8006002 <HAL_RCC_OscConfig+0x376>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	d10c      	bne.n	8005fea <HAL_RCC_OscConfig+0x35e>
 8005fd0:	4b61      	ldr	r3, [pc, #388]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd4:	4a60      	ldr	r2, [pc, #384]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fd6:	f043 0304 	orr.w	r3, r3, #4
 8005fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fe8:	e00b      	b.n	8006002 <HAL_RCC_OscConfig+0x376>
 8005fea:	4b5b      	ldr	r3, [pc, #364]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fee:	4a5a      	ldr	r2, [pc, #360]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ff6:	4b58      	ldr	r3, [pc, #352]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffa:	4a57      	ldr	r2, [pc, #348]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8005ffc:	f023 0304 	bic.w	r3, r3, #4
 8006000:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d015      	beq.n	8006036 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600a:	f7fc fa4f 	bl	80024ac <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fc fa4b 	bl	80024ac <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0ce      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006028:	4b4b      	ldr	r3, [pc, #300]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0ee      	beq.n	8006012 <HAL_RCC_OscConfig+0x386>
 8006034:	e014      	b.n	8006060 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006036:	f7fc fa39 	bl	80024ac <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800603c:	e00a      	b.n	8006054 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800603e:	f7fc fa35 	bl	80024ac <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e0b8      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006054:	4b40      	ldr	r3, [pc, #256]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1ee      	bne.n	800603e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d105      	bne.n	8006072 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006066:	4b3c      	ldr	r3, [pc, #240]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	4a3b      	ldr	r2, [pc, #236]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 800606c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006070:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80a4 	beq.w	80061c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800607c:	4b36      	ldr	r3, [pc, #216]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	2b08      	cmp	r3, #8
 8006086:	d06b      	beq.n	8006160 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d149      	bne.n	8006124 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006090:	4b31      	ldr	r3, [pc, #196]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a30      	ldr	r2, [pc, #192]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8006096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800609a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609c:	f7fc fa06 	bl	80024ac <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a4:	f7fc fa02 	bl	80024ac <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e087      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b6:	4b28      	ldr	r3, [pc, #160]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69da      	ldr	r2, [r3, #28]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d0:	019b      	lsls	r3, r3, #6
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	3b01      	subs	r3, #1
 80060dc:	041b      	lsls	r3, r3, #16
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	061b      	lsls	r3, r3, #24
 80060e6:	4313      	orrs	r3, r2
 80060e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 80060ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f0:	4b19      	ldr	r3, [pc, #100]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a18      	ldr	r2, [pc, #96]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 80060f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fc:	f7fc f9d6 	bl	80024ac <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006104:	f7fc f9d2 	bl	80024ac <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e057      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006116:	4b10      	ldr	r3, [pc, #64]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x478>
 8006122:	e04f      	b.n	80061c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006124:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a0b      	ldr	r2, [pc, #44]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 800612a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800612e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fc f9bc 	bl	80024ac <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006138:	f7fc f9b8 	bl	80024ac <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e03d      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	4b03      	ldr	r3, [pc, #12]	@ (8006158 <HAL_RCC_OscConfig+0x4cc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x4ac>
 8006156:	e035      	b.n	80061c4 <HAL_RCC_OscConfig+0x538>
 8006158:	40023800 	.word	0x40023800
 800615c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006160:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <HAL_RCC_OscConfig+0x544>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d028      	beq.n	80061c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006178:	429a      	cmp	r2, r3
 800617a:	d121      	bne.n	80061c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006186:	429a      	cmp	r2, r3
 8006188:	d11a      	bne.n	80061c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006190:	4013      	ands	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006196:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006198:	4293      	cmp	r3, r2
 800619a:	d111      	bne.n	80061c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	085b      	lsrs	r3, r3, #1
 80061a8:	3b01      	subs	r3, #1
 80061aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061bc:	429a      	cmp	r2, r3
 80061be:	d001      	beq.n	80061c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40023800 	.word	0x40023800

080061d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0d0      	b.n	800638e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006398 <HAL_RCC_ClockConfig+0x1c4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d910      	bls.n	800621c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fa:	4b67      	ldr	r3, [pc, #412]	@ (8006398 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f023 020f 	bic.w	r2, r3, #15
 8006202:	4965      	ldr	r1, [pc, #404]	@ (8006398 <HAL_RCC_ClockConfig+0x1c4>)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	4313      	orrs	r3, r2
 8006208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800620a:	4b63      	ldr	r3, [pc, #396]	@ (8006398 <HAL_RCC_ClockConfig+0x1c4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d001      	beq.n	800621c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0b8      	b.n	800638e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006234:	4b59      	ldr	r3, [pc, #356]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a58      	ldr	r2, [pc, #352]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 800623a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800623e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800624c:	4b53      	ldr	r3, [pc, #332]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a52      	ldr	r2, [pc, #328]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006256:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006258:	4b50      	ldr	r3, [pc, #320]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	494d      	ldr	r1, [pc, #308]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006266:	4313      	orrs	r3, r2
 8006268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d040      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d107      	bne.n	800628e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	4b47      	ldr	r3, [pc, #284]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d115      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e07f      	b.n	800638e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006296:	4b41      	ldr	r3, [pc, #260]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d109      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e073      	b.n	800638e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a6:	4b3d      	ldr	r3, [pc, #244]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e06b      	b.n	800638e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062b6:	4b39      	ldr	r3, [pc, #228]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f023 0203 	bic.w	r2, r3, #3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4936      	ldr	r1, [pc, #216]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c8:	f7fc f8f0 	bl	80024ac <HAL_GetTick>
 80062cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ce:	e00a      	b.n	80062e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d0:	f7fc f8ec 	bl	80024ac <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e053      	b.n	800638e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e6:	4b2d      	ldr	r3, [pc, #180]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 020c 	and.w	r2, r3, #12
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d1eb      	bne.n	80062d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062f8:	4b27      	ldr	r3, [pc, #156]	@ (8006398 <HAL_RCC_ClockConfig+0x1c4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 030f 	and.w	r3, r3, #15
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d210      	bcs.n	8006328 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b24      	ldr	r3, [pc, #144]	@ (8006398 <HAL_RCC_ClockConfig+0x1c4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 020f 	bic.w	r2, r3, #15
 800630e:	4922      	ldr	r1, [pc, #136]	@ (8006398 <HAL_RCC_ClockConfig+0x1c4>)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b20      	ldr	r3, [pc, #128]	@ (8006398 <HAL_RCC_ClockConfig+0x1c4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e032      	b.n	800638e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006334:	4b19      	ldr	r3, [pc, #100]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4916      	ldr	r1, [pc, #88]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006352:	4b12      	ldr	r3, [pc, #72]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	490e      	ldr	r1, [pc, #56]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 8006362:	4313      	orrs	r3, r2
 8006364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006366:	f000 f821 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 800636a:	4602      	mov	r2, r0
 800636c:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <HAL_RCC_ClockConfig+0x1c8>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	091b      	lsrs	r3, r3, #4
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	490a      	ldr	r1, [pc, #40]	@ (80063a0 <HAL_RCC_ClockConfig+0x1cc>)
 8006378:	5ccb      	ldrb	r3, [r1, r3]
 800637a:	fa22 f303 	lsr.w	r3, r2, r3
 800637e:	4a09      	ldr	r2, [pc, #36]	@ (80063a4 <HAL_RCC_ClockConfig+0x1d0>)
 8006380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006382:	4b09      	ldr	r3, [pc, #36]	@ (80063a8 <HAL_RCC_ClockConfig+0x1d4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fb f9e6 	bl	8001758 <HAL_InitTick>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	40023c00 	.word	0x40023c00
 800639c:	40023800 	.word	0x40023800
 80063a0:	0801aa0c 	.word	0x0801aa0c
 80063a4:	20000000 	.word	0x20000000
 80063a8:	20000004 	.word	0x20000004

080063ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063b0:	b090      	sub	sp, #64	@ 0x40
 80063b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b8:	2300      	movs	r3, #0
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063bc:	2300      	movs	r3, #0
 80063be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c4:	4b59      	ldr	r3, [pc, #356]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d00d      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0x40>
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	f200 80a1 	bhi.w	8006518 <HAL_RCC_GetSysClockFreq+0x16c>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0x34>
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d003      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063de:	e09b      	b.n	8006518 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063e0:	4b53      	ldr	r3, [pc, #332]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x184>)
 80063e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063e4:	e09b      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063e6:	4b53      	ldr	r3, [pc, #332]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x188>)
 80063e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063ea:	e098      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063ec:	4b4f      	ldr	r3, [pc, #316]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80063f6:	4b4d      	ldr	r3, [pc, #308]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d028      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006402:	4b4a      	ldr	r3, [pc, #296]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	2200      	movs	r2, #0
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	627a      	str	r2, [r7, #36]	@ 0x24
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006414:	2100      	movs	r1, #0
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x188>)
 8006418:	fb03 f201 	mul.w	r2, r3, r1
 800641c:	2300      	movs	r3, #0
 800641e:	fb00 f303 	mul.w	r3, r0, r3
 8006422:	4413      	add	r3, r2
 8006424:	4a43      	ldr	r2, [pc, #268]	@ (8006534 <HAL_RCC_GetSysClockFreq+0x188>)
 8006426:	fba0 1202 	umull	r1, r2, r0, r2
 800642a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800642c:	460a      	mov	r2, r1
 800642e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006432:	4413      	add	r3, r2
 8006434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006438:	2200      	movs	r2, #0
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	61fa      	str	r2, [r7, #28]
 800643e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006446:	f7f9 ff33 	bl	80002b0 <__aeabi_uldivmod>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4613      	mov	r3, r2
 8006450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006452:	e053      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006454:	4b35      	ldr	r3, [pc, #212]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	099b      	lsrs	r3, r3, #6
 800645a:	2200      	movs	r2, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	617a      	str	r2, [r7, #20]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006466:	f04f 0b00 	mov.w	fp, #0
 800646a:	4652      	mov	r2, sl
 800646c:	465b      	mov	r3, fp
 800646e:	f04f 0000 	mov.w	r0, #0
 8006472:	f04f 0100 	mov.w	r1, #0
 8006476:	0159      	lsls	r1, r3, #5
 8006478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800647c:	0150      	lsls	r0, r2, #5
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	ebb2 080a 	subs.w	r8, r2, sl
 8006486:	eb63 090b 	sbc.w	r9, r3, fp
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006496:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800649a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800649e:	ebb2 0408 	subs.w	r4, r2, r8
 80064a2:	eb63 0509 	sbc.w	r5, r3, r9
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	00eb      	lsls	r3, r5, #3
 80064b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064b4:	00e2      	lsls	r2, r4, #3
 80064b6:	4614      	mov	r4, r2
 80064b8:	461d      	mov	r5, r3
 80064ba:	eb14 030a 	adds.w	r3, r4, sl
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	eb45 030b 	adc.w	r3, r5, fp
 80064c4:	607b      	str	r3, [r7, #4]
 80064c6:	f04f 0200 	mov.w	r2, #0
 80064ca:	f04f 0300 	mov.w	r3, #0
 80064ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064d2:	4629      	mov	r1, r5
 80064d4:	028b      	lsls	r3, r1, #10
 80064d6:	4621      	mov	r1, r4
 80064d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064dc:	4621      	mov	r1, r4
 80064de:	028a      	lsls	r2, r1, #10
 80064e0:	4610      	mov	r0, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e6:	2200      	movs	r2, #0
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	60fa      	str	r2, [r7, #12]
 80064ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064f0:	f7f9 fede 	bl	80002b0 <__aeabi_uldivmod>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4613      	mov	r3, r2
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80064fc:	4b0b      	ldr	r3, [pc, #44]	@ (800652c <HAL_RCC_GetSysClockFreq+0x180>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	3301      	adds	r3, #1
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800650c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	fbb2 f3f3 	udiv	r3, r2, r3
 8006514:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006516:	e002      	b.n	800651e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <HAL_RCC_GetSysClockFreq+0x184>)
 800651a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800651c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006520:	4618      	mov	r0, r3
 8006522:	3740      	adds	r7, #64	@ 0x40
 8006524:	46bd      	mov	sp, r7
 8006526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800
 8006530:	00f42400 	.word	0x00f42400
 8006534:	017d7840 	.word	0x017d7840

08006538 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800653c:	4b03      	ldr	r3, [pc, #12]	@ (800654c <HAL_RCC_GetHCLKFreq+0x14>)
 800653e:	681b      	ldr	r3, [r3, #0]
}
 8006540:	4618      	mov	r0, r3
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000000 	.word	0x20000000

08006550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006554:	f7ff fff0 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8006558:	4602      	mov	r2, r0
 800655a:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0a9b      	lsrs	r3, r3, #10
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	4903      	ldr	r1, [pc, #12]	@ (8006574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006566:	5ccb      	ldrb	r3, [r1, r3]
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800656c:	4618      	mov	r0, r3
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40023800 	.word	0x40023800
 8006574:	0801aa1c 	.word	0x0801aa1c

08006578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800657c:	f7ff ffdc 	bl	8006538 <HAL_RCC_GetHCLKFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	0b5b      	lsrs	r3, r3, #13
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	4903      	ldr	r1, [pc, #12]	@ (800659c <HAL_RCC_GetPCLK2Freq+0x24>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006594:	4618      	mov	r0, r3
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40023800 	.word	0x40023800
 800659c:	0801aa1c 	.word	0x0801aa1c

080065a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	220f      	movs	r2, #15
 80065ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065b0:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <HAL_RCC_GetClockConfig+0x5c>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0203 	and.w	r2, r3, #3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065bc:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <HAL_RCC_GetClockConfig+0x5c>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065c8:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <HAL_RCC_GetClockConfig+0x5c>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80065d4:	4b09      	ldr	r3, [pc, #36]	@ (80065fc <HAL_RCC_GetClockConfig+0x5c>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	08db      	lsrs	r3, r3, #3
 80065da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065e2:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <HAL_RCC_GetClockConfig+0x60>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 020f 	and.w	r2, r3, #15
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	601a      	str	r2, [r3, #0]
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40023800 	.word	0x40023800
 8006600:	40023c00 	.word	0x40023c00

08006604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d012      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800662c:	4b69      	ldr	r3, [pc, #420]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	4a68      	ldr	r2, [pc, #416]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006632:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006636:	6093      	str	r3, [r2, #8]
 8006638:	4b66      	ldr	r3, [pc, #408]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006640:	4964      	ldr	r1, [pc, #400]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800664e:	2301      	movs	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d017      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800665e:	4b5d      	ldr	r3, [pc, #372]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006664:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666c:	4959      	ldr	r1, [pc, #356]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800667c:	d101      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800667e:	2301      	movs	r3, #1
 8006680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d017      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800669a:	4b4e      	ldr	r3, [pc, #312]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	494a      	ldr	r1, [pc, #296]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066b8:	d101      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80066ba:	2301      	movs	r3, #1
 80066bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80066c6:	2301      	movs	r3, #1
 80066c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80066d6:	2301      	movs	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 808b 	beq.w	80067fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066e8:	4b3a      	ldr	r3, [pc, #232]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ec:	4a39      	ldr	r2, [pc, #228]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80066f4:	4b37      	ldr	r3, [pc, #220]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066fc:	60bb      	str	r3, [r7, #8]
 80066fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006700:	4b35      	ldr	r3, [pc, #212]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a34      	ldr	r2, [pc, #208]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800670a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800670c:	f7fb fece 	bl	80024ac <HAL_GetTick>
 8006710:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006714:	f7fb feca 	bl	80024ac <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	@ 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e357      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006726:	4b2c      	ldr	r3, [pc, #176]	@ (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f0      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006732:	4b28      	ldr	r3, [pc, #160]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800673a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d035      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	429a      	cmp	r2, r3
 800674e:	d02e      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006750:	4b20      	ldr	r3, [pc, #128]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006758:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800675a:	4b1e      	ldr	r3, [pc, #120]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675e:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006764:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006766:	4b1b      	ldr	r3, [pc, #108]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676a:	4a1a      	ldr	r2, [pc, #104]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800676c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006770:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006772:	4a18      	ldr	r2, [pc, #96]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006778:	4b16      	ldr	r3, [pc, #88]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	d114      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006784:	f7fb fe92 	bl	80024ac <HAL_GetTick>
 8006788:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678a:	e00a      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800678c:	f7fb fe8e 	bl	80024ac <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800679a:	4293      	cmp	r3, r2
 800679c:	d901      	bls.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e319      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a2:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0ee      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ba:	d111      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80067bc:	4b05      	ldr	r3, [pc, #20]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80067c8:	4b04      	ldr	r3, [pc, #16]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80067ca:	400b      	ands	r3, r1
 80067cc:	4901      	ldr	r1, [pc, #4]	@ (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	608b      	str	r3, [r1, #8]
 80067d2:	e00b      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40007000 	.word	0x40007000
 80067dc:	0ffffcff 	.word	0x0ffffcff
 80067e0:	4baa      	ldr	r3, [pc, #680]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	4aa9      	ldr	r2, [pc, #676]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80067ea:	6093      	str	r3, [r2, #8]
 80067ec:	4ba7      	ldr	r3, [pc, #668]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f8:	49a4      	ldr	r1, [pc, #656]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b00      	cmp	r3, #0
 8006808:	d010      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800680a:	4ba0      	ldr	r3, [pc, #640]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800680c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006810:	4a9e      	ldr	r2, [pc, #632]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006816:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800681a:	4b9c      	ldr	r3, [pc, #624]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800681c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006824:	4999      	ldr	r1, [pc, #612]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006826:	4313      	orrs	r3, r2
 8006828:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006838:	4b94      	ldr	r3, [pc, #592]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006846:	4991      	ldr	r1, [pc, #580]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800685a:	4b8c      	ldr	r3, [pc, #560]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006860:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006868:	4988      	ldr	r1, [pc, #544]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800687c:	4b83      	ldr	r3, [pc, #524]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006882:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800688a:	4980      	ldr	r1, [pc, #512]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800688c:	4313      	orrs	r3, r2
 800688e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800689e:	4b7b      	ldr	r3, [pc, #492]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ac:	4977      	ldr	r1, [pc, #476]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068c0:	4b72      	ldr	r3, [pc, #456]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c6:	f023 0203 	bic.w	r2, r3, #3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	496f      	ldr	r1, [pc, #444]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068e2:	4b6a      	ldr	r3, [pc, #424]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e8:	f023 020c 	bic.w	r2, r3, #12
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068f0:	4966      	ldr	r1, [pc, #408]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006904:	4b61      	ldr	r3, [pc, #388]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006912:	495e      	ldr	r1, [pc, #376]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006914:	4313      	orrs	r3, r2
 8006916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006926:	4b59      	ldr	r3, [pc, #356]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006934:	4955      	ldr	r1, [pc, #340]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006948:	4b50      	ldr	r3, [pc, #320]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006956:	494d      	ldr	r1, [pc, #308]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800696a:	4b48      	ldr	r3, [pc, #288]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006970:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006978:	4944      	ldr	r1, [pc, #272]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800698c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006992:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800699a:	493c      	ldr	r1, [pc, #240]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80069ae:	4b37      	ldr	r3, [pc, #220]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069bc:	4933      	ldr	r1, [pc, #204]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069d0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069de:	492b      	ldr	r1, [pc, #172]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d011      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069f2:	4b26      	ldr	r3, [pc, #152]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a00:	4922      	ldr	r1, [pc, #136]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a10:	d101      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006a12:	2301      	movs	r3, #1
 8006a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a32:	4b16      	ldr	r3, [pc, #88]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a40:	4912      	ldr	r1, [pc, #72]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a54:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a64:	4909      	ldr	r1, [pc, #36]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d006      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80d9 	beq.w	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a80:	4b02      	ldr	r3, [pc, #8]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a01      	ldr	r2, [pc, #4]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a8a:	e001      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a92:	f7fb fd0b 	bl	80024ac <HAL_GetTick>
 8006a96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a98:	e008      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a9a:	f7fb fd07 	bl	80024ac <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b64      	cmp	r3, #100	@ 0x64
 8006aa6:	d901      	bls.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e194      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aac:	4b6c      	ldr	r3, [pc, #432]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1f0      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d021      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11d      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006acc:	4b64      	ldr	r3, [pc, #400]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad2:	0c1b      	lsrs	r3, r3, #16
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ada:	4b61      	ldr	r3, [pc, #388]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ae0:	0e1b      	lsrs	r3, r3, #24
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	019a      	lsls	r2, r3, #6
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	041b      	lsls	r3, r3, #16
 8006af2:	431a      	orrs	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	061b      	lsls	r3, r3, #24
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	071b      	lsls	r3, r3, #28
 8006b00:	4957      	ldr	r1, [pc, #348]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b1c:	d00a      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d02e      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b32:	d129      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b34:	4b4a      	ldr	r3, [pc, #296]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	f003 0303 	and.w	r3, r3, #3
 8006b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b42:	4b47      	ldr	r3, [pc, #284]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b48:	0f1b      	lsrs	r3, r3, #28
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	019a      	lsls	r2, r3, #6
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	431a      	orrs	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	071b      	lsls	r3, r3, #28
 8006b68:	493d      	ldr	r1, [pc, #244]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b70:	4b3b      	ldr	r3, [pc, #236]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b76:	f023 021f 	bic.w	r2, r3, #31
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4937      	ldr	r1, [pc, #220]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01d      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b94:	4b32      	ldr	r3, [pc, #200]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b9a:	0e1b      	lsrs	r3, r3, #24
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba8:	0f1b      	lsrs	r3, r3, #28
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	019a      	lsls	r2, r3, #6
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	061b      	lsls	r3, r3, #24
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	071b      	lsls	r3, r3, #28
 8006bc8:	4925      	ldr	r1, [pc, #148]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d011      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	019a      	lsls	r2, r3, #6
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	061b      	lsls	r3, r3, #24
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	071b      	lsls	r3, r3, #28
 8006bf8:	4919      	ldr	r1, [pc, #100]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c00:	4b17      	ldr	r3, [pc, #92]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a16      	ldr	r2, [pc, #88]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c0c:	f7fb fc4e 	bl	80024ac <HAL_GetTick>
 8006c10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c14:	f7fb fc4a 	bl	80024ac <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b64      	cmp	r3, #100	@ 0x64
 8006c20:	d901      	bls.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e0d7      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c26:	4b0e      	ldr	r3, [pc, #56]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f0      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	f040 80cd 	bne.w	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c3a:	4b09      	ldr	r3, [pc, #36]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a08      	ldr	r2, [pc, #32]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c46:	f7fb fc31 	bl	80024ac <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c4c:	e00a      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c4e:	f7fb fc2d 	bl	80024ac <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b64      	cmp	r3, #100	@ 0x64
 8006c5a:	d903      	bls.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e0ba      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006c60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c64:	4b5e      	ldr	r3, [pc, #376]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c70:	d0ed      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d02e      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d12a      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c9a:	4b51      	ldr	r3, [pc, #324]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca0:	0c1b      	lsrs	r3, r3, #16
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cae:	0f1b      	lsrs	r3, r3, #28
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	019a      	lsls	r2, r3, #6
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	061b      	lsls	r3, r3, #24
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	071b      	lsls	r3, r3, #28
 8006cce:	4944      	ldr	r1, [pc, #272]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006cd6:	4b42      	ldr	r3, [pc, #264]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cdc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	493d      	ldr	r1, [pc, #244]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d022      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d04:	d11d      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d06:	4b36      	ldr	r3, [pc, #216]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0c:	0e1b      	lsrs	r3, r3, #24
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d14:	4b32      	ldr	r3, [pc, #200]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1a:	0f1b      	lsrs	r3, r3, #28
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	019a      	lsls	r2, r3, #6
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	041b      	lsls	r3, r3, #16
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	061b      	lsls	r3, r3, #24
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	071b      	lsls	r3, r3, #28
 8006d3a:	4929      	ldr	r1, [pc, #164]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d028      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d4e:	4b24      	ldr	r3, [pc, #144]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d54:	0e1b      	lsrs	r3, r3, #24
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d5c:	4b20      	ldr	r3, [pc, #128]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d62:	0c1b      	lsrs	r3, r3, #16
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	019a      	lsls	r2, r3, #6
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	041b      	lsls	r3, r3, #16
 8006d74:	431a      	orrs	r2, r3
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	061b      	lsls	r3, r3, #24
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	071b      	lsls	r3, r3, #28
 8006d82:	4917      	ldr	r1, [pc, #92]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d8a:	4b15      	ldr	r3, [pc, #84]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d98:	4911      	ldr	r1, [pc, #68]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006da0:	4b0f      	ldr	r3, [pc, #60]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a0e      	ldr	r2, [pc, #56]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dac:	f7fb fb7e 	bl	80024ac <HAL_GetTick>
 8006db0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006db4:	f7fb fb7a 	bl	80024ac <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b64      	cmp	r3, #100	@ 0x64
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e007      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dc6:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006dce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dd2:	d1ef      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800

08006de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e09d      	b.n	8006f32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d108      	bne.n	8006e10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e06:	d009      	beq.n	8006e1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	61da      	str	r2, [r3, #28]
 8006e0e:	e005      	b.n	8006e1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7fa faf8 	bl	800142c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e5c:	d902      	bls.n	8006e64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	e002      	b.n	8006e6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006e72:	d007      	beq.n	8006e84 <HAL_SPI_Init+0xa0>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e7c:	d002      	beq.n	8006e84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e94:	431a      	orrs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec6:	ea42 0103 	orr.w	r1, r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ece:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	0c1b      	lsrs	r3, r3, #16
 8006ee0:	f003 0204 	and.w	r2, r3, #4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef2:	f003 0308 	and.w	r3, r3, #8
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006f00:	ea42 0103 	orr.w	r1, r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	099b      	lsrs	r3, r3, #6
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10f      	bne.n	8006f80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	099b      	lsrs	r3, r3, #6
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
    return;
 8006f7e:	e0d7      	b.n	8007130 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00a      	beq.n	8006fa2 <HAL_SPI_IRQHandler+0x66>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	09db      	lsrs	r3, r3, #7
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
    return;
 8006fa0:	e0c6      	b.n	8007130 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	095b      	lsrs	r3, r3, #5
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10c      	bne.n	8006fc8 <HAL_SPI_IRQHandler+0x8c>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	099b      	lsrs	r3, r3, #6
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	0a1b      	lsrs	r3, r3, #8
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80b4 	beq.w	8007130 <HAL_SPI_IRQHandler+0x1f4>
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 80ad 	beq.w	8007130 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d023      	beq.n	800702a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d011      	beq.n	8007012 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ff2:	f043 0204 	orr.w	r2, r3, #4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	e00b      	b.n	800702a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007012:	2300      	movs	r3, #0
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	693b      	ldr	r3, [r7, #16]
        return;
 8007028:	e082      	b.n	8007130 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d014      	beq.n	8007060 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800703a:	f043 0201 	orr.w	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	0a1b      	lsrs	r3, r3, #8
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007070:	f043 0208 	orr.w	r2, r3, #8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007078:	2300      	movs	r3, #0
 800707a:	60bb      	str	r3, [r7, #8]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	60bb      	str	r3, [r7, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800708a:	2b00      	cmp	r3, #0
 800708c:	d04f      	beq.n	800712e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800709c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <HAL_SPI_IRQHandler+0x17e>
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d034      	beq.n	8007124 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0203 	bic.w	r2, r2, #3
 80070c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d011      	beq.n	80070f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d6:	4a18      	ldr	r2, [pc, #96]	@ (8007138 <HAL_SPI_IRQHandler+0x1fc>)
 80070d8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fb ffaa 	bl	8003038 <HAL_DMA_Abort_IT>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d016      	beq.n	800712c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007102:	4a0d      	ldr	r2, [pc, #52]	@ (8007138 <HAL_SPI_IRQHandler+0x1fc>)
 8007104:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710a:	4618      	mov	r0, r3
 800710c:	f7fb ff94 	bl	8003038 <HAL_DMA_Abort_IT>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8007122:	e003      	b.n	800712c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f809 	bl	800713c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800712a:	e000      	b.n	800712e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800712c:	bf00      	nop
    return;
 800712e:	bf00      	nop
  }
}
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08007151 	.word	0x08007151

0800713c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f7ff ffe5 	bl	800713c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e049      	b.n	8007220 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7fa fdad 	bl	8001d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2202      	movs	r2, #2
 80071aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f000 faa7 	bl	800770c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b01      	cmp	r3, #1
 800723a:	d001      	beq.n	8007240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e054      	b.n	80072ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a26      	ldr	r2, [pc, #152]	@ (80072f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d022      	beq.n	80072a8 <HAL_TIM_Base_Start_IT+0x80>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726a:	d01d      	beq.n	80072a8 <HAL_TIM_Base_Start_IT+0x80>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a22      	ldr	r2, [pc, #136]	@ (80072fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d018      	beq.n	80072a8 <HAL_TIM_Base_Start_IT+0x80>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a21      	ldr	r2, [pc, #132]	@ (8007300 <HAL_TIM_Base_Start_IT+0xd8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d013      	beq.n	80072a8 <HAL_TIM_Base_Start_IT+0x80>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1f      	ldr	r2, [pc, #124]	@ (8007304 <HAL_TIM_Base_Start_IT+0xdc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00e      	beq.n	80072a8 <HAL_TIM_Base_Start_IT+0x80>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1e      	ldr	r2, [pc, #120]	@ (8007308 <HAL_TIM_Base_Start_IT+0xe0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d009      	beq.n	80072a8 <HAL_TIM_Base_Start_IT+0x80>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1c      	ldr	r2, [pc, #112]	@ (800730c <HAL_TIM_Base_Start_IT+0xe4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d004      	beq.n	80072a8 <HAL_TIM_Base_Start_IT+0x80>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007310 <HAL_TIM_Base_Start_IT+0xe8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d115      	bne.n	80072d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	4b19      	ldr	r3, [pc, #100]	@ (8007314 <HAL_TIM_Base_Start_IT+0xec>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b06      	cmp	r3, #6
 80072b8:	d015      	beq.n	80072e6 <HAL_TIM_Base_Start_IT+0xbe>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072c0:	d011      	beq.n	80072e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0201 	orr.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d2:	e008      	b.n	80072e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0201 	orr.w	r2, r2, #1
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e000      	b.n	80072e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800
 8007304:	40000c00 	.word	0x40000c00
 8007308:	40010400 	.word	0x40010400
 800730c:	40014000 	.word	0x40014000
 8007310:	40001800 	.word	0x40001800
 8007314:	00010007 	.word	0x00010007

08007318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d020      	beq.n	800737c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01b      	beq.n	800737c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0202 	mvn.w	r2, #2
 800734c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9b4 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 8007368:	e005      	b.n	8007376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9a6 	bl	80076bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f9b7 	bl	80076e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d020      	beq.n	80073c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01b      	beq.n	80073c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0204 	mvn.w	r2, #4
 8007398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f98e 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 80073b4:	e005      	b.n	80073c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f980 	bl	80076bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f991 	bl	80076e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d020      	beq.n	8007414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f003 0308 	and.w	r3, r3, #8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01b      	beq.n	8007414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0208 	mvn.w	r2, #8
 80073e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2204      	movs	r2, #4
 80073ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f968 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 8007400:	e005      	b.n	800740e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f95a 	bl	80076bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f96b 	bl	80076e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	2b00      	cmp	r3, #0
 800741c:	d020      	beq.n	8007460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01b      	beq.n	8007460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0210 	mvn.w	r2, #16
 8007430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2208      	movs	r2, #8
 8007436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f942 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 800744c:	e005      	b.n	800745a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f934 	bl	80076bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f945 	bl	80076e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00c      	beq.n	8007484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f06f 0201 	mvn.w	r2, #1
 800747c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7f9 ff46 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00c      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80074aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fb05 	bl	8007abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80074ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fafd 	bl	8007ad0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00c      	beq.n	80074fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d007      	beq.n	80074fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f8ff 	bl	80076f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00c      	beq.n	800751e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f06f 0220 	mvn.w	r2, #32
 8007516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fac5 	bl	8007aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_TIM_ConfigClockSource+0x1c>
 8007540:	2302      	movs	r3, #2
 8007542:	e0b4      	b.n	80076ae <HAL_TIM_ConfigClockSource+0x186>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	4b56      	ldr	r3, [pc, #344]	@ (80076b8 <HAL_TIM_ConfigClockSource+0x190>)
 8007560:	4013      	ands	r3, r2
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800756a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800757c:	d03e      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0xd4>
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007582:	f200 8087 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800758a:	f000 8086 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x172>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007592:	d87f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b70      	cmp	r3, #112	@ 0x70
 8007596:	d01a      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0xa6>
 8007598:	2b70      	cmp	r3, #112	@ 0x70
 800759a:	d87b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b60      	cmp	r3, #96	@ 0x60
 800759e:	d050      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x11a>
 80075a0:	2b60      	cmp	r3, #96	@ 0x60
 80075a2:	d877      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b50      	cmp	r3, #80	@ 0x50
 80075a6:	d03c      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0xfa>
 80075a8:	2b50      	cmp	r3, #80	@ 0x50
 80075aa:	d873      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b40      	cmp	r3, #64	@ 0x40
 80075ae:	d058      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x13a>
 80075b0:	2b40      	cmp	r3, #64	@ 0x40
 80075b2:	d86f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b30      	cmp	r3, #48	@ 0x30
 80075b6:	d064      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075b8:	2b30      	cmp	r3, #48	@ 0x30
 80075ba:	d86b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d060      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d867      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d05a      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075cc:	e062      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075de:	f000 f9b5 	bl	800794c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	609a      	str	r2, [r3, #8]
      break;
 80075fa:	e04f      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800760c:	f000 f99e 	bl	800794c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800761e:	609a      	str	r2, [r3, #8]
      break;
 8007620:	e03c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800762e:	461a      	mov	r2, r3
 8007630:	f000 f912 	bl	8007858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2150      	movs	r1, #80	@ 0x50
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f96b 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8007640:	e02c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800764e:	461a      	mov	r2, r3
 8007650:	f000 f931 	bl	80078b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2160      	movs	r1, #96	@ 0x60
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f95b 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8007660:	e01c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800766e:	461a      	mov	r2, r3
 8007670:	f000 f8f2 	bl	8007858 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2140      	movs	r1, #64	@ 0x40
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f94b 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8007680:	e00c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f000 f942 	bl	8007916 <TIM_ITRx_SetConfig>
      break;
 8007692:	e003      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e000      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800769a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	fffeff88 	.word	0xfffeff88

080076bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a43      	ldr	r2, [pc, #268]	@ (800782c <TIM_Base_SetConfig+0x120>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800772a:	d00f      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a40      	ldr	r2, [pc, #256]	@ (8007830 <TIM_Base_SetConfig+0x124>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00b      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a3f      	ldr	r2, [pc, #252]	@ (8007834 <TIM_Base_SetConfig+0x128>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a3e      	ldr	r2, [pc, #248]	@ (8007838 <TIM_Base_SetConfig+0x12c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0x40>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a3d      	ldr	r2, [pc, #244]	@ (800783c <TIM_Base_SetConfig+0x130>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d108      	bne.n	800775e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a32      	ldr	r2, [pc, #200]	@ (800782c <TIM_Base_SetConfig+0x120>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d02b      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776c:	d027      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2f      	ldr	r2, [pc, #188]	@ (8007830 <TIM_Base_SetConfig+0x124>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d023      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2e      	ldr	r2, [pc, #184]	@ (8007834 <TIM_Base_SetConfig+0x128>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01f      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a2d      	ldr	r2, [pc, #180]	@ (8007838 <TIM_Base_SetConfig+0x12c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d01b      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a2c      	ldr	r2, [pc, #176]	@ (800783c <TIM_Base_SetConfig+0x130>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d017      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a2b      	ldr	r2, [pc, #172]	@ (8007840 <TIM_Base_SetConfig+0x134>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d013      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a2a      	ldr	r2, [pc, #168]	@ (8007844 <TIM_Base_SetConfig+0x138>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00f      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a29      	ldr	r2, [pc, #164]	@ (8007848 <TIM_Base_SetConfig+0x13c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00b      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a28      	ldr	r2, [pc, #160]	@ (800784c <TIM_Base_SetConfig+0x140>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a27      	ldr	r2, [pc, #156]	@ (8007850 <TIM_Base_SetConfig+0x144>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_Base_SetConfig+0xb2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a26      	ldr	r2, [pc, #152]	@ (8007854 <TIM_Base_SetConfig+0x148>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d108      	bne.n	80077d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a0e      	ldr	r2, [pc, #56]	@ (800782c <TIM_Base_SetConfig+0x120>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_Base_SetConfig+0xf2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a10      	ldr	r2, [pc, #64]	@ (800783c <TIM_Base_SetConfig+0x130>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d103      	bne.n	8007806 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f043 0204 	orr.w	r2, r3, #4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	601a      	str	r2, [r3, #0]
}
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40010000 	.word	0x40010000
 8007830:	40000400 	.word	0x40000400
 8007834:	40000800 	.word	0x40000800
 8007838:	40000c00 	.word	0x40000c00
 800783c:	40010400 	.word	0x40010400
 8007840:	40014000 	.word	0x40014000
 8007844:	40014400 	.word	0x40014400
 8007848:	40014800 	.word	0x40014800
 800784c:	40001800 	.word	0x40001800
 8007850:	40001c00 	.word	0x40001c00
 8007854:	40002000 	.word	0x40002000

08007858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f023 030a 	bic.w	r3, r3, #10
 8007894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4313      	orrs	r3, r2
 800789c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b087      	sub	sp, #28
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	f023 0210 	bic.w	r2, r3, #16
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4313      	orrs	r3, r2
 8007934:	f043 0307 	orr.w	r3, r3, #7
 8007938:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	609a      	str	r2, [r3, #8]
}
 8007940:	bf00      	nop
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007966:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	431a      	orrs	r2, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4313      	orrs	r3, r2
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800799c:	2b01      	cmp	r3, #1
 800799e:	d101      	bne.n	80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e06d      	b.n	8007a80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a30      	ldr	r2, [pc, #192]	@ (8007a8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d108      	bne.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80079de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a20      	ldr	r2, [pc, #128]	@ (8007a8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d022      	beq.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a16:	d01d      	beq.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007a94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d018      	beq.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a1c      	ldr	r2, [pc, #112]	@ (8007a98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d013      	beq.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a1a      	ldr	r2, [pc, #104]	@ (8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00e      	beq.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a15      	ldr	r2, [pc, #84]	@ (8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a16      	ldr	r2, [pc, #88]	@ (8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a15      	ldr	r2, [pc, #84]	@ (8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d10c      	bne.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	40010400 	.word	0x40010400
 8007a94:	40000400 	.word	0x40000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	40000c00 	.word	0x40000c00
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40001800 	.word	0x40001800

08007aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e040      	b.n	8007b78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fa f9f6 	bl	8001ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2224      	movs	r2, #36	@ 0x24
 8007b10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0201 	bic.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fe22 	bl	8008774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fbbb 	bl	80082ac <UART_SetConfig>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e01b      	b.n	8007b78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fea1 	bl	80088b8 <UART_CheckIdleState>
 8007b76:	4603      	mov	r3, r0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	@ 0x28
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	d177      	bne.n	8007c88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <HAL_UART_Transmit+0x24>
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e070      	b.n	8007c8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2221      	movs	r2, #33	@ 0x21
 8007bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bb6:	f7fa fc79 	bl	80024ac <HAL_GetTick>
 8007bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	88fa      	ldrh	r2, [r7, #6]
 8007bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd4:	d108      	bne.n	8007be8 <HAL_UART_Transmit+0x68>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d104      	bne.n	8007be8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	61bb      	str	r3, [r7, #24]
 8007be6:	e003      	b.n	8007bf0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bec:	2300      	movs	r3, #0
 8007bee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bf0:	e02f      	b.n	8007c52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2180      	movs	r1, #128	@ 0x80
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 feb2 	bl	8008966 <UART_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e03b      	b.n	8007c8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10b      	bne.n	8007c30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	e007      	b.n	8007c40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	781a      	ldrb	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1c9      	bne.n	8007bf2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2200      	movs	r2, #0
 8007c66:	2140      	movs	r1, #64	@ 0x40
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fe7c 	bl	8008966 <UART_WaitOnFlagUntilTimeout>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d004      	beq.n	8007c7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2220      	movs	r2, #32
 8007c78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e005      	b.n	8007c8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2220      	movs	r2, #32
 8007c82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	e000      	b.n	8007c8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007c88:	2302      	movs	r3, #2
  }
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3720      	adds	r7, #32
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b0ba      	sub	sp, #232	@ 0xe8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007cba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007cbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d115      	bne.n	8007cfc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd4:	f003 0320 	and.w	r3, r3, #32
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00f      	beq.n	8007cfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d009      	beq.n	8007cfc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 82b1 	beq.w	8008254 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
      }
      return;
 8007cfa:	e2ab      	b.n	8008254 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8117 	beq.w	8007f34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007d12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007d16:	4b85      	ldr	r3, [pc, #532]	@ (8007f2c <HAL_UART_IRQHandler+0x298>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 810a 	beq.w	8007f34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d011      	beq.n	8007d50 <HAL_UART_IRQHandler+0xbc>
 8007d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d46:	f043 0201 	orr.w	r2, r3, #1
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d011      	beq.n	8007d80 <HAL_UART_IRQHandler+0xec>
 8007d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d76:	f043 0204 	orr.w	r2, r3, #4
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d011      	beq.n	8007db0 <HAL_UART_IRQHandler+0x11c>
 8007d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2204      	movs	r2, #4
 8007d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007da6:	f043 0202 	orr.w	r2, r3, #2
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d017      	beq.n	8007dec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc0:	f003 0320 	and.w	r3, r3, #32
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d105      	bne.n	8007dd4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dcc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2208      	movs	r2, #8
 8007dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007de2:	f043 0208 	orr.w	r2, r3, #8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d012      	beq.n	8007e1e <HAL_UART_IRQHandler+0x18a>
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00c      	beq.n	8007e1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e14:	f043 0220 	orr.w	r2, r3, #32
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 8217 	beq.w	8008258 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00d      	beq.n	8007e52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e66:	2b40      	cmp	r3, #64	@ 0x40
 8007e68:	d005      	beq.n	8007e76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d04f      	beq.n	8007f16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fde2 	bl	8008a40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e86:	2b40      	cmp	r3, #64	@ 0x40
 8007e88:	d141      	bne.n	8007f0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3308      	adds	r3, #8
 8007e90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007eb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007eba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1d9      	bne.n	8007e8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d013      	beq.n	8007f06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ee2:	4a13      	ldr	r2, [pc, #76]	@ (8007f30 <HAL_UART_IRQHandler+0x29c>)
 8007ee4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fb f8a4 	bl	8003038 <HAL_DMA_Abort_IT>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d017      	beq.n	8007f26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007f00:	4610      	mov	r0, r2
 8007f02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f04:	e00f      	b.n	8007f26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f9ba 	bl	8008280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f0c:	e00b      	b.n	8007f26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f9b6 	bl	8008280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f14:	e007      	b.n	8007f26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f9b2 	bl	8008280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007f24:	e198      	b.n	8008258 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f26:	bf00      	nop
    return;
 8007f28:	e196      	b.n	8008258 <HAL_UART_IRQHandler+0x5c4>
 8007f2a:	bf00      	nop
 8007f2c:	04000120 	.word	0x04000120
 8007f30:	08008b09 	.word	0x08008b09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	f040 8166 	bne.w	800820a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 815f 	beq.w	800820a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 8158 	beq.w	800820a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2210      	movs	r2, #16
 8007f60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6c:	2b40      	cmp	r3, #64	@ 0x40
 8007f6e:	f040 80d0 	bne.w	8008112 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 80ab 	beq.w	80080de <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f92:	429a      	cmp	r2, r3
 8007f94:	f080 80a3 	bcs.w	80080de <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fac:	f000 8086 	beq.w	80080bc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007fbc:	e853 3f00 	ldrex	r3, [r3]
 8007fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007fda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fde:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007fe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1da      	bne.n	8007fb0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3308      	adds	r3, #8
 8008000:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800800a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800800c:	f023 0301 	bic.w	r3, r3, #1
 8008010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800801e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008022:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008026:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008030:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e1      	bne.n	8007ffa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3308      	adds	r3, #8
 800803c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800804c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3308      	adds	r3, #8
 8008056:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800805a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800805c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008060:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e3      	bne.n	8008036 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800808a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800808c:	f023 0310 	bic.w	r3, r3, #16
 8008090:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800809e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80080ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e4      	bne.n	800807c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fa ff4e 	bl	8002f58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f8dc 	bl	8008294 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80080dc:	e0be      	b.n	800825c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80080e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080e8:	429a      	cmp	r2, r3
 80080ea:	f040 80b7 	bne.w	800825c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f8:	f040 80b0 	bne.w	800825c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f8c2 	bl	8008294 <HAL_UARTEx_RxEventCallback>
      return;
 8008110:	e0a4      	b.n	800825c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800811e:	b29b      	uxth	r3, r3
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8096 	beq.w	8008260 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8008134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 8091 	beq.w	8008260 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800814c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008160:	647b      	str	r3, [r7, #68]	@ 0x44
 8008162:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800816e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e4      	bne.n	800813e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3308      	adds	r3, #8
 800817a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	623b      	str	r3, [r7, #32]
   return(result);
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	f023 0301 	bic.w	r3, r3, #1
 800818a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008198:	633a      	str	r2, [r7, #48]	@ 0x30
 800819a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800819e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e3      	bne.n	8008174 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f023 0310 	bic.w	r3, r3, #16
 80081d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	461a      	mov	r2, r3
 80081de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	617b      	str	r3, [r7, #20]
   return(result);
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e4      	bne.n	80081c0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f846 	bl	8008294 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008208:	e02a      	b.n	8008260 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800820a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800820e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00e      	beq.n	8008234 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800821a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821e:	2b00      	cmp	r3, #0
 8008220:	d008      	beq.n	8008234 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01c      	beq.n	8008264 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
    }
    return;
 8008232:	e017      	b.n	8008264 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d012      	beq.n	8008266 <HAL_UART_IRQHandler+0x5d2>
 8008240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00c      	beq.n	8008266 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc6d 	bl	8008b2c <UART_EndTransmit_IT>
    return;
 8008252:	e008      	b.n	8008266 <HAL_UART_IRQHandler+0x5d2>
      return;
 8008254:	bf00      	nop
 8008256:	e006      	b.n	8008266 <HAL_UART_IRQHandler+0x5d2>
    return;
 8008258:	bf00      	nop
 800825a:	e004      	b.n	8008266 <HAL_UART_IRQHandler+0x5d2>
      return;
 800825c:	bf00      	nop
 800825e:	e002      	b.n	8008266 <HAL_UART_IRQHandler+0x5d2>
      return;
 8008260:	bf00      	nop
 8008262:	e000      	b.n	8008266 <HAL_UART_IRQHandler+0x5d2>
    return;
 8008264:	bf00      	nop
  }

}
 8008266:	37e8      	adds	r7, #232	@ 0xe8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	4ba6      	ldr	r3, [pc, #664]	@ (8008570 <UART_SetConfig+0x2c4>)
 80082d8:	4013      	ands	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6812      	ldr	r2, [r2, #0]
 80082de:	6979      	ldr	r1, [r7, #20]
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68da      	ldr	r2, [r3, #12]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	4313      	orrs	r3, r2
 8008308:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	430a      	orrs	r2, r1
 800831c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a94      	ldr	r2, [pc, #592]	@ (8008574 <UART_SetConfig+0x2c8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d120      	bne.n	800836a <UART_SetConfig+0xbe>
 8008328:	4b93      	ldr	r3, [pc, #588]	@ (8008578 <UART_SetConfig+0x2cc>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	2b03      	cmp	r3, #3
 8008334:	d816      	bhi.n	8008364 <UART_SetConfig+0xb8>
 8008336:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <UART_SetConfig+0x90>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	0800834d 	.word	0x0800834d
 8008340:	08008359 	.word	0x08008359
 8008344:	08008353 	.word	0x08008353
 8008348:	0800835f 	.word	0x0800835f
 800834c:	2301      	movs	r3, #1
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e150      	b.n	80085f4 <UART_SetConfig+0x348>
 8008352:	2302      	movs	r3, #2
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e14d      	b.n	80085f4 <UART_SetConfig+0x348>
 8008358:	2304      	movs	r3, #4
 800835a:	77fb      	strb	r3, [r7, #31]
 800835c:	e14a      	b.n	80085f4 <UART_SetConfig+0x348>
 800835e:	2308      	movs	r3, #8
 8008360:	77fb      	strb	r3, [r7, #31]
 8008362:	e147      	b.n	80085f4 <UART_SetConfig+0x348>
 8008364:	2310      	movs	r3, #16
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	e144      	b.n	80085f4 <UART_SetConfig+0x348>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a83      	ldr	r2, [pc, #524]	@ (800857c <UART_SetConfig+0x2d0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d132      	bne.n	80083da <UART_SetConfig+0x12e>
 8008374:	4b80      	ldr	r3, [pc, #512]	@ (8008578 <UART_SetConfig+0x2cc>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837a:	f003 030c 	and.w	r3, r3, #12
 800837e:	2b0c      	cmp	r3, #12
 8008380:	d828      	bhi.n	80083d4 <UART_SetConfig+0x128>
 8008382:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <UART_SetConfig+0xdc>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	080083bd 	.word	0x080083bd
 800838c:	080083d5 	.word	0x080083d5
 8008390:	080083d5 	.word	0x080083d5
 8008394:	080083d5 	.word	0x080083d5
 8008398:	080083c9 	.word	0x080083c9
 800839c:	080083d5 	.word	0x080083d5
 80083a0:	080083d5 	.word	0x080083d5
 80083a4:	080083d5 	.word	0x080083d5
 80083a8:	080083c3 	.word	0x080083c3
 80083ac:	080083d5 	.word	0x080083d5
 80083b0:	080083d5 	.word	0x080083d5
 80083b4:	080083d5 	.word	0x080083d5
 80083b8:	080083cf 	.word	0x080083cf
 80083bc:	2300      	movs	r3, #0
 80083be:	77fb      	strb	r3, [r7, #31]
 80083c0:	e118      	b.n	80085f4 <UART_SetConfig+0x348>
 80083c2:	2302      	movs	r3, #2
 80083c4:	77fb      	strb	r3, [r7, #31]
 80083c6:	e115      	b.n	80085f4 <UART_SetConfig+0x348>
 80083c8:	2304      	movs	r3, #4
 80083ca:	77fb      	strb	r3, [r7, #31]
 80083cc:	e112      	b.n	80085f4 <UART_SetConfig+0x348>
 80083ce:	2308      	movs	r3, #8
 80083d0:	77fb      	strb	r3, [r7, #31]
 80083d2:	e10f      	b.n	80085f4 <UART_SetConfig+0x348>
 80083d4:	2310      	movs	r3, #16
 80083d6:	77fb      	strb	r3, [r7, #31]
 80083d8:	e10c      	b.n	80085f4 <UART_SetConfig+0x348>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a68      	ldr	r2, [pc, #416]	@ (8008580 <UART_SetConfig+0x2d4>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d120      	bne.n	8008426 <UART_SetConfig+0x17a>
 80083e4:	4b64      	ldr	r3, [pc, #400]	@ (8008578 <UART_SetConfig+0x2cc>)
 80083e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80083ee:	2b30      	cmp	r3, #48	@ 0x30
 80083f0:	d013      	beq.n	800841a <UART_SetConfig+0x16e>
 80083f2:	2b30      	cmp	r3, #48	@ 0x30
 80083f4:	d814      	bhi.n	8008420 <UART_SetConfig+0x174>
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d009      	beq.n	800840e <UART_SetConfig+0x162>
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d810      	bhi.n	8008420 <UART_SetConfig+0x174>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <UART_SetConfig+0x15c>
 8008402:	2b10      	cmp	r3, #16
 8008404:	d006      	beq.n	8008414 <UART_SetConfig+0x168>
 8008406:	e00b      	b.n	8008420 <UART_SetConfig+0x174>
 8008408:	2300      	movs	r3, #0
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e0f2      	b.n	80085f4 <UART_SetConfig+0x348>
 800840e:	2302      	movs	r3, #2
 8008410:	77fb      	strb	r3, [r7, #31]
 8008412:	e0ef      	b.n	80085f4 <UART_SetConfig+0x348>
 8008414:	2304      	movs	r3, #4
 8008416:	77fb      	strb	r3, [r7, #31]
 8008418:	e0ec      	b.n	80085f4 <UART_SetConfig+0x348>
 800841a:	2308      	movs	r3, #8
 800841c:	77fb      	strb	r3, [r7, #31]
 800841e:	e0e9      	b.n	80085f4 <UART_SetConfig+0x348>
 8008420:	2310      	movs	r3, #16
 8008422:	77fb      	strb	r3, [r7, #31]
 8008424:	e0e6      	b.n	80085f4 <UART_SetConfig+0x348>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a56      	ldr	r2, [pc, #344]	@ (8008584 <UART_SetConfig+0x2d8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d120      	bne.n	8008472 <UART_SetConfig+0x1c6>
 8008430:	4b51      	ldr	r3, [pc, #324]	@ (8008578 <UART_SetConfig+0x2cc>)
 8008432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008436:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800843a:	2bc0      	cmp	r3, #192	@ 0xc0
 800843c:	d013      	beq.n	8008466 <UART_SetConfig+0x1ba>
 800843e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008440:	d814      	bhi.n	800846c <UART_SetConfig+0x1c0>
 8008442:	2b80      	cmp	r3, #128	@ 0x80
 8008444:	d009      	beq.n	800845a <UART_SetConfig+0x1ae>
 8008446:	2b80      	cmp	r3, #128	@ 0x80
 8008448:	d810      	bhi.n	800846c <UART_SetConfig+0x1c0>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <UART_SetConfig+0x1a8>
 800844e:	2b40      	cmp	r3, #64	@ 0x40
 8008450:	d006      	beq.n	8008460 <UART_SetConfig+0x1b4>
 8008452:	e00b      	b.n	800846c <UART_SetConfig+0x1c0>
 8008454:	2300      	movs	r3, #0
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	e0cc      	b.n	80085f4 <UART_SetConfig+0x348>
 800845a:	2302      	movs	r3, #2
 800845c:	77fb      	strb	r3, [r7, #31]
 800845e:	e0c9      	b.n	80085f4 <UART_SetConfig+0x348>
 8008460:	2304      	movs	r3, #4
 8008462:	77fb      	strb	r3, [r7, #31]
 8008464:	e0c6      	b.n	80085f4 <UART_SetConfig+0x348>
 8008466:	2308      	movs	r3, #8
 8008468:	77fb      	strb	r3, [r7, #31]
 800846a:	e0c3      	b.n	80085f4 <UART_SetConfig+0x348>
 800846c:	2310      	movs	r3, #16
 800846e:	77fb      	strb	r3, [r7, #31]
 8008470:	e0c0      	b.n	80085f4 <UART_SetConfig+0x348>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a44      	ldr	r2, [pc, #272]	@ (8008588 <UART_SetConfig+0x2dc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d125      	bne.n	80084c8 <UART_SetConfig+0x21c>
 800847c:	4b3e      	ldr	r3, [pc, #248]	@ (8008578 <UART_SetConfig+0x2cc>)
 800847e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800848a:	d017      	beq.n	80084bc <UART_SetConfig+0x210>
 800848c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008490:	d817      	bhi.n	80084c2 <UART_SetConfig+0x216>
 8008492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008496:	d00b      	beq.n	80084b0 <UART_SetConfig+0x204>
 8008498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800849c:	d811      	bhi.n	80084c2 <UART_SetConfig+0x216>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <UART_SetConfig+0x1fe>
 80084a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a6:	d006      	beq.n	80084b6 <UART_SetConfig+0x20a>
 80084a8:	e00b      	b.n	80084c2 <UART_SetConfig+0x216>
 80084aa:	2300      	movs	r3, #0
 80084ac:	77fb      	strb	r3, [r7, #31]
 80084ae:	e0a1      	b.n	80085f4 <UART_SetConfig+0x348>
 80084b0:	2302      	movs	r3, #2
 80084b2:	77fb      	strb	r3, [r7, #31]
 80084b4:	e09e      	b.n	80085f4 <UART_SetConfig+0x348>
 80084b6:	2304      	movs	r3, #4
 80084b8:	77fb      	strb	r3, [r7, #31]
 80084ba:	e09b      	b.n	80085f4 <UART_SetConfig+0x348>
 80084bc:	2308      	movs	r3, #8
 80084be:	77fb      	strb	r3, [r7, #31]
 80084c0:	e098      	b.n	80085f4 <UART_SetConfig+0x348>
 80084c2:	2310      	movs	r3, #16
 80084c4:	77fb      	strb	r3, [r7, #31]
 80084c6:	e095      	b.n	80085f4 <UART_SetConfig+0x348>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a2f      	ldr	r2, [pc, #188]	@ (800858c <UART_SetConfig+0x2e0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d125      	bne.n	800851e <UART_SetConfig+0x272>
 80084d2:	4b29      	ldr	r3, [pc, #164]	@ (8008578 <UART_SetConfig+0x2cc>)
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80084dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084e0:	d017      	beq.n	8008512 <UART_SetConfig+0x266>
 80084e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80084e6:	d817      	bhi.n	8008518 <UART_SetConfig+0x26c>
 80084e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084ec:	d00b      	beq.n	8008506 <UART_SetConfig+0x25a>
 80084ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084f2:	d811      	bhi.n	8008518 <UART_SetConfig+0x26c>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <UART_SetConfig+0x254>
 80084f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084fc:	d006      	beq.n	800850c <UART_SetConfig+0x260>
 80084fe:	e00b      	b.n	8008518 <UART_SetConfig+0x26c>
 8008500:	2301      	movs	r3, #1
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	e076      	b.n	80085f4 <UART_SetConfig+0x348>
 8008506:	2302      	movs	r3, #2
 8008508:	77fb      	strb	r3, [r7, #31]
 800850a:	e073      	b.n	80085f4 <UART_SetConfig+0x348>
 800850c:	2304      	movs	r3, #4
 800850e:	77fb      	strb	r3, [r7, #31]
 8008510:	e070      	b.n	80085f4 <UART_SetConfig+0x348>
 8008512:	2308      	movs	r3, #8
 8008514:	77fb      	strb	r3, [r7, #31]
 8008516:	e06d      	b.n	80085f4 <UART_SetConfig+0x348>
 8008518:	2310      	movs	r3, #16
 800851a:	77fb      	strb	r3, [r7, #31]
 800851c:	e06a      	b.n	80085f4 <UART_SetConfig+0x348>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1b      	ldr	r2, [pc, #108]	@ (8008590 <UART_SetConfig+0x2e4>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d138      	bne.n	800859a <UART_SetConfig+0x2ee>
 8008528:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <UART_SetConfig+0x2cc>)
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008532:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008536:	d017      	beq.n	8008568 <UART_SetConfig+0x2bc>
 8008538:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800853c:	d82a      	bhi.n	8008594 <UART_SetConfig+0x2e8>
 800853e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008542:	d00b      	beq.n	800855c <UART_SetConfig+0x2b0>
 8008544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008548:	d824      	bhi.n	8008594 <UART_SetConfig+0x2e8>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <UART_SetConfig+0x2aa>
 800854e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008552:	d006      	beq.n	8008562 <UART_SetConfig+0x2b6>
 8008554:	e01e      	b.n	8008594 <UART_SetConfig+0x2e8>
 8008556:	2300      	movs	r3, #0
 8008558:	77fb      	strb	r3, [r7, #31]
 800855a:	e04b      	b.n	80085f4 <UART_SetConfig+0x348>
 800855c:	2302      	movs	r3, #2
 800855e:	77fb      	strb	r3, [r7, #31]
 8008560:	e048      	b.n	80085f4 <UART_SetConfig+0x348>
 8008562:	2304      	movs	r3, #4
 8008564:	77fb      	strb	r3, [r7, #31]
 8008566:	e045      	b.n	80085f4 <UART_SetConfig+0x348>
 8008568:	2308      	movs	r3, #8
 800856a:	77fb      	strb	r3, [r7, #31]
 800856c:	e042      	b.n	80085f4 <UART_SetConfig+0x348>
 800856e:	bf00      	nop
 8008570:	efff69f3 	.word	0xefff69f3
 8008574:	40011000 	.word	0x40011000
 8008578:	40023800 	.word	0x40023800
 800857c:	40004400 	.word	0x40004400
 8008580:	40004800 	.word	0x40004800
 8008584:	40004c00 	.word	0x40004c00
 8008588:	40005000 	.word	0x40005000
 800858c:	40011400 	.word	0x40011400
 8008590:	40007800 	.word	0x40007800
 8008594:	2310      	movs	r3, #16
 8008596:	77fb      	strb	r3, [r7, #31]
 8008598:	e02c      	b.n	80085f4 <UART_SetConfig+0x348>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a72      	ldr	r2, [pc, #456]	@ (8008768 <UART_SetConfig+0x4bc>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d125      	bne.n	80085f0 <UART_SetConfig+0x344>
 80085a4:	4b71      	ldr	r3, [pc, #452]	@ (800876c <UART_SetConfig+0x4c0>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80085ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085b2:	d017      	beq.n	80085e4 <UART_SetConfig+0x338>
 80085b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085b8:	d817      	bhi.n	80085ea <UART_SetConfig+0x33e>
 80085ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085be:	d00b      	beq.n	80085d8 <UART_SetConfig+0x32c>
 80085c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085c4:	d811      	bhi.n	80085ea <UART_SetConfig+0x33e>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <UART_SetConfig+0x326>
 80085ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085ce:	d006      	beq.n	80085de <UART_SetConfig+0x332>
 80085d0:	e00b      	b.n	80085ea <UART_SetConfig+0x33e>
 80085d2:	2300      	movs	r3, #0
 80085d4:	77fb      	strb	r3, [r7, #31]
 80085d6:	e00d      	b.n	80085f4 <UART_SetConfig+0x348>
 80085d8:	2302      	movs	r3, #2
 80085da:	77fb      	strb	r3, [r7, #31]
 80085dc:	e00a      	b.n	80085f4 <UART_SetConfig+0x348>
 80085de:	2304      	movs	r3, #4
 80085e0:	77fb      	strb	r3, [r7, #31]
 80085e2:	e007      	b.n	80085f4 <UART_SetConfig+0x348>
 80085e4:	2308      	movs	r3, #8
 80085e6:	77fb      	strb	r3, [r7, #31]
 80085e8:	e004      	b.n	80085f4 <UART_SetConfig+0x348>
 80085ea:	2310      	movs	r3, #16
 80085ec:	77fb      	strb	r3, [r7, #31]
 80085ee:	e001      	b.n	80085f4 <UART_SetConfig+0x348>
 80085f0:	2310      	movs	r3, #16
 80085f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085fc:	d15b      	bne.n	80086b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80085fe:	7ffb      	ldrb	r3, [r7, #31]
 8008600:	2b08      	cmp	r3, #8
 8008602:	d828      	bhi.n	8008656 <UART_SetConfig+0x3aa>
 8008604:	a201      	add	r2, pc, #4	@ (adr r2, 800860c <UART_SetConfig+0x360>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	08008631 	.word	0x08008631
 8008610:	08008639 	.word	0x08008639
 8008614:	08008641 	.word	0x08008641
 8008618:	08008657 	.word	0x08008657
 800861c:	08008647 	.word	0x08008647
 8008620:	08008657 	.word	0x08008657
 8008624:	08008657 	.word	0x08008657
 8008628:	08008657 	.word	0x08008657
 800862c:	0800864f 	.word	0x0800864f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008630:	f7fd ff8e 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 8008634:	61b8      	str	r0, [r7, #24]
        break;
 8008636:	e013      	b.n	8008660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008638:	f7fd ff9e 	bl	8006578 <HAL_RCC_GetPCLK2Freq>
 800863c:	61b8      	str	r0, [r7, #24]
        break;
 800863e:	e00f      	b.n	8008660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008640:	4b4b      	ldr	r3, [pc, #300]	@ (8008770 <UART_SetConfig+0x4c4>)
 8008642:	61bb      	str	r3, [r7, #24]
        break;
 8008644:	e00c      	b.n	8008660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008646:	f7fd feb1 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 800864a:	61b8      	str	r0, [r7, #24]
        break;
 800864c:	e008      	b.n	8008660 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800864e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008652:	61bb      	str	r3, [r7, #24]
        break;
 8008654:	e004      	b.n	8008660 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	77bb      	strb	r3, [r7, #30]
        break;
 800865e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d074      	beq.n	8008750 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	005a      	lsls	r2, r3, #1
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	085b      	lsrs	r3, r3, #1
 8008670:	441a      	add	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	fbb2 f3f3 	udiv	r3, r2, r3
 800867a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b0f      	cmp	r3, #15
 8008680:	d916      	bls.n	80086b0 <UART_SetConfig+0x404>
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008688:	d212      	bcs.n	80086b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f023 030f 	bic.w	r3, r3, #15
 8008692:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	b29b      	uxth	r3, r3
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	b29a      	uxth	r2, r3
 80086a0:	89fb      	ldrh	r3, [r7, #14]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	89fa      	ldrh	r2, [r7, #14]
 80086ac:	60da      	str	r2, [r3, #12]
 80086ae:	e04f      	b.n	8008750 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	77bb      	strb	r3, [r7, #30]
 80086b4:	e04c      	b.n	8008750 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086b6:	7ffb      	ldrb	r3, [r7, #31]
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d828      	bhi.n	800870e <UART_SetConfig+0x462>
 80086bc:	a201      	add	r2, pc, #4	@ (adr r2, 80086c4 <UART_SetConfig+0x418>)
 80086be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c2:	bf00      	nop
 80086c4:	080086e9 	.word	0x080086e9
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	080086f9 	.word	0x080086f9
 80086d0:	0800870f 	.word	0x0800870f
 80086d4:	080086ff 	.word	0x080086ff
 80086d8:	0800870f 	.word	0x0800870f
 80086dc:	0800870f 	.word	0x0800870f
 80086e0:	0800870f 	.word	0x0800870f
 80086e4:	08008707 	.word	0x08008707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086e8:	f7fd ff32 	bl	8006550 <HAL_RCC_GetPCLK1Freq>
 80086ec:	61b8      	str	r0, [r7, #24]
        break;
 80086ee:	e013      	b.n	8008718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086f0:	f7fd ff42 	bl	8006578 <HAL_RCC_GetPCLK2Freq>
 80086f4:	61b8      	str	r0, [r7, #24]
        break;
 80086f6:	e00f      	b.n	8008718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008770 <UART_SetConfig+0x4c4>)
 80086fa:	61bb      	str	r3, [r7, #24]
        break;
 80086fc:	e00c      	b.n	8008718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086fe:	f7fd fe55 	bl	80063ac <HAL_RCC_GetSysClockFreq>
 8008702:	61b8      	str	r0, [r7, #24]
        break;
 8008704:	e008      	b.n	8008718 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800870a:	61bb      	str	r3, [r7, #24]
        break;
 800870c:	e004      	b.n	8008718 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	77bb      	strb	r3, [r7, #30]
        break;
 8008716:	bf00      	nop
    }

    if (pclk != 0U)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d018      	beq.n	8008750 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	085a      	lsrs	r2, r3, #1
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	441a      	add	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008730:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b0f      	cmp	r3, #15
 8008736:	d909      	bls.n	800874c <UART_SetConfig+0x4a0>
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800873e:	d205      	bcs.n	800874c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	b29a      	uxth	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	60da      	str	r2, [r3, #12]
 800874a:	e001      	b.n	8008750 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800875c:	7fbb      	ldrb	r3, [r7, #30]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	40007c00 	.word	0x40007c00
 800876c:	40023800 	.word	0x40023800
 8008770:	00f42400 	.word	0x00f42400

08008774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00a      	beq.n	800879e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01a      	beq.n	800888a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008872:	d10a      	bne.n	800888a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	605a      	str	r2, [r3, #4]
  }
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08c      	sub	sp, #48	@ 0x30
 80088bc:	af02      	add	r7, sp, #8
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088c8:	f7f9 fdf0 	bl	80024ac <HAL_GetTick>
 80088cc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0308 	and.w	r3, r3, #8
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d12e      	bne.n	800893a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e4:	2200      	movs	r2, #0
 80088e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f83b 	bl	8008966 <UART_WaitOnFlagUntilTimeout>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d021      	beq.n	800893a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	60fb      	str	r3, [r7, #12]
   return(result);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800890a:	623b      	str	r3, [r7, #32]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	461a      	mov	r2, r3
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	61fb      	str	r3, [r7, #28]
 8008916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	69b9      	ldr	r1, [r7, #24]
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	617b      	str	r3, [r7, #20]
   return(result);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e6      	bne.n	80088f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e011      	b.n	800895e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2220      	movs	r2, #32
 8008944:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3728      	adds	r7, #40	@ 0x28
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	603b      	str	r3, [r7, #0]
 8008972:	4613      	mov	r3, r2
 8008974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008976:	e04f      	b.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800897e:	d04b      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008980:	f7f9 fd94 	bl	80024ac <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	d302      	bcc.n	8008996 <UART_WaitOnFlagUntilTimeout+0x30>
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e04e      	b.n	8008a38 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d037      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b80      	cmp	r3, #128	@ 0x80
 80089ac:	d034      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b40      	cmp	r3, #64	@ 0x40
 80089b2:	d031      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d110      	bne.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2208      	movs	r2, #8
 80089c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f838 	bl	8008a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2208      	movs	r2, #8
 80089d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e029      	b.n	8008a38 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089f2:	d111      	bne.n	8008a18 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 f81e 	bl	8008a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e00f      	b.n	8008a38 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	69da      	ldr	r2, [r3, #28]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4013      	ands	r3, r2
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bf0c      	ite	eq
 8008a28:	2301      	moveq	r3, #1
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d0a0      	beq.n	8008978 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b095      	sub	sp, #84	@ 0x54
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a66:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e6      	bne.n	8008a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3308      	adds	r3, #8
 8008a98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e5      	bne.n	8008a7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d118      	bne.n	8008ae8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f023 0310 	bic.w	r3, r3, #16
 8008aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ad4:	61bb      	str	r3, [r7, #24]
 8008ad6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6979      	ldr	r1, [r7, #20]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e6      	bne.n	8008ab6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008afc:	bf00      	nop
 8008afe:	3754      	adds	r7, #84	@ 0x54
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7ff fbae 	bl	8008280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b48:	61fb      	str	r3, [r7, #28]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	61bb      	str	r3, [r7, #24]
 8008b54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6979      	ldr	r1, [r7, #20]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e6      	bne.n	8008b34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff fb7a 	bl	800826c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b78:	bf00      	nop
 8008b7a:	3720      	adds	r7, #32
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008b80:	b5b0      	push	{r4, r5, r7, lr}
 8008b82:	b08c      	sub	sp, #48	@ 0x30
 8008b84:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8008b86:	4b8f      	ldr	r3, [pc, #572]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008b88:	220a      	movs	r2, #10
 8008b8a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8008b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8008b92:	4b8c      	ldr	r3, [pc, #560]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008b94:	2201      	movs	r2, #1
 8008b96:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8008b98:	4b8a      	ldr	r3, [pc, #552]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008b9a:	2264      	movs	r2, #100	@ 0x64
 8008b9c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008b9e:	4b8a      	ldr	r3, [pc, #552]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008ba0:	22ff      	movs	r2, #255	@ 0xff
 8008ba2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008ba4:	4b88      	ldr	r3, [pc, #544]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008ba6:	22ff      	movs	r2, #255	@ 0xff
 8008ba8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008baa:	4b87      	ldr	r3, [pc, #540]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008bac:	22ff      	movs	r2, #255	@ 0xff
 8008bae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008bb0:	4b85      	ldr	r3, [pc, #532]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8008bb6:	4b85      	ldr	r3, [pc, #532]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008bb8:	220a      	movs	r2, #10
 8008bba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8008bbc:	4b83      	ldr	r3, [pc, #524]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8008bc2:	4b82      	ldr	r3, [pc, #520]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 8008bc8:	4b80      	ldr	r3, [pc, #512]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008bca:	2265      	movs	r2, #101	@ 0x65
 8008bcc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008bce:	2100      	movs	r1, #0
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f004 f873 	bl	800ccbc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	061a      	lsls	r2, r3, #24
 8008bdc:	4b79      	ldr	r3, [pc, #484]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	431a      	orrs	r2, r3
 8008be4:	4b77      	ldr	r3, [pc, #476]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008be6:	789b      	ldrb	r3, [r3, #2]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	4313      	orrs	r3, r2
 8008bec:	4a75      	ldr	r2, [pc, #468]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008bee:	78d2      	ldrb	r2, [r2, #3]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	061a      	lsls	r2, r3, #24
 8008bf4:	4b73      	ldr	r3, [pc, #460]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	0619      	lsls	r1, r3, #24
 8008bfa:	4b72      	ldr	r3, [pc, #456]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	041b      	lsls	r3, r3, #16
 8008c00:	4319      	orrs	r1, r3
 8008c02:	4b70      	ldr	r3, [pc, #448]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c04:	789b      	ldrb	r3, [r3, #2]
 8008c06:	021b      	lsls	r3, r3, #8
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	496e      	ldr	r1, [pc, #440]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c0c:	78c9      	ldrb	r1, [r1, #3]
 8008c0e:	430b      	orrs	r3, r1
 8008c10:	021b      	lsls	r3, r3, #8
 8008c12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c16:	431a      	orrs	r2, r3
 8008c18:	4b6a      	ldr	r3, [pc, #424]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	0619      	lsls	r1, r3, #24
 8008c1e:	4b69      	ldr	r3, [pc, #420]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	041b      	lsls	r3, r3, #16
 8008c24:	4319      	orrs	r1, r3
 8008c26:	4b67      	ldr	r3, [pc, #412]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c28:	789b      	ldrb	r3, [r3, #2]
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	4965      	ldr	r1, [pc, #404]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c30:	78c9      	ldrb	r1, [r1, #3]
 8008c32:	430b      	orrs	r3, r1
 8008c34:	0a1b      	lsrs	r3, r3, #8
 8008c36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	4b61      	ldr	r3, [pc, #388]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	0619      	lsls	r1, r3, #24
 8008c42:	4b60      	ldr	r3, [pc, #384]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c44:	785b      	ldrb	r3, [r3, #1]
 8008c46:	041b      	lsls	r3, r3, #16
 8008c48:	4319      	orrs	r1, r3
 8008c4a:	4b5e      	ldr	r3, [pc, #376]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c4c:	789b      	ldrb	r3, [r3, #2]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	430b      	orrs	r3, r1
 8008c52:	495c      	ldr	r1, [pc, #368]	@ (8008dc4 <MX_LWIP_Init+0x244>)
 8008c54:	78c9      	ldrb	r1, [r1, #3]
 8008c56:	430b      	orrs	r3, r1
 8008c58:	0e1b      	lsrs	r3, r3, #24
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8008dd0 <MX_LWIP_Init+0x250>)
 8008c5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008c60:	4b59      	ldr	r3, [pc, #356]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	061a      	lsls	r2, r3, #24
 8008c66:	4b58      	ldr	r3, [pc, #352]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	041b      	lsls	r3, r3, #16
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	4b56      	ldr	r3, [pc, #344]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008c70:	789b      	ldrb	r3, [r3, #2]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	4313      	orrs	r3, r2
 8008c76:	4a54      	ldr	r2, [pc, #336]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008c78:	78d2      	ldrb	r2, [r2, #3]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	061a      	lsls	r2, r3, #24
 8008c7e:	4b52      	ldr	r3, [pc, #328]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	0619      	lsls	r1, r3, #24
 8008c84:	4b50      	ldr	r3, [pc, #320]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008c86:	785b      	ldrb	r3, [r3, #1]
 8008c88:	041b      	lsls	r3, r3, #16
 8008c8a:	4319      	orrs	r1, r3
 8008c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008c8e:	789b      	ldrb	r3, [r3, #2]
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	430b      	orrs	r3, r1
 8008c94:	494c      	ldr	r1, [pc, #304]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008c96:	78c9      	ldrb	r1, [r1, #3]
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	4b49      	ldr	r3, [pc, #292]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	0619      	lsls	r1, r3, #24
 8008ca8:	4b47      	ldr	r3, [pc, #284]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	041b      	lsls	r3, r3, #16
 8008cae:	4319      	orrs	r1, r3
 8008cb0:	4b45      	ldr	r3, [pc, #276]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008cb2:	789b      	ldrb	r3, [r3, #2]
 8008cb4:	021b      	lsls	r3, r3, #8
 8008cb6:	430b      	orrs	r3, r1
 8008cb8:	4943      	ldr	r1, [pc, #268]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008cba:	78c9      	ldrb	r1, [r1, #3]
 8008cbc:	430b      	orrs	r3, r1
 8008cbe:	0a1b      	lsrs	r3, r3, #8
 8008cc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	4b40      	ldr	r3, [pc, #256]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	0619      	lsls	r1, r3, #24
 8008ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008cce:	785b      	ldrb	r3, [r3, #1]
 8008cd0:	041b      	lsls	r3, r3, #16
 8008cd2:	4319      	orrs	r1, r3
 8008cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008cd6:	789b      	ldrb	r3, [r3, #2]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	493a      	ldr	r1, [pc, #232]	@ (8008dc8 <MX_LWIP_Init+0x248>)
 8008cde:	78c9      	ldrb	r1, [r1, #3]
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	0e1b      	lsrs	r3, r3, #24
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8008dd4 <MX_LWIP_Init+0x254>)
 8008ce8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008cea:	4b38      	ldr	r3, [pc, #224]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	061a      	lsls	r2, r3, #24
 8008cf0:	4b36      	ldr	r3, [pc, #216]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	041b      	lsls	r3, r3, #16
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	4b34      	ldr	r3, [pc, #208]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008cfa:	789b      	ldrb	r3, [r3, #2]
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	4a32      	ldr	r2, [pc, #200]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d02:	78d2      	ldrb	r2, [r2, #3]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	061a      	lsls	r2, r3, #24
 8008d08:	4b30      	ldr	r3, [pc, #192]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	0619      	lsls	r1, r3, #24
 8008d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d10:	785b      	ldrb	r3, [r3, #1]
 8008d12:	041b      	lsls	r3, r3, #16
 8008d14:	4319      	orrs	r1, r3
 8008d16:	4b2d      	ldr	r3, [pc, #180]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d18:	789b      	ldrb	r3, [r3, #2]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	492b      	ldr	r1, [pc, #172]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d20:	78c9      	ldrb	r1, [r1, #3]
 8008d22:	430b      	orrs	r3, r1
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	4b27      	ldr	r3, [pc, #156]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	0619      	lsls	r1, r3, #24
 8008d32:	4b26      	ldr	r3, [pc, #152]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d34:	785b      	ldrb	r3, [r3, #1]
 8008d36:	041b      	lsls	r3, r3, #16
 8008d38:	4319      	orrs	r1, r3
 8008d3a:	4b24      	ldr	r3, [pc, #144]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d3c:	789b      	ldrb	r3, [r3, #2]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	430b      	orrs	r3, r1
 8008d42:	4922      	ldr	r1, [pc, #136]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d44:	78c9      	ldrb	r1, [r1, #3]
 8008d46:	430b      	orrs	r3, r1
 8008d48:	0a1b      	lsrs	r3, r3, #8
 8008d4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	4b1e      	ldr	r3, [pc, #120]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	0619      	lsls	r1, r3, #24
 8008d56:	4b1d      	ldr	r3, [pc, #116]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	041b      	lsls	r3, r3, #16
 8008d5c:	4319      	orrs	r1, r3
 8008d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d60:	789b      	ldrb	r3, [r3, #2]
 8008d62:	021b      	lsls	r3, r3, #8
 8008d64:	430b      	orrs	r3, r1
 8008d66:	4919      	ldr	r1, [pc, #100]	@ (8008dcc <MX_LWIP_Init+0x24c>)
 8008d68:	78c9      	ldrb	r1, [r1, #3]
 8008d6a:	430b      	orrs	r3, r1
 8008d6c:	0e1b      	lsrs	r3, r3, #24
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	4a19      	ldr	r2, [pc, #100]	@ (8008dd8 <MX_LWIP_Init+0x258>)
 8008d72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008d74:	4b19      	ldr	r3, [pc, #100]	@ (8008ddc <MX_LWIP_Init+0x25c>)
 8008d76:	9302      	str	r3, [sp, #8]
 8008d78:	4b19      	ldr	r3, [pc, #100]	@ (8008de0 <MX_LWIP_Init+0x260>)
 8008d7a:	9301      	str	r3, [sp, #4]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	4b15      	ldr	r3, [pc, #84]	@ (8008dd8 <MX_LWIP_Init+0x258>)
 8008d82:	4a14      	ldr	r2, [pc, #80]	@ (8008dd4 <MX_LWIP_Init+0x254>)
 8008d84:	4912      	ldr	r1, [pc, #72]	@ (8008dd0 <MX_LWIP_Init+0x250>)
 8008d86:	4817      	ldr	r0, [pc, #92]	@ (8008de4 <MX_LWIP_Init+0x264>)
 8008d88:	f004 fd5e 	bl	800d848 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008d8c:	4815      	ldr	r0, [pc, #84]	@ (8008de4 <MX_LWIP_Init+0x264>)
 8008d8e:	f004 ff0d 	bl	800dbac <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008d92:	4814      	ldr	r0, [pc, #80]	@ (8008de4 <MX_LWIP_Init+0x264>)
 8008d94:	f004 ff1a 	bl	800dbcc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008d98:	4913      	ldr	r1, [pc, #76]	@ (8008de8 <MX_LWIP_Init+0x268>)
 8008d9a:	4812      	ldr	r0, [pc, #72]	@ (8008de4 <MX_LWIP_Init+0x264>)
 8008d9c:	f005 f818 	bl	800ddd0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8008da0:	4b12      	ldr	r3, [pc, #72]	@ (8008dec <MX_LWIP_Init+0x26c>)
 8008da2:	1d3c      	adds	r4, r7, #4
 8008da4:	461d      	mov	r5, r3
 8008da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008daa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008dae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8008db2:	1d3b      	adds	r3, r7, #4
 8008db4:	490b      	ldr	r1, [pc, #44]	@ (8008de4 <MX_LWIP_Init+0x264>)
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fdd3 	bl	8009962 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008dbc:	bf00      	nop
 8008dbe:	3720      	adds	r7, #32
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8008dc4:	20000dec 	.word	0x20000dec
 8008dc8:	20000df0 	.word	0x20000df0
 8008dcc:	20000df4 	.word	0x20000df4
 8008dd0:	20000de0 	.word	0x20000de0
 8008dd4:	20000de4 	.word	0x20000de4
 8008dd8:	20000de8 	.word	0x20000de8
 8008ddc:	0800cbf9 	.word	0x0800cbf9
 8008de0:	08009389 	.word	0x08009389
 8008de4:	20000dac 	.word	0x20000dac
 8008de8:	08008df1 	.word	0x08008df1
 8008dec:	08017ebc 	.word	0x08017ebc

08008df0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008e16:	2320      	movs	r3, #32
 8008e18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008e1a:	f3bf 8f4f 	dsb	sy
}
 8008e1e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8008e20:	e00b      	b.n	8008e3a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008e22:	4a0d      	ldr	r2, [pc, #52]	@ (8008e58 <SCB_InvalidateDCache_by_Addr+0x54>)
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4413      	add	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dcf0      	bgt.n	8008e22 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008e40:	f3bf 8f4f 	dsb	sy
}
 8008e44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008e46:	f3bf 8f6f 	isb	sy
}
 8008e4a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8008e4c:	bf00      	nop
 8008e4e:	371c      	adds	r7, #28
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	e000ed00 	.word	0xe000ed00

08008e5c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008e64:	4b04      	ldr	r3, [pc, #16]	@ (8008e78 <HAL_ETH_RxCpltCallback+0x1c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 ff03 	bl	8009c74 <osSemaphoreRelease>
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20005784 	.word	0x20005784

08008e7c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008e84:	4b04      	ldr	r3, [pc, #16]	@ (8008e98 <HAL_ETH_TxCpltCallback+0x1c>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fef3 	bl	8009c74 <osSemaphoreRelease>
}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20005788 	.word	0x20005788

08008e9c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7fb f97c 	bl	80041a2 <HAL_ETH_GetDMAError>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eb0:	2b80      	cmp	r3, #128	@ 0x80
 8008eb2:	d104      	bne.n	8008ebe <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8008eb4:	4b04      	ldr	r3, [pc, #16]	@ (8008ec8 <HAL_ETH_ErrorCallback+0x2c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fedb 	bl	8009c74 <osSemaphoreRelease>
  }
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20005784 	.word	0x20005784

08008ecc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008ecc:	b5b0      	push	{r4, r5, r7, lr}
 8008ece:	b0b4      	sub	sp, #208	@ 0xd0
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8008ee6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008eea:	2264      	movs	r2, #100	@ 0x64
 8008eec:	2100      	movs	r1, #0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f00e f876 	bl	8016fe0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008ef4:	4b9f      	ldr	r3, [pc, #636]	@ (8009174 <low_level_init+0x2a8>)
 8008ef6:	4aa0      	ldr	r2, [pc, #640]	@ (8009178 <low_level_init+0x2ac>)
 8008ef8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008efa:	2300      	movs	r3, #0
 8008efc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8008f00:	2380      	movs	r3, #128	@ 0x80
 8008f02:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8008f06:	23e1      	movs	r3, #225	@ 0xe1
 8008f08:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8008f12:	2300      	movs	r3, #0
 8008f14:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8008f1e:	4a95      	ldr	r2, [pc, #596]	@ (8009174 <low_level_init+0x2a8>)
 8008f20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008f24:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008f26:	4b93      	ldr	r3, [pc, #588]	@ (8009174 <low_level_init+0x2a8>)
 8008f28:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008f2c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008f2e:	4b91      	ldr	r3, [pc, #580]	@ (8009174 <low_level_init+0x2a8>)
 8008f30:	4a92      	ldr	r2, [pc, #584]	@ (800917c <low_level_init+0x2b0>)
 8008f32:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008f34:	4b8f      	ldr	r3, [pc, #572]	@ (8009174 <low_level_init+0x2a8>)
 8008f36:	4a92      	ldr	r2, [pc, #584]	@ (8009180 <low_level_init+0x2b4>)
 8008f38:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008f3a:	4b8e      	ldr	r3, [pc, #568]	@ (8009174 <low_level_init+0x2a8>)
 8008f3c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008f40:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008f42:	488c      	ldr	r0, [pc, #560]	@ (8009174 <low_level_init+0x2a8>)
 8008f44:	f7fa fae4 	bl	8003510 <HAL_ETH_Init>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008f4e:	2238      	movs	r2, #56	@ 0x38
 8008f50:	2100      	movs	r1, #0
 8008f52:	488c      	ldr	r0, [pc, #560]	@ (8009184 <low_level_init+0x2b8>)
 8008f54:	f00e f844 	bl	8016fe0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008f58:	4b8a      	ldr	r3, [pc, #552]	@ (8009184 <low_level_init+0x2b8>)
 8008f5a:	2221      	movs	r2, #33	@ 0x21
 8008f5c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008f5e:	4b89      	ldr	r3, [pc, #548]	@ (8009184 <low_level_init+0x2b8>)
 8008f60:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8008f64:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008f66:	4b87      	ldr	r3, [pc, #540]	@ (8009184 <low_level_init+0x2b8>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008f6c:	4886      	ldr	r0, [pc, #536]	@ (8009188 <low_level_init+0x2bc>)
 8008f6e:	f004 fb25 	bl	800d5bc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2206      	movs	r2, #6
 8008f76:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008f7a:	4b7e      	ldr	r3, [pc, #504]	@ (8009174 <low_level_init+0x2a8>)
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	781a      	ldrb	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008f86:	4b7b      	ldr	r3, [pc, #492]	@ (8009174 <low_level_init+0x2a8>)
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	785a      	ldrb	r2, [r3, #1]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008f92:	4b78      	ldr	r3, [pc, #480]	@ (8009174 <low_level_init+0x2a8>)
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	789a      	ldrb	r2, [r3, #2]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008f9e:	4b75      	ldr	r3, [pc, #468]	@ (8009174 <low_level_init+0x2a8>)
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	78da      	ldrb	r2, [r3, #3]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008faa:	4b72      	ldr	r3, [pc, #456]	@ (8009174 <low_level_init+0x2a8>)
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	791a      	ldrb	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8009174 <low_level_init+0x2a8>)
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	795a      	ldrb	r2, [r3, #5]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8008fc8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008fd0:	f043 030a 	orr.w	r3, r3, #10
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8008fe4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8008fe8:	2101      	movs	r1, #1
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fdc2 	bl	8009b74 <osSemaphoreCreate>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	4a66      	ldr	r2, [pc, #408]	@ (800918c <low_level_init+0x2c0>)
 8008ff4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8008ffe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009002:	2101      	movs	r1, #1
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fdb5 	bl	8009b74 <osSemaphoreCreate>
 800900a:	4603      	mov	r3, r0
 800900c:	4a60      	ldr	r2, [pc, #384]	@ (8009190 <low_level_init+0x2c4>)
 800900e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8009010:	4b5e      	ldr	r3, [pc, #376]	@ (800918c <low_level_init+0x2c0>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2100      	movs	r1, #0
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fdde 	bl	8009bd8 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800901c:	4b5c      	ldr	r3, [pc, #368]	@ (8009190 <low_level_init+0x2c4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f000 fdd8 	bl	8009bd8 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009028:	4b5a      	ldr	r3, [pc, #360]	@ (8009194 <low_level_init+0x2c8>)
 800902a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800902e:	461d      	mov	r5, r3
 8009030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009038:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800903c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fc8d 	bl	8009962 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009048:	4953      	ldr	r1, [pc, #332]	@ (8009198 <low_level_init+0x2cc>)
 800904a:	4854      	ldr	r0, [pc, #336]	@ (800919c <low_level_init+0x2d0>)
 800904c:	f7f9 f907 	bl	800225e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009050:	4852      	ldr	r0, [pc, #328]	@ (800919c <low_level_init+0x2d0>)
 8009052:	f7f9 f936 	bl	80022c2 <LAN8742_Init>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d006      	beq.n	800906a <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f004 fe87 	bl	800dd70 <netif_set_link_down>
    netif_set_down(netif);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f004 fe1e 	bl	800dca4 <netif_set_down>
 8009068:	e081      	b.n	800916e <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800906a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800906e:	2b00      	cmp	r3, #0
 8009070:	d165      	bne.n	800913e <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009072:	484a      	ldr	r0, [pc, #296]	@ (800919c <low_level_init+0x2d0>)
 8009074:	f7f9 f972 	bl	800235c <LAN8742_GetLinkState>
 8009078:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800907c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009080:	2b01      	cmp	r3, #1
 8009082:	dc06      	bgt.n	8009092 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f004 fe73 	bl	800dd70 <netif_set_link_down>
      netif_set_down(netif);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f004 fe0a 	bl	800dca4 <netif_set_down>
 8009090:	e057      	b.n	8009142 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 8009092:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009096:	3b02      	subs	r3, #2
 8009098:	2b03      	cmp	r3, #3
 800909a:	d82b      	bhi.n	80090f4 <low_level_init+0x228>
 800909c:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <low_level_init+0x1d8>)
 800909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a2:	bf00      	nop
 80090a4:	080090b5 	.word	0x080090b5
 80090a8:	080090c7 	.word	0x080090c7
 80090ac:	080090d7 	.word	0x080090d7
 80090b0:	080090e7 	.word	0x080090e7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80090b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80090bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80090c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80090c4:	e01f      	b.n	8009106 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80090cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80090d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80090d4:	e017      	b.n	8009106 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80090d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80090de:	2300      	movs	r3, #0
 80090e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80090e4:	e00f      	b.n	8009106 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80090f2:	e008      	b.n	8009106 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80090f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80090fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009100:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8009104:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009106:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800910a:	4619      	mov	r1, r3
 800910c:	4819      	ldr	r0, [pc, #100]	@ (8009174 <low_level_init+0x2a8>)
 800910e:	f7fa fee7 	bl	8003ee0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009116:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8009118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800911c:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800911e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009122:	4619      	mov	r1, r3
 8009124:	4813      	ldr	r0, [pc, #76]	@ (8009174 <low_level_init+0x2a8>)
 8009126:	f7fa ffd2 	bl	80040ce <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800912a:	4812      	ldr	r0, [pc, #72]	@ (8009174 <low_level_init+0x2a8>)
 800912c:	f7fa fa8a 	bl	8003644 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f004 fd4b 	bl	800dbcc <netif_set_up>
    netif_set_link_up(netif);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f004 fde6 	bl	800dd08 <netif_set_link_up>
 800913c:	e001      	b.n	8009142 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 800913e:	f7f8 f8f9 	bl	8001334 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8009142:	f7f9 f9e3 	bl	800250c <HAL_GetREVID>
 8009146:	4603      	mov	r3, r0
 8009148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800914c:	d10f      	bne.n	800916e <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800914e:	4b14      	ldr	r3, [pc, #80]	@ (80091a0 <low_level_init+0x2d4>)
 8009150:	f107 040c 	add.w	r4, r7, #12
 8009154:	461d      	mov	r5, r3
 8009156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800915a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800915e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8009162:	f107 030c 	add.w	r3, r7, #12
 8009166:	2100      	movs	r1, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fbfa 	bl	8009962 <osThreadCreate>
  }
}
 800916e:	37d0      	adds	r7, #208	@ 0xd0
 8009170:	46bd      	mov	sp, r7
 8009172:	bdb0      	pop	{r4, r5, r7, pc}
 8009174:	2000578c 	.word	0x2000578c
 8009178:	40028000 	.word	0x40028000
 800917c:	2000012c 	.word	0x2000012c
 8009180:	2000008c 	.word	0x2000008c
 8009184:	2000583c 	.word	0x2000583c
 8009188:	0801aa2c 	.word	0x0801aa2c
 800918c:	20005784 	.word	0x20005784
 8009190:	20005788 	.word	0x20005788
 8009194:	08017ee0 	.word	0x08017ee0
 8009198:	2000000c 	.word	0x2000000c
 800919c:	20005874 	.word	0x20005874
 80091a0:	08017f0c 	.word	0x08017f0c

080091a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b092      	sub	sp, #72	@ 0x48
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	2230      	movs	r2, #48	@ 0x30
 80091c2:	2100      	movs	r1, #0
 80091c4:	4618      	mov	r0, r3
 80091c6:	f00d ff0b 	bl	8016fe0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80091ca:	f107 030c 	add.w	r3, r7, #12
 80091ce:	2230      	movs	r2, #48	@ 0x30
 80091d0:	2100      	movs	r1, #0
 80091d2:	4618      	mov	r0, r3
 80091d4:	f00d ff04 	bl	8016fe0 <memset>

  for(q = p; q != NULL; q = q->next)
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	643b      	str	r3, [r7, #64]	@ 0x40
 80091dc:	e045      	b.n	800926a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80091de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d902      	bls.n	80091ea <low_level_output+0x46>
      return ERR_IF;
 80091e4:	f06f 030b 	mvn.w	r3, #11
 80091e8:	e07f      	b.n	80092ea <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80091ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091ec:	6859      	ldr	r1, [r3, #4]
 80091ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091f0:	4613      	mov	r3, r2
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	3348      	adds	r3, #72	@ 0x48
 80091fa:	443b      	add	r3, r7
 80091fc:	3b3c      	subs	r3, #60	@ 0x3c
 80091fe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009202:	895b      	ldrh	r3, [r3, #10]
 8009204:	4619      	mov	r1, r3
 8009206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	3348      	adds	r3, #72	@ 0x48
 8009212:	443b      	add	r3, r7
 8009214:	3b38      	subs	r3, #56	@ 0x38
 8009216:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800921a:	2b00      	cmp	r3, #0
 800921c:	d011      	beq.n	8009242 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800921e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009220:	1e5a      	subs	r2, r3, #1
 8009222:	f107 000c 	add.w	r0, r7, #12
 8009226:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009228:	460b      	mov	r3, r1
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	440b      	add	r3, r1
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	18c1      	adds	r1, r0, r3
 8009232:	4613      	mov	r3, r2
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	3348      	adds	r3, #72	@ 0x48
 800923c:	443b      	add	r3, r7
 800923e:	3b34      	subs	r3, #52	@ 0x34
 8009240:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800924a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800924c:	4613      	mov	r3, r2
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	3348      	adds	r3, #72	@ 0x48
 8009256:	443b      	add	r3, r7
 8009258:	3b34      	subs	r3, #52	@ 0x34
 800925a:	2200      	movs	r2, #0
 800925c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800925e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009260:	3301      	adds	r3, #1
 8009262:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	643b      	str	r3, [r7, #64]	@ 0x40
 800926a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1b6      	bne.n	80091de <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	891b      	ldrh	r3, [r3, #8]
 8009274:	461a      	mov	r2, r3
 8009276:	4b1f      	ldr	r3, [pc, #124]	@ (80092f4 <low_level_output+0x150>)
 8009278:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800927a:	4a1e      	ldr	r2, [pc, #120]	@ (80092f4 <low_level_output+0x150>)
 800927c:	f107 030c 	add.w	r3, r7, #12
 8009280:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009282:	4a1c      	ldr	r2, [pc, #112]	@ (80092f4 <low_level_output+0x150>)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8009288:	6838      	ldr	r0, [r7, #0]
 800928a:	f005 f9f5 	bl	800e678 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800928e:	4919      	ldr	r1, [pc, #100]	@ (80092f4 <low_level_output+0x150>)
 8009290:	4819      	ldr	r0, [pc, #100]	@ (80092f8 <low_level_output+0x154>)
 8009292:	f7fa fac7 	bl	8003824 <HAL_ETH_Transmit_IT>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d103      	bne.n	80092a4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80092a2:	e01b      	b.n	80092dc <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 80092a4:	4814      	ldr	r0, [pc, #80]	@ (80092f8 <low_level_output+0x154>)
 80092a6:	f7fa ff6f 	bl	8004188 <HAL_ETH_GetError>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00d      	beq.n	80092d0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 80092b4:	4b11      	ldr	r3, [pc, #68]	@ (80092fc <low_level_output+0x158>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fc8b 	bl	8009bd8 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 80092c2:	480d      	ldr	r0, [pc, #52]	@ (80092f8 <low_level_output+0x154>)
 80092c4:	f7fa fc4e 	bl	8003b64 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80092c8:	23fe      	movs	r3, #254	@ 0xfe
 80092ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80092ce:	e005      	b.n	80092dc <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80092d0:	6838      	ldr	r0, [r7, #0]
 80092d2:	f005 f92b 	bl	800e52c <pbuf_free>
        errval =  ERR_IF;
 80092d6:	23f4      	movs	r3, #244	@ 0xf4
 80092d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80092dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80092e0:	f113 0f02 	cmn.w	r3, #2
 80092e4:	d0d3      	beq.n	800928e <low_level_output+0xea>

  return errval;
 80092e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3748      	adds	r7, #72	@ 0x48
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	2000583c 	.word	0x2000583c
 80092f8:	2000578c 	.word	0x2000578c
 80092fc:	20005788 	.word	0x20005788

08009300 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009308:	2300      	movs	r3, #0
 800930a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800930c:	4b07      	ldr	r3, [pc, #28]	@ (800932c <low_level_input+0x2c>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d105      	bne.n	8009320 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009314:	f107 030c 	add.w	r3, r7, #12
 8009318:	4619      	mov	r1, r3
 800931a:	4805      	ldr	r0, [pc, #20]	@ (8009330 <low_level_input+0x30>)
 800931c:	f7fa fade 	bl	80038dc <HAL_ETH_ReadData>
  }

  return p;
 8009320:	68fb      	ldr	r3, [r7, #12]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20005780 	.word	0x20005780
 8009330:	2000578c 	.word	0x2000578c

08009334 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800933c:	2300      	movs	r3, #0
 800933e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009344:	4b0f      	ldr	r3, [pc, #60]	@ (8009384 <ethernetif_input+0x50>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fc43 	bl	8009bd8 <osSemaphoreWait>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1f5      	bne.n	8009344 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8009358:	68b8      	ldr	r0, [r7, #8]
 800935a:	f7ff ffd1 	bl	8009300 <low_level_input>
 800935e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	4798      	blx	r3
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f005 f8d8 	bl	800e52c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1ea      	bne.n	8009358 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009382:	e7df      	b.n	8009344 <ethernetif_input+0x10>
 8009384:	20005784 	.word	0x20005784

08009388 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d106      	bne.n	80093a4 <ethernetif_init+0x1c>
 8009396:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <ethernetif_init+0x48>)
 8009398:	f240 2217 	movw	r2, #535	@ 0x217
 800939c:	490d      	ldr	r1, [pc, #52]	@ (80093d4 <ethernetif_init+0x4c>)
 800939e:	480e      	ldr	r0, [pc, #56]	@ (80093d8 <ethernetif_init+0x50>)
 80093a0:	f00d fcc6 	bl	8016d30 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2273      	movs	r2, #115	@ 0x73
 80093a8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2274      	movs	r2, #116	@ 0x74
 80093b0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a09      	ldr	r2, [pc, #36]	@ (80093dc <ethernetif_init+0x54>)
 80093b8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a08      	ldr	r2, [pc, #32]	@ (80093e0 <ethernetif_init+0x58>)
 80093be:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff fd83 	bl	8008ecc <low_level_init>

  return ERR_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	08017f28 	.word	0x08017f28
 80093d4:	08017f44 	.word	0x08017f44
 80093d8:	08017f54 	.word	0x08017f54
 80093dc:	08014c11 	.word	0x08014c11
 80093e0:	080091a5 	.word	0x080091a5

080093e4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80093f0:	68f9      	ldr	r1, [r7, #12]
 80093f2:	4809      	ldr	r0, [pc, #36]	@ (8009418 <pbuf_free_custom+0x34>)
 80093f4:	f004 f9d2 	bl	800d79c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80093f8:	4b08      	ldr	r3, [pc, #32]	@ (800941c <pbuf_free_custom+0x38>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d107      	bne.n	8009410 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009400:	4b06      	ldr	r3, [pc, #24]	@ (800941c <pbuf_free_custom+0x38>)
 8009402:	2200      	movs	r2, #0
 8009404:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8009406:	4b06      	ldr	r3, [pc, #24]	@ (8009420 <pbuf_free_custom+0x3c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fc32 	bl	8009c74 <osSemaphoreRelease>
  }
}
 8009410:	bf00      	nop
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	0801aa2c 	.word	0x0801aa2c
 800941c:	20005780 	.word	0x20005780
 8009420:	20005784 	.word	0x20005784

08009424 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009428:	f7f9 f840 	bl	80024ac <HAL_GetTick>
 800942c:	4603      	mov	r3, r0
}
 800942e:	4618      	mov	r0, r3
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08e      	sub	sp, #56	@ 0x38
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800943c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	605a      	str	r2, [r3, #4]
 8009446:	609a      	str	r2, [r3, #8]
 8009448:	60da      	str	r2, [r3, #12]
 800944a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a56      	ldr	r2, [pc, #344]	@ (80095ac <HAL_ETH_MspInit+0x178>)
 8009452:	4293      	cmp	r3, r2
 8009454:	f040 80a6 	bne.w	80095a4 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009458:	4b55      	ldr	r3, [pc, #340]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 800945a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800945c:	4a54      	ldr	r2, [pc, #336]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 800945e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009462:	6313      	str	r3, [r2, #48]	@ 0x30
 8009464:	4b52      	ldr	r3, [pc, #328]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 8009466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800946c:	623b      	str	r3, [r7, #32]
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	4b4f      	ldr	r3, [pc, #316]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 8009472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009474:	4a4e      	ldr	r2, [pc, #312]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 8009476:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800947a:	6313      	str	r3, [r2, #48]	@ 0x30
 800947c:	4b4c      	ldr	r3, [pc, #304]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 800947e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009480:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009484:	61fb      	str	r3, [r7, #28]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	4b49      	ldr	r3, [pc, #292]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 800948a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948c:	4a48      	ldr	r2, [pc, #288]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 800948e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009492:	6313      	str	r3, [r2, #48]	@ 0x30
 8009494:	4b46      	ldr	r3, [pc, #280]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 8009496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094a0:	4b43      	ldr	r3, [pc, #268]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a4:	4a42      	ldr	r2, [pc, #264]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094a6:	f043 0304 	orr.w	r3, r3, #4
 80094aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80094ac:	4b40      	ldr	r3, [pc, #256]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094b8:	4b3d      	ldr	r3, [pc, #244]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094bc:	4a3c      	ldr	r2, [pc, #240]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094be:	f043 0301 	orr.w	r3, r3, #1
 80094c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80094c4:	4b3a      	ldr	r3, [pc, #232]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094d0:	4b37      	ldr	r3, [pc, #220]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d4:	4a36      	ldr	r2, [pc, #216]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094d6:	f043 0302 	orr.w	r3, r3, #2
 80094da:	6313      	str	r3, [r2, #48]	@ 0x30
 80094dc:	4b34      	ldr	r3, [pc, #208]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e0:	f003 0302 	and.w	r3, r3, #2
 80094e4:	60fb      	str	r3, [r7, #12]
 80094e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80094e8:	4b31      	ldr	r3, [pc, #196]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ec:	4a30      	ldr	r2, [pc, #192]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80094f4:	4b2e      	ldr	r3, [pc, #184]	@ (80095b0 <HAL_ETH_MspInit+0x17c>)
 80094f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094fc:	60bb      	str	r3, [r7, #8]
 80094fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009500:	2332      	movs	r3, #50	@ 0x32
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009504:	2302      	movs	r3, #2
 8009506:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009508:	2300      	movs	r3, #0
 800950a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800950c:	2303      	movs	r3, #3
 800950e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009510:	230b      	movs	r3, #11
 8009512:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009518:	4619      	mov	r1, r3
 800951a:	4826      	ldr	r0, [pc, #152]	@ (80095b4 <HAL_ETH_MspInit+0x180>)
 800951c:	f7fb fa6e 	bl	80049fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009520:	2386      	movs	r3, #134	@ 0x86
 8009522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009524:	2302      	movs	r3, #2
 8009526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009528:	2300      	movs	r3, #0
 800952a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800952c:	2303      	movs	r3, #3
 800952e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009530:	230b      	movs	r3, #11
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009538:	4619      	mov	r1, r3
 800953a:	481f      	ldr	r0, [pc, #124]	@ (80095b8 <HAL_ETH_MspInit+0x184>)
 800953c:	f7fb fa5e 	bl	80049fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009540:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009544:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009546:	2302      	movs	r3, #2
 8009548:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800954a:	2300      	movs	r3, #0
 800954c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800954e:	2303      	movs	r3, #3
 8009550:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009552:	230b      	movs	r3, #11
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800955a:	4619      	mov	r1, r3
 800955c:	4817      	ldr	r0, [pc, #92]	@ (80095bc <HAL_ETH_MspInit+0x188>)
 800955e:	f7fb fa4d 	bl	80049fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009562:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009566:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009568:	2302      	movs	r3, #2
 800956a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956c:	2300      	movs	r3, #0
 800956e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009570:	2303      	movs	r3, #3
 8009572:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009574:	230b      	movs	r3, #11
 8009576:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800957c:	4619      	mov	r1, r3
 800957e:	4810      	ldr	r0, [pc, #64]	@ (80095c0 <HAL_ETH_MspInit+0x18c>)
 8009580:	f7fb fa3c 	bl	80049fc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009584:	2200      	movs	r2, #0
 8009586:	2105      	movs	r1, #5
 8009588:	203d      	movs	r0, #61	@ 0x3d
 800958a:	f7f9 fb1b 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800958e:	203d      	movs	r0, #61	@ 0x3d
 8009590:	f7f9 fb34 	bl	8002bfc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8009594:	2200      	movs	r2, #0
 8009596:	2105      	movs	r1, #5
 8009598:	203e      	movs	r0, #62	@ 0x3e
 800959a:	f7f9 fb13 	bl	8002bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800959e:	203e      	movs	r0, #62	@ 0x3e
 80095a0:	f7f9 fb2c 	bl	8002bfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80095a4:	bf00      	nop
 80095a6:	3738      	adds	r7, #56	@ 0x38
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	40028000 	.word	0x40028000
 80095b0:	40023800 	.word	0x40023800
 80095b4:	40020800 	.word	0x40020800
 80095b8:	40020000 	.word	0x40020000
 80095bc:	40020400 	.word	0x40020400
 80095c0:	40021800 	.word	0x40021800

080095c4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80095c8:	4802      	ldr	r0, [pc, #8]	@ (80095d4 <ETH_PHY_IO_Init+0x10>)
 80095ca:	f7fa fd9b 	bl	8004104 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	2000578c 	.word	0x2000578c

080095d8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80095d8:	b480      	push	{r7}
 80095da:	af00      	add	r7, sp, #0
  return 0;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	68f9      	ldr	r1, [r7, #12]
 80095fa:	4807      	ldr	r0, [pc, #28]	@ (8009618 <ETH_PHY_IO_ReadReg+0x30>)
 80095fc:	f7fa fbdc 	bl	8003db8 <HAL_ETH_ReadPHYRegister>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009606:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800960a:	e000      	b.n	800960e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	2000578c 	.word	0x2000578c

0800961c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	68f9      	ldr	r1, [r7, #12]
 800962e:	4807      	ldr	r0, [pc, #28]	@ (800964c <ETH_PHY_IO_WriteReg+0x30>)
 8009630:	f7fa fc0d 	bl	8003e4e <HAL_ETH_WritePHYRegister>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800963a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800963e:	e000      	b.n	8009642 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	2000578c 	.word	0x2000578c

08009650 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009654:	f7f8 ff2a 	bl	80024ac <HAL_GetTick>
 8009658:	4603      	mov	r3, r0
}
 800965a:	4618      	mov	r0, r3
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b0a0      	sub	sp, #128	@ 0x80
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009668:	f107 0308 	add.w	r3, r7, #8
 800966c:	2264      	movs	r2, #100	@ 0x64
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f00d fcb5 	bl	8016fe0 <memset>
  int32_t PHYLinkState = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800967e:	2300      	movs	r3, #0
 8009680:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009682:	2300      	movs	r3, #0
 8009684:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800968a:	483a      	ldr	r0, [pc, #232]	@ (8009774 <ethernet_link_thread+0x114>)
 800968c:	f7f8 fe66 	bl	800235c <LAN8742_GetLinkState>
 8009690:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009694:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009698:	089b      	lsrs	r3, r3, #2
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00c      	beq.n	80096be <ethernet_link_thread+0x5e>
 80096a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	dc09      	bgt.n	80096be <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80096aa:	4833      	ldr	r0, [pc, #204]	@ (8009778 <ethernet_link_thread+0x118>)
 80096ac:	f7fa f83a 	bl	8003724 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80096b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096b2:	f004 faf7 	bl	800dca4 <netif_set_down>
    netif_set_link_down(netif);
 80096b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80096b8:	f004 fb5a 	bl	800dd70 <netif_set_link_down>
 80096bc:	e055      	b.n	800976a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80096be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d14e      	bne.n	800976a <ethernet_link_thread+0x10a>
 80096cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	dd4b      	ble.n	800976a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80096d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096d4:	3b02      	subs	r3, #2
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d82a      	bhi.n	8009730 <ethernet_link_thread+0xd0>
 80096da:	a201      	add	r2, pc, #4	@ (adr r2, 80096e0 <ethernet_link_thread+0x80>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	080096f1 	.word	0x080096f1
 80096e4:	08009703 	.word	0x08009703
 80096e8:	08009713 	.word	0x08009713
 80096ec:	08009723 	.word	0x08009723
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80096f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80096f4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80096f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80096fa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80096fc:	2301      	movs	r3, #1
 80096fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009700:	e017      	b.n	8009732 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009702:	2300      	movs	r3, #0
 8009704:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009706:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800970a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800970c:	2301      	movs	r3, #1
 800970e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009710:	e00f      	b.n	8009732 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009712:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009716:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009718:	2300      	movs	r3, #0
 800971a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800971c:	2301      	movs	r3, #1
 800971e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009720:	e007      	b.n	8009732 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009722:	2300      	movs	r3, #0
 8009724:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009726:	2300      	movs	r3, #0
 8009728:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800972a:	2301      	movs	r3, #1
 800972c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800972e:	e000      	b.n	8009732 <ethernet_link_thread+0xd2>
    default:
      break;
 8009730:	bf00      	nop
    }

    if(linkchanged)
 8009732:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d018      	beq.n	800976a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009738:	f107 0308 	add.w	r3, r7, #8
 800973c:	4619      	mov	r1, r3
 800973e:	480e      	ldr	r0, [pc, #56]	@ (8009778 <ethernet_link_thread+0x118>)
 8009740:	f7fa fbce 	bl	8003ee0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009746:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800974a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800974c:	f107 0308 	add.w	r3, r7, #8
 8009750:	4619      	mov	r1, r3
 8009752:	4809      	ldr	r0, [pc, #36]	@ (8009778 <ethernet_link_thread+0x118>)
 8009754:	f7fa fcbb 	bl	80040ce <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009758:	4807      	ldr	r0, [pc, #28]	@ (8009778 <ethernet_link_thread+0x118>)
 800975a:	f7f9 ff73 	bl	8003644 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800975e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009760:	f004 fa34 	bl	800dbcc <netif_set_up>
      netif_set_link_up(netif);
 8009764:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009766:	f004 facf 	bl	800dd08 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800976a:	2064      	movs	r0, #100	@ 0x64
 800976c:	f000 f951 	bl	8009a12 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009770:	e78b      	b.n	800968a <ethernet_link_thread+0x2a>
 8009772:	bf00      	nop
 8009774:	20005874 	.word	0x20005874
 8009778:	2000578c 	.word	0x2000578c

0800977c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af02      	add	r7, sp, #8
 8009782:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009784:	4812      	ldr	r0, [pc, #72]	@ (80097d0 <HAL_ETH_RxAllocateCallback+0x54>)
 8009786:	f003 ff95 	bl	800d6b4 <memp_malloc_pool>
 800978a:	60f8      	str	r0, [r7, #12]
  if (p)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d014      	beq.n	80097bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f103 0220 	add.w	r2, r3, #32
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a0d      	ldr	r2, [pc, #52]	@ (80097d4 <HAL_ETH_RxAllocateCallback+0x58>)
 80097a0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80097aa:	9201      	str	r2, [sp, #4]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2241      	movs	r2, #65	@ 0x41
 80097b2:	2100      	movs	r1, #0
 80097b4:	2000      	movs	r0, #0
 80097b6:	f004 fcff 	bl	800e1b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80097ba:	e005      	b.n	80097c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80097bc:	4b06      	ldr	r3, [pc, #24]	@ (80097d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80097be:	2201      	movs	r2, #1
 80097c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	601a      	str	r2, [r3, #0]
}
 80097c8:	bf00      	nop
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	0801aa2c 	.word	0x0801aa2c
 80097d4:	080093e5 	.word	0x080093e5
 80097d8:	20005780 	.word	0x20005780

080097dc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3b20      	subs	r3, #32
 80097fa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	2200      	movs	r2, #0
 8009806:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	887a      	ldrh	r2, [r7, #2]
 800980c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d103      	bne.n	800981e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e003      	b.n	8009826 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	61fb      	str	r3, [r7, #28]
 8009832:	e009      	b.n	8009848 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	891a      	ldrh	r2, [r3, #8]
 8009838:	887b      	ldrh	r3, [r7, #2]
 800983a:	4413      	add	r3, r2
 800983c:	b29a      	uxth	r2, r3
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	61fb      	str	r3, [r7, #28]
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1f2      	bne.n	8009834 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800984e:	887b      	ldrh	r3, [r7, #2]
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff fad6 	bl	8008e04 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009858:	bf00      	nop
 800985a:	3720      	adds	r7, #32
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f004 fe5f 	bl	800e52c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800986e:	bf00      	nop
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8009880:	4b15      	ldr	r3, [pc, #84]	@ (80098d8 <RMII_Thread+0x60>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 800988c:	2000      	movs	r0, #0
 800988e:	f000 f8b4 	bl	80099fa <osThreadTerminate>
 8009892:	e7f5      	b.n	8009880 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8009894:	4b10      	ldr	r3, [pc, #64]	@ (80098d8 <RMII_Thread+0x60>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800989c:	2b0a      	cmp	r3, #10
 800989e:	d916      	bls.n	80098ce <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80098a0:	4b0e      	ldr	r3, [pc, #56]	@ (80098dc <RMII_Thread+0x64>)
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4a0d      	ldr	r2, [pc, #52]	@ (80098dc <RMII_Thread+0x64>)
 80098a6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80098aa:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80098ac:	4b0b      	ldr	r3, [pc, #44]	@ (80098dc <RMII_Thread+0x64>)
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	4a0a      	ldr	r2, [pc, #40]	@ (80098dc <RMII_Thread+0x64>)
 80098b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80098b6:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 80098b8:	4b07      	ldr	r3, [pc, #28]	@ (80098d8 <RMII_Thread+0x60>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80098c0:	4b05      	ldr	r3, [pc, #20]	@ (80098d8 <RMII_Thread+0x60>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 0201 	orr.w	r2, r2, #1
 80098c8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80098cc:	e7d8      	b.n	8009880 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80098ce:	20c8      	movs	r0, #200	@ 0xc8
 80098d0:	f000 f89f 	bl	8009a12 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 80098d4:	e7d4      	b.n	8009880 <RMII_Thread+0x8>
 80098d6:	bf00      	nop
 80098d8:	2000578c 	.word	0x2000578c
 80098dc:	40013800 	.word	0x40013800

080098e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80098ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098f2:	2b84      	cmp	r3, #132	@ 0x84
 80098f4:	d005      	beq.n	8009902 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80098f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4413      	add	r3, r2
 80098fe:	3303      	adds	r3, #3
 8009900:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009902:	68fb      	ldr	r3, [r7, #12]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009916:	f3ef 8305 	mrs	r3, IPSR
 800991a:	607b      	str	r3, [r7, #4]
  return(result);
 800991c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800991e:	2b00      	cmp	r3, #0
 8009920:	bf14      	ite	ne
 8009922:	2301      	movne	r3, #1
 8009924:	2300      	moveq	r3, #0
 8009926:	b2db      	uxtb	r3, r3
}
 8009928:	4618      	mov	r0, r3
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009938:	f001 fd84 	bl	800b444 <vTaskStartScheduler>
  
  return osOK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	bd80      	pop	{r7, pc}

08009942 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009946:	f7ff ffe3 	bl	8009910 <inHandlerMode>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d003      	beq.n	8009958 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009950:	f001 fea4 	bl	800b69c <xTaskGetTickCountFromISR>
 8009954:	4603      	mov	r3, r0
 8009956:	e002      	b.n	800995e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009958:	f001 fe90 	bl	800b67c <xTaskGetTickCount>
 800995c:	4603      	mov	r3, r0
  }
}
 800995e:	4618      	mov	r0, r3
 8009960:	bd80      	pop	{r7, pc}

08009962 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009964:	b089      	sub	sp, #36	@ 0x24
 8009966:	af04      	add	r7, sp, #16
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d020      	beq.n	80099b6 <osThreadCreate+0x54>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01c      	beq.n	80099b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685c      	ldr	r4, [r3, #4]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691e      	ldr	r6, [r3, #16]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff ffa6 	bl	80098e0 <makeFreeRtosPriority>
 8009994:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800999e:	9202      	str	r2, [sp, #8]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	9100      	str	r1, [sp, #0]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	4632      	mov	r2, r6
 80099a8:	4629      	mov	r1, r5
 80099aa:	4620      	mov	r0, r4
 80099ac:	f001 fac0 	bl	800af30 <xTaskCreateStatic>
 80099b0:	4603      	mov	r3, r0
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	e01c      	b.n	80099f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685c      	ldr	r4, [r3, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099c2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff ff88 	bl	80098e0 <makeFreeRtosPriority>
 80099d0:	4602      	mov	r2, r0
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	9200      	str	r2, [sp, #0]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	4632      	mov	r2, r6
 80099de:	4629      	mov	r1, r5
 80099e0:	4620      	mov	r0, r4
 80099e2:	f001 fb0b 	bl	800affc <xTaskCreate>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d001      	beq.n	80099f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	e000      	b.n	80099f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80099f0:	68fb      	ldr	r3, [r7, #12]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099fa <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 fc54 	bl	800b2b0 <vTaskDelete>
  return osOK;
 8009a08:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <osDelay+0x16>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	e000      	b.n	8009a2a <osDelay+0x18>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fcd2 	bl	800b3d4 <vTaskDelay>
  
  return osOK;
 8009a30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d007      	beq.n	8009a5a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	2001      	movs	r0, #1
 8009a52:	f000 fc5c 	bl	800a30e <xQueueCreateMutexStatic>
 8009a56:	4603      	mov	r3, r0
 8009a58:	e003      	b.n	8009a62 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	f000 fc3f 	bl	800a2de <xQueueCreateMutex>
 8009a60:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009a76:	2300      	movs	r3, #0
 8009a78:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <osMutexWait+0x18>
    return osErrorParameter;
 8009a80:	2380      	movs	r3, #128	@ 0x80
 8009a82:	e03a      	b.n	8009afa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a8e:	d103      	bne.n	8009a98 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009a90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e009      	b.n	8009aac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d006      	beq.n	8009aac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <osMutexWait+0x40>
      ticks = 1;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009aac:	f7ff ff30 	bl	8009910 <inHandlerMode>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d017      	beq.n	8009ae6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	461a      	mov	r2, r3
 8009abc:	2100      	movs	r1, #0
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f001 f886 	bl	800abd0 <xQueueReceiveFromISR>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d001      	beq.n	8009ace <osMutexWait+0x62>
      return osErrorOS;
 8009aca:	23ff      	movs	r3, #255	@ 0xff
 8009acc:	e015      	b.n	8009afa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d011      	beq.n	8009af8 <osMutexWait+0x8c>
 8009ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8009b04 <osMutexWait+0x98>)
 8009ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	e008      	b.n	8009af8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 ff59 	bl	800a9a0 <xQueueSemaphoreTake>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d001      	beq.n	8009af8 <osMutexWait+0x8c>
    return osErrorOS;
 8009af4:	23ff      	movs	r3, #255	@ 0xff
 8009af6:	e000      	b.n	8009afa <osMutexWait+0x8e>
  }
  
  return osOK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009b18:	f7ff fefa 	bl	8009910 <inHandlerMode>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d016      	beq.n	8009b50 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009b22:	f107 0308 	add.w	r3, r7, #8
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fdb8 	bl	800a69e <xQueueGiveFromISR>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d001      	beq.n	8009b38 <osMutexRelease+0x30>
      return osErrorOS;
 8009b34:	23ff      	movs	r3, #255	@ 0xff
 8009b36:	e017      	b.n	8009b68 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d013      	beq.n	8009b66 <osMutexRelease+0x5e>
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b70 <osMutexRelease+0x68>)
 8009b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	e00a      	b.n	8009b66 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009b50:	2300      	movs	r3, #0
 8009b52:	2200      	movs	r2, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fbf4 	bl	800a344 <xQueueGenericSend>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d001      	beq.n	8009b66 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009b62:	23ff      	movs	r3, #255	@ 0xff
 8009b64:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009b66:	68fb      	ldr	r3, [r7, #12]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	e000ed04 	.word	0xe000ed04

08009b74 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00f      	beq.n	8009ba6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d10a      	bne.n	8009ba2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	2203      	movs	r2, #3
 8009b92:	9200      	str	r2, [sp, #0]
 8009b94:	2200      	movs	r2, #0
 8009b96:	2100      	movs	r1, #0
 8009b98:	2001      	movs	r0, #1
 8009b9a:	f000 fa9d 	bl	800a0d8 <xQueueGenericCreateStatic>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	e016      	b.n	8009bd0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e014      	b.n	8009bd0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d110      	bne.n	8009bce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009bac:	2203      	movs	r2, #3
 8009bae:	2100      	movs	r1, #0
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	f000 fb18 	bl	800a1e6 <xQueueGenericCreate>
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d005      	beq.n	8009bca <osSemaphoreCreate+0x56>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 fbbd 	bl	800a344 <xQueueGenericSend>
      return sema;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	e000      	b.n	8009bd0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009bce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009be2:	2300      	movs	r3, #0
 8009be4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009bec:	2380      	movs	r3, #128	@ 0x80
 8009bee:	e03a      	b.n	8009c66 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bfa:	d103      	bne.n	8009c04 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	e009      	b.n	8009c18 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d006      	beq.n	8009c18 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <osSemaphoreWait+0x40>
      ticks = 1;
 8009c14:	2301      	movs	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009c18:	f7ff fe7a 	bl	8009910 <inHandlerMode>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d017      	beq.n	8009c52 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	461a      	mov	r2, r3
 8009c28:	2100      	movs	r1, #0
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 ffd0 	bl	800abd0 <xQueueReceiveFromISR>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d001      	beq.n	8009c3a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009c36:	23ff      	movs	r3, #255	@ 0xff
 8009c38:	e015      	b.n	8009c66 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d011      	beq.n	8009c64 <osSemaphoreWait+0x8c>
 8009c40:	4b0b      	ldr	r3, [pc, #44]	@ (8009c70 <osSemaphoreWait+0x98>)
 8009c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	e008      	b.n	8009c64 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009c52:	68f9      	ldr	r1, [r7, #12]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fea3 	bl	800a9a0 <xQueueSemaphoreTake>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d001      	beq.n	8009c64 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009c60:	23ff      	movs	r3, #255	@ 0xff
 8009c62:	e000      	b.n	8009c66 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	e000ed04 	.word	0xe000ed04

08009c74 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009c84:	f7ff fe44 	bl	8009910 <inHandlerMode>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d016      	beq.n	8009cbc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009c8e:	f107 0308 	add.w	r3, r7, #8
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fd02 	bl	800a69e <xQueueGiveFromISR>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d001      	beq.n	8009ca4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009ca0:	23ff      	movs	r3, #255	@ 0xff
 8009ca2:	e017      	b.n	8009cd4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d013      	beq.n	8009cd2 <osSemaphoreRelease+0x5e>
 8009caa:	4b0c      	ldr	r3, [pc, #48]	@ (8009cdc <osSemaphoreRelease+0x68>)
 8009cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	e00a      	b.n	8009cd2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fb3e 	bl	800a344 <xQueueGenericSend>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d001      	beq.n	8009cd2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009cce:	23ff      	movs	r3, #255	@ 0xff
 8009cd0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	e000ed04 	.word	0xe000ed04

08009ce0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009ce0:	b590      	push	{r4, r7, lr}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d011      	beq.n	8009d16 <osMessageCreate+0x36>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00d      	beq.n	8009d16 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6859      	ldr	r1, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689a      	ldr	r2, [r3, #8]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	2400      	movs	r4, #0
 8009d0c:	9400      	str	r4, [sp, #0]
 8009d0e:	f000 f9e3 	bl	800a0d8 <xQueueGenericCreateStatic>
 8009d12:	4603      	mov	r3, r0
 8009d14:	e008      	b.n	8009d28 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4619      	mov	r1, r3
 8009d22:	f000 fa60 	bl	800a1e6 <xQueueGenericCreate>
 8009d26:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd90      	pop	{r4, r7, pc}

08009d30 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <osMessagePut+0x1e>
    ticks = 1;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009d4e:	f7ff fddf 	bl	8009910 <inHandlerMode>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d018      	beq.n	8009d8a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009d58:	f107 0210 	add.w	r2, r7, #16
 8009d5c:	f107 0108 	add.w	r1, r7, #8
 8009d60:	2300      	movs	r3, #0
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f000 fbf8 	bl	800a558 <xQueueGenericSendFromISR>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d001      	beq.n	8009d72 <osMessagePut+0x42>
      return osErrorOS;
 8009d6e:	23ff      	movs	r3, #255	@ 0xff
 8009d70:	e018      	b.n	8009da4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d014      	beq.n	8009da2 <osMessagePut+0x72>
 8009d78:	4b0c      	ldr	r3, [pc, #48]	@ (8009dac <osMessagePut+0x7c>)
 8009d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	e00b      	b.n	8009da2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009d8a:	f107 0108 	add.w	r1, r7, #8
 8009d8e:	2300      	movs	r3, #0
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 fad6 	bl	800a344 <xQueueGenericSend>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <osMessagePut+0x72>
      return osErrorOS;
 8009d9e:	23ff      	movs	r3, #255	@ 0xff
 8009da0:	e000      	b.n	8009da4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	e000ed04 	.word	0xe000ed04

08009db0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009db0:	b590      	push	{r4, r7, lr}
 8009db2:	b08b      	sub	sp, #44	@ 0x2c
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10a      	bne.n	8009de0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009dca:	2380      	movs	r3, #128	@ 0x80
 8009dcc:	617b      	str	r3, [r7, #20]
    return event;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	461c      	mov	r4, r3
 8009dd2:	f107 0314 	add.w	r3, r7, #20
 8009dd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dde:	e054      	b.n	8009e8a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dee:	d103      	bne.n	8009df8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009df6:	e009      	b.n	8009e0c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d006      	beq.n	8009e0c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <osMessageGet+0x5c>
      ticks = 1;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009e0c:	f7ff fd80 	bl	8009910 <inHandlerMode>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01c      	beq.n	8009e50 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009e16:	f107 0220 	add.w	r2, r7, #32
 8009e1a:	f107 0314 	add.w	r3, r7, #20
 8009e1e:	3304      	adds	r3, #4
 8009e20:	4619      	mov	r1, r3
 8009e22:	68b8      	ldr	r0, [r7, #8]
 8009e24:	f000 fed4 	bl	800abd0 <xQueueReceiveFromISR>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d102      	bne.n	8009e34 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009e2e:	2310      	movs	r3, #16
 8009e30:	617b      	str	r3, [r7, #20]
 8009e32:	e001      	b.n	8009e38 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01d      	beq.n	8009e7a <osMessageGet+0xca>
 8009e3e:	4b15      	ldr	r3, [pc, #84]	@ (8009e94 <osMessageGet+0xe4>)
 8009e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	e014      	b.n	8009e7a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009e50:	f107 0314 	add.w	r3, r7, #20
 8009e54:	3304      	adds	r3, #4
 8009e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e58:	4619      	mov	r1, r3
 8009e5a:	68b8      	ldr	r0, [r7, #8]
 8009e5c:	f000 fcb8 	bl	800a7d0 <xQueueReceive>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d102      	bne.n	8009e6c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009e66:	2310      	movs	r3, #16
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	e006      	b.n	8009e7a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d101      	bne.n	8009e76 <osMessageGet+0xc6>
 8009e72:	2300      	movs	r3, #0
 8009e74:	e000      	b.n	8009e78 <osMessageGet+0xc8>
 8009e76:	2340      	movs	r3, #64	@ 0x40
 8009e78:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	461c      	mov	r4, r3
 8009e7e:	f107 0314 	add.w	r3, r7, #20
 8009e82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	372c      	adds	r7, #44	@ 0x2c
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd90      	pop	{r4, r7, pc}
 8009e92:	bf00      	nop
 8009e94:	e000ed04 	.word	0xe000ed04

08009e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f103 0208 	add.w	r2, r3, #8
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f103 0208 	add.w	r2, r3, #8
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f103 0208 	add.w	r2, r3, #8
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b085      	sub	sp, #20
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	689a      	ldr	r2, [r3, #8]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	601a      	str	r2, [r3, #0]
}
 8009f2e:	bf00      	nop
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b085      	sub	sp, #20
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f50:	d103      	bne.n	8009f5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	e00c      	b.n	8009f74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	e002      	b.n	8009f68 <vListInsert+0x2e>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	60fb      	str	r3, [r7, #12]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d2f6      	bcs.n	8009f62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	601a      	str	r2, [r3, #0]
}
 8009fa0:	bf00      	nop
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	6892      	ldr	r2, [r2, #8]
 8009fc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	6852      	ldr	r2, [r2, #4]
 8009fcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d103      	bne.n	8009fe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	1e5a      	subs	r2, r3, #1
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10d      	bne.n	800a030 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a018:	b672      	cpsid	i
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	b662      	cpsie	i
 800a028:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a02a:	bf00      	nop
 800a02c:	bf00      	nop
 800a02e:	e7fd      	b.n	800a02c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a030:	f002 f9d4 	bl	800c3dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a03c:	68f9      	ldr	r1, [r7, #12]
 800a03e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a040:	fb01 f303 	mul.w	r3, r1, r3
 800a044:	441a      	add	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a060:	3b01      	subs	r3, #1
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a066:	fb01 f303 	mul.w	r3, r1, r3
 800a06a:	441a      	add	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	22ff      	movs	r2, #255	@ 0xff
 800a074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	22ff      	movs	r2, #255	@ 0xff
 800a07c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d114      	bne.n	800a0b0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d01a      	beq.n	800a0c4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3310      	adds	r3, #16
 800a092:	4618      	mov	r0, r3
 800a094:	f001 fc82 	bl	800b99c <xTaskRemoveFromEventList>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d012      	beq.n	800a0c4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a09e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <xQueueGenericReset+0xd4>)
 800a0a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	e009      	b.n	800a0c4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3310      	adds	r3, #16
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7ff feef 	bl	8009e98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3324      	adds	r3, #36	@ 0x24
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff feea 	bl	8009e98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0c4:	f002 f9c0 	bl	800c448 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0c8:	2301      	movs	r3, #1
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	e000ed04 	.word	0xe000ed04

0800a0d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08e      	sub	sp, #56	@ 0x38
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10d      	bne.n	800a108 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f0:	b672      	cpsid	i
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	b662      	cpsie	i
 800a100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10d      	bne.n	800a12a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	b672      	cpsid	i
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	b662      	cpsie	i
 800a122:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop
 800a128:	e7fd      	b.n	800a126 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <xQueueGenericCreateStatic+0x5e>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <xQueueGenericCreateStatic+0x62>
 800a136:	2301      	movs	r3, #1
 800a138:	e000      	b.n	800a13c <xQueueGenericCreateStatic+0x64>
 800a13a:	2300      	movs	r3, #0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10d      	bne.n	800a15c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a144:	b672      	cpsid	i
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	b662      	cpsie	i
 800a154:	623b      	str	r3, [r7, #32]
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	e7fd      	b.n	800a158 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d102      	bne.n	800a168 <xQueueGenericCreateStatic+0x90>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <xQueueGenericCreateStatic+0x94>
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <xQueueGenericCreateStatic+0x96>
 800a16c:	2300      	movs	r3, #0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10d      	bne.n	800a18e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a176:	b672      	cpsid	i
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	b662      	cpsie	i
 800a186:	61fb      	str	r3, [r7, #28]
}
 800a188:	bf00      	nop
 800a18a:	bf00      	nop
 800a18c:	e7fd      	b.n	800a18a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a18e:	2348      	movs	r3, #72	@ 0x48
 800a190:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b48      	cmp	r3, #72	@ 0x48
 800a196:	d00d      	beq.n	800a1b4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19c:	b672      	cpsid	i
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	b662      	cpsie	i
 800a1ac:	61bb      	str	r3, [r7, #24]
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00d      	beq.n	800a1dc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	68b9      	ldr	r1, [r7, #8]
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 f848 	bl	800a26c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3730      	adds	r7, #48	@ 0x30
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b08a      	sub	sp, #40	@ 0x28
 800a1ea:	af02      	add	r7, sp, #8
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10d      	bne.n	800a216 <xQueueGenericCreate+0x30>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fe:	b672      	cpsid	i
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	b662      	cpsie	i
 800a20e:	613b      	str	r3, [r7, #16]
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	e7fd      	b.n	800a212 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d102      	bne.n	800a222 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	61fb      	str	r3, [r7, #28]
 800a220:	e004      	b.n	800a22c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	fb02 f303 	mul.w	r3, r2, r3
 800a22a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	3348      	adds	r3, #72	@ 0x48
 800a230:	4618      	mov	r0, r3
 800a232:	f002 fa01 	bl	800c638 <pvPortMalloc>
 800a236:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d011      	beq.n	800a262 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	3348      	adds	r3, #72	@ 0x48
 800a246:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a250:	79fa      	ldrb	r2, [r7, #7]
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	4613      	mov	r3, r2
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	68b9      	ldr	r1, [r7, #8]
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 f805 	bl	800a26c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a262:	69bb      	ldr	r3, [r7, #24]
	}
 800a264:	4618      	mov	r0, r3
 800a266:	3720      	adds	r7, #32
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d103      	bne.n	800a288 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	e002      	b.n	800a28e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a29a:	2101      	movs	r1, #1
 800a29c:	69b8      	ldr	r0, [r7, #24]
 800a29e:	f7ff feaf 	bl	800a000 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2a2:	bf00      	nop
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00e      	beq.n	800a2d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f837 	bl	800a344 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b086      	sub	sp, #24
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	6939      	ldr	r1, [r7, #16]
 800a2f6:	6978      	ldr	r0, [r7, #20]
 800a2f8:	f7ff ff75 	bl	800a1e6 <xQueueGenericCreate>
 800a2fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f7ff ffd3 	bl	800a2aa <prvInitialiseMutex>

		return xNewQueue;
 800a304:	68fb      	ldr	r3, [r7, #12]
	}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b088      	sub	sp, #32
 800a312:	af02      	add	r7, sp, #8
 800a314:	4603      	mov	r3, r0
 800a316:	6039      	str	r1, [r7, #0]
 800a318:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a31a:	2301      	movs	r3, #1
 800a31c:	617b      	str	r3, [r7, #20]
 800a31e:	2300      	movs	r3, #0
 800a320:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2200      	movs	r2, #0
 800a32a:	6939      	ldr	r1, [r7, #16]
 800a32c:	6978      	ldr	r0, [r7, #20]
 800a32e:	f7ff fed3 	bl	800a0d8 <xQueueGenericCreateStatic>
 800a332:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f7ff ffb8 	bl	800a2aa <prvInitialiseMutex>

		return xNewQueue;
 800a33a:	68fb      	ldr	r3, [r7, #12]
	}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08e      	sub	sp, #56	@ 0x38
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a352:	2300      	movs	r3, #0
 800a354:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10d      	bne.n	800a37c <xQueueGenericSend+0x38>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a364:	b672      	cpsid	i
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	b662      	cpsie	i
 800a374:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a376:	bf00      	nop
 800a378:	bf00      	nop
 800a37a:	e7fd      	b.n	800a378 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d103      	bne.n	800a38a <xQueueGenericSend+0x46>
 800a382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <xQueueGenericSend+0x4a>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e000      	b.n	800a390 <xQueueGenericSend+0x4c>
 800a38e:	2300      	movs	r3, #0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10d      	bne.n	800a3b0 <xQueueGenericSend+0x6c>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a398:	b672      	cpsid	i
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	b662      	cpsie	i
 800a3a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3aa:	bf00      	nop
 800a3ac:	bf00      	nop
 800a3ae:	e7fd      	b.n	800a3ac <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d103      	bne.n	800a3be <xQueueGenericSend+0x7a>
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <xQueueGenericSend+0x7e>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <xQueueGenericSend+0x80>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10d      	bne.n	800a3e4 <xQueueGenericSend+0xa0>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	b672      	cpsid	i
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	b662      	cpsie	i
 800a3dc:	623b      	str	r3, [r7, #32]
}
 800a3de:	bf00      	nop
 800a3e0:	bf00      	nop
 800a3e2:	e7fd      	b.n	800a3e0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3e4:	f001 fca8 	bl	800bd38 <xTaskGetSchedulerState>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d102      	bne.n	800a3f4 <xQueueGenericSend+0xb0>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <xQueueGenericSend+0xb4>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e000      	b.n	800a3fa <xQueueGenericSend+0xb6>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10d      	bne.n	800a41a <xQueueGenericSend+0xd6>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	b672      	cpsid	i
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	b662      	cpsie	i
 800a412:	61fb      	str	r3, [r7, #28]
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop
 800a418:	e7fd      	b.n	800a416 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a41a:	f001 ffdf 	bl	800c3dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a426:	429a      	cmp	r2, r3
 800a428:	d302      	bcc.n	800a430 <xQueueGenericSend+0xec>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d129      	bne.n	800a484 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a430:	683a      	ldr	r2, [r7, #0]
 800a432:	68b9      	ldr	r1, [r7, #8]
 800a434:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a436:	f000 fc6b 	bl	800ad10 <prvCopyDataToQueue>
 800a43a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	2b00      	cmp	r3, #0
 800a442:	d010      	beq.n	800a466 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	3324      	adds	r3, #36	@ 0x24
 800a448:	4618      	mov	r0, r3
 800a44a:	f001 faa7 	bl	800b99c <xTaskRemoveFromEventList>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d013      	beq.n	800a47c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a454:	4b3f      	ldr	r3, [pc, #252]	@ (800a554 <xQueueGenericSend+0x210>)
 800a456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	e00a      	b.n	800a47c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d007      	beq.n	800a47c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a46c:	4b39      	ldr	r3, [pc, #228]	@ (800a554 <xQueueGenericSend+0x210>)
 800a46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a47c:	f001 ffe4 	bl	800c448 <vPortExitCritical>
				return pdPASS;
 800a480:	2301      	movs	r3, #1
 800a482:	e063      	b.n	800a54c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d103      	bne.n	800a492 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a48a:	f001 ffdd 	bl	800c448 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	e05c      	b.n	800a54c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a498:	f107 0314 	add.w	r3, r7, #20
 800a49c:	4618      	mov	r0, r3
 800a49e:	f001 fae3 	bl	800ba68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4a6:	f001 ffcf 	bl	800c448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4aa:	f001 f839 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ae:	f001 ff95 	bl	800c3dc <vPortEnterCritical>
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4b8:	b25b      	sxtb	r3, r3
 800a4ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4be:	d103      	bne.n	800a4c8 <xQueueGenericSend+0x184>
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4ce:	b25b      	sxtb	r3, r3
 800a4d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4d4:	d103      	bne.n	800a4de <xQueueGenericSend+0x19a>
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4de:	f001 ffb3 	bl	800c448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4e2:	1d3a      	adds	r2, r7, #4
 800a4e4:	f107 0314 	add.w	r3, r7, #20
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f001 fad2 	bl	800ba94 <xTaskCheckForTimeOut>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d124      	bne.n	800a540 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4f8:	f000 fd02 	bl	800af00 <prvIsQueueFull>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d018      	beq.n	800a534 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	3310      	adds	r3, #16
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	4611      	mov	r1, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f001 fa1e 	bl	800b94c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a512:	f000 fc8d 	bl	800ae30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a516:	f001 f811 	bl	800b53c <xTaskResumeAll>
 800a51a:	4603      	mov	r3, r0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f47f af7c 	bne.w	800a41a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800a522:	4b0c      	ldr	r3, [pc, #48]	@ (800a554 <xQueueGenericSend+0x210>)
 800a524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	e772      	b.n	800a41a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a536:	f000 fc7b 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a53a:	f000 ffff 	bl	800b53c <xTaskResumeAll>
 800a53e:	e76c      	b.n	800a41a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a540:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a542:	f000 fc75 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a546:	f000 fff9 	bl	800b53c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a54a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3738      	adds	r7, #56	@ 0x38
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	e000ed04 	.word	0xe000ed04

0800a558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08e      	sub	sp, #56	@ 0x38
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10d      	bne.n	800a58c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a574:	b672      	cpsid	i
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	b662      	cpsie	i
 800a584:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	e7fd      	b.n	800a588 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d103      	bne.n	800a59a <xQueueGenericSendFromISR+0x42>
 800a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <xQueueGenericSendFromISR+0x46>
 800a59a:	2301      	movs	r3, #1
 800a59c:	e000      	b.n	800a5a0 <xQueueGenericSendFromISR+0x48>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10d      	bne.n	800a5c0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a8:	b672      	cpsid	i
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	b662      	cpsie	i
 800a5b8:	623b      	str	r3, [r7, #32]
}
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	e7fd      	b.n	800a5bc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d103      	bne.n	800a5ce <xQueueGenericSendFromISR+0x76>
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <xQueueGenericSendFromISR+0x7a>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e000      	b.n	800a5d4 <xQueueGenericSendFromISR+0x7c>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10d      	bne.n	800a5f4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	b672      	cpsid	i
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	b662      	cpsie	i
 800a5ec:	61fb      	str	r3, [r7, #28]
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	e7fd      	b.n	800a5f0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5f4:	f001 ffda 	bl	800c5ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5f8:	f3ef 8211 	mrs	r2, BASEPRI
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	b672      	cpsid	i
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	b662      	cpsie	i
 800a610:	61ba      	str	r2, [r7, #24]
 800a612:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a614:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a616:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a620:	429a      	cmp	r2, r3
 800a622:	d302      	bcc.n	800a62a <xQueueGenericSendFromISR+0xd2>
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2b02      	cmp	r3, #2
 800a628:	d12c      	bne.n	800a684 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a63a:	f000 fb69 	bl	800ad10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a63e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a646:	d112      	bne.n	800a66e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d016      	beq.n	800a67e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a652:	3324      	adds	r3, #36	@ 0x24
 800a654:	4618      	mov	r0, r3
 800a656:	f001 f9a1 	bl	800b99c <xTaskRemoveFromEventList>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00e      	beq.n	800a67e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00b      	beq.n	800a67e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	e007      	b.n	800a67e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a66e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a672:	3301      	adds	r3, #1
 800a674:	b2db      	uxtb	r3, r3
 800a676:	b25a      	sxtb	r2, r3
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a67e:	2301      	movs	r3, #1
 800a680:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a682:	e001      	b.n	800a688 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a684:	2300      	movs	r3, #0
 800a686:	637b      	str	r3, [r7, #52]	@ 0x34
 800a688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a68a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a692:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a696:	4618      	mov	r0, r3
 800a698:	3738      	adds	r7, #56	@ 0x38
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b08e      	sub	sp, #56	@ 0x38
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10d      	bne.n	800a6ce <xQueueGiveFromISR+0x30>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b6:	b672      	cpsid	i
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	b662      	cpsie	i
 800a6c6:	623b      	str	r3, [r7, #32]
}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	e7fd      	b.n	800a6ca <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00d      	beq.n	800a6f2 <xQueueGiveFromISR+0x54>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	b672      	cpsid	i
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	b662      	cpsie	i
 800a6ea:	61fb      	str	r3, [r7, #28]
}
 800a6ec:	bf00      	nop
 800a6ee:	bf00      	nop
 800a6f0:	e7fd      	b.n	800a6ee <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d103      	bne.n	800a702 <xQueueGiveFromISR+0x64>
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <xQueueGiveFromISR+0x68>
 800a702:	2301      	movs	r3, #1
 800a704:	e000      	b.n	800a708 <xQueueGiveFromISR+0x6a>
 800a706:	2300      	movs	r3, #0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10d      	bne.n	800a728 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a710:	b672      	cpsid	i
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	b662      	cpsie	i
 800a720:	61bb      	str	r3, [r7, #24]
}
 800a722:	bf00      	nop
 800a724:	bf00      	nop
 800a726:	e7fd      	b.n	800a724 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a728:	f001 ff40 	bl	800c5ac <vPortValidateInterruptPriority>
	__asm volatile
 800a72c:	f3ef 8211 	mrs	r2, BASEPRI
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	617a      	str	r2, [r7, #20]
 800a746:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a748:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a74a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a750:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a758:	429a      	cmp	r2, r3
 800a75a:	d22b      	bcs.n	800a7b4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a76e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a772:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a776:	d112      	bne.n	800a79e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d016      	beq.n	800a7ae <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	3324      	adds	r3, #36	@ 0x24
 800a784:	4618      	mov	r0, r3
 800a786:	f001 f909 	bl	800b99c <xTaskRemoveFromEventList>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00e      	beq.n	800a7ae <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00b      	beq.n	800a7ae <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2201      	movs	r2, #1
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	e007      	b.n	800a7ae <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a79e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	b25a      	sxtb	r2, r3
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b2:	e001      	b.n	800a7b8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f383 8811 	msr	BASEPRI, r3
}
 800a7c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3738      	adds	r7, #56	@ 0x38
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08c      	sub	sp, #48	@ 0x30
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10d      	bne.n	800a806 <xQueueReceive+0x36>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ee:	b672      	cpsid	i
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	b662      	cpsie	i
 800a7fe:	623b      	str	r3, [r7, #32]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <xQueueReceive+0x44>
 800a80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <xQueueReceive+0x48>
 800a814:	2301      	movs	r3, #1
 800a816:	e000      	b.n	800a81a <xQueueReceive+0x4a>
 800a818:	2300      	movs	r3, #0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10d      	bne.n	800a83a <xQueueReceive+0x6a>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a822:	b672      	cpsid	i
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	b662      	cpsie	i
 800a832:	61fb      	str	r3, [r7, #28]
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	e7fd      	b.n	800a836 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a83a:	f001 fa7d 	bl	800bd38 <xTaskGetSchedulerState>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <xQueueReceive+0x7a>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <xQueueReceive+0x7e>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <xQueueReceive+0x80>
 800a84e:	2300      	movs	r3, #0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10d      	bne.n	800a870 <xQueueReceive+0xa0>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	b672      	cpsid	i
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	b662      	cpsie	i
 800a868:	61bb      	str	r3, [r7, #24]
}
 800a86a:	bf00      	nop
 800a86c:	bf00      	nop
 800a86e:	e7fd      	b.n	800a86c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a870:	f001 fdb4 	bl	800c3dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a878:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01f      	beq.n	800a8c0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a880:	68b9      	ldr	r1, [r7, #8]
 800a882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a884:	f000 faae 	bl	800ade4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	1e5a      	subs	r2, r3, #1
 800a88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00f      	beq.n	800a8b8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89a:	3310      	adds	r3, #16
 800a89c:	4618      	mov	r0, r3
 800a89e:	f001 f87d 	bl	800b99c <xTaskRemoveFromEventList>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d007      	beq.n	800a8b8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8a8:	4b3c      	ldr	r3, [pc, #240]	@ (800a99c <xQueueReceive+0x1cc>)
 800a8aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8b8:	f001 fdc6 	bl	800c448 <vPortExitCritical>
				return pdPASS;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e069      	b.n	800a994 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d103      	bne.n	800a8ce <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8c6:	f001 fdbf 	bl	800c448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e062      	b.n	800a994 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d106      	bne.n	800a8e2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8d4:	f107 0310 	add.w	r3, r7, #16
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 f8c5 	bl	800ba68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8e2:	f001 fdb1 	bl	800c448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8e6:	f000 fe1b 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8ea:	f001 fd77 	bl	800c3dc <vPortEnterCritical>
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8f4:	b25b      	sxtb	r3, r3
 800a8f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8fa:	d103      	bne.n	800a904 <xQueueReceive+0x134>
 800a8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a906:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a90a:	b25b      	sxtb	r3, r3
 800a90c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a910:	d103      	bne.n	800a91a <xQueueReceive+0x14a>
 800a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a91a:	f001 fd95 	bl	800c448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a91e:	1d3a      	adds	r2, r7, #4
 800a920:	f107 0310 	add.w	r3, r7, #16
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f001 f8b4 	bl	800ba94 <xTaskCheckForTimeOut>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d123      	bne.n	800a97a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a934:	f000 face 	bl	800aed4 <prvIsQueueEmpty>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d017      	beq.n	800a96e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a940:	3324      	adds	r3, #36	@ 0x24
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	4611      	mov	r1, r2
 800a946:	4618      	mov	r0, r3
 800a948:	f001 f800 	bl	800b94c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a94c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a94e:	f000 fa6f 	bl	800ae30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a952:	f000 fdf3 	bl	800b53c <xTaskResumeAll>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d189      	bne.n	800a870 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800a95c:	4b0f      	ldr	r3, [pc, #60]	@ (800a99c <xQueueReceive+0x1cc>)
 800a95e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	e780      	b.n	800a870 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a96e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a970:	f000 fa5e 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a974:	f000 fde2 	bl	800b53c <xTaskResumeAll>
 800a978:	e77a      	b.n	800a870 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a97a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a97c:	f000 fa58 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a980:	f000 fddc 	bl	800b53c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a986:	f000 faa5 	bl	800aed4 <prvIsQueueEmpty>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f43f af6f 	beq.w	800a870 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a992:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a994:	4618      	mov	r0, r3
 800a996:	3730      	adds	r7, #48	@ 0x30
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08e      	sub	sp, #56	@ 0x38
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10d      	bne.n	800a9d8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c0:	b672      	cpsid	i
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	b662      	cpsie	i
 800a9d0:	623b      	str	r3, [r7, #32]
}
 800a9d2:	bf00      	nop
 800a9d4:	bf00      	nop
 800a9d6:	e7fd      	b.n	800a9d4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00d      	beq.n	800a9fc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	b672      	cpsid	i
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	b662      	cpsie	i
 800a9f4:	61fb      	str	r3, [r7, #28]
}
 800a9f6:	bf00      	nop
 800a9f8:	bf00      	nop
 800a9fa:	e7fd      	b.n	800a9f8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9fc:	f001 f99c 	bl	800bd38 <xTaskGetSchedulerState>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d102      	bne.n	800aa0c <xQueueSemaphoreTake+0x6c>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <xQueueSemaphoreTake+0x70>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e000      	b.n	800aa12 <xQueueSemaphoreTake+0x72>
 800aa10:	2300      	movs	r3, #0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10d      	bne.n	800aa32 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1a:	b672      	cpsid	i
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	b662      	cpsie	i
 800aa2a:	61bb      	str	r3, [r7, #24]
}
 800aa2c:	bf00      	nop
 800aa2e:	bf00      	nop
 800aa30:	e7fd      	b.n	800aa2e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa32:	f001 fcd3 	bl	800c3dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d024      	beq.n	800aa8c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa44:	1e5a      	subs	r2, r3, #1
 800aa46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa48:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d104      	bne.n	800aa5c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aa52:	f001 fb3b 	bl	800c0cc <pvTaskIncrementMutexHeldCount>
 800aa56:	4602      	mov	r2, r0
 800aa58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00f      	beq.n	800aa84 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa66:	3310      	adds	r3, #16
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 ff97 	bl	800b99c <xTaskRemoveFromEventList>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d007      	beq.n	800aa84 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa74:	4b55      	ldr	r3, [pc, #340]	@ (800abcc <xQueueSemaphoreTake+0x22c>)
 800aa76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa84:	f001 fce0 	bl	800c448 <vPortExitCritical>
				return pdPASS;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e09a      	b.n	800abc2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d114      	bne.n	800aabc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00d      	beq.n	800aab4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800aa98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9c:	b672      	cpsid	i
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	b662      	cpsie	i
 800aaac:	617b      	str	r3, [r7, #20]
}
 800aaae:	bf00      	nop
 800aab0:	bf00      	nop
 800aab2:	e7fd      	b.n	800aab0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aab4:	f001 fcc8 	bl	800c448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aab8:	2300      	movs	r3, #0
 800aaba:	e082      	b.n	800abc2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d106      	bne.n	800aad0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aac2:	f107 030c 	add.w	r3, r7, #12
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 ffce 	bl	800ba68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aacc:	2301      	movs	r3, #1
 800aace:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aad0:	f001 fcba 	bl	800c448 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aad4:	f000 fd24 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aad8:	f001 fc80 	bl	800c3dc <vPortEnterCritical>
 800aadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aade:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aae2:	b25b      	sxtb	r3, r3
 800aae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aae8:	d103      	bne.n	800aaf2 <xQueueSemaphoreTake+0x152>
 800aaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaf8:	b25b      	sxtb	r3, r3
 800aafa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aafe:	d103      	bne.n	800ab08 <xQueueSemaphoreTake+0x168>
 800ab00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab08:	f001 fc9e 	bl	800c448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab0c:	463a      	mov	r2, r7
 800ab0e:	f107 030c 	add.w	r3, r7, #12
 800ab12:	4611      	mov	r1, r2
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 ffbd 	bl	800ba94 <xTaskCheckForTimeOut>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d132      	bne.n	800ab86 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab22:	f000 f9d7 	bl	800aed4 <prvIsQueueEmpty>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d026      	beq.n	800ab7a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d109      	bne.n	800ab48 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ab34:	f001 fc52 	bl	800c3dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 f919 	bl	800bd74 <xTaskPriorityInherit>
 800ab42:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ab44:	f001 fc80 	bl	800c448 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab4a:	3324      	adds	r3, #36	@ 0x24
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	4611      	mov	r1, r2
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 fefb 	bl	800b94c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab58:	f000 f96a 	bl	800ae30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab5c:	f000 fcee 	bl	800b53c <xTaskResumeAll>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f47f af65 	bne.w	800aa32 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ab68:	4b18      	ldr	r3, [pc, #96]	@ (800abcc <xQueueSemaphoreTake+0x22c>)
 800ab6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab6e:	601a      	str	r2, [r3, #0]
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	e75b      	b.n	800aa32 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab7c:	f000 f958 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab80:	f000 fcdc 	bl	800b53c <xTaskResumeAll>
 800ab84:	e755      	b.n	800aa32 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab88:	f000 f952 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab8c:	f000 fcd6 	bl	800b53c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab92:	f000 f99f 	bl	800aed4 <prvIsQueueEmpty>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f43f af4a 	beq.w	800aa32 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00d      	beq.n	800abc0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800aba4:	f001 fc1a 	bl	800c3dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abaa:	f000 f899 	bl	800ace0 <prvGetDisinheritPriorityAfterTimeout>
 800abae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800abb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 f9e8 	bl	800bf8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800abbc:	f001 fc44 	bl	800c448 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3738      	adds	r7, #56	@ 0x38
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	e000ed04 	.word	0xe000ed04

0800abd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08e      	sub	sp, #56	@ 0x38
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10d      	bne.n	800ac02 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	b672      	cpsid	i
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	b662      	cpsie	i
 800abfa:	623b      	str	r3, [r7, #32]
}
 800abfc:	bf00      	nop
 800abfe:	bf00      	nop
 800ac00:	e7fd      	b.n	800abfe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d103      	bne.n	800ac10 <xQueueReceiveFromISR+0x40>
 800ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <xQueueReceiveFromISR+0x44>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e000      	b.n	800ac16 <xQueueReceiveFromISR+0x46>
 800ac14:	2300      	movs	r3, #0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10d      	bne.n	800ac36 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1e:	b672      	cpsid	i
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	b662      	cpsie	i
 800ac2e:	61fb      	str	r3, [r7, #28]
}
 800ac30:	bf00      	nop
 800ac32:	bf00      	nop
 800ac34:	e7fd      	b.n	800ac32 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac36:	f001 fcb9 	bl	800c5ac <vPortValidateInterruptPriority>
	__asm volatile
 800ac3a:	f3ef 8211 	mrs	r2, BASEPRI
 800ac3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac42:	b672      	cpsid	i
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	b662      	cpsie	i
 800ac52:	61ba      	str	r2, [r7, #24]
 800ac54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ac56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d02f      	beq.n	800acc6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac70:	68b9      	ldr	r1, [r7, #8]
 800ac72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac74:	f000 f8b6 	bl	800ade4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7a:	1e5a      	subs	r2, r3, #1
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac88:	d112      	bne.n	800acb0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8c:	691b      	ldr	r3, [r3, #16]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d016      	beq.n	800acc0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	3310      	adds	r3, #16
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 fe80 	bl	800b99c <xTaskRemoveFromEventList>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00e      	beq.n	800acc0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e007      	b.n	800acc0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800acb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acb4:	3301      	adds	r3, #1
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	b25a      	sxtb	r2, r3
 800acba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800acc0:	2301      	movs	r3, #1
 800acc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800acc4:	e001      	b.n	800acca <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800acca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800accc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f383 8811 	msr	BASEPRI, r3
}
 800acd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3738      	adds	r7, #56	@ 0x38
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acec:	2b00      	cmp	r3, #0
 800acee:	d006      	beq.n	800acfe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f1c3 0307 	rsb	r3, r3, #7
 800acfa:	60fb      	str	r3, [r7, #12]
 800acfc:	e001      	b.n	800ad02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad02:	68fb      	ldr	r3, [r7, #12]
	}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10d      	bne.n	800ad4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d14d      	bne.n	800add2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f001 f89a 	bl	800be74 <xTaskPriorityDisinherit>
 800ad40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	609a      	str	r2, [r3, #8]
 800ad48:	e043      	b.n	800add2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d119      	bne.n	800ad84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6858      	ldr	r0, [r3, #4]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	f00c fa13 	bl	8017186 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad68:	441a      	add	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d32b      	bcc.n	800add2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	605a      	str	r2, [r3, #4]
 800ad82:	e026      	b.n	800add2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68d8      	ldr	r0, [r3, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	f00c f9f9 	bl	8017186 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	441a      	add	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d207      	bcs.n	800adc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb8:	425b      	negs	r3, r3
 800adba:	441a      	add	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d105      	bne.n	800add2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3b01      	subs	r3, #1
 800add0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800adda:	697b      	ldr	r3, [r7, #20]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d018      	beq.n	800ae28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfe:	441a      	add	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d303      	bcc.n	800ae18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68d9      	ldr	r1, [r3, #12]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae20:	461a      	mov	r2, r3
 800ae22:	6838      	ldr	r0, [r7, #0]
 800ae24:	f00c f9af 	bl	8017186 <memcpy>
	}
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae38:	f001 fad0 	bl	800c3dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae44:	e011      	b.n	800ae6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d012      	beq.n	800ae74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3324      	adds	r3, #36	@ 0x24
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fda2 	bl	800b99c <xTaskRemoveFromEventList>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae5e:	f000 fe81 	bl	800bb64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dce9      	bgt.n	800ae46 <prvUnlockQueue+0x16>
 800ae72:	e000      	b.n	800ae76 <prvUnlockQueue+0x46>
					break;
 800ae74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	22ff      	movs	r2, #255	@ 0xff
 800ae7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ae7e:	f001 fae3 	bl	800c448 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae82:	f001 faab 	bl	800c3dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae8e:	e011      	b.n	800aeb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d012      	beq.n	800aebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3310      	adds	r3, #16
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fd7d 	bl	800b99c <xTaskRemoveFromEventList>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aea8:	f000 fe5c 	bl	800bb64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dce9      	bgt.n	800ae90 <prvUnlockQueue+0x60>
 800aebc:	e000      	b.n	800aec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	22ff      	movs	r2, #255	@ 0xff
 800aec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aec8:	f001 fabe 	bl	800c448 <vPortExitCritical>
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aedc:	f001 fa7e 	bl	800c3dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aee8:	2301      	movs	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e001      	b.n	800aef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aef2:	f001 faa9 	bl	800c448 <vPortExitCritical>

	return xReturn;
 800aef6:	68fb      	ldr	r3, [r7, #12]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af08:	f001 fa68 	bl	800c3dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af14:	429a      	cmp	r2, r3
 800af16:	d102      	bne.n	800af1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af18:	2301      	movs	r3, #1
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e001      	b.n	800af22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af22:	f001 fa91 	bl	800c448 <vPortExitCritical>

	return xReturn;
 800af26:	68fb      	ldr	r3, [r7, #12]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08e      	sub	sp, #56	@ 0x38
 800af34:	af04      	add	r7, sp, #16
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10d      	bne.n	800af60 <xTaskCreateStatic+0x30>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af48:	b672      	cpsid	i
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	b662      	cpsie	i
 800af58:	623b      	str	r3, [r7, #32]
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	e7fd      	b.n	800af5c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800af60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10d      	bne.n	800af82 <xTaskCreateStatic+0x52>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6a:	b672      	cpsid	i
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	b662      	cpsie	i
 800af7a:	61fb      	str	r3, [r7, #28]
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	e7fd      	b.n	800af7e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af82:	23a0      	movs	r3, #160	@ 0xa0
 800af84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	2ba0      	cmp	r3, #160	@ 0xa0
 800af8a:	d00d      	beq.n	800afa8 <xTaskCreateStatic+0x78>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	b672      	cpsid	i
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	b662      	cpsie	i
 800afa0:	61bb      	str	r3, [r7, #24]
}
 800afa2:	bf00      	nop
 800afa4:	bf00      	nop
 800afa6:	e7fd      	b.n	800afa4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01e      	beq.n	800afee <xTaskCreateStatic+0xbe>
 800afb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d01b      	beq.n	800afee <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc2:	2202      	movs	r2, #2
 800afc4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afc8:	2300      	movs	r3, #0
 800afca:	9303      	str	r3, [sp, #12]
 800afcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afce:	9302      	str	r3, [sp, #8]
 800afd0:	f107 0314 	add.w	r3, r7, #20
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	68b9      	ldr	r1, [r7, #8]
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 f851 	bl	800b088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afe8:	f000 f8f8 	bl	800b1dc <prvAddNewTaskToReadyList>
 800afec:	e001      	b.n	800aff2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aff2:	697b      	ldr	r3, [r7, #20]
	}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3728      	adds	r7, #40	@ 0x28
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800affc:	b580      	push	{r7, lr}
 800affe:	b08c      	sub	sp, #48	@ 0x30
 800b000:	af04      	add	r7, sp, #16
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	603b      	str	r3, [r7, #0]
 800b008:	4613      	mov	r3, r2
 800b00a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b00c:	88fb      	ldrh	r3, [r7, #6]
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4618      	mov	r0, r3
 800b012:	f001 fb11 	bl	800c638 <pvPortMalloc>
 800b016:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00e      	beq.n	800b03c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b01e:	20a0      	movs	r0, #160	@ 0xa0
 800b020:	f001 fb0a 	bl	800c638 <pvPortMalloc>
 800b024:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	631a      	str	r2, [r3, #48]	@ 0x30
 800b032:	e005      	b.n	800b040 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b034:	6978      	ldr	r0, [r7, #20]
 800b036:	f001 fbcd 	bl	800c7d4 <vPortFree>
 800b03a:	e001      	b.n	800b040 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b03c:	2300      	movs	r3, #0
 800b03e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d017      	beq.n	800b076 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b04e:	88fa      	ldrh	r2, [r7, #6]
 800b050:	2300      	movs	r3, #0
 800b052:	9303      	str	r3, [sp, #12]
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	9302      	str	r3, [sp, #8]
 800b058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 f80f 	bl	800b088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b06a:	69f8      	ldr	r0, [r7, #28]
 800b06c:	f000 f8b6 	bl	800b1dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b070:	2301      	movs	r3, #1
 800b072:	61bb      	str	r3, [r7, #24]
 800b074:	e002      	b.n	800b07c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b07a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b07c:	69bb      	ldr	r3, [r7, #24]
	}
 800b07e:	4618      	mov	r0, r3
 800b080:	3720      	adds	r7, #32
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b098:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	461a      	mov	r2, r3
 800b0a0:	21a5      	movs	r1, #165	@ 0xa5
 800b0a2:	f00b ff9d 	bl	8016fe0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0b0:	440b      	add	r3, r1
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	f023 0307 	bic.w	r3, r3, #7
 800b0be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	f003 0307 	and.w	r3, r3, #7
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00d      	beq.n	800b0e6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ce:	b672      	cpsid	i
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	b662      	cpsie	i
 800b0de:	617b      	str	r3, [r7, #20]
}
 800b0e0:	bf00      	nop
 800b0e2:	bf00      	nop
 800b0e4:	e7fd      	b.n	800b0e2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d01f      	beq.n	800b12c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61fb      	str	r3, [r7, #28]
 800b0f0:	e012      	b.n	800b118 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	7819      	ldrb	r1, [r3, #0]
 800b0fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	4413      	add	r3, r2
 800b100:	3334      	adds	r3, #52	@ 0x34
 800b102:	460a      	mov	r2, r1
 800b104:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	4413      	add	r3, r2
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d006      	beq.n	800b120 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	3301      	adds	r3, #1
 800b116:	61fb      	str	r3, [r7, #28]
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	2b0f      	cmp	r3, #15
 800b11c:	d9e9      	bls.n	800b0f2 <prvInitialiseNewTask+0x6a>
 800b11e:	e000      	b.n	800b122 <prvInitialiseNewTask+0x9a>
			{
				break;
 800b120:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b12a:	e003      	b.n	800b134 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b136:	2b06      	cmp	r3, #6
 800b138:	d901      	bls.n	800b13e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b13a:	2306      	movs	r3, #6
 800b13c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b142:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b148:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	2200      	movs	r2, #0
 800b14e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b152:	3304      	adds	r3, #4
 800b154:	4618      	mov	r0, r3
 800b156:	f7fe febf 	bl	8009ed8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	3318      	adds	r3, #24
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe feba 	bl	8009ed8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b168:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16c:	f1c3 0207 	rsb	r2, r3, #7
 800b170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b172:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b178:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b184:	2200      	movs	r2, #0
 800b186:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	334c      	adds	r3, #76	@ 0x4c
 800b18e:	224c      	movs	r2, #76	@ 0x4c
 800b190:	2100      	movs	r1, #0
 800b192:	4618      	mov	r0, r3
 800b194:	f00b ff24 	bl	8016fe0 <memset>
 800b198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19a:	4a0d      	ldr	r2, [pc, #52]	@ (800b1d0 <prvInitialiseNewTask+0x148>)
 800b19c:	651a      	str	r2, [r3, #80]	@ 0x50
 800b19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a0:	4a0c      	ldr	r2, [pc, #48]	@ (800b1d4 <prvInitialiseNewTask+0x14c>)
 800b1a2:	655a      	str	r2, [r3, #84]	@ 0x54
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b1d8 <prvInitialiseNewTask+0x150>)
 800b1a8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	68f9      	ldr	r1, [r7, #12]
 800b1ae:	69b8      	ldr	r0, [r7, #24]
 800b1b0:	f001 f806 	bl	800c1c0 <pxPortInitialiseStack>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1c6:	bf00      	nop
 800b1c8:	3720      	adds	r7, #32
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	2000c850 	.word	0x2000c850
 800b1d4:	2000c8b8 	.word	0x2000c8b8
 800b1d8:	2000c920 	.word	0x2000c920

0800b1dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1e4:	f001 f8fa 	bl	800c3dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1e8:	4b2a      	ldr	r3, [pc, #168]	@ (800b294 <prvAddNewTaskToReadyList+0xb8>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	4a29      	ldr	r2, [pc, #164]	@ (800b294 <prvAddNewTaskToReadyList+0xb8>)
 800b1f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1f2:	4b29      	ldr	r3, [pc, #164]	@ (800b298 <prvAddNewTaskToReadyList+0xbc>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1fa:	4a27      	ldr	r2, [pc, #156]	@ (800b298 <prvAddNewTaskToReadyList+0xbc>)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b200:	4b24      	ldr	r3, [pc, #144]	@ (800b294 <prvAddNewTaskToReadyList+0xb8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d110      	bne.n	800b22a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b208:	f000 fcd0 	bl	800bbac <prvInitialiseTaskLists>
 800b20c:	e00d      	b.n	800b22a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b20e:	4b23      	ldr	r3, [pc, #140]	@ (800b29c <prvAddNewTaskToReadyList+0xc0>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d109      	bne.n	800b22a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b216:	4b20      	ldr	r3, [pc, #128]	@ (800b298 <prvAddNewTaskToReadyList+0xbc>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b220:	429a      	cmp	r2, r3
 800b222:	d802      	bhi.n	800b22a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b224:	4a1c      	ldr	r2, [pc, #112]	@ (800b298 <prvAddNewTaskToReadyList+0xbc>)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b22a:	4b1d      	ldr	r3, [pc, #116]	@ (800b2a0 <prvAddNewTaskToReadyList+0xc4>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3301      	adds	r3, #1
 800b230:	4a1b      	ldr	r2, [pc, #108]	@ (800b2a0 <prvAddNewTaskToReadyList+0xc4>)
 800b232:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b238:	2201      	movs	r2, #1
 800b23a:	409a      	lsls	r2, r3
 800b23c:	4b19      	ldr	r3, [pc, #100]	@ (800b2a4 <prvAddNewTaskToReadyList+0xc8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4313      	orrs	r3, r2
 800b242:	4a18      	ldr	r2, [pc, #96]	@ (800b2a4 <prvAddNewTaskToReadyList+0xc8>)
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b24a:	4613      	mov	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4a15      	ldr	r2, [pc, #84]	@ (800b2a8 <prvAddNewTaskToReadyList+0xcc>)
 800b254:	441a      	add	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3304      	adds	r3, #4
 800b25a:	4619      	mov	r1, r3
 800b25c:	4610      	mov	r0, r2
 800b25e:	f7fe fe48 	bl	8009ef2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b262:	f001 f8f1 	bl	800c448 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b266:	4b0d      	ldr	r3, [pc, #52]	@ (800b29c <prvAddNewTaskToReadyList+0xc0>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00e      	beq.n	800b28c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b26e:	4b0a      	ldr	r3, [pc, #40]	@ (800b298 <prvAddNewTaskToReadyList+0xbc>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b278:	429a      	cmp	r2, r3
 800b27a:	d207      	bcs.n	800b28c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b27c:	4b0b      	ldr	r3, [pc, #44]	@ (800b2ac <prvAddNewTaskToReadyList+0xd0>)
 800b27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	20005994 	.word	0x20005994
 800b298:	20005894 	.word	0x20005894
 800b29c:	200059a0 	.word	0x200059a0
 800b2a0:	200059b0 	.word	0x200059b0
 800b2a4:	2000599c 	.word	0x2000599c
 800b2a8:	20005898 	.word	0x20005898
 800b2ac:	e000ed04 	.word	0xe000ed04

0800b2b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b2b8:	f001 f890 	bl	800c3dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d102      	bne.n	800b2c8 <vTaskDelete+0x18>
 800b2c2:	4b3a      	ldr	r3, [pc, #232]	@ (800b3ac <vTaskDelete+0xfc>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	e000      	b.n	800b2ca <vTaskDelete+0x1a>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fe fe6b 	bl	8009fac <uxListRemove>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d115      	bne.n	800b308 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e0:	4933      	ldr	r1, [pc, #204]	@ (800b3b0 <vTaskDelete+0x100>)
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4413      	add	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	440b      	add	r3, r1
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10a      	bne.n	800b308 <vTaskDelete+0x58>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fc:	43da      	mvns	r2, r3
 800b2fe:	4b2d      	ldr	r3, [pc, #180]	@ (800b3b4 <vTaskDelete+0x104>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4013      	ands	r3, r2
 800b304:	4a2b      	ldr	r2, [pc, #172]	@ (800b3b4 <vTaskDelete+0x104>)
 800b306:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d004      	beq.n	800b31a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3318      	adds	r3, #24
 800b314:	4618      	mov	r0, r3
 800b316:	f7fe fe49 	bl	8009fac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b31a:	4b27      	ldr	r3, [pc, #156]	@ (800b3b8 <vTaskDelete+0x108>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3301      	adds	r3, #1
 800b320:	4a25      	ldr	r2, [pc, #148]	@ (800b3b8 <vTaskDelete+0x108>)
 800b322:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b324:	4b21      	ldr	r3, [pc, #132]	@ (800b3ac <vTaskDelete+0xfc>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d10b      	bne.n	800b346 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3304      	adds	r3, #4
 800b332:	4619      	mov	r1, r3
 800b334:	4821      	ldr	r0, [pc, #132]	@ (800b3bc <vTaskDelete+0x10c>)
 800b336:	f7fe fddc 	bl	8009ef2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b33a:	4b21      	ldr	r3, [pc, #132]	@ (800b3c0 <vTaskDelete+0x110>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3301      	adds	r3, #1
 800b340:	4a1f      	ldr	r2, [pc, #124]	@ (800b3c0 <vTaskDelete+0x110>)
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	e009      	b.n	800b35a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b346:	4b1f      	ldr	r3, [pc, #124]	@ (800b3c4 <vTaskDelete+0x114>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	4a1d      	ldr	r2, [pc, #116]	@ (800b3c4 <vTaskDelete+0x114>)
 800b34e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f000 fc99 	bl	800bc88 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b356:	f000 fccf 	bl	800bcf8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800b35a:	f001 f875 	bl	800c448 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b35e:	4b1a      	ldr	r3, [pc, #104]	@ (800b3c8 <vTaskDelete+0x118>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d01e      	beq.n	800b3a4 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800b366:	4b11      	ldr	r3, [pc, #68]	@ (800b3ac <vTaskDelete+0xfc>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d119      	bne.n	800b3a4 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b370:	4b16      	ldr	r3, [pc, #88]	@ (800b3cc <vTaskDelete+0x11c>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00d      	beq.n	800b394 <vTaskDelete+0xe4>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37c:	b672      	cpsid	i
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	b662      	cpsie	i
 800b38c:	60bb      	str	r3, [r7, #8]
}
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	e7fd      	b.n	800b390 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800b394:	4b0e      	ldr	r3, [pc, #56]	@ (800b3d0 <vTaskDelete+0x120>)
 800b396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3a4:	bf00      	nop
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	20005894 	.word	0x20005894
 800b3b0:	20005898 	.word	0x20005898
 800b3b4:	2000599c 	.word	0x2000599c
 800b3b8:	200059b0 	.word	0x200059b0
 800b3bc:	20005968 	.word	0x20005968
 800b3c0:	2000597c 	.word	0x2000597c
 800b3c4:	20005994 	.word	0x20005994
 800b3c8:	200059a0 	.word	0x200059a0
 800b3cc:	200059bc 	.word	0x200059bc
 800b3d0:	e000ed04 	.word	0xe000ed04

0800b3d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d01a      	beq.n	800b41c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3e6:	4b15      	ldr	r3, [pc, #84]	@ (800b43c <vTaskDelay+0x68>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00d      	beq.n	800b40a <vTaskDelay+0x36>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f2:	b672      	cpsid	i
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	b662      	cpsie	i
 800b402:	60bb      	str	r3, [r7, #8]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b40a:	f000 f889 	bl	800b520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b40e:	2100      	movs	r1, #0
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fe6f 	bl	800c0f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b416:	f000 f891 	bl	800b53c <xTaskResumeAll>
 800b41a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d107      	bne.n	800b432 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800b422:	4b07      	ldr	r3, [pc, #28]	@ (800b440 <vTaskDelay+0x6c>)
 800b424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b432:	bf00      	nop
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	200059bc 	.word	0x200059bc
 800b440:	e000ed04 	.word	0xe000ed04

0800b444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08a      	sub	sp, #40	@ 0x28
 800b448:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b44e:	2300      	movs	r3, #0
 800b450:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b452:	463a      	mov	r2, r7
 800b454:	1d39      	adds	r1, r7, #4
 800b456:	f107 0308 	add.w	r3, r7, #8
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7f5 fa52 	bl	8000904 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	9202      	str	r2, [sp, #8]
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	2300      	movs	r3, #0
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	2300      	movs	r3, #0
 800b470:	460a      	mov	r2, r1
 800b472:	4923      	ldr	r1, [pc, #140]	@ (800b500 <vTaskStartScheduler+0xbc>)
 800b474:	4823      	ldr	r0, [pc, #140]	@ (800b504 <vTaskStartScheduler+0xc0>)
 800b476:	f7ff fd5b 	bl	800af30 <xTaskCreateStatic>
 800b47a:	4603      	mov	r3, r0
 800b47c:	4a22      	ldr	r2, [pc, #136]	@ (800b508 <vTaskStartScheduler+0xc4>)
 800b47e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b480:	4b21      	ldr	r3, [pc, #132]	@ (800b508 <vTaskStartScheduler+0xc4>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b488:	2301      	movs	r3, #1
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	e001      	b.n	800b492 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b48e:	2300      	movs	r3, #0
 800b490:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d11d      	bne.n	800b4d4 <vTaskStartScheduler+0x90>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49c:	b672      	cpsid	i
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	b662      	cpsie	i
 800b4ac:	613b      	str	r3, [r7, #16]
}
 800b4ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4b0:	4b16      	ldr	r3, [pc, #88]	@ (800b50c <vTaskStartScheduler+0xc8>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	334c      	adds	r3, #76	@ 0x4c
 800b4b6:	4a16      	ldr	r2, [pc, #88]	@ (800b510 <vTaskStartScheduler+0xcc>)
 800b4b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4ba:	4b16      	ldr	r3, [pc, #88]	@ (800b514 <vTaskStartScheduler+0xd0>)
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4c2:	4b15      	ldr	r3, [pc, #84]	@ (800b518 <vTaskStartScheduler+0xd4>)
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4c8:	4b14      	ldr	r3, [pc, #80]	@ (800b51c <vTaskStartScheduler+0xd8>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4ce:	f000 ff07 	bl	800c2e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4d2:	e011      	b.n	800b4f8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4da:	d10d      	bne.n	800b4f8 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e0:	b672      	cpsid	i
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	b662      	cpsie	i
 800b4f0:	60fb      	str	r3, [r7, #12]
}
 800b4f2:	bf00      	nop
 800b4f4:	bf00      	nop
 800b4f6:	e7fd      	b.n	800b4f4 <vTaskStartScheduler+0xb0>
}
 800b4f8:	bf00      	nop
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	08017f7c 	.word	0x08017f7c
 800b504:	0800bb7d 	.word	0x0800bb7d
 800b508:	200059b8 	.word	0x200059b8
 800b50c:	20005894 	.word	0x20005894
 800b510:	2000003c 	.word	0x2000003c
 800b514:	200059b4 	.word	0x200059b4
 800b518:	200059a0 	.word	0x200059a0
 800b51c:	20005998 	.word	0x20005998

0800b520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b524:	4b04      	ldr	r3, [pc, #16]	@ (800b538 <vTaskSuspendAll+0x18>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	4a03      	ldr	r2, [pc, #12]	@ (800b538 <vTaskSuspendAll+0x18>)
 800b52c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b52e:	bf00      	nop
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	200059bc 	.word	0x200059bc

0800b53c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b546:	2300      	movs	r3, #0
 800b548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b54a:	4b43      	ldr	r3, [pc, #268]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10d      	bne.n	800b56e <xTaskResumeAll+0x32>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b556:	b672      	cpsid	i
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	b662      	cpsie	i
 800b566:	603b      	str	r3, [r7, #0]
}
 800b568:	bf00      	nop
 800b56a:	bf00      	nop
 800b56c:	e7fd      	b.n	800b56a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b56e:	f000 ff35 	bl	800c3dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b572:	4b39      	ldr	r3, [pc, #228]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3b01      	subs	r3, #1
 800b578:	4a37      	ldr	r2, [pc, #220]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b57a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b57c:	4b36      	ldr	r3, [pc, #216]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d161      	bne.n	800b648 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b584:	4b35      	ldr	r3, [pc, #212]	@ (800b65c <xTaskResumeAll+0x120>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d05d      	beq.n	800b648 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b58c:	e02e      	b.n	800b5ec <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b58e:	4b34      	ldr	r3, [pc, #208]	@ (800b660 <xTaskResumeAll+0x124>)
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3318      	adds	r3, #24
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fd06 	bl	8009fac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fe fd01 	bl	8009fac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	409a      	lsls	r2, r3
 800b5b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b664 <xTaskResumeAll+0x128>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b664 <xTaskResumeAll+0x128>)
 800b5ba:	6013      	str	r3, [r2, #0]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4413      	add	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4a27      	ldr	r2, [pc, #156]	@ (800b668 <xTaskResumeAll+0x12c>)
 800b5ca:	441a      	add	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3304      	adds	r3, #4
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	f7fe fc8d 	bl	8009ef2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5dc:	4b23      	ldr	r3, [pc, #140]	@ (800b66c <xTaskResumeAll+0x130>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d302      	bcc.n	800b5ec <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b5e6:	4b22      	ldr	r3, [pc, #136]	@ (800b670 <xTaskResumeAll+0x134>)
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b660 <xTaskResumeAll+0x124>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1cc      	bne.n	800b58e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5fa:	f000 fb7d 	bl	800bcf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b5fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b674 <xTaskResumeAll+0x138>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d010      	beq.n	800b62c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b60a:	f000 f859 	bl	800b6c0 <xTaskIncrementTick>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b614:	4b16      	ldr	r3, [pc, #88]	@ (800b670 <xTaskResumeAll+0x134>)
 800b616:	2201      	movs	r2, #1
 800b618:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1f1      	bne.n	800b60a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b626:	4b13      	ldr	r3, [pc, #76]	@ (800b674 <xTaskResumeAll+0x138>)
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b62c:	4b10      	ldr	r3, [pc, #64]	@ (800b670 <xTaskResumeAll+0x134>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d009      	beq.n	800b648 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b634:	2301      	movs	r3, #1
 800b636:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b638:	4b0f      	ldr	r3, [pc, #60]	@ (800b678 <xTaskResumeAll+0x13c>)
 800b63a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b648:	f000 fefe 	bl	800c448 <vPortExitCritical>

	return xAlreadyYielded;
 800b64c:	68bb      	ldr	r3, [r7, #8]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	200059bc 	.word	0x200059bc
 800b65c:	20005994 	.word	0x20005994
 800b660:	20005954 	.word	0x20005954
 800b664:	2000599c 	.word	0x2000599c
 800b668:	20005898 	.word	0x20005898
 800b66c:	20005894 	.word	0x20005894
 800b670:	200059a8 	.word	0x200059a8
 800b674:	200059a4 	.word	0x200059a4
 800b678:	e000ed04 	.word	0xe000ed04

0800b67c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b682:	4b05      	ldr	r3, [pc, #20]	@ (800b698 <xTaskGetTickCount+0x1c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b688:	687b      	ldr	r3, [r7, #4]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	20005998 	.word	0x20005998

0800b69c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6a2:	f000 ff83 	bl	800c5ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b6aa:	4b04      	ldr	r3, [pc, #16]	@ (800b6bc <xTaskGetTickCountFromISR+0x20>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6b0:	683b      	ldr	r3, [r7, #0]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20005998 	.word	0x20005998

0800b6c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ca:	4b50      	ldr	r3, [pc, #320]	@ (800b80c <xTaskIncrementTick+0x14c>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f040 808b 	bne.w	800b7ea <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6d4:	4b4e      	ldr	r3, [pc, #312]	@ (800b810 <xTaskIncrementTick+0x150>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b6dc:	4a4c      	ldr	r2, [pc, #304]	@ (800b810 <xTaskIncrementTick+0x150>)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d123      	bne.n	800b730 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6e8:	4b4a      	ldr	r3, [pc, #296]	@ (800b814 <xTaskIncrementTick+0x154>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00d      	beq.n	800b70e <xTaskIncrementTick+0x4e>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f6:	b672      	cpsid	i
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	b662      	cpsie	i
 800b706:	603b      	str	r3, [r7, #0]
}
 800b708:	bf00      	nop
 800b70a:	bf00      	nop
 800b70c:	e7fd      	b.n	800b70a <xTaskIncrementTick+0x4a>
 800b70e:	4b41      	ldr	r3, [pc, #260]	@ (800b814 <xTaskIncrementTick+0x154>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	4b40      	ldr	r3, [pc, #256]	@ (800b818 <xTaskIncrementTick+0x158>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a3e      	ldr	r2, [pc, #248]	@ (800b814 <xTaskIncrementTick+0x154>)
 800b71a:	6013      	str	r3, [r2, #0]
 800b71c:	4a3e      	ldr	r2, [pc, #248]	@ (800b818 <xTaskIncrementTick+0x158>)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6013      	str	r3, [r2, #0]
 800b722:	4b3e      	ldr	r3, [pc, #248]	@ (800b81c <xTaskIncrementTick+0x15c>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3301      	adds	r3, #1
 800b728:	4a3c      	ldr	r2, [pc, #240]	@ (800b81c <xTaskIncrementTick+0x15c>)
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	f000 fae4 	bl	800bcf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b730:	4b3b      	ldr	r3, [pc, #236]	@ (800b820 <xTaskIncrementTick+0x160>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	429a      	cmp	r2, r3
 800b738:	d348      	bcc.n	800b7cc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b73a:	4b36      	ldr	r3, [pc, #216]	@ (800b814 <xTaskIncrementTick+0x154>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d104      	bne.n	800b74e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b744:	4b36      	ldr	r3, [pc, #216]	@ (800b820 <xTaskIncrementTick+0x160>)
 800b746:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b74a:	601a      	str	r2, [r3, #0]
					break;
 800b74c:	e03e      	b.n	800b7cc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74e:	4b31      	ldr	r3, [pc, #196]	@ (800b814 <xTaskIncrementTick+0x154>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	429a      	cmp	r2, r3
 800b764:	d203      	bcs.n	800b76e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b766:	4a2e      	ldr	r2, [pc, #184]	@ (800b820 <xTaskIncrementTick+0x160>)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b76c:	e02e      	b.n	800b7cc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	3304      	adds	r3, #4
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe fc1a 	bl	8009fac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d004      	beq.n	800b78a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	3318      	adds	r3, #24
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe fc11 	bl	8009fac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78e:	2201      	movs	r2, #1
 800b790:	409a      	lsls	r2, r3
 800b792:	4b24      	ldr	r3, [pc, #144]	@ (800b824 <xTaskIncrementTick+0x164>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4313      	orrs	r3, r2
 800b798:	4a22      	ldr	r2, [pc, #136]	@ (800b824 <xTaskIncrementTick+0x164>)
 800b79a:	6013      	str	r3, [r2, #0]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4a1f      	ldr	r2, [pc, #124]	@ (800b828 <xTaskIncrementTick+0x168>)
 800b7aa:	441a      	add	r2, r3
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f7fe fb9d 	bl	8009ef2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b82c <xTaskIncrementTick+0x16c>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d3b9      	bcc.n	800b73a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ca:	e7b6      	b.n	800b73a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7cc:	4b17      	ldr	r3, [pc, #92]	@ (800b82c <xTaskIncrementTick+0x16c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d2:	4915      	ldr	r1, [pc, #84]	@ (800b828 <xTaskIncrementTick+0x168>)
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	440b      	add	r3, r1
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d907      	bls.n	800b7f4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	e004      	b.n	800b7f4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b7ea:	4b11      	ldr	r3, [pc, #68]	@ (800b830 <xTaskIncrementTick+0x170>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	4a0f      	ldr	r2, [pc, #60]	@ (800b830 <xTaskIncrementTick+0x170>)
 800b7f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	@ (800b834 <xTaskIncrementTick+0x174>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b800:	697b      	ldr	r3, [r7, #20]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	200059bc 	.word	0x200059bc
 800b810:	20005998 	.word	0x20005998
 800b814:	2000594c 	.word	0x2000594c
 800b818:	20005950 	.word	0x20005950
 800b81c:	200059ac 	.word	0x200059ac
 800b820:	200059b4 	.word	0x200059b4
 800b824:	2000599c 	.word	0x2000599c
 800b828:	20005898 	.word	0x20005898
 800b82c:	20005894 	.word	0x20005894
 800b830:	200059a4 	.word	0x200059a4
 800b834:	200059a8 	.word	0x200059a8

0800b838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b83e:	4b3d      	ldr	r3, [pc, #244]	@ (800b934 <vTaskSwitchContext+0xfc>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b846:	4b3c      	ldr	r3, [pc, #240]	@ (800b938 <vTaskSwitchContext+0x100>)
 800b848:	2201      	movs	r2, #1
 800b84a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b84c:	e06e      	b.n	800b92c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800b84e:	4b3a      	ldr	r3, [pc, #232]	@ (800b938 <vTaskSwitchContext+0x100>)
 800b850:	2200      	movs	r2, #0
 800b852:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b854:	4b39      	ldr	r3, [pc, #228]	@ (800b93c <vTaskSwitchContext+0x104>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b85a:	61fb      	str	r3, [r7, #28]
 800b85c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800b860:	61bb      	str	r3, [r7, #24]
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	69ba      	ldr	r2, [r7, #24]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d111      	bne.n	800b890 <vTaskSwitchContext+0x58>
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	3304      	adds	r3, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69ba      	ldr	r2, [r7, #24]
 800b874:	429a      	cmp	r2, r3
 800b876:	d10b      	bne.n	800b890 <vTaskSwitchContext+0x58>
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	3308      	adds	r3, #8
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	69ba      	ldr	r2, [r7, #24]
 800b880:	429a      	cmp	r2, r3
 800b882:	d105      	bne.n	800b890 <vTaskSwitchContext+0x58>
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	330c      	adds	r3, #12
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	69ba      	ldr	r2, [r7, #24]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d008      	beq.n	800b8a2 <vTaskSwitchContext+0x6a>
 800b890:	4b2a      	ldr	r3, [pc, #168]	@ (800b93c <vTaskSwitchContext+0x104>)
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	4b29      	ldr	r3, [pc, #164]	@ (800b93c <vTaskSwitchContext+0x104>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3334      	adds	r3, #52	@ 0x34
 800b89a:	4619      	mov	r1, r3
 800b89c:	4610      	mov	r0, r2
 800b89e:	f7f5 f825 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8a2:	4b27      	ldr	r3, [pc, #156]	@ (800b940 <vTaskSwitchContext+0x108>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	fab3 f383 	clz	r3, r3
 800b8ae:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b8b0:	7afb      	ldrb	r3, [r7, #11]
 800b8b2:	f1c3 031f 	rsb	r3, r3, #31
 800b8b6:	617b      	str	r3, [r7, #20]
 800b8b8:	4922      	ldr	r1, [pc, #136]	@ (800b944 <vTaskSwitchContext+0x10c>)
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10d      	bne.n	800b8e8 <vTaskSwitchContext+0xb0>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d0:	b672      	cpsid	i
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	b662      	cpsie	i
 800b8e0:	607b      	str	r3, [r7, #4]
}
 800b8e2:	bf00      	nop
 800b8e4:	bf00      	nop
 800b8e6:	e7fd      	b.n	800b8e4 <vTaskSwitchContext+0xac>
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4a14      	ldr	r2, [pc, #80]	@ (800b944 <vTaskSwitchContext+0x10c>)
 800b8f4:	4413      	add	r3, r2
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	685a      	ldr	r2, [r3, #4]
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	605a      	str	r2, [r3, #4]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	3308      	adds	r3, #8
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d104      	bne.n	800b918 <vTaskSwitchContext+0xe0>
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	605a      	str	r2, [r3, #4]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	4a07      	ldr	r2, [pc, #28]	@ (800b93c <vTaskSwitchContext+0x104>)
 800b920:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b922:	4b06      	ldr	r3, [pc, #24]	@ (800b93c <vTaskSwitchContext+0x104>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	334c      	adds	r3, #76	@ 0x4c
 800b928:	4a07      	ldr	r2, [pc, #28]	@ (800b948 <vTaskSwitchContext+0x110>)
 800b92a:	6013      	str	r3, [r2, #0]
}
 800b92c:	bf00      	nop
 800b92e:	3720      	adds	r7, #32
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	200059bc 	.word	0x200059bc
 800b938:	200059a8 	.word	0x200059a8
 800b93c:	20005894 	.word	0x20005894
 800b940:	2000599c 	.word	0x2000599c
 800b944:	20005898 	.word	0x20005898
 800b948:	2000003c 	.word	0x2000003c

0800b94c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10d      	bne.n	800b978 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b960:	b672      	cpsid	i
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	b662      	cpsie	i
 800b970:	60fb      	str	r3, [r7, #12]
}
 800b972:	bf00      	nop
 800b974:	bf00      	nop
 800b976:	e7fd      	b.n	800b974 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b978:	4b07      	ldr	r3, [pc, #28]	@ (800b998 <vTaskPlaceOnEventList+0x4c>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3318      	adds	r3, #24
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7fe fada 	bl	8009f3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b986:	2101      	movs	r1, #1
 800b988:	6838      	ldr	r0, [r7, #0]
 800b98a:	f000 fbb3 	bl	800c0f4 <prvAddCurrentTaskToDelayedList>
}
 800b98e:	bf00      	nop
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20005894 	.word	0x20005894

0800b99c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10d      	bne.n	800b9ce <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b6:	b672      	cpsid	i
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	b662      	cpsie	i
 800b9c6:	60fb      	str	r3, [r7, #12]
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	e7fd      	b.n	800b9ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	3318      	adds	r3, #24
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe faea 	bl	8009fac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9d8:	4b1d      	ldr	r3, [pc, #116]	@ (800ba50 <xTaskRemoveFromEventList+0xb4>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d11c      	bne.n	800ba1a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fe fae1 	bl	8009fac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	409a      	lsls	r2, r3
 800b9f2:	4b18      	ldr	r3, [pc, #96]	@ (800ba54 <xTaskRemoveFromEventList+0xb8>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	4a16      	ldr	r2, [pc, #88]	@ (800ba54 <xTaskRemoveFromEventList+0xb8>)
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba00:	4613      	mov	r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4a13      	ldr	r2, [pc, #76]	@ (800ba58 <xTaskRemoveFromEventList+0xbc>)
 800ba0a:	441a      	add	r2, r3
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	4619      	mov	r1, r3
 800ba12:	4610      	mov	r0, r2
 800ba14:	f7fe fa6d 	bl	8009ef2 <vListInsertEnd>
 800ba18:	e005      	b.n	800ba26 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	3318      	adds	r3, #24
 800ba1e:	4619      	mov	r1, r3
 800ba20:	480e      	ldr	r0, [pc, #56]	@ (800ba5c <xTaskRemoveFromEventList+0xc0>)
 800ba22:	f7fe fa66 	bl	8009ef2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba60 <xTaskRemoveFromEventList+0xc4>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d905      	bls.n	800ba40 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba34:	2301      	movs	r3, #1
 800ba36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba38:	4b0a      	ldr	r3, [pc, #40]	@ (800ba64 <xTaskRemoveFromEventList+0xc8>)
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	e001      	b.n	800ba44 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba44:	697b      	ldr	r3, [r7, #20]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	200059bc 	.word	0x200059bc
 800ba54:	2000599c 	.word	0x2000599c
 800ba58:	20005898 	.word	0x20005898
 800ba5c:	20005954 	.word	0x20005954
 800ba60:	20005894 	.word	0x20005894
 800ba64:	200059a8 	.word	0x200059a8

0800ba68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba70:	4b06      	ldr	r3, [pc, #24]	@ (800ba8c <vTaskInternalSetTimeOutState+0x24>)
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba78:	4b05      	ldr	r3, [pc, #20]	@ (800ba90 <vTaskInternalSetTimeOutState+0x28>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	605a      	str	r2, [r3, #4]
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	200059ac 	.word	0x200059ac
 800ba90:	20005998 	.word	0x20005998

0800ba94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10d      	bne.n	800bac0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa8:	b672      	cpsid	i
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	b662      	cpsie	i
 800bab8:	613b      	str	r3, [r7, #16]
}
 800baba:	bf00      	nop
 800babc:	bf00      	nop
 800babe:	e7fd      	b.n	800babc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10d      	bne.n	800bae2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baca:	b672      	cpsid	i
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	b662      	cpsie	i
 800bada:	60fb      	str	r3, [r7, #12]
}
 800badc:	bf00      	nop
 800bade:	bf00      	nop
 800bae0:	e7fd      	b.n	800bade <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800bae2:	f000 fc7b 	bl	800c3dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bae6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb5c <xTaskCheckForTimeOut+0xc8>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	69ba      	ldr	r2, [r7, #24]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bafe:	d102      	bne.n	800bb06 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb00:	2300      	movs	r3, #0
 800bb02:	61fb      	str	r3, [r7, #28]
 800bb04:	e023      	b.n	800bb4e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	4b15      	ldr	r3, [pc, #84]	@ (800bb60 <xTaskCheckForTimeOut+0xcc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d007      	beq.n	800bb22 <xTaskCheckForTimeOut+0x8e>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	69ba      	ldr	r2, [r7, #24]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d302      	bcc.n	800bb22 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	e015      	b.n	800bb4e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d20b      	bcs.n	800bb44 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	1ad2      	subs	r2, r2, r3
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7ff ff95 	bl	800ba68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	61fb      	str	r3, [r7, #28]
 800bb42:	e004      	b.n	800bb4e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2200      	movs	r2, #0
 800bb48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb4e:	f000 fc7b 	bl	800c448 <vPortExitCritical>

	return xReturn;
 800bb52:	69fb      	ldr	r3, [r7, #28]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3720      	adds	r7, #32
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20005998 	.word	0x20005998
 800bb60:	200059ac 	.word	0x200059ac

0800bb64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb68:	4b03      	ldr	r3, [pc, #12]	@ (800bb78 <vTaskMissedYield+0x14>)
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	601a      	str	r2, [r3, #0]
}
 800bb6e:	bf00      	nop
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	200059a8 	.word	0x200059a8

0800bb7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb84:	f000 f852 	bl	800bc2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb88:	4b06      	ldr	r3, [pc, #24]	@ (800bba4 <prvIdleTask+0x28>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d9f9      	bls.n	800bb84 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb90:	4b05      	ldr	r3, [pc, #20]	@ (800bba8 <prvIdleTask+0x2c>)
 800bb92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb96:	601a      	str	r2, [r3, #0]
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bba0:	e7f0      	b.n	800bb84 <prvIdleTask+0x8>
 800bba2:	bf00      	nop
 800bba4:	20005898 	.word	0x20005898
 800bba8:	e000ed04 	.word	0xe000ed04

0800bbac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	607b      	str	r3, [r7, #4]
 800bbb6:	e00c      	b.n	800bbd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4a12      	ldr	r2, [pc, #72]	@ (800bc0c <prvInitialiseTaskLists+0x60>)
 800bbc4:	4413      	add	r3, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fe f966 	bl	8009e98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	607b      	str	r3, [r7, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b06      	cmp	r3, #6
 800bbd6:	d9ef      	bls.n	800bbb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbd8:	480d      	ldr	r0, [pc, #52]	@ (800bc10 <prvInitialiseTaskLists+0x64>)
 800bbda:	f7fe f95d 	bl	8009e98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbde:	480d      	ldr	r0, [pc, #52]	@ (800bc14 <prvInitialiseTaskLists+0x68>)
 800bbe0:	f7fe f95a 	bl	8009e98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbe4:	480c      	ldr	r0, [pc, #48]	@ (800bc18 <prvInitialiseTaskLists+0x6c>)
 800bbe6:	f7fe f957 	bl	8009e98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbea:	480c      	ldr	r0, [pc, #48]	@ (800bc1c <prvInitialiseTaskLists+0x70>)
 800bbec:	f7fe f954 	bl	8009e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbf0:	480b      	ldr	r0, [pc, #44]	@ (800bc20 <prvInitialiseTaskLists+0x74>)
 800bbf2:	f7fe f951 	bl	8009e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbf6:	4b0b      	ldr	r3, [pc, #44]	@ (800bc24 <prvInitialiseTaskLists+0x78>)
 800bbf8:	4a05      	ldr	r2, [pc, #20]	@ (800bc10 <prvInitialiseTaskLists+0x64>)
 800bbfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbfc:	4b0a      	ldr	r3, [pc, #40]	@ (800bc28 <prvInitialiseTaskLists+0x7c>)
 800bbfe:	4a05      	ldr	r2, [pc, #20]	@ (800bc14 <prvInitialiseTaskLists+0x68>)
 800bc00:	601a      	str	r2, [r3, #0]
}
 800bc02:	bf00      	nop
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	20005898 	.word	0x20005898
 800bc10:	20005924 	.word	0x20005924
 800bc14:	20005938 	.word	0x20005938
 800bc18:	20005954 	.word	0x20005954
 800bc1c:	20005968 	.word	0x20005968
 800bc20:	20005980 	.word	0x20005980
 800bc24:	2000594c 	.word	0x2000594c
 800bc28:	20005950 	.word	0x20005950

0800bc2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc32:	e019      	b.n	800bc68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc34:	f000 fbd2 	bl	800c3dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc38:	4b10      	ldr	r3, [pc, #64]	@ (800bc7c <prvCheckTasksWaitingTermination+0x50>)
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3304      	adds	r3, #4
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fe f9b1 	bl	8009fac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc80 <prvCheckTasksWaitingTermination+0x54>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	4a0b      	ldr	r2, [pc, #44]	@ (800bc80 <prvCheckTasksWaitingTermination+0x54>)
 800bc52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc54:	4b0b      	ldr	r3, [pc, #44]	@ (800bc84 <prvCheckTasksWaitingTermination+0x58>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	3b01      	subs	r3, #1
 800bc5a:	4a0a      	ldr	r2, [pc, #40]	@ (800bc84 <prvCheckTasksWaitingTermination+0x58>)
 800bc5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc5e:	f000 fbf3 	bl	800c448 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f810 	bl	800bc88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc68:	4b06      	ldr	r3, [pc, #24]	@ (800bc84 <prvCheckTasksWaitingTermination+0x58>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1e1      	bne.n	800bc34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc70:	bf00      	nop
 800bc72:	bf00      	nop
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20005968 	.word	0x20005968
 800bc80:	20005994 	.word	0x20005994
 800bc84:	2000597c 	.word	0x2000597c

0800bc88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	334c      	adds	r3, #76	@ 0x4c
 800bc94:	4618      	mov	r0, r3
 800bc96:	f00b f9bb 	bl	8017010 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d108      	bne.n	800bcb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 fd93 	bl	800c7d4 <vPortFree>
				vPortFree( pxTCB );
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fd90 	bl	800c7d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcb4:	e01b      	b.n	800bcee <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d103      	bne.n	800bcc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fd87 	bl	800c7d4 <vPortFree>
	}
 800bcc6:	e012      	b.n	800bcee <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d00d      	beq.n	800bcee <prvDeleteTCB+0x66>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd6:	b672      	cpsid	i
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	b662      	cpsie	i
 800bce6:	60fb      	str	r3, [r7, #12]
}
 800bce8:	bf00      	nop
 800bcea:	bf00      	nop
 800bcec:	e7fd      	b.n	800bcea <prvDeleteTCB+0x62>
	}
 800bcee:	bf00      	nop
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
	...

0800bcf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800bd30 <prvResetNextTaskUnblockTime+0x38>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d104      	bne.n	800bd12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd08:	4b0a      	ldr	r3, [pc, #40]	@ (800bd34 <prvResetNextTaskUnblockTime+0x3c>)
 800bd0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd10:	e008      	b.n	800bd24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd12:	4b07      	ldr	r3, [pc, #28]	@ (800bd30 <prvResetNextTaskUnblockTime+0x38>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	4a04      	ldr	r2, [pc, #16]	@ (800bd34 <prvResetNextTaskUnblockTime+0x3c>)
 800bd22:	6013      	str	r3, [r2, #0]
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	2000594c 	.word	0x2000594c
 800bd34:	200059b4 	.word	0x200059b4

0800bd38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd3e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd6c <xTaskGetSchedulerState+0x34>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d102      	bne.n	800bd4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd46:	2301      	movs	r3, #1
 800bd48:	607b      	str	r3, [r7, #4]
 800bd4a:	e008      	b.n	800bd5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd4c:	4b08      	ldr	r3, [pc, #32]	@ (800bd70 <xTaskGetSchedulerState+0x38>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d102      	bne.n	800bd5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd54:	2302      	movs	r3, #2
 800bd56:	607b      	str	r3, [r7, #4]
 800bd58:	e001      	b.n	800bd5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd5e:	687b      	ldr	r3, [r7, #4]
	}
 800bd60:	4618      	mov	r0, r3
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	200059a0 	.word	0x200059a0
 800bd70:	200059bc 	.word	0x200059bc

0800bd74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd80:	2300      	movs	r3, #0
 800bd82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d069      	beq.n	800be5e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd8e:	4b36      	ldr	r3, [pc, #216]	@ (800be68 <xTaskPriorityInherit+0xf4>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d259      	bcs.n	800be4c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	699b      	ldr	r3, [r3, #24]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	db06      	blt.n	800bdae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bda0:	4b31      	ldr	r3, [pc, #196]	@ (800be68 <xTaskPriorityInherit+0xf4>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda6:	f1c3 0207 	rsb	r2, r3, #7
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	6959      	ldr	r1, [r3, #20]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4a2b      	ldr	r2, [pc, #172]	@ (800be6c <xTaskPriorityInherit+0xf8>)
 800bdc0:	4413      	add	r3, r2
 800bdc2:	4299      	cmp	r1, r3
 800bdc4:	d13a      	bne.n	800be3c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	3304      	adds	r3, #4
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe f8ee 	bl	8009fac <uxListRemove>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d115      	bne.n	800be02 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdda:	4924      	ldr	r1, [pc, #144]	@ (800be6c <xTaskPriorityInherit+0xf8>)
 800bddc:	4613      	mov	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	440b      	add	r3, r1
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <xTaskPriorityInherit+0x8e>
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf6:	43da      	mvns	r2, r3
 800bdf8:	4b1d      	ldr	r3, [pc, #116]	@ (800be70 <xTaskPriorityInherit+0xfc>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	4a1c      	ldr	r2, [pc, #112]	@ (800be70 <xTaskPriorityInherit+0xfc>)
 800be00:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be02:	4b19      	ldr	r3, [pc, #100]	@ (800be68 <xTaskPriorityInherit+0xf4>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be10:	2201      	movs	r2, #1
 800be12:	409a      	lsls	r2, r3
 800be14:	4b16      	ldr	r3, [pc, #88]	@ (800be70 <xTaskPriorityInherit+0xfc>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4313      	orrs	r3, r2
 800be1a:	4a15      	ldr	r2, [pc, #84]	@ (800be70 <xTaskPriorityInherit+0xfc>)
 800be1c:	6013      	str	r3, [r2, #0]
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4a10      	ldr	r2, [pc, #64]	@ (800be6c <xTaskPriorityInherit+0xf8>)
 800be2c:	441a      	add	r2, r3
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	3304      	adds	r3, #4
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7fe f85c 	bl	8009ef2 <vListInsertEnd>
 800be3a:	e004      	b.n	800be46 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be3c:	4b0a      	ldr	r3, [pc, #40]	@ (800be68 <xTaskPriorityInherit+0xf4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be46:	2301      	movs	r3, #1
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	e008      	b.n	800be5e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be50:	4b05      	ldr	r3, [pc, #20]	@ (800be68 <xTaskPriorityInherit+0xf4>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be56:	429a      	cmp	r2, r3
 800be58:	d201      	bcs.n	800be5e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be5a:	2301      	movs	r3, #1
 800be5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be5e:	68fb      	ldr	r3, [r7, #12]
	}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20005894 	.word	0x20005894
 800be6c:	20005898 	.word	0x20005898
 800be70:	2000599c 	.word	0x2000599c

0800be74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be80:	2300      	movs	r3, #0
 800be82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d074      	beq.n	800bf74 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be8a:	4b3d      	ldr	r3, [pc, #244]	@ (800bf80 <xTaskPriorityDisinherit+0x10c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	429a      	cmp	r2, r3
 800be92:	d00d      	beq.n	800beb0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be98:	b672      	cpsid	i
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	b662      	cpsie	i
 800bea8:	60fb      	str	r3, [r7, #12]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10d      	bne.n	800bed4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebc:	b672      	cpsid	i
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	b662      	cpsie	i
 800becc:	60bb      	str	r3, [r7, #8]
}
 800bece:	bf00      	nop
 800bed0:	bf00      	nop
 800bed2:	e7fd      	b.n	800bed0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bed8:	1e5a      	subs	r2, r3, #1
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d044      	beq.n	800bf74 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d140      	bne.n	800bf74 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe f858 	bl	8009fac <uxListRemove>
 800befc:	4603      	mov	r3, r0
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d115      	bne.n	800bf2e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf06:	491f      	ldr	r1, [pc, #124]	@ (800bf84 <xTaskPriorityDisinherit+0x110>)
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	440b      	add	r3, r1
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10a      	bne.n	800bf2e <xTaskPriorityDisinherit+0xba>
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf22:	43da      	mvns	r2, r3
 800bf24:	4b18      	ldr	r3, [pc, #96]	@ (800bf88 <xTaskPriorityDisinherit+0x114>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4013      	ands	r3, r2
 800bf2a:	4a17      	ldr	r2, [pc, #92]	@ (800bf88 <xTaskPriorityDisinherit+0x114>)
 800bf2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3a:	f1c3 0207 	rsb	r2, r3, #7
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf46:	2201      	movs	r2, #1
 800bf48:	409a      	lsls	r2, r3
 800bf4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf88 <xTaskPriorityDisinherit+0x114>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	4a0d      	ldr	r2, [pc, #52]	@ (800bf88 <xTaskPriorityDisinherit+0x114>)
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf58:	4613      	mov	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4a08      	ldr	r2, [pc, #32]	@ (800bf84 <xTaskPriorityDisinherit+0x110>)
 800bf62:	441a      	add	r2, r3
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	3304      	adds	r3, #4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	f7fd ffc1 	bl	8009ef2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf70:	2301      	movs	r3, #1
 800bf72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf74:	697b      	ldr	r3, [r7, #20]
	}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20005894 	.word	0x20005894
 800bf84:	20005898 	.word	0x20005898
 800bf88:	2000599c 	.word	0x2000599c

0800bf8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b088      	sub	sp, #32
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 8089 	beq.w	800c0b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10d      	bne.n	800bfca <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb2:	b672      	cpsid	i
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	b662      	cpsie	i
 800bfc2:	60fb      	str	r3, [r7, #12]
}
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop
 800bfc8:	e7fd      	b.n	800bfc6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d902      	bls.n	800bfda <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	61fb      	str	r3, [r7, #28]
 800bfd8:	e002      	b.n	800bfe0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfde:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe4:	69fa      	ldr	r2, [r7, #28]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d066      	beq.n	800c0b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d161      	bne.n	800c0b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bff4:	4b32      	ldr	r3, [pc, #200]	@ (800c0c0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	69ba      	ldr	r2, [r7, #24]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d10d      	bne.n	800c01a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c002:	b672      	cpsid	i
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	b662      	cpsie	i
 800c012:	60bb      	str	r3, [r7, #8]
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	e7fd      	b.n	800c016 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	69fa      	ldr	r2, [r7, #28]
 800c024:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	db04      	blt.n	800c038 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	f1c3 0207 	rsb	r2, r3, #7
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	6959      	ldr	r1, [r3, #20]
 800c03c:	693a      	ldr	r2, [r7, #16]
 800c03e:	4613      	mov	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4a1f      	ldr	r2, [pc, #124]	@ (800c0c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c048:	4413      	add	r3, r2
 800c04a:	4299      	cmp	r1, r3
 800c04c:	d134      	bne.n	800c0b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	3304      	adds	r3, #4
 800c052:	4618      	mov	r0, r3
 800c054:	f7fd ffaa 	bl	8009fac <uxListRemove>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d115      	bne.n	800c08a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c062:	4918      	ldr	r1, [pc, #96]	@ (800c0c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	440b      	add	r3, r1
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10a      	bne.n	800c08a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c078:	2201      	movs	r2, #1
 800c07a:	fa02 f303 	lsl.w	r3, r2, r3
 800c07e:	43da      	mvns	r2, r3
 800c080:	4b11      	ldr	r3, [pc, #68]	@ (800c0c8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4013      	ands	r3, r2
 800c086:	4a10      	ldr	r2, [pc, #64]	@ (800c0c8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c088:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c08e:	2201      	movs	r2, #1
 800c090:	409a      	lsls	r2, r3
 800c092:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4313      	orrs	r3, r2
 800c098:	4a0b      	ldr	r2, [pc, #44]	@ (800c0c8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c09a:	6013      	str	r3, [r2, #0]
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4a06      	ldr	r2, [pc, #24]	@ (800c0c4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c0aa:	441a      	add	r2, r3
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	f7fd ff1d 	bl	8009ef2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0b8:	bf00      	nop
 800c0ba:	3720      	adds	r7, #32
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	20005894 	.word	0x20005894
 800c0c4:	20005898 	.word	0x20005898
 800c0c8:	2000599c 	.word	0x2000599c

0800c0cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c0cc:	b480      	push	{r7}
 800c0ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c0d0:	4b07      	ldr	r3, [pc, #28]	@ (800c0f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d004      	beq.n	800c0e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c0d8:	4b05      	ldr	r3, [pc, #20]	@ (800c0f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c0de:	3201      	adds	r2, #1
 800c0e0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c0e2:	4b03      	ldr	r3, [pc, #12]	@ (800c0f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
	}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	20005894 	.word	0x20005894

0800c0f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0fe:	4b29      	ldr	r3, [pc, #164]	@ (800c1a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c104:	4b28      	ldr	r3, [pc, #160]	@ (800c1a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3304      	adds	r3, #4
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fd ff4e 	bl	8009fac <uxListRemove>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10b      	bne.n	800c12e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c116:	4b24      	ldr	r3, [pc, #144]	@ (800c1a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11c:	2201      	movs	r2, #1
 800c11e:	fa02 f303 	lsl.w	r3, r2, r3
 800c122:	43da      	mvns	r2, r3
 800c124:	4b21      	ldr	r3, [pc, #132]	@ (800c1ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4013      	ands	r3, r2
 800c12a:	4a20      	ldr	r2, [pc, #128]	@ (800c1ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800c12c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c134:	d10a      	bne.n	800c14c <prvAddCurrentTaskToDelayedList+0x58>
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d007      	beq.n	800c14c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c13c:	4b1a      	ldr	r3, [pc, #104]	@ (800c1a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	3304      	adds	r3, #4
 800c142:	4619      	mov	r1, r3
 800c144:	481a      	ldr	r0, [pc, #104]	@ (800c1b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c146:	f7fd fed4 	bl	8009ef2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c14a:	e026      	b.n	800c19a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4413      	add	r3, r2
 800c152:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c154:	4b14      	ldr	r3, [pc, #80]	@ (800c1a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68ba      	ldr	r2, [r7, #8]
 800c15a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	429a      	cmp	r2, r3
 800c162:	d209      	bcs.n	800c178 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c164:	4b13      	ldr	r3, [pc, #76]	@ (800c1b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3304      	adds	r3, #4
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7fd fee2 	bl	8009f3a <vListInsert>
}
 800c176:	e010      	b.n	800c19a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c178:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3304      	adds	r3, #4
 800c182:	4619      	mov	r1, r3
 800c184:	4610      	mov	r0, r2
 800c186:	f7fd fed8 	bl	8009f3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c18a:	4b0c      	ldr	r3, [pc, #48]	@ (800c1bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	429a      	cmp	r2, r3
 800c192:	d202      	bcs.n	800c19a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c194:	4a09      	ldr	r2, [pc, #36]	@ (800c1bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	6013      	str	r3, [r2, #0]
}
 800c19a:	bf00      	nop
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20005998 	.word	0x20005998
 800c1a8:	20005894 	.word	0x20005894
 800c1ac:	2000599c 	.word	0x2000599c
 800c1b0:	20005980 	.word	0x20005980
 800c1b4:	20005950 	.word	0x20005950
 800c1b8:	2000594c 	.word	0x2000594c
 800c1bc:	200059b4 	.word	0x200059b4

0800c1c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3b04      	subs	r3, #4
 800c1d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c1d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3b04      	subs	r3, #4
 800c1de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f023 0201 	bic.w	r2, r3, #1
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1f0:	4a0c      	ldr	r2, [pc, #48]	@ (800c224 <pxPortInitialiseStack+0x64>)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3b14      	subs	r3, #20
 800c1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3b04      	subs	r3, #4
 800c206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f06f 0202 	mvn.w	r2, #2
 800c20e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3b20      	subs	r3, #32
 800c214:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c216:	68fb      	ldr	r3, [r7, #12]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	0800c229 	.word	0x0800c229

0800c228 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c232:	4b15      	ldr	r3, [pc, #84]	@ (800c288 <prvTaskExitError+0x60>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c23a:	d00d      	beq.n	800c258 <prvTaskExitError+0x30>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c240:	b672      	cpsid	i
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	b662      	cpsie	i
 800c250:	60fb      	str	r3, [r7, #12]
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	e7fd      	b.n	800c254 <prvTaskExitError+0x2c>
	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	b672      	cpsid	i
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	b662      	cpsie	i
 800c26c:	60bb      	str	r3, [r7, #8]
}
 800c26e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c270:	bf00      	nop
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0fc      	beq.n	800c272 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	20000020 	.word	0x20000020
 800c28c:	00000000 	.word	0x00000000

0800c290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c290:	4b07      	ldr	r3, [pc, #28]	@ (800c2b0 <pxCurrentTCBConst2>)
 800c292:	6819      	ldr	r1, [r3, #0]
 800c294:	6808      	ldr	r0, [r1, #0]
 800c296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29a:	f380 8809 	msr	PSP, r0
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f04f 0000 	mov.w	r0, #0
 800c2a6:	f380 8811 	msr	BASEPRI, r0
 800c2aa:	4770      	bx	lr
 800c2ac:	f3af 8000 	nop.w

0800c2b0 <pxCurrentTCBConst2>:
 800c2b0:	20005894 	.word	0x20005894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop

0800c2b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2b8:	4808      	ldr	r0, [pc, #32]	@ (800c2dc <prvPortStartFirstTask+0x24>)
 800c2ba:	6800      	ldr	r0, [r0, #0]
 800c2bc:	6800      	ldr	r0, [r0, #0]
 800c2be:	f380 8808 	msr	MSP, r0
 800c2c2:	f04f 0000 	mov.w	r0, #0
 800c2c6:	f380 8814 	msr	CONTROL, r0
 800c2ca:	b662      	cpsie	i
 800c2cc:	b661      	cpsie	f
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	df00      	svc	0
 800c2d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2da:	bf00      	nop
 800c2dc:	e000ed08 	.word	0xe000ed08

0800c2e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2e6:	4b37      	ldr	r3, [pc, #220]	@ (800c3c4 <xPortStartScheduler+0xe4>)
 800c2e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	22ff      	movs	r2, #255	@ 0xff
 800c2f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c300:	78fb      	ldrb	r3, [r7, #3]
 800c302:	b2db      	uxtb	r3, r3
 800c304:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	4b2f      	ldr	r3, [pc, #188]	@ (800c3c8 <xPortStartScheduler+0xe8>)
 800c30c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c30e:	4b2f      	ldr	r3, [pc, #188]	@ (800c3cc <xPortStartScheduler+0xec>)
 800c310:	2207      	movs	r2, #7
 800c312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c314:	e009      	b.n	800c32a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c316:	4b2d      	ldr	r3, [pc, #180]	@ (800c3cc <xPortStartScheduler+0xec>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3b01      	subs	r3, #1
 800c31c:	4a2b      	ldr	r2, [pc, #172]	@ (800c3cc <xPortStartScheduler+0xec>)
 800c31e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c320:	78fb      	ldrb	r3, [r7, #3]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	b2db      	uxtb	r3, r3
 800c328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c32a:	78fb      	ldrb	r3, [r7, #3]
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c332:	2b80      	cmp	r3, #128	@ 0x80
 800c334:	d0ef      	beq.n	800c316 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c336:	4b25      	ldr	r3, [pc, #148]	@ (800c3cc <xPortStartScheduler+0xec>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f1c3 0307 	rsb	r3, r3, #7
 800c33e:	2b04      	cmp	r3, #4
 800c340:	d00d      	beq.n	800c35e <xPortStartScheduler+0x7e>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c346:	b672      	cpsid	i
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	b662      	cpsie	i
 800c356:	60bb      	str	r3, [r7, #8]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c35e:	4b1b      	ldr	r3, [pc, #108]	@ (800c3cc <xPortStartScheduler+0xec>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	021b      	lsls	r3, r3, #8
 800c364:	4a19      	ldr	r2, [pc, #100]	@ (800c3cc <xPortStartScheduler+0xec>)
 800c366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c368:	4b18      	ldr	r3, [pc, #96]	@ (800c3cc <xPortStartScheduler+0xec>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c370:	4a16      	ldr	r2, [pc, #88]	@ (800c3cc <xPortStartScheduler+0xec>)
 800c372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	b2da      	uxtb	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c37c:	4b14      	ldr	r3, [pc, #80]	@ (800c3d0 <xPortStartScheduler+0xf0>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a13      	ldr	r2, [pc, #76]	@ (800c3d0 <xPortStartScheduler+0xf0>)
 800c382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c388:	4b11      	ldr	r3, [pc, #68]	@ (800c3d0 <xPortStartScheduler+0xf0>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a10      	ldr	r2, [pc, #64]	@ (800c3d0 <xPortStartScheduler+0xf0>)
 800c38e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c394:	f000 f8dc 	bl	800c550 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c398:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d4 <xPortStartScheduler+0xf4>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c39e:	f000 f8fb 	bl	800c598 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d8 <xPortStartScheduler+0xf8>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4a0c      	ldr	r2, [pc, #48]	@ (800c3d8 <xPortStartScheduler+0xf8>)
 800c3a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c3ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3ae:	f7ff ff83 	bl	800c2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3b2:	f7ff fa41 	bl	800b838 <vTaskSwitchContext>
	prvTaskExitError();
 800c3b6:	f7ff ff37 	bl	800c228 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	e000e400 	.word	0xe000e400
 800c3c8:	200059c0 	.word	0x200059c0
 800c3cc:	200059c4 	.word	0x200059c4
 800c3d0:	e000ed20 	.word	0xe000ed20
 800c3d4:	20000020 	.word	0x20000020
 800c3d8:	e000ef34 	.word	0xe000ef34

0800c3dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e6:	b672      	cpsid	i
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	b662      	cpsie	i
 800c3f6:	607b      	str	r3, [r7, #4]
}
 800c3f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3fa:	4b11      	ldr	r3, [pc, #68]	@ (800c440 <vPortEnterCritical+0x64>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	3301      	adds	r3, #1
 800c400:	4a0f      	ldr	r2, [pc, #60]	@ (800c440 <vPortEnterCritical+0x64>)
 800c402:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c404:	4b0e      	ldr	r3, [pc, #56]	@ (800c440 <vPortEnterCritical+0x64>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d112      	bne.n	800c432 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c40c:	4b0d      	ldr	r3, [pc, #52]	@ (800c444 <vPortEnterCritical+0x68>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00d      	beq.n	800c432 <vPortEnterCritical+0x56>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41a:	b672      	cpsid	i
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	b662      	cpsie	i
 800c42a:	603b      	str	r3, [r7, #0]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <vPortEnterCritical+0x52>
	}
}
 800c432:	bf00      	nop
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20000020 	.word	0x20000020
 800c444:	e000ed04 	.word	0xe000ed04

0800c448 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c44e:	4b13      	ldr	r3, [pc, #76]	@ (800c49c <vPortExitCritical+0x54>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10d      	bne.n	800c472 <vPortExitCritical+0x2a>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45a:	b672      	cpsid	i
 800c45c:	f383 8811 	msr	BASEPRI, r3
 800c460:	f3bf 8f6f 	isb	sy
 800c464:	f3bf 8f4f 	dsb	sy
 800c468:	b662      	cpsie	i
 800c46a:	607b      	str	r3, [r7, #4]
}
 800c46c:	bf00      	nop
 800c46e:	bf00      	nop
 800c470:	e7fd      	b.n	800c46e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c472:	4b0a      	ldr	r3, [pc, #40]	@ (800c49c <vPortExitCritical+0x54>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3b01      	subs	r3, #1
 800c478:	4a08      	ldr	r2, [pc, #32]	@ (800c49c <vPortExitCritical+0x54>)
 800c47a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c47c:	4b07      	ldr	r3, [pc, #28]	@ (800c49c <vPortExitCritical+0x54>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d105      	bne.n	800c490 <vPortExitCritical+0x48>
 800c484:	2300      	movs	r3, #0
 800c486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	f383 8811 	msr	BASEPRI, r3
}
 800c48e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	20000020 	.word	0x20000020

0800c4a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4a0:	f3ef 8009 	mrs	r0, PSP
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	4b15      	ldr	r3, [pc, #84]	@ (800c500 <pxCurrentTCBConst>)
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	f01e 0f10 	tst.w	lr, #16
 800c4b0:	bf08      	it	eq
 800c4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ba:	6010      	str	r0, [r2, #0]
 800c4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c4c4:	b672      	cpsid	i
 800c4c6:	f380 8811 	msr	BASEPRI, r0
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	b662      	cpsie	i
 800c4d4:	f7ff f9b0 	bl	800b838 <vTaskSwitchContext>
 800c4d8:	f04f 0000 	mov.w	r0, #0
 800c4dc:	f380 8811 	msr	BASEPRI, r0
 800c4e0:	bc09      	pop	{r0, r3}
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	6808      	ldr	r0, [r1, #0]
 800c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f01e 0f10 	tst.w	lr, #16
 800c4ee:	bf08      	it	eq
 800c4f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4f4:	f380 8809 	msr	PSP, r0
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop

0800c500 <pxCurrentTCBConst>:
 800c500:	20005894 	.word	0x20005894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c512:	b672      	cpsid	i
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	b662      	cpsie	i
 800c522:	607b      	str	r3, [r7, #4]
}
 800c524:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c526:	f7ff f8cb 	bl	800b6c0 <xTaskIncrementTick>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d003      	beq.n	800c538 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c530:	4b06      	ldr	r3, [pc, #24]	@ (800c54c <SysTick_Handler+0x44>)
 800c532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c536:	601a      	str	r2, [r3, #0]
 800c538:	2300      	movs	r3, #0
 800c53a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	f383 8811 	msr	BASEPRI, r3
}
 800c542:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	e000ed04 	.word	0xe000ed04

0800c550 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c550:	b480      	push	{r7}
 800c552:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c554:	4b0b      	ldr	r3, [pc, #44]	@ (800c584 <vPortSetupTimerInterrupt+0x34>)
 800c556:	2200      	movs	r2, #0
 800c558:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c55a:	4b0b      	ldr	r3, [pc, #44]	@ (800c588 <vPortSetupTimerInterrupt+0x38>)
 800c55c:	2200      	movs	r2, #0
 800c55e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c560:	4b0a      	ldr	r3, [pc, #40]	@ (800c58c <vPortSetupTimerInterrupt+0x3c>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a0a      	ldr	r2, [pc, #40]	@ (800c590 <vPortSetupTimerInterrupt+0x40>)
 800c566:	fba2 2303 	umull	r2, r3, r2, r3
 800c56a:	099b      	lsrs	r3, r3, #6
 800c56c:	4a09      	ldr	r2, [pc, #36]	@ (800c594 <vPortSetupTimerInterrupt+0x44>)
 800c56e:	3b01      	subs	r3, #1
 800c570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c572:	4b04      	ldr	r3, [pc, #16]	@ (800c584 <vPortSetupTimerInterrupt+0x34>)
 800c574:	2207      	movs	r2, #7
 800c576:	601a      	str	r2, [r3, #0]
}
 800c578:	bf00      	nop
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	e000e010 	.word	0xe000e010
 800c588:	e000e018 	.word	0xe000e018
 800c58c:	20000000 	.word	0x20000000
 800c590:	10624dd3 	.word	0x10624dd3
 800c594:	e000e014 	.word	0xe000e014

0800c598 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c598:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c5a8 <vPortEnableVFP+0x10>
 800c59c:	6801      	ldr	r1, [r0, #0]
 800c59e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5a2:	6001      	str	r1, [r0, #0]
 800c5a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5a6:	bf00      	nop
 800c5a8:	e000ed88 	.word	0xe000ed88

0800c5ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5b2:	f3ef 8305 	mrs	r3, IPSR
 800c5b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2b0f      	cmp	r3, #15
 800c5bc:	d917      	bls.n	800c5ee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5be:	4a1a      	ldr	r2, [pc, #104]	@ (800c628 <vPortValidateInterruptPriority+0x7c>)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5c8:	4b18      	ldr	r3, [pc, #96]	@ (800c62c <vPortValidateInterruptPriority+0x80>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	7afa      	ldrb	r2, [r7, #11]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d20d      	bcs.n	800c5ee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d6:	b672      	cpsid	i
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	b662      	cpsie	i
 800c5e6:	607b      	str	r3, [r7, #4]
}
 800c5e8:	bf00      	nop
 800c5ea:	bf00      	nop
 800c5ec:	e7fd      	b.n	800c5ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5ee:	4b10      	ldr	r3, [pc, #64]	@ (800c630 <vPortValidateInterruptPriority+0x84>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c5f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c634 <vPortValidateInterruptPriority+0x88>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d90d      	bls.n	800c61a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c602:	b672      	cpsid	i
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	b662      	cpsie	i
 800c612:	603b      	str	r3, [r7, #0]
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop
 800c618:	e7fd      	b.n	800c616 <vPortValidateInterruptPriority+0x6a>
	}
 800c61a:	bf00      	nop
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	e000e3f0 	.word	0xe000e3f0
 800c62c:	200059c0 	.word	0x200059c0
 800c630:	e000ed0c 	.word	0xe000ed0c
 800c634:	200059c4 	.word	0x200059c4

0800c638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	@ 0x28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c644:	f7fe ff6c 	bl	800b520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c648:	4b5d      	ldr	r3, [pc, #372]	@ (800c7c0 <pvPortMalloc+0x188>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d101      	bne.n	800c654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c650:	f000 f920 	bl	800c894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c654:	4b5b      	ldr	r3, [pc, #364]	@ (800c7c4 <pvPortMalloc+0x18c>)
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4013      	ands	r3, r2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f040 8094 	bne.w	800c78a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d020      	beq.n	800c6aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c668:	2208      	movs	r2, #8
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4413      	add	r3, r2
 800c66e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f003 0307 	and.w	r3, r3, #7
 800c676:	2b00      	cmp	r3, #0
 800c678:	d017      	beq.n	800c6aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f023 0307 	bic.w	r3, r3, #7
 800c680:	3308      	adds	r3, #8
 800c682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00d      	beq.n	800c6aa <pvPortMalloc+0x72>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c692:	b672      	cpsid	i
 800c694:	f383 8811 	msr	BASEPRI, r3
 800c698:	f3bf 8f6f 	isb	sy
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	b662      	cpsie	i
 800c6a2:	617b      	str	r3, [r7, #20]
}
 800c6a4:	bf00      	nop
 800c6a6:	bf00      	nop
 800c6a8:	e7fd      	b.n	800c6a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d06c      	beq.n	800c78a <pvPortMalloc+0x152>
 800c6b0:	4b45      	ldr	r3, [pc, #276]	@ (800c7c8 <pvPortMalloc+0x190>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d867      	bhi.n	800c78a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6ba:	4b44      	ldr	r3, [pc, #272]	@ (800c7cc <pvPortMalloc+0x194>)
 800c6bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6be:	4b43      	ldr	r3, [pc, #268]	@ (800c7cc <pvPortMalloc+0x194>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6c4:	e004      	b.n	800c6d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d903      	bls.n	800c6e2 <pvPortMalloc+0xaa>
 800c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1f1      	bne.n	800c6c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6e2:	4b37      	ldr	r3, [pc, #220]	@ (800c7c0 <pvPortMalloc+0x188>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d04e      	beq.n	800c78a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2208      	movs	r2, #8
 800c6f2:	4413      	add	r3, r2
 800c6f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c700:	685a      	ldr	r2, [r3, #4]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	1ad2      	subs	r2, r2, r3
 800c706:	2308      	movs	r3, #8
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d922      	bls.n	800c754 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c70e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4413      	add	r3, r2
 800c714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	f003 0307 	and.w	r3, r3, #7
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00d      	beq.n	800c73c <pvPortMalloc+0x104>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c724:	b672      	cpsid	i
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	b662      	cpsie	i
 800c734:	613b      	str	r3, [r7, #16]
}
 800c736:	bf00      	nop
 800c738:	bf00      	nop
 800c73a:	e7fd      	b.n	800c738 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	1ad2      	subs	r2, r2, r3
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c74e:	69b8      	ldr	r0, [r7, #24]
 800c750:	f000 f902 	bl	800c958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c754:	4b1c      	ldr	r3, [pc, #112]	@ (800c7c8 <pvPortMalloc+0x190>)
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	4a1a      	ldr	r2, [pc, #104]	@ (800c7c8 <pvPortMalloc+0x190>)
 800c760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c762:	4b19      	ldr	r3, [pc, #100]	@ (800c7c8 <pvPortMalloc+0x190>)
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d0 <pvPortMalloc+0x198>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d203      	bcs.n	800c776 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c76e:	4b16      	ldr	r3, [pc, #88]	@ (800c7c8 <pvPortMalloc+0x190>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a17      	ldr	r2, [pc, #92]	@ (800c7d0 <pvPortMalloc+0x198>)
 800c774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	685a      	ldr	r2, [r3, #4]
 800c77a:	4b12      	ldr	r3, [pc, #72]	@ (800c7c4 <pvPortMalloc+0x18c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	431a      	orrs	r2, r3
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	2200      	movs	r2, #0
 800c788:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c78a:	f7fe fed7 	bl	800b53c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	f003 0307 	and.w	r3, r3, #7
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00d      	beq.n	800c7b4 <pvPortMalloc+0x17c>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79c:	b672      	cpsid	i
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	b662      	cpsie	i
 800c7ac:	60fb      	str	r3, [r7, #12]
}
 800c7ae:	bf00      	nop
 800c7b0:	bf00      	nop
 800c7b2:	e7fd      	b.n	800c7b0 <pvPortMalloc+0x178>
	return pvReturn;
 800c7b4:	69fb      	ldr	r3, [r7, #28]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3728      	adds	r7, #40	@ 0x28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	200095d0 	.word	0x200095d0
 800c7c4:	200095dc 	.word	0x200095dc
 800c7c8:	200095d4 	.word	0x200095d4
 800c7cc:	200095c8 	.word	0x200095c8
 800c7d0:	200095d8 	.word	0x200095d8

0800c7d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d04e      	beq.n	800c884 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7e6:	2308      	movs	r3, #8
 800c7e8:	425b      	negs	r3, r3
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	4b24      	ldr	r3, [pc, #144]	@ (800c88c <vPortFree+0xb8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10d      	bne.n	800c81e <vPortFree+0x4a>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	b672      	cpsid	i
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	b662      	cpsie	i
 800c816:	60fb      	str	r3, [r7, #12]
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00d      	beq.n	800c842 <vPortFree+0x6e>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82a:	b672      	cpsid	i
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	b662      	cpsie	i
 800c83a:	60bb      	str	r3, [r7, #8]
}
 800c83c:	bf00      	nop
 800c83e:	bf00      	nop
 800c840:	e7fd      	b.n	800c83e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	4b11      	ldr	r3, [pc, #68]	@ (800c88c <vPortFree+0xb8>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4013      	ands	r3, r2
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d019      	beq.n	800c884 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d115      	bne.n	800c884 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	4b0b      	ldr	r3, [pc, #44]	@ (800c88c <vPortFree+0xb8>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	43db      	mvns	r3, r3
 800c862:	401a      	ands	r2, r3
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c868:	f7fe fe5a 	bl	800b520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	4b07      	ldr	r3, [pc, #28]	@ (800c890 <vPortFree+0xbc>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4413      	add	r3, r2
 800c876:	4a06      	ldr	r2, [pc, #24]	@ (800c890 <vPortFree+0xbc>)
 800c878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c87a:	6938      	ldr	r0, [r7, #16]
 800c87c:	f000 f86c 	bl	800c958 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c880:	f7fe fe5c 	bl	800b53c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c884:	bf00      	nop
 800c886:	3718      	adds	r7, #24
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	200095dc 	.word	0x200095dc
 800c890:	200095d4 	.word	0x200095d4

0800c894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c89a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c89e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8a0:	4b27      	ldr	r3, [pc, #156]	@ (800c940 <prvHeapInit+0xac>)
 800c8a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f003 0307 	and.w	r3, r3, #7
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00c      	beq.n	800c8c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3307      	adds	r3, #7
 800c8b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f023 0307 	bic.w	r3, r3, #7
 800c8ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	4a1f      	ldr	r2, [pc, #124]	@ (800c940 <prvHeapInit+0xac>)
 800c8c4:	4413      	add	r3, r2
 800c8c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c944 <prvHeapInit+0xb0>)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8d2:	4b1c      	ldr	r3, [pc, #112]	@ (800c944 <prvHeapInit+0xb0>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	4413      	add	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8e0:	2208      	movs	r2, #8
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	1a9b      	subs	r3, r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f023 0307 	bic.w	r3, r3, #7
 800c8ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4a15      	ldr	r2, [pc, #84]	@ (800c948 <prvHeapInit+0xb4>)
 800c8f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8f6:	4b14      	ldr	r3, [pc, #80]	@ (800c948 <prvHeapInit+0xb4>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8fe:	4b12      	ldr	r3, [pc, #72]	@ (800c948 <prvHeapInit+0xb4>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	1ad2      	subs	r2, r2, r3
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c914:	4b0c      	ldr	r3, [pc, #48]	@ (800c948 <prvHeapInit+0xb4>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	4a0a      	ldr	r2, [pc, #40]	@ (800c94c <prvHeapInit+0xb8>)
 800c922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	4a09      	ldr	r2, [pc, #36]	@ (800c950 <prvHeapInit+0xbc>)
 800c92a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c92c:	4b09      	ldr	r3, [pc, #36]	@ (800c954 <prvHeapInit+0xc0>)
 800c92e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c932:	601a      	str	r2, [r3, #0]
}
 800c934:	bf00      	nop
 800c936:	3714      	adds	r7, #20
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	200059c8 	.word	0x200059c8
 800c944:	200095c8 	.word	0x200095c8
 800c948:	200095d0 	.word	0x200095d0
 800c94c:	200095d8 	.word	0x200095d8
 800c950:	200095d4 	.word	0x200095d4
 800c954:	200095dc 	.word	0x200095dc

0800c958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c960:	4b28      	ldr	r3, [pc, #160]	@ (800ca04 <prvInsertBlockIntoFreeList+0xac>)
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	e002      	b.n	800c96c <prvInsertBlockIntoFreeList+0x14>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	429a      	cmp	r2, r3
 800c974:	d8f7      	bhi.n	800c966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	4413      	add	r3, r2
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	429a      	cmp	r2, r3
 800c986:	d108      	bne.n	800c99a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	441a      	add	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	441a      	add	r2, r3
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d118      	bne.n	800c9e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	4b15      	ldr	r3, [pc, #84]	@ (800ca08 <prvInsertBlockIntoFreeList+0xb0>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d00d      	beq.n	800c9d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	441a      	add	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	e008      	b.n	800c9e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9d6:	4b0c      	ldr	r3, [pc, #48]	@ (800ca08 <prvInsertBlockIntoFreeList+0xb0>)
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	601a      	str	r2, [r3, #0]
 800c9de:	e003      	b.n	800c9e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d002      	beq.n	800c9f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9f6:	bf00      	nop
 800c9f8:	3714      	adds	r7, #20
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	200095c8 	.word	0x200095c8
 800ca08:	200095d0 	.word	0x200095d0

0800ca0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ca16:	f007 fabd 	bl	8013f94 <sys_timeouts_sleeptime>
 800ca1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca22:	d10b      	bne.n	800ca3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ca24:	4813      	ldr	r0, [pc, #76]	@ (800ca74 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca26:	f00a f832 	bl	8016a8e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f009 ffa4 	bl	801697c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ca34:	480f      	ldr	r0, [pc, #60]	@ (800ca74 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca36:	f00a f81b 	bl	8016a70 <sys_mutex_lock>
    return;
 800ca3a:	e018      	b.n	800ca6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d102      	bne.n	800ca48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ca42:	f007 fa6d 	bl	8013f20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ca46:	e7e6      	b.n	800ca16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ca48:	480a      	ldr	r0, [pc, #40]	@ (800ca74 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca4a:	f00a f820 	bl	8016a8e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f009 ff92 	bl	801697c <sys_arch_mbox_fetch>
 800ca58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ca5a:	4806      	ldr	r0, [pc, #24]	@ (800ca74 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca5c:	f00a f808 	bl	8016a70 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca66:	d102      	bne.n	800ca6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ca68:	f007 fa5a 	bl	8013f20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ca6c:	e7d3      	b.n	800ca16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	200095ec 	.word	0x200095ec

0800ca78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ca80:	4810      	ldr	r0, [pc, #64]	@ (800cac4 <tcpip_thread+0x4c>)
 800ca82:	f009 fff5 	bl	8016a70 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ca86:	4b10      	ldr	r3, [pc, #64]	@ (800cac8 <tcpip_thread+0x50>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d005      	beq.n	800ca9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ca8e:	4b0e      	ldr	r3, [pc, #56]	@ (800cac8 <tcpip_thread+0x50>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a0e      	ldr	r2, [pc, #56]	@ (800cacc <tcpip_thread+0x54>)
 800ca94:	6812      	ldr	r2, [r2, #0]
 800ca96:	4610      	mov	r0, r2
 800ca98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ca9a:	f107 030c 	add.w	r3, r7, #12
 800ca9e:	4619      	mov	r1, r3
 800caa0:	480b      	ldr	r0, [pc, #44]	@ (800cad0 <tcpip_thread+0x58>)
 800caa2:	f7ff ffb3 	bl	800ca0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d106      	bne.n	800caba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800caac:	4b09      	ldr	r3, [pc, #36]	@ (800cad4 <tcpip_thread+0x5c>)
 800caae:	2291      	movs	r2, #145	@ 0x91
 800cab0:	4909      	ldr	r1, [pc, #36]	@ (800cad8 <tcpip_thread+0x60>)
 800cab2:	480a      	ldr	r0, [pc, #40]	@ (800cadc <tcpip_thread+0x64>)
 800cab4:	f00a f93c 	bl	8016d30 <iprintf>
      continue;
 800cab8:	e003      	b.n	800cac2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 f80f 	bl	800cae0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cac2:	e7ea      	b.n	800ca9a <tcpip_thread+0x22>
 800cac4:	200095ec 	.word	0x200095ec
 800cac8:	200095e0 	.word	0x200095e0
 800cacc:	200095e4 	.word	0x200095e4
 800cad0:	200095e8 	.word	0x200095e8
 800cad4:	08017f84 	.word	0x08017f84
 800cad8:	08017fb4 	.word	0x08017fb4
 800cadc:	08017fd4 	.word	0x08017fd4

0800cae0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d026      	beq.n	800cb3e <tcpip_thread_handle_msg+0x5e>
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	dc2b      	bgt.n	800cb4c <tcpip_thread_handle_msg+0x6c>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <tcpip_thread_handle_msg+0x1e>
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d015      	beq.n	800cb28 <tcpip_thread_handle_msg+0x48>
 800cafc:	e026      	b.n	800cb4c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	6850      	ldr	r0, [r2, #4]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	6892      	ldr	r2, [r2, #8]
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	4798      	blx	r3
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d004      	beq.n	800cb1e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 fd07 	bl	800e52c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	2009      	movs	r0, #9
 800cb22:	f000 fe5f 	bl	800d7e4 <memp_free>
      break;
 800cb26:	e018      	b.n	800cb5a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	6892      	ldr	r2, [r2, #8]
 800cb30:	4610      	mov	r0, r2
 800cb32:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cb34:	6879      	ldr	r1, [r7, #4]
 800cb36:	2008      	movs	r0, #8
 800cb38:	f000 fe54 	bl	800d7e4 <memp_free>
      break;
 800cb3c:	e00d      	b.n	800cb5a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	6892      	ldr	r2, [r2, #8]
 800cb46:	4610      	mov	r0, r2
 800cb48:	4798      	blx	r3
      break;
 800cb4a:	e006      	b.n	800cb5a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cb4c:	4b05      	ldr	r3, [pc, #20]	@ (800cb64 <tcpip_thread_handle_msg+0x84>)
 800cb4e:	22cf      	movs	r2, #207	@ 0xcf
 800cb50:	4905      	ldr	r1, [pc, #20]	@ (800cb68 <tcpip_thread_handle_msg+0x88>)
 800cb52:	4806      	ldr	r0, [pc, #24]	@ (800cb6c <tcpip_thread_handle_msg+0x8c>)
 800cb54:	f00a f8ec 	bl	8016d30 <iprintf>
      break;
 800cb58:	bf00      	nop
  }
}
 800cb5a:	bf00      	nop
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	08017f84 	.word	0x08017f84
 800cb68:	08017fb4 	.word	0x08017fb4
 800cb6c:	08017fd4 	.word	0x08017fd4

0800cb70 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cb7c:	481a      	ldr	r0, [pc, #104]	@ (800cbe8 <tcpip_inpkt+0x78>)
 800cb7e:	f009 ff3c 	bl	80169fa <sys_mbox_valid>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d105      	bne.n	800cb94 <tcpip_inpkt+0x24>
 800cb88:	4b18      	ldr	r3, [pc, #96]	@ (800cbec <tcpip_inpkt+0x7c>)
 800cb8a:	22fc      	movs	r2, #252	@ 0xfc
 800cb8c:	4918      	ldr	r1, [pc, #96]	@ (800cbf0 <tcpip_inpkt+0x80>)
 800cb8e:	4819      	ldr	r0, [pc, #100]	@ (800cbf4 <tcpip_inpkt+0x84>)
 800cb90:	f00a f8ce 	bl	8016d30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cb94:	2009      	movs	r0, #9
 800cb96:	f000 fdaf 	bl	800d6f8 <memp_malloc>
 800cb9a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d102      	bne.n	800cba8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cba6:	e01a      	b.n	800cbde <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cbc0:	6979      	ldr	r1, [r7, #20]
 800cbc2:	4809      	ldr	r0, [pc, #36]	@ (800cbe8 <tcpip_inpkt+0x78>)
 800cbc4:	f009 fec0 	bl	8016948 <sys_mbox_trypost>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d006      	beq.n	800cbdc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cbce:	6979      	ldr	r1, [r7, #20]
 800cbd0:	2009      	movs	r0, #9
 800cbd2:	f000 fe07 	bl	800d7e4 <memp_free>
    return ERR_MEM;
 800cbd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbda:	e000      	b.n	800cbde <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cbdc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3718      	adds	r7, #24
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	200095e8 	.word	0x200095e8
 800cbec:	08017f84 	.word	0x08017f84
 800cbf0:	08017ffc 	.word	0x08017ffc
 800cbf4:	08017fd4 	.word	0x08017fd4

0800cbf8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc08:	f003 0318 	and.w	r3, r3, #24
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d006      	beq.n	800cc1e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cc10:	4a08      	ldr	r2, [pc, #32]	@ (800cc34 <tcpip_input+0x3c>)
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff ffab 	bl	800cb70 <tcpip_inpkt>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	e005      	b.n	800cc2a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cc1e:	4a06      	ldr	r2, [pc, #24]	@ (800cc38 <tcpip_input+0x40>)
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff ffa4 	bl	800cb70 <tcpip_inpkt>
 800cc28:	4603      	mov	r3, r0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	08016759 	.word	0x08016759
 800cc38:	08015661 	.word	0x08015661

0800cc3c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cc46:	4819      	ldr	r0, [pc, #100]	@ (800ccac <tcpip_try_callback+0x70>)
 800cc48:	f009 fed7 	bl	80169fa <sys_mbox_valid>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <tcpip_try_callback+0x24>
 800cc52:	4b17      	ldr	r3, [pc, #92]	@ (800ccb0 <tcpip_try_callback+0x74>)
 800cc54:	f240 125d 	movw	r2, #349	@ 0x15d
 800cc58:	4916      	ldr	r1, [pc, #88]	@ (800ccb4 <tcpip_try_callback+0x78>)
 800cc5a:	4817      	ldr	r0, [pc, #92]	@ (800ccb8 <tcpip_try_callback+0x7c>)
 800cc5c:	f00a f868 	bl	8016d30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cc60:	2008      	movs	r0, #8
 800cc62:	f000 fd49 	bl	800d6f8 <memp_malloc>
 800cc66:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d102      	bne.n	800cc74 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cc6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc72:	e017      	b.n	800cca4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2201      	movs	r2, #1
 800cc78:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cc86:	68f9      	ldr	r1, [r7, #12]
 800cc88:	4808      	ldr	r0, [pc, #32]	@ (800ccac <tcpip_try_callback+0x70>)
 800cc8a:	f009 fe5d 	bl	8016948 <sys_mbox_trypost>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d006      	beq.n	800cca2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cc94:	68f9      	ldr	r1, [r7, #12]
 800cc96:	2008      	movs	r0, #8
 800cc98:	f000 fda4 	bl	800d7e4 <memp_free>
    return ERR_MEM;
 800cc9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cca0:	e000      	b.n	800cca4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cca2:	2300      	movs	r3, #0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	200095e8 	.word	0x200095e8
 800ccb0:	08017f84 	.word	0x08017f84
 800ccb4:	08017ffc 	.word	0x08017ffc
 800ccb8:	08017fd4 	.word	0x08017fd4

0800ccbc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af02      	add	r7, sp, #8
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ccc6:	f000 f872 	bl	800cdae <lwip_init>

  tcpip_init_done = initfunc;
 800ccca:	4a17      	ldr	r2, [pc, #92]	@ (800cd28 <tcpip_init+0x6c>)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ccd0:	4a16      	ldr	r2, [pc, #88]	@ (800cd2c <tcpip_init+0x70>)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ccd6:	2106      	movs	r1, #6
 800ccd8:	4815      	ldr	r0, [pc, #84]	@ (800cd30 <tcpip_init+0x74>)
 800ccda:	f009 fe13 	bl	8016904 <sys_mbox_new>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d006      	beq.n	800ccf2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cce4:	4b13      	ldr	r3, [pc, #76]	@ (800cd34 <tcpip_init+0x78>)
 800cce6:	f240 2261 	movw	r2, #609	@ 0x261
 800ccea:	4913      	ldr	r1, [pc, #76]	@ (800cd38 <tcpip_init+0x7c>)
 800ccec:	4813      	ldr	r0, [pc, #76]	@ (800cd3c <tcpip_init+0x80>)
 800ccee:	f00a f81f 	bl	8016d30 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ccf2:	4813      	ldr	r0, [pc, #76]	@ (800cd40 <tcpip_init+0x84>)
 800ccf4:	f009 fea0 	bl	8016a38 <sys_mutex_new>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d006      	beq.n	800cd0c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ccfe:	4b0d      	ldr	r3, [pc, #52]	@ (800cd34 <tcpip_init+0x78>)
 800cd00:	f240 2265 	movw	r2, #613	@ 0x265
 800cd04:	490f      	ldr	r1, [pc, #60]	@ (800cd44 <tcpip_init+0x88>)
 800cd06:	480d      	ldr	r0, [pc, #52]	@ (800cd3c <tcpip_init+0x80>)
 800cd08:	f00a f812 	bl	8016d30 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd14:	2200      	movs	r2, #0
 800cd16:	490c      	ldr	r1, [pc, #48]	@ (800cd48 <tcpip_init+0x8c>)
 800cd18:	480c      	ldr	r0, [pc, #48]	@ (800cd4c <tcpip_init+0x90>)
 800cd1a:	f009 fec5 	bl	8016aa8 <sys_thread_new>
}
 800cd1e:	bf00      	nop
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	200095e0 	.word	0x200095e0
 800cd2c:	200095e4 	.word	0x200095e4
 800cd30:	200095e8 	.word	0x200095e8
 800cd34:	08017f84 	.word	0x08017f84
 800cd38:	0801800c 	.word	0x0801800c
 800cd3c:	08017fd4 	.word	0x08017fd4
 800cd40:	200095ec 	.word	0x200095ec
 800cd44:	08018030 	.word	0x08018030
 800cd48:	0800ca79 	.word	0x0800ca79
 800cd4c:	08018054 	.word	0x08018054

0800cd50 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4603      	mov	r3, r0
 800cd58:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cd5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd5e:	021b      	lsls	r3, r3, #8
 800cd60:	b21a      	sxth	r2, r3
 800cd62:	88fb      	ldrh	r3, [r7, #6]
 800cd64:	0a1b      	lsrs	r3, r3, #8
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	b21b      	sxth	r3, r3
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	b21b      	sxth	r3, r3
 800cd6e:	b29b      	uxth	r3, r3
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	061a      	lsls	r2, r3, #24
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	021b      	lsls	r3, r3, #8
 800cd8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd90:	431a      	orrs	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	0a1b      	lsrs	r3, r3, #8
 800cd96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd9a:	431a      	orrs	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	0e1b      	lsrs	r3, r3, #24
 800cda0:	4313      	orrs	r3, r2
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cdb8:	f009 fe30 	bl	8016a1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cdbc:	f000 f8d4 	bl	800cf68 <mem_init>
  memp_init();
 800cdc0:	f000 fc2c 	bl	800d61c <memp_init>
  pbuf_init();
  netif_init();
 800cdc4:	f000 fd38 	bl	800d838 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cdc8:	f007 f91c 	bl	8014004 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cdcc:	f001 fe48 	bl	800ea60 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cdd0:	f007 f85e 	bl	8013e90 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cdd4:	bf00      	nop
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	4603      	mov	r3, r0
 800cde4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cde6:	4b05      	ldr	r3, [pc, #20]	@ (800cdfc <ptr_to_mem+0x20>)
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	88fb      	ldrh	r3, [r7, #6]
 800cdec:	4413      	add	r3, r2
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	20009608 	.word	0x20009608

0800ce00 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ce08:	4b05      	ldr	r3, [pc, #20]	@ (800ce20 <mem_to_ptr+0x20>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	b29b      	uxth	r3, r3
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	20009608 	.word	0x20009608

0800ce24 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ce2c:	4b45      	ldr	r3, [pc, #276]	@ (800cf44 <plug_holes+0x120>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d206      	bcs.n	800ce44 <plug_holes+0x20>
 800ce36:	4b44      	ldr	r3, [pc, #272]	@ (800cf48 <plug_holes+0x124>)
 800ce38:	f240 12df 	movw	r2, #479	@ 0x1df
 800ce3c:	4943      	ldr	r1, [pc, #268]	@ (800cf4c <plug_holes+0x128>)
 800ce3e:	4844      	ldr	r0, [pc, #272]	@ (800cf50 <plug_holes+0x12c>)
 800ce40:	f009 ff76 	bl	8016d30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ce44:	4b43      	ldr	r3, [pc, #268]	@ (800cf54 <plug_holes+0x130>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d306      	bcc.n	800ce5c <plug_holes+0x38>
 800ce4e:	4b3e      	ldr	r3, [pc, #248]	@ (800cf48 <plug_holes+0x124>)
 800ce50:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ce54:	4940      	ldr	r1, [pc, #256]	@ (800cf58 <plug_holes+0x134>)
 800ce56:	483e      	ldr	r0, [pc, #248]	@ (800cf50 <plug_holes+0x12c>)
 800ce58:	f009 ff6a 	bl	8016d30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	791b      	ldrb	r3, [r3, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d006      	beq.n	800ce72 <plug_holes+0x4e>
 800ce64:	4b38      	ldr	r3, [pc, #224]	@ (800cf48 <plug_holes+0x124>)
 800ce66:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ce6a:	493c      	ldr	r1, [pc, #240]	@ (800cf5c <plug_holes+0x138>)
 800ce6c:	4838      	ldr	r0, [pc, #224]	@ (800cf50 <plug_holes+0x12c>)
 800ce6e:	f009 ff5f 	bl	8016d30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	881b      	ldrh	r3, [r3, #0]
 800ce76:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ce7a:	d906      	bls.n	800ce8a <plug_holes+0x66>
 800ce7c:	4b32      	ldr	r3, [pc, #200]	@ (800cf48 <plug_holes+0x124>)
 800ce7e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800ce82:	4937      	ldr	r1, [pc, #220]	@ (800cf60 <plug_holes+0x13c>)
 800ce84:	4832      	ldr	r0, [pc, #200]	@ (800cf50 <plug_holes+0x12c>)
 800ce86:	f009 ff53 	bl	8016d30 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff ffa4 	bl	800cddc <ptr_to_mem>
 800ce94:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d024      	beq.n	800cee8 <plug_holes+0xc4>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	791b      	ldrb	r3, [r3, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d120      	bne.n	800cee8 <plug_holes+0xc4>
 800cea6:	4b2b      	ldr	r3, [pc, #172]	@ (800cf54 <plug_holes+0x130>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d01b      	beq.n	800cee8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ceb0:	4b2c      	ldr	r3, [pc, #176]	@ (800cf64 <plug_holes+0x140>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d102      	bne.n	800cec0 <plug_holes+0x9c>
      lfree = mem;
 800ceba:	4a2a      	ldr	r2, [pc, #168]	@ (800cf64 <plug_holes+0x140>)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	881a      	ldrh	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	881b      	ldrh	r3, [r3, #0]
 800cecc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ced0:	d00a      	beq.n	800cee8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	881b      	ldrh	r3, [r3, #0]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7ff ff80 	bl	800cddc <ptr_to_mem>
 800cedc:	4604      	mov	r4, r0
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7ff ff8e 	bl	800ce00 <mem_to_ptr>
 800cee4:	4603      	mov	r3, r0
 800cee6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	885b      	ldrh	r3, [r3, #2]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff ff75 	bl	800cddc <ptr_to_mem>
 800cef2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d01f      	beq.n	800cf3c <plug_holes+0x118>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	791b      	ldrb	r3, [r3, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d11b      	bne.n	800cf3c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cf04:	4b17      	ldr	r3, [pc, #92]	@ (800cf64 <plug_holes+0x140>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d102      	bne.n	800cf14 <plug_holes+0xf0>
      lfree = pmem;
 800cf0e:	4a15      	ldr	r2, [pc, #84]	@ (800cf64 <plug_holes+0x140>)
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	881a      	ldrh	r2, [r3, #0]
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cf24:	d00a      	beq.n	800cf3c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7ff ff56 	bl	800cddc <ptr_to_mem>
 800cf30:	4604      	mov	r4, r0
 800cf32:	68b8      	ldr	r0, [r7, #8]
 800cf34:	f7ff ff64 	bl	800ce00 <mem_to_ptr>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cf3c:	bf00      	nop
 800cf3e:	3714      	adds	r7, #20
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd90      	pop	{r4, r7, pc}
 800cf44:	20009608 	.word	0x20009608
 800cf48:	08018064 	.word	0x08018064
 800cf4c:	08018094 	.word	0x08018094
 800cf50:	080180ac 	.word	0x080180ac
 800cf54:	2000960c 	.word	0x2000960c
 800cf58:	080180d4 	.word	0x080180d4
 800cf5c:	080180f0 	.word	0x080180f0
 800cf60:	0801810c 	.word	0x0801810c
 800cf64:	20009614 	.word	0x20009614

0800cf68 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cf6e:	4b1d      	ldr	r3, [pc, #116]	@ (800cfe4 <mem_init+0x7c>)
 800cf70:	4a1d      	ldr	r2, [pc, #116]	@ (800cfe8 <mem_init+0x80>)
 800cf72:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cf74:	4b1b      	ldr	r3, [pc, #108]	@ (800cfe4 <mem_init+0x7c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800cf80:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cf8e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800cf92:	f7ff ff23 	bl	800cddc <ptr_to_mem>
 800cf96:	4603      	mov	r3, r0
 800cf98:	4a14      	ldr	r2, [pc, #80]	@ (800cfec <mem_init+0x84>)
 800cf9a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cf9c:	4b13      	ldr	r3, [pc, #76]	@ (800cfec <mem_init+0x84>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cfa4:	4b11      	ldr	r3, [pc, #68]	@ (800cfec <mem_init+0x84>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800cfac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cfae:	4b0f      	ldr	r3, [pc, #60]	@ (800cfec <mem_init+0x84>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800cfb6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cfb8:	4b0a      	ldr	r3, [pc, #40]	@ (800cfe4 <mem_init+0x7c>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a0c      	ldr	r2, [pc, #48]	@ (800cff0 <mem_init+0x88>)
 800cfbe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cfc0:	480c      	ldr	r0, [pc, #48]	@ (800cff4 <mem_init+0x8c>)
 800cfc2:	f009 fd39 	bl	8016a38 <sys_mutex_new>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d006      	beq.n	800cfda <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cfcc:	4b0a      	ldr	r3, [pc, #40]	@ (800cff8 <mem_init+0x90>)
 800cfce:	f240 221f 	movw	r2, #543	@ 0x21f
 800cfd2:	490a      	ldr	r1, [pc, #40]	@ (800cffc <mem_init+0x94>)
 800cfd4:	480a      	ldr	r0, [pc, #40]	@ (800d000 <mem_init+0x98>)
 800cfd6:	f009 feab 	bl	8016d30 <iprintf>
  }
}
 800cfda:	bf00      	nop
 800cfdc:	3708      	adds	r7, #8
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	20009608 	.word	0x20009608
 800cfe8:	20048000 	.word	0x20048000
 800cfec:	2000960c 	.word	0x2000960c
 800cff0:	20009614 	.word	0x20009614
 800cff4:	20009610 	.word	0x20009610
 800cff8:	08018064 	.word	0x08018064
 800cffc:	08018138 	.word	0x08018138
 800d000:	080180ac 	.word	0x080180ac

0800d004 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7ff fef7 	bl	800ce00 <mem_to_ptr>
 800d012:	4603      	mov	r3, r0
 800d014:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7ff fede 	bl	800cddc <ptr_to_mem>
 800d020:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	885b      	ldrh	r3, [r3, #2]
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff fed8 	bl	800cddc <ptr_to_mem>
 800d02c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d036:	d818      	bhi.n	800d06a <mem_link_valid+0x66>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	885b      	ldrh	r3, [r3, #2]
 800d03c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d040:	d813      	bhi.n	800d06a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d046:	8afa      	ldrh	r2, [r7, #22]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d004      	beq.n	800d056 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	8afa      	ldrh	r2, [r7, #22]
 800d052:	429a      	cmp	r2, r3
 800d054:	d109      	bne.n	800d06a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d056:	4b08      	ldr	r3, [pc, #32]	@ (800d078 <mem_link_valid+0x74>)
 800d058:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d05a:	693a      	ldr	r2, [r7, #16]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d006      	beq.n	800d06e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	885b      	ldrh	r3, [r3, #2]
 800d064:	8afa      	ldrh	r2, [r7, #22]
 800d066:	429a      	cmp	r2, r3
 800d068:	d001      	beq.n	800d06e <mem_link_valid+0x6a>
    return 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	e000      	b.n	800d070 <mem_link_valid+0x6c>
  }
  return 1;
 800d06e:	2301      	movs	r3, #1
}
 800d070:	4618      	mov	r0, r3
 800d072:	3718      	adds	r7, #24
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	2000960c 	.word	0x2000960c

0800d07c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b088      	sub	sp, #32
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d070      	beq.n	800d16c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f003 0303 	and.w	r3, r3, #3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00d      	beq.n	800d0b0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d094:	4b37      	ldr	r3, [pc, #220]	@ (800d174 <mem_free+0xf8>)
 800d096:	f240 2273 	movw	r2, #627	@ 0x273
 800d09a:	4937      	ldr	r1, [pc, #220]	@ (800d178 <mem_free+0xfc>)
 800d09c:	4837      	ldr	r0, [pc, #220]	@ (800d17c <mem_free+0x100>)
 800d09e:	f009 fe47 	bl	8016d30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d0a2:	f009 fd27 	bl	8016af4 <sys_arch_protect>
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f009 fd31 	bl	8016b10 <sys_arch_unprotect>
    return;
 800d0ae:	e05e      	b.n	800d16e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	3b08      	subs	r3, #8
 800d0b4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d0b6:	4b32      	ldr	r3, [pc, #200]	@ (800d180 <mem_free+0x104>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	69fa      	ldr	r2, [r7, #28]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d306      	bcc.n	800d0ce <mem_free+0x52>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f103 020c 	add.w	r2, r3, #12
 800d0c6:	4b2f      	ldr	r3, [pc, #188]	@ (800d184 <mem_free+0x108>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d90d      	bls.n	800d0ea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d0ce:	4b29      	ldr	r3, [pc, #164]	@ (800d174 <mem_free+0xf8>)
 800d0d0:	f240 227f 	movw	r2, #639	@ 0x27f
 800d0d4:	492c      	ldr	r1, [pc, #176]	@ (800d188 <mem_free+0x10c>)
 800d0d6:	4829      	ldr	r0, [pc, #164]	@ (800d17c <mem_free+0x100>)
 800d0d8:	f009 fe2a 	bl	8016d30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d0dc:	f009 fd0a 	bl	8016af4 <sys_arch_protect>
 800d0e0:	6138      	str	r0, [r7, #16]
 800d0e2:	6938      	ldr	r0, [r7, #16]
 800d0e4:	f009 fd14 	bl	8016b10 <sys_arch_unprotect>
    return;
 800d0e8:	e041      	b.n	800d16e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d0ea:	4828      	ldr	r0, [pc, #160]	@ (800d18c <mem_free+0x110>)
 800d0ec:	f009 fcc0 	bl	8016a70 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	791b      	ldrb	r3, [r3, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d110      	bne.n	800d11a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d0f8:	4b1e      	ldr	r3, [pc, #120]	@ (800d174 <mem_free+0xf8>)
 800d0fa:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800d0fe:	4924      	ldr	r1, [pc, #144]	@ (800d190 <mem_free+0x114>)
 800d100:	481e      	ldr	r0, [pc, #120]	@ (800d17c <mem_free+0x100>)
 800d102:	f009 fe15 	bl	8016d30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d106:	4821      	ldr	r0, [pc, #132]	@ (800d18c <mem_free+0x110>)
 800d108:	f009 fcc1 	bl	8016a8e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d10c:	f009 fcf2 	bl	8016af4 <sys_arch_protect>
 800d110:	6178      	str	r0, [r7, #20]
 800d112:	6978      	ldr	r0, [r7, #20]
 800d114:	f009 fcfc 	bl	8016b10 <sys_arch_unprotect>
    return;
 800d118:	e029      	b.n	800d16e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d11a:	69f8      	ldr	r0, [r7, #28]
 800d11c:	f7ff ff72 	bl	800d004 <mem_link_valid>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d110      	bne.n	800d148 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d126:	4b13      	ldr	r3, [pc, #76]	@ (800d174 <mem_free+0xf8>)
 800d128:	f240 2295 	movw	r2, #661	@ 0x295
 800d12c:	4919      	ldr	r1, [pc, #100]	@ (800d194 <mem_free+0x118>)
 800d12e:	4813      	ldr	r0, [pc, #76]	@ (800d17c <mem_free+0x100>)
 800d130:	f009 fdfe 	bl	8016d30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d134:	4815      	ldr	r0, [pc, #84]	@ (800d18c <mem_free+0x110>)
 800d136:	f009 fcaa 	bl	8016a8e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d13a:	f009 fcdb 	bl	8016af4 <sys_arch_protect>
 800d13e:	61b8      	str	r0, [r7, #24]
 800d140:	69b8      	ldr	r0, [r7, #24]
 800d142:	f009 fce5 	bl	8016b10 <sys_arch_unprotect>
    return;
 800d146:	e012      	b.n	800d16e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	2200      	movs	r2, #0
 800d14c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d14e:	4b12      	ldr	r3, [pc, #72]	@ (800d198 <mem_free+0x11c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	69fa      	ldr	r2, [r7, #28]
 800d154:	429a      	cmp	r2, r3
 800d156:	d202      	bcs.n	800d15e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d158:	4a0f      	ldr	r2, [pc, #60]	@ (800d198 <mem_free+0x11c>)
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d15e:	69f8      	ldr	r0, [r7, #28]
 800d160:	f7ff fe60 	bl	800ce24 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d164:	4809      	ldr	r0, [pc, #36]	@ (800d18c <mem_free+0x110>)
 800d166:	f009 fc92 	bl	8016a8e <sys_mutex_unlock>
 800d16a:	e000      	b.n	800d16e <mem_free+0xf2>
    return;
 800d16c:	bf00      	nop
}
 800d16e:	3720      	adds	r7, #32
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	08018064 	.word	0x08018064
 800d178:	08018154 	.word	0x08018154
 800d17c:	080180ac 	.word	0x080180ac
 800d180:	20009608 	.word	0x20009608
 800d184:	2000960c 	.word	0x2000960c
 800d188:	08018178 	.word	0x08018178
 800d18c:	20009610 	.word	0x20009610
 800d190:	08018194 	.word	0x08018194
 800d194:	080181bc 	.word	0x080181bc
 800d198:	20009614 	.word	0x20009614

0800d19c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b088      	sub	sp, #32
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d1a8:	887b      	ldrh	r3, [r7, #2]
 800d1aa:	3303      	adds	r3, #3
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f023 0303 	bic.w	r3, r3, #3
 800d1b2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d1b4:	8bfb      	ldrh	r3, [r7, #30]
 800d1b6:	2b0b      	cmp	r3, #11
 800d1b8:	d801      	bhi.n	800d1be <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d1ba:	230c      	movs	r3, #12
 800d1bc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d1be:	8bfb      	ldrh	r3, [r7, #30]
 800d1c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d1c4:	d803      	bhi.n	800d1ce <mem_trim+0x32>
 800d1c6:	8bfa      	ldrh	r2, [r7, #30]
 800d1c8:	887b      	ldrh	r3, [r7, #2]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d201      	bcs.n	800d1d2 <mem_trim+0x36>
    return NULL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	e0d8      	b.n	800d384 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d1d2:	4b6e      	ldr	r3, [pc, #440]	@ (800d38c <mem_trim+0x1f0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d304      	bcc.n	800d1e6 <mem_trim+0x4a>
 800d1dc:	4b6c      	ldr	r3, [pc, #432]	@ (800d390 <mem_trim+0x1f4>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d306      	bcc.n	800d1f4 <mem_trim+0x58>
 800d1e6:	4b6b      	ldr	r3, [pc, #428]	@ (800d394 <mem_trim+0x1f8>)
 800d1e8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d1ec:	496a      	ldr	r1, [pc, #424]	@ (800d398 <mem_trim+0x1fc>)
 800d1ee:	486b      	ldr	r0, [pc, #428]	@ (800d39c <mem_trim+0x200>)
 800d1f0:	f009 fd9e 	bl	8016d30 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d1f4:	4b65      	ldr	r3, [pc, #404]	@ (800d38c <mem_trim+0x1f0>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d304      	bcc.n	800d208 <mem_trim+0x6c>
 800d1fe:	4b64      	ldr	r3, [pc, #400]	@ (800d390 <mem_trim+0x1f4>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	429a      	cmp	r2, r3
 800d206:	d307      	bcc.n	800d218 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d208:	f009 fc74 	bl	8016af4 <sys_arch_protect>
 800d20c:	60b8      	str	r0, [r7, #8]
 800d20e:	68b8      	ldr	r0, [r7, #8]
 800d210:	f009 fc7e 	bl	8016b10 <sys_arch_unprotect>
    return rmem;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	e0b5      	b.n	800d384 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	3b08      	subs	r3, #8
 800d21c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d21e:	69b8      	ldr	r0, [r7, #24]
 800d220:	f7ff fdee 	bl	800ce00 <mem_to_ptr>
 800d224:	4603      	mov	r3, r0
 800d226:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	881a      	ldrh	r2, [r3, #0]
 800d22c:	8afb      	ldrh	r3, [r7, #22]
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	b29b      	uxth	r3, r3
 800d232:	3b08      	subs	r3, #8
 800d234:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d236:	8bfa      	ldrh	r2, [r7, #30]
 800d238:	8abb      	ldrh	r3, [r7, #20]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d906      	bls.n	800d24c <mem_trim+0xb0>
 800d23e:	4b55      	ldr	r3, [pc, #340]	@ (800d394 <mem_trim+0x1f8>)
 800d240:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d244:	4956      	ldr	r1, [pc, #344]	@ (800d3a0 <mem_trim+0x204>)
 800d246:	4855      	ldr	r0, [pc, #340]	@ (800d39c <mem_trim+0x200>)
 800d248:	f009 fd72 	bl	8016d30 <iprintf>
  if (newsize > size) {
 800d24c:	8bfa      	ldrh	r2, [r7, #30]
 800d24e:	8abb      	ldrh	r3, [r7, #20]
 800d250:	429a      	cmp	r2, r3
 800d252:	d901      	bls.n	800d258 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d254:	2300      	movs	r3, #0
 800d256:	e095      	b.n	800d384 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d258:	8bfa      	ldrh	r2, [r7, #30]
 800d25a:	8abb      	ldrh	r3, [r7, #20]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d101      	bne.n	800d264 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	e08f      	b.n	800d384 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d264:	484f      	ldr	r0, [pc, #316]	@ (800d3a4 <mem_trim+0x208>)
 800d266:	f009 fc03 	bl	8016a70 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	4618      	mov	r0, r3
 800d270:	f7ff fdb4 	bl	800cddc <ptr_to_mem>
 800d274:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	791b      	ldrb	r3, [r3, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d13f      	bne.n	800d2fe <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d286:	d106      	bne.n	800d296 <mem_trim+0xfa>
 800d288:	4b42      	ldr	r3, [pc, #264]	@ (800d394 <mem_trim+0x1f8>)
 800d28a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d28e:	4946      	ldr	r1, [pc, #280]	@ (800d3a8 <mem_trim+0x20c>)
 800d290:	4842      	ldr	r0, [pc, #264]	@ (800d39c <mem_trim+0x200>)
 800d292:	f009 fd4d 	bl	8016d30 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d29c:	8afa      	ldrh	r2, [r7, #22]
 800d29e:	8bfb      	ldrh	r3, [r7, #30]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	3308      	adds	r3, #8
 800d2a6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d2a8:	4b40      	ldr	r3, [pc, #256]	@ (800d3ac <mem_trim+0x210>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	693a      	ldr	r2, [r7, #16]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d106      	bne.n	800d2c0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d2b2:	89fb      	ldrh	r3, [r7, #14]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fd91 	bl	800cddc <ptr_to_mem>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	4a3b      	ldr	r2, [pc, #236]	@ (800d3ac <mem_trim+0x210>)
 800d2be:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d2c0:	89fb      	ldrh	r3, [r7, #14]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7ff fd8a 	bl	800cddc <ptr_to_mem>
 800d2c8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	89ba      	ldrh	r2, [r7, #12]
 800d2d4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	8afa      	ldrh	r2, [r7, #22]
 800d2da:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	89fa      	ldrh	r2, [r7, #14]
 800d2e0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	881b      	ldrh	r3, [r3, #0]
 800d2e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d2ea:	d047      	beq.n	800d37c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff fd73 	bl	800cddc <ptr_to_mem>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	89fb      	ldrh	r3, [r7, #14]
 800d2fa:	8053      	strh	r3, [r2, #2]
 800d2fc:	e03e      	b.n	800d37c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d2fe:	8bfb      	ldrh	r3, [r7, #30]
 800d300:	f103 0214 	add.w	r2, r3, #20
 800d304:	8abb      	ldrh	r3, [r7, #20]
 800d306:	429a      	cmp	r2, r3
 800d308:	d838      	bhi.n	800d37c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d30a:	8afa      	ldrh	r2, [r7, #22]
 800d30c:	8bfb      	ldrh	r3, [r7, #30]
 800d30e:	4413      	add	r3, r2
 800d310:	b29b      	uxth	r3, r3
 800d312:	3308      	adds	r3, #8
 800d314:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	881b      	ldrh	r3, [r3, #0]
 800d31a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d31e:	d106      	bne.n	800d32e <mem_trim+0x192>
 800d320:	4b1c      	ldr	r3, [pc, #112]	@ (800d394 <mem_trim+0x1f8>)
 800d322:	f240 3216 	movw	r2, #790	@ 0x316
 800d326:	4920      	ldr	r1, [pc, #128]	@ (800d3a8 <mem_trim+0x20c>)
 800d328:	481c      	ldr	r0, [pc, #112]	@ (800d39c <mem_trim+0x200>)
 800d32a:	f009 fd01 	bl	8016d30 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d32e:	89fb      	ldrh	r3, [r7, #14]
 800d330:	4618      	mov	r0, r3
 800d332:	f7ff fd53 	bl	800cddc <ptr_to_mem>
 800d336:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d338:	4b1c      	ldr	r3, [pc, #112]	@ (800d3ac <mem_trim+0x210>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	693a      	ldr	r2, [r7, #16]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d202      	bcs.n	800d348 <mem_trim+0x1ac>
      lfree = mem2;
 800d342:	4a1a      	ldr	r2, [pc, #104]	@ (800d3ac <mem_trim+0x210>)
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	2200      	movs	r2, #0
 800d34c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	881a      	ldrh	r2, [r3, #0]
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	8afa      	ldrh	r2, [r7, #22]
 800d35a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	89fa      	ldrh	r2, [r7, #14]
 800d360:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d36a:	d007      	beq.n	800d37c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	4618      	mov	r0, r3
 800d372:	f7ff fd33 	bl	800cddc <ptr_to_mem>
 800d376:	4602      	mov	r2, r0
 800d378:	89fb      	ldrh	r3, [r7, #14]
 800d37a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d37c:	4809      	ldr	r0, [pc, #36]	@ (800d3a4 <mem_trim+0x208>)
 800d37e:	f009 fb86 	bl	8016a8e <sys_mutex_unlock>
  return rmem;
 800d382:	687b      	ldr	r3, [r7, #4]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3720      	adds	r7, #32
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	20009608 	.word	0x20009608
 800d390:	2000960c 	.word	0x2000960c
 800d394:	08018064 	.word	0x08018064
 800d398:	080181f0 	.word	0x080181f0
 800d39c:	080180ac 	.word	0x080180ac
 800d3a0:	08018208 	.word	0x08018208
 800d3a4:	20009610 	.word	0x20009610
 800d3a8:	08018228 	.word	0x08018228
 800d3ac:	20009614 	.word	0x20009614

0800d3b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b088      	sub	sp, #32
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d3ba:	88fb      	ldrh	r3, [r7, #6]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d101      	bne.n	800d3c4 <mem_malloc+0x14>
    return NULL;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	e0e2      	b.n	800d58a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d3c4:	88fb      	ldrh	r3, [r7, #6]
 800d3c6:	3303      	adds	r3, #3
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	f023 0303 	bic.w	r3, r3, #3
 800d3ce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d3d0:	8bbb      	ldrh	r3, [r7, #28]
 800d3d2:	2b0b      	cmp	r3, #11
 800d3d4:	d801      	bhi.n	800d3da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d3d6:	230c      	movs	r3, #12
 800d3d8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d3da:	8bbb      	ldrh	r3, [r7, #28]
 800d3dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d3e0:	d803      	bhi.n	800d3ea <mem_malloc+0x3a>
 800d3e2:	8bba      	ldrh	r2, [r7, #28]
 800d3e4:	88fb      	ldrh	r3, [r7, #6]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d201      	bcs.n	800d3ee <mem_malloc+0x3e>
    return NULL;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	e0cd      	b.n	800d58a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d3ee:	4869      	ldr	r0, [pc, #420]	@ (800d594 <mem_malloc+0x1e4>)
 800d3f0:	f009 fb3e 	bl	8016a70 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d3f4:	4b68      	ldr	r3, [pc, #416]	@ (800d598 <mem_malloc+0x1e8>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff fd01 	bl	800ce00 <mem_to_ptr>
 800d3fe:	4603      	mov	r3, r0
 800d400:	83fb      	strh	r3, [r7, #30]
 800d402:	e0b7      	b.n	800d574 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d404:	8bfb      	ldrh	r3, [r7, #30]
 800d406:	4618      	mov	r0, r3
 800d408:	f7ff fce8 	bl	800cddc <ptr_to_mem>
 800d40c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	791b      	ldrb	r3, [r3, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f040 80a7 	bne.w	800d566 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	881b      	ldrh	r3, [r3, #0]
 800d41c:	461a      	mov	r2, r3
 800d41e:	8bfb      	ldrh	r3, [r7, #30]
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	f1a3 0208 	sub.w	r2, r3, #8
 800d426:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d428:	429a      	cmp	r2, r3
 800d42a:	f0c0 809c 	bcc.w	800d566 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	881b      	ldrh	r3, [r3, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	8bfb      	ldrh	r3, [r7, #30]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	f1a3 0208 	sub.w	r2, r3, #8
 800d43c:	8bbb      	ldrh	r3, [r7, #28]
 800d43e:	3314      	adds	r3, #20
 800d440:	429a      	cmp	r2, r3
 800d442:	d333      	bcc.n	800d4ac <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d444:	8bfa      	ldrh	r2, [r7, #30]
 800d446:	8bbb      	ldrh	r3, [r7, #28]
 800d448:	4413      	add	r3, r2
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	3308      	adds	r3, #8
 800d44e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d450:	8a7b      	ldrh	r3, [r7, #18]
 800d452:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d456:	d106      	bne.n	800d466 <mem_malloc+0xb6>
 800d458:	4b50      	ldr	r3, [pc, #320]	@ (800d59c <mem_malloc+0x1ec>)
 800d45a:	f240 3287 	movw	r2, #903	@ 0x387
 800d45e:	4950      	ldr	r1, [pc, #320]	@ (800d5a0 <mem_malloc+0x1f0>)
 800d460:	4850      	ldr	r0, [pc, #320]	@ (800d5a4 <mem_malloc+0x1f4>)
 800d462:	f009 fc65 	bl	8016d30 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d466:	8a7b      	ldrh	r3, [r7, #18]
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff fcb7 	bl	800cddc <ptr_to_mem>
 800d46e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	881a      	ldrh	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	8bfa      	ldrh	r2, [r7, #30]
 800d482:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	8a7a      	ldrh	r2, [r7, #18]
 800d488:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	2201      	movs	r2, #1
 800d48e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	881b      	ldrh	r3, [r3, #0]
 800d494:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d498:	d00b      	beq.n	800d4b2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff fc9c 	bl	800cddc <ptr_to_mem>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	8a7b      	ldrh	r3, [r7, #18]
 800d4a8:	8053      	strh	r3, [r2, #2]
 800d4aa:	e002      	b.n	800d4b2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d4b2:	4b39      	ldr	r3, [pc, #228]	@ (800d598 <mem_malloc+0x1e8>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d127      	bne.n	800d50c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d4bc:	4b36      	ldr	r3, [pc, #216]	@ (800d598 <mem_malloc+0x1e8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d4c2:	e005      	b.n	800d4d0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7ff fc87 	bl	800cddc <ptr_to_mem>
 800d4ce:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	791b      	ldrb	r3, [r3, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d004      	beq.n	800d4e2 <mem_malloc+0x132>
 800d4d8:	4b33      	ldr	r3, [pc, #204]	@ (800d5a8 <mem_malloc+0x1f8>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	69ba      	ldr	r2, [r7, #24]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d1f0      	bne.n	800d4c4 <mem_malloc+0x114>
          }
          lfree = cur;
 800d4e2:	4a2d      	ldr	r2, [pc, #180]	@ (800d598 <mem_malloc+0x1e8>)
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d4e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d598 <mem_malloc+0x1e8>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	4b2e      	ldr	r3, [pc, #184]	@ (800d5a8 <mem_malloc+0x1f8>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d00b      	beq.n	800d50c <mem_malloc+0x15c>
 800d4f4:	4b28      	ldr	r3, [pc, #160]	@ (800d598 <mem_malloc+0x1e8>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	791b      	ldrb	r3, [r3, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d006      	beq.n	800d50c <mem_malloc+0x15c>
 800d4fe:	4b27      	ldr	r3, [pc, #156]	@ (800d59c <mem_malloc+0x1ec>)
 800d500:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d504:	4929      	ldr	r1, [pc, #164]	@ (800d5ac <mem_malloc+0x1fc>)
 800d506:	4827      	ldr	r0, [pc, #156]	@ (800d5a4 <mem_malloc+0x1f4>)
 800d508:	f009 fc12 	bl	8016d30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d50c:	4821      	ldr	r0, [pc, #132]	@ (800d594 <mem_malloc+0x1e4>)
 800d50e:	f009 fabe 	bl	8016a8e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d512:	8bba      	ldrh	r2, [r7, #28]
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	4413      	add	r3, r2
 800d518:	3308      	adds	r3, #8
 800d51a:	4a23      	ldr	r2, [pc, #140]	@ (800d5a8 <mem_malloc+0x1f8>)
 800d51c:	6812      	ldr	r2, [r2, #0]
 800d51e:	4293      	cmp	r3, r2
 800d520:	d906      	bls.n	800d530 <mem_malloc+0x180>
 800d522:	4b1e      	ldr	r3, [pc, #120]	@ (800d59c <mem_malloc+0x1ec>)
 800d524:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d528:	4921      	ldr	r1, [pc, #132]	@ (800d5b0 <mem_malloc+0x200>)
 800d52a:	481e      	ldr	r0, [pc, #120]	@ (800d5a4 <mem_malloc+0x1f4>)
 800d52c:	f009 fc00 	bl	8016d30 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	f003 0303 	and.w	r3, r3, #3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <mem_malloc+0x198>
 800d53a:	4b18      	ldr	r3, [pc, #96]	@ (800d59c <mem_malloc+0x1ec>)
 800d53c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d540:	491c      	ldr	r1, [pc, #112]	@ (800d5b4 <mem_malloc+0x204>)
 800d542:	4818      	ldr	r0, [pc, #96]	@ (800d5a4 <mem_malloc+0x1f4>)
 800d544:	f009 fbf4 	bl	8016d30 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	f003 0303 	and.w	r3, r3, #3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d006      	beq.n	800d560 <mem_malloc+0x1b0>
 800d552:	4b12      	ldr	r3, [pc, #72]	@ (800d59c <mem_malloc+0x1ec>)
 800d554:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d558:	4917      	ldr	r1, [pc, #92]	@ (800d5b8 <mem_malloc+0x208>)
 800d55a:	4812      	ldr	r0, [pc, #72]	@ (800d5a4 <mem_malloc+0x1f4>)
 800d55c:	f009 fbe8 	bl	8016d30 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	3308      	adds	r3, #8
 800d564:	e011      	b.n	800d58a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d566:	8bfb      	ldrh	r3, [r7, #30]
 800d568:	4618      	mov	r0, r3
 800d56a:	f7ff fc37 	bl	800cddc <ptr_to_mem>
 800d56e:	4603      	mov	r3, r0
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d574:	8bfa      	ldrh	r2, [r7, #30]
 800d576:	8bbb      	ldrh	r3, [r7, #28]
 800d578:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800d57c:	429a      	cmp	r2, r3
 800d57e:	f4ff af41 	bcc.w	800d404 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d582:	4804      	ldr	r0, [pc, #16]	@ (800d594 <mem_malloc+0x1e4>)
 800d584:	f009 fa83 	bl	8016a8e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3720      	adds	r7, #32
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20009610 	.word	0x20009610
 800d598:	20009614 	.word	0x20009614
 800d59c:	08018064 	.word	0x08018064
 800d5a0:	08018228 	.word	0x08018228
 800d5a4:	080180ac 	.word	0x080180ac
 800d5a8:	2000960c 	.word	0x2000960c
 800d5ac:	0801823c 	.word	0x0801823c
 800d5b0:	08018258 	.word	0x08018258
 800d5b4:	08018288 	.word	0x08018288
 800d5b8:	080182b8 	.word	0x080182b8

0800d5bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b085      	sub	sp, #20
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	3303      	adds	r3, #3
 800d5d2:	f023 0303 	bic.w	r3, r3, #3
 800d5d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d5d8:	2300      	movs	r3, #0
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	e011      	b.n	800d602 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	885b      	ldrh	r3, [r3, #2]
 800d606:	461a      	mov	r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	4293      	cmp	r3, r2
 800d60c:	dbe7      	blt.n	800d5de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d60e:	bf00      	nop
 800d610:	bf00      	nop
 800d612:	3714      	adds	r7, #20
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d622:	2300      	movs	r3, #0
 800d624:	80fb      	strh	r3, [r7, #6]
 800d626:	e009      	b.n	800d63c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d628:	88fb      	ldrh	r3, [r7, #6]
 800d62a:	4a08      	ldr	r2, [pc, #32]	@ (800d64c <memp_init+0x30>)
 800d62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff ffc3 	bl	800d5bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d636:	88fb      	ldrh	r3, [r7, #6]
 800d638:	3301      	adds	r3, #1
 800d63a:	80fb      	strh	r3, [r7, #6]
 800d63c:	88fb      	ldrh	r3, [r7, #6]
 800d63e:	2b0c      	cmp	r3, #12
 800d640:	d9f2      	bls.n	800d628 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	0801aad4 	.word	0x0801aad4

0800d650 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d658:	f009 fa4c 	bl	8016af4 <sys_arch_protect>
 800d65c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d015      	beq.n	800d698 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	6812      	ldr	r2, [r2, #0]
 800d674:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	f003 0303 	and.w	r3, r3, #3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d006      	beq.n	800d68e <do_memp_malloc_pool+0x3e>
 800d680:	4b09      	ldr	r3, [pc, #36]	@ (800d6a8 <do_memp_malloc_pool+0x58>)
 800d682:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d686:	4909      	ldr	r1, [pc, #36]	@ (800d6ac <do_memp_malloc_pool+0x5c>)
 800d688:	4809      	ldr	r0, [pc, #36]	@ (800d6b0 <do_memp_malloc_pool+0x60>)
 800d68a:	f009 fb51 	bl	8016d30 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f009 fa3e 	bl	8016b10 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	e003      	b.n	800d6a0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f009 fa39 	bl	8016b10 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	080182dc 	.word	0x080182dc
 800d6ac:	0801830c 	.word	0x0801830c
 800d6b0:	08018330 	.word	0x08018330

0800d6b4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d106      	bne.n	800d6d0 <memp_malloc_pool+0x1c>
 800d6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6ec <memp_malloc_pool+0x38>)
 800d6c4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d6c8:	4909      	ldr	r1, [pc, #36]	@ (800d6f0 <memp_malloc_pool+0x3c>)
 800d6ca:	480a      	ldr	r0, [pc, #40]	@ (800d6f4 <memp_malloc_pool+0x40>)
 800d6cc:	f009 fb30 	bl	8016d30 <iprintf>
  if (desc == NULL) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d101      	bne.n	800d6da <memp_malloc_pool+0x26>
    return NULL;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	e003      	b.n	800d6e2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7ff ffb8 	bl	800d650 <do_memp_malloc_pool>
 800d6e0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	080182dc 	.word	0x080182dc
 800d6f0:	08018358 	.word	0x08018358
 800d6f4:	08018330 	.word	0x08018330

0800d6f8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	4603      	mov	r3, r0
 800d700:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	2b0c      	cmp	r3, #12
 800d706:	d908      	bls.n	800d71a <memp_malloc+0x22>
 800d708:	4b0a      	ldr	r3, [pc, #40]	@ (800d734 <memp_malloc+0x3c>)
 800d70a:	f240 1257 	movw	r2, #343	@ 0x157
 800d70e:	490a      	ldr	r1, [pc, #40]	@ (800d738 <memp_malloc+0x40>)
 800d710:	480a      	ldr	r0, [pc, #40]	@ (800d73c <memp_malloc+0x44>)
 800d712:	f009 fb0d 	bl	8016d30 <iprintf>
 800d716:	2300      	movs	r3, #0
 800d718:	e008      	b.n	800d72c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d71a:	79fb      	ldrb	r3, [r7, #7]
 800d71c:	4a08      	ldr	r2, [pc, #32]	@ (800d740 <memp_malloc+0x48>)
 800d71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff ff94 	bl	800d650 <do_memp_malloc_pool>
 800d728:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d72a:	68fb      	ldr	r3, [r7, #12]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	080182dc 	.word	0x080182dc
 800d738:	0801836c 	.word	0x0801836c
 800d73c:	08018330 	.word	0x08018330
 800d740:	0801aad4 	.word	0x0801aad4

0800d744 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	f003 0303 	and.w	r3, r3, #3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <do_memp_free_pool+0x22>
 800d758:	4b0d      	ldr	r3, [pc, #52]	@ (800d790 <do_memp_free_pool+0x4c>)
 800d75a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d75e:	490d      	ldr	r1, [pc, #52]	@ (800d794 <do_memp_free_pool+0x50>)
 800d760:	480d      	ldr	r0, [pc, #52]	@ (800d798 <do_memp_free_pool+0x54>)
 800d762:	f009 fae5 	bl	8016d30 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d76a:	f009 f9c3 	bl	8016af4 <sys_arch_protect>
 800d76e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d782:	68b8      	ldr	r0, [r7, #8]
 800d784:	f009 f9c4 	bl	8016b10 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d788:	bf00      	nop
 800d78a:	3710      	adds	r7, #16
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	080182dc 	.word	0x080182dc
 800d794:	0801838c 	.word	0x0801838c
 800d798:	08018330 	.word	0x08018330

0800d79c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <memp_free_pool+0x1e>
 800d7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d8 <memp_free_pool+0x3c>)
 800d7ae:	f240 1295 	movw	r2, #405	@ 0x195
 800d7b2:	490a      	ldr	r1, [pc, #40]	@ (800d7dc <memp_free_pool+0x40>)
 800d7b4:	480a      	ldr	r0, [pc, #40]	@ (800d7e0 <memp_free_pool+0x44>)
 800d7b6:	f009 fabb 	bl	8016d30 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d007      	beq.n	800d7d0 <memp_free_pool+0x34>
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d004      	beq.n	800d7d0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff ffbb 	bl	800d744 <do_memp_free_pool>
 800d7ce:	e000      	b.n	800d7d2 <memp_free_pool+0x36>
    return;
 800d7d0:	bf00      	nop
}
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	080182dc 	.word	0x080182dc
 800d7dc:	08018358 	.word	0x08018358
 800d7e0:	08018330 	.word	0x08018330

0800d7e4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	6039      	str	r1, [r7, #0]
 800d7ee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	2b0c      	cmp	r3, #12
 800d7f4:	d907      	bls.n	800d806 <memp_free+0x22>
 800d7f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d828 <memp_free+0x44>)
 800d7f8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d7fc:	490b      	ldr	r1, [pc, #44]	@ (800d82c <memp_free+0x48>)
 800d7fe:	480c      	ldr	r0, [pc, #48]	@ (800d830 <memp_free+0x4c>)
 800d800:	f009 fa96 	bl	8016d30 <iprintf>
 800d804:	e00c      	b.n	800d820 <memp_free+0x3c>

  if (mem == NULL) {
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d008      	beq.n	800d81e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d80c:	79fb      	ldrb	r3, [r7, #7]
 800d80e:	4a09      	ldr	r2, [pc, #36]	@ (800d834 <memp_free+0x50>)
 800d810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d814:	6839      	ldr	r1, [r7, #0]
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff ff94 	bl	800d744 <do_memp_free_pool>
 800d81c:	e000      	b.n	800d820 <memp_free+0x3c>
    return;
 800d81e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	080182dc 	.word	0x080182dc
 800d82c:	080183ac 	.word	0x080183ac
 800d830:	08018330 	.word	0x08018330
 800d834:	0801aad4 	.word	0x0801aad4

0800d838 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d838:	b480      	push	{r7}
 800d83a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d83c:	bf00      	nop
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
	...

0800d848 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
 800d854:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d108      	bne.n	800d86e <netif_add+0x26>
 800d85c:	4b57      	ldr	r3, [pc, #348]	@ (800d9bc <netif_add+0x174>)
 800d85e:	f240 1227 	movw	r2, #295	@ 0x127
 800d862:	4957      	ldr	r1, [pc, #348]	@ (800d9c0 <netif_add+0x178>)
 800d864:	4857      	ldr	r0, [pc, #348]	@ (800d9c4 <netif_add+0x17c>)
 800d866:	f009 fa63 	bl	8016d30 <iprintf>
 800d86a:	2300      	movs	r3, #0
 800d86c:	e0a2      	b.n	800d9b4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d870:	2b00      	cmp	r3, #0
 800d872:	d108      	bne.n	800d886 <netif_add+0x3e>
 800d874:	4b51      	ldr	r3, [pc, #324]	@ (800d9bc <netif_add+0x174>)
 800d876:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d87a:	4953      	ldr	r1, [pc, #332]	@ (800d9c8 <netif_add+0x180>)
 800d87c:	4851      	ldr	r0, [pc, #324]	@ (800d9c4 <netif_add+0x17c>)
 800d87e:	f009 fa57 	bl	8016d30 <iprintf>
 800d882:	2300      	movs	r3, #0
 800d884:	e096      	b.n	800d9b4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d88c:	4b4f      	ldr	r3, [pc, #316]	@ (800d9cc <netif_add+0x184>)
 800d88e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d896:	4b4d      	ldr	r3, [pc, #308]	@ (800d9cc <netif_add+0x184>)
 800d898:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d101      	bne.n	800d8a4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d8a0:	4b4a      	ldr	r3, [pc, #296]	@ (800d9cc <netif_add+0x184>)
 800d8a2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	4a45      	ldr	r2, [pc, #276]	@ (800d9d0 <netif_add+0x188>)
 800d8ba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6a3a      	ldr	r2, [r7, #32]
 800d8d4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d8d6:	4b3f      	ldr	r3, [pc, #252]	@ (800d9d4 <netif_add+0x18c>)
 800d8d8:	781a      	ldrb	r2, [r3, #0]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8e4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	68b9      	ldr	r1, [r7, #8]
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f000 f913 	bl	800db18 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	4798      	blx	r3
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d001      	beq.n	800d902 <netif_add+0xba>
    return NULL;
 800d8fe:	2300      	movs	r3, #0
 800d900:	e058      	b.n	800d9b4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d908:	2bff      	cmp	r3, #255	@ 0xff
 800d90a:	d103      	bne.n	800d914 <netif_add+0xcc>
        netif->num = 0;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d918:	4b2f      	ldr	r3, [pc, #188]	@ (800d9d8 <netif_add+0x190>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	617b      	str	r3, [r7, #20]
 800d91e:	e02b      	b.n	800d978 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	429a      	cmp	r2, r3
 800d926:	d106      	bne.n	800d936 <netif_add+0xee>
 800d928:	4b24      	ldr	r3, [pc, #144]	@ (800d9bc <netif_add+0x174>)
 800d92a:	f240 128b 	movw	r2, #395	@ 0x18b
 800d92e:	492b      	ldr	r1, [pc, #172]	@ (800d9dc <netif_add+0x194>)
 800d930:	4824      	ldr	r0, [pc, #144]	@ (800d9c4 <netif_add+0x17c>)
 800d932:	f009 f9fd 	bl	8016d30 <iprintf>
        num_netifs++;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	3301      	adds	r3, #1
 800d93a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	2bff      	cmp	r3, #255	@ 0xff
 800d940:	dd06      	ble.n	800d950 <netif_add+0x108>
 800d942:	4b1e      	ldr	r3, [pc, #120]	@ (800d9bc <netif_add+0x174>)
 800d944:	f240 128d 	movw	r2, #397	@ 0x18d
 800d948:	4925      	ldr	r1, [pc, #148]	@ (800d9e0 <netif_add+0x198>)
 800d94a:	481e      	ldr	r0, [pc, #120]	@ (800d9c4 <netif_add+0x17c>)
 800d94c:	f009 f9f0 	bl	8016d30 <iprintf>
        if (netif2->num == netif->num) {
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d108      	bne.n	800d972 <netif_add+0x12a>
          netif->num++;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d966:	3301      	adds	r3, #1
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d970:	e005      	b.n	800d97e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	617b      	str	r3, [r7, #20]
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1d0      	bne.n	800d920 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1be      	bne.n	800d902 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d98a:	2bfe      	cmp	r3, #254	@ 0xfe
 800d98c:	d103      	bne.n	800d996 <netif_add+0x14e>
    netif_num = 0;
 800d98e:	4b11      	ldr	r3, [pc, #68]	@ (800d9d4 <netif_add+0x18c>)
 800d990:	2200      	movs	r2, #0
 800d992:	701a      	strb	r2, [r3, #0]
 800d994:	e006      	b.n	800d9a4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d99c:	3301      	adds	r3, #1
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800d9d4 <netif_add+0x18c>)
 800d9a2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d9d8 <netif_add+0x190>)
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d9ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d9d8 <netif_add+0x190>)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	080183c8 	.word	0x080183c8
 800d9c0:	0801845c 	.word	0x0801845c
 800d9c4:	08018418 	.word	0x08018418
 800d9c8:	08018478 	.word	0x08018478
 800d9cc:	0801ab48 	.word	0x0801ab48
 800d9d0:	0800ddf3 	.word	0x0800ddf3
 800d9d4:	2000c6ec 	.word	0x2000c6ec
 800d9d8:	2000c6e4 	.word	0x2000c6e4
 800d9dc:	0801849c 	.word	0x0801849c
 800d9e0:	080184b0 	.word	0x080184b0

0800d9e4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d9ee:	6839      	ldr	r1, [r7, #0]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f002 fb7f 	bl	80100f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f006 fc8d 	bl	8014318 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d9fe:	bf00      	nop
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
	...

0800da08 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b086      	sub	sp, #24
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d106      	bne.n	800da28 <netif_do_set_ipaddr+0x20>
 800da1a:	4b1d      	ldr	r3, [pc, #116]	@ (800da90 <netif_do_set_ipaddr+0x88>)
 800da1c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800da20:	491c      	ldr	r1, [pc, #112]	@ (800da94 <netif_do_set_ipaddr+0x8c>)
 800da22:	481d      	ldr	r0, [pc, #116]	@ (800da98 <netif_do_set_ipaddr+0x90>)
 800da24:	f009 f984 	bl	8016d30 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d106      	bne.n	800da3c <netif_do_set_ipaddr+0x34>
 800da2e:	4b18      	ldr	r3, [pc, #96]	@ (800da90 <netif_do_set_ipaddr+0x88>)
 800da30:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800da34:	4917      	ldr	r1, [pc, #92]	@ (800da94 <netif_do_set_ipaddr+0x8c>)
 800da36:	4818      	ldr	r0, [pc, #96]	@ (800da98 <netif_do_set_ipaddr+0x90>)
 800da38:	f009 f97a 	bl	8016d30 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	3304      	adds	r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	429a      	cmp	r2, r3
 800da48:	d01c      	beq.n	800da84 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	3304      	adds	r3, #4
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800da5a:	f107 0314 	add.w	r3, r7, #20
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7ff ffbf 	bl	800d9e4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <netif_do_set_ipaddr+0x6a>
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	e000      	b.n	800da74 <netif_do_set_ipaddr+0x6c>
 800da72:	2300      	movs	r3, #0
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800da78:	2101      	movs	r1, #1
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f000 f8d2 	bl	800dc24 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800da80:	2301      	movs	r3, #1
 800da82:	e000      	b.n	800da86 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800da84:	2300      	movs	r3, #0
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	080183c8 	.word	0x080183c8
 800da94:	080184e0 	.word	0x080184e0
 800da98:	08018418 	.word	0x08018418

0800da9c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3308      	adds	r3, #8
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d00a      	beq.n	800dacc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <netif_do_set_netmask+0x26>
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	e000      	b.n	800dac4 <netif_do_set_netmask+0x28>
 800dac2:	2300      	movs	r3, #0
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dac8:	2301      	movs	r3, #1
 800daca:	e000      	b.n	800dace <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3714      	adds	r7, #20
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr

0800dada <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dada:	b480      	push	{r7}
 800dadc:	b085      	sub	sp, #20
 800dade:	af00      	add	r7, sp, #0
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	330c      	adds	r3, #12
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d00a      	beq.n	800db0a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d002      	beq.n	800db00 <netif_do_set_gw+0x26>
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	e000      	b.n	800db02 <netif_do_set_gw+0x28>
 800db00:	2300      	movs	r3, #0
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800db06:	2301      	movs	r3, #1
 800db08:	e000      	b.n	800db0c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	607a      	str	r2, [r7, #4]
 800db24:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800db26:	2300      	movs	r3, #0
 800db28:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d101      	bne.n	800db38 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800db34:	4b1c      	ldr	r3, [pc, #112]	@ (800dba8 <netif_set_addr+0x90>)
 800db36:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d101      	bne.n	800db42 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800db3e:	4b1a      	ldr	r3, [pc, #104]	@ (800dba8 <netif_set_addr+0x90>)
 800db40:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d101      	bne.n	800db4c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800db48:	4b17      	ldr	r3, [pc, #92]	@ (800dba8 <netif_set_addr+0x90>)
 800db4a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <netif_set_addr+0x42>
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <netif_set_addr+0x46>
 800db5a:	2301      	movs	r3, #1
 800db5c:	e000      	b.n	800db60 <netif_set_addr+0x48>
 800db5e:	2300      	movs	r3, #0
 800db60:	617b      	str	r3, [r7, #20]
  if (remove) {
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d006      	beq.n	800db76 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800db68:	f107 0310 	add.w	r3, r7, #16
 800db6c:	461a      	mov	r2, r3
 800db6e:	68b9      	ldr	r1, [r7, #8]
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f7ff ff49 	bl	800da08 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800db76:	69fa      	ldr	r2, [r7, #28]
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff ff8e 	bl	800da9c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800db80:	69ba      	ldr	r2, [r7, #24]
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f7ff ffa8 	bl	800dada <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d106      	bne.n	800db9e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800db90:	f107 0310 	add.w	r3, r7, #16
 800db94:	461a      	mov	r2, r3
 800db96:	68b9      	ldr	r1, [r7, #8]
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	f7ff ff35 	bl	800da08 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800db9e:	bf00      	nop
 800dba0:	3720      	adds	r7, #32
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	0801ab48 	.word	0x0801ab48

0800dbac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dbb4:	4a04      	ldr	r2, [pc, #16]	@ (800dbc8 <netif_set_default+0x1c>)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dbba:	bf00      	nop
 800dbbc:	370c      	adds	r7, #12
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop
 800dbc8:	2000c6e8 	.word	0x2000c6e8

0800dbcc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d107      	bne.n	800dbea <netif_set_up+0x1e>
 800dbda:	4b0f      	ldr	r3, [pc, #60]	@ (800dc18 <netif_set_up+0x4c>)
 800dbdc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800dbe0:	490e      	ldr	r1, [pc, #56]	@ (800dc1c <netif_set_up+0x50>)
 800dbe2:	480f      	ldr	r0, [pc, #60]	@ (800dc20 <netif_set_up+0x54>)
 800dbe4:	f009 f8a4 	bl	8016d30 <iprintf>
 800dbe8:	e013      	b.n	800dc12 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10c      	bne.n	800dc12 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dbfe:	f043 0301 	orr.w	r3, r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dc0a:	2103      	movs	r1, #3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f809 	bl	800dc24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	080183c8 	.word	0x080183c8
 800dc1c:	08018550 	.word	0x08018550
 800dc20:	08018418 	.word	0x08018418

0800dc24 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d106      	bne.n	800dc44 <netif_issue_reports+0x20>
 800dc36:	4b18      	ldr	r3, [pc, #96]	@ (800dc98 <netif_issue_reports+0x74>)
 800dc38:	f240 326d 	movw	r2, #877	@ 0x36d
 800dc3c:	4917      	ldr	r1, [pc, #92]	@ (800dc9c <netif_issue_reports+0x78>)
 800dc3e:	4818      	ldr	r0, [pc, #96]	@ (800dca0 <netif_issue_reports+0x7c>)
 800dc40:	f009 f876 	bl	8016d30 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc4a:	f003 0304 	and.w	r3, r3, #4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d01e      	beq.n	800dc90 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc58:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d017      	beq.n	800dc90 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dc60:	78fb      	ldrb	r3, [r7, #3]
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d013      	beq.n	800dc92 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00e      	beq.n	800dc92 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc7a:	f003 0308 	and.w	r3, r3, #8
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d007      	beq.n	800dc92 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	3304      	adds	r3, #4
 800dc86:	4619      	mov	r1, r3
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f007 faaf 	bl	80151ec <etharp_request>
 800dc8e:	e000      	b.n	800dc92 <netif_issue_reports+0x6e>
    return;
 800dc90:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	080183c8 	.word	0x080183c8
 800dc9c:	0801856c 	.word	0x0801856c
 800dca0:	08018418 	.word	0x08018418

0800dca4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d107      	bne.n	800dcc2 <netif_set_down+0x1e>
 800dcb2:	4b12      	ldr	r3, [pc, #72]	@ (800dcfc <netif_set_down+0x58>)
 800dcb4:	f240 329b 	movw	r2, #923	@ 0x39b
 800dcb8:	4911      	ldr	r1, [pc, #68]	@ (800dd00 <netif_set_down+0x5c>)
 800dcba:	4812      	ldr	r0, [pc, #72]	@ (800dd04 <netif_set_down+0x60>)
 800dcbc:	f009 f838 	bl	8016d30 <iprintf>
 800dcc0:	e019      	b.n	800dcf6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d012      	beq.n	800dcf6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dcd6:	f023 0301 	bic.w	r3, r3, #1
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dce8:	f003 0308 	and.w	r3, r3, #8
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f006 fe39 	bl	8014968 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	080183c8 	.word	0x080183c8
 800dd00:	08018590 	.word	0x08018590
 800dd04:	08018418 	.word	0x08018418

0800dd08 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d107      	bne.n	800dd26 <netif_set_link_up+0x1e>
 800dd16:	4b13      	ldr	r3, [pc, #76]	@ (800dd64 <netif_set_link_up+0x5c>)
 800dd18:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800dd1c:	4912      	ldr	r1, [pc, #72]	@ (800dd68 <netif_set_link_up+0x60>)
 800dd1e:	4813      	ldr	r0, [pc, #76]	@ (800dd6c <netif_set_link_up+0x64>)
 800dd20:	f009 f806 	bl	8016d30 <iprintf>
 800dd24:	e01b      	b.n	800dd5e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd2c:	f003 0304 	and.w	r3, r3, #4
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d114      	bne.n	800dd5e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd3a:	f043 0304 	orr.w	r3, r3, #4
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dd46:	2103      	movs	r1, #3
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7ff ff6b 	bl	800dc24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	69db      	ldr	r3, [r3, #28]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d003      	beq.n	800dd5e <netif_set_link_up+0x56>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	69db      	ldr	r3, [r3, #28]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	080183c8 	.word	0x080183c8
 800dd68:	080185b0 	.word	0x080185b0
 800dd6c:	08018418 	.word	0x08018418

0800dd70 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d107      	bne.n	800dd8e <netif_set_link_down+0x1e>
 800dd7e:	4b11      	ldr	r3, [pc, #68]	@ (800ddc4 <netif_set_link_down+0x54>)
 800dd80:	f240 4206 	movw	r2, #1030	@ 0x406
 800dd84:	4910      	ldr	r1, [pc, #64]	@ (800ddc8 <netif_set_link_down+0x58>)
 800dd86:	4811      	ldr	r0, [pc, #68]	@ (800ddcc <netif_set_link_down+0x5c>)
 800dd88:	f008 ffd2 	bl	8016d30 <iprintf>
 800dd8c:	e017      	b.n	800ddbe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd94:	f003 0304 	and.w	r3, r3, #4
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d010      	beq.n	800ddbe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dda2:	f023 0304 	bic.w	r3, r3, #4
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	69db      	ldr	r3, [r3, #28]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <netif_set_link_down+0x4e>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	69db      	ldr	r3, [r3, #28]
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	080183c8 	.word	0x080183c8
 800ddc8:	080185d4 	.word	0x080185d4
 800ddcc:	08018418 	.word	0x08018418

0800ddd0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	61da      	str	r2, [r3, #28]
  }
}
 800dde6:	bf00      	nop
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b085      	sub	sp, #20
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	60f8      	str	r0, [r7, #12]
 800ddfa:	60b9      	str	r1, [r7, #8]
 800ddfc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ddfe:	f06f 030b 	mvn.w	r3, #11
}
 800de02:	4618      	mov	r0, r3
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
	...

0800de10 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	4603      	mov	r3, r0
 800de18:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800de1a:	79fb      	ldrb	r3, [r7, #7]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d013      	beq.n	800de48 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800de20:	4b0d      	ldr	r3, [pc, #52]	@ (800de58 <netif_get_by_index+0x48>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	60fb      	str	r3, [r7, #12]
 800de26:	e00c      	b.n	800de42 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de2e:	3301      	adds	r3, #1
 800de30:	b2db      	uxtb	r3, r3
 800de32:	79fa      	ldrb	r2, [r7, #7]
 800de34:	429a      	cmp	r2, r3
 800de36:	d101      	bne.n	800de3c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	e006      	b.n	800de4a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1ef      	bne.n	800de28 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	2000c6e4 	.word	0x2000c6e4

0800de5c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800de62:	f008 fe47 	bl	8016af4 <sys_arch_protect>
 800de66:	6038      	str	r0, [r7, #0]
 800de68:	4b0d      	ldr	r3, [pc, #52]	@ (800dea0 <pbuf_free_ooseq+0x44>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	6838      	ldr	r0, [r7, #0]
 800de70:	f008 fe4e 	bl	8016b10 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800de74:	4b0b      	ldr	r3, [pc, #44]	@ (800dea4 <pbuf_free_ooseq+0x48>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	607b      	str	r3, [r7, #4]
 800de7a:	e00a      	b.n	800de92 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de80:	2b00      	cmp	r3, #0
 800de82:	d003      	beq.n	800de8c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f002 f973 	bl	8010170 <tcp_free_ooseq>
      return;
 800de8a:	e005      	b.n	800de98 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	607b      	str	r3, [r7, #4]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1f1      	bne.n	800de7c <pbuf_free_ooseq+0x20>
    }
  }
}
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	2000c6ed 	.word	0x2000c6ed
 800dea4:	2000c6fc 	.word	0x2000c6fc

0800dea8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800deb0:	f7ff ffd4 	bl	800de5c <pbuf_free_ooseq>
}
 800deb4:	bf00      	nop
 800deb6:	3708      	adds	r7, #8
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800dec2:	f008 fe17 	bl	8016af4 <sys_arch_protect>
 800dec6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800dec8:	4b0f      	ldr	r3, [pc, #60]	@ (800df08 <pbuf_pool_is_empty+0x4c>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800dece:	4b0e      	ldr	r3, [pc, #56]	@ (800df08 <pbuf_pool_is_empty+0x4c>)
 800ded0:	2201      	movs	r2, #1
 800ded2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f008 fe1b 	bl	8016b10 <sys_arch_unprotect>

  if (!queued) {
 800deda:	78fb      	ldrb	r3, [r7, #3]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10f      	bne.n	800df00 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800dee0:	2100      	movs	r1, #0
 800dee2:	480a      	ldr	r0, [pc, #40]	@ (800df0c <pbuf_pool_is_empty+0x50>)
 800dee4:	f7fe feaa 	bl	800cc3c <tcpip_try_callback>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d008      	beq.n	800df00 <pbuf_pool_is_empty+0x44>
 800deee:	f008 fe01 	bl	8016af4 <sys_arch_protect>
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	4b04      	ldr	r3, [pc, #16]	@ (800df08 <pbuf_pool_is_empty+0x4c>)
 800def6:	2200      	movs	r2, #0
 800def8:	701a      	strb	r2, [r3, #0]
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f008 fe08 	bl	8016b10 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800df00:	bf00      	nop
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	2000c6ed 	.word	0x2000c6ed
 800df0c:	0800dea9 	.word	0x0800dea9

0800df10 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800df10:	b480      	push	{r7}
 800df12:	b085      	sub	sp, #20
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	4611      	mov	r1, r2
 800df1c:	461a      	mov	r2, r3
 800df1e:	460b      	mov	r3, r1
 800df20:	80fb      	strh	r3, [r7, #6]
 800df22:	4613      	mov	r3, r2
 800df24:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2200      	movs	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	88fa      	ldrh	r2, [r7, #6]
 800df36:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	88ba      	ldrh	r2, [r7, #4]
 800df3c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800df3e:	8b3b      	ldrh	r3, [r7, #24]
 800df40:	b2da      	uxtb	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	7f3a      	ldrb	r2, [r7, #28]
 800df4a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2201      	movs	r2, #1
 800df50:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	73da      	strb	r2, [r3, #15]
}
 800df58:	bf00      	nop
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b08c      	sub	sp, #48	@ 0x30
 800df68:	af02      	add	r7, sp, #8
 800df6a:	4603      	mov	r3, r0
 800df6c:	71fb      	strb	r3, [r7, #7]
 800df6e:	460b      	mov	r3, r1
 800df70:	80bb      	strh	r3, [r7, #4]
 800df72:	4613      	mov	r3, r2
 800df74:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800df76:	79fb      	ldrb	r3, [r7, #7]
 800df78:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800df7a:	887b      	ldrh	r3, [r7, #2]
 800df7c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800df80:	d07f      	beq.n	800e082 <pbuf_alloc+0x11e>
 800df82:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800df86:	f300 80c8 	bgt.w	800e11a <pbuf_alloc+0x1b6>
 800df8a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800df8e:	d010      	beq.n	800dfb2 <pbuf_alloc+0x4e>
 800df90:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800df94:	f300 80c1 	bgt.w	800e11a <pbuf_alloc+0x1b6>
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d002      	beq.n	800dfa2 <pbuf_alloc+0x3e>
 800df9c:	2b41      	cmp	r3, #65	@ 0x41
 800df9e:	f040 80bc 	bne.w	800e11a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dfa2:	887a      	ldrh	r2, [r7, #2]
 800dfa4:	88bb      	ldrh	r3, [r7, #4]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	f000 f8d1 	bl	800e150 <pbuf_alloc_reference>
 800dfae:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800dfb0:	e0bd      	b.n	800e12e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dfba:	88bb      	ldrh	r3, [r7, #4]
 800dfbc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dfbe:	200c      	movs	r0, #12
 800dfc0:	f7ff fb9a 	bl	800d6f8 <memp_malloc>
 800dfc4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d109      	bne.n	800dfe0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800dfcc:	f7ff ff76 	bl	800debc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d002      	beq.n	800dfdc <pbuf_alloc+0x78>
            pbuf_free(p);
 800dfd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dfd8:	f000 faa8 	bl	800e52c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e0a7      	b.n	800e130 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dfe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dfe2:	3303      	adds	r3, #3
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	f023 0303 	bic.w	r3, r3, #3
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	8b7a      	ldrh	r2, [r7, #26]
 800dff4:	4293      	cmp	r3, r2
 800dff6:	bf28      	it	cs
 800dff8:	4613      	movcs	r3, r2
 800dffa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dffc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dffe:	3310      	adds	r3, #16
 800e000:	693a      	ldr	r2, [r7, #16]
 800e002:	4413      	add	r3, r2
 800e004:	3303      	adds	r3, #3
 800e006:	f023 0303 	bic.w	r3, r3, #3
 800e00a:	4618      	mov	r0, r3
 800e00c:	89f9      	ldrh	r1, [r7, #14]
 800e00e:	8b7a      	ldrh	r2, [r7, #26]
 800e010:	2300      	movs	r3, #0
 800e012:	9301      	str	r3, [sp, #4]
 800e014:	887b      	ldrh	r3, [r7, #2]
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	460b      	mov	r3, r1
 800e01a:	4601      	mov	r1, r0
 800e01c:	6938      	ldr	r0, [r7, #16]
 800e01e:	f7ff ff77 	bl	800df10 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	f003 0303 	and.w	r3, r3, #3
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d006      	beq.n	800e03c <pbuf_alloc+0xd8>
 800e02e:	4b42      	ldr	r3, [pc, #264]	@ (800e138 <pbuf_alloc+0x1d4>)
 800e030:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e034:	4941      	ldr	r1, [pc, #260]	@ (800e13c <pbuf_alloc+0x1d8>)
 800e036:	4842      	ldr	r0, [pc, #264]	@ (800e140 <pbuf_alloc+0x1dc>)
 800e038:	f008 fe7a 	bl	8016d30 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e03c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e03e:	3303      	adds	r3, #3
 800e040:	f023 0303 	bic.w	r3, r3, #3
 800e044:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800e048:	d106      	bne.n	800e058 <pbuf_alloc+0xf4>
 800e04a:	4b3b      	ldr	r3, [pc, #236]	@ (800e138 <pbuf_alloc+0x1d4>)
 800e04c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800e050:	493c      	ldr	r1, [pc, #240]	@ (800e144 <pbuf_alloc+0x1e0>)
 800e052:	483b      	ldr	r0, [pc, #236]	@ (800e140 <pbuf_alloc+0x1dc>)
 800e054:	f008 fe6c 	bl	8016d30 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d102      	bne.n	800e064 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	627b      	str	r3, [r7, #36]	@ 0x24
 800e062:	e002      	b.n	800e06a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	693a      	ldr	r2, [r7, #16]
 800e068:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e06e:	8b7a      	ldrh	r2, [r7, #26]
 800e070:	89fb      	ldrh	r3, [r7, #14]
 800e072:	1ad3      	subs	r3, r2, r3
 800e074:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e076:	2300      	movs	r3, #0
 800e078:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800e07a:	8b7b      	ldrh	r3, [r7, #26]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d19e      	bne.n	800dfbe <pbuf_alloc+0x5a>
      break;
 800e080:	e055      	b.n	800e12e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e082:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e084:	3303      	adds	r3, #3
 800e086:	b29b      	uxth	r3, r3
 800e088:	f023 0303 	bic.w	r3, r3, #3
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	88bb      	ldrh	r3, [r7, #4]
 800e090:	3303      	adds	r3, #3
 800e092:	b29b      	uxth	r3, r3
 800e094:	f023 0303 	bic.w	r3, r3, #3
 800e098:	b29b      	uxth	r3, r3
 800e09a:	4413      	add	r3, r2
 800e09c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e09e:	8b3b      	ldrh	r3, [r7, #24]
 800e0a0:	3310      	adds	r3, #16
 800e0a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e0a4:	8b3a      	ldrh	r2, [r7, #24]
 800e0a6:	88bb      	ldrh	r3, [r7, #4]
 800e0a8:	3303      	adds	r3, #3
 800e0aa:	f023 0303 	bic.w	r3, r3, #3
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d306      	bcc.n	800e0c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e0b2:	8afa      	ldrh	r2, [r7, #22]
 800e0b4:	88bb      	ldrh	r3, [r7, #4]
 800e0b6:	3303      	adds	r3, #3
 800e0b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d201      	bcs.n	800e0c4 <pbuf_alloc+0x160>
        return NULL;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	e035      	b.n	800e130 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e0c4:	8afb      	ldrh	r3, [r7, #22]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff f972 	bl	800d3b0 <mem_malloc>
 800e0cc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <pbuf_alloc+0x174>
        return NULL;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e02b      	b.n	800e130 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e0d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0da:	3310      	adds	r3, #16
 800e0dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0de:	4413      	add	r3, r2
 800e0e0:	3303      	adds	r3, #3
 800e0e2:	f023 0303 	bic.w	r3, r3, #3
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	88b9      	ldrh	r1, [r7, #4]
 800e0ea:	88ba      	ldrh	r2, [r7, #4]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	9301      	str	r3, [sp, #4]
 800e0f0:	887b      	ldrh	r3, [r7, #2]
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4601      	mov	r1, r0
 800e0f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0fa:	f7ff ff09 	bl	800df10 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	f003 0303 	and.w	r3, r3, #3
 800e106:	2b00      	cmp	r3, #0
 800e108:	d010      	beq.n	800e12c <pbuf_alloc+0x1c8>
 800e10a:	4b0b      	ldr	r3, [pc, #44]	@ (800e138 <pbuf_alloc+0x1d4>)
 800e10c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800e110:	490d      	ldr	r1, [pc, #52]	@ (800e148 <pbuf_alloc+0x1e4>)
 800e112:	480b      	ldr	r0, [pc, #44]	@ (800e140 <pbuf_alloc+0x1dc>)
 800e114:	f008 fe0c 	bl	8016d30 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e118:	e008      	b.n	800e12c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e11a:	4b07      	ldr	r3, [pc, #28]	@ (800e138 <pbuf_alloc+0x1d4>)
 800e11c:	f240 1227 	movw	r2, #295	@ 0x127
 800e120:	490a      	ldr	r1, [pc, #40]	@ (800e14c <pbuf_alloc+0x1e8>)
 800e122:	4807      	ldr	r0, [pc, #28]	@ (800e140 <pbuf_alloc+0x1dc>)
 800e124:	f008 fe04 	bl	8016d30 <iprintf>
      return NULL;
 800e128:	2300      	movs	r3, #0
 800e12a:	e001      	b.n	800e130 <pbuf_alloc+0x1cc>
      break;
 800e12c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e130:	4618      	mov	r0, r3
 800e132:	3728      	adds	r7, #40	@ 0x28
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	080185f8 	.word	0x080185f8
 800e13c:	08018628 	.word	0x08018628
 800e140:	08018658 	.word	0x08018658
 800e144:	08018680 	.word	0x08018680
 800e148:	080186b4 	.word	0x080186b4
 800e14c:	080186e0 	.word	0x080186e0

0800e150 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b086      	sub	sp, #24
 800e154:	af02      	add	r7, sp, #8
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	807b      	strh	r3, [r7, #2]
 800e15c:	4613      	mov	r3, r2
 800e15e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e160:	883b      	ldrh	r3, [r7, #0]
 800e162:	2b41      	cmp	r3, #65	@ 0x41
 800e164:	d009      	beq.n	800e17a <pbuf_alloc_reference+0x2a>
 800e166:	883b      	ldrh	r3, [r7, #0]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d006      	beq.n	800e17a <pbuf_alloc_reference+0x2a>
 800e16c:	4b0f      	ldr	r3, [pc, #60]	@ (800e1ac <pbuf_alloc_reference+0x5c>)
 800e16e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800e172:	490f      	ldr	r1, [pc, #60]	@ (800e1b0 <pbuf_alloc_reference+0x60>)
 800e174:	480f      	ldr	r0, [pc, #60]	@ (800e1b4 <pbuf_alloc_reference+0x64>)
 800e176:	f008 fddb 	bl	8016d30 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e17a:	200b      	movs	r0, #11
 800e17c:	f7ff fabc 	bl	800d6f8 <memp_malloc>
 800e180:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d101      	bne.n	800e18c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e188:	2300      	movs	r3, #0
 800e18a:	e00b      	b.n	800e1a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e18c:	8879      	ldrh	r1, [r7, #2]
 800e18e:	887a      	ldrh	r2, [r7, #2]
 800e190:	2300      	movs	r3, #0
 800e192:	9301      	str	r3, [sp, #4]
 800e194:	883b      	ldrh	r3, [r7, #0]
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	460b      	mov	r3, r1
 800e19a:	6879      	ldr	r1, [r7, #4]
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7ff feb7 	bl	800df10 <pbuf_init_alloced_pbuf>
  return p;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	080185f8 	.word	0x080185f8
 800e1b0:	080186fc 	.word	0x080186fc
 800e1b4:	08018658 	.word	0x08018658

0800e1b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af02      	add	r7, sp, #8
 800e1be:	607b      	str	r3, [r7, #4]
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	73fb      	strb	r3, [r7, #15]
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	81bb      	strh	r3, [r7, #12]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e1cc:	7bfb      	ldrb	r3, [r7, #15]
 800e1ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e1d0:	8a7b      	ldrh	r3, [r7, #18]
 800e1d2:	3303      	adds	r3, #3
 800e1d4:	f023 0203 	bic.w	r2, r3, #3
 800e1d8:	89bb      	ldrh	r3, [r7, #12]
 800e1da:	441a      	add	r2, r3
 800e1dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d901      	bls.n	800e1e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e018      	b.n	800e218 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d007      	beq.n	800e1fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e1ec:	8a7b      	ldrh	r3, [r7, #18]
 800e1ee:	3303      	adds	r3, #3
 800e1f0:	f023 0303 	bic.w	r3, r3, #3
 800e1f4:	6a3a      	ldr	r2, [r7, #32]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	617b      	str	r3, [r7, #20]
 800e1fa:	e001      	b.n	800e200 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	89b9      	ldrh	r1, [r7, #12]
 800e204:	89ba      	ldrh	r2, [r7, #12]
 800e206:	2302      	movs	r3, #2
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	897b      	ldrh	r3, [r7, #10]
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	460b      	mov	r3, r1
 800e210:	6979      	ldr	r1, [r7, #20]
 800e212:	f7ff fe7d 	bl	800df10 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e216:	687b      	ldr	r3, [r7, #4]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3718      	adds	r7, #24
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d106      	bne.n	800e240 <pbuf_realloc+0x20>
 800e232:	4b3a      	ldr	r3, [pc, #232]	@ (800e31c <pbuf_realloc+0xfc>)
 800e234:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800e238:	4939      	ldr	r1, [pc, #228]	@ (800e320 <pbuf_realloc+0x100>)
 800e23a:	483a      	ldr	r0, [pc, #232]	@ (800e324 <pbuf_realloc+0x104>)
 800e23c:	f008 fd78 	bl	8016d30 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	891b      	ldrh	r3, [r3, #8]
 800e244:	887a      	ldrh	r2, [r7, #2]
 800e246:	429a      	cmp	r2, r3
 800e248:	d263      	bcs.n	800e312 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	891a      	ldrh	r2, [r3, #8]
 800e24e:	887b      	ldrh	r3, [r7, #2]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e254:	887b      	ldrh	r3, [r7, #2]
 800e256:	817b      	strh	r3, [r7, #10]
  q = p;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e25c:	e018      	b.n	800e290 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	895b      	ldrh	r3, [r3, #10]
 800e262:	897a      	ldrh	r2, [r7, #10]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	891a      	ldrh	r2, [r3, #8]
 800e26c:	893b      	ldrh	r3, [r7, #8]
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	b29a      	uxth	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d106      	bne.n	800e290 <pbuf_realloc+0x70>
 800e282:	4b26      	ldr	r3, [pc, #152]	@ (800e31c <pbuf_realloc+0xfc>)
 800e284:	f240 12af 	movw	r2, #431	@ 0x1af
 800e288:	4927      	ldr	r1, [pc, #156]	@ (800e328 <pbuf_realloc+0x108>)
 800e28a:	4826      	ldr	r0, [pc, #152]	@ (800e324 <pbuf_realloc+0x104>)
 800e28c:	f008 fd50 	bl	8016d30 <iprintf>
  while (rem_len > q->len) {
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	895b      	ldrh	r3, [r3, #10]
 800e294:	897a      	ldrh	r2, [r7, #10]
 800e296:	429a      	cmp	r2, r3
 800e298:	d8e1      	bhi.n	800e25e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	7b1b      	ldrb	r3, [r3, #12]
 800e29e:	f003 030f 	and.w	r3, r3, #15
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d121      	bne.n	800e2ea <pbuf_realloc+0xca>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	895b      	ldrh	r3, [r3, #10]
 800e2aa:	897a      	ldrh	r2, [r7, #10]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d01c      	beq.n	800e2ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	7b5b      	ldrb	r3, [r3, #13]
 800e2b4:	f003 0302 	and.w	r3, r3, #2
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d116      	bne.n	800e2ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	897b      	ldrh	r3, [r7, #10]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	68f8      	ldr	r0, [r7, #12]
 800e2d0:	f7fe ff64 	bl	800d19c <mem_trim>
 800e2d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d106      	bne.n	800e2ea <pbuf_realloc+0xca>
 800e2dc:	4b0f      	ldr	r3, [pc, #60]	@ (800e31c <pbuf_realloc+0xfc>)
 800e2de:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800e2e2:	4912      	ldr	r1, [pc, #72]	@ (800e32c <pbuf_realloc+0x10c>)
 800e2e4:	480f      	ldr	r0, [pc, #60]	@ (800e324 <pbuf_realloc+0x104>)
 800e2e6:	f008 fd23 	bl	8016d30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	897a      	ldrh	r2, [r7, #10]
 800e2ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	895a      	ldrh	r2, [r3, #10]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d004      	beq.n	800e30a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4618      	mov	r0, r3
 800e306:	f000 f911 	bl	800e52c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2200      	movs	r2, #0
 800e30e:	601a      	str	r2, [r3, #0]
 800e310:	e000      	b.n	800e314 <pbuf_realloc+0xf4>
    return;
 800e312:	bf00      	nop

}
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	080185f8 	.word	0x080185f8
 800e320:	08018710 	.word	0x08018710
 800e324:	08018658 	.word	0x08018658
 800e328:	08018728 	.word	0x08018728
 800e32c:	08018740 	.word	0x08018740

0800e330 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b086      	sub	sp, #24
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	4613      	mov	r3, r2
 800e33c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d106      	bne.n	800e352 <pbuf_add_header_impl+0x22>
 800e344:	4b2b      	ldr	r3, [pc, #172]	@ (800e3f4 <pbuf_add_header_impl+0xc4>)
 800e346:	f240 12df 	movw	r2, #479	@ 0x1df
 800e34a:	492b      	ldr	r1, [pc, #172]	@ (800e3f8 <pbuf_add_header_impl+0xc8>)
 800e34c:	482b      	ldr	r0, [pc, #172]	@ (800e3fc <pbuf_add_header_impl+0xcc>)
 800e34e:	f008 fcef 	bl	8016d30 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d003      	beq.n	800e360 <pbuf_add_header_impl+0x30>
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e35e:	d301      	bcc.n	800e364 <pbuf_add_header_impl+0x34>
    return 1;
 800e360:	2301      	movs	r3, #1
 800e362:	e043      	b.n	800e3ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d101      	bne.n	800e36e <pbuf_add_header_impl+0x3e>
    return 0;
 800e36a:	2300      	movs	r3, #0
 800e36c:	e03e      	b.n	800e3ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	891a      	ldrh	r2, [r3, #8]
 800e376:	8a7b      	ldrh	r3, [r7, #18]
 800e378:	4413      	add	r3, r2
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	8a7a      	ldrh	r2, [r7, #18]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d901      	bls.n	800e386 <pbuf_add_header_impl+0x56>
    return 1;
 800e382:	2301      	movs	r3, #1
 800e384:	e032      	b.n	800e3ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	7b1b      	ldrb	r3, [r3, #12]
 800e38a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e38c:	8a3b      	ldrh	r3, [r7, #16]
 800e38e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00c      	beq.n	800e3b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	685a      	ldr	r2, [r3, #4]
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	425b      	negs	r3, r3
 800e39e:	4413      	add	r3, r2
 800e3a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	3310      	adds	r3, #16
 800e3a6:	697a      	ldr	r2, [r7, #20]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d20d      	bcs.n	800e3c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e01d      	b.n	800e3ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d006      	beq.n	800e3c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	425b      	negs	r3, r3
 800e3be:	4413      	add	r3, r2
 800e3c0:	617b      	str	r3, [r7, #20]
 800e3c2:	e001      	b.n	800e3c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e011      	b.n	800e3ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	895a      	ldrh	r2, [r3, #10]
 800e3d2:	8a7b      	ldrh	r3, [r7, #18]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	891a      	ldrh	r2, [r3, #8]
 800e3e0:	8a7b      	ldrh	r3, [r7, #18]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800e3ea:	2300      	movs	r3, #0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3718      	adds	r7, #24
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	080185f8 	.word	0x080185f8
 800e3f8:	0801875c 	.word	0x0801875c
 800e3fc:	08018658 	.word	0x08018658

0800e400 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e40a:	2200      	movs	r2, #0
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f7ff ff8e 	bl	800e330 <pbuf_add_header_impl>
 800e414:	4603      	mov	r3, r0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
	...

0800e420 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d106      	bne.n	800e43e <pbuf_remove_header+0x1e>
 800e430:	4b20      	ldr	r3, [pc, #128]	@ (800e4b4 <pbuf_remove_header+0x94>)
 800e432:	f240 224b 	movw	r2, #587	@ 0x24b
 800e436:	4920      	ldr	r1, [pc, #128]	@ (800e4b8 <pbuf_remove_header+0x98>)
 800e438:	4820      	ldr	r0, [pc, #128]	@ (800e4bc <pbuf_remove_header+0x9c>)
 800e43a:	f008 fc79 	bl	8016d30 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d003      	beq.n	800e44c <pbuf_remove_header+0x2c>
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e44a:	d301      	bcc.n	800e450 <pbuf_remove_header+0x30>
    return 1;
 800e44c:	2301      	movs	r3, #1
 800e44e:	e02c      	b.n	800e4aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <pbuf_remove_header+0x3a>
    return 0;
 800e456:	2300      	movs	r3, #0
 800e458:	e027      	b.n	800e4aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	895b      	ldrh	r3, [r3, #10]
 800e462:	89fa      	ldrh	r2, [r7, #14]
 800e464:	429a      	cmp	r2, r3
 800e466:	d908      	bls.n	800e47a <pbuf_remove_header+0x5a>
 800e468:	4b12      	ldr	r3, [pc, #72]	@ (800e4b4 <pbuf_remove_header+0x94>)
 800e46a:	f240 2255 	movw	r2, #597	@ 0x255
 800e46e:	4914      	ldr	r1, [pc, #80]	@ (800e4c0 <pbuf_remove_header+0xa0>)
 800e470:	4812      	ldr	r0, [pc, #72]	@ (800e4bc <pbuf_remove_header+0x9c>)
 800e472:	f008 fc5d 	bl	8016d30 <iprintf>
 800e476:	2301      	movs	r3, #1
 800e478:	e017      	b.n	800e4aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	685a      	ldr	r2, [r3, #4]
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	441a      	add	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	895a      	ldrh	r2, [r3, #10]
 800e490:	89fb      	ldrh	r3, [r7, #14]
 800e492:	1ad3      	subs	r3, r2, r3
 800e494:	b29a      	uxth	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	891a      	ldrh	r2, [r3, #8]
 800e49e:	89fb      	ldrh	r3, [r7, #14]
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	080185f8 	.word	0x080185f8
 800e4b8:	0801875c 	.word	0x0801875c
 800e4bc:	08018658 	.word	0x08018658
 800e4c0:	08018768 	.word	0x08018768

0800e4c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	807b      	strh	r3, [r7, #2]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e4d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	da08      	bge.n	800e4ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e4dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4e0:	425b      	negs	r3, r3
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff ff9b 	bl	800e420 <pbuf_remove_header>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	e007      	b.n	800e4fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e4ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4f2:	787a      	ldrb	r2, [r7, #1]
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff ff1a 	bl	800e330 <pbuf_add_header_impl>
 800e4fc:	4603      	mov	r3, r0
  }
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
 800e50e:	460b      	mov	r3, r1
 800e510:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e512:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e516:	2201      	movs	r2, #1
 800e518:	4619      	mov	r1, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f7ff ffd2 	bl	800e4c4 <pbuf_header_impl>
 800e520:	4603      	mov	r3, r0
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10b      	bne.n	800e552 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d106      	bne.n	800e54e <pbuf_free+0x22>
 800e540:	4b3b      	ldr	r3, [pc, #236]	@ (800e630 <pbuf_free+0x104>)
 800e542:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e546:	493b      	ldr	r1, [pc, #236]	@ (800e634 <pbuf_free+0x108>)
 800e548:	483b      	ldr	r0, [pc, #236]	@ (800e638 <pbuf_free+0x10c>)
 800e54a:	f008 fbf1 	bl	8016d30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	e069      	b.n	800e626 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e556:	e062      	b.n	800e61e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e558:	f008 facc 	bl	8016af4 <sys_arch_protect>
 800e55c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	7b9b      	ldrb	r3, [r3, #14]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d106      	bne.n	800e574 <pbuf_free+0x48>
 800e566:	4b32      	ldr	r3, [pc, #200]	@ (800e630 <pbuf_free+0x104>)
 800e568:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e56c:	4933      	ldr	r1, [pc, #204]	@ (800e63c <pbuf_free+0x110>)
 800e56e:	4832      	ldr	r0, [pc, #200]	@ (800e638 <pbuf_free+0x10c>)
 800e570:	f008 fbde 	bl	8016d30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7b9b      	ldrb	r3, [r3, #14]
 800e578:	3b01      	subs	r3, #1
 800e57a:	b2da      	uxtb	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	739a      	strb	r2, [r3, #14]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	7b9b      	ldrb	r3, [r3, #14]
 800e584:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e586:	69b8      	ldr	r0, [r7, #24]
 800e588:	f008 fac2 	bl	8016b10 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e58c:	7dfb      	ldrb	r3, [r7, #23]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d143      	bne.n	800e61a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7b1b      	ldrb	r3, [r3, #12]
 800e59c:	f003 030f 	and.w	r3, r3, #15
 800e5a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	7b5b      	ldrb	r3, [r3, #13]
 800e5a6:	f003 0302 	and.w	r3, r3, #2
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d011      	beq.n	800e5d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	691b      	ldr	r3, [r3, #16]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d106      	bne.n	800e5c8 <pbuf_free+0x9c>
 800e5ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e630 <pbuf_free+0x104>)
 800e5bc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e5c0:	491f      	ldr	r1, [pc, #124]	@ (800e640 <pbuf_free+0x114>)
 800e5c2:	481d      	ldr	r0, [pc, #116]	@ (800e638 <pbuf_free+0x10c>)
 800e5c4:	f008 fbb4 	bl	8016d30 <iprintf>
        pc->custom_free_function(p);
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	4798      	blx	r3
 800e5d0:	e01d      	b.n	800e60e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d104      	bne.n	800e5e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	200c      	movs	r0, #12
 800e5dc:	f7ff f902 	bl	800d7e4 <memp_free>
 800e5e0:	e015      	b.n	800e60e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d104      	bne.n	800e5f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e5e8:	6879      	ldr	r1, [r7, #4]
 800e5ea:	200b      	movs	r0, #11
 800e5ec:	f7ff f8fa 	bl	800d7e4 <memp_free>
 800e5f0:	e00d      	b.n	800e60e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d103      	bne.n	800e600 <pbuf_free+0xd4>
          mem_free(p);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7fe fd3f 	bl	800d07c <mem_free>
 800e5fe:	e006      	b.n	800e60e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e600:	4b0b      	ldr	r3, [pc, #44]	@ (800e630 <pbuf_free+0x104>)
 800e602:	f240 320f 	movw	r2, #783	@ 0x30f
 800e606:	490f      	ldr	r1, [pc, #60]	@ (800e644 <pbuf_free+0x118>)
 800e608:	480b      	ldr	r0, [pc, #44]	@ (800e638 <pbuf_free+0x10c>)
 800e60a:	f008 fb91 	bl	8016d30 <iprintf>
        }
      }
      count++;
 800e60e:	7ffb      	ldrb	r3, [r7, #31]
 800e610:	3301      	adds	r3, #1
 800e612:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	607b      	str	r3, [r7, #4]
 800e618:	e001      	b.n	800e61e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d199      	bne.n	800e558 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e624:	7ffb      	ldrb	r3, [r7, #31]
}
 800e626:	4618      	mov	r0, r3
 800e628:	3720      	adds	r7, #32
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	080185f8 	.word	0x080185f8
 800e634:	0801875c 	.word	0x0801875c
 800e638:	08018658 	.word	0x08018658
 800e63c:	08018788 	.word	0x08018788
 800e640:	080187a0 	.word	0x080187a0
 800e644:	080187c4 	.word	0x080187c4

0800e648 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e650:	2300      	movs	r3, #0
 800e652:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e654:	e005      	b.n	800e662 <pbuf_clen+0x1a>
    ++len;
 800e656:	89fb      	ldrh	r3, [r7, #14]
 800e658:	3301      	adds	r3, #1
 800e65a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1f6      	bne.n	800e656 <pbuf_clen+0xe>
  }
  return len;
 800e668:	89fb      	ldrh	r3, [r7, #14]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
	...

0800e678 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b084      	sub	sp, #16
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d016      	beq.n	800e6b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e686:	f008 fa35 	bl	8016af4 <sys_arch_protect>
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	7b9b      	ldrb	r3, [r3, #14]
 800e690:	3301      	adds	r3, #1
 800e692:	b2da      	uxtb	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	739a      	strb	r2, [r3, #14]
 800e698:	68f8      	ldr	r0, [r7, #12]
 800e69a:	f008 fa39 	bl	8016b10 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	7b9b      	ldrb	r3, [r3, #14]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <pbuf_ref+0x3c>
 800e6a6:	4b05      	ldr	r3, [pc, #20]	@ (800e6bc <pbuf_ref+0x44>)
 800e6a8:	f240 3242 	movw	r2, #834	@ 0x342
 800e6ac:	4904      	ldr	r1, [pc, #16]	@ (800e6c0 <pbuf_ref+0x48>)
 800e6ae:	4805      	ldr	r0, [pc, #20]	@ (800e6c4 <pbuf_ref+0x4c>)
 800e6b0:	f008 fb3e 	bl	8016d30 <iprintf>
  }
}
 800e6b4:	bf00      	nop
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	080185f8 	.word	0x080185f8
 800e6c0:	080187d8 	.word	0x080187d8
 800e6c4:	08018658 	.word	0x08018658

0800e6c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d002      	beq.n	800e6de <pbuf_cat+0x16>
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d107      	bne.n	800e6ee <pbuf_cat+0x26>
 800e6de:	4b20      	ldr	r3, [pc, #128]	@ (800e760 <pbuf_cat+0x98>)
 800e6e0:	f240 3259 	movw	r2, #857	@ 0x359
 800e6e4:	491f      	ldr	r1, [pc, #124]	@ (800e764 <pbuf_cat+0x9c>)
 800e6e6:	4820      	ldr	r0, [pc, #128]	@ (800e768 <pbuf_cat+0xa0>)
 800e6e8:	f008 fb22 	bl	8016d30 <iprintf>
 800e6ec:	e034      	b.n	800e758 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	60fb      	str	r3, [r7, #12]
 800e6f2:	e00a      	b.n	800e70a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	891a      	ldrh	r2, [r3, #8]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	891b      	ldrh	r3, [r3, #8]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	60fb      	str	r3, [r7, #12]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1f0      	bne.n	800e6f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	891a      	ldrh	r2, [r3, #8]
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	895b      	ldrh	r3, [r3, #10]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d006      	beq.n	800e72c <pbuf_cat+0x64>
 800e71e:	4b10      	ldr	r3, [pc, #64]	@ (800e760 <pbuf_cat+0x98>)
 800e720:	f240 3262 	movw	r2, #866	@ 0x362
 800e724:	4911      	ldr	r1, [pc, #68]	@ (800e76c <pbuf_cat+0xa4>)
 800e726:	4810      	ldr	r0, [pc, #64]	@ (800e768 <pbuf_cat+0xa0>)
 800e728:	f008 fb02 	bl	8016d30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d006      	beq.n	800e742 <pbuf_cat+0x7a>
 800e734:	4b0a      	ldr	r3, [pc, #40]	@ (800e760 <pbuf_cat+0x98>)
 800e736:	f240 3263 	movw	r2, #867	@ 0x363
 800e73a:	490d      	ldr	r1, [pc, #52]	@ (800e770 <pbuf_cat+0xa8>)
 800e73c:	480a      	ldr	r0, [pc, #40]	@ (800e768 <pbuf_cat+0xa0>)
 800e73e:	f008 faf7 	bl	8016d30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	891a      	ldrh	r2, [r3, #8]
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	891b      	ldrh	r3, [r3, #8]
 800e74a:	4413      	add	r3, r2
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	683a      	ldr	r2, [r7, #0]
 800e756:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	080185f8 	.word	0x080185f8
 800e764:	080187ec 	.word	0x080187ec
 800e768:	08018658 	.word	0x08018658
 800e76c:	08018824 	.word	0x08018824
 800e770:	08018854 	.word	0x08018854

0800e774 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e77e:	2300      	movs	r3, #0
 800e780:	617b      	str	r3, [r7, #20]
 800e782:	2300      	movs	r3, #0
 800e784:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d008      	beq.n	800e79e <pbuf_copy+0x2a>
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d005      	beq.n	800e79e <pbuf_copy+0x2a>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	891a      	ldrh	r2, [r3, #8]
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	891b      	ldrh	r3, [r3, #8]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d209      	bcs.n	800e7b2 <pbuf_copy+0x3e>
 800e79e:	4b57      	ldr	r3, [pc, #348]	@ (800e8fc <pbuf_copy+0x188>)
 800e7a0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e7a4:	4956      	ldr	r1, [pc, #344]	@ (800e900 <pbuf_copy+0x18c>)
 800e7a6:	4857      	ldr	r0, [pc, #348]	@ (800e904 <pbuf_copy+0x190>)
 800e7a8:	f008 fac2 	bl	8016d30 <iprintf>
 800e7ac:	f06f 030f 	mvn.w	r3, #15
 800e7b0:	e09f      	b.n	800e8f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	895b      	ldrh	r3, [r3, #10]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	1ad2      	subs	r2, r2, r3
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	895b      	ldrh	r3, [r3, #10]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	1acb      	subs	r3, r1, r3
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d306      	bcc.n	800e7d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	895b      	ldrh	r3, [r3, #10]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	1ad3      	subs	r3, r2, r3
 800e7d4:	60fb      	str	r3, [r7, #12]
 800e7d6:	e005      	b.n	800e7e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	895b      	ldrh	r3, [r3, #10]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	685a      	ldr	r2, [r3, #4]
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	18d0      	adds	r0, r2, r3
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	f008 fcc5 	bl	8017186 <memcpy>
    offset_to += len;
 800e7fc:	697a      	ldr	r2, [r7, #20]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	4413      	add	r3, r2
 800e802:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e804:	693a      	ldr	r2, [r7, #16]
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	4413      	add	r3, r2
 800e80a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	895b      	ldrh	r3, [r3, #10]
 800e810:	461a      	mov	r2, r3
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	4293      	cmp	r3, r2
 800e816:	d906      	bls.n	800e826 <pbuf_copy+0xb2>
 800e818:	4b38      	ldr	r3, [pc, #224]	@ (800e8fc <pbuf_copy+0x188>)
 800e81a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e81e:	493a      	ldr	r1, [pc, #232]	@ (800e908 <pbuf_copy+0x194>)
 800e820:	4838      	ldr	r0, [pc, #224]	@ (800e904 <pbuf_copy+0x190>)
 800e822:	f008 fa85 	bl	8016d30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	895b      	ldrh	r3, [r3, #10]
 800e82a:	461a      	mov	r2, r3
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	4293      	cmp	r3, r2
 800e830:	d906      	bls.n	800e840 <pbuf_copy+0xcc>
 800e832:	4b32      	ldr	r3, [pc, #200]	@ (800e8fc <pbuf_copy+0x188>)
 800e834:	f240 32da 	movw	r2, #986	@ 0x3da
 800e838:	4934      	ldr	r1, [pc, #208]	@ (800e90c <pbuf_copy+0x198>)
 800e83a:	4832      	ldr	r0, [pc, #200]	@ (800e904 <pbuf_copy+0x190>)
 800e83c:	f008 fa78 	bl	8016d30 <iprintf>
    if (offset_from >= p_from->len) {
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	895b      	ldrh	r3, [r3, #10]
 800e844:	461a      	mov	r2, r3
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	4293      	cmp	r3, r2
 800e84a:	d304      	bcc.n	800e856 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e84c:	2300      	movs	r3, #0
 800e84e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	895b      	ldrh	r3, [r3, #10]
 800e85a:	461a      	mov	r2, r3
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	4293      	cmp	r3, r2
 800e860:	d114      	bne.n	800e88c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d10c      	bne.n	800e88c <pbuf_copy+0x118>
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d009      	beq.n	800e88c <pbuf_copy+0x118>
 800e878:	4b20      	ldr	r3, [pc, #128]	@ (800e8fc <pbuf_copy+0x188>)
 800e87a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e87e:	4924      	ldr	r1, [pc, #144]	@ (800e910 <pbuf_copy+0x19c>)
 800e880:	4820      	ldr	r0, [pc, #128]	@ (800e904 <pbuf_copy+0x190>)
 800e882:	f008 fa55 	bl	8016d30 <iprintf>
 800e886:	f06f 030f 	mvn.w	r3, #15
 800e88a:	e032      	b.n	800e8f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d013      	beq.n	800e8ba <pbuf_copy+0x146>
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	895a      	ldrh	r2, [r3, #10]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	891b      	ldrh	r3, [r3, #8]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d10d      	bne.n	800e8ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d009      	beq.n	800e8ba <pbuf_copy+0x146>
 800e8a6:	4b15      	ldr	r3, [pc, #84]	@ (800e8fc <pbuf_copy+0x188>)
 800e8a8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e8ac:	4919      	ldr	r1, [pc, #100]	@ (800e914 <pbuf_copy+0x1a0>)
 800e8ae:	4815      	ldr	r0, [pc, #84]	@ (800e904 <pbuf_copy+0x190>)
 800e8b0:	f008 fa3e 	bl	8016d30 <iprintf>
 800e8b4:	f06f 0305 	mvn.w	r3, #5
 800e8b8:	e01b      	b.n	800e8f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d013      	beq.n	800e8e8 <pbuf_copy+0x174>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	895a      	ldrh	r2, [r3, #10]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	891b      	ldrh	r3, [r3, #8]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d10d      	bne.n	800e8e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d009      	beq.n	800e8e8 <pbuf_copy+0x174>
 800e8d4:	4b09      	ldr	r3, [pc, #36]	@ (800e8fc <pbuf_copy+0x188>)
 800e8d6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e8da:	490e      	ldr	r1, [pc, #56]	@ (800e914 <pbuf_copy+0x1a0>)
 800e8dc:	4809      	ldr	r0, [pc, #36]	@ (800e904 <pbuf_copy+0x190>)
 800e8de:	f008 fa27 	bl	8016d30 <iprintf>
 800e8e2:	f06f 0305 	mvn.w	r3, #5
 800e8e6:	e004      	b.n	800e8f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f47f af61 	bne.w	800e7b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3718      	adds	r7, #24
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	080185f8 	.word	0x080185f8
 800e900:	080188a0 	.word	0x080188a0
 800e904:	08018658 	.word	0x08018658
 800e908:	080188d0 	.word	0x080188d0
 800e90c:	080188e8 	.word	0x080188e8
 800e910:	08018904 	.word	0x08018904
 800e914:	08018914 	.word	0x08018914

0800e918 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b088      	sub	sp, #32
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	4611      	mov	r1, r2
 800e924:	461a      	mov	r2, r3
 800e926:	460b      	mov	r3, r1
 800e928:	80fb      	strh	r3, [r7, #6]
 800e92a:	4613      	mov	r3, r2
 800e92c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e92e:	2300      	movs	r3, #0
 800e930:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d108      	bne.n	800e94e <pbuf_copy_partial+0x36>
 800e93c:	4b2b      	ldr	r3, [pc, #172]	@ (800e9ec <pbuf_copy_partial+0xd4>)
 800e93e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e942:	492b      	ldr	r1, [pc, #172]	@ (800e9f0 <pbuf_copy_partial+0xd8>)
 800e944:	482b      	ldr	r0, [pc, #172]	@ (800e9f4 <pbuf_copy_partial+0xdc>)
 800e946:	f008 f9f3 	bl	8016d30 <iprintf>
 800e94a:	2300      	movs	r3, #0
 800e94c:	e04a      	b.n	800e9e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d108      	bne.n	800e966 <pbuf_copy_partial+0x4e>
 800e954:	4b25      	ldr	r3, [pc, #148]	@ (800e9ec <pbuf_copy_partial+0xd4>)
 800e956:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e95a:	4927      	ldr	r1, [pc, #156]	@ (800e9f8 <pbuf_copy_partial+0xe0>)
 800e95c:	4825      	ldr	r0, [pc, #148]	@ (800e9f4 <pbuf_copy_partial+0xdc>)
 800e95e:	f008 f9e7 	bl	8016d30 <iprintf>
 800e962:	2300      	movs	r3, #0
 800e964:	e03e      	b.n	800e9e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	61fb      	str	r3, [r7, #28]
 800e96a:	e034      	b.n	800e9d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e96c:	88bb      	ldrh	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00a      	beq.n	800e988 <pbuf_copy_partial+0x70>
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	895b      	ldrh	r3, [r3, #10]
 800e976:	88ba      	ldrh	r2, [r7, #4]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d305      	bcc.n	800e988 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	895b      	ldrh	r3, [r3, #10]
 800e980:	88ba      	ldrh	r2, [r7, #4]
 800e982:	1ad3      	subs	r3, r2, r3
 800e984:	80bb      	strh	r3, [r7, #4]
 800e986:	e023      	b.n	800e9d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	895a      	ldrh	r2, [r3, #10]
 800e98c:	88bb      	ldrh	r3, [r7, #4]
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e992:	8b3a      	ldrh	r2, [r7, #24]
 800e994:	88fb      	ldrh	r3, [r7, #6]
 800e996:	429a      	cmp	r2, r3
 800e998:	d901      	bls.n	800e99e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e99a:	88fb      	ldrh	r3, [r7, #6]
 800e99c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e99e:	8b7b      	ldrh	r3, [r7, #26]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	18d0      	adds	r0, r2, r3
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	685a      	ldr	r2, [r3, #4]
 800e9a8:	88bb      	ldrh	r3, [r7, #4]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	8b3a      	ldrh	r2, [r7, #24]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	f008 fbe9 	bl	8017186 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e9b4:	8afa      	ldrh	r2, [r7, #22]
 800e9b6:	8b3b      	ldrh	r3, [r7, #24]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e9bc:	8b7a      	ldrh	r2, [r7, #26]
 800e9be:	8b3b      	ldrh	r3, [r7, #24]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e9c4:	88fa      	ldrh	r2, [r7, #6]
 800e9c6:	8b3b      	ldrh	r3, [r7, #24]
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	61fb      	str	r3, [r7, #28]
 800e9d6:	88fb      	ldrh	r3, [r7, #6]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d002      	beq.n	800e9e2 <pbuf_copy_partial+0xca>
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1c4      	bne.n	800e96c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e9e2:	8afb      	ldrh	r3, [r7, #22]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3720      	adds	r7, #32
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	080185f8 	.word	0x080185f8
 800e9f0:	08018940 	.word	0x08018940
 800e9f4:	08018658 	.word	0x08018658
 800e9f8:	08018960 	.word	0x08018960

0800e9fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	4603      	mov	r3, r0
 800ea04:	603a      	str	r2, [r7, #0]
 800ea06:	71fb      	strb	r3, [r7, #7]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	8919      	ldrh	r1, [r3, #8]
 800ea10:	88ba      	ldrh	r2, [r7, #4]
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7ff faa5 	bl	800df64 <pbuf_alloc>
 800ea1a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d101      	bne.n	800ea26 <pbuf_clone+0x2a>
    return NULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	e011      	b.n	800ea4a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f7ff fea3 	bl	800e774 <pbuf_copy>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ea32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d006      	beq.n	800ea48 <pbuf_clone+0x4c>
 800ea3a:	4b06      	ldr	r3, [pc, #24]	@ (800ea54 <pbuf_clone+0x58>)
 800ea3c:	f240 5224 	movw	r2, #1316	@ 0x524
 800ea40:	4905      	ldr	r1, [pc, #20]	@ (800ea58 <pbuf_clone+0x5c>)
 800ea42:	4806      	ldr	r0, [pc, #24]	@ (800ea5c <pbuf_clone+0x60>)
 800ea44:	f008 f974 	bl	8016d30 <iprintf>
  return q;
 800ea48:	68fb      	ldr	r3, [r7, #12]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3710      	adds	r7, #16
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	080185f8 	.word	0x080185f8
 800ea58:	08018a6c 	.word	0x08018a6c
 800ea5c:	08018658 	.word	0x08018658

0800ea60 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ea64:	f008 f864 	bl	8016b30 <rand>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	4b01      	ldr	r3, [pc, #4]	@ (800ea80 <tcp_init+0x20>)
 800ea7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ea7c:	bf00      	nop
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20000024 	.word	0x20000024

0800ea84 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	7d1b      	ldrb	r3, [r3, #20]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d105      	bne.n	800eaa0 <tcp_free+0x1c>
 800ea94:	4b06      	ldr	r3, [pc, #24]	@ (800eab0 <tcp_free+0x2c>)
 800ea96:	22d4      	movs	r2, #212	@ 0xd4
 800ea98:	4906      	ldr	r1, [pc, #24]	@ (800eab4 <tcp_free+0x30>)
 800ea9a:	4807      	ldr	r0, [pc, #28]	@ (800eab8 <tcp_free+0x34>)
 800ea9c:	f008 f948 	bl	8016d30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eaa0:	6879      	ldr	r1, [r7, #4]
 800eaa2:	2001      	movs	r0, #1
 800eaa4:	f7fe fe9e 	bl	800d7e4 <memp_free>
}
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	08018af8 	.word	0x08018af8
 800eab4:	08018b28 	.word	0x08018b28
 800eab8:	08018b3c 	.word	0x08018b3c

0800eabc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	7d1b      	ldrb	r3, [r3, #20]
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d105      	bne.n	800ead8 <tcp_free_listen+0x1c>
 800eacc:	4b06      	ldr	r3, [pc, #24]	@ (800eae8 <tcp_free_listen+0x2c>)
 800eace:	22df      	movs	r2, #223	@ 0xdf
 800ead0:	4906      	ldr	r1, [pc, #24]	@ (800eaec <tcp_free_listen+0x30>)
 800ead2:	4807      	ldr	r0, [pc, #28]	@ (800eaf0 <tcp_free_listen+0x34>)
 800ead4:	f008 f92c 	bl	8016d30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ead8:	6879      	ldr	r1, [r7, #4]
 800eada:	2002      	movs	r0, #2
 800eadc:	f7fe fe82 	bl	800d7e4 <memp_free>
}
 800eae0:	bf00      	nop
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	08018af8 	.word	0x08018af8
 800eaec:	08018b64 	.word	0x08018b64
 800eaf0:	08018b3c 	.word	0x08018b3c

0800eaf4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800eaf8:	f000 fea4 	bl	800f844 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800eafc:	4b07      	ldr	r3, [pc, #28]	@ (800eb1c <tcp_tmr+0x28>)
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	3301      	adds	r3, #1
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	4b05      	ldr	r3, [pc, #20]	@ (800eb1c <tcp_tmr+0x28>)
 800eb06:	701a      	strb	r2, [r3, #0]
 800eb08:	4b04      	ldr	r3, [pc, #16]	@ (800eb1c <tcp_tmr+0x28>)
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	f003 0301 	and.w	r3, r3, #1
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d001      	beq.n	800eb18 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800eb14:	f000 fb54 	bl	800f1c0 <tcp_slowtmr>
  }
}
 800eb18:	bf00      	nop
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	2000c705 	.word	0x2000c705

0800eb20 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d105      	bne.n	800eb3c <tcp_remove_listener+0x1c>
 800eb30:	4b0d      	ldr	r3, [pc, #52]	@ (800eb68 <tcp_remove_listener+0x48>)
 800eb32:	22ff      	movs	r2, #255	@ 0xff
 800eb34:	490d      	ldr	r1, [pc, #52]	@ (800eb6c <tcp_remove_listener+0x4c>)
 800eb36:	480e      	ldr	r0, [pc, #56]	@ (800eb70 <tcp_remove_listener+0x50>)
 800eb38:	f008 f8fa 	bl	8016d30 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	60fb      	str	r3, [r7, #12]
 800eb40:	e00a      	b.n	800eb58 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb46:	683a      	ldr	r2, [r7, #0]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d102      	bne.n	800eb52 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	60fb      	str	r3, [r7, #12]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1f1      	bne.n	800eb42 <tcp_remove_listener+0x22>
    }
  }
}
 800eb5e:	bf00      	nop
 800eb60:	bf00      	nop
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	08018af8 	.word	0x08018af8
 800eb6c:	08018b80 	.word	0x08018b80
 800eb70:	08018b3c 	.word	0x08018b3c

0800eb74 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <tcp_listen_closed+0x1c>
 800eb82:	4b14      	ldr	r3, [pc, #80]	@ (800ebd4 <tcp_listen_closed+0x60>)
 800eb84:	f240 1211 	movw	r2, #273	@ 0x111
 800eb88:	4913      	ldr	r1, [pc, #76]	@ (800ebd8 <tcp_listen_closed+0x64>)
 800eb8a:	4814      	ldr	r0, [pc, #80]	@ (800ebdc <tcp_listen_closed+0x68>)
 800eb8c:	f008 f8d0 	bl	8016d30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	7d1b      	ldrb	r3, [r3, #20]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d006      	beq.n	800eba6 <tcp_listen_closed+0x32>
 800eb98:	4b0e      	ldr	r3, [pc, #56]	@ (800ebd4 <tcp_listen_closed+0x60>)
 800eb9a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800eb9e:	4910      	ldr	r1, [pc, #64]	@ (800ebe0 <tcp_listen_closed+0x6c>)
 800eba0:	480e      	ldr	r0, [pc, #56]	@ (800ebdc <tcp_listen_closed+0x68>)
 800eba2:	f008 f8c5 	bl	8016d30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eba6:	2301      	movs	r3, #1
 800eba8:	60fb      	str	r3, [r7, #12]
 800ebaa:	e00b      	b.n	800ebc4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ebac:	4a0d      	ldr	r2, [pc, #52]	@ (800ebe4 <tcp_listen_closed+0x70>)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6879      	ldr	r1, [r7, #4]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7ff ffb1 	bl	800eb20 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	60fb      	str	r3, [r7, #12]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b03      	cmp	r3, #3
 800ebc8:	d9f0      	bls.n	800ebac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ebca:	bf00      	nop
 800ebcc:	bf00      	nop
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	08018af8 	.word	0x08018af8
 800ebd8:	08018ba8 	.word	0x08018ba8
 800ebdc:	08018b3c 	.word	0x08018b3c
 800ebe0:	08018bb4 	.word	0x08018bb4
 800ebe4:	0801ab20 	.word	0x0801ab20

0800ebe8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ebe8:	b5b0      	push	{r4, r5, r7, lr}
 800ebea:	b088      	sub	sp, #32
 800ebec:	af04      	add	r7, sp, #16
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d106      	bne.n	800ec08 <tcp_close_shutdown+0x20>
 800ebfa:	4b63      	ldr	r3, [pc, #396]	@ (800ed88 <tcp_close_shutdown+0x1a0>)
 800ebfc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ec00:	4962      	ldr	r1, [pc, #392]	@ (800ed8c <tcp_close_shutdown+0x1a4>)
 800ec02:	4863      	ldr	r0, [pc, #396]	@ (800ed90 <tcp_close_shutdown+0x1a8>)
 800ec04:	f008 f894 	bl	8016d30 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ec08:	78fb      	ldrb	r3, [r7, #3]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d066      	beq.n	800ecdc <tcp_close_shutdown+0xf4>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	7d1b      	ldrb	r3, [r3, #20]
 800ec12:	2b04      	cmp	r3, #4
 800ec14:	d003      	beq.n	800ec1e <tcp_close_shutdown+0x36>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	7d1b      	ldrb	r3, [r3, #20]
 800ec1a:	2b07      	cmp	r3, #7
 800ec1c:	d15e      	bne.n	800ecdc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d104      	bne.n	800ec30 <tcp_close_shutdown+0x48>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ec2e:	d055      	beq.n	800ecdc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	8b5b      	ldrh	r3, [r3, #26]
 800ec34:	f003 0310 	and.w	r3, r3, #16
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d106      	bne.n	800ec4a <tcp_close_shutdown+0x62>
 800ec3c:	4b52      	ldr	r3, [pc, #328]	@ (800ed88 <tcp_close_shutdown+0x1a0>)
 800ec3e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800ec42:	4954      	ldr	r1, [pc, #336]	@ (800ed94 <tcp_close_shutdown+0x1ac>)
 800ec44:	4852      	ldr	r0, [pc, #328]	@ (800ed90 <tcp_close_shutdown+0x1a8>)
 800ec46:	f008 f873 	bl	8016d30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ec52:	687d      	ldr	r5, [r7, #4]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	3304      	adds	r3, #4
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	8ad2      	ldrh	r2, [r2, #22]
 800ec5c:	6879      	ldr	r1, [r7, #4]
 800ec5e:	8b09      	ldrh	r1, [r1, #24]
 800ec60:	9102      	str	r1, [sp, #8]
 800ec62:	9201      	str	r2, [sp, #4]
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	462b      	mov	r3, r5
 800ec68:	4622      	mov	r2, r4
 800ec6a:	4601      	mov	r1, r0
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f004 fe8d 	bl	801398c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f001 f8c8 	bl	800fe08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ec78:	4b47      	ldr	r3, [pc, #284]	@ (800ed98 <tcp_close_shutdown+0x1b0>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d105      	bne.n	800ec8e <tcp_close_shutdown+0xa6>
 800ec82:	4b45      	ldr	r3, [pc, #276]	@ (800ed98 <tcp_close_shutdown+0x1b0>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	4a43      	ldr	r2, [pc, #268]	@ (800ed98 <tcp_close_shutdown+0x1b0>)
 800ec8a:	6013      	str	r3, [r2, #0]
 800ec8c:	e013      	b.n	800ecb6 <tcp_close_shutdown+0xce>
 800ec8e:	4b42      	ldr	r3, [pc, #264]	@ (800ed98 <tcp_close_shutdown+0x1b0>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	e00c      	b.n	800ecb0 <tcp_close_shutdown+0xc8>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d104      	bne.n	800ecaa <tcp_close_shutdown+0xc2>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	68da      	ldr	r2, [r3, #12]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	60da      	str	r2, [r3, #12]
 800eca8:	e005      	b.n	800ecb6 <tcp_close_shutdown+0xce>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	60fb      	str	r3, [r7, #12]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d1ef      	bne.n	800ec96 <tcp_close_shutdown+0xae>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	60da      	str	r2, [r3, #12]
 800ecbc:	4b37      	ldr	r3, [pc, #220]	@ (800ed9c <tcp_close_shutdown+0x1b4>)
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ecc2:	4b37      	ldr	r3, [pc, #220]	@ (800eda0 <tcp_close_shutdown+0x1b8>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d102      	bne.n	800ecd2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800eccc:	f003 fd5c 	bl	8012788 <tcp_trigger_input_pcb_close>
 800ecd0:	e002      	b.n	800ecd8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f7ff fed6 	bl	800ea84 <tcp_free>
      }
      return ERR_OK;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	e050      	b.n	800ed7e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	7d1b      	ldrb	r3, [r3, #20]
 800ece0:	2b02      	cmp	r3, #2
 800ece2:	d03b      	beq.n	800ed5c <tcp_close_shutdown+0x174>
 800ece4:	2b02      	cmp	r3, #2
 800ece6:	dc44      	bgt.n	800ed72 <tcp_close_shutdown+0x18a>
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <tcp_close_shutdown+0x10a>
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d02a      	beq.n	800ed46 <tcp_close_shutdown+0x15e>
 800ecf0:	e03f      	b.n	800ed72 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	8adb      	ldrh	r3, [r3, #22]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d021      	beq.n	800ed3e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ecfa:	4b2a      	ldr	r3, [pc, #168]	@ (800eda4 <tcp_close_shutdown+0x1bc>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d105      	bne.n	800ed10 <tcp_close_shutdown+0x128>
 800ed04:	4b27      	ldr	r3, [pc, #156]	@ (800eda4 <tcp_close_shutdown+0x1bc>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	4a26      	ldr	r2, [pc, #152]	@ (800eda4 <tcp_close_shutdown+0x1bc>)
 800ed0c:	6013      	str	r3, [r2, #0]
 800ed0e:	e013      	b.n	800ed38 <tcp_close_shutdown+0x150>
 800ed10:	4b24      	ldr	r3, [pc, #144]	@ (800eda4 <tcp_close_shutdown+0x1bc>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	60bb      	str	r3, [r7, #8]
 800ed16:	e00c      	b.n	800ed32 <tcp_close_shutdown+0x14a>
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d104      	bne.n	800ed2c <tcp_close_shutdown+0x144>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	68da      	ldr	r2, [r3, #12]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	60da      	str	r2, [r3, #12]
 800ed2a:	e005      	b.n	800ed38 <tcp_close_shutdown+0x150>
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	60bb      	str	r3, [r7, #8]
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1ef      	bne.n	800ed18 <tcp_close_shutdown+0x130>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7ff fea0 	bl	800ea84 <tcp_free>
      break;
 800ed44:	e01a      	b.n	800ed7c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7ff ff14 	bl	800eb74 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ed4c:	6879      	ldr	r1, [r7, #4]
 800ed4e:	4816      	ldr	r0, [pc, #88]	@ (800eda8 <tcp_close_shutdown+0x1c0>)
 800ed50:	f001 f8aa 	bl	800fea8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f7ff feb1 	bl	800eabc <tcp_free_listen>
      break;
 800ed5a:	e00f      	b.n	800ed7c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ed5c:	6879      	ldr	r1, [r7, #4]
 800ed5e:	480e      	ldr	r0, [pc, #56]	@ (800ed98 <tcp_close_shutdown+0x1b0>)
 800ed60:	f001 f8a2 	bl	800fea8 <tcp_pcb_remove>
 800ed64:	4b0d      	ldr	r3, [pc, #52]	@ (800ed9c <tcp_close_shutdown+0x1b4>)
 800ed66:	2201      	movs	r2, #1
 800ed68:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff fe8a 	bl	800ea84 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ed70:	e004      	b.n	800ed7c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f81a 	bl	800edac <tcp_close_shutdown_fin>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	e000      	b.n	800ed7e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ed7c:	2300      	movs	r3, #0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bdb0      	pop	{r4, r5, r7, pc}
 800ed86:	bf00      	nop
 800ed88:	08018af8 	.word	0x08018af8
 800ed8c:	08018bcc 	.word	0x08018bcc
 800ed90:	08018b3c 	.word	0x08018b3c
 800ed94:	08018bec 	.word	0x08018bec
 800ed98:	2000c6fc 	.word	0x2000c6fc
 800ed9c:	2000c704 	.word	0x2000c704
 800eda0:	2000c73c 	.word	0x2000c73c
 800eda4:	2000c6f4 	.word	0x2000c6f4
 800eda8:	2000c6f8 	.word	0x2000c6f8

0800edac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d106      	bne.n	800edc8 <tcp_close_shutdown_fin+0x1c>
 800edba:	4b2e      	ldr	r3, [pc, #184]	@ (800ee74 <tcp_close_shutdown_fin+0xc8>)
 800edbc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800edc0:	492d      	ldr	r1, [pc, #180]	@ (800ee78 <tcp_close_shutdown_fin+0xcc>)
 800edc2:	482e      	ldr	r0, [pc, #184]	@ (800ee7c <tcp_close_shutdown_fin+0xd0>)
 800edc4:	f007 ffb4 	bl	8016d30 <iprintf>

  switch (pcb->state) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	7d1b      	ldrb	r3, [r3, #20]
 800edcc:	2b07      	cmp	r3, #7
 800edce:	d020      	beq.n	800ee12 <tcp_close_shutdown_fin+0x66>
 800edd0:	2b07      	cmp	r3, #7
 800edd2:	dc2b      	bgt.n	800ee2c <tcp_close_shutdown_fin+0x80>
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d002      	beq.n	800edde <tcp_close_shutdown_fin+0x32>
 800edd8:	2b04      	cmp	r3, #4
 800edda:	d00d      	beq.n	800edf8 <tcp_close_shutdown_fin+0x4c>
 800eddc:	e026      	b.n	800ee2c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f003 fee2 	bl	8012ba8 <tcp_send_fin>
 800ede4:	4603      	mov	r3, r0
 800ede6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ede8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d11f      	bne.n	800ee30 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2205      	movs	r2, #5
 800edf4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800edf6:	e01b      	b.n	800ee30 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f003 fed5 	bl	8012ba8 <tcp_send_fin>
 800edfe:	4603      	mov	r3, r0
 800ee00:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ee02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d114      	bne.n	800ee34 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2205      	movs	r2, #5
 800ee0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee10:	e010      	b.n	800ee34 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f003 fec8 	bl	8012ba8 <tcp_send_fin>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ee1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d109      	bne.n	800ee38 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2209      	movs	r2, #9
 800ee28:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee2a:	e005      	b.n	800ee38 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e01c      	b.n	800ee6a <tcp_close_shutdown_fin+0xbe>
      break;
 800ee30:	bf00      	nop
 800ee32:	e002      	b.n	800ee3a <tcp_close_shutdown_fin+0x8e>
      break;
 800ee34:	bf00      	nop
 800ee36:	e000      	b.n	800ee3a <tcp_close_shutdown_fin+0x8e>
      break;
 800ee38:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ee3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d103      	bne.n	800ee4a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f003 ffee 	bl	8012e24 <tcp_output>
 800ee48:	e00d      	b.n	800ee66 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ee4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ee52:	d108      	bne.n	800ee66 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	8b5b      	ldrh	r3, [r3, #26]
 800ee58:	f043 0308 	orr.w	r3, r3, #8
 800ee5c:	b29a      	uxth	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ee62:	2300      	movs	r3, #0
 800ee64:	e001      	b.n	800ee6a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ee66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	08018af8 	.word	0x08018af8
 800ee78:	08018ba8 	.word	0x08018ba8
 800ee7c:	08018b3c 	.word	0x08018b3c

0800ee80 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d109      	bne.n	800eea2 <tcp_close+0x22>
 800ee8e:	4b0f      	ldr	r3, [pc, #60]	@ (800eecc <tcp_close+0x4c>)
 800ee90:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ee94:	490e      	ldr	r1, [pc, #56]	@ (800eed0 <tcp_close+0x50>)
 800ee96:	480f      	ldr	r0, [pc, #60]	@ (800eed4 <tcp_close+0x54>)
 800ee98:	f007 ff4a 	bl	8016d30 <iprintf>
 800ee9c:	f06f 030f 	mvn.w	r3, #15
 800eea0:	e00f      	b.n	800eec2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	7d1b      	ldrb	r3, [r3, #20]
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d006      	beq.n	800eeb8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8b5b      	ldrh	r3, [r3, #26]
 800eeae:	f043 0310 	orr.w	r3, r3, #16
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800eeb8:	2101      	movs	r1, #1
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff fe94 	bl	800ebe8 <tcp_close_shutdown>
 800eec0:	4603      	mov	r3, r0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	08018af8 	.word	0x08018af8
 800eed0:	08018c08 	.word	0x08018c08
 800eed4:	08018b3c 	.word	0x08018b3c

0800eed8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b08e      	sub	sp, #56	@ 0x38
 800eedc:	af04      	add	r7, sp, #16
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d107      	bne.n	800eef8 <tcp_abandon+0x20>
 800eee8:	4b52      	ldr	r3, [pc, #328]	@ (800f034 <tcp_abandon+0x15c>)
 800eeea:	f240 223d 	movw	r2, #573	@ 0x23d
 800eeee:	4952      	ldr	r1, [pc, #328]	@ (800f038 <tcp_abandon+0x160>)
 800eef0:	4852      	ldr	r0, [pc, #328]	@ (800f03c <tcp_abandon+0x164>)
 800eef2:	f007 ff1d 	bl	8016d30 <iprintf>
 800eef6:	e099      	b.n	800f02c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d106      	bne.n	800ef0e <tcp_abandon+0x36>
 800ef00:	4b4c      	ldr	r3, [pc, #304]	@ (800f034 <tcp_abandon+0x15c>)
 800ef02:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ef06:	494e      	ldr	r1, [pc, #312]	@ (800f040 <tcp_abandon+0x168>)
 800ef08:	484c      	ldr	r0, [pc, #304]	@ (800f03c <tcp_abandon+0x164>)
 800ef0a:	f007 ff11 	bl	8016d30 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	7d1b      	ldrb	r3, [r3, #20]
 800ef12:	2b0a      	cmp	r3, #10
 800ef14:	d107      	bne.n	800ef26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ef16:	6879      	ldr	r1, [r7, #4]
 800ef18:	484a      	ldr	r0, [pc, #296]	@ (800f044 <tcp_abandon+0x16c>)
 800ef1a:	f000 ffc5 	bl	800fea8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f7ff fdb0 	bl	800ea84 <tcp_free>
 800ef24:	e082      	b.n	800f02c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	7d1b      	ldrb	r3, [r3, #20]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d126      	bne.n	800ef9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	8adb      	ldrh	r3, [r3, #22]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d02e      	beq.n	800efb6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ef58:	4b3b      	ldr	r3, [pc, #236]	@ (800f048 <tcp_abandon+0x170>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d105      	bne.n	800ef6e <tcp_abandon+0x96>
 800ef62:	4b39      	ldr	r3, [pc, #228]	@ (800f048 <tcp_abandon+0x170>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	4a37      	ldr	r2, [pc, #220]	@ (800f048 <tcp_abandon+0x170>)
 800ef6a:	6013      	str	r3, [r2, #0]
 800ef6c:	e013      	b.n	800ef96 <tcp_abandon+0xbe>
 800ef6e:	4b36      	ldr	r3, [pc, #216]	@ (800f048 <tcp_abandon+0x170>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	61fb      	str	r3, [r7, #28]
 800ef74:	e00c      	b.n	800ef90 <tcp_abandon+0xb8>
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d104      	bne.n	800ef8a <tcp_abandon+0xb2>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68da      	ldr	r2, [r3, #12]
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	60da      	str	r2, [r3, #12]
 800ef88:	e005      	b.n	800ef96 <tcp_abandon+0xbe>
 800ef8a:	69fb      	ldr	r3, [r7, #28]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	61fb      	str	r3, [r7, #28]
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d1ef      	bne.n	800ef76 <tcp_abandon+0x9e>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	60da      	str	r2, [r3, #12]
 800ef9c:	e00b      	b.n	800efb6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	8adb      	ldrh	r3, [r3, #22]
 800efa6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800efa8:	6879      	ldr	r1, [r7, #4]
 800efaa:	4828      	ldr	r0, [pc, #160]	@ (800f04c <tcp_abandon+0x174>)
 800efac:	f000 ff7c 	bl	800fea8 <tcp_pcb_remove>
 800efb0:	4b27      	ldr	r3, [pc, #156]	@ (800f050 <tcp_abandon+0x178>)
 800efb2:	2201      	movs	r2, #1
 800efb4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d004      	beq.n	800efc8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efc2:	4618      	mov	r0, r3
 800efc4:	f000 fd1e 	bl	800fa04 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d004      	beq.n	800efda <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efd4:	4618      	mov	r0, r3
 800efd6:	f000 fd15 	bl	800fa04 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d004      	beq.n	800efec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efe6:	4618      	mov	r0, r3
 800efe8:	f000 fd0c 	bl	800fa04 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800efec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00e      	beq.n	800f010 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800eff2:	6879      	ldr	r1, [r7, #4]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3304      	adds	r3, #4
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	8b12      	ldrh	r2, [r2, #24]
 800effc:	9202      	str	r2, [sp, #8]
 800effe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f000:	9201      	str	r2, [sp, #4]
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	460b      	mov	r3, r1
 800f006:	697a      	ldr	r2, [r7, #20]
 800f008:	69b9      	ldr	r1, [r7, #24]
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f004 fcbe 	bl	801398c <tcp_rst>
    }
    last_state = pcb->state;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	7d1b      	ldrb	r3, [r3, #20]
 800f014:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f7ff fd34 	bl	800ea84 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d004      	beq.n	800f02c <tcp_abandon+0x154>
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	f06f 010c 	mvn.w	r1, #12
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	4798      	blx	r3
  }
}
 800f02c:	3728      	adds	r7, #40	@ 0x28
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	08018af8 	.word	0x08018af8
 800f038:	08018c3c 	.word	0x08018c3c
 800f03c:	08018b3c 	.word	0x08018b3c
 800f040:	08018c58 	.word	0x08018c58
 800f044:	2000c700 	.word	0x2000c700
 800f048:	2000c6f4 	.word	0x2000c6f4
 800f04c:	2000c6fc 	.word	0x2000c6fc
 800f050:	2000c704 	.word	0x2000c704

0800f054 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f05c:	2101      	movs	r1, #1
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7ff ff3a 	bl	800eed8 <tcp_abandon>
}
 800f064:	bf00      	nop
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d106      	bne.n	800f088 <tcp_update_rcv_ann_wnd+0x1c>
 800f07a:	4b25      	ldr	r3, [pc, #148]	@ (800f110 <tcp_update_rcv_ann_wnd+0xa4>)
 800f07c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f080:	4924      	ldr	r1, [pc, #144]	@ (800f114 <tcp_update_rcv_ann_wnd+0xa8>)
 800f082:	4825      	ldr	r0, [pc, #148]	@ (800f118 <tcp_update_rcv_ann_wnd+0xac>)
 800f084:	f007 fe54 	bl	8016d30 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800f090:	4413      	add	r3, r2
 800f092:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800f09c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800f0a0:	bf28      	it	cs
 800f0a2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800f0a6:	b292      	uxth	r2, r2
 800f0a8:	4413      	add	r3, r2
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	db08      	blt.n	800f0c4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	e020      	b.n	800f106 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	dd03      	ble.n	800f0da <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f0d8:	e014      	b.n	800f104 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0ec:	d306      	bcc.n	800f0fc <tcp_update_rcv_ann_wnd+0x90>
 800f0ee:	4b08      	ldr	r3, [pc, #32]	@ (800f110 <tcp_update_rcv_ann_wnd+0xa4>)
 800f0f0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800f0f4:	4909      	ldr	r1, [pc, #36]	@ (800f11c <tcp_update_rcv_ann_wnd+0xb0>)
 800f0f6:	4808      	ldr	r0, [pc, #32]	@ (800f118 <tcp_update_rcv_ann_wnd+0xac>)
 800f0f8:	f007 fe1a 	bl	8016d30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800f104:	2300      	movs	r3, #0
  }
}
 800f106:	4618      	mov	r0, r3
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	08018af8 	.word	0x08018af8
 800f114:	08018d54 	.word	0x08018d54
 800f118:	08018b3c 	.word	0x08018b3c
 800f11c:	08018d78 	.word	0x08018d78

0800f120 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	460b      	mov	r3, r1
 800f12a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d107      	bne.n	800f142 <tcp_recved+0x22>
 800f132:	4b1f      	ldr	r3, [pc, #124]	@ (800f1b0 <tcp_recved+0x90>)
 800f134:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800f138:	491e      	ldr	r1, [pc, #120]	@ (800f1b4 <tcp_recved+0x94>)
 800f13a:	481f      	ldr	r0, [pc, #124]	@ (800f1b8 <tcp_recved+0x98>)
 800f13c:	f007 fdf8 	bl	8016d30 <iprintf>
 800f140:	e032      	b.n	800f1a8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	7d1b      	ldrb	r3, [r3, #20]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d106      	bne.n	800f158 <tcp_recved+0x38>
 800f14a:	4b19      	ldr	r3, [pc, #100]	@ (800f1b0 <tcp_recved+0x90>)
 800f14c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800f150:	491a      	ldr	r1, [pc, #104]	@ (800f1bc <tcp_recved+0x9c>)
 800f152:	4819      	ldr	r0, [pc, #100]	@ (800f1b8 <tcp_recved+0x98>)
 800f154:	f007 fdec 	bl	8016d30 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f15c:	887b      	ldrh	r3, [r7, #2]
 800f15e:	4413      	add	r3, r2
 800f160:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f162:	89fb      	ldrh	r3, [r7, #14]
 800f164:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f168:	d804      	bhi.n	800f174 <tcp_recved+0x54>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f16e:	89fa      	ldrh	r2, [r7, #14]
 800f170:	429a      	cmp	r2, r3
 800f172:	d204      	bcs.n	800f17e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f17a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f17c:	e002      	b.n	800f184 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	89fa      	ldrh	r2, [r7, #14]
 800f182:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f7ff ff71 	bl	800f06c <tcp_update_rcv_ann_wnd>
 800f18a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f192:	d309      	bcc.n	800f1a8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	8b5b      	ldrh	r3, [r3, #26]
 800f198:	f043 0302 	orr.w	r3, r3, #2
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f003 fe3e 	bl	8012e24 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	08018af8 	.word	0x08018af8
 800f1b4:	08018d94 	.word	0x08018d94
 800f1b8:	08018b3c 	.word	0x08018b3c
 800f1bc:	08018dac 	.word	0x08018dac

0800f1c0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f1c0:	b5b0      	push	{r4, r5, r7, lr}
 800f1c2:	b090      	sub	sp, #64	@ 0x40
 800f1c4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800f1cc:	4b95      	ldr	r3, [pc, #596]	@ (800f424 <tcp_slowtmr+0x264>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	4a94      	ldr	r2, [pc, #592]	@ (800f424 <tcp_slowtmr+0x264>)
 800f1d4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f1d6:	4b94      	ldr	r3, [pc, #592]	@ (800f428 <tcp_slowtmr+0x268>)
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	b2da      	uxtb	r2, r3
 800f1de:	4b92      	ldr	r3, [pc, #584]	@ (800f428 <tcp_slowtmr+0x268>)
 800f1e0:	701a      	strb	r2, [r3, #0]
 800f1e2:	e000      	b.n	800f1e6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800f1e4:	bf00      	nop
  prev = NULL;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800f1ea:	4b90      	ldr	r3, [pc, #576]	@ (800f42c <tcp_slowtmr+0x26c>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f1f0:	e29d      	b.n	800f72e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1f4:	7d1b      	ldrb	r3, [r3, #20]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d106      	bne.n	800f208 <tcp_slowtmr+0x48>
 800f1fa:	4b8d      	ldr	r3, [pc, #564]	@ (800f430 <tcp_slowtmr+0x270>)
 800f1fc:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f200:	498c      	ldr	r1, [pc, #560]	@ (800f434 <tcp_slowtmr+0x274>)
 800f202:	488d      	ldr	r0, [pc, #564]	@ (800f438 <tcp_slowtmr+0x278>)
 800f204:	f007 fd94 	bl	8016d30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f20a:	7d1b      	ldrb	r3, [r3, #20]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d106      	bne.n	800f21e <tcp_slowtmr+0x5e>
 800f210:	4b87      	ldr	r3, [pc, #540]	@ (800f430 <tcp_slowtmr+0x270>)
 800f212:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f216:	4989      	ldr	r1, [pc, #548]	@ (800f43c <tcp_slowtmr+0x27c>)
 800f218:	4887      	ldr	r0, [pc, #540]	@ (800f438 <tcp_slowtmr+0x278>)
 800f21a:	f007 fd89 	bl	8016d30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f220:	7d1b      	ldrb	r3, [r3, #20]
 800f222:	2b0a      	cmp	r3, #10
 800f224:	d106      	bne.n	800f234 <tcp_slowtmr+0x74>
 800f226:	4b82      	ldr	r3, [pc, #520]	@ (800f430 <tcp_slowtmr+0x270>)
 800f228:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f22c:	4984      	ldr	r1, [pc, #528]	@ (800f440 <tcp_slowtmr+0x280>)
 800f22e:	4882      	ldr	r0, [pc, #520]	@ (800f438 <tcp_slowtmr+0x278>)
 800f230:	f007 fd7e 	bl	8016d30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f236:	7f9a      	ldrb	r2, [r3, #30]
 800f238:	4b7b      	ldr	r3, [pc, #492]	@ (800f428 <tcp_slowtmr+0x268>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d105      	bne.n	800f24c <tcp_slowtmr+0x8c>
      prev = pcb;
 800f240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f242:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f24a:	e270      	b.n	800f72e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800f24c:	4b76      	ldr	r3, [pc, #472]	@ (800f428 <tcp_slowtmr+0x268>)
 800f24e:	781a      	ldrb	r2, [r3, #0]
 800f250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f252:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f254:	2300      	movs	r3, #0
 800f256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f25a:	2300      	movs	r3, #0
 800f25c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f262:	7d1b      	ldrb	r3, [r3, #20]
 800f264:	2b02      	cmp	r3, #2
 800f266:	d10a      	bne.n	800f27e <tcp_slowtmr+0xbe>
 800f268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f26e:	2b05      	cmp	r3, #5
 800f270:	d905      	bls.n	800f27e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f272:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f276:	3301      	adds	r3, #1
 800f278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f27c:	e11e      	b.n	800f4bc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f280:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f284:	2b0b      	cmp	r3, #11
 800f286:	d905      	bls.n	800f294 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f28c:	3301      	adds	r3, #1
 800f28e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f292:	e113      	b.n	800f4bc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f296:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d075      	beq.n	800f38a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d006      	beq.n	800f2b4 <tcp_slowtmr+0xf4>
 800f2a6:	4b62      	ldr	r3, [pc, #392]	@ (800f430 <tcp_slowtmr+0x270>)
 800f2a8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f2ac:	4965      	ldr	r1, [pc, #404]	@ (800f444 <tcp_slowtmr+0x284>)
 800f2ae:	4862      	ldr	r0, [pc, #392]	@ (800f438 <tcp_slowtmr+0x278>)
 800f2b0:	f007 fd3e 	bl	8016d30 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d106      	bne.n	800f2ca <tcp_slowtmr+0x10a>
 800f2bc:	4b5c      	ldr	r3, [pc, #368]	@ (800f430 <tcp_slowtmr+0x270>)
 800f2be:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f2c2:	4961      	ldr	r1, [pc, #388]	@ (800f448 <tcp_slowtmr+0x288>)
 800f2c4:	485c      	ldr	r0, [pc, #368]	@ (800f438 <tcp_slowtmr+0x278>)
 800f2c6:	f007 fd33 	bl	8016d30 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2cc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f2d0:	2b0b      	cmp	r3, #11
 800f2d2:	d905      	bls.n	800f2e0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2d8:	3301      	adds	r3, #1
 800f2da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f2de:	e0ed      	b.n	800f4bc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	4a58      	ldr	r2, [pc, #352]	@ (800f44c <tcp_slowtmr+0x28c>)
 800f2ea:	5cd3      	ldrb	r3, [r2, r3]
 800f2ec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f2f4:	7c7a      	ldrb	r2, [r7, #17]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d907      	bls.n	800f30a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f300:	3301      	adds	r3, #1
 800f302:	b2da      	uxtb	r2, r3
 800f304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f306:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800f30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f30c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f310:	7c7a      	ldrb	r2, [r7, #17]
 800f312:	429a      	cmp	r2, r3
 800f314:	f200 80d2 	bhi.w	800f4bc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f318:	2301      	movs	r3, #1
 800f31a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f31e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f322:	2b00      	cmp	r3, #0
 800f324:	d108      	bne.n	800f338 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f326:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f328:	f004 fc24 	bl	8013b74 <tcp_zero_window_probe>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d014      	beq.n	800f35c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f332:	2300      	movs	r3, #0
 800f334:	623b      	str	r3, [r7, #32]
 800f336:	e011      	b.n	800f35c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f33a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f33e:	4619      	mov	r1, r3
 800f340:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f342:	f003 fae9 	bl	8012918 <tcp_split_unsent_seg>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d107      	bne.n	800f35c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f34c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f34e:	f003 fd69 	bl	8012e24 <tcp_output>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f358:	2300      	movs	r3, #0
 800f35a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f000 80ac 	beq.w	800f4bc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f366:	2200      	movs	r2, #0
 800f368:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f36e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f372:	2b06      	cmp	r3, #6
 800f374:	f200 80a2 	bhi.w	800f4bc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f37a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f37e:	3301      	adds	r3, #1
 800f380:	b2da      	uxtb	r2, r3
 800f382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f384:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f388:	e098      	b.n	800f4bc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f38c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f390:	2b00      	cmp	r3, #0
 800f392:	db0f      	blt.n	800f3b4 <tcp_slowtmr+0x1f4>
 800f394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f396:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f39a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d008      	beq.n	800f3b4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	b21a      	sxth	r2, r3
 800f3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3bc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	db7b      	blt.n	800f4bc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f3c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f3c6:	f004 f821 	bl	801340c <tcp_rexmit_rto_prepare>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d007      	beq.n	800f3e0 <tcp_slowtmr+0x220>
 800f3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d171      	bne.n	800f4bc <tcp_slowtmr+0x2fc>
 800f3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d06d      	beq.n	800f4bc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e2:	7d1b      	ldrb	r3, [r3, #20]
 800f3e4:	2b02      	cmp	r3, #2
 800f3e6:	d03a      	beq.n	800f45e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f3ee:	2b0c      	cmp	r3, #12
 800f3f0:	bf28      	it	cs
 800f3f2:	230c      	movcs	r3, #12
 800f3f4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f3fc:	10db      	asrs	r3, r3, #3
 800f3fe:	b21b      	sxth	r3, r3
 800f400:	461a      	mov	r2, r3
 800f402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f404:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f408:	4413      	add	r3, r2
 800f40a:	7efa      	ldrb	r2, [r7, #27]
 800f40c:	4910      	ldr	r1, [pc, #64]	@ (800f450 <tcp_slowtmr+0x290>)
 800f40e:	5c8a      	ldrb	r2, [r1, r2]
 800f410:	4093      	lsls	r3, r2
 800f412:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f41a:	4293      	cmp	r3, r2
 800f41c:	dc1a      	bgt.n	800f454 <tcp_slowtmr+0x294>
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	b21a      	sxth	r2, r3
 800f422:	e019      	b.n	800f458 <tcp_slowtmr+0x298>
 800f424:	2000c6f0 	.word	0x2000c6f0
 800f428:	2000c706 	.word	0x2000c706
 800f42c:	2000c6fc 	.word	0x2000c6fc
 800f430:	08018af8 	.word	0x08018af8
 800f434:	08018e3c 	.word	0x08018e3c
 800f438:	08018b3c 	.word	0x08018b3c
 800f43c:	08018e68 	.word	0x08018e68
 800f440:	08018e94 	.word	0x08018e94
 800f444:	08018ec4 	.word	0x08018ec4
 800f448:	08018ef8 	.word	0x08018ef8
 800f44c:	0801ab18 	.word	0x0801ab18
 800f450:	0801ab08 	.word	0x0801ab08
 800f454:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f460:	2200      	movs	r2, #0
 800f462:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f466:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f470:	4293      	cmp	r3, r2
 800f472:	bf28      	it	cs
 800f474:	4613      	movcs	r3, r2
 800f476:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f478:	8a7b      	ldrh	r3, [r7, #18]
 800f47a:	085b      	lsrs	r3, r3, #1
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f480:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f486:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f48c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f48e:	005b      	lsls	r3, r3, #1
 800f490:	b29b      	uxth	r3, r3
 800f492:	429a      	cmp	r2, r3
 800f494:	d206      	bcs.n	800f4a4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f498:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f49a:	005b      	lsls	r3, r3, #1
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f4b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4b8:	f004 f818 	bl	80134ec <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4be:	7d1b      	ldrb	r3, [r3, #20]
 800f4c0:	2b06      	cmp	r3, #6
 800f4c2:	d111      	bne.n	800f4e8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c6:	8b5b      	ldrh	r3, [r3, #26]
 800f4c8:	f003 0310 	and.w	r3, r3, #16
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00b      	beq.n	800f4e8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f4d0:	4b9c      	ldr	r3, [pc, #624]	@ (800f744 <tcp_slowtmr+0x584>)
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d6:	6a1b      	ldr	r3, [r3, #32]
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	2b28      	cmp	r3, #40	@ 0x28
 800f4dc:	d904      	bls.n	800f4e8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f4de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ea:	7a5b      	ldrb	r3, [r3, #9]
 800f4ec:	f003 0308 	and.w	r3, r3, #8
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d04a      	beq.n	800f58a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f4f8:	2b04      	cmp	r3, #4
 800f4fa:	d003      	beq.n	800f504 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f500:	2b07      	cmp	r3, #7
 800f502:	d142      	bne.n	800f58a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f504:	4b8f      	ldr	r3, [pc, #572]	@ (800f744 <tcp_slowtmr+0x584>)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f50a:	6a1b      	ldr	r3, [r3, #32]
 800f50c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f510:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f514:	4b8c      	ldr	r3, [pc, #560]	@ (800f748 <tcp_slowtmr+0x588>)
 800f516:	440b      	add	r3, r1
 800f518:	498c      	ldr	r1, [pc, #560]	@ (800f74c <tcp_slowtmr+0x58c>)
 800f51a:	fba1 1303 	umull	r1, r3, r1, r3
 800f51e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f520:	429a      	cmp	r2, r3
 800f522:	d90a      	bls.n	800f53a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800f524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f528:	3301      	adds	r3, #1
 800f52a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f52e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f532:	3301      	adds	r3, #1
 800f534:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f538:	e027      	b.n	800f58a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f53a:	4b82      	ldr	r3, [pc, #520]	@ (800f744 <tcp_slowtmr+0x584>)
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f540:	6a1b      	ldr	r3, [r3, #32]
 800f542:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f546:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f54c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f550:	4618      	mov	r0, r3
 800f552:	4b7f      	ldr	r3, [pc, #508]	@ (800f750 <tcp_slowtmr+0x590>)
 800f554:	fb00 f303 	mul.w	r3, r0, r3
 800f558:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f55a:	497c      	ldr	r1, [pc, #496]	@ (800f74c <tcp_slowtmr+0x58c>)
 800f55c:	fba1 1303 	umull	r1, r3, r1, r3
 800f560:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f562:	429a      	cmp	r2, r3
 800f564:	d911      	bls.n	800f58a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f566:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f568:	f004 fac4 	bl	8013af4 <tcp_keepalive>
 800f56c:	4603      	mov	r3, r0
 800f56e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f572:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f576:	2b00      	cmp	r3, #0
 800f578:	d107      	bne.n	800f58a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f57c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f580:	3301      	adds	r3, #1
 800f582:	b2da      	uxtb	r2, r3
 800f584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f586:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f58c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d011      	beq.n	800f5b6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f592:	4b6c      	ldr	r3, [pc, #432]	@ (800f744 <tcp_slowtmr+0x584>)
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f598:	6a1b      	ldr	r3, [r3, #32]
 800f59a:	1ad2      	subs	r2, r2, r3
 800f59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f59e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	440b      	add	r3, r1
 800f5aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d302      	bcc.n	800f5b6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800f5b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5b2:	f000 fddd 	bl	8010170 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5b8:	7d1b      	ldrb	r3, [r3, #20]
 800f5ba:	2b03      	cmp	r3, #3
 800f5bc:	d10b      	bne.n	800f5d6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5be:	4b61      	ldr	r3, [pc, #388]	@ (800f744 <tcp_slowtmr+0x584>)
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c4:	6a1b      	ldr	r3, [r3, #32]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	2b28      	cmp	r3, #40	@ 0x28
 800f5ca:	d904      	bls.n	800f5d6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800f5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5d8:	7d1b      	ldrb	r3, [r3, #20]
 800f5da:	2b09      	cmp	r3, #9
 800f5dc:	d10b      	bne.n	800f5f6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f5de:	4b59      	ldr	r3, [pc, #356]	@ (800f744 <tcp_slowtmr+0x584>)
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5e4:	6a1b      	ldr	r3, [r3, #32]
 800f5e6:	1ad3      	subs	r3, r2, r3
 800f5e8:	2bf0      	cmp	r3, #240	@ 0xf0
 800f5ea:	d904      	bls.n	800f5f6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f5f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d060      	beq.n	800f6c0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800f5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f604:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f606:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f608:	f000 fbfe 	bl	800fe08 <tcp_pcb_purge>
      if (prev != NULL) {
 800f60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d010      	beq.n	800f634 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f612:	4b50      	ldr	r3, [pc, #320]	@ (800f754 <tcp_slowtmr+0x594>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f618:	429a      	cmp	r2, r3
 800f61a:	d106      	bne.n	800f62a <tcp_slowtmr+0x46a>
 800f61c:	4b4e      	ldr	r3, [pc, #312]	@ (800f758 <tcp_slowtmr+0x598>)
 800f61e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f622:	494e      	ldr	r1, [pc, #312]	@ (800f75c <tcp_slowtmr+0x59c>)
 800f624:	484e      	ldr	r0, [pc, #312]	@ (800f760 <tcp_slowtmr+0x5a0>)
 800f626:	f007 fb83 	bl	8016d30 <iprintf>
        prev->next = pcb->next;
 800f62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f62c:	68da      	ldr	r2, [r3, #12]
 800f62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f630:	60da      	str	r2, [r3, #12]
 800f632:	e00f      	b.n	800f654 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f634:	4b47      	ldr	r3, [pc, #284]	@ (800f754 <tcp_slowtmr+0x594>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d006      	beq.n	800f64c <tcp_slowtmr+0x48c>
 800f63e:	4b46      	ldr	r3, [pc, #280]	@ (800f758 <tcp_slowtmr+0x598>)
 800f640:	f240 5271 	movw	r2, #1393	@ 0x571
 800f644:	4947      	ldr	r1, [pc, #284]	@ (800f764 <tcp_slowtmr+0x5a4>)
 800f646:	4846      	ldr	r0, [pc, #280]	@ (800f760 <tcp_slowtmr+0x5a0>)
 800f648:	f007 fb72 	bl	8016d30 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	4a40      	ldr	r2, [pc, #256]	@ (800f754 <tcp_slowtmr+0x594>)
 800f652:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f654:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d013      	beq.n	800f684 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f65e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f662:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f664:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f668:	3304      	adds	r3, #4
 800f66a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f66c:	8ad2      	ldrh	r2, [r2, #22]
 800f66e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f670:	8b09      	ldrh	r1, [r1, #24]
 800f672:	9102      	str	r1, [sp, #8]
 800f674:	9201      	str	r2, [sp, #4]
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	462b      	mov	r3, r5
 800f67a:	4622      	mov	r2, r4
 800f67c:	4601      	mov	r1, r0
 800f67e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f680:	f004 f984 	bl	801398c <tcp_rst>
      err_arg = pcb->callback_arg;
 800f684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f686:	691b      	ldr	r3, [r3, #16]
 800f688:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f68c:	7d1b      	ldrb	r3, [r3, #20]
 800f68e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f692:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f69a:	6838      	ldr	r0, [r7, #0]
 800f69c:	f7ff f9f2 	bl	800ea84 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f6a0:	4b31      	ldr	r3, [pc, #196]	@ (800f768 <tcp_slowtmr+0x5a8>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d004      	beq.n	800f6b6 <tcp_slowtmr+0x4f6>
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f06f 010c 	mvn.w	r1, #12
 800f6b2:	68b8      	ldr	r0, [r7, #8]
 800f6b4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f6b6:	4b2c      	ldr	r3, [pc, #176]	@ (800f768 <tcp_slowtmr+0x5a8>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d037      	beq.n	800f72e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f6be:	e592      	b.n	800f1e6 <tcp_slowtmr+0x26>
      prev = pcb;
 800f6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6cc:	7f1b      	ldrb	r3, [r3, #28]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	b2da      	uxtb	r2, r3
 800f6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d8:	7f1a      	ldrb	r2, [r3, #28]
 800f6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6dc:	7f5b      	ldrb	r3, [r3, #29]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d325      	bcc.n	800f72e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f6e8:	4b1f      	ldr	r3, [pc, #124]	@ (800f768 <tcp_slowtmr+0x5a8>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00b      	beq.n	800f710 <tcp_slowtmr+0x550>
 800f6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f6fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f700:	6912      	ldr	r2, [r2, #16]
 800f702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f704:	4610      	mov	r0, r2
 800f706:	4798      	blx	r3
 800f708:	4603      	mov	r3, r0
 800f70a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f70e:	e002      	b.n	800f716 <tcp_slowtmr+0x556>
 800f710:	2300      	movs	r3, #0
 800f712:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f716:	4b14      	ldr	r3, [pc, #80]	@ (800f768 <tcp_slowtmr+0x5a8>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f47f ad62 	bne.w	800f1e4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f720:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f724:	2b00      	cmp	r3, #0
 800f726:	d102      	bne.n	800f72e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f728:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f72a:	f003 fb7b 	bl	8012e24 <tcp_output>
  while (pcb != NULL) {
 800f72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f730:	2b00      	cmp	r3, #0
 800f732:	f47f ad5e 	bne.w	800f1f2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f736:	2300      	movs	r3, #0
 800f738:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f73a:	4b0c      	ldr	r3, [pc, #48]	@ (800f76c <tcp_slowtmr+0x5ac>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f740:	e069      	b.n	800f816 <tcp_slowtmr+0x656>
 800f742:	bf00      	nop
 800f744:	2000c6f0 	.word	0x2000c6f0
 800f748:	000a4cb8 	.word	0x000a4cb8
 800f74c:	10624dd3 	.word	0x10624dd3
 800f750:	000124f8 	.word	0x000124f8
 800f754:	2000c6fc 	.word	0x2000c6fc
 800f758:	08018af8 	.word	0x08018af8
 800f75c:	08018f30 	.word	0x08018f30
 800f760:	08018b3c 	.word	0x08018b3c
 800f764:	08018f5c 	.word	0x08018f5c
 800f768:	2000c704 	.word	0x2000c704
 800f76c:	2000c700 	.word	0x2000c700
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f772:	7d1b      	ldrb	r3, [r3, #20]
 800f774:	2b0a      	cmp	r3, #10
 800f776:	d006      	beq.n	800f786 <tcp_slowtmr+0x5c6>
 800f778:	4b2b      	ldr	r3, [pc, #172]	@ (800f828 <tcp_slowtmr+0x668>)
 800f77a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f77e:	492b      	ldr	r1, [pc, #172]	@ (800f82c <tcp_slowtmr+0x66c>)
 800f780:	482b      	ldr	r0, [pc, #172]	@ (800f830 <tcp_slowtmr+0x670>)
 800f782:	f007 fad5 	bl	8016d30 <iprintf>
    pcb_remove = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f78c:	4b29      	ldr	r3, [pc, #164]	@ (800f834 <tcp_slowtmr+0x674>)
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f792:	6a1b      	ldr	r3, [r3, #32]
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	2bf0      	cmp	r3, #240	@ 0xf0
 800f798:	d904      	bls.n	800f7a4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f79a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f79e:	3301      	adds	r3, #1
 800f7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d02f      	beq.n	800f80c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f7ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7ae:	f000 fb2b 	bl	800fe08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d010      	beq.n	800f7da <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f7b8:	4b1f      	ldr	r3, [pc, #124]	@ (800f838 <tcp_slowtmr+0x678>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d106      	bne.n	800f7d0 <tcp_slowtmr+0x610>
 800f7c2:	4b19      	ldr	r3, [pc, #100]	@ (800f828 <tcp_slowtmr+0x668>)
 800f7c4:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f7c8:	491c      	ldr	r1, [pc, #112]	@ (800f83c <tcp_slowtmr+0x67c>)
 800f7ca:	4819      	ldr	r0, [pc, #100]	@ (800f830 <tcp_slowtmr+0x670>)
 800f7cc:	f007 fab0 	bl	8016d30 <iprintf>
        prev->next = pcb->next;
 800f7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d2:	68da      	ldr	r2, [r3, #12]
 800f7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d6:	60da      	str	r2, [r3, #12]
 800f7d8:	e00f      	b.n	800f7fa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f7da:	4b17      	ldr	r3, [pc, #92]	@ (800f838 <tcp_slowtmr+0x678>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d006      	beq.n	800f7f2 <tcp_slowtmr+0x632>
 800f7e4:	4b10      	ldr	r3, [pc, #64]	@ (800f828 <tcp_slowtmr+0x668>)
 800f7e6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f7ea:	4915      	ldr	r1, [pc, #84]	@ (800f840 <tcp_slowtmr+0x680>)
 800f7ec:	4810      	ldr	r0, [pc, #64]	@ (800f830 <tcp_slowtmr+0x670>)
 800f7ee:	f007 fa9f 	bl	8016d30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f7f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	4a10      	ldr	r2, [pc, #64]	@ (800f838 <tcp_slowtmr+0x678>)
 800f7f8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7fc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f804:	69f8      	ldr	r0, [r7, #28]
 800f806:	f7ff f93d 	bl	800ea84 <tcp_free>
 800f80a:	e004      	b.n	800f816 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f80e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1a9      	bne.n	800f770 <tcp_slowtmr+0x5b0>
    }
  }
}
 800f81c:	bf00      	nop
 800f81e:	bf00      	nop
 800f820:	3730      	adds	r7, #48	@ 0x30
 800f822:	46bd      	mov	sp, r7
 800f824:	bdb0      	pop	{r4, r5, r7, pc}
 800f826:	bf00      	nop
 800f828:	08018af8 	.word	0x08018af8
 800f82c:	08018f88 	.word	0x08018f88
 800f830:	08018b3c 	.word	0x08018b3c
 800f834:	2000c6f0 	.word	0x2000c6f0
 800f838:	2000c700 	.word	0x2000c700
 800f83c:	08018fb8 	.word	0x08018fb8
 800f840:	08018fe0 	.word	0x08018fe0

0800f844 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f84a:	4b2d      	ldr	r3, [pc, #180]	@ (800f900 <tcp_fasttmr+0xbc>)
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	3301      	adds	r3, #1
 800f850:	b2da      	uxtb	r2, r3
 800f852:	4b2b      	ldr	r3, [pc, #172]	@ (800f900 <tcp_fasttmr+0xbc>)
 800f854:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f856:	4b2b      	ldr	r3, [pc, #172]	@ (800f904 <tcp_fasttmr+0xc0>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f85c:	e048      	b.n	800f8f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	7f9a      	ldrb	r2, [r3, #30]
 800f862:	4b27      	ldr	r3, [pc, #156]	@ (800f900 <tcp_fasttmr+0xbc>)
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	429a      	cmp	r2, r3
 800f868:	d03f      	beq.n	800f8ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f86a:	4b25      	ldr	r3, [pc, #148]	@ (800f900 <tcp_fasttmr+0xbc>)
 800f86c:	781a      	ldrb	r2, [r3, #0]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	8b5b      	ldrh	r3, [r3, #26]
 800f876:	f003 0301 	and.w	r3, r3, #1
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d010      	beq.n	800f8a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	8b5b      	ldrh	r3, [r3, #26]
 800f882:	f043 0302 	orr.w	r3, r3, #2
 800f886:	b29a      	uxth	r2, r3
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f003 fac9 	bl	8012e24 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	8b5b      	ldrh	r3, [r3, #26]
 800f896:	f023 0303 	bic.w	r3, r3, #3
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	8b5b      	ldrh	r3, [r3, #26]
 800f8a4:	f003 0308 	and.w	r3, r3, #8
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d009      	beq.n	800f8c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	8b5b      	ldrh	r3, [r3, #26]
 800f8b0:	f023 0308 	bic.w	r3, r3, #8
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f7ff fa76 	bl	800edac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00a      	beq.n	800f8e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f8ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f908 <tcp_fasttmr+0xc4>)
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f819 	bl	800f90c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f8da:	4b0b      	ldr	r3, [pc, #44]	@ (800f908 <tcp_fasttmr+0xc4>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d000      	beq.n	800f8e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f8e2:	e7b8      	b.n	800f856 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	607b      	str	r3, [r7, #4]
 800f8e8:	e002      	b.n	800f8f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1b3      	bne.n	800f85e <tcp_fasttmr+0x1a>
    }
  }
}
 800f8f6:	bf00      	nop
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	2000c706 	.word	0x2000c706
 800f904:	2000c6fc 	.word	0x2000c6fc
 800f908:	2000c704 	.word	0x2000c704

0800f90c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f90c:	b590      	push	{r4, r7, lr}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d109      	bne.n	800f92e <tcp_process_refused_data+0x22>
 800f91a:	4b37      	ldr	r3, [pc, #220]	@ (800f9f8 <tcp_process_refused_data+0xec>)
 800f91c:	f240 6209 	movw	r2, #1545	@ 0x609
 800f920:	4936      	ldr	r1, [pc, #216]	@ (800f9fc <tcp_process_refused_data+0xf0>)
 800f922:	4837      	ldr	r0, [pc, #220]	@ (800fa00 <tcp_process_refused_data+0xf4>)
 800f924:	f007 fa04 	bl	8016d30 <iprintf>
 800f928:	f06f 030f 	mvn.w	r3, #15
 800f92c:	e060      	b.n	800f9f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f932:	7b5b      	ldrb	r3, [r3, #13]
 800f934:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f93a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00b      	beq.n	800f964 <tcp_process_refused_data+0x58>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6918      	ldr	r0, [r3, #16]
 800f956:	2300      	movs	r3, #0
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	6879      	ldr	r1, [r7, #4]
 800f95c:	47a0      	blx	r4
 800f95e:	4603      	mov	r3, r0
 800f960:	73fb      	strb	r3, [r7, #15]
 800f962:	e007      	b.n	800f974 <tcp_process_refused_data+0x68>
 800f964:	2300      	movs	r3, #0
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	6879      	ldr	r1, [r7, #4]
 800f96a:	2000      	movs	r0, #0
 800f96c:	f000 f8a4 	bl	800fab8 <tcp_recv_null>
 800f970:	4603      	mov	r3, r0
 800f972:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d12a      	bne.n	800f9d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f97c:	7bbb      	ldrb	r3, [r7, #14]
 800f97e:	f003 0320 	and.w	r3, r3, #32
 800f982:	2b00      	cmp	r3, #0
 800f984:	d033      	beq.n	800f9ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f98a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f98e:	d005      	beq.n	800f99c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f994:	3301      	adds	r3, #1
 800f996:	b29a      	uxth	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00b      	beq.n	800f9be <tcp_process_refused_data+0xb2>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6918      	ldr	r0, [r3, #16]
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	6879      	ldr	r1, [r7, #4]
 800f9b6:	47a0      	blx	r4
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	73fb      	strb	r3, [r7, #15]
 800f9bc:	e001      	b.n	800f9c2 <tcp_process_refused_data+0xb6>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f9c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9c6:	f113 0f0d 	cmn.w	r3, #13
 800f9ca:	d110      	bne.n	800f9ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f9cc:	f06f 030c 	mvn.w	r3, #12
 800f9d0:	e00e      	b.n	800f9f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9d6:	f113 0f0d 	cmn.w	r3, #13
 800f9da:	d102      	bne.n	800f9e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f9dc:	f06f 030c 	mvn.w	r3, #12
 800f9e0:	e006      	b.n	800f9f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f9e8:	f06f 0304 	mvn.w	r3, #4
 800f9ec:	e000      	b.n	800f9f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3714      	adds	r7, #20
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd90      	pop	{r4, r7, pc}
 800f9f8:	08018af8 	.word	0x08018af8
 800f9fc:	08019008 	.word	0x08019008
 800fa00:	08018b3c 	.word	0x08018b3c

0800fa04 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fa0c:	e007      	b.n	800fa1e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f000 f80a 	bl	800fa2e <tcp_seg_free>
    seg = next;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d1f4      	bne.n	800fa0e <tcp_segs_free+0xa>
  }
}
 800fa24:	bf00      	nop
 800fa26:	bf00      	nop
 800fa28:	3710      	adds	r7, #16
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}

0800fa2e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b082      	sub	sp, #8
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d00c      	beq.n	800fa56 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d004      	beq.n	800fa4e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fe fd6f 	bl	800e52c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fa4e:	6879      	ldr	r1, [r7, #4]
 800fa50:	2003      	movs	r0, #3
 800fa52:	f7fd fec7 	bl	800d7e4 <memp_free>
  }
}
 800fa56:	bf00      	nop
 800fa58:	3708      	adds	r7, #8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
	...

0800fa60 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <tcp_seg_copy+0x1c>
 800fa6e:	4b0f      	ldr	r3, [pc, #60]	@ (800faac <tcp_seg_copy+0x4c>)
 800fa70:	f240 6282 	movw	r2, #1666	@ 0x682
 800fa74:	490e      	ldr	r1, [pc, #56]	@ (800fab0 <tcp_seg_copy+0x50>)
 800fa76:	480f      	ldr	r0, [pc, #60]	@ (800fab4 <tcp_seg_copy+0x54>)
 800fa78:	f007 f95a 	bl	8016d30 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fa7c:	2003      	movs	r0, #3
 800fa7e:	f7fd fe3b 	bl	800d6f8 <memp_malloc>
 800fa82:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d101      	bne.n	800fa8e <tcp_seg_copy+0x2e>
    return NULL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	e00a      	b.n	800faa4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fa8e:	2210      	movs	r2, #16
 800fa90:	6879      	ldr	r1, [r7, #4]
 800fa92:	68f8      	ldr	r0, [r7, #12]
 800fa94:	f007 fb77 	bl	8017186 <memcpy>
  pbuf_ref(cseg->p);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7fe fdeb 	bl	800e678 <pbuf_ref>
  return cseg;
 800faa2:	68fb      	ldr	r3, [r7, #12]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3710      	adds	r7, #16
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	08018af8 	.word	0x08018af8
 800fab0:	0801904c 	.word	0x0801904c
 800fab4:	08018b3c 	.word	0x08018b3c

0800fab8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
 800fac4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d109      	bne.n	800fae0 <tcp_recv_null+0x28>
 800facc:	4b12      	ldr	r3, [pc, #72]	@ (800fb18 <tcp_recv_null+0x60>)
 800face:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fad2:	4912      	ldr	r1, [pc, #72]	@ (800fb1c <tcp_recv_null+0x64>)
 800fad4:	4812      	ldr	r0, [pc, #72]	@ (800fb20 <tcp_recv_null+0x68>)
 800fad6:	f007 f92b 	bl	8016d30 <iprintf>
 800fada:	f06f 030f 	mvn.w	r3, #15
 800fade:	e016      	b.n	800fb0e <tcp_recv_null+0x56>

  if (p != NULL) {
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d009      	beq.n	800fafa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	891b      	ldrh	r3, [r3, #8]
 800faea:	4619      	mov	r1, r3
 800faec:	68b8      	ldr	r0, [r7, #8]
 800faee:	f7ff fb17 	bl	800f120 <tcp_recved>
    pbuf_free(p);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f7fe fd1a 	bl	800e52c <pbuf_free>
 800faf8:	e008      	b.n	800fb0c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fafa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d104      	bne.n	800fb0c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fb02:	68b8      	ldr	r0, [r7, #8]
 800fb04:	f7ff f9bc 	bl	800ee80 <tcp_close>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	e000      	b.n	800fb0e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3710      	adds	r7, #16
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	08018af8 	.word	0x08018af8
 800fb1c:	08019068 	.word	0x08019068
 800fb20:	08018b3c 	.word	0x08018b3c

0800fb24 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b086      	sub	sp, #24
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fb2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	db01      	blt.n	800fb3a <tcp_kill_prio+0x16>
 800fb36:	79fb      	ldrb	r3, [r7, #7]
 800fb38:	e000      	b.n	800fb3c <tcp_kill_prio+0x18>
 800fb3a:	237f      	movs	r3, #127	@ 0x7f
 800fb3c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fb3e:	7afb      	ldrb	r3, [r7, #11]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d034      	beq.n	800fbae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fb44:	7afb      	ldrb	r3, [r7, #11]
 800fb46:	3b01      	subs	r3, #1
 800fb48:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb52:	4b19      	ldr	r3, [pc, #100]	@ (800fbb8 <tcp_kill_prio+0x94>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	617b      	str	r3, [r7, #20]
 800fb58:	e01f      	b.n	800fb9a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	7d5b      	ldrb	r3, [r3, #21]
 800fb5e:	7afa      	ldrb	r2, [r7, #11]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d80c      	bhi.n	800fb7e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fb68:	7afa      	ldrb	r2, [r7, #11]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d112      	bne.n	800fb94 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fb6e:	4b13      	ldr	r3, [pc, #76]	@ (800fbbc <tcp_kill_prio+0x98>)
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	1ad3      	subs	r3, r2, r3
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d80a      	bhi.n	800fb94 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fb7e:	4b0f      	ldr	r3, [pc, #60]	@ (800fbbc <tcp_kill_prio+0x98>)
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	6a1b      	ldr	r3, [r3, #32]
 800fb86:	1ad3      	subs	r3, r2, r3
 800fb88:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	7d5b      	ldrb	r3, [r3, #21]
 800fb92:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	617b      	str	r3, [r7, #20]
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d1dc      	bne.n	800fb5a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d004      	beq.n	800fbb0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fba6:	6938      	ldr	r0, [r7, #16]
 800fba8:	f7ff fa54 	bl	800f054 <tcp_abort>
 800fbac:	e000      	b.n	800fbb0 <tcp_kill_prio+0x8c>
    return;
 800fbae:	bf00      	nop
  }
}
 800fbb0:	3718      	adds	r7, #24
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	2000c6fc 	.word	0x2000c6fc
 800fbbc:	2000c6f0 	.word	0x2000c6f0

0800fbc0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b086      	sub	sp, #24
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fbca:	79fb      	ldrb	r3, [r7, #7]
 800fbcc:	2b08      	cmp	r3, #8
 800fbce:	d009      	beq.n	800fbe4 <tcp_kill_state+0x24>
 800fbd0:	79fb      	ldrb	r3, [r7, #7]
 800fbd2:	2b09      	cmp	r3, #9
 800fbd4:	d006      	beq.n	800fbe4 <tcp_kill_state+0x24>
 800fbd6:	4b1a      	ldr	r3, [pc, #104]	@ (800fc40 <tcp_kill_state+0x80>)
 800fbd8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800fbdc:	4919      	ldr	r1, [pc, #100]	@ (800fc44 <tcp_kill_state+0x84>)
 800fbde:	481a      	ldr	r0, [pc, #104]	@ (800fc48 <tcp_kill_state+0x88>)
 800fbe0:	f007 f8a6 	bl	8016d30 <iprintf>

  inactivity = 0;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbec:	4b17      	ldr	r3, [pc, #92]	@ (800fc4c <tcp_kill_state+0x8c>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	617b      	str	r3, [r7, #20]
 800fbf2:	e017      	b.n	800fc24 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	7d1b      	ldrb	r3, [r3, #20]
 800fbf8:	79fa      	ldrb	r2, [r7, #7]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d10f      	bne.n	800fc1e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fbfe:	4b14      	ldr	r3, [pc, #80]	@ (800fc50 <tcp_kill_state+0x90>)
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	6a1b      	ldr	r3, [r3, #32]
 800fc06:	1ad3      	subs	r3, r2, r3
 800fc08:	68fa      	ldr	r2, [r7, #12]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d807      	bhi.n	800fc1e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fc0e:	4b10      	ldr	r3, [pc, #64]	@ (800fc50 <tcp_kill_state+0x90>)
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	1ad3      	subs	r3, r2, r3
 800fc18:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	617b      	str	r3, [r7, #20]
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1e4      	bne.n	800fbf4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d003      	beq.n	800fc38 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fc30:	2100      	movs	r1, #0
 800fc32:	6938      	ldr	r0, [r7, #16]
 800fc34:	f7ff f950 	bl	800eed8 <tcp_abandon>
  }
}
 800fc38:	bf00      	nop
 800fc3a:	3718      	adds	r7, #24
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	08018af8 	.word	0x08018af8
 800fc44:	08019084 	.word	0x08019084
 800fc48:	08018b3c 	.word	0x08018b3c
 800fc4c:	2000c6fc 	.word	0x2000c6fc
 800fc50:	2000c6f0 	.word	0x2000c6f0

0800fc54 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc62:	4b12      	ldr	r3, [pc, #72]	@ (800fcac <tcp_kill_timewait+0x58>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	60fb      	str	r3, [r7, #12]
 800fc68:	e012      	b.n	800fc90 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fc6a:	4b11      	ldr	r3, [pc, #68]	@ (800fcb0 <tcp_kill_timewait+0x5c>)
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	1ad3      	subs	r3, r2, r3
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d807      	bhi.n	800fc8a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fc7a:	4b0d      	ldr	r3, [pc, #52]	@ (800fcb0 <tcp_kill_timewait+0x5c>)
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	6a1b      	ldr	r3, [r3, #32]
 800fc82:	1ad3      	subs	r3, r2, r3
 800fc84:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	60fb      	str	r3, [r7, #12]
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1e9      	bne.n	800fc6a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d002      	beq.n	800fca2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc9c:	68b8      	ldr	r0, [r7, #8]
 800fc9e:	f7ff f9d9 	bl	800f054 <tcp_abort>
  }
}
 800fca2:	bf00      	nop
 800fca4:	3710      	adds	r7, #16
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	2000c700 	.word	0x2000c700
 800fcb0:	2000c6f0 	.word	0x2000c6f0

0800fcb4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fcba:	4b10      	ldr	r3, [pc, #64]	@ (800fcfc <tcp_handle_closepend+0x48>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fcc0:	e014      	b.n	800fcec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	8b5b      	ldrh	r3, [r3, #26]
 800fccc:	f003 0308 	and.w	r3, r3, #8
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d009      	beq.n	800fce8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	8b5b      	ldrh	r3, [r3, #26]
 800fcd8:	f023 0308 	bic.w	r3, r3, #8
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7ff f862 	bl	800edac <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1e7      	bne.n	800fcc2 <tcp_handle_closepend+0xe>
  }
}
 800fcf2:	bf00      	nop
 800fcf4:	bf00      	nop
 800fcf6:	3708      	adds	r7, #8
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	2000c6fc 	.word	0x2000c6fc

0800fd00 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	4603      	mov	r3, r0
 800fd08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd0a:	2001      	movs	r0, #1
 800fd0c:	f7fd fcf4 	bl	800d6f8 <memp_malloc>
 800fd10:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d126      	bne.n	800fd66 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fd18:	f7ff ffcc 	bl	800fcb4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fd1c:	f7ff ff9a 	bl	800fc54 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd20:	2001      	movs	r0, #1
 800fd22:	f7fd fce9 	bl	800d6f8 <memp_malloc>
 800fd26:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d11b      	bne.n	800fd66 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fd2e:	2009      	movs	r0, #9
 800fd30:	f7ff ff46 	bl	800fbc0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd34:	2001      	movs	r0, #1
 800fd36:	f7fd fcdf 	bl	800d6f8 <memp_malloc>
 800fd3a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d111      	bne.n	800fd66 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fd42:	2008      	movs	r0, #8
 800fd44:	f7ff ff3c 	bl	800fbc0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd48:	2001      	movs	r0, #1
 800fd4a:	f7fd fcd5 	bl	800d6f8 <memp_malloc>
 800fd4e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d107      	bne.n	800fd66 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fd56:	79fb      	ldrb	r3, [r7, #7]
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7ff fee3 	bl	800fb24 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fd5e:	2001      	movs	r0, #1
 800fd60:	f7fd fcca 	bl	800d6f8 <memp_malloc>
 800fd64:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d03f      	beq.n	800fdec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fd6c:	229c      	movs	r2, #156	@ 0x9c
 800fd6e:	2100      	movs	r1, #0
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f007 f935 	bl	8016fe0 <memset>
    pcb->prio = prio;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	79fa      	ldrb	r2, [r7, #7]
 800fd7a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fd82:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fd8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	22ff      	movs	r2, #255	@ 0xff
 800fd9a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fda2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2206      	movs	r2, #6
 800fda8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2206      	movs	r2, #6
 800fdb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fdb8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800fdc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf8 <tcp_alloc+0xf8>)
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fdca:	4b0c      	ldr	r3, [pc, #48]	@ (800fdfc <tcp_alloc+0xfc>)
 800fdcc:	781a      	ldrb	r2, [r3, #0]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fdd8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	4a08      	ldr	r2, [pc, #32]	@ (800fe00 <tcp_alloc+0x100>)
 800fde0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	4a07      	ldr	r2, [pc, #28]	@ (800fe04 <tcp_alloc+0x104>)
 800fde8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fdec:	68fb      	ldr	r3, [r7, #12]
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3710      	adds	r7, #16
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	2000c6f0 	.word	0x2000c6f0
 800fdfc:	2000c706 	.word	0x2000c706
 800fe00:	0800fab9 	.word	0x0800fab9
 800fe04:	006ddd00 	.word	0x006ddd00

0800fe08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d107      	bne.n	800fe26 <tcp_pcb_purge+0x1e>
 800fe16:	4b21      	ldr	r3, [pc, #132]	@ (800fe9c <tcp_pcb_purge+0x94>)
 800fe18:	f640 0251 	movw	r2, #2129	@ 0x851
 800fe1c:	4920      	ldr	r1, [pc, #128]	@ (800fea0 <tcp_pcb_purge+0x98>)
 800fe1e:	4821      	ldr	r0, [pc, #132]	@ (800fea4 <tcp_pcb_purge+0x9c>)
 800fe20:	f006 ff86 	bl	8016d30 <iprintf>
 800fe24:	e037      	b.n	800fe96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	7d1b      	ldrb	r3, [r3, #20]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d033      	beq.n	800fe96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fe32:	2b0a      	cmp	r3, #10
 800fe34:	d02f      	beq.n	800fe96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fe3a:	2b01      	cmp	r3, #1
 800fe3c:	d02b      	beq.n	800fe96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d007      	beq.n	800fe56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fe fb6e 	bl	800e52c <pbuf_free>
      pcb->refused_data = NULL;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d002      	beq.n	800fe64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 f986 	bl	8010170 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe6a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7ff fdc7 	bl	800fa04 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7ff fdc2 	bl	800fa04 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2200      	movs	r2, #0
 800fe84:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2200      	movs	r2, #0
 800fe92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	08018af8 	.word	0x08018af8
 800fea0:	08019144 	.word	0x08019144
 800fea4:	08018b3c 	.word	0x08018b3c

0800fea8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d106      	bne.n	800fec6 <tcp_pcb_remove+0x1e>
 800feb8:	4b3e      	ldr	r3, [pc, #248]	@ (800ffb4 <tcp_pcb_remove+0x10c>)
 800feba:	f640 0283 	movw	r2, #2179	@ 0x883
 800febe:	493e      	ldr	r1, [pc, #248]	@ (800ffb8 <tcp_pcb_remove+0x110>)
 800fec0:	483e      	ldr	r0, [pc, #248]	@ (800ffbc <tcp_pcb_remove+0x114>)
 800fec2:	f006 ff35 	bl	8016d30 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d106      	bne.n	800feda <tcp_pcb_remove+0x32>
 800fecc:	4b39      	ldr	r3, [pc, #228]	@ (800ffb4 <tcp_pcb_remove+0x10c>)
 800fece:	f640 0284 	movw	r2, #2180	@ 0x884
 800fed2:	493b      	ldr	r1, [pc, #236]	@ (800ffc0 <tcp_pcb_remove+0x118>)
 800fed4:	4839      	ldr	r0, [pc, #228]	@ (800ffbc <tcp_pcb_remove+0x114>)
 800fed6:	f006 ff2b 	bl	8016d30 <iprintf>

  TCP_RMV(pcblist, pcb);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	683a      	ldr	r2, [r7, #0]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d105      	bne.n	800fef0 <tcp_pcb_remove+0x48>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	68da      	ldr	r2, [r3, #12]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	e013      	b.n	800ff18 <tcp_pcb_remove+0x70>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	60fb      	str	r3, [r7, #12]
 800fef6:	e00c      	b.n	800ff12 <tcp_pcb_remove+0x6a>
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	683a      	ldr	r2, [r7, #0]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d104      	bne.n	800ff0c <tcp_pcb_remove+0x64>
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	68da      	ldr	r2, [r3, #12]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	60da      	str	r2, [r3, #12]
 800ff0a:	e005      	b.n	800ff18 <tcp_pcb_remove+0x70>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	60fb      	str	r3, [r7, #12]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1ef      	bne.n	800fef8 <tcp_pcb_remove+0x50>
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ff1e:	6838      	ldr	r0, [r7, #0]
 800ff20:	f7ff ff72 	bl	800fe08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	7d1b      	ldrb	r3, [r3, #20]
 800ff28:	2b0a      	cmp	r3, #10
 800ff2a:	d013      	beq.n	800ff54 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d00f      	beq.n	800ff54 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	8b5b      	ldrh	r3, [r3, #26]
 800ff38:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d009      	beq.n	800ff54 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	8b5b      	ldrh	r3, [r3, #26]
 800ff44:	f043 0302 	orr.w	r3, r3, #2
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff4e:	6838      	ldr	r0, [r7, #0]
 800ff50:	f002 ff68 	bl	8012e24 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	7d1b      	ldrb	r3, [r3, #20]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d020      	beq.n	800ff9e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d006      	beq.n	800ff72 <tcp_pcb_remove+0xca>
 800ff64:	4b13      	ldr	r3, [pc, #76]	@ (800ffb4 <tcp_pcb_remove+0x10c>)
 800ff66:	f640 0293 	movw	r2, #2195	@ 0x893
 800ff6a:	4916      	ldr	r1, [pc, #88]	@ (800ffc4 <tcp_pcb_remove+0x11c>)
 800ff6c:	4813      	ldr	r0, [pc, #76]	@ (800ffbc <tcp_pcb_remove+0x114>)
 800ff6e:	f006 fedf 	bl	8016d30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d006      	beq.n	800ff88 <tcp_pcb_remove+0xe0>
 800ff7a:	4b0e      	ldr	r3, [pc, #56]	@ (800ffb4 <tcp_pcb_remove+0x10c>)
 800ff7c:	f640 0294 	movw	r2, #2196	@ 0x894
 800ff80:	4911      	ldr	r1, [pc, #68]	@ (800ffc8 <tcp_pcb_remove+0x120>)
 800ff82:	480e      	ldr	r0, [pc, #56]	@ (800ffbc <tcp_pcb_remove+0x114>)
 800ff84:	f006 fed4 	bl	8016d30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d006      	beq.n	800ff9e <tcp_pcb_remove+0xf6>
 800ff90:	4b08      	ldr	r3, [pc, #32]	@ (800ffb4 <tcp_pcb_remove+0x10c>)
 800ff92:	f640 0296 	movw	r2, #2198	@ 0x896
 800ff96:	490d      	ldr	r1, [pc, #52]	@ (800ffcc <tcp_pcb_remove+0x124>)
 800ff98:	4808      	ldr	r0, [pc, #32]	@ (800ffbc <tcp_pcb_remove+0x114>)
 800ff9a:	f006 fec9 	bl	8016d30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ffaa:	bf00      	nop
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	08018af8 	.word	0x08018af8
 800ffb8:	08019160 	.word	0x08019160
 800ffbc:	08018b3c 	.word	0x08018b3c
 800ffc0:	0801917c 	.word	0x0801917c
 800ffc4:	0801919c 	.word	0x0801919c
 800ffc8:	080191b4 	.word	0x080191b4
 800ffcc:	080191d0 	.word	0x080191d0

0800ffd0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d106      	bne.n	800ffec <tcp_next_iss+0x1c>
 800ffde:	4b0a      	ldr	r3, [pc, #40]	@ (8010008 <tcp_next_iss+0x38>)
 800ffe0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ffe4:	4909      	ldr	r1, [pc, #36]	@ (801000c <tcp_next_iss+0x3c>)
 800ffe6:	480a      	ldr	r0, [pc, #40]	@ (8010010 <tcp_next_iss+0x40>)
 800ffe8:	f006 fea2 	bl	8016d30 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ffec:	4b09      	ldr	r3, [pc, #36]	@ (8010014 <tcp_next_iss+0x44>)
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	4b09      	ldr	r3, [pc, #36]	@ (8010018 <tcp_next_iss+0x48>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4413      	add	r3, r2
 800fff6:	4a07      	ldr	r2, [pc, #28]	@ (8010014 <tcp_next_iss+0x44>)
 800fff8:	6013      	str	r3, [r2, #0]
  return iss;
 800fffa:	4b06      	ldr	r3, [pc, #24]	@ (8010014 <tcp_next_iss+0x44>)
 800fffc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	08018af8 	.word	0x08018af8
 801000c:	080191e8 	.word	0x080191e8
 8010010:	08018b3c 	.word	0x08018b3c
 8010014:	20000028 	.word	0x20000028
 8010018:	2000c6f0 	.word	0x2000c6f0

0801001c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af00      	add	r7, sp, #0
 8010022:	4603      	mov	r3, r0
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
 8010028:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d106      	bne.n	801003e <tcp_eff_send_mss_netif+0x22>
 8010030:	4b14      	ldr	r3, [pc, #80]	@ (8010084 <tcp_eff_send_mss_netif+0x68>)
 8010032:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8010036:	4914      	ldr	r1, [pc, #80]	@ (8010088 <tcp_eff_send_mss_netif+0x6c>)
 8010038:	4814      	ldr	r0, [pc, #80]	@ (801008c <tcp_eff_send_mss_netif+0x70>)
 801003a:	f006 fe79 	bl	8016d30 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010044:	89fb      	ldrh	r3, [r7, #14]
 8010046:	e019      	b.n	801007c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801004c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801004e:	8afb      	ldrh	r3, [r7, #22]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d012      	beq.n	801007a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010054:	2328      	movs	r3, #40	@ 0x28
 8010056:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010058:	8afa      	ldrh	r2, [r7, #22]
 801005a:	8abb      	ldrh	r3, [r7, #20]
 801005c:	429a      	cmp	r2, r3
 801005e:	d904      	bls.n	801006a <tcp_eff_send_mss_netif+0x4e>
 8010060:	8afa      	ldrh	r2, [r7, #22]
 8010062:	8abb      	ldrh	r3, [r7, #20]
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	b29b      	uxth	r3, r3
 8010068:	e000      	b.n	801006c <tcp_eff_send_mss_netif+0x50>
 801006a:	2300      	movs	r3, #0
 801006c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801006e:	8a7a      	ldrh	r2, [r7, #18]
 8010070:	89fb      	ldrh	r3, [r7, #14]
 8010072:	4293      	cmp	r3, r2
 8010074:	bf28      	it	cs
 8010076:	4613      	movcs	r3, r2
 8010078:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801007a:	89fb      	ldrh	r3, [r7, #14]
}
 801007c:	4618      	mov	r0, r3
 801007e:	3718      	adds	r7, #24
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	08018af8 	.word	0x08018af8
 8010088:	08019204 	.word	0x08019204
 801008c:	08018b3c 	.word	0x08018b3c

08010090 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d119      	bne.n	80100d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80100a4:	4b10      	ldr	r3, [pc, #64]	@ (80100e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80100a6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80100aa:	4910      	ldr	r1, [pc, #64]	@ (80100ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80100ac:	4810      	ldr	r0, [pc, #64]	@ (80100f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80100ae:	f006 fe3f 	bl	8016d30 <iprintf>

  while (pcb != NULL) {
 80100b2:	e011      	b.n	80100d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d108      	bne.n	80100d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f7fe ffc4 	bl	800f054 <tcp_abort>
      pcb = next;
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	e002      	b.n	80100d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d1ea      	bne.n	80100b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80100de:	bf00      	nop
 80100e0:	bf00      	nop
 80100e2:	3710      	adds	r7, #16
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	08018af8 	.word	0x08018af8
 80100ec:	0801922c 	.word	0x0801922c
 80100f0:	08018b3c 	.word	0x08018b3c

080100f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d02a      	beq.n	801015a <tcp_netif_ip_addr_changed+0x66>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d026      	beq.n	801015a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801010c:	4b15      	ldr	r3, [pc, #84]	@ (8010164 <tcp_netif_ip_addr_changed+0x70>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4619      	mov	r1, r3
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7ff ffbc 	bl	8010090 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010118:	4b13      	ldr	r3, [pc, #76]	@ (8010168 <tcp_netif_ip_addr_changed+0x74>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4619      	mov	r1, r3
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f7ff ffb6 	bl	8010090 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d017      	beq.n	801015a <tcp_netif_ip_addr_changed+0x66>
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d013      	beq.n	801015a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010132:	4b0e      	ldr	r3, [pc, #56]	@ (801016c <tcp_netif_ip_addr_changed+0x78>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	60fb      	str	r3, [r7, #12]
 8010138:	e00c      	b.n	8010154 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	429a      	cmp	r2, r3
 8010144:	d103      	bne.n	801014e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	60fb      	str	r3, [r7, #12]
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d1ef      	bne.n	801013a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801015a:	bf00      	nop
 801015c:	3710      	adds	r7, #16
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	2000c6fc 	.word	0x2000c6fc
 8010168:	2000c6f4 	.word	0x2000c6f4
 801016c:	2000c6f8 	.word	0x2000c6f8

08010170 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801017c:	2b00      	cmp	r3, #0
 801017e:	d007      	beq.n	8010190 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010184:	4618      	mov	r0, r3
 8010186:	f7ff fc3d 	bl	800fa04 <tcp_segs_free>
    pcb->ooseq = NULL;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010190:	bf00      	nop
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010198:	b590      	push	{r4, r7, lr}
 801019a:	b08d      	sub	sp, #52	@ 0x34
 801019c:	af04      	add	r7, sp, #16
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d105      	bne.n	80101b4 <tcp_input+0x1c>
 80101a8:	4b9b      	ldr	r3, [pc, #620]	@ (8010418 <tcp_input+0x280>)
 80101aa:	2283      	movs	r2, #131	@ 0x83
 80101ac:	499b      	ldr	r1, [pc, #620]	@ (801041c <tcp_input+0x284>)
 80101ae:	489c      	ldr	r0, [pc, #624]	@ (8010420 <tcp_input+0x288>)
 80101b0:	f006 fdbe 	bl	8016d30 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	4a9a      	ldr	r2, [pc, #616]	@ (8010424 <tcp_input+0x28c>)
 80101ba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	895b      	ldrh	r3, [r3, #10]
 80101c0:	2b13      	cmp	r3, #19
 80101c2:	f240 83d1 	bls.w	8010968 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80101c6:	4b98      	ldr	r3, [pc, #608]	@ (8010428 <tcp_input+0x290>)
 80101c8:	695b      	ldr	r3, [r3, #20]
 80101ca:	4a97      	ldr	r2, [pc, #604]	@ (8010428 <tcp_input+0x290>)
 80101cc:	6812      	ldr	r2, [r2, #0]
 80101ce:	4611      	mov	r1, r2
 80101d0:	4618      	mov	r0, r3
 80101d2:	f005 fc41 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f040 83c7 	bne.w	801096c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80101de:	4b92      	ldr	r3, [pc, #584]	@ (8010428 <tcp_input+0x290>)
 80101e0:	695b      	ldr	r3, [r3, #20]
 80101e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80101e6:	2be0      	cmp	r3, #224	@ 0xe0
 80101e8:	f000 83c0 	beq.w	801096c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80101ec:	4b8d      	ldr	r3, [pc, #564]	@ (8010424 <tcp_input+0x28c>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	899b      	ldrh	r3, [r3, #12]
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fc fdab 	bl	800cd50 <lwip_htons>
 80101fa:	4603      	mov	r3, r0
 80101fc:	0b1b      	lsrs	r3, r3, #12
 80101fe:	b29b      	uxth	r3, r3
 8010200:	b2db      	uxtb	r3, r3
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010206:	7cbb      	ldrb	r3, [r7, #18]
 8010208:	2b13      	cmp	r3, #19
 801020a:	f240 83b1 	bls.w	8010970 <tcp_input+0x7d8>
 801020e:	7cbb      	ldrb	r3, [r7, #18]
 8010210:	b29a      	uxth	r2, r3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	891b      	ldrh	r3, [r3, #8]
 8010216:	429a      	cmp	r2, r3
 8010218:	f200 83aa 	bhi.w	8010970 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801021c:	7cbb      	ldrb	r3, [r7, #18]
 801021e:	b29b      	uxth	r3, r3
 8010220:	3b14      	subs	r3, #20
 8010222:	b29a      	uxth	r2, r3
 8010224:	4b81      	ldr	r3, [pc, #516]	@ (801042c <tcp_input+0x294>)
 8010226:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010228:	4b81      	ldr	r3, [pc, #516]	@ (8010430 <tcp_input+0x298>)
 801022a:	2200      	movs	r2, #0
 801022c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	895a      	ldrh	r2, [r3, #10]
 8010232:	7cbb      	ldrb	r3, [r7, #18]
 8010234:	b29b      	uxth	r3, r3
 8010236:	429a      	cmp	r2, r3
 8010238:	d309      	bcc.n	801024e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801023a:	4b7c      	ldr	r3, [pc, #496]	@ (801042c <tcp_input+0x294>)
 801023c:	881a      	ldrh	r2, [r3, #0]
 801023e:	4b7d      	ldr	r3, [pc, #500]	@ (8010434 <tcp_input+0x29c>)
 8010240:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010242:	7cbb      	ldrb	r3, [r7, #18]
 8010244:	4619      	mov	r1, r3
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f7fe f8ea 	bl	800e420 <pbuf_remove_header>
 801024c:	e04e      	b.n	80102ec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d105      	bne.n	8010262 <tcp_input+0xca>
 8010256:	4b70      	ldr	r3, [pc, #448]	@ (8010418 <tcp_input+0x280>)
 8010258:	22c2      	movs	r2, #194	@ 0xc2
 801025a:	4977      	ldr	r1, [pc, #476]	@ (8010438 <tcp_input+0x2a0>)
 801025c:	4870      	ldr	r0, [pc, #448]	@ (8010420 <tcp_input+0x288>)
 801025e:	f006 fd67 	bl	8016d30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010262:	2114      	movs	r1, #20
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f7fe f8db 	bl	800e420 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	895a      	ldrh	r2, [r3, #10]
 801026e:	4b71      	ldr	r3, [pc, #452]	@ (8010434 <tcp_input+0x29c>)
 8010270:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010272:	4b6e      	ldr	r3, [pc, #440]	@ (801042c <tcp_input+0x294>)
 8010274:	881a      	ldrh	r2, [r3, #0]
 8010276:	4b6f      	ldr	r3, [pc, #444]	@ (8010434 <tcp_input+0x29c>)
 8010278:	881b      	ldrh	r3, [r3, #0]
 801027a:	1ad3      	subs	r3, r2, r3
 801027c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801027e:	4b6d      	ldr	r3, [pc, #436]	@ (8010434 <tcp_input+0x29c>)
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	4619      	mov	r1, r3
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7fe f8cb 	bl	800e420 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	895b      	ldrh	r3, [r3, #10]
 8010290:	8a3a      	ldrh	r2, [r7, #16]
 8010292:	429a      	cmp	r2, r3
 8010294:	f200 836e 	bhi.w	8010974 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	4a64      	ldr	r2, [pc, #400]	@ (8010430 <tcp_input+0x298>)
 80102a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	8a3a      	ldrh	r2, [r7, #16]
 80102a8:	4611      	mov	r1, r2
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fe f8b8 	bl	800e420 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	891a      	ldrh	r2, [r3, #8]
 80102b4:	8a3b      	ldrh	r3, [r7, #16]
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	b29a      	uxth	r2, r3
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	895b      	ldrh	r3, [r3, #10]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d005      	beq.n	80102d2 <tcp_input+0x13a>
 80102c6:	4b54      	ldr	r3, [pc, #336]	@ (8010418 <tcp_input+0x280>)
 80102c8:	22df      	movs	r2, #223	@ 0xdf
 80102ca:	495c      	ldr	r1, [pc, #368]	@ (801043c <tcp_input+0x2a4>)
 80102cc:	4854      	ldr	r0, [pc, #336]	@ (8010420 <tcp_input+0x288>)
 80102ce:	f006 fd2f 	bl	8016d30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	891a      	ldrh	r2, [r3, #8]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	891b      	ldrh	r3, [r3, #8]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d005      	beq.n	80102ec <tcp_input+0x154>
 80102e0:	4b4d      	ldr	r3, [pc, #308]	@ (8010418 <tcp_input+0x280>)
 80102e2:	22e0      	movs	r2, #224	@ 0xe0
 80102e4:	4956      	ldr	r1, [pc, #344]	@ (8010440 <tcp_input+0x2a8>)
 80102e6:	484e      	ldr	r0, [pc, #312]	@ (8010420 <tcp_input+0x288>)
 80102e8:	f006 fd22 	bl	8016d30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80102ec:	4b4d      	ldr	r3, [pc, #308]	@ (8010424 <tcp_input+0x28c>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	881b      	ldrh	r3, [r3, #0]
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	4a4b      	ldr	r2, [pc, #300]	@ (8010424 <tcp_input+0x28c>)
 80102f6:	6814      	ldr	r4, [r2, #0]
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fc fd29 	bl	800cd50 <lwip_htons>
 80102fe:	4603      	mov	r3, r0
 8010300:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010302:	4b48      	ldr	r3, [pc, #288]	@ (8010424 <tcp_input+0x28c>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	885b      	ldrh	r3, [r3, #2]
 8010308:	b29b      	uxth	r3, r3
 801030a:	4a46      	ldr	r2, [pc, #280]	@ (8010424 <tcp_input+0x28c>)
 801030c:	6814      	ldr	r4, [r2, #0]
 801030e:	4618      	mov	r0, r3
 8010310:	f7fc fd1e 	bl	800cd50 <lwip_htons>
 8010314:	4603      	mov	r3, r0
 8010316:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010318:	4b42      	ldr	r3, [pc, #264]	@ (8010424 <tcp_input+0x28c>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	4a41      	ldr	r2, [pc, #260]	@ (8010424 <tcp_input+0x28c>)
 8010320:	6814      	ldr	r4, [r2, #0]
 8010322:	4618      	mov	r0, r3
 8010324:	f7fc fd2a 	bl	800cd7c <lwip_htonl>
 8010328:	4603      	mov	r3, r0
 801032a:	6063      	str	r3, [r4, #4]
 801032c:	6863      	ldr	r3, [r4, #4]
 801032e:	4a45      	ldr	r2, [pc, #276]	@ (8010444 <tcp_input+0x2ac>)
 8010330:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010332:	4b3c      	ldr	r3, [pc, #240]	@ (8010424 <tcp_input+0x28c>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	689b      	ldr	r3, [r3, #8]
 8010338:	4a3a      	ldr	r2, [pc, #232]	@ (8010424 <tcp_input+0x28c>)
 801033a:	6814      	ldr	r4, [r2, #0]
 801033c:	4618      	mov	r0, r3
 801033e:	f7fc fd1d 	bl	800cd7c <lwip_htonl>
 8010342:	4603      	mov	r3, r0
 8010344:	60a3      	str	r3, [r4, #8]
 8010346:	68a3      	ldr	r3, [r4, #8]
 8010348:	4a3f      	ldr	r2, [pc, #252]	@ (8010448 <tcp_input+0x2b0>)
 801034a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801034c:	4b35      	ldr	r3, [pc, #212]	@ (8010424 <tcp_input+0x28c>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	89db      	ldrh	r3, [r3, #14]
 8010352:	b29b      	uxth	r3, r3
 8010354:	4a33      	ldr	r2, [pc, #204]	@ (8010424 <tcp_input+0x28c>)
 8010356:	6814      	ldr	r4, [r2, #0]
 8010358:	4618      	mov	r0, r3
 801035a:	f7fc fcf9 	bl	800cd50 <lwip_htons>
 801035e:	4603      	mov	r3, r0
 8010360:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010362:	4b30      	ldr	r3, [pc, #192]	@ (8010424 <tcp_input+0x28c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	899b      	ldrh	r3, [r3, #12]
 8010368:	b29b      	uxth	r3, r3
 801036a:	4618      	mov	r0, r3
 801036c:	f7fc fcf0 	bl	800cd50 <lwip_htons>
 8010370:	4603      	mov	r3, r0
 8010372:	b2db      	uxtb	r3, r3
 8010374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010378:	b2da      	uxtb	r2, r3
 801037a:	4b34      	ldr	r3, [pc, #208]	@ (801044c <tcp_input+0x2b4>)
 801037c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	891a      	ldrh	r2, [r3, #8]
 8010382:	4b33      	ldr	r3, [pc, #204]	@ (8010450 <tcp_input+0x2b8>)
 8010384:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010386:	4b31      	ldr	r3, [pc, #196]	@ (801044c <tcp_input+0x2b4>)
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	f003 0303 	and.w	r3, r3, #3
 801038e:	2b00      	cmp	r3, #0
 8010390:	d00c      	beq.n	80103ac <tcp_input+0x214>
    tcplen++;
 8010392:	4b2f      	ldr	r3, [pc, #188]	@ (8010450 <tcp_input+0x2b8>)
 8010394:	881b      	ldrh	r3, [r3, #0]
 8010396:	3301      	adds	r3, #1
 8010398:	b29a      	uxth	r2, r3
 801039a:	4b2d      	ldr	r3, [pc, #180]	@ (8010450 <tcp_input+0x2b8>)
 801039c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	891a      	ldrh	r2, [r3, #8]
 80103a2:	4b2b      	ldr	r3, [pc, #172]	@ (8010450 <tcp_input+0x2b8>)
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	f200 82e6 	bhi.w	8010978 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80103ac:	2300      	movs	r3, #0
 80103ae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103b0:	4b28      	ldr	r3, [pc, #160]	@ (8010454 <tcp_input+0x2bc>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	61fb      	str	r3, [r7, #28]
 80103b6:	e09d      	b.n	80104f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	7d1b      	ldrb	r3, [r3, #20]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d105      	bne.n	80103cc <tcp_input+0x234>
 80103c0:	4b15      	ldr	r3, [pc, #84]	@ (8010418 <tcp_input+0x280>)
 80103c2:	22fb      	movs	r2, #251	@ 0xfb
 80103c4:	4924      	ldr	r1, [pc, #144]	@ (8010458 <tcp_input+0x2c0>)
 80103c6:	4816      	ldr	r0, [pc, #88]	@ (8010420 <tcp_input+0x288>)
 80103c8:	f006 fcb2 	bl	8016d30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	7d1b      	ldrb	r3, [r3, #20]
 80103d0:	2b0a      	cmp	r3, #10
 80103d2:	d105      	bne.n	80103e0 <tcp_input+0x248>
 80103d4:	4b10      	ldr	r3, [pc, #64]	@ (8010418 <tcp_input+0x280>)
 80103d6:	22fc      	movs	r2, #252	@ 0xfc
 80103d8:	4920      	ldr	r1, [pc, #128]	@ (801045c <tcp_input+0x2c4>)
 80103da:	4811      	ldr	r0, [pc, #68]	@ (8010420 <tcp_input+0x288>)
 80103dc:	f006 fca8 	bl	8016d30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	7d1b      	ldrb	r3, [r3, #20]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d105      	bne.n	80103f4 <tcp_input+0x25c>
 80103e8:	4b0b      	ldr	r3, [pc, #44]	@ (8010418 <tcp_input+0x280>)
 80103ea:	22fd      	movs	r2, #253	@ 0xfd
 80103ec:	491c      	ldr	r1, [pc, #112]	@ (8010460 <tcp_input+0x2c8>)
 80103ee:	480c      	ldr	r0, [pc, #48]	@ (8010420 <tcp_input+0x288>)
 80103f0:	f006 fc9e 	bl	8016d30 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103f4:	69fb      	ldr	r3, [r7, #28]
 80103f6:	7a1b      	ldrb	r3, [r3, #8]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d033      	beq.n	8010464 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	7a1a      	ldrb	r2, [r3, #8]
 8010400:	4b09      	ldr	r3, [pc, #36]	@ (8010428 <tcp_input+0x290>)
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010408:	3301      	adds	r3, #1
 801040a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801040c:	429a      	cmp	r2, r3
 801040e:	d029      	beq.n	8010464 <tcp_input+0x2cc>
      prev = pcb;
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	61bb      	str	r3, [r7, #24]
      continue;
 8010414:	e06b      	b.n	80104ee <tcp_input+0x356>
 8010416:	bf00      	nop
 8010418:	08019260 	.word	0x08019260
 801041c:	08019294 	.word	0x08019294
 8010420:	080192ac 	.word	0x080192ac
 8010424:	2000c718 	.word	0x2000c718
 8010428:	200095f0 	.word	0x200095f0
 801042c:	2000c71c 	.word	0x2000c71c
 8010430:	2000c720 	.word	0x2000c720
 8010434:	2000c71e 	.word	0x2000c71e
 8010438:	080192d4 	.word	0x080192d4
 801043c:	080192e4 	.word	0x080192e4
 8010440:	080192f0 	.word	0x080192f0
 8010444:	2000c728 	.word	0x2000c728
 8010448:	2000c72c 	.word	0x2000c72c
 801044c:	2000c734 	.word	0x2000c734
 8010450:	2000c732 	.word	0x2000c732
 8010454:	2000c6fc 	.word	0x2000c6fc
 8010458:	08019310 	.word	0x08019310
 801045c:	08019338 	.word	0x08019338
 8010460:	08019364 	.word	0x08019364
    }

    if (pcb->remote_port == tcphdr->src &&
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	8b1a      	ldrh	r2, [r3, #24]
 8010468:	4b72      	ldr	r3, [pc, #456]	@ (8010634 <tcp_input+0x49c>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	881b      	ldrh	r3, [r3, #0]
 801046e:	b29b      	uxth	r3, r3
 8010470:	429a      	cmp	r2, r3
 8010472:	d13a      	bne.n	80104ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	8ada      	ldrh	r2, [r3, #22]
 8010478:	4b6e      	ldr	r3, [pc, #440]	@ (8010634 <tcp_input+0x49c>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	885b      	ldrh	r3, [r3, #2]
 801047e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010480:	429a      	cmp	r2, r3
 8010482:	d132      	bne.n	80104ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	685a      	ldr	r2, [r3, #4]
 8010488:	4b6b      	ldr	r3, [pc, #428]	@ (8010638 <tcp_input+0x4a0>)
 801048a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801048c:	429a      	cmp	r2, r3
 801048e:	d12c      	bne.n	80104ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	4b68      	ldr	r3, [pc, #416]	@ (8010638 <tcp_input+0x4a0>)
 8010496:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010498:	429a      	cmp	r2, r3
 801049a:	d126      	bne.n	80104ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	69fa      	ldr	r2, [r7, #28]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d106      	bne.n	80104b4 <tcp_input+0x31c>
 80104a6:	4b65      	ldr	r3, [pc, #404]	@ (801063c <tcp_input+0x4a4>)
 80104a8:	f240 120d 	movw	r2, #269	@ 0x10d
 80104ac:	4964      	ldr	r1, [pc, #400]	@ (8010640 <tcp_input+0x4a8>)
 80104ae:	4865      	ldr	r0, [pc, #404]	@ (8010644 <tcp_input+0x4ac>)
 80104b0:	f006 fc3e 	bl	8016d30 <iprintf>
      if (prev != NULL) {
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00a      	beq.n	80104d0 <tcp_input+0x338>
        prev->next = pcb->next;
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	68da      	ldr	r2, [r3, #12]
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80104c2:	4b61      	ldr	r3, [pc, #388]	@ (8010648 <tcp_input+0x4b0>)
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80104ca:	4a5f      	ldr	r2, [pc, #380]	@ (8010648 <tcp_input+0x4b0>)
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	69fa      	ldr	r2, [r7, #28]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d111      	bne.n	80104fe <tcp_input+0x366>
 80104da:	4b58      	ldr	r3, [pc, #352]	@ (801063c <tcp_input+0x4a4>)
 80104dc:	f240 1215 	movw	r2, #277	@ 0x115
 80104e0:	495a      	ldr	r1, [pc, #360]	@ (801064c <tcp_input+0x4b4>)
 80104e2:	4858      	ldr	r0, [pc, #352]	@ (8010644 <tcp_input+0x4ac>)
 80104e4:	f006 fc24 	bl	8016d30 <iprintf>
      break;
 80104e8:	e009      	b.n	80104fe <tcp_input+0x366>
    }
    prev = pcb;
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	61fb      	str	r3, [r7, #28]
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f47f af5e 	bne.w	80103b8 <tcp_input+0x220>
 80104fc:	e000      	b.n	8010500 <tcp_input+0x368>
      break;
 80104fe:	bf00      	nop
  }

  if (pcb == NULL) {
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	2b00      	cmp	r3, #0
 8010504:	f040 80aa 	bne.w	801065c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010508:	4b51      	ldr	r3, [pc, #324]	@ (8010650 <tcp_input+0x4b8>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	61fb      	str	r3, [r7, #28]
 801050e:	e03f      	b.n	8010590 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	7d1b      	ldrb	r3, [r3, #20]
 8010514:	2b0a      	cmp	r3, #10
 8010516:	d006      	beq.n	8010526 <tcp_input+0x38e>
 8010518:	4b48      	ldr	r3, [pc, #288]	@ (801063c <tcp_input+0x4a4>)
 801051a:	f240 121f 	movw	r2, #287	@ 0x11f
 801051e:	494d      	ldr	r1, [pc, #308]	@ (8010654 <tcp_input+0x4bc>)
 8010520:	4848      	ldr	r0, [pc, #288]	@ (8010644 <tcp_input+0x4ac>)
 8010522:	f006 fc05 	bl	8016d30 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	7a1b      	ldrb	r3, [r3, #8]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d009      	beq.n	8010542 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801052e:	69fb      	ldr	r3, [r7, #28]
 8010530:	7a1a      	ldrb	r2, [r3, #8]
 8010532:	4b41      	ldr	r3, [pc, #260]	@ (8010638 <tcp_input+0x4a0>)
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801053a:	3301      	adds	r3, #1
 801053c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801053e:	429a      	cmp	r2, r3
 8010540:	d122      	bne.n	8010588 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	8b1a      	ldrh	r2, [r3, #24]
 8010546:	4b3b      	ldr	r3, [pc, #236]	@ (8010634 <tcp_input+0x49c>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	881b      	ldrh	r3, [r3, #0]
 801054c:	b29b      	uxth	r3, r3
 801054e:	429a      	cmp	r2, r3
 8010550:	d11b      	bne.n	801058a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	8ada      	ldrh	r2, [r3, #22]
 8010556:	4b37      	ldr	r3, [pc, #220]	@ (8010634 <tcp_input+0x49c>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	885b      	ldrh	r3, [r3, #2]
 801055c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801055e:	429a      	cmp	r2, r3
 8010560:	d113      	bne.n	801058a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	685a      	ldr	r2, [r3, #4]
 8010566:	4b34      	ldr	r3, [pc, #208]	@ (8010638 <tcp_input+0x4a0>)
 8010568:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801056a:	429a      	cmp	r2, r3
 801056c:	d10d      	bne.n	801058a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	4b31      	ldr	r3, [pc, #196]	@ (8010638 <tcp_input+0x4a0>)
 8010574:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010576:	429a      	cmp	r2, r3
 8010578:	d107      	bne.n	801058a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801057a:	69f8      	ldr	r0, [r7, #28]
 801057c:	f000 fb56 	bl	8010c2c <tcp_timewait_input>
        }
        pbuf_free(p);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7fd ffd3 	bl	800e52c <pbuf_free>
        return;
 8010586:	e1fd      	b.n	8010984 <tcp_input+0x7ec>
        continue;
 8010588:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	61fb      	str	r3, [r7, #28]
 8010590:	69fb      	ldr	r3, [r7, #28]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1bc      	bne.n	8010510 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010596:	2300      	movs	r3, #0
 8010598:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801059a:	4b2f      	ldr	r3, [pc, #188]	@ (8010658 <tcp_input+0x4c0>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	617b      	str	r3, [r7, #20]
 80105a0:	e02a      	b.n	80105f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	7a1b      	ldrb	r3, [r3, #8]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00c      	beq.n	80105c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	7a1a      	ldrb	r2, [r3, #8]
 80105ae:	4b22      	ldr	r3, [pc, #136]	@ (8010638 <tcp_input+0x4a0>)
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80105b6:	3301      	adds	r3, #1
 80105b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d002      	beq.n	80105c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	61bb      	str	r3, [r7, #24]
        continue;
 80105c2:	e016      	b.n	80105f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	8ada      	ldrh	r2, [r3, #22]
 80105c8:	4b1a      	ldr	r3, [pc, #104]	@ (8010634 <tcp_input+0x49c>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	885b      	ldrh	r3, [r3, #2]
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d10c      	bne.n	80105ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	4b17      	ldr	r3, [pc, #92]	@ (8010638 <tcp_input+0x4a0>)
 80105da:	695b      	ldr	r3, [r3, #20]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d00f      	beq.n	8010600 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00d      	beq.n	8010602 <tcp_input+0x46a>
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d009      	beq.n	8010602 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	617b      	str	r3, [r7, #20]
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d1d1      	bne.n	80105a2 <tcp_input+0x40a>
 80105fe:	e000      	b.n	8010602 <tcp_input+0x46a>
            break;
 8010600:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d029      	beq.n	801065c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00a      	beq.n	8010624 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	68da      	ldr	r2, [r3, #12]
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010616:	4b10      	ldr	r3, [pc, #64]	@ (8010658 <tcp_input+0x4c0>)
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801061e:	4a0e      	ldr	r2, [pc, #56]	@ (8010658 <tcp_input+0x4c0>)
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010624:	6978      	ldr	r0, [r7, #20]
 8010626:	f000 fa03 	bl	8010a30 <tcp_listen_input>
      }
      pbuf_free(p);
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7fd ff7e 	bl	800e52c <pbuf_free>
      return;
 8010630:	e1a8      	b.n	8010984 <tcp_input+0x7ec>
 8010632:	bf00      	nop
 8010634:	2000c718 	.word	0x2000c718
 8010638:	200095f0 	.word	0x200095f0
 801063c:	08019260 	.word	0x08019260
 8010640:	0801938c 	.word	0x0801938c
 8010644:	080192ac 	.word	0x080192ac
 8010648:	2000c6fc 	.word	0x2000c6fc
 801064c:	080193b8 	.word	0x080193b8
 8010650:	2000c700 	.word	0x2000c700
 8010654:	080193e4 	.word	0x080193e4
 8010658:	2000c6f8 	.word	0x2000c6f8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f000 8158 	beq.w	8010914 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010664:	4b95      	ldr	r3, [pc, #596]	@ (80108bc <tcp_input+0x724>)
 8010666:	2200      	movs	r2, #0
 8010668:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	891a      	ldrh	r2, [r3, #8]
 801066e:	4b93      	ldr	r3, [pc, #588]	@ (80108bc <tcp_input+0x724>)
 8010670:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010672:	4a92      	ldr	r2, [pc, #584]	@ (80108bc <tcp_input+0x724>)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010678:	4b91      	ldr	r3, [pc, #580]	@ (80108c0 <tcp_input+0x728>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a8f      	ldr	r2, [pc, #572]	@ (80108bc <tcp_input+0x724>)
 801067e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010680:	4b90      	ldr	r3, [pc, #576]	@ (80108c4 <tcp_input+0x72c>)
 8010682:	2200      	movs	r2, #0
 8010684:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010686:	4b90      	ldr	r3, [pc, #576]	@ (80108c8 <tcp_input+0x730>)
 8010688:	2200      	movs	r2, #0
 801068a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801068c:	4b8f      	ldr	r3, [pc, #572]	@ (80108cc <tcp_input+0x734>)
 801068e:	2200      	movs	r2, #0
 8010690:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010692:	4b8f      	ldr	r3, [pc, #572]	@ (80108d0 <tcp_input+0x738>)
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	f003 0308 	and.w	r3, r3, #8
 801069a:	2b00      	cmp	r3, #0
 801069c:	d006      	beq.n	80106ac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	7b5b      	ldrb	r3, [r3, #13]
 80106a2:	f043 0301 	orr.w	r3, r3, #1
 80106a6:	b2da      	uxtb	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d017      	beq.n	80106e4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80106b4:	69f8      	ldr	r0, [r7, #28]
 80106b6:	f7ff f929 	bl	800f90c <tcp_process_refused_data>
 80106ba:	4603      	mov	r3, r0
 80106bc:	f113 0f0d 	cmn.w	r3, #13
 80106c0:	d007      	beq.n	80106d2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d00c      	beq.n	80106e4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80106ca:	4b82      	ldr	r3, [pc, #520]	@ (80108d4 <tcp_input+0x73c>)
 80106cc:	881b      	ldrh	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d008      	beq.n	80106e4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f040 80e3 	bne.w	80108a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80106dc:	69f8      	ldr	r0, [r7, #28]
 80106de:	f003 f9a7 	bl	8013a30 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80106e2:	e0de      	b.n	80108a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80106e4:	4a7c      	ldr	r2, [pc, #496]	@ (80108d8 <tcp_input+0x740>)
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80106ea:	69f8      	ldr	r0, [r7, #28]
 80106ec:	f000 fb18 	bl	8010d20 <tcp_process>
 80106f0:	4603      	mov	r3, r0
 80106f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80106f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106f8:	f113 0f0d 	cmn.w	r3, #13
 80106fc:	f000 80d3 	beq.w	80108a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010700:	4b71      	ldr	r3, [pc, #452]	@ (80108c8 <tcp_input+0x730>)
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	f003 0308 	and.w	r3, r3, #8
 8010708:	2b00      	cmp	r3, #0
 801070a:	d015      	beq.n	8010738 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010712:	2b00      	cmp	r3, #0
 8010714:	d008      	beq.n	8010728 <tcp_input+0x590>
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801071c:	69fa      	ldr	r2, [r7, #28]
 801071e:	6912      	ldr	r2, [r2, #16]
 8010720:	f06f 010d 	mvn.w	r1, #13
 8010724:	4610      	mov	r0, r2
 8010726:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010728:	69f9      	ldr	r1, [r7, #28]
 801072a:	486c      	ldr	r0, [pc, #432]	@ (80108dc <tcp_input+0x744>)
 801072c:	f7ff fbbc 	bl	800fea8 <tcp_pcb_remove>
        tcp_free(pcb);
 8010730:	69f8      	ldr	r0, [r7, #28]
 8010732:	f7fe f9a7 	bl	800ea84 <tcp_free>
 8010736:	e0da      	b.n	80108ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801073c:	4b63      	ldr	r3, [pc, #396]	@ (80108cc <tcp_input+0x734>)
 801073e:	881b      	ldrh	r3, [r3, #0]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d01d      	beq.n	8010780 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010744:	4b61      	ldr	r3, [pc, #388]	@ (80108cc <tcp_input+0x734>)
 8010746:	881b      	ldrh	r3, [r3, #0]
 8010748:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00a      	beq.n	801076a <tcp_input+0x5d2>
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801075a:	69fa      	ldr	r2, [r7, #28]
 801075c:	6910      	ldr	r0, [r2, #16]
 801075e:	89fa      	ldrh	r2, [r7, #14]
 8010760:	69f9      	ldr	r1, [r7, #28]
 8010762:	4798      	blx	r3
 8010764:	4603      	mov	r3, r0
 8010766:	74fb      	strb	r3, [r7, #19]
 8010768:	e001      	b.n	801076e <tcp_input+0x5d6>
 801076a:	2300      	movs	r3, #0
 801076c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801076e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010772:	f113 0f0d 	cmn.w	r3, #13
 8010776:	f000 8098 	beq.w	80108aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801077a:	4b54      	ldr	r3, [pc, #336]	@ (80108cc <tcp_input+0x734>)
 801077c:	2200      	movs	r2, #0
 801077e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010780:	69f8      	ldr	r0, [r7, #28]
 8010782:	f000 f915 	bl	80109b0 <tcp_input_delayed_close>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	f040 8090 	bne.w	80108ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801078e:	4b4d      	ldr	r3, [pc, #308]	@ (80108c4 <tcp_input+0x72c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d041      	beq.n	801081a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801079a:	2b00      	cmp	r3, #0
 801079c:	d006      	beq.n	80107ac <tcp_input+0x614>
 801079e:	4b50      	ldr	r3, [pc, #320]	@ (80108e0 <tcp_input+0x748>)
 80107a0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80107a4:	494f      	ldr	r1, [pc, #316]	@ (80108e4 <tcp_input+0x74c>)
 80107a6:	4850      	ldr	r0, [pc, #320]	@ (80108e8 <tcp_input+0x750>)
 80107a8:	f006 fac2 	bl	8016d30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80107ac:	69fb      	ldr	r3, [r7, #28]
 80107ae:	8b5b      	ldrh	r3, [r3, #26]
 80107b0:	f003 0310 	and.w	r3, r3, #16
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d008      	beq.n	80107ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80107b8:	4b42      	ldr	r3, [pc, #264]	@ (80108c4 <tcp_input+0x72c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fd feb5 	bl	800e52c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80107c2:	69f8      	ldr	r0, [r7, #28]
 80107c4:	f7fe fc46 	bl	800f054 <tcp_abort>
            goto aborted;
 80107c8:	e091      	b.n	80108ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d00c      	beq.n	80107ee <tcp_input+0x656>
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	6918      	ldr	r0, [r3, #16]
 80107de:	4b39      	ldr	r3, [pc, #228]	@ (80108c4 <tcp_input+0x72c>)
 80107e0:	681a      	ldr	r2, [r3, #0]
 80107e2:	2300      	movs	r3, #0
 80107e4:	69f9      	ldr	r1, [r7, #28]
 80107e6:	47a0      	blx	r4
 80107e8:	4603      	mov	r3, r0
 80107ea:	74fb      	strb	r3, [r7, #19]
 80107ec:	e008      	b.n	8010800 <tcp_input+0x668>
 80107ee:	4b35      	ldr	r3, [pc, #212]	@ (80108c4 <tcp_input+0x72c>)
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	2300      	movs	r3, #0
 80107f4:	69f9      	ldr	r1, [r7, #28]
 80107f6:	2000      	movs	r0, #0
 80107f8:	f7ff f95e 	bl	800fab8 <tcp_recv_null>
 80107fc:	4603      	mov	r3, r0
 80107fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010800:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010804:	f113 0f0d 	cmn.w	r3, #13
 8010808:	d053      	beq.n	80108b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801080a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d003      	beq.n	801081a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010812:	4b2c      	ldr	r3, [pc, #176]	@ (80108c4 <tcp_input+0x72c>)
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801081a:	4b2b      	ldr	r3, [pc, #172]	@ (80108c8 <tcp_input+0x730>)
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	f003 0320 	and.w	r3, r3, #32
 8010822:	2b00      	cmp	r3, #0
 8010824:	d030      	beq.n	8010888 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801082a:	2b00      	cmp	r3, #0
 801082c:	d009      	beq.n	8010842 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010832:	7b5a      	ldrb	r2, [r3, #13]
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010838:	f042 0220 	orr.w	r2, r2, #32
 801083c:	b2d2      	uxtb	r2, r2
 801083e:	735a      	strb	r2, [r3, #13]
 8010840:	e022      	b.n	8010888 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010846:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801084a:	d005      	beq.n	8010858 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010850:	3301      	adds	r3, #1
 8010852:	b29a      	uxth	r2, r3
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801085e:	2b00      	cmp	r3, #0
 8010860:	d00b      	beq.n	801087a <tcp_input+0x6e2>
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	6918      	ldr	r0, [r3, #16]
 801086c:	2300      	movs	r3, #0
 801086e:	2200      	movs	r2, #0
 8010870:	69f9      	ldr	r1, [r7, #28]
 8010872:	47a0      	blx	r4
 8010874:	4603      	mov	r3, r0
 8010876:	74fb      	strb	r3, [r7, #19]
 8010878:	e001      	b.n	801087e <tcp_input+0x6e6>
 801087a:	2300      	movs	r3, #0
 801087c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801087e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010882:	f113 0f0d 	cmn.w	r3, #13
 8010886:	d016      	beq.n	80108b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010888:	4b13      	ldr	r3, [pc, #76]	@ (80108d8 <tcp_input+0x740>)
 801088a:	2200      	movs	r2, #0
 801088c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801088e:	69f8      	ldr	r0, [r7, #28]
 8010890:	f000 f88e 	bl	80109b0 <tcp_input_delayed_close>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d128      	bne.n	80108ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801089a:	69f8      	ldr	r0, [r7, #28]
 801089c:	f002 fac2 	bl	8012e24 <tcp_output>
 80108a0:	e025      	b.n	80108ee <tcp_input+0x756>
        goto aborted;
 80108a2:	bf00      	nop
 80108a4:	e023      	b.n	80108ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80108a6:	bf00      	nop
 80108a8:	e021      	b.n	80108ee <tcp_input+0x756>
              goto aborted;
 80108aa:	bf00      	nop
 80108ac:	e01f      	b.n	80108ee <tcp_input+0x756>
          goto aborted;
 80108ae:	bf00      	nop
 80108b0:	e01d      	b.n	80108ee <tcp_input+0x756>
            goto aborted;
 80108b2:	bf00      	nop
 80108b4:	e01b      	b.n	80108ee <tcp_input+0x756>
              goto aborted;
 80108b6:	bf00      	nop
 80108b8:	e019      	b.n	80108ee <tcp_input+0x756>
 80108ba:	bf00      	nop
 80108bc:	2000c708 	.word	0x2000c708
 80108c0:	2000c718 	.word	0x2000c718
 80108c4:	2000c738 	.word	0x2000c738
 80108c8:	2000c735 	.word	0x2000c735
 80108cc:	2000c730 	.word	0x2000c730
 80108d0:	2000c734 	.word	0x2000c734
 80108d4:	2000c732 	.word	0x2000c732
 80108d8:	2000c73c 	.word	0x2000c73c
 80108dc:	2000c6fc 	.word	0x2000c6fc
 80108e0:	08019260 	.word	0x08019260
 80108e4:	08019414 	.word	0x08019414
 80108e8:	080192ac 	.word	0x080192ac
          goto aborted;
 80108ec:	bf00      	nop
    tcp_input_pcb = NULL;
 80108ee:	4b27      	ldr	r3, [pc, #156]	@ (801098c <tcp_input+0x7f4>)
 80108f0:	2200      	movs	r2, #0
 80108f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80108f4:	4b26      	ldr	r3, [pc, #152]	@ (8010990 <tcp_input+0x7f8>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80108fa:	4b26      	ldr	r3, [pc, #152]	@ (8010994 <tcp_input+0x7fc>)
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d03f      	beq.n	8010982 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010902:	4b24      	ldr	r3, [pc, #144]	@ (8010994 <tcp_input+0x7fc>)
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	f7fd fe10 	bl	800e52c <pbuf_free>
      inseg.p = NULL;
 801090c:	4b21      	ldr	r3, [pc, #132]	@ (8010994 <tcp_input+0x7fc>)
 801090e:	2200      	movs	r2, #0
 8010910:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010912:	e036      	b.n	8010982 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010914:	4b20      	ldr	r3, [pc, #128]	@ (8010998 <tcp_input+0x800>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	899b      	ldrh	r3, [r3, #12]
 801091a:	b29b      	uxth	r3, r3
 801091c:	4618      	mov	r0, r3
 801091e:	f7fc fa17 	bl	800cd50 <lwip_htons>
 8010922:	4603      	mov	r3, r0
 8010924:	b2db      	uxtb	r3, r3
 8010926:	f003 0304 	and.w	r3, r3, #4
 801092a:	2b00      	cmp	r3, #0
 801092c:	d118      	bne.n	8010960 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801092e:	4b1b      	ldr	r3, [pc, #108]	@ (801099c <tcp_input+0x804>)
 8010930:	6819      	ldr	r1, [r3, #0]
 8010932:	4b1b      	ldr	r3, [pc, #108]	@ (80109a0 <tcp_input+0x808>)
 8010934:	881b      	ldrh	r3, [r3, #0]
 8010936:	461a      	mov	r2, r3
 8010938:	4b1a      	ldr	r3, [pc, #104]	@ (80109a4 <tcp_input+0x80c>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801093e:	4b16      	ldr	r3, [pc, #88]	@ (8010998 <tcp_input+0x800>)
 8010940:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010942:	885b      	ldrh	r3, [r3, #2]
 8010944:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010946:	4a14      	ldr	r2, [pc, #80]	@ (8010998 <tcp_input+0x800>)
 8010948:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801094a:	8812      	ldrh	r2, [r2, #0]
 801094c:	b292      	uxth	r2, r2
 801094e:	9202      	str	r2, [sp, #8]
 8010950:	9301      	str	r3, [sp, #4]
 8010952:	4b15      	ldr	r3, [pc, #84]	@ (80109a8 <tcp_input+0x810>)
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	4b15      	ldr	r3, [pc, #84]	@ (80109ac <tcp_input+0x814>)
 8010958:	4602      	mov	r2, r0
 801095a:	2000      	movs	r0, #0
 801095c:	f003 f816 	bl	801398c <tcp_rst>
    pbuf_free(p);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7fd fde3 	bl	800e52c <pbuf_free>
  return;
 8010966:	e00c      	b.n	8010982 <tcp_input+0x7ea>
    goto dropped;
 8010968:	bf00      	nop
 801096a:	e006      	b.n	801097a <tcp_input+0x7e2>
    goto dropped;
 801096c:	bf00      	nop
 801096e:	e004      	b.n	801097a <tcp_input+0x7e2>
    goto dropped;
 8010970:	bf00      	nop
 8010972:	e002      	b.n	801097a <tcp_input+0x7e2>
      goto dropped;
 8010974:	bf00      	nop
 8010976:	e000      	b.n	801097a <tcp_input+0x7e2>
      goto dropped;
 8010978:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f7fd fdd6 	bl	800e52c <pbuf_free>
 8010980:	e000      	b.n	8010984 <tcp_input+0x7ec>
  return;
 8010982:	bf00      	nop
}
 8010984:	3724      	adds	r7, #36	@ 0x24
 8010986:	46bd      	mov	sp, r7
 8010988:	bd90      	pop	{r4, r7, pc}
 801098a:	bf00      	nop
 801098c:	2000c73c 	.word	0x2000c73c
 8010990:	2000c738 	.word	0x2000c738
 8010994:	2000c708 	.word	0x2000c708
 8010998:	2000c718 	.word	0x2000c718
 801099c:	2000c72c 	.word	0x2000c72c
 80109a0:	2000c732 	.word	0x2000c732
 80109a4:	2000c728 	.word	0x2000c728
 80109a8:	20009600 	.word	0x20009600
 80109ac:	20009604 	.word	0x20009604

080109b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b082      	sub	sp, #8
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d106      	bne.n	80109cc <tcp_input_delayed_close+0x1c>
 80109be:	4b17      	ldr	r3, [pc, #92]	@ (8010a1c <tcp_input_delayed_close+0x6c>)
 80109c0:	f240 225a 	movw	r2, #602	@ 0x25a
 80109c4:	4916      	ldr	r1, [pc, #88]	@ (8010a20 <tcp_input_delayed_close+0x70>)
 80109c6:	4817      	ldr	r0, [pc, #92]	@ (8010a24 <tcp_input_delayed_close+0x74>)
 80109c8:	f006 f9b2 	bl	8016d30 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80109cc:	4b16      	ldr	r3, [pc, #88]	@ (8010a28 <tcp_input_delayed_close+0x78>)
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	f003 0310 	and.w	r3, r3, #16
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d01c      	beq.n	8010a12 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	8b5b      	ldrh	r3, [r3, #26]
 80109dc:	f003 0310 	and.w	r3, r3, #16
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d10d      	bne.n	8010a00 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d008      	beq.n	8010a00 <tcp_input_delayed_close+0x50>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	6912      	ldr	r2, [r2, #16]
 80109f8:	f06f 010e 	mvn.w	r1, #14
 80109fc:	4610      	mov	r0, r2
 80109fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010a00:	6879      	ldr	r1, [r7, #4]
 8010a02:	480a      	ldr	r0, [pc, #40]	@ (8010a2c <tcp_input_delayed_close+0x7c>)
 8010a04:	f7ff fa50 	bl	800fea8 <tcp_pcb_remove>
    tcp_free(pcb);
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7fe f83b 	bl	800ea84 <tcp_free>
    return 1;
 8010a0e:	2301      	movs	r3, #1
 8010a10:	e000      	b.n	8010a14 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	08019260 	.word	0x08019260
 8010a20:	08019430 	.word	0x08019430
 8010a24:	080192ac 	.word	0x080192ac
 8010a28:	2000c735 	.word	0x2000c735
 8010a2c:	2000c6fc 	.word	0x2000c6fc

08010a30 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010a30:	b590      	push	{r4, r7, lr}
 8010a32:	b08b      	sub	sp, #44	@ 0x2c
 8010a34:	af04      	add	r7, sp, #16
 8010a36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010a38:	4b6f      	ldr	r3, [pc, #444]	@ (8010bf8 <tcp_listen_input+0x1c8>)
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	f003 0304 	and.w	r3, r3, #4
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f040 80d2 	bne.w	8010bea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d106      	bne.n	8010a5a <tcp_listen_input+0x2a>
 8010a4c:	4b6b      	ldr	r3, [pc, #428]	@ (8010bfc <tcp_listen_input+0x1cc>)
 8010a4e:	f240 2281 	movw	r2, #641	@ 0x281
 8010a52:	496b      	ldr	r1, [pc, #428]	@ (8010c00 <tcp_listen_input+0x1d0>)
 8010a54:	486b      	ldr	r0, [pc, #428]	@ (8010c04 <tcp_listen_input+0x1d4>)
 8010a56:	f006 f96b 	bl	8016d30 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010a5a:	4b67      	ldr	r3, [pc, #412]	@ (8010bf8 <tcp_listen_input+0x1c8>)
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	f003 0310 	and.w	r3, r3, #16
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d019      	beq.n	8010a9a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a66:	4b68      	ldr	r3, [pc, #416]	@ (8010c08 <tcp_listen_input+0x1d8>)
 8010a68:	6819      	ldr	r1, [r3, #0]
 8010a6a:	4b68      	ldr	r3, [pc, #416]	@ (8010c0c <tcp_listen_input+0x1dc>)
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	461a      	mov	r2, r3
 8010a70:	4b67      	ldr	r3, [pc, #412]	@ (8010c10 <tcp_listen_input+0x1e0>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a76:	4b67      	ldr	r3, [pc, #412]	@ (8010c14 <tcp_listen_input+0x1e4>)
 8010a78:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a7a:	885b      	ldrh	r3, [r3, #2]
 8010a7c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a7e:	4a65      	ldr	r2, [pc, #404]	@ (8010c14 <tcp_listen_input+0x1e4>)
 8010a80:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a82:	8812      	ldrh	r2, [r2, #0]
 8010a84:	b292      	uxth	r2, r2
 8010a86:	9202      	str	r2, [sp, #8]
 8010a88:	9301      	str	r3, [sp, #4]
 8010a8a:	4b63      	ldr	r3, [pc, #396]	@ (8010c18 <tcp_listen_input+0x1e8>)
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	4b63      	ldr	r3, [pc, #396]	@ (8010c1c <tcp_listen_input+0x1ec>)
 8010a90:	4602      	mov	r2, r0
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f002 ff7a 	bl	801398c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010a98:	e0a9      	b.n	8010bee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010a9a:	4b57      	ldr	r3, [pc, #348]	@ (8010bf8 <tcp_listen_input+0x1c8>)
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	f003 0302 	and.w	r3, r3, #2
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f000 80a3 	beq.w	8010bee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	7d5b      	ldrb	r3, [r3, #21]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff f927 	bl	800fd00 <tcp_alloc>
 8010ab2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d111      	bne.n	8010ade <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	699b      	ldr	r3, [r3, #24]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00a      	beq.n	8010ad8 <tcp_listen_input+0xa8>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	699b      	ldr	r3, [r3, #24]
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	6910      	ldr	r0, [r2, #16]
 8010aca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010ace:	2100      	movs	r1, #0
 8010ad0:	4798      	blx	r3
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	73bb      	strb	r3, [r7, #14]
      return;
 8010ad6:	e08b      	b.n	8010bf0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010ad8:	23f0      	movs	r3, #240	@ 0xf0
 8010ada:	73bb      	strb	r3, [r7, #14]
      return;
 8010adc:	e088      	b.n	8010bf0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010ade:	4b50      	ldr	r3, [pc, #320]	@ (8010c20 <tcp_listen_input+0x1f0>)
 8010ae0:	695a      	ldr	r2, [r3, #20]
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8010c20 <tcp_listen_input+0x1f0>)
 8010ae8:	691a      	ldr	r2, [r3, #16]
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	8ada      	ldrh	r2, [r3, #22]
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010af6:	4b47      	ldr	r3, [pc, #284]	@ (8010c14 <tcp_listen_input+0x1e4>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	881b      	ldrh	r3, [r3, #0]
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	2203      	movs	r2, #3
 8010b06:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010b08:	4b41      	ldr	r3, [pc, #260]	@ (8010c10 <tcp_listen_input+0x1e0>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	1c5a      	adds	r2, r3, #1
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8010b1a:	6978      	ldr	r0, [r7, #20]
 8010b1c:	f7ff fa58 	bl	800ffd0 <tcp_next_iss>
 8010b20:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	693a      	ldr	r2, [r7, #16]
 8010b26:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	693a      	ldr	r2, [r7, #16]
 8010b2c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	693a      	ldr	r2, [r7, #16]
 8010b32:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	693a      	ldr	r2, [r7, #16]
 8010b38:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010b3a:	4b35      	ldr	r3, [pc, #212]	@ (8010c10 <tcp_listen_input+0x1e0>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	1e5a      	subs	r2, r3, #1
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	691a      	ldr	r2, [r3, #16]
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	7a5b      	ldrb	r3, [r3, #9]
 8010b56:	f003 030c 	and.w	r3, r3, #12
 8010b5a:	b2da      	uxtb	r2, r3
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	7a1a      	ldrb	r2, [r3, #8]
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010b68:	4b2e      	ldr	r3, [pc, #184]	@ (8010c24 <tcp_listen_input+0x1f4>)
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	60da      	str	r2, [r3, #12]
 8010b70:	4a2c      	ldr	r2, [pc, #176]	@ (8010c24 <tcp_listen_input+0x1f4>)
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	6013      	str	r3, [r2, #0]
 8010b76:	f003 f8cb 	bl	8013d10 <tcp_timer_needed>
 8010b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8010c28 <tcp_listen_input+0x1f8>)
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010b80:	6978      	ldr	r0, [r7, #20]
 8010b82:	f001 fd8b 	bl	801269c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010b86:	4b23      	ldr	r3, [pc, #140]	@ (8010c14 <tcp_listen_input+0x1e4>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	89db      	ldrh	r3, [r3, #14]
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	3304      	adds	r3, #4
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f004 fcbf 	bl	801552c <ip4_route>
 8010bae:	4601      	mov	r1, r0
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	3304      	adds	r3, #4
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	f7ff fa30 	bl	801001c <tcp_eff_send_mss_netif>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010bc4:	2112      	movs	r1, #18
 8010bc6:	6978      	ldr	r0, [r7, #20]
 8010bc8:	f002 f83e 	bl	8012c48 <tcp_enqueue_flags>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d004      	beq.n	8010be2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010bd8:	2100      	movs	r1, #0
 8010bda:	6978      	ldr	r0, [r7, #20]
 8010bdc:	f7fe f97c 	bl	800eed8 <tcp_abandon>
      return;
 8010be0:	e006      	b.n	8010bf0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010be2:	6978      	ldr	r0, [r7, #20]
 8010be4:	f002 f91e 	bl	8012e24 <tcp_output>
  return;
 8010be8:	e001      	b.n	8010bee <tcp_listen_input+0x1be>
    return;
 8010bea:	bf00      	nop
 8010bec:	e000      	b.n	8010bf0 <tcp_listen_input+0x1c0>
  return;
 8010bee:	bf00      	nop
}
 8010bf0:	371c      	adds	r7, #28
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd90      	pop	{r4, r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	2000c734 	.word	0x2000c734
 8010bfc:	08019260 	.word	0x08019260
 8010c00:	08019458 	.word	0x08019458
 8010c04:	080192ac 	.word	0x080192ac
 8010c08:	2000c72c 	.word	0x2000c72c
 8010c0c:	2000c732 	.word	0x2000c732
 8010c10:	2000c728 	.word	0x2000c728
 8010c14:	2000c718 	.word	0x2000c718
 8010c18:	20009600 	.word	0x20009600
 8010c1c:	20009604 	.word	0x20009604
 8010c20:	200095f0 	.word	0x200095f0
 8010c24:	2000c6fc 	.word	0x2000c6fc
 8010c28:	2000c704 	.word	0x2000c704

08010c2c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af04      	add	r7, sp, #16
 8010c32:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010c34:	4b2f      	ldr	r3, [pc, #188]	@ (8010cf4 <tcp_timewait_input+0xc8>)
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	f003 0304 	and.w	r3, r3, #4
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d153      	bne.n	8010ce8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d106      	bne.n	8010c54 <tcp_timewait_input+0x28>
 8010c46:	4b2c      	ldr	r3, [pc, #176]	@ (8010cf8 <tcp_timewait_input+0xcc>)
 8010c48:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010c4c:	492b      	ldr	r1, [pc, #172]	@ (8010cfc <tcp_timewait_input+0xd0>)
 8010c4e:	482c      	ldr	r0, [pc, #176]	@ (8010d00 <tcp_timewait_input+0xd4>)
 8010c50:	f006 f86e 	bl	8016d30 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010c54:	4b27      	ldr	r3, [pc, #156]	@ (8010cf4 <tcp_timewait_input+0xc8>)
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	f003 0302 	and.w	r3, r3, #2
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d02a      	beq.n	8010cb6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010c60:	4b28      	ldr	r3, [pc, #160]	@ (8010d04 <tcp_timewait_input+0xd8>)
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c68:	1ad3      	subs	r3, r2, r3
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	db2d      	blt.n	8010cca <tcp_timewait_input+0x9e>
 8010c6e:	4b25      	ldr	r3, [pc, #148]	@ (8010d04 <tcp_timewait_input+0xd8>)
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c76:	6879      	ldr	r1, [r7, #4]
 8010c78:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010c7a:	440b      	add	r3, r1
 8010c7c:	1ad3      	subs	r3, r2, r3
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	dc23      	bgt.n	8010cca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c82:	4b21      	ldr	r3, [pc, #132]	@ (8010d08 <tcp_timewait_input+0xdc>)
 8010c84:	6819      	ldr	r1, [r3, #0]
 8010c86:	4b21      	ldr	r3, [pc, #132]	@ (8010d0c <tcp_timewait_input+0xe0>)
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8010d04 <tcp_timewait_input+0xd8>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c92:	4b1f      	ldr	r3, [pc, #124]	@ (8010d10 <tcp_timewait_input+0xe4>)
 8010c94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c96:	885b      	ldrh	r3, [r3, #2]
 8010c98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8010d10 <tcp_timewait_input+0xe4>)
 8010c9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c9e:	8812      	ldrh	r2, [r2, #0]
 8010ca0:	b292      	uxth	r2, r2
 8010ca2:	9202      	str	r2, [sp, #8]
 8010ca4:	9301      	str	r3, [sp, #4]
 8010ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8010d14 <tcp_timewait_input+0xe8>)
 8010ca8:	9300      	str	r3, [sp, #0]
 8010caa:	4b1b      	ldr	r3, [pc, #108]	@ (8010d18 <tcp_timewait_input+0xec>)
 8010cac:	4602      	mov	r2, r0
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f002 fe6c 	bl	801398c <tcp_rst>
      return;
 8010cb4:	e01b      	b.n	8010cee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8010cf4 <tcp_timewait_input+0xc8>)
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	f003 0301 	and.w	r3, r3, #1
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d003      	beq.n	8010cca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010cc2:	4b16      	ldr	r3, [pc, #88]	@ (8010d1c <tcp_timewait_input+0xf0>)
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010cca:	4b10      	ldr	r3, [pc, #64]	@ (8010d0c <tcp_timewait_input+0xe0>)
 8010ccc:	881b      	ldrh	r3, [r3, #0]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d00c      	beq.n	8010cec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	8b5b      	ldrh	r3, [r3, #26]
 8010cd6:	f043 0302 	orr.w	r3, r3, #2
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f002 f89f 	bl	8012e24 <tcp_output>
  }
  return;
 8010ce6:	e001      	b.n	8010cec <tcp_timewait_input+0xc0>
    return;
 8010ce8:	bf00      	nop
 8010cea:	e000      	b.n	8010cee <tcp_timewait_input+0xc2>
  return;
 8010cec:	bf00      	nop
}
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	2000c734 	.word	0x2000c734
 8010cf8:	08019260 	.word	0x08019260
 8010cfc:	08019478 	.word	0x08019478
 8010d00:	080192ac 	.word	0x080192ac
 8010d04:	2000c728 	.word	0x2000c728
 8010d08:	2000c72c 	.word	0x2000c72c
 8010d0c:	2000c732 	.word	0x2000c732
 8010d10:	2000c718 	.word	0x2000c718
 8010d14:	20009600 	.word	0x20009600
 8010d18:	20009604 	.word	0x20009604
 8010d1c:	2000c6f0 	.word	0x2000c6f0

08010d20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010d20:	b590      	push	{r4, r7, lr}
 8010d22:	b08d      	sub	sp, #52	@ 0x34
 8010d24:	af04      	add	r7, sp, #16
 8010d26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d106      	bne.n	8010d44 <tcp_process+0x24>
 8010d36:	4b9d      	ldr	r3, [pc, #628]	@ (8010fac <tcp_process+0x28c>)
 8010d38:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010d3c:	499c      	ldr	r1, [pc, #624]	@ (8010fb0 <tcp_process+0x290>)
 8010d3e:	489d      	ldr	r0, [pc, #628]	@ (8010fb4 <tcp_process+0x294>)
 8010d40:	f005 fff6 	bl	8016d30 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010d44:	4b9c      	ldr	r3, [pc, #624]	@ (8010fb8 <tcp_process+0x298>)
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	f003 0304 	and.w	r3, r3, #4
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d04e      	beq.n	8010dee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	7d1b      	ldrb	r3, [r3, #20]
 8010d54:	2b02      	cmp	r3, #2
 8010d56:	d108      	bne.n	8010d6a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d5c:	4b97      	ldr	r3, [pc, #604]	@ (8010fbc <tcp_process+0x29c>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d123      	bne.n	8010dac <tcp_process+0x8c>
        acceptable = 1;
 8010d64:	2301      	movs	r3, #1
 8010d66:	76fb      	strb	r3, [r7, #27]
 8010d68:	e020      	b.n	8010dac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d6e:	4b94      	ldr	r3, [pc, #592]	@ (8010fc0 <tcp_process+0x2a0>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d102      	bne.n	8010d7c <tcp_process+0x5c>
        acceptable = 1;
 8010d76:	2301      	movs	r3, #1
 8010d78:	76fb      	strb	r3, [r7, #27]
 8010d7a:	e017      	b.n	8010dac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010d7c:	4b90      	ldr	r3, [pc, #576]	@ (8010fc0 <tcp_process+0x2a0>)
 8010d7e:	681a      	ldr	r2, [r3, #0]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	db10      	blt.n	8010dac <tcp_process+0x8c>
 8010d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8010fc0 <tcp_process+0x2a0>)
 8010d8c:	681a      	ldr	r2, [r3, #0]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d92:	6879      	ldr	r1, [r7, #4]
 8010d94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010d96:	440b      	add	r3, r1
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	dc06      	bgt.n	8010dac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	8b5b      	ldrh	r3, [r3, #26]
 8010da2:	f043 0302 	orr.w	r3, r3, #2
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010dac:	7efb      	ldrb	r3, [r7, #27]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d01b      	beq.n	8010dea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	7d1b      	ldrb	r3, [r3, #20]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <tcp_process+0xa8>
 8010dba:	4b7c      	ldr	r3, [pc, #496]	@ (8010fac <tcp_process+0x28c>)
 8010dbc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010dc0:	4980      	ldr	r1, [pc, #512]	@ (8010fc4 <tcp_process+0x2a4>)
 8010dc2:	487c      	ldr	r0, [pc, #496]	@ (8010fb4 <tcp_process+0x294>)
 8010dc4:	f005 ffb4 	bl	8016d30 <iprintf>
      recv_flags |= TF_RESET;
 8010dc8:	4b7f      	ldr	r3, [pc, #508]	@ (8010fc8 <tcp_process+0x2a8>)
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	f043 0308 	orr.w	r3, r3, #8
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8010fc8 <tcp_process+0x2a8>)
 8010dd4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8b5b      	ldrh	r3, [r3, #26]
 8010dda:	f023 0301 	bic.w	r3, r3, #1
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010de4:	f06f 030d 	mvn.w	r3, #13
 8010de8:	e37a      	b.n	80114e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010dea:	2300      	movs	r3, #0
 8010dec:	e378      	b.n	80114e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010dee:	4b72      	ldr	r3, [pc, #456]	@ (8010fb8 <tcp_process+0x298>)
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	f003 0302 	and.w	r3, r3, #2
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d010      	beq.n	8010e1c <tcp_process+0xfc>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	7d1b      	ldrb	r3, [r3, #20]
 8010dfe:	2b02      	cmp	r3, #2
 8010e00:	d00c      	beq.n	8010e1c <tcp_process+0xfc>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	7d1b      	ldrb	r3, [r3, #20]
 8010e06:	2b03      	cmp	r3, #3
 8010e08:	d008      	beq.n	8010e1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	8b5b      	ldrh	r3, [r3, #26]
 8010e0e:	f043 0302 	orr.w	r3, r3, #2
 8010e12:	b29a      	uxth	r2, r3
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e361      	b.n	80114e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	8b5b      	ldrh	r3, [r3, #26]
 8010e20:	f003 0310 	and.w	r3, r3, #16
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d103      	bne.n	8010e30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010e28:	4b68      	ldr	r3, [pc, #416]	@ (8010fcc <tcp_process+0x2ac>)
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f001 fc2b 	bl	801269c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	7d1b      	ldrb	r3, [r3, #20]
 8010e4a:	3b02      	subs	r3, #2
 8010e4c:	2b07      	cmp	r3, #7
 8010e4e:	f200 8337 	bhi.w	80114c0 <tcp_process+0x7a0>
 8010e52:	a201      	add	r2, pc, #4	@ (adr r2, 8010e58 <tcp_process+0x138>)
 8010e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e58:	08010e79 	.word	0x08010e79
 8010e5c:	080110a9 	.word	0x080110a9
 8010e60:	08011221 	.word	0x08011221
 8010e64:	0801124b 	.word	0x0801124b
 8010e68:	0801136f 	.word	0x0801136f
 8010e6c:	08011221 	.word	0x08011221
 8010e70:	080113fb 	.word	0x080113fb
 8010e74:	0801148b 	.word	0x0801148b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010e78:	4b4f      	ldr	r3, [pc, #316]	@ (8010fb8 <tcp_process+0x298>)
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	f003 0310 	and.w	r3, r3, #16
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 80e4 	beq.w	801104e <tcp_process+0x32e>
 8010e86:	4b4c      	ldr	r3, [pc, #304]	@ (8010fb8 <tcp_process+0x298>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	f003 0302 	and.w	r3, r3, #2
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f000 80dd 	beq.w	801104e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	4b48      	ldr	r3, [pc, #288]	@ (8010fbc <tcp_process+0x29c>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	f040 80d5 	bne.w	801104e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010ea4:	4b46      	ldr	r3, [pc, #280]	@ (8010fc0 <tcp_process+0x2a0>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	1c5a      	adds	r2, r3, #1
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010eb6:	4b41      	ldr	r3, [pc, #260]	@ (8010fbc <tcp_process+0x29c>)
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010ebe:	4b44      	ldr	r3, [pc, #272]	@ (8010fd0 <tcp_process+0x2b0>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	89db      	ldrh	r3, [r3, #14]
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010ed8:	4b39      	ldr	r3, [pc, #228]	@ (8010fc0 <tcp_process+0x2a0>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	1e5a      	subs	r2, r3, #1
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2204      	movs	r2, #4
 8010ee6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	3304      	adds	r3, #4
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f004 fb1b 	bl	801552c <ip4_route>
 8010ef6:	4601      	mov	r1, r0
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	3304      	adds	r3, #4
 8010efc:	461a      	mov	r2, r3
 8010efe:	4620      	mov	r0, r4
 8010f00:	f7ff f88c 	bl	801001c <tcp_eff_send_mss_netif>
 8010f04:	4603      	mov	r3, r0
 8010f06:	461a      	mov	r2, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f10:	009a      	lsls	r2, r3, #2
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f16:	005b      	lsls	r3, r3, #1
 8010f18:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010f1c:	428b      	cmp	r3, r1
 8010f1e:	bf38      	it	cc
 8010f20:	460b      	movcc	r3, r1
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d204      	bcs.n	8010f30 <tcp_process+0x210>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	e00d      	b.n	8010f4c <tcp_process+0x22c>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f34:	005b      	lsls	r3, r3, #1
 8010f36:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d904      	bls.n	8010f48 <tcp_process+0x228>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f42:	005b      	lsls	r3, r3, #1
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	e001      	b.n	8010f4c <tcp_process+0x22c>
 8010f48:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d106      	bne.n	8010f6a <tcp_process+0x24a>
 8010f5c:	4b13      	ldr	r3, [pc, #76]	@ (8010fac <tcp_process+0x28c>)
 8010f5e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010f62:	491c      	ldr	r1, [pc, #112]	@ (8010fd4 <tcp_process+0x2b4>)
 8010f64:	4813      	ldr	r0, [pc, #76]	@ (8010fb4 <tcp_process+0x294>)
 8010f66:	f005 fee3 	bl	8016d30 <iprintf>
        --pcb->snd_queuelen;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f70:	3b01      	subs	r3, #1
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d12a      	bne.n	8010fdc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d106      	bne.n	8010fa0 <tcp_process+0x280>
 8010f92:	4b06      	ldr	r3, [pc, #24]	@ (8010fac <tcp_process+0x28c>)
 8010f94:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010f98:	490f      	ldr	r1, [pc, #60]	@ (8010fd8 <tcp_process+0x2b8>)
 8010f9a:	4806      	ldr	r0, [pc, #24]	@ (8010fb4 <tcp_process+0x294>)
 8010f9c:	f005 fec8 	bl	8016d30 <iprintf>
          pcb->unsent = rseg->next;
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010fa8:	e01c      	b.n	8010fe4 <tcp_process+0x2c4>
 8010faa:	bf00      	nop
 8010fac:	08019260 	.word	0x08019260
 8010fb0:	08019498 	.word	0x08019498
 8010fb4:	080192ac 	.word	0x080192ac
 8010fb8:	2000c734 	.word	0x2000c734
 8010fbc:	2000c72c 	.word	0x2000c72c
 8010fc0:	2000c728 	.word	0x2000c728
 8010fc4:	080194b4 	.word	0x080194b4
 8010fc8:	2000c735 	.word	0x2000c735
 8010fcc:	2000c6f0 	.word	0x2000c6f0
 8010fd0:	2000c718 	.word	0x2000c718
 8010fd4:	080194d4 	.word	0x080194d4
 8010fd8:	080194ec 	.word	0x080194ec
        } else {
          pcb->unacked = rseg->next;
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010fe4:	69f8      	ldr	r0, [r7, #28]
 8010fe6:	f7fe fd22 	bl	800fa2e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d104      	bne.n	8010ffc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ff8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010ffa:	e006      	b.n	801100a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2200      	movs	r2, #0
 8011000:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2200      	movs	r2, #0
 8011006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00a      	beq.n	801102a <tcp_process+0x30a>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	6910      	ldr	r0, [r2, #16]
 801101e:	2200      	movs	r2, #0
 8011020:	6879      	ldr	r1, [r7, #4]
 8011022:	4798      	blx	r3
 8011024:	4603      	mov	r3, r0
 8011026:	76bb      	strb	r3, [r7, #26]
 8011028:	e001      	b.n	801102e <tcp_process+0x30e>
 801102a:	2300      	movs	r3, #0
 801102c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801102e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011032:	f113 0f0d 	cmn.w	r3, #13
 8011036:	d102      	bne.n	801103e <tcp_process+0x31e>
          return ERR_ABRT;
 8011038:	f06f 030c 	mvn.w	r3, #12
 801103c:	e250      	b.n	80114e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	8b5b      	ldrh	r3, [r3, #26]
 8011042:	f043 0302 	orr.w	r3, r3, #2
 8011046:	b29a      	uxth	r2, r3
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801104c:	e23a      	b.n	80114c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801104e:	4b98      	ldr	r3, [pc, #608]	@ (80112b0 <tcp_process+0x590>)
 8011050:	781b      	ldrb	r3, [r3, #0]
 8011052:	f003 0310 	and.w	r3, r3, #16
 8011056:	2b00      	cmp	r3, #0
 8011058:	f000 8234 	beq.w	80114c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801105c:	4b95      	ldr	r3, [pc, #596]	@ (80112b4 <tcp_process+0x594>)
 801105e:	6819      	ldr	r1, [r3, #0]
 8011060:	4b95      	ldr	r3, [pc, #596]	@ (80112b8 <tcp_process+0x598>)
 8011062:	881b      	ldrh	r3, [r3, #0]
 8011064:	461a      	mov	r2, r3
 8011066:	4b95      	ldr	r3, [pc, #596]	@ (80112bc <tcp_process+0x59c>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801106c:	4b94      	ldr	r3, [pc, #592]	@ (80112c0 <tcp_process+0x5a0>)
 801106e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011070:	885b      	ldrh	r3, [r3, #2]
 8011072:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011074:	4a92      	ldr	r2, [pc, #584]	@ (80112c0 <tcp_process+0x5a0>)
 8011076:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011078:	8812      	ldrh	r2, [r2, #0]
 801107a:	b292      	uxth	r2, r2
 801107c:	9202      	str	r2, [sp, #8]
 801107e:	9301      	str	r3, [sp, #4]
 8011080:	4b90      	ldr	r3, [pc, #576]	@ (80112c4 <tcp_process+0x5a4>)
 8011082:	9300      	str	r3, [sp, #0]
 8011084:	4b90      	ldr	r3, [pc, #576]	@ (80112c8 <tcp_process+0x5a8>)
 8011086:	4602      	mov	r2, r0
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f002 fc7f 	bl	801398c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011094:	2b05      	cmp	r3, #5
 8011096:	f200 8215 	bhi.w	80114c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2200      	movs	r2, #0
 801109e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f002 fa4b 	bl	801353c <tcp_rexmit_rto>
      break;
 80110a6:	e20d      	b.n	80114c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80110a8:	4b81      	ldr	r3, [pc, #516]	@ (80112b0 <tcp_process+0x590>)
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	f003 0310 	and.w	r3, r3, #16
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 80a1 	beq.w	80111f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110b6:	4b7f      	ldr	r3, [pc, #508]	@ (80112b4 <tcp_process+0x594>)
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	3b01      	subs	r3, #1
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	db7e      	blt.n	80111c4 <tcp_process+0x4a4>
 80110c6:	4b7b      	ldr	r3, [pc, #492]	@ (80112b4 <tcp_process+0x594>)
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80110ce:	1ad3      	subs	r3, r2, r3
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	dc77      	bgt.n	80111c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2204      	movs	r2, #4
 80110d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d102      	bne.n	80110e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80110e2:	23fa      	movs	r3, #250	@ 0xfa
 80110e4:	76bb      	strb	r3, [r7, #26]
 80110e6:	e01d      	b.n	8011124 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110ec:	699b      	ldr	r3, [r3, #24]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d106      	bne.n	8011100 <tcp_process+0x3e0>
 80110f2:	4b76      	ldr	r3, [pc, #472]	@ (80112cc <tcp_process+0x5ac>)
 80110f4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80110f8:	4975      	ldr	r1, [pc, #468]	@ (80112d0 <tcp_process+0x5b0>)
 80110fa:	4876      	ldr	r0, [pc, #472]	@ (80112d4 <tcp_process+0x5b4>)
 80110fc:	f005 fe18 	bl	8016d30 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011104:	699b      	ldr	r3, [r3, #24]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00a      	beq.n	8011120 <tcp_process+0x400>
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801110e:	699b      	ldr	r3, [r3, #24]
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	6910      	ldr	r0, [r2, #16]
 8011114:	2200      	movs	r2, #0
 8011116:	6879      	ldr	r1, [r7, #4]
 8011118:	4798      	blx	r3
 801111a:	4603      	mov	r3, r0
 801111c:	76bb      	strb	r3, [r7, #26]
 801111e:	e001      	b.n	8011124 <tcp_process+0x404>
 8011120:	23f0      	movs	r3, #240	@ 0xf0
 8011122:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011124:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00a      	beq.n	8011142 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801112c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011130:	f113 0f0d 	cmn.w	r3, #13
 8011134:	d002      	beq.n	801113c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f7fd ff8c 	bl	800f054 <tcp_abort>
            }
            return ERR_ABRT;
 801113c:	f06f 030c 	mvn.w	r3, #12
 8011140:	e1ce      	b.n	80114e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 fae0 	bl	8011708 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011148:	4b63      	ldr	r3, [pc, #396]	@ (80112d8 <tcp_process+0x5b8>)
 801114a:	881b      	ldrh	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d005      	beq.n	801115c <tcp_process+0x43c>
            recv_acked--;
 8011150:	4b61      	ldr	r3, [pc, #388]	@ (80112d8 <tcp_process+0x5b8>)
 8011152:	881b      	ldrh	r3, [r3, #0]
 8011154:	3b01      	subs	r3, #1
 8011156:	b29a      	uxth	r2, r3
 8011158:	4b5f      	ldr	r3, [pc, #380]	@ (80112d8 <tcp_process+0x5b8>)
 801115a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011160:	009a      	lsls	r2, r3, #2
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011166:	005b      	lsls	r3, r3, #1
 8011168:	f241 111c 	movw	r1, #4380	@ 0x111c
 801116c:	428b      	cmp	r3, r1
 801116e:	bf38      	it	cc
 8011170:	460b      	movcc	r3, r1
 8011172:	429a      	cmp	r2, r3
 8011174:	d204      	bcs.n	8011180 <tcp_process+0x460>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	b29b      	uxth	r3, r3
 801117e:	e00d      	b.n	801119c <tcp_process+0x47c>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011184:	005b      	lsls	r3, r3, #1
 8011186:	f241 121c 	movw	r2, #4380	@ 0x111c
 801118a:	4293      	cmp	r3, r2
 801118c:	d904      	bls.n	8011198 <tcp_process+0x478>
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011192:	005b      	lsls	r3, r3, #1
 8011194:	b29b      	uxth	r3, r3
 8011196:	e001      	b.n	801119c <tcp_process+0x47c>
 8011198:	f241 131c 	movw	r3, #4380	@ 0x111c
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80111a2:	4b4e      	ldr	r3, [pc, #312]	@ (80112dc <tcp_process+0x5bc>)
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	f003 0320 	and.w	r3, r3, #32
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d037      	beq.n	801121e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	8b5b      	ldrh	r3, [r3, #26]
 80111b2:	f043 0302 	orr.w	r3, r3, #2
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2207      	movs	r2, #7
 80111c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80111c2:	e02c      	b.n	801121e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111c4:	4b3b      	ldr	r3, [pc, #236]	@ (80112b4 <tcp_process+0x594>)
 80111c6:	6819      	ldr	r1, [r3, #0]
 80111c8:	4b3b      	ldr	r3, [pc, #236]	@ (80112b8 <tcp_process+0x598>)
 80111ca:	881b      	ldrh	r3, [r3, #0]
 80111cc:	461a      	mov	r2, r3
 80111ce:	4b3b      	ldr	r3, [pc, #236]	@ (80112bc <tcp_process+0x59c>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111d4:	4b3a      	ldr	r3, [pc, #232]	@ (80112c0 <tcp_process+0x5a0>)
 80111d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111d8:	885b      	ldrh	r3, [r3, #2]
 80111da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111dc:	4a38      	ldr	r2, [pc, #224]	@ (80112c0 <tcp_process+0x5a0>)
 80111de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111e0:	8812      	ldrh	r2, [r2, #0]
 80111e2:	b292      	uxth	r2, r2
 80111e4:	9202      	str	r2, [sp, #8]
 80111e6:	9301      	str	r3, [sp, #4]
 80111e8:	4b36      	ldr	r3, [pc, #216]	@ (80112c4 <tcp_process+0x5a4>)
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	4b36      	ldr	r3, [pc, #216]	@ (80112c8 <tcp_process+0x5a8>)
 80111ee:	4602      	mov	r2, r0
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f002 fbcb 	bl	801398c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80111f6:	e167      	b.n	80114c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80111f8:	4b2d      	ldr	r3, [pc, #180]	@ (80112b0 <tcp_process+0x590>)
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	f003 0302 	and.w	r3, r3, #2
 8011200:	2b00      	cmp	r3, #0
 8011202:	f000 8161 	beq.w	80114c8 <tcp_process+0x7a8>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801120a:	1e5a      	subs	r2, r3, #1
 801120c:	4b2b      	ldr	r3, [pc, #172]	@ (80112bc <tcp_process+0x59c>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	429a      	cmp	r2, r3
 8011212:	f040 8159 	bne.w	80114c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f002 f9b2 	bl	8013580 <tcp_rexmit>
      break;
 801121c:	e154      	b.n	80114c8 <tcp_process+0x7a8>
 801121e:	e153      	b.n	80114c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f000 fa71 	bl	8011708 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011226:	4b2d      	ldr	r3, [pc, #180]	@ (80112dc <tcp_process+0x5bc>)
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	f003 0320 	and.w	r3, r3, #32
 801122e:	2b00      	cmp	r3, #0
 8011230:	f000 814c 	beq.w	80114cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	8b5b      	ldrh	r3, [r3, #26]
 8011238:	f043 0302 	orr.w	r3, r3, #2
 801123c:	b29a      	uxth	r2, r3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2207      	movs	r2, #7
 8011246:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011248:	e140      	b.n	80114cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 fa5c 	bl	8011708 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011250:	4b22      	ldr	r3, [pc, #136]	@ (80112dc <tcp_process+0x5bc>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	f003 0320 	and.w	r3, r3, #32
 8011258:	2b00      	cmp	r3, #0
 801125a:	d071      	beq.n	8011340 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801125c:	4b14      	ldr	r3, [pc, #80]	@ (80112b0 <tcp_process+0x590>)
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	f003 0310 	and.w	r3, r3, #16
 8011264:	2b00      	cmp	r3, #0
 8011266:	d060      	beq.n	801132a <tcp_process+0x60a>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801126c:	4b11      	ldr	r3, [pc, #68]	@ (80112b4 <tcp_process+0x594>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	429a      	cmp	r2, r3
 8011272:	d15a      	bne.n	801132a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011278:	2b00      	cmp	r3, #0
 801127a:	d156      	bne.n	801132a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	8b5b      	ldrh	r3, [r3, #26]
 8011280:	f043 0302 	orr.w	r3, r3, #2
 8011284:	b29a      	uxth	r2, r3
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7fe fdbc 	bl	800fe08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011290:	4b13      	ldr	r3, [pc, #76]	@ (80112e0 <tcp_process+0x5c0>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	429a      	cmp	r2, r3
 8011298:	d105      	bne.n	80112a6 <tcp_process+0x586>
 801129a:	4b11      	ldr	r3, [pc, #68]	@ (80112e0 <tcp_process+0x5c0>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	4a0f      	ldr	r2, [pc, #60]	@ (80112e0 <tcp_process+0x5c0>)
 80112a2:	6013      	str	r3, [r2, #0]
 80112a4:	e02e      	b.n	8011304 <tcp_process+0x5e4>
 80112a6:	4b0e      	ldr	r3, [pc, #56]	@ (80112e0 <tcp_process+0x5c0>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	617b      	str	r3, [r7, #20]
 80112ac:	e027      	b.n	80112fe <tcp_process+0x5de>
 80112ae:	bf00      	nop
 80112b0:	2000c734 	.word	0x2000c734
 80112b4:	2000c72c 	.word	0x2000c72c
 80112b8:	2000c732 	.word	0x2000c732
 80112bc:	2000c728 	.word	0x2000c728
 80112c0:	2000c718 	.word	0x2000c718
 80112c4:	20009600 	.word	0x20009600
 80112c8:	20009604 	.word	0x20009604
 80112cc:	08019260 	.word	0x08019260
 80112d0:	08019500 	.word	0x08019500
 80112d4:	080192ac 	.word	0x080192ac
 80112d8:	2000c730 	.word	0x2000c730
 80112dc:	2000c735 	.word	0x2000c735
 80112e0:	2000c6fc 	.word	0x2000c6fc
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	687a      	ldr	r2, [r7, #4]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d104      	bne.n	80112f8 <tcp_process+0x5d8>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	68da      	ldr	r2, [r3, #12]
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	60da      	str	r2, [r3, #12]
 80112f6:	e005      	b.n	8011304 <tcp_process+0x5e4>
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	617b      	str	r3, [r7, #20]
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d1ef      	bne.n	80112e4 <tcp_process+0x5c4>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	60da      	str	r2, [r3, #12]
 801130a:	4b77      	ldr	r3, [pc, #476]	@ (80114e8 <tcp_process+0x7c8>)
 801130c:	2201      	movs	r2, #1
 801130e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	220a      	movs	r2, #10
 8011314:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011316:	4b75      	ldr	r3, [pc, #468]	@ (80114ec <tcp_process+0x7cc>)
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	60da      	str	r2, [r3, #12]
 801131e:	4a73      	ldr	r2, [pc, #460]	@ (80114ec <tcp_process+0x7cc>)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6013      	str	r3, [r2, #0]
 8011324:	f002 fcf4 	bl	8013d10 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011328:	e0d2      	b.n	80114d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	8b5b      	ldrh	r3, [r3, #26]
 801132e:	f043 0302 	orr.w	r3, r3, #2
 8011332:	b29a      	uxth	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2208      	movs	r2, #8
 801133c:	751a      	strb	r2, [r3, #20]
      break;
 801133e:	e0c7      	b.n	80114d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011340:	4b6b      	ldr	r3, [pc, #428]	@ (80114f0 <tcp_process+0x7d0>)
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	f003 0310 	and.w	r3, r3, #16
 8011348:	2b00      	cmp	r3, #0
 801134a:	f000 80c1 	beq.w	80114d0 <tcp_process+0x7b0>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011352:	4b68      	ldr	r3, [pc, #416]	@ (80114f4 <tcp_process+0x7d4>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	429a      	cmp	r2, r3
 8011358:	f040 80ba 	bne.w	80114d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011360:	2b00      	cmp	r3, #0
 8011362:	f040 80b5 	bne.w	80114d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2206      	movs	r2, #6
 801136a:	751a      	strb	r2, [r3, #20]
      break;
 801136c:	e0b0      	b.n	80114d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 f9ca 	bl	8011708 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011374:	4b60      	ldr	r3, [pc, #384]	@ (80114f8 <tcp_process+0x7d8>)
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	f003 0320 	and.w	r3, r3, #32
 801137c:	2b00      	cmp	r3, #0
 801137e:	f000 80a9 	beq.w	80114d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	8b5b      	ldrh	r3, [r3, #26]
 8011386:	f043 0302 	orr.w	r3, r3, #2
 801138a:	b29a      	uxth	r2, r3
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7fe fd39 	bl	800fe08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011396:	4b59      	ldr	r3, [pc, #356]	@ (80114fc <tcp_process+0x7dc>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	429a      	cmp	r2, r3
 801139e:	d105      	bne.n	80113ac <tcp_process+0x68c>
 80113a0:	4b56      	ldr	r3, [pc, #344]	@ (80114fc <tcp_process+0x7dc>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	4a55      	ldr	r2, [pc, #340]	@ (80114fc <tcp_process+0x7dc>)
 80113a8:	6013      	str	r3, [r2, #0]
 80113aa:	e013      	b.n	80113d4 <tcp_process+0x6b4>
 80113ac:	4b53      	ldr	r3, [pc, #332]	@ (80114fc <tcp_process+0x7dc>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	613b      	str	r3, [r7, #16]
 80113b2:	e00c      	b.n	80113ce <tcp_process+0x6ae>
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	687a      	ldr	r2, [r7, #4]
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d104      	bne.n	80113c8 <tcp_process+0x6a8>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	68da      	ldr	r2, [r3, #12]
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	60da      	str	r2, [r3, #12]
 80113c6:	e005      	b.n	80113d4 <tcp_process+0x6b4>
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	613b      	str	r3, [r7, #16]
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d1ef      	bne.n	80113b4 <tcp_process+0x694>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	60da      	str	r2, [r3, #12]
 80113da:	4b43      	ldr	r3, [pc, #268]	@ (80114e8 <tcp_process+0x7c8>)
 80113dc:	2201      	movs	r2, #1
 80113de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	220a      	movs	r2, #10
 80113e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80113e6:	4b41      	ldr	r3, [pc, #260]	@ (80114ec <tcp_process+0x7cc>)
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	60da      	str	r2, [r3, #12]
 80113ee:	4a3f      	ldr	r2, [pc, #252]	@ (80114ec <tcp_process+0x7cc>)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6013      	str	r3, [r2, #0]
 80113f4:	f002 fc8c 	bl	8013d10 <tcp_timer_needed>
      }
      break;
 80113f8:	e06c      	b.n	80114d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 f984 	bl	8011708 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011400:	4b3b      	ldr	r3, [pc, #236]	@ (80114f0 <tcp_process+0x7d0>)
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	f003 0310 	and.w	r3, r3, #16
 8011408:	2b00      	cmp	r3, #0
 801140a:	d065      	beq.n	80114d8 <tcp_process+0x7b8>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011410:	4b38      	ldr	r3, [pc, #224]	@ (80114f4 <tcp_process+0x7d4>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	d15f      	bne.n	80114d8 <tcp_process+0x7b8>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801141c:	2b00      	cmp	r3, #0
 801141e:	d15b      	bne.n	80114d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f7fe fcf1 	bl	800fe08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011426:	4b35      	ldr	r3, [pc, #212]	@ (80114fc <tcp_process+0x7dc>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	429a      	cmp	r2, r3
 801142e:	d105      	bne.n	801143c <tcp_process+0x71c>
 8011430:	4b32      	ldr	r3, [pc, #200]	@ (80114fc <tcp_process+0x7dc>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	4a31      	ldr	r2, [pc, #196]	@ (80114fc <tcp_process+0x7dc>)
 8011438:	6013      	str	r3, [r2, #0]
 801143a:	e013      	b.n	8011464 <tcp_process+0x744>
 801143c:	4b2f      	ldr	r3, [pc, #188]	@ (80114fc <tcp_process+0x7dc>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	60fb      	str	r3, [r7, #12]
 8011442:	e00c      	b.n	801145e <tcp_process+0x73e>
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	687a      	ldr	r2, [r7, #4]
 801144a:	429a      	cmp	r2, r3
 801144c:	d104      	bne.n	8011458 <tcp_process+0x738>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	68da      	ldr	r2, [r3, #12]
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	60da      	str	r2, [r3, #12]
 8011456:	e005      	b.n	8011464 <tcp_process+0x744>
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	60fb      	str	r3, [r7, #12]
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d1ef      	bne.n	8011444 <tcp_process+0x724>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2200      	movs	r2, #0
 8011468:	60da      	str	r2, [r3, #12]
 801146a:	4b1f      	ldr	r3, [pc, #124]	@ (80114e8 <tcp_process+0x7c8>)
 801146c:	2201      	movs	r2, #1
 801146e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	220a      	movs	r2, #10
 8011474:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011476:	4b1d      	ldr	r3, [pc, #116]	@ (80114ec <tcp_process+0x7cc>)
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	60da      	str	r2, [r3, #12]
 801147e:	4a1b      	ldr	r2, [pc, #108]	@ (80114ec <tcp_process+0x7cc>)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6013      	str	r3, [r2, #0]
 8011484:	f002 fc44 	bl	8013d10 <tcp_timer_needed>
      }
      break;
 8011488:	e026      	b.n	80114d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f93c 	bl	8011708 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011490:	4b17      	ldr	r3, [pc, #92]	@ (80114f0 <tcp_process+0x7d0>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f003 0310 	and.w	r3, r3, #16
 8011498:	2b00      	cmp	r3, #0
 801149a:	d01f      	beq.n	80114dc <tcp_process+0x7bc>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80114a0:	4b14      	ldr	r3, [pc, #80]	@ (80114f4 <tcp_process+0x7d4>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d119      	bne.n	80114dc <tcp_process+0x7bc>
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d115      	bne.n	80114dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80114b0:	4b11      	ldr	r3, [pc, #68]	@ (80114f8 <tcp_process+0x7d8>)
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	f043 0310 	orr.w	r3, r3, #16
 80114b8:	b2da      	uxtb	r2, r3
 80114ba:	4b0f      	ldr	r3, [pc, #60]	@ (80114f8 <tcp_process+0x7d8>)
 80114bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80114be:	e00d      	b.n	80114dc <tcp_process+0x7bc>
    default:
      break;
 80114c0:	bf00      	nop
 80114c2:	e00c      	b.n	80114de <tcp_process+0x7be>
      break;
 80114c4:	bf00      	nop
 80114c6:	e00a      	b.n	80114de <tcp_process+0x7be>
      break;
 80114c8:	bf00      	nop
 80114ca:	e008      	b.n	80114de <tcp_process+0x7be>
      break;
 80114cc:	bf00      	nop
 80114ce:	e006      	b.n	80114de <tcp_process+0x7be>
      break;
 80114d0:	bf00      	nop
 80114d2:	e004      	b.n	80114de <tcp_process+0x7be>
      break;
 80114d4:	bf00      	nop
 80114d6:	e002      	b.n	80114de <tcp_process+0x7be>
      break;
 80114d8:	bf00      	nop
 80114da:	e000      	b.n	80114de <tcp_process+0x7be>
      break;
 80114dc:	bf00      	nop
  }
  return ERR_OK;
 80114de:	2300      	movs	r3, #0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3724      	adds	r7, #36	@ 0x24
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd90      	pop	{r4, r7, pc}
 80114e8:	2000c704 	.word	0x2000c704
 80114ec:	2000c700 	.word	0x2000c700
 80114f0:	2000c734 	.word	0x2000c734
 80114f4:	2000c72c 	.word	0x2000c72c
 80114f8:	2000c735 	.word	0x2000c735
 80114fc:	2000c6fc 	.word	0x2000c6fc

08011500 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011500:	b590      	push	{r4, r7, lr}
 8011502:	b085      	sub	sp, #20
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d106      	bne.n	801151e <tcp_oos_insert_segment+0x1e>
 8011510:	4b3b      	ldr	r3, [pc, #236]	@ (8011600 <tcp_oos_insert_segment+0x100>)
 8011512:	f240 421f 	movw	r2, #1055	@ 0x41f
 8011516:	493b      	ldr	r1, [pc, #236]	@ (8011604 <tcp_oos_insert_segment+0x104>)
 8011518:	483b      	ldr	r0, [pc, #236]	@ (8011608 <tcp_oos_insert_segment+0x108>)
 801151a:	f005 fc09 	bl	8016d30 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	899b      	ldrh	r3, [r3, #12]
 8011524:	b29b      	uxth	r3, r3
 8011526:	4618      	mov	r0, r3
 8011528:	f7fb fc12 	bl	800cd50 <lwip_htons>
 801152c:	4603      	mov	r3, r0
 801152e:	b2db      	uxtb	r3, r3
 8011530:	f003 0301 	and.w	r3, r3, #1
 8011534:	2b00      	cmp	r3, #0
 8011536:	d028      	beq.n	801158a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011538:	6838      	ldr	r0, [r7, #0]
 801153a:	f7fe fa63 	bl	800fa04 <tcp_segs_free>
    next = NULL;
 801153e:	2300      	movs	r3, #0
 8011540:	603b      	str	r3, [r7, #0]
 8011542:	e056      	b.n	80115f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	899b      	ldrh	r3, [r3, #12]
 801154a:	b29b      	uxth	r3, r3
 801154c:	4618      	mov	r0, r3
 801154e:	f7fb fbff 	bl	800cd50 <lwip_htons>
 8011552:	4603      	mov	r3, r0
 8011554:	b2db      	uxtb	r3, r3
 8011556:	f003 0301 	and.w	r3, r3, #1
 801155a:	2b00      	cmp	r3, #0
 801155c:	d00d      	beq.n	801157a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	899b      	ldrh	r3, [r3, #12]
 8011564:	b29c      	uxth	r4, r3
 8011566:	2001      	movs	r0, #1
 8011568:	f7fb fbf2 	bl	800cd50 <lwip_htons>
 801156c:	4603      	mov	r3, r0
 801156e:	461a      	mov	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	4322      	orrs	r2, r4
 8011576:	b292      	uxth	r2, r2
 8011578:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f7fe fa52 	bl	800fa2e <tcp_seg_free>
    while (next &&
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00e      	beq.n	80115ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	891b      	ldrh	r3, [r3, #8]
 8011594:	461a      	mov	r2, r3
 8011596:	4b1d      	ldr	r3, [pc, #116]	@ (801160c <tcp_oos_insert_segment+0x10c>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	441a      	add	r2, r3
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	6839      	ldr	r1, [r7, #0]
 80115a4:	8909      	ldrh	r1, [r1, #8]
 80115a6:	440b      	add	r3, r1
 80115a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	daca      	bge.n	8011544 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d01e      	beq.n	80115f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	891b      	ldrh	r3, [r3, #8]
 80115b8:	461a      	mov	r2, r3
 80115ba:	4b14      	ldr	r3, [pc, #80]	@ (801160c <tcp_oos_insert_segment+0x10c>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	441a      	add	r2, r3
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	dd12      	ble.n	80115f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	4b0d      	ldr	r3, [pc, #52]	@ (801160c <tcp_oos_insert_segment+0x10c>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	b29b      	uxth	r3, r3
 80115da:	1ad3      	subs	r3, r2, r3
 80115dc:	b29a      	uxth	r2, r3
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	685a      	ldr	r2, [r3, #4]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	891b      	ldrh	r3, [r3, #8]
 80115ea:	4619      	mov	r1, r3
 80115ec:	4610      	mov	r0, r2
 80115ee:	f7fc fe17 	bl	800e220 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	683a      	ldr	r2, [r7, #0]
 80115f6:	601a      	str	r2, [r3, #0]
}
 80115f8:	bf00      	nop
 80115fa:	3714      	adds	r7, #20
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd90      	pop	{r4, r7, pc}
 8011600:	08019260 	.word	0x08019260
 8011604:	08019520 	.word	0x08019520
 8011608:	080192ac 	.word	0x080192ac
 801160c:	2000c728 	.word	0x2000c728

08011610 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011610:	b5b0      	push	{r4, r5, r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	607a      	str	r2, [r7, #4]
 801161c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801161e:	e03e      	b.n	801169e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	4618      	mov	r0, r3
 8011630:	f7fd f80a 	bl	800e648 <pbuf_clen>
 8011634:	4603      	mov	r3, r0
 8011636:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801163e:	8a7a      	ldrh	r2, [r7, #18]
 8011640:	429a      	cmp	r2, r3
 8011642:	d906      	bls.n	8011652 <tcp_free_acked_segments+0x42>
 8011644:	4b2a      	ldr	r3, [pc, #168]	@ (80116f0 <tcp_free_acked_segments+0xe0>)
 8011646:	f240 4257 	movw	r2, #1111	@ 0x457
 801164a:	492a      	ldr	r1, [pc, #168]	@ (80116f4 <tcp_free_acked_segments+0xe4>)
 801164c:	482a      	ldr	r0, [pc, #168]	@ (80116f8 <tcp_free_acked_segments+0xe8>)
 801164e:	f005 fb6f 	bl	8016d30 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011658:	8a7b      	ldrh	r3, [r7, #18]
 801165a:	1ad3      	subs	r3, r2, r3
 801165c:	b29a      	uxth	r2, r3
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	891a      	ldrh	r2, [r3, #8]
 8011668:	4b24      	ldr	r3, [pc, #144]	@ (80116fc <tcp_free_acked_segments+0xec>)
 801166a:	881b      	ldrh	r3, [r3, #0]
 801166c:	4413      	add	r3, r2
 801166e:	b29a      	uxth	r2, r3
 8011670:	4b22      	ldr	r3, [pc, #136]	@ (80116fc <tcp_free_acked_segments+0xec>)
 8011672:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011674:	6978      	ldr	r0, [r7, #20]
 8011676:	f7fe f9da 	bl	800fa2e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011680:	2b00      	cmp	r3, #0
 8011682:	d00c      	beq.n	801169e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d109      	bne.n	801169e <tcp_free_acked_segments+0x8e>
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d106      	bne.n	801169e <tcp_free_acked_segments+0x8e>
 8011690:	4b17      	ldr	r3, [pc, #92]	@ (80116f0 <tcp_free_acked_segments+0xe0>)
 8011692:	f240 4261 	movw	r2, #1121	@ 0x461
 8011696:	491a      	ldr	r1, [pc, #104]	@ (8011700 <tcp_free_acked_segments+0xf0>)
 8011698:	4817      	ldr	r0, [pc, #92]	@ (80116f8 <tcp_free_acked_segments+0xe8>)
 801169a:	f005 fb49 	bl	8016d30 <iprintf>
  while (seg_list != NULL &&
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d020      	beq.n	80116e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fb fb66 	bl	800cd7c <lwip_htonl>
 80116b0:	4604      	mov	r4, r0
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	891b      	ldrh	r3, [r3, #8]
 80116b6:	461d      	mov	r5, r3
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	899b      	ldrh	r3, [r3, #12]
 80116be:	b29b      	uxth	r3, r3
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fb fb45 	bl	800cd50 <lwip_htons>
 80116c6:	4603      	mov	r3, r0
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	f003 0303 	and.w	r3, r3, #3
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d001      	beq.n	80116d6 <tcp_free_acked_segments+0xc6>
 80116d2:	2301      	movs	r3, #1
 80116d4:	e000      	b.n	80116d8 <tcp_free_acked_segments+0xc8>
 80116d6:	2300      	movs	r3, #0
 80116d8:	442b      	add	r3, r5
 80116da:	18e2      	adds	r2, r4, r3
 80116dc:	4b09      	ldr	r3, [pc, #36]	@ (8011704 <tcp_free_acked_segments+0xf4>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	dd9c      	ble.n	8011620 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80116e6:	68bb      	ldr	r3, [r7, #8]
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3718      	adds	r7, #24
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bdb0      	pop	{r4, r5, r7, pc}
 80116f0:	08019260 	.word	0x08019260
 80116f4:	08019548 	.word	0x08019548
 80116f8:	080192ac 	.word	0x080192ac
 80116fc:	2000c730 	.word	0x2000c730
 8011700:	08019570 	.word	0x08019570
 8011704:	2000c72c 	.word	0x2000c72c

08011708 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011708:	b5b0      	push	{r4, r5, r7, lr}
 801170a:	b094      	sub	sp, #80	@ 0x50
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011710:	2300      	movs	r3, #0
 8011712:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d106      	bne.n	8011728 <tcp_receive+0x20>
 801171a:	4b91      	ldr	r3, [pc, #580]	@ (8011960 <tcp_receive+0x258>)
 801171c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8011720:	4990      	ldr	r1, [pc, #576]	@ (8011964 <tcp_receive+0x25c>)
 8011722:	4891      	ldr	r0, [pc, #580]	@ (8011968 <tcp_receive+0x260>)
 8011724:	f005 fb04 	bl	8016d30 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	7d1b      	ldrb	r3, [r3, #20]
 801172c:	2b03      	cmp	r3, #3
 801172e:	d806      	bhi.n	801173e <tcp_receive+0x36>
 8011730:	4b8b      	ldr	r3, [pc, #556]	@ (8011960 <tcp_receive+0x258>)
 8011732:	f240 427c 	movw	r2, #1148	@ 0x47c
 8011736:	498d      	ldr	r1, [pc, #564]	@ (801196c <tcp_receive+0x264>)
 8011738:	488b      	ldr	r0, [pc, #556]	@ (8011968 <tcp_receive+0x260>)
 801173a:	f005 faf9 	bl	8016d30 <iprintf>

  if (flags & TCP_ACK) {
 801173e:	4b8c      	ldr	r3, [pc, #560]	@ (8011970 <tcp_receive+0x268>)
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	f003 0310 	and.w	r3, r3, #16
 8011746:	2b00      	cmp	r3, #0
 8011748:	f000 8264 	beq.w	8011c14 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011752:	461a      	mov	r2, r3
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011758:	4413      	add	r3, r2
 801175a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011760:	4b84      	ldr	r3, [pc, #528]	@ (8011974 <tcp_receive+0x26c>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	2b00      	cmp	r3, #0
 8011768:	db1b      	blt.n	80117a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801176e:	4b81      	ldr	r3, [pc, #516]	@ (8011974 <tcp_receive+0x26c>)
 8011770:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011772:	429a      	cmp	r2, r3
 8011774:	d106      	bne.n	8011784 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801177a:	4b7f      	ldr	r3, [pc, #508]	@ (8011978 <tcp_receive+0x270>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	2b00      	cmp	r3, #0
 8011782:	db0e      	blt.n	80117a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011788:	4b7b      	ldr	r3, [pc, #492]	@ (8011978 <tcp_receive+0x270>)
 801178a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801178c:	429a      	cmp	r2, r3
 801178e:	d125      	bne.n	80117dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011790:	4b7a      	ldr	r3, [pc, #488]	@ (801197c <tcp_receive+0x274>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	89db      	ldrh	r3, [r3, #14]
 8011796:	b29a      	uxth	r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801179e:	429a      	cmp	r2, r3
 80117a0:	d91c      	bls.n	80117dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80117a2:	4b76      	ldr	r3, [pc, #472]	@ (801197c <tcp_receive+0x274>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	89db      	ldrh	r3, [r3, #14]
 80117a8:	b29a      	uxth	r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80117bc:	429a      	cmp	r2, r3
 80117be:	d205      	bcs.n	80117cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80117cc:	4b69      	ldr	r3, [pc, #420]	@ (8011974 <tcp_receive+0x26c>)
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80117d4:	4b68      	ldr	r3, [pc, #416]	@ (8011978 <tcp_receive+0x270>)
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80117dc:	4b66      	ldr	r3, [pc, #408]	@ (8011978 <tcp_receive+0x270>)
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117e4:	1ad3      	subs	r3, r2, r3
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	dc58      	bgt.n	801189c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80117ea:	4b65      	ldr	r3, [pc, #404]	@ (8011980 <tcp_receive+0x278>)
 80117ec:	881b      	ldrh	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d14b      	bne.n	801188a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80117fc:	4413      	add	r3, r2
 80117fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011800:	429a      	cmp	r2, r3
 8011802:	d142      	bne.n	801188a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801180a:	2b00      	cmp	r3, #0
 801180c:	db3d      	blt.n	801188a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011812:	4b59      	ldr	r3, [pc, #356]	@ (8011978 <tcp_receive+0x270>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	429a      	cmp	r2, r3
 8011818:	d137      	bne.n	801188a <tcp_receive+0x182>
              found_dupack = 1;
 801181a:	2301      	movs	r3, #1
 801181c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011824:	2bff      	cmp	r3, #255	@ 0xff
 8011826:	d007      	beq.n	8011838 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801182e:	3301      	adds	r3, #1
 8011830:	b2da      	uxtb	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801183e:	2b03      	cmp	r3, #3
 8011840:	d91b      	bls.n	801187a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801184c:	4413      	add	r3, r2
 801184e:	b29a      	uxth	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011856:	429a      	cmp	r2, r3
 8011858:	d30a      	bcc.n	8011870 <tcp_receive+0x168>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011864:	4413      	add	r3, r2
 8011866:	b29a      	uxth	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801186e:	e004      	b.n	801187a <tcp_receive+0x172>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011876:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011880:	2b02      	cmp	r3, #2
 8011882:	d902      	bls.n	801188a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f001 fee7 	bl	8013658 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801188a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801188c:	2b00      	cmp	r3, #0
 801188e:	f040 8161 	bne.w	8011b54 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2200      	movs	r2, #0
 8011896:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801189a:	e15b      	b.n	8011b54 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801189c:	4b36      	ldr	r3, [pc, #216]	@ (8011978 <tcp_receive+0x270>)
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	3b01      	subs	r3, #1
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	f2c0 814e 	blt.w	8011b4a <tcp_receive+0x442>
 80118ae:	4b32      	ldr	r3, [pc, #200]	@ (8011978 <tcp_receive+0x270>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f300 8146 	bgt.w	8011b4a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	8b5b      	ldrh	r3, [r3, #26]
 80118c2:	f003 0304 	and.w	r3, r3, #4
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d010      	beq.n	80118ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	8b5b      	ldrh	r3, [r3, #26]
 80118ce:	f023 0304 	bic.w	r3, r3, #4
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2200      	movs	r2, #0
 80118e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2200      	movs	r2, #0
 80118f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80118fa:	10db      	asrs	r3, r3, #3
 80118fc:	b21b      	sxth	r3, r3
 80118fe:	b29a      	uxth	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011906:	b29b      	uxth	r3, r3
 8011908:	4413      	add	r3, r2
 801190a:	b29b      	uxth	r3, r3
 801190c:	b21a      	sxth	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011914:	4b18      	ldr	r3, [pc, #96]	@ (8011978 <tcp_receive+0x270>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	b29a      	uxth	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801191e:	b29b      	uxth	r3, r3
 8011920:	1ad3      	subs	r3, r2, r3
 8011922:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801192c:	4b12      	ldr	r3, [pc, #72]	@ (8011978 <tcp_receive+0x270>)
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	7d1b      	ldrb	r3, [r3, #20]
 8011938:	2b03      	cmp	r3, #3
 801193a:	f240 8097 	bls.w	8011a6c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801194a:	429a      	cmp	r2, r3
 801194c:	d245      	bcs.n	80119da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	8b5b      	ldrh	r3, [r3, #26]
 8011952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011956:	2b00      	cmp	r3, #0
 8011958:	d014      	beq.n	8011984 <tcp_receive+0x27c>
 801195a:	2301      	movs	r3, #1
 801195c:	e013      	b.n	8011986 <tcp_receive+0x27e>
 801195e:	bf00      	nop
 8011960:	08019260 	.word	0x08019260
 8011964:	08019590 	.word	0x08019590
 8011968:	080192ac 	.word	0x080192ac
 801196c:	080195ac 	.word	0x080195ac
 8011970:	2000c734 	.word	0x2000c734
 8011974:	2000c728 	.word	0x2000c728
 8011978:	2000c72c 	.word	0x2000c72c
 801197c:	2000c718 	.word	0x2000c718
 8011980:	2000c732 	.word	0x2000c732
 8011984:	2302      	movs	r3, #2
 8011986:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801198a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801198e:	b29a      	uxth	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011994:	fb12 f303 	smulbb	r3, r2, r3
 8011998:	b29b      	uxth	r3, r3
 801199a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801199c:	4293      	cmp	r3, r2
 801199e:	bf28      	it	cs
 80119a0:	4613      	movcs	r3, r2
 80119a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80119aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80119ac:	4413      	add	r3, r2
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d309      	bcc.n	80119ce <tcp_receive+0x2c6>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80119c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80119c2:	4413      	add	r3, r2
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80119cc:	e04e      	b.n	8011a6c <tcp_receive+0x364>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80119d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80119d8:	e048      	b.n	8011a6c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80119e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80119e2:	4413      	add	r3, r2
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d309      	bcc.n	8011a04 <tcp_receive+0x2fc>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80119f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80119f8:	4413      	add	r3, r2
 80119fa:	b29a      	uxth	r2, r3
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011a02:	e004      	b.n	8011a0e <tcp_receive+0x306>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011a0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d326      	bcc.n	8011a6c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011a2a:	1ad3      	subs	r3, r2, r3
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a3e:	4413      	add	r3, r2
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d30a      	bcc.n	8011a62 <tcp_receive+0x35a>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a56:	4413      	add	r3, r2
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011a60:	e004      	b.n	8011a6c <tcp_receive+0x364>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011a68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a74:	4a98      	ldr	r2, [pc, #608]	@ (8011cd8 <tcp_receive+0x5d0>)
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7ff fdca 	bl	8011610 <tcp_free_acked_segments>
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a8a:	4a94      	ldr	r2, [pc, #592]	@ (8011cdc <tcp_receive+0x5d4>)
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f7ff fdbf 	bl	8011610 <tcp_free_acked_segments>
 8011a92:	4602      	mov	r2, r0
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d104      	bne.n	8011aaa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011aa6:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011aa8:	e002      	b.n	8011ab0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2200      	movs	r2, #0
 8011aae:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d103      	bne.n	8011ac6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011acc:	4b84      	ldr	r3, [pc, #528]	@ (8011ce0 <tcp_receive+0x5d8>)
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	8b5b      	ldrh	r3, [r3, #26]
 8011ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d035      	beq.n	8011b52 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d118      	bne.n	8011b20 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d00c      	beq.n	8011b10 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fb f93a 	bl	800cd7c <lwip_htonl>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	dc20      	bgt.n	8011b52 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	8b5b      	ldrh	r3, [r3, #26]
 8011b14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b1e:	e018      	b.n	8011b52 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7fb f925 	bl	800cd7c <lwip_htonl>
 8011b32:	4603      	mov	r3, r0
 8011b34:	1ae3      	subs	r3, r4, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	dc0b      	bgt.n	8011b52 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	8b5b      	ldrh	r3, [r3, #26]
 8011b3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b48:	e003      	b.n	8011b52 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f001 ff70 	bl	8013a30 <tcp_send_empty_ack>
 8011b50:	e000      	b.n	8011b54 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011b52:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d05b      	beq.n	8011c14 <tcp_receive+0x50c>
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b60:	4b60      	ldr	r3, [pc, #384]	@ (8011ce4 <tcp_receive+0x5dc>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	1ad3      	subs	r3, r2, r3
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	da54      	bge.n	8011c14 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8011ce8 <tcp_receive+0x5e0>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	1ad3      	subs	r3, r2, r3
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011b7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011b88:	10db      	asrs	r3, r3, #3
 8011b8a:	b21b      	sxth	r3, r3
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	1ad3      	subs	r3, r2, r3
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011b9c:	b29a      	uxth	r2, r3
 8011b9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011ba2:	4413      	add	r3, r2
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	b21a      	sxth	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011bac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	da05      	bge.n	8011bc0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011bb8:	425b      	negs	r3, r3
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011bc0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011bca:	109b      	asrs	r3, r3, #2
 8011bcc:	b21b      	sxth	r3, r3
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	1ad3      	subs	r3, r2, r3
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011bde:	b29a      	uxth	r2, r3
 8011be0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011be4:	4413      	add	r3, r2
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	b21a      	sxth	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011bf4:	10db      	asrs	r3, r3, #3
 8011bf6:	b21b      	sxth	r3, r3
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	4413      	add	r3, r2
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	b21a      	sxth	r2, r3
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2200      	movs	r2, #0
 8011c12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011c14:	4b35      	ldr	r3, [pc, #212]	@ (8011cec <tcp_receive+0x5e4>)
 8011c16:	881b      	ldrh	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	f000 84df 	beq.w	80125dc <tcp_receive+0xed4>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	7d1b      	ldrb	r3, [r3, #20]
 8011c22:	2b06      	cmp	r3, #6
 8011c24:	f200 84da 	bhi.w	80125dc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c2c:	4b30      	ldr	r3, [pc, #192]	@ (8011cf0 <tcp_receive+0x5e8>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	3b01      	subs	r3, #1
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	f2c0 808f 	blt.w	8011d58 <tcp_receive+0x650>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8011cec <tcp_receive+0x5e4>)
 8011c40:	881b      	ldrh	r3, [r3, #0]
 8011c42:	4619      	mov	r1, r3
 8011c44:	4b2a      	ldr	r3, [pc, #168]	@ (8011cf0 <tcp_receive+0x5e8>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	440b      	add	r3, r1
 8011c4a:	1ad3      	subs	r3, r2, r3
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f300 8082 	bgt.w	8011d58 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011c54:	4b27      	ldr	r3, [pc, #156]	@ (8011cf4 <tcp_receive+0x5ec>)
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c5e:	4b24      	ldr	r3, [pc, #144]	@ (8011cf0 <tcp_receive+0x5e8>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	1ad3      	subs	r3, r2, r3
 8011c64:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011c66:	4b23      	ldr	r3, [pc, #140]	@ (8011cf4 <tcp_receive+0x5ec>)
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d106      	bne.n	8011c7c <tcp_receive+0x574>
 8011c6e:	4b22      	ldr	r3, [pc, #136]	@ (8011cf8 <tcp_receive+0x5f0>)
 8011c70:	f240 5294 	movw	r2, #1428	@ 0x594
 8011c74:	4921      	ldr	r1, [pc, #132]	@ (8011cfc <tcp_receive+0x5f4>)
 8011c76:	4822      	ldr	r0, [pc, #136]	@ (8011d00 <tcp_receive+0x5f8>)
 8011c78:	f005 f85a 	bl	8016d30 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d906      	bls.n	8011c94 <tcp_receive+0x58c>
 8011c86:	4b1c      	ldr	r3, [pc, #112]	@ (8011cf8 <tcp_receive+0x5f0>)
 8011c88:	f240 5295 	movw	r2, #1429	@ 0x595
 8011c8c:	491d      	ldr	r1, [pc, #116]	@ (8011d04 <tcp_receive+0x5fc>)
 8011c8e:	481c      	ldr	r0, [pc, #112]	@ (8011d00 <tcp_receive+0x5f8>)
 8011c90:	f005 f84e 	bl	8016d30 <iprintf>
      off = (u16_t)off32;
 8011c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011c9a:	4b16      	ldr	r3, [pc, #88]	@ (8011cf4 <tcp_receive+0x5ec>)
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	891b      	ldrh	r3, [r3, #8]
 8011ca0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d906      	bls.n	8011cb6 <tcp_receive+0x5ae>
 8011ca8:	4b13      	ldr	r3, [pc, #76]	@ (8011cf8 <tcp_receive+0x5f0>)
 8011caa:	f240 5297 	movw	r2, #1431	@ 0x597
 8011cae:	4916      	ldr	r1, [pc, #88]	@ (8011d08 <tcp_receive+0x600>)
 8011cb0:	4813      	ldr	r0, [pc, #76]	@ (8011d00 <tcp_receive+0x5f8>)
 8011cb2:	f005 f83d 	bl	8016d30 <iprintf>
      inseg.len -= off;
 8011cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8011cf4 <tcp_receive+0x5ec>)
 8011cb8:	891a      	ldrh	r2, [r3, #8]
 8011cba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011cbe:	1ad3      	subs	r3, r2, r3
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf4 <tcp_receive+0x5ec>)
 8011cc4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8011cf4 <tcp_receive+0x5ec>)
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	891a      	ldrh	r2, [r3, #8]
 8011ccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011cd4:	e02a      	b.n	8011d2c <tcp_receive+0x624>
 8011cd6:	bf00      	nop
 8011cd8:	080195c8 	.word	0x080195c8
 8011cdc:	080195d0 	.word	0x080195d0
 8011ce0:	2000c730 	.word	0x2000c730
 8011ce4:	2000c72c 	.word	0x2000c72c
 8011ce8:	2000c6f0 	.word	0x2000c6f0
 8011cec:	2000c732 	.word	0x2000c732
 8011cf0:	2000c728 	.word	0x2000c728
 8011cf4:	2000c708 	.word	0x2000c708
 8011cf8:	08019260 	.word	0x08019260
 8011cfc:	080195d8 	.word	0x080195d8
 8011d00:	080192ac 	.word	0x080192ac
 8011d04:	080195e8 	.word	0x080195e8
 8011d08:	080195f8 	.word	0x080195f8
        off -= p->len;
 8011d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d0e:	895b      	ldrh	r3, [r3, #10]
 8011d10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011d1e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d22:	2200      	movs	r2, #0
 8011d24:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d2e:	895b      	ldrh	r3, [r3, #10]
 8011d30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d8e9      	bhi.n	8011d0c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011d38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011d40:	f7fc fb6e 	bl	800e420 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d48:	4a90      	ldr	r2, [pc, #576]	@ (8011f8c <tcp_receive+0x884>)
 8011d4a:	6013      	str	r3, [r2, #0]
 8011d4c:	4b90      	ldr	r3, [pc, #576]	@ (8011f90 <tcp_receive+0x888>)
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	4a8e      	ldr	r2, [pc, #568]	@ (8011f8c <tcp_receive+0x884>)
 8011d52:	6812      	ldr	r2, [r2, #0]
 8011d54:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011d56:	e00d      	b.n	8011d74 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011d58:	4b8c      	ldr	r3, [pc, #560]	@ (8011f8c <tcp_receive+0x884>)
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d60:	1ad3      	subs	r3, r2, r3
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	da06      	bge.n	8011d74 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	8b5b      	ldrh	r3, [r3, #26]
 8011d6a:	f043 0302 	orr.w	r3, r3, #2
 8011d6e:	b29a      	uxth	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011d74:	4b85      	ldr	r3, [pc, #532]	@ (8011f8c <tcp_receive+0x884>)
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d7c:	1ad3      	subs	r3, r2, r3
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	f2c0 8427 	blt.w	80125d2 <tcp_receive+0xeca>
 8011d84:	4b81      	ldr	r3, [pc, #516]	@ (8011f8c <tcp_receive+0x884>)
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d8c:	6879      	ldr	r1, [r7, #4]
 8011d8e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011d90:	440b      	add	r3, r1
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	3301      	adds	r3, #1
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	f300 841b 	bgt.w	80125d2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011da0:	4b7a      	ldr	r3, [pc, #488]	@ (8011f8c <tcp_receive+0x884>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	f040 8298 	bne.w	80122da <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011daa:	4b79      	ldr	r3, [pc, #484]	@ (8011f90 <tcp_receive+0x888>)
 8011dac:	891c      	ldrh	r4, [r3, #8]
 8011dae:	4b78      	ldr	r3, [pc, #480]	@ (8011f90 <tcp_receive+0x888>)
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	899b      	ldrh	r3, [r3, #12]
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fa ffca 	bl	800cd50 <lwip_htons>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	f003 0303 	and.w	r3, r3, #3
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <tcp_receive+0x6c4>
 8011dc8:	2301      	movs	r3, #1
 8011dca:	e000      	b.n	8011dce <tcp_receive+0x6c6>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	4423      	add	r3, r4
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	4b70      	ldr	r3, [pc, #448]	@ (8011f94 <tcp_receive+0x88c>)
 8011dd4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011dda:	4b6e      	ldr	r3, [pc, #440]	@ (8011f94 <tcp_receive+0x88c>)
 8011ddc:	881b      	ldrh	r3, [r3, #0]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d274      	bcs.n	8011ecc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011de2:	4b6b      	ldr	r3, [pc, #428]	@ (8011f90 <tcp_receive+0x888>)
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	899b      	ldrh	r3, [r3, #12]
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7fa ffb0 	bl	800cd50 <lwip_htons>
 8011df0:	4603      	mov	r3, r0
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	f003 0301 	and.w	r3, r3, #1
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d01e      	beq.n	8011e3a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011dfc:	4b64      	ldr	r3, [pc, #400]	@ (8011f90 <tcp_receive+0x888>)
 8011dfe:	68db      	ldr	r3, [r3, #12]
 8011e00:	899b      	ldrh	r3, [r3, #12]
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	b21b      	sxth	r3, r3
 8011e06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011e0a:	b21c      	sxth	r4, r3
 8011e0c:	4b60      	ldr	r3, [pc, #384]	@ (8011f90 <tcp_receive+0x888>)
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	899b      	ldrh	r3, [r3, #12]
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fa ff9b 	bl	800cd50 <lwip_htons>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7fa ff93 	bl	800cd50 <lwip_htons>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	b21b      	sxth	r3, r3
 8011e2e:	4323      	orrs	r3, r4
 8011e30:	b21a      	sxth	r2, r3
 8011e32:	4b57      	ldr	r3, [pc, #348]	@ (8011f90 <tcp_receive+0x888>)
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	b292      	uxth	r2, r2
 8011e38:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011e3e:	4b54      	ldr	r3, [pc, #336]	@ (8011f90 <tcp_receive+0x888>)
 8011e40:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e42:	4b53      	ldr	r3, [pc, #332]	@ (8011f90 <tcp_receive+0x888>)
 8011e44:	68db      	ldr	r3, [r3, #12]
 8011e46:	899b      	ldrh	r3, [r3, #12]
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fa ff80 	bl	800cd50 <lwip_htons>
 8011e50:	4603      	mov	r3, r0
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	f003 0302 	and.w	r3, r3, #2
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d005      	beq.n	8011e68 <tcp_receive+0x760>
            inseg.len -= 1;
 8011e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8011f90 <tcp_receive+0x888>)
 8011e5e:	891b      	ldrh	r3, [r3, #8]
 8011e60:	3b01      	subs	r3, #1
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	4b4a      	ldr	r3, [pc, #296]	@ (8011f90 <tcp_receive+0x888>)
 8011e66:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011e68:	4b49      	ldr	r3, [pc, #292]	@ (8011f90 <tcp_receive+0x888>)
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	4a48      	ldr	r2, [pc, #288]	@ (8011f90 <tcp_receive+0x888>)
 8011e6e:	8912      	ldrh	r2, [r2, #8]
 8011e70:	4611      	mov	r1, r2
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7fc f9d4 	bl	800e220 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011e78:	4b45      	ldr	r3, [pc, #276]	@ (8011f90 <tcp_receive+0x888>)
 8011e7a:	891c      	ldrh	r4, [r3, #8]
 8011e7c:	4b44      	ldr	r3, [pc, #272]	@ (8011f90 <tcp_receive+0x888>)
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	899b      	ldrh	r3, [r3, #12]
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fa ff63 	bl	800cd50 <lwip_htons>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	f003 0303 	and.w	r3, r3, #3
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d001      	beq.n	8011e9a <tcp_receive+0x792>
 8011e96:	2301      	movs	r3, #1
 8011e98:	e000      	b.n	8011e9c <tcp_receive+0x794>
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	4423      	add	r3, r4
 8011e9e:	b29a      	uxth	r2, r3
 8011ea0:	4b3c      	ldr	r3, [pc, #240]	@ (8011f94 <tcp_receive+0x88c>)
 8011ea2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8011f94 <tcp_receive+0x88c>)
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	4b38      	ldr	r3, [pc, #224]	@ (8011f8c <tcp_receive+0x884>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	441a      	add	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eb4:	6879      	ldr	r1, [r7, #4]
 8011eb6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011eb8:	440b      	add	r3, r1
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d006      	beq.n	8011ecc <tcp_receive+0x7c4>
 8011ebe:	4b36      	ldr	r3, [pc, #216]	@ (8011f98 <tcp_receive+0x890>)
 8011ec0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011ec4:	4935      	ldr	r1, [pc, #212]	@ (8011f9c <tcp_receive+0x894>)
 8011ec6:	4836      	ldr	r0, [pc, #216]	@ (8011fa0 <tcp_receive+0x898>)
 8011ec8:	f004 ff32 	bl	8016d30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f000 80e6 	beq.w	80120a2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8011f90 <tcp_receive+0x888>)
 8011ed8:	68db      	ldr	r3, [r3, #12]
 8011eda:	899b      	ldrh	r3, [r3, #12]
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fa ff36 	bl	800cd50 <lwip_htons>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	f003 0301 	and.w	r3, r3, #1
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d010      	beq.n	8011f12 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011ef0:	e00a      	b.n	8011f08 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ef6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011efc:	681a      	ldr	r2, [r3, #0]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011f02:	68f8      	ldr	r0, [r7, #12]
 8011f04:	f7fd fd93 	bl	800fa2e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d1f0      	bne.n	8011ef2 <tcp_receive+0x7ea>
 8011f10:	e0c7      	b.n	80120a2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011f18:	e051      	b.n	8011fbe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f1c:	68db      	ldr	r3, [r3, #12]
 8011f1e:	899b      	ldrh	r3, [r3, #12]
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fa ff14 	bl	800cd50 <lwip_htons>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	b2db      	uxtb	r3, r3
 8011f2c:	f003 0301 	and.w	r3, r3, #1
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d03c      	beq.n	8011fae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011f34:	4b16      	ldr	r3, [pc, #88]	@ (8011f90 <tcp_receive+0x888>)
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	899b      	ldrh	r3, [r3, #12]
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7fa ff07 	bl	800cd50 <lwip_htons>
 8011f42:	4603      	mov	r3, r0
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d12f      	bne.n	8011fae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011f4e:	4b10      	ldr	r3, [pc, #64]	@ (8011f90 <tcp_receive+0x888>)
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	899b      	ldrh	r3, [r3, #12]
 8011f54:	b29c      	uxth	r4, r3
 8011f56:	2001      	movs	r0, #1
 8011f58:	f7fa fefa 	bl	800cd50 <lwip_htons>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	461a      	mov	r2, r3
 8011f60:	4b0b      	ldr	r3, [pc, #44]	@ (8011f90 <tcp_receive+0x888>)
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	4322      	orrs	r2, r4
 8011f66:	b292      	uxth	r2, r2
 8011f68:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011f6a:	4b09      	ldr	r3, [pc, #36]	@ (8011f90 <tcp_receive+0x888>)
 8011f6c:	891c      	ldrh	r4, [r3, #8]
 8011f6e:	4b08      	ldr	r3, [pc, #32]	@ (8011f90 <tcp_receive+0x888>)
 8011f70:	68db      	ldr	r3, [r3, #12]
 8011f72:	899b      	ldrh	r3, [r3, #12]
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7fa feea 	bl	800cd50 <lwip_htons>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	f003 0303 	and.w	r3, r3, #3
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d00d      	beq.n	8011fa4 <tcp_receive+0x89c>
 8011f88:	2301      	movs	r3, #1
 8011f8a:	e00c      	b.n	8011fa6 <tcp_receive+0x89e>
 8011f8c:	2000c728 	.word	0x2000c728
 8011f90:	2000c708 	.word	0x2000c708
 8011f94:	2000c732 	.word	0x2000c732
 8011f98:	08019260 	.word	0x08019260
 8011f9c:	08019608 	.word	0x08019608
 8011fa0:	080192ac 	.word	0x080192ac
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	4423      	add	r3, r4
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	4b98      	ldr	r3, [pc, #608]	@ (801220c <tcp_receive+0xb04>)
 8011fac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fb0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011fb8:	6938      	ldr	r0, [r7, #16]
 8011fba:	f7fd fd38 	bl	800fa2e <tcp_seg_free>
            while (next &&
 8011fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d00e      	beq.n	8011fe2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011fc4:	4b91      	ldr	r3, [pc, #580]	@ (801220c <tcp_receive+0xb04>)
 8011fc6:	881b      	ldrh	r3, [r3, #0]
 8011fc8:	461a      	mov	r2, r3
 8011fca:	4b91      	ldr	r3, [pc, #580]	@ (8012210 <tcp_receive+0xb08>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	441a      	add	r2, r3
 8011fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011fd8:	8909      	ldrh	r1, [r1, #8]
 8011fda:	440b      	add	r3, r1
 8011fdc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	da9b      	bge.n	8011f1a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d059      	beq.n	801209c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011fe8:	4b88      	ldr	r3, [pc, #544]	@ (801220c <tcp_receive+0xb04>)
 8011fea:	881b      	ldrh	r3, [r3, #0]
 8011fec:	461a      	mov	r2, r3
 8011fee:	4b88      	ldr	r3, [pc, #544]	@ (8012210 <tcp_receive+0xb08>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	441a      	add	r2, r3
 8011ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	dd4d      	ble.n	801209c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	b29a      	uxth	r2, r3
 8012008:	4b81      	ldr	r3, [pc, #516]	@ (8012210 <tcp_receive+0xb08>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	b29b      	uxth	r3, r3
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	b29a      	uxth	r2, r3
 8012012:	4b80      	ldr	r3, [pc, #512]	@ (8012214 <tcp_receive+0xb0c>)
 8012014:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012016:	4b7f      	ldr	r3, [pc, #508]	@ (8012214 <tcp_receive+0xb0c>)
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	899b      	ldrh	r3, [r3, #12]
 801201c:	b29b      	uxth	r3, r3
 801201e:	4618      	mov	r0, r3
 8012020:	f7fa fe96 	bl	800cd50 <lwip_htons>
 8012024:	4603      	mov	r3, r0
 8012026:	b2db      	uxtb	r3, r3
 8012028:	f003 0302 	and.w	r3, r3, #2
 801202c:	2b00      	cmp	r3, #0
 801202e:	d005      	beq.n	801203c <tcp_receive+0x934>
                inseg.len -= 1;
 8012030:	4b78      	ldr	r3, [pc, #480]	@ (8012214 <tcp_receive+0xb0c>)
 8012032:	891b      	ldrh	r3, [r3, #8]
 8012034:	3b01      	subs	r3, #1
 8012036:	b29a      	uxth	r2, r3
 8012038:	4b76      	ldr	r3, [pc, #472]	@ (8012214 <tcp_receive+0xb0c>)
 801203a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801203c:	4b75      	ldr	r3, [pc, #468]	@ (8012214 <tcp_receive+0xb0c>)
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	4a74      	ldr	r2, [pc, #464]	@ (8012214 <tcp_receive+0xb0c>)
 8012042:	8912      	ldrh	r2, [r2, #8]
 8012044:	4611      	mov	r1, r2
 8012046:	4618      	mov	r0, r3
 8012048:	f7fc f8ea 	bl	800e220 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801204c:	4b71      	ldr	r3, [pc, #452]	@ (8012214 <tcp_receive+0xb0c>)
 801204e:	891c      	ldrh	r4, [r3, #8]
 8012050:	4b70      	ldr	r3, [pc, #448]	@ (8012214 <tcp_receive+0xb0c>)
 8012052:	68db      	ldr	r3, [r3, #12]
 8012054:	899b      	ldrh	r3, [r3, #12]
 8012056:	b29b      	uxth	r3, r3
 8012058:	4618      	mov	r0, r3
 801205a:	f7fa fe79 	bl	800cd50 <lwip_htons>
 801205e:	4603      	mov	r3, r0
 8012060:	b2db      	uxtb	r3, r3
 8012062:	f003 0303 	and.w	r3, r3, #3
 8012066:	2b00      	cmp	r3, #0
 8012068:	d001      	beq.n	801206e <tcp_receive+0x966>
 801206a:	2301      	movs	r3, #1
 801206c:	e000      	b.n	8012070 <tcp_receive+0x968>
 801206e:	2300      	movs	r3, #0
 8012070:	4423      	add	r3, r4
 8012072:	b29a      	uxth	r2, r3
 8012074:	4b65      	ldr	r3, [pc, #404]	@ (801220c <tcp_receive+0xb04>)
 8012076:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012078:	4b64      	ldr	r3, [pc, #400]	@ (801220c <tcp_receive+0xb04>)
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	461a      	mov	r2, r3
 801207e:	4b64      	ldr	r3, [pc, #400]	@ (8012210 <tcp_receive+0xb08>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	441a      	add	r2, r3
 8012084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	429a      	cmp	r2, r3
 801208c:	d006      	beq.n	801209c <tcp_receive+0x994>
 801208e:	4b62      	ldr	r3, [pc, #392]	@ (8012218 <tcp_receive+0xb10>)
 8012090:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8012094:	4961      	ldr	r1, [pc, #388]	@ (801221c <tcp_receive+0xb14>)
 8012096:	4862      	ldr	r0, [pc, #392]	@ (8012220 <tcp_receive+0xb18>)
 8012098:	f004 fe4a 	bl	8016d30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80120a0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80120a2:	4b5a      	ldr	r3, [pc, #360]	@ (801220c <tcp_receive+0xb04>)
 80120a4:	881b      	ldrh	r3, [r3, #0]
 80120a6:	461a      	mov	r2, r3
 80120a8:	4b59      	ldr	r3, [pc, #356]	@ (8012210 <tcp_receive+0xb08>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	441a      	add	r2, r3
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80120b6:	4b55      	ldr	r3, [pc, #340]	@ (801220c <tcp_receive+0xb04>)
 80120b8:	881b      	ldrh	r3, [r3, #0]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d206      	bcs.n	80120cc <tcp_receive+0x9c4>
 80120be:	4b56      	ldr	r3, [pc, #344]	@ (8012218 <tcp_receive+0xb10>)
 80120c0:	f240 6207 	movw	r2, #1543	@ 0x607
 80120c4:	4957      	ldr	r1, [pc, #348]	@ (8012224 <tcp_receive+0xb1c>)
 80120c6:	4856      	ldr	r0, [pc, #344]	@ (8012220 <tcp_receive+0xb18>)
 80120c8:	f004 fe32 	bl	8016d30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80120d0:	4b4e      	ldr	r3, [pc, #312]	@ (801220c <tcp_receive+0xb04>)
 80120d2:	881b      	ldrh	r3, [r3, #0]
 80120d4:	1ad3      	subs	r3, r2, r3
 80120d6:	b29a      	uxth	r2, r3
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7fc ffc5 	bl	800f06c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80120e2:	4b4c      	ldr	r3, [pc, #304]	@ (8012214 <tcp_receive+0xb0c>)
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	891b      	ldrh	r3, [r3, #8]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d006      	beq.n	80120fa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80120ec:	4b49      	ldr	r3, [pc, #292]	@ (8012214 <tcp_receive+0xb0c>)
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	4a4d      	ldr	r2, [pc, #308]	@ (8012228 <tcp_receive+0xb20>)
 80120f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80120f4:	4b47      	ldr	r3, [pc, #284]	@ (8012214 <tcp_receive+0xb0c>)
 80120f6:	2200      	movs	r2, #0
 80120f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80120fa:	4b46      	ldr	r3, [pc, #280]	@ (8012214 <tcp_receive+0xb0c>)
 80120fc:	68db      	ldr	r3, [r3, #12]
 80120fe:	899b      	ldrh	r3, [r3, #12]
 8012100:	b29b      	uxth	r3, r3
 8012102:	4618      	mov	r0, r3
 8012104:	f7fa fe24 	bl	800cd50 <lwip_htons>
 8012108:	4603      	mov	r3, r0
 801210a:	b2db      	uxtb	r3, r3
 801210c:	f003 0301 	and.w	r3, r3, #1
 8012110:	2b00      	cmp	r3, #0
 8012112:	f000 80b8 	beq.w	8012286 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012116:	4b45      	ldr	r3, [pc, #276]	@ (801222c <tcp_receive+0xb24>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	f043 0320 	orr.w	r3, r3, #32
 801211e:	b2da      	uxtb	r2, r3
 8012120:	4b42      	ldr	r3, [pc, #264]	@ (801222c <tcp_receive+0xb24>)
 8012122:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012124:	e0af      	b.n	8012286 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801212a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012130:	68db      	ldr	r3, [r3, #12]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	4a36      	ldr	r2, [pc, #216]	@ (8012210 <tcp_receive+0xb08>)
 8012136:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	891b      	ldrh	r3, [r3, #8]
 801213c:	461c      	mov	r4, r3
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	68db      	ldr	r3, [r3, #12]
 8012142:	899b      	ldrh	r3, [r3, #12]
 8012144:	b29b      	uxth	r3, r3
 8012146:	4618      	mov	r0, r3
 8012148:	f7fa fe02 	bl	800cd50 <lwip_htons>
 801214c:	4603      	mov	r3, r0
 801214e:	b2db      	uxtb	r3, r3
 8012150:	f003 0303 	and.w	r3, r3, #3
 8012154:	2b00      	cmp	r3, #0
 8012156:	d001      	beq.n	801215c <tcp_receive+0xa54>
 8012158:	2301      	movs	r3, #1
 801215a:	e000      	b.n	801215e <tcp_receive+0xa56>
 801215c:	2300      	movs	r3, #0
 801215e:	191a      	adds	r2, r3, r4
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012164:	441a      	add	r2, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801216e:	461c      	mov	r4, r3
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	891b      	ldrh	r3, [r3, #8]
 8012174:	461d      	mov	r5, r3
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	899b      	ldrh	r3, [r3, #12]
 801217c:	b29b      	uxth	r3, r3
 801217e:	4618      	mov	r0, r3
 8012180:	f7fa fde6 	bl	800cd50 <lwip_htons>
 8012184:	4603      	mov	r3, r0
 8012186:	b2db      	uxtb	r3, r3
 8012188:	f003 0303 	and.w	r3, r3, #3
 801218c:	2b00      	cmp	r3, #0
 801218e:	d001      	beq.n	8012194 <tcp_receive+0xa8c>
 8012190:	2301      	movs	r3, #1
 8012192:	e000      	b.n	8012196 <tcp_receive+0xa8e>
 8012194:	2300      	movs	r3, #0
 8012196:	442b      	add	r3, r5
 8012198:	429c      	cmp	r4, r3
 801219a:	d206      	bcs.n	80121aa <tcp_receive+0xaa2>
 801219c:	4b1e      	ldr	r3, [pc, #120]	@ (8012218 <tcp_receive+0xb10>)
 801219e:	f240 622b 	movw	r2, #1579	@ 0x62b
 80121a2:	4923      	ldr	r1, [pc, #140]	@ (8012230 <tcp_receive+0xb28>)
 80121a4:	481e      	ldr	r0, [pc, #120]	@ (8012220 <tcp_receive+0xb18>)
 80121a6:	f004 fdc3 	bl	8016d30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	891b      	ldrh	r3, [r3, #8]
 80121ae:	461c      	mov	r4, r3
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	899b      	ldrh	r3, [r3, #12]
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fa fdc9 	bl	800cd50 <lwip_htons>
 80121be:	4603      	mov	r3, r0
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	f003 0303 	and.w	r3, r3, #3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d001      	beq.n	80121ce <tcp_receive+0xac6>
 80121ca:	2301      	movs	r3, #1
 80121cc:	e000      	b.n	80121d0 <tcp_receive+0xac8>
 80121ce:	2300      	movs	r3, #0
 80121d0:	1919      	adds	r1, r3, r4
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80121d6:	b28b      	uxth	r3, r1
 80121d8:	1ad3      	subs	r3, r2, r3
 80121da:	b29a      	uxth	r2, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f7fc ff43 	bl	800f06c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	891b      	ldrh	r3, [r3, #8]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d028      	beq.n	8012242 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80121f0:	4b0d      	ldr	r3, [pc, #52]	@ (8012228 <tcp_receive+0xb20>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d01d      	beq.n	8012234 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80121f8:	4b0b      	ldr	r3, [pc, #44]	@ (8012228 <tcp_receive+0xb20>)
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	4619      	mov	r1, r3
 8012202:	4610      	mov	r0, r2
 8012204:	f7fc fa60 	bl	800e6c8 <pbuf_cat>
 8012208:	e018      	b.n	801223c <tcp_receive+0xb34>
 801220a:	bf00      	nop
 801220c:	2000c732 	.word	0x2000c732
 8012210:	2000c728 	.word	0x2000c728
 8012214:	2000c708 	.word	0x2000c708
 8012218:	08019260 	.word	0x08019260
 801221c:	08019640 	.word	0x08019640
 8012220:	080192ac 	.word	0x080192ac
 8012224:	0801967c 	.word	0x0801967c
 8012228:	2000c738 	.word	0x2000c738
 801222c:	2000c735 	.word	0x2000c735
 8012230:	0801969c 	.word	0x0801969c
            } else {
              recv_data = cseg->p;
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	4a70      	ldr	r2, [pc, #448]	@ (80123fc <tcp_receive+0xcf4>)
 801223a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	2200      	movs	r2, #0
 8012240:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	899b      	ldrh	r3, [r3, #12]
 8012248:	b29b      	uxth	r3, r3
 801224a:	4618      	mov	r0, r3
 801224c:	f7fa fd80 	bl	800cd50 <lwip_htons>
 8012250:	4603      	mov	r3, r0
 8012252:	b2db      	uxtb	r3, r3
 8012254:	f003 0301 	and.w	r3, r3, #1
 8012258:	2b00      	cmp	r3, #0
 801225a:	d00d      	beq.n	8012278 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801225c:	4b68      	ldr	r3, [pc, #416]	@ (8012400 <tcp_receive+0xcf8>)
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	f043 0320 	orr.w	r3, r3, #32
 8012264:	b2da      	uxtb	r2, r3
 8012266:	4b66      	ldr	r3, [pc, #408]	@ (8012400 <tcp_receive+0xcf8>)
 8012268:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	7d1b      	ldrb	r3, [r3, #20]
 801226e:	2b04      	cmp	r3, #4
 8012270:	d102      	bne.n	8012278 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2207      	movs	r2, #7
 8012276:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012280:	68b8      	ldr	r0, [r7, #8]
 8012282:	f7fd fbd4 	bl	800fa2e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801228a:	2b00      	cmp	r3, #0
 801228c:	d008      	beq.n	80122a0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	685a      	ldr	r2, [r3, #4]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801229a:	429a      	cmp	r2, r3
 801229c:	f43f af43 	beq.w	8012126 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	8b5b      	ldrh	r3, [r3, #26]
 80122a4:	f003 0301 	and.w	r3, r3, #1
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00e      	beq.n	80122ca <tcp_receive+0xbc2>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	8b5b      	ldrh	r3, [r3, #26]
 80122b0:	f023 0301 	bic.w	r3, r3, #1
 80122b4:	b29a      	uxth	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	835a      	strh	r2, [r3, #26]
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	8b5b      	ldrh	r3, [r3, #26]
 80122be:	f043 0302 	orr.w	r3, r3, #2
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80122c8:	e187      	b.n	80125da <tcp_receive+0xed2>
        tcp_ack(pcb);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	8b5b      	ldrh	r3, [r3, #26]
 80122ce:	f043 0301 	orr.w	r3, r3, #1
 80122d2:	b29a      	uxth	r2, r3
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80122d8:	e17f      	b.n	80125da <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80122e2:	4848      	ldr	r0, [pc, #288]	@ (8012404 <tcp_receive+0xcfc>)
 80122e4:	f7fd fbbc 	bl	800fa60 <tcp_seg_copy>
 80122e8:	4602      	mov	r2, r0
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80122ee:	e16c      	b.n	80125ca <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80122f0:	2300      	movs	r3, #0
 80122f2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80122f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80122fa:	e156      	b.n	80125aa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80122fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	685a      	ldr	r2, [r3, #4]
 8012302:	4b41      	ldr	r3, [pc, #260]	@ (8012408 <tcp_receive+0xd00>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	429a      	cmp	r2, r3
 8012308:	d11d      	bne.n	8012346 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801230a:	4b3e      	ldr	r3, [pc, #248]	@ (8012404 <tcp_receive+0xcfc>)
 801230c:	891a      	ldrh	r2, [r3, #8]
 801230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012310:	891b      	ldrh	r3, [r3, #8]
 8012312:	429a      	cmp	r2, r3
 8012314:	f240 814e 	bls.w	80125b4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012318:	483a      	ldr	r0, [pc, #232]	@ (8012404 <tcp_receive+0xcfc>)
 801231a:	f7fd fba1 	bl	800fa60 <tcp_seg_copy>
 801231e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	2b00      	cmp	r3, #0
 8012324:	f000 8148 	beq.w	80125b8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801232a:	2b00      	cmp	r3, #0
 801232c:	d003      	beq.n	8012336 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801232e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012330:	697a      	ldr	r2, [r7, #20]
 8012332:	601a      	str	r2, [r3, #0]
 8012334:	e002      	b.n	801233c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	697a      	ldr	r2, [r7, #20]
 801233a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801233c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801233e:	6978      	ldr	r0, [r7, #20]
 8012340:	f7ff f8de 	bl	8011500 <tcp_oos_insert_segment>
                }
                break;
 8012344:	e138      	b.n	80125b8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012348:	2b00      	cmp	r3, #0
 801234a:	d117      	bne.n	801237c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801234c:	4b2e      	ldr	r3, [pc, #184]	@ (8012408 <tcp_receive+0xd00>)
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	1ad3      	subs	r3, r2, r3
 8012358:	2b00      	cmp	r3, #0
 801235a:	da57      	bge.n	801240c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801235c:	4829      	ldr	r0, [pc, #164]	@ (8012404 <tcp_receive+0xcfc>)
 801235e:	f7fd fb7f 	bl	800fa60 <tcp_seg_copy>
 8012362:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	2b00      	cmp	r3, #0
 8012368:	f000 8128 	beq.w	80125bc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	69ba      	ldr	r2, [r7, #24]
 8012370:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012372:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012374:	69b8      	ldr	r0, [r7, #24]
 8012376:	f7ff f8c3 	bl	8011500 <tcp_oos_insert_segment>
                  }
                  break;
 801237a:	e11f      	b.n	80125bc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801237c:	4b22      	ldr	r3, [pc, #136]	@ (8012408 <tcp_receive+0xd00>)
 801237e:	681a      	ldr	r2, [r3, #0]
 8012380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	3b01      	subs	r3, #1
 801238a:	2b00      	cmp	r3, #0
 801238c:	db3e      	blt.n	801240c <tcp_receive+0xd04>
 801238e:	4b1e      	ldr	r3, [pc, #120]	@ (8012408 <tcp_receive+0xd00>)
 8012390:	681a      	ldr	r2, [r3, #0]
 8012392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012394:	68db      	ldr	r3, [r3, #12]
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	1ad3      	subs	r3, r2, r3
 801239a:	3301      	adds	r3, #1
 801239c:	2b00      	cmp	r3, #0
 801239e:	dc35      	bgt.n	801240c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80123a0:	4818      	ldr	r0, [pc, #96]	@ (8012404 <tcp_receive+0xcfc>)
 80123a2:	f7fd fb5d 	bl	800fa60 <tcp_seg_copy>
 80123a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f000 8108 	beq.w	80125c0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80123b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	685b      	ldr	r3, [r3, #4]
 80123b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80123b8:	8912      	ldrh	r2, [r2, #8]
 80123ba:	441a      	add	r2, r3
 80123bc:	4b12      	ldr	r3, [pc, #72]	@ (8012408 <tcp_receive+0xd00>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	1ad3      	subs	r3, r2, r3
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	dd12      	ble.n	80123ec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80123c6:	4b10      	ldr	r3, [pc, #64]	@ (8012408 <tcp_receive+0xd00>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	1ad3      	subs	r3, r2, r3
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80123dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123de:	685a      	ldr	r2, [r3, #4]
 80123e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123e2:	891b      	ldrh	r3, [r3, #8]
 80123e4:	4619      	mov	r1, r3
 80123e6:	4610      	mov	r0, r2
 80123e8:	f7fb ff1a 	bl	800e220 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80123ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123ee:	69fa      	ldr	r2, [r7, #28]
 80123f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80123f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80123f4:	69f8      	ldr	r0, [r7, #28]
 80123f6:	f7ff f883 	bl	8011500 <tcp_oos_insert_segment>
                  }
                  break;
 80123fa:	e0e1      	b.n	80125c0 <tcp_receive+0xeb8>
 80123fc:	2000c738 	.word	0x2000c738
 8012400:	2000c735 	.word	0x2000c735
 8012404:	2000c708 	.word	0x2000c708
 8012408:	2000c728 	.word	0x2000c728
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801240c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801240e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	f040 80c5 	bne.w	80125a4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801241a:	4b7f      	ldr	r3, [pc, #508]	@ (8012618 <tcp_receive+0xf10>)
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012426:	2b00      	cmp	r3, #0
 8012428:	f340 80bc 	ble.w	80125a4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801242c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801242e:	68db      	ldr	r3, [r3, #12]
 8012430:	899b      	ldrh	r3, [r3, #12]
 8012432:	b29b      	uxth	r3, r3
 8012434:	4618      	mov	r0, r3
 8012436:	f7fa fc8b 	bl	800cd50 <lwip_htons>
 801243a:	4603      	mov	r3, r0
 801243c:	b2db      	uxtb	r3, r3
 801243e:	f003 0301 	and.w	r3, r3, #1
 8012442:	2b00      	cmp	r3, #0
 8012444:	f040 80be 	bne.w	80125c4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012448:	4874      	ldr	r0, [pc, #464]	@ (801261c <tcp_receive+0xf14>)
 801244a:	f7fd fb09 	bl	800fa60 <tcp_seg_copy>
 801244e:	4602      	mov	r2, r0
 8012450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012452:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	f000 80b5 	beq.w	80125c8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012466:	8912      	ldrh	r2, [r2, #8]
 8012468:	441a      	add	r2, r3
 801246a:	4b6b      	ldr	r3, [pc, #428]	@ (8012618 <tcp_receive+0xf10>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	2b00      	cmp	r3, #0
 8012472:	dd12      	ble.n	801249a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012474:	4b68      	ldr	r3, [pc, #416]	@ (8012618 <tcp_receive+0xf10>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	b29a      	uxth	r2, r3
 801247a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801247c:	68db      	ldr	r3, [r3, #12]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	b29b      	uxth	r3, r3
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	b29a      	uxth	r2, r3
 8012486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012488:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012490:	891b      	ldrh	r3, [r3, #8]
 8012492:	4619      	mov	r1, r3
 8012494:	4610      	mov	r0, r2
 8012496:	f7fb fec3 	bl	800e220 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801249a:	4b61      	ldr	r3, [pc, #388]	@ (8012620 <tcp_receive+0xf18>)
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	461a      	mov	r2, r3
 80124a0:	4b5d      	ldr	r3, [pc, #372]	@ (8012618 <tcp_receive+0xf10>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	441a      	add	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124aa:	6879      	ldr	r1, [r7, #4]
 80124ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80124ae:	440b      	add	r3, r1
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f340 8088 	ble.w	80125c8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80124b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	899b      	ldrh	r3, [r3, #12]
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fa fc44 	bl	800cd50 <lwip_htons>
 80124c8:	4603      	mov	r3, r0
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	f003 0301 	and.w	r3, r3, #1
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d021      	beq.n	8012518 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80124d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	899b      	ldrh	r3, [r3, #12]
 80124dc:	b29b      	uxth	r3, r3
 80124de:	b21b      	sxth	r3, r3
 80124e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80124e4:	b21c      	sxth	r4, r3
 80124e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	899b      	ldrh	r3, [r3, #12]
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fa fc2d 	bl	800cd50 <lwip_htons>
 80124f6:	4603      	mov	r3, r0
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80124fe:	b29b      	uxth	r3, r3
 8012500:	4618      	mov	r0, r3
 8012502:	f7fa fc25 	bl	800cd50 <lwip_htons>
 8012506:	4603      	mov	r3, r0
 8012508:	b21b      	sxth	r3, r3
 801250a:	4323      	orrs	r3, r4
 801250c:	b21a      	sxth	r2, r3
 801250e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	68db      	ldr	r3, [r3, #12]
 8012514:	b292      	uxth	r2, r2
 8012516:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801251c:	b29a      	uxth	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012522:	4413      	add	r3, r2
 8012524:	b299      	uxth	r1, r3
 8012526:	4b3c      	ldr	r3, [pc, #240]	@ (8012618 <tcp_receive+0xf10>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	b29a      	uxth	r2, r3
 801252c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	1a8a      	subs	r2, r1, r2
 8012532:	b292      	uxth	r2, r2
 8012534:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	685a      	ldr	r2, [r3, #4]
 801253c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	891b      	ldrh	r3, [r3, #8]
 8012542:	4619      	mov	r1, r3
 8012544:	4610      	mov	r0, r2
 8012546:	f7fb fe6b 	bl	800e220 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801254a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	891c      	ldrh	r4, [r3, #8]
 8012550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	899b      	ldrh	r3, [r3, #12]
 8012558:	b29b      	uxth	r3, r3
 801255a:	4618      	mov	r0, r3
 801255c:	f7fa fbf8 	bl	800cd50 <lwip_htons>
 8012560:	4603      	mov	r3, r0
 8012562:	b2db      	uxtb	r3, r3
 8012564:	f003 0303 	and.w	r3, r3, #3
 8012568:	2b00      	cmp	r3, #0
 801256a:	d001      	beq.n	8012570 <tcp_receive+0xe68>
 801256c:	2301      	movs	r3, #1
 801256e:	e000      	b.n	8012572 <tcp_receive+0xe6a>
 8012570:	2300      	movs	r3, #0
 8012572:	4423      	add	r3, r4
 8012574:	b29a      	uxth	r2, r3
 8012576:	4b2a      	ldr	r3, [pc, #168]	@ (8012620 <tcp_receive+0xf18>)
 8012578:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801257a:	4b29      	ldr	r3, [pc, #164]	@ (8012620 <tcp_receive+0xf18>)
 801257c:	881b      	ldrh	r3, [r3, #0]
 801257e:	461a      	mov	r2, r3
 8012580:	4b25      	ldr	r3, [pc, #148]	@ (8012618 <tcp_receive+0xf10>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	441a      	add	r2, r3
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801258a:	6879      	ldr	r1, [r7, #4]
 801258c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801258e:	440b      	add	r3, r1
 8012590:	429a      	cmp	r2, r3
 8012592:	d019      	beq.n	80125c8 <tcp_receive+0xec0>
 8012594:	4b23      	ldr	r3, [pc, #140]	@ (8012624 <tcp_receive+0xf1c>)
 8012596:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801259a:	4923      	ldr	r1, [pc, #140]	@ (8012628 <tcp_receive+0xf20>)
 801259c:	4823      	ldr	r0, [pc, #140]	@ (801262c <tcp_receive+0xf24>)
 801259e:	f004 fbc7 	bl	8016d30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80125a2:	e011      	b.n	80125c8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80125a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80125aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f47f aea5 	bne.w	80122fc <tcp_receive+0xbf4>
 80125b2:	e00a      	b.n	80125ca <tcp_receive+0xec2>
                break;
 80125b4:	bf00      	nop
 80125b6:	e008      	b.n	80125ca <tcp_receive+0xec2>
                break;
 80125b8:	bf00      	nop
 80125ba:	e006      	b.n	80125ca <tcp_receive+0xec2>
                  break;
 80125bc:	bf00      	nop
 80125be:	e004      	b.n	80125ca <tcp_receive+0xec2>
                  break;
 80125c0:	bf00      	nop
 80125c2:	e002      	b.n	80125ca <tcp_receive+0xec2>
                  break;
 80125c4:	bf00      	nop
 80125c6:	e000      	b.n	80125ca <tcp_receive+0xec2>
                break;
 80125c8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f001 fa30 	bl	8013a30 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80125d0:	e003      	b.n	80125da <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f001 fa2c 	bl	8013a30 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80125d8:	e01a      	b.n	8012610 <tcp_receive+0xf08>
 80125da:	e019      	b.n	8012610 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80125dc:	4b0e      	ldr	r3, [pc, #56]	@ (8012618 <tcp_receive+0xf10>)
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125e4:	1ad3      	subs	r3, r2, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	db0a      	blt.n	8012600 <tcp_receive+0xef8>
 80125ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012618 <tcp_receive+0xf10>)
 80125ec:	681a      	ldr	r2, [r3, #0]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125f2:	6879      	ldr	r1, [r7, #4]
 80125f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80125f6:	440b      	add	r3, r1
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	3301      	adds	r3, #1
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	dd07      	ble.n	8012610 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	8b5b      	ldrh	r3, [r3, #26]
 8012604:	f043 0302 	orr.w	r3, r3, #2
 8012608:	b29a      	uxth	r2, r3
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801260e:	e7ff      	b.n	8012610 <tcp_receive+0xf08>
 8012610:	bf00      	nop
 8012612:	3750      	adds	r7, #80	@ 0x50
 8012614:	46bd      	mov	sp, r7
 8012616:	bdb0      	pop	{r4, r5, r7, pc}
 8012618:	2000c728 	.word	0x2000c728
 801261c:	2000c708 	.word	0x2000c708
 8012620:	2000c732 	.word	0x2000c732
 8012624:	08019260 	.word	0x08019260
 8012628:	08019608 	.word	0x08019608
 801262c:	080192ac 	.word	0x080192ac

08012630 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012636:	4b15      	ldr	r3, [pc, #84]	@ (801268c <tcp_get_next_optbyte+0x5c>)
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	1c5a      	adds	r2, r3, #1
 801263c:	b291      	uxth	r1, r2
 801263e:	4a13      	ldr	r2, [pc, #76]	@ (801268c <tcp_get_next_optbyte+0x5c>)
 8012640:	8011      	strh	r1, [r2, #0]
 8012642:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012644:	4b12      	ldr	r3, [pc, #72]	@ (8012690 <tcp_get_next_optbyte+0x60>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d004      	beq.n	8012656 <tcp_get_next_optbyte+0x26>
 801264c:	4b11      	ldr	r3, [pc, #68]	@ (8012694 <tcp_get_next_optbyte+0x64>)
 801264e:	881b      	ldrh	r3, [r3, #0]
 8012650:	88fa      	ldrh	r2, [r7, #6]
 8012652:	429a      	cmp	r2, r3
 8012654:	d208      	bcs.n	8012668 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012656:	4b10      	ldr	r3, [pc, #64]	@ (8012698 <tcp_get_next_optbyte+0x68>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	3314      	adds	r3, #20
 801265c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801265e:	88fb      	ldrh	r3, [r7, #6]
 8012660:	683a      	ldr	r2, [r7, #0]
 8012662:	4413      	add	r3, r2
 8012664:	781b      	ldrb	r3, [r3, #0]
 8012666:	e00b      	b.n	8012680 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012668:	88fb      	ldrh	r3, [r7, #6]
 801266a:	b2da      	uxtb	r2, r3
 801266c:	4b09      	ldr	r3, [pc, #36]	@ (8012694 <tcp_get_next_optbyte+0x64>)
 801266e:	881b      	ldrh	r3, [r3, #0]
 8012670:	b2db      	uxtb	r3, r3
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012676:	4b06      	ldr	r3, [pc, #24]	@ (8012690 <tcp_get_next_optbyte+0x60>)
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	797b      	ldrb	r3, [r7, #5]
 801267c:	4413      	add	r3, r2
 801267e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012680:	4618      	mov	r0, r3
 8012682:	370c      	adds	r7, #12
 8012684:	46bd      	mov	sp, r7
 8012686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268a:	4770      	bx	lr
 801268c:	2000c724 	.word	0x2000c724
 8012690:	2000c720 	.word	0x2000c720
 8012694:	2000c71e 	.word	0x2000c71e
 8012698:	2000c718 	.word	0x2000c718

0801269c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b084      	sub	sp, #16
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d106      	bne.n	80126b8 <tcp_parseopt+0x1c>
 80126aa:	4b32      	ldr	r3, [pc, #200]	@ (8012774 <tcp_parseopt+0xd8>)
 80126ac:	f240 727d 	movw	r2, #1917	@ 0x77d
 80126b0:	4931      	ldr	r1, [pc, #196]	@ (8012778 <tcp_parseopt+0xdc>)
 80126b2:	4832      	ldr	r0, [pc, #200]	@ (801277c <tcp_parseopt+0xe0>)
 80126b4:	f004 fb3c 	bl	8016d30 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80126b8:	4b31      	ldr	r3, [pc, #196]	@ (8012780 <tcp_parseopt+0xe4>)
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d056      	beq.n	801276e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80126c0:	4b30      	ldr	r3, [pc, #192]	@ (8012784 <tcp_parseopt+0xe8>)
 80126c2:	2200      	movs	r2, #0
 80126c4:	801a      	strh	r2, [r3, #0]
 80126c6:	e046      	b.n	8012756 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80126c8:	f7ff ffb2 	bl	8012630 <tcp_get_next_optbyte>
 80126cc:	4603      	mov	r3, r0
 80126ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80126d0:	7bfb      	ldrb	r3, [r7, #15]
 80126d2:	2b02      	cmp	r3, #2
 80126d4:	d006      	beq.n	80126e4 <tcp_parseopt+0x48>
 80126d6:	2b02      	cmp	r3, #2
 80126d8:	dc2a      	bgt.n	8012730 <tcp_parseopt+0x94>
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d042      	beq.n	8012764 <tcp_parseopt+0xc8>
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d038      	beq.n	8012754 <tcp_parseopt+0xb8>
 80126e2:	e025      	b.n	8012730 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80126e4:	f7ff ffa4 	bl	8012630 <tcp_get_next_optbyte>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b04      	cmp	r3, #4
 80126ec:	d13c      	bne.n	8012768 <tcp_parseopt+0xcc>
 80126ee:	4b25      	ldr	r3, [pc, #148]	@ (8012784 <tcp_parseopt+0xe8>)
 80126f0:	881b      	ldrh	r3, [r3, #0]
 80126f2:	3301      	adds	r3, #1
 80126f4:	4a22      	ldr	r2, [pc, #136]	@ (8012780 <tcp_parseopt+0xe4>)
 80126f6:	8812      	ldrh	r2, [r2, #0]
 80126f8:	4293      	cmp	r3, r2
 80126fa:	da35      	bge.n	8012768 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80126fc:	f7ff ff98 	bl	8012630 <tcp_get_next_optbyte>
 8012700:	4603      	mov	r3, r0
 8012702:	021b      	lsls	r3, r3, #8
 8012704:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012706:	f7ff ff93 	bl	8012630 <tcp_get_next_optbyte>
 801270a:	4603      	mov	r3, r0
 801270c:	461a      	mov	r2, r3
 801270e:	89bb      	ldrh	r3, [r7, #12]
 8012710:	4313      	orrs	r3, r2
 8012712:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012714:	89bb      	ldrh	r3, [r7, #12]
 8012716:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801271a:	d804      	bhi.n	8012726 <tcp_parseopt+0x8a>
 801271c:	89bb      	ldrh	r3, [r7, #12]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <tcp_parseopt+0x8a>
 8012722:	89ba      	ldrh	r2, [r7, #12]
 8012724:	e001      	b.n	801272a <tcp_parseopt+0x8e>
 8012726:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801272e:	e012      	b.n	8012756 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012730:	f7ff ff7e 	bl	8012630 <tcp_get_next_optbyte>
 8012734:	4603      	mov	r3, r0
 8012736:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012738:	7afb      	ldrb	r3, [r7, #11]
 801273a:	2b01      	cmp	r3, #1
 801273c:	d916      	bls.n	801276c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801273e:	7afb      	ldrb	r3, [r7, #11]
 8012740:	b29a      	uxth	r2, r3
 8012742:	4b10      	ldr	r3, [pc, #64]	@ (8012784 <tcp_parseopt+0xe8>)
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	4413      	add	r3, r2
 8012748:	b29b      	uxth	r3, r3
 801274a:	3b02      	subs	r3, #2
 801274c:	b29a      	uxth	r2, r3
 801274e:	4b0d      	ldr	r3, [pc, #52]	@ (8012784 <tcp_parseopt+0xe8>)
 8012750:	801a      	strh	r2, [r3, #0]
 8012752:	e000      	b.n	8012756 <tcp_parseopt+0xba>
          break;
 8012754:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012756:	4b0b      	ldr	r3, [pc, #44]	@ (8012784 <tcp_parseopt+0xe8>)
 8012758:	881a      	ldrh	r2, [r3, #0]
 801275a:	4b09      	ldr	r3, [pc, #36]	@ (8012780 <tcp_parseopt+0xe4>)
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	429a      	cmp	r2, r3
 8012760:	d3b2      	bcc.n	80126c8 <tcp_parseopt+0x2c>
 8012762:	e004      	b.n	801276e <tcp_parseopt+0xd2>
          return;
 8012764:	bf00      	nop
 8012766:	e002      	b.n	801276e <tcp_parseopt+0xd2>
            return;
 8012768:	bf00      	nop
 801276a:	e000      	b.n	801276e <tcp_parseopt+0xd2>
            return;
 801276c:	bf00      	nop
      }
    }
  }
}
 801276e:	3710      	adds	r7, #16
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	08019260 	.word	0x08019260
 8012778:	080196c4 	.word	0x080196c4
 801277c:	080192ac 	.word	0x080192ac
 8012780:	2000c71c 	.word	0x2000c71c
 8012784:	2000c724 	.word	0x2000c724

08012788 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012788:	b480      	push	{r7}
 801278a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801278c:	4b05      	ldr	r3, [pc, #20]	@ (80127a4 <tcp_trigger_input_pcb_close+0x1c>)
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	f043 0310 	orr.w	r3, r3, #16
 8012794:	b2da      	uxtb	r2, r3
 8012796:	4b03      	ldr	r3, [pc, #12]	@ (80127a4 <tcp_trigger_input_pcb_close+0x1c>)
 8012798:	701a      	strb	r2, [r3, #0]
}
 801279a:	bf00      	nop
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr
 80127a4:	2000c735 	.word	0x2000c735

080127a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b084      	sub	sp, #16
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d00a      	beq.n	80127d0 <tcp_route+0x28>
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	7a1b      	ldrb	r3, [r3, #8]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d006      	beq.n	80127d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	7a1b      	ldrb	r3, [r3, #8]
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fb fb22 	bl	800de10 <netif_get_by_index>
 80127cc:	4603      	mov	r3, r0
 80127ce:	e003      	b.n	80127d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f002 feab 	bl	801552c <ip4_route>
 80127d6:	4603      	mov	r3, r0
  }
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3710      	adds	r7, #16
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80127e0:	b590      	push	{r4, r7, lr}
 80127e2:	b087      	sub	sp, #28
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	603b      	str	r3, [r7, #0]
 80127ec:	4613      	mov	r3, r2
 80127ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d105      	bne.n	8012802 <tcp_create_segment+0x22>
 80127f6:	4b43      	ldr	r3, [pc, #268]	@ (8012904 <tcp_create_segment+0x124>)
 80127f8:	22a3      	movs	r2, #163	@ 0xa3
 80127fa:	4943      	ldr	r1, [pc, #268]	@ (8012908 <tcp_create_segment+0x128>)
 80127fc:	4843      	ldr	r0, [pc, #268]	@ (801290c <tcp_create_segment+0x12c>)
 80127fe:	f004 fa97 	bl	8016d30 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d105      	bne.n	8012814 <tcp_create_segment+0x34>
 8012808:	4b3e      	ldr	r3, [pc, #248]	@ (8012904 <tcp_create_segment+0x124>)
 801280a:	22a4      	movs	r2, #164	@ 0xa4
 801280c:	4940      	ldr	r1, [pc, #256]	@ (8012910 <tcp_create_segment+0x130>)
 801280e:	483f      	ldr	r0, [pc, #252]	@ (801290c <tcp_create_segment+0x12c>)
 8012810:	f004 fa8e 	bl	8016d30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012814:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	b2db      	uxtb	r3, r3
 801281c:	f003 0304 	and.w	r3, r3, #4
 8012820:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012822:	2003      	movs	r0, #3
 8012824:	f7fa ff68 	bl	800d6f8 <memp_malloc>
 8012828:	6138      	str	r0, [r7, #16]
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d104      	bne.n	801283a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012830:	68b8      	ldr	r0, [r7, #8]
 8012832:	f7fb fe7b 	bl	800e52c <pbuf_free>
    return NULL;
 8012836:	2300      	movs	r3, #0
 8012838:	e060      	b.n	80128fc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012840:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	68ba      	ldr	r2, [r7, #8]
 801284c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	891a      	ldrh	r2, [r3, #8]
 8012852:	7dfb      	ldrb	r3, [r7, #23]
 8012854:	b29b      	uxth	r3, r3
 8012856:	429a      	cmp	r2, r3
 8012858:	d205      	bcs.n	8012866 <tcp_create_segment+0x86>
 801285a:	4b2a      	ldr	r3, [pc, #168]	@ (8012904 <tcp_create_segment+0x124>)
 801285c:	22b0      	movs	r2, #176	@ 0xb0
 801285e:	492d      	ldr	r1, [pc, #180]	@ (8012914 <tcp_create_segment+0x134>)
 8012860:	482a      	ldr	r0, [pc, #168]	@ (801290c <tcp_create_segment+0x12c>)
 8012862:	f004 fa65 	bl	8016d30 <iprintf>
  seg->len = p->tot_len - optlen;
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	891a      	ldrh	r2, [r3, #8]
 801286a:	7dfb      	ldrb	r3, [r7, #23]
 801286c:	b29b      	uxth	r3, r3
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	b29a      	uxth	r2, r3
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012876:	2114      	movs	r1, #20
 8012878:	68b8      	ldr	r0, [r7, #8]
 801287a:	f7fb fdc1 	bl	800e400 <pbuf_add_header>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	d004      	beq.n	801288e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012884:	6938      	ldr	r0, [r7, #16]
 8012886:	f7fd f8d2 	bl	800fa2e <tcp_seg_free>
    return NULL;
 801288a:	2300      	movs	r3, #0
 801288c:	e036      	b.n	80128fc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	685a      	ldr	r2, [r3, #4]
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	8ada      	ldrh	r2, [r3, #22]
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	68dc      	ldr	r4, [r3, #12]
 80128a0:	4610      	mov	r0, r2
 80128a2:	f7fa fa55 	bl	800cd50 <lwip_htons>
 80128a6:	4603      	mov	r3, r0
 80128a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	8b1a      	ldrh	r2, [r3, #24]
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	68dc      	ldr	r4, [r3, #12]
 80128b2:	4610      	mov	r0, r2
 80128b4:	f7fa fa4c 	bl	800cd50 <lwip_htons>
 80128b8:	4603      	mov	r3, r0
 80128ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	68dc      	ldr	r4, [r3, #12]
 80128c0:	6838      	ldr	r0, [r7, #0]
 80128c2:	f7fa fa5b 	bl	800cd7c <lwip_htonl>
 80128c6:	4603      	mov	r3, r0
 80128c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80128ca:	7dfb      	ldrb	r3, [r7, #23]
 80128cc:	089b      	lsrs	r3, r3, #2
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	3305      	adds	r3, #5
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	031b      	lsls	r3, r3, #12
 80128d6:	b29a      	uxth	r2, r3
 80128d8:	79fb      	ldrb	r3, [r7, #7]
 80128da:	b29b      	uxth	r3, r3
 80128dc:	4313      	orrs	r3, r2
 80128de:	b29a      	uxth	r2, r3
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	68dc      	ldr	r4, [r3, #12]
 80128e4:	4610      	mov	r0, r2
 80128e6:	f7fa fa33 	bl	800cd50 <lwip_htons>
 80128ea:	4603      	mov	r3, r0
 80128ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	2200      	movs	r2, #0
 80128f4:	749a      	strb	r2, [r3, #18]
 80128f6:	2200      	movs	r2, #0
 80128f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80128fa:	693b      	ldr	r3, [r7, #16]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	371c      	adds	r7, #28
 8012900:	46bd      	mov	sp, r7
 8012902:	bd90      	pop	{r4, r7, pc}
 8012904:	080196e0 	.word	0x080196e0
 8012908:	08019714 	.word	0x08019714
 801290c:	08019734 	.word	0x08019734
 8012910:	0801975c 	.word	0x0801975c
 8012914:	08019780 	.word	0x08019780

08012918 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012918:	b590      	push	{r4, r7, lr}
 801291a:	b08b      	sub	sp, #44	@ 0x2c
 801291c:	af02      	add	r7, sp, #8
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	460b      	mov	r3, r1
 8012922:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012924:	2300      	movs	r3, #0
 8012926:	61fb      	str	r3, [r7, #28]
 8012928:	2300      	movs	r3, #0
 801292a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801292c:	2300      	movs	r3, #0
 801292e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <tcp_split_unsent_seg+0x2c>
 8012936:	4b95      	ldr	r3, [pc, #596]	@ (8012b8c <tcp_split_unsent_seg+0x274>)
 8012938:	f240 324b 	movw	r2, #843	@ 0x34b
 801293c:	4994      	ldr	r1, [pc, #592]	@ (8012b90 <tcp_split_unsent_seg+0x278>)
 801293e:	4895      	ldr	r0, [pc, #596]	@ (8012b94 <tcp_split_unsent_seg+0x27c>)
 8012940:	f004 f9f6 	bl	8016d30 <iprintf>

  useg = pcb->unsent;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012948:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d102      	bne.n	8012956 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012954:	e116      	b.n	8012b84 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012956:	887b      	ldrh	r3, [r7, #2]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d109      	bne.n	8012970 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801295c:	4b8b      	ldr	r3, [pc, #556]	@ (8012b8c <tcp_split_unsent_seg+0x274>)
 801295e:	f240 3253 	movw	r2, #851	@ 0x353
 8012962:	498d      	ldr	r1, [pc, #564]	@ (8012b98 <tcp_split_unsent_seg+0x280>)
 8012964:	488b      	ldr	r0, [pc, #556]	@ (8012b94 <tcp_split_unsent_seg+0x27c>)
 8012966:	f004 f9e3 	bl	8016d30 <iprintf>
    return ERR_VAL;
 801296a:	f06f 0305 	mvn.w	r3, #5
 801296e:	e109      	b.n	8012b84 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	891b      	ldrh	r3, [r3, #8]
 8012974:	887a      	ldrh	r2, [r7, #2]
 8012976:	429a      	cmp	r2, r3
 8012978:	d301      	bcc.n	801297e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801297a:	2300      	movs	r3, #0
 801297c:	e102      	b.n	8012b84 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012982:	887a      	ldrh	r2, [r7, #2]
 8012984:	429a      	cmp	r2, r3
 8012986:	d906      	bls.n	8012996 <tcp_split_unsent_seg+0x7e>
 8012988:	4b80      	ldr	r3, [pc, #512]	@ (8012b8c <tcp_split_unsent_seg+0x274>)
 801298a:	f240 325b 	movw	r2, #859	@ 0x35b
 801298e:	4983      	ldr	r1, [pc, #524]	@ (8012b9c <tcp_split_unsent_seg+0x284>)
 8012990:	4880      	ldr	r0, [pc, #512]	@ (8012b94 <tcp_split_unsent_seg+0x27c>)
 8012992:	f004 f9cd 	bl	8016d30 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	891b      	ldrh	r3, [r3, #8]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d106      	bne.n	80129ac <tcp_split_unsent_seg+0x94>
 801299e:	4b7b      	ldr	r3, [pc, #492]	@ (8012b8c <tcp_split_unsent_seg+0x274>)
 80129a0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80129a4:	497e      	ldr	r1, [pc, #504]	@ (8012ba0 <tcp_split_unsent_seg+0x288>)
 80129a6:	487b      	ldr	r0, [pc, #492]	@ (8012b94 <tcp_split_unsent_seg+0x27c>)
 80129a8:	f004 f9c2 	bl	8016d30 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	7a9b      	ldrb	r3, [r3, #10]
 80129b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80129b2:	7bfb      	ldrb	r3, [r7, #15]
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	f003 0304 	and.w	r3, r3, #4
 80129bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	891a      	ldrh	r2, [r3, #8]
 80129c2:	887b      	ldrh	r3, [r7, #2]
 80129c4:	1ad3      	subs	r3, r2, r3
 80129c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80129c8:	7bbb      	ldrb	r3, [r7, #14]
 80129ca:	b29a      	uxth	r2, r3
 80129cc:	89bb      	ldrh	r3, [r7, #12]
 80129ce:	4413      	add	r3, r2
 80129d0:	b29b      	uxth	r3, r3
 80129d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80129d6:	4619      	mov	r1, r3
 80129d8:	2036      	movs	r0, #54	@ 0x36
 80129da:	f7fb fac3 	bl	800df64 <pbuf_alloc>
 80129de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f000 80b7 	beq.w	8012b56 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	685b      	ldr	r3, [r3, #4]
 80129ec:	891a      	ldrh	r2, [r3, #8]
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	891b      	ldrh	r3, [r3, #8]
 80129f2:	1ad3      	subs	r3, r2, r3
 80129f4:	b29a      	uxth	r2, r3
 80129f6:	887b      	ldrh	r3, [r7, #2]
 80129f8:	4413      	add	r3, r2
 80129fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	6858      	ldr	r0, [r3, #4]
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	685a      	ldr	r2, [r3, #4]
 8012a04:	7bbb      	ldrb	r3, [r7, #14]
 8012a06:	18d1      	adds	r1, r2, r3
 8012a08:	897b      	ldrh	r3, [r7, #10]
 8012a0a:	89ba      	ldrh	r2, [r7, #12]
 8012a0c:	f7fb ff84 	bl	800e918 <pbuf_copy_partial>
 8012a10:	4603      	mov	r3, r0
 8012a12:	461a      	mov	r2, r3
 8012a14:	89bb      	ldrh	r3, [r7, #12]
 8012a16:	4293      	cmp	r3, r2
 8012a18:	f040 809f 	bne.w	8012b5a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	899b      	ldrh	r3, [r3, #12]
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7fa f993 	bl	800cd50 <lwip_htons>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012a32:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012a34:	2300      	movs	r3, #0
 8012a36:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012a38:	7efb      	ldrb	r3, [r7, #27]
 8012a3a:	f003 0308 	and.w	r3, r3, #8
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d007      	beq.n	8012a52 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012a42:	7efb      	ldrb	r3, [r7, #27]
 8012a44:	f023 0308 	bic.w	r3, r3, #8
 8012a48:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012a4a:	7ebb      	ldrb	r3, [r7, #26]
 8012a4c:	f043 0308 	orr.w	r3, r3, #8
 8012a50:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012a52:	7efb      	ldrb	r3, [r7, #27]
 8012a54:	f003 0301 	and.w	r3, r3, #1
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d007      	beq.n	8012a6c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012a5c:	7efb      	ldrb	r3, [r7, #27]
 8012a5e:	f023 0301 	bic.w	r3, r3, #1
 8012a62:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012a64:	7ebb      	ldrb	r3, [r7, #26]
 8012a66:	f043 0301 	orr.w	r3, r3, #1
 8012a6a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	68db      	ldr	r3, [r3, #12]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fa f982 	bl	800cd7c <lwip_htonl>
 8012a78:	4602      	mov	r2, r0
 8012a7a:	887b      	ldrh	r3, [r7, #2]
 8012a7c:	18d1      	adds	r1, r2, r3
 8012a7e:	7eba      	ldrb	r2, [r7, #26]
 8012a80:	7bfb      	ldrb	r3, [r7, #15]
 8012a82:	9300      	str	r3, [sp, #0]
 8012a84:	460b      	mov	r3, r1
 8012a86:	6939      	ldr	r1, [r7, #16]
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f7ff fea9 	bl	80127e0 <tcp_create_segment>
 8012a8e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012a90:	69fb      	ldr	r3, [r7, #28]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d063      	beq.n	8012b5e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fb fdd4 	bl	800e648 <pbuf_clen>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012aaa:	1a9b      	subs	r3, r3, r2
 8012aac:	b29a      	uxth	r2, r3
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	6858      	ldr	r0, [r3, #4]
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	891a      	ldrh	r2, [r3, #8]
 8012abe:	89bb      	ldrh	r3, [r7, #12]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	4619      	mov	r1, r3
 8012ac6:	f7fb fbab 	bl	800e220 <pbuf_realloc>
  useg->len -= remainder;
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	891a      	ldrh	r2, [r3, #8]
 8012ace:	89bb      	ldrh	r3, [r7, #12]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	899b      	ldrh	r3, [r3, #12]
 8012ade:	b29c      	uxth	r4, r3
 8012ae0:	7efb      	ldrb	r3, [r7, #27]
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7fa f933 	bl	800cd50 <lwip_htons>
 8012aea:	4603      	mov	r3, r0
 8012aec:	461a      	mov	r2, r3
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	68db      	ldr	r3, [r3, #12]
 8012af2:	4322      	orrs	r2, r4
 8012af4:	b292      	uxth	r2, r2
 8012af6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	f7fb fda3 	bl	800e648 <pbuf_clen>
 8012b02:	4603      	mov	r3, r0
 8012b04:	461a      	mov	r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012b0c:	4413      	add	r3, r2
 8012b0e:	b29a      	uxth	r2, r3
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012b16:	69fb      	ldr	r3, [r7, #28]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fb fd94 	bl	800e648 <pbuf_clen>
 8012b20:	4603      	mov	r3, r0
 8012b22:	461a      	mov	r2, r3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012b2a:	4413      	add	r3, r2
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	681a      	ldr	r2, [r3, #0]
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	69fa      	ldr	r2, [r7, #28]
 8012b40:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012b42:	69fb      	ldr	r3, [r7, #28]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d103      	bne.n	8012b52 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012b52:	2300      	movs	r3, #0
 8012b54:	e016      	b.n	8012b84 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012b56:	bf00      	nop
 8012b58:	e002      	b.n	8012b60 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012b5a:	bf00      	nop
 8012b5c:	e000      	b.n	8012b60 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012b5e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d006      	beq.n	8012b74 <tcp_split_unsent_seg+0x25c>
 8012b66:	4b09      	ldr	r3, [pc, #36]	@ (8012b8c <tcp_split_unsent_seg+0x274>)
 8012b68:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012b6c:	490d      	ldr	r1, [pc, #52]	@ (8012ba4 <tcp_split_unsent_seg+0x28c>)
 8012b6e:	4809      	ldr	r0, [pc, #36]	@ (8012b94 <tcp_split_unsent_seg+0x27c>)
 8012b70:	f004 f8de 	bl	8016d30 <iprintf>
  if (p != NULL) {
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d002      	beq.n	8012b80 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012b7a:	6938      	ldr	r0, [r7, #16]
 8012b7c:	f7fb fcd6 	bl	800e52c <pbuf_free>
  }

  return ERR_MEM;
 8012b80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3724      	adds	r7, #36	@ 0x24
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd90      	pop	{r4, r7, pc}
 8012b8c:	080196e0 	.word	0x080196e0
 8012b90:	08019a74 	.word	0x08019a74
 8012b94:	08019734 	.word	0x08019734
 8012b98:	08019a98 	.word	0x08019a98
 8012b9c:	08019abc 	.word	0x08019abc
 8012ba0:	08019acc 	.word	0x08019acc
 8012ba4:	08019adc 	.word	0x08019adc

08012ba8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012ba8:	b590      	push	{r4, r7, lr}
 8012baa:	b085      	sub	sp, #20
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d106      	bne.n	8012bc4 <tcp_send_fin+0x1c>
 8012bb6:	4b21      	ldr	r3, [pc, #132]	@ (8012c3c <tcp_send_fin+0x94>)
 8012bb8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012bbc:	4920      	ldr	r1, [pc, #128]	@ (8012c40 <tcp_send_fin+0x98>)
 8012bbe:	4821      	ldr	r0, [pc, #132]	@ (8012c44 <tcp_send_fin+0x9c>)
 8012bc0:	f004 f8b6 	bl	8016d30 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d02e      	beq.n	8012c2a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bd0:	60fb      	str	r3, [r7, #12]
 8012bd2:	e002      	b.n	8012bda <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d1f8      	bne.n	8012bd4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	899b      	ldrh	r3, [r3, #12]
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fa f8b0 	bl	800cd50 <lwip_htons>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	f003 0307 	and.w	r3, r3, #7
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d116      	bne.n	8012c2a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	68db      	ldr	r3, [r3, #12]
 8012c00:	899b      	ldrh	r3, [r3, #12]
 8012c02:	b29c      	uxth	r4, r3
 8012c04:	2001      	movs	r0, #1
 8012c06:	f7fa f8a3 	bl	800cd50 <lwip_htons>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	4322      	orrs	r2, r4
 8012c14:	b292      	uxth	r2, r2
 8012c16:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	8b5b      	ldrh	r3, [r3, #26]
 8012c1c:	f043 0320 	orr.w	r3, r3, #32
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012c26:	2300      	movs	r3, #0
 8012c28:	e004      	b.n	8012c34 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012c2a:	2101      	movs	r1, #1
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f000 f80b 	bl	8012c48 <tcp_enqueue_flags>
 8012c32:	4603      	mov	r3, r0
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3714      	adds	r7, #20
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd90      	pop	{r4, r7, pc}
 8012c3c:	080196e0 	.word	0x080196e0
 8012c40:	08019ae8 	.word	0x08019ae8
 8012c44:	08019734 	.word	0x08019734

08012c48 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b08a      	sub	sp, #40	@ 0x28
 8012c4c:	af02      	add	r7, sp, #8
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	460b      	mov	r3, r1
 8012c52:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012c54:	2300      	movs	r3, #0
 8012c56:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012c5c:	78fb      	ldrb	r3, [r7, #3]
 8012c5e:	f003 0303 	and.w	r3, r3, #3
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d106      	bne.n	8012c74 <tcp_enqueue_flags+0x2c>
 8012c66:	4b67      	ldr	r3, [pc, #412]	@ (8012e04 <tcp_enqueue_flags+0x1bc>)
 8012c68:	f240 4211 	movw	r2, #1041	@ 0x411
 8012c6c:	4966      	ldr	r1, [pc, #408]	@ (8012e08 <tcp_enqueue_flags+0x1c0>)
 8012c6e:	4867      	ldr	r0, [pc, #412]	@ (8012e0c <tcp_enqueue_flags+0x1c4>)
 8012c70:	f004 f85e 	bl	8016d30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d106      	bne.n	8012c88 <tcp_enqueue_flags+0x40>
 8012c7a:	4b62      	ldr	r3, [pc, #392]	@ (8012e04 <tcp_enqueue_flags+0x1bc>)
 8012c7c:	f240 4213 	movw	r2, #1043	@ 0x413
 8012c80:	4963      	ldr	r1, [pc, #396]	@ (8012e10 <tcp_enqueue_flags+0x1c8>)
 8012c82:	4862      	ldr	r0, [pc, #392]	@ (8012e0c <tcp_enqueue_flags+0x1c4>)
 8012c84:	f004 f854 	bl	8016d30 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012c88:	78fb      	ldrb	r3, [r7, #3]
 8012c8a:	f003 0302 	and.w	r3, r3, #2
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d001      	beq.n	8012c96 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012c92:	2301      	movs	r3, #1
 8012c94:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c96:	7ffb      	ldrb	r3, [r7, #31]
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	f003 0304 	and.w	r3, r3, #4
 8012ca0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012ca2:	7dfb      	ldrb	r3, [r7, #23]
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012caa:	4619      	mov	r1, r3
 8012cac:	2036      	movs	r0, #54	@ 0x36
 8012cae:	f7fb f959 	bl	800df64 <pbuf_alloc>
 8012cb2:	6138      	str	r0, [r7, #16]
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d109      	bne.n	8012cce <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	8b5b      	ldrh	r3, [r3, #26]
 8012cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cc2:	b29a      	uxth	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012cc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ccc:	e095      	b.n	8012dfa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	895a      	ldrh	r2, [r3, #10]
 8012cd2:	7dfb      	ldrb	r3, [r7, #23]
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d206      	bcs.n	8012ce8 <tcp_enqueue_flags+0xa0>
 8012cda:	4b4a      	ldr	r3, [pc, #296]	@ (8012e04 <tcp_enqueue_flags+0x1bc>)
 8012cdc:	f240 4239 	movw	r2, #1081	@ 0x439
 8012ce0:	494c      	ldr	r1, [pc, #304]	@ (8012e14 <tcp_enqueue_flags+0x1cc>)
 8012ce2:	484a      	ldr	r0, [pc, #296]	@ (8012e0c <tcp_enqueue_flags+0x1c4>)
 8012ce4:	f004 f824 	bl	8016d30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012cec:	78fa      	ldrb	r2, [r7, #3]
 8012cee:	7ffb      	ldrb	r3, [r7, #31]
 8012cf0:	9300      	str	r3, [sp, #0]
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	6939      	ldr	r1, [r7, #16]
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f7ff fd72 	bl	80127e0 <tcp_create_segment>
 8012cfc:	60f8      	str	r0, [r7, #12]
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d109      	bne.n	8012d18 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	8b5b      	ldrh	r3, [r3, #26]
 8012d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012d16:	e070      	b.n	8012dfa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	f003 0303 	and.w	r3, r3, #3
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d006      	beq.n	8012d32 <tcp_enqueue_flags+0xea>
 8012d24:	4b37      	ldr	r3, [pc, #220]	@ (8012e04 <tcp_enqueue_flags+0x1bc>)
 8012d26:	f240 4242 	movw	r2, #1090	@ 0x442
 8012d2a:	493b      	ldr	r1, [pc, #236]	@ (8012e18 <tcp_enqueue_flags+0x1d0>)
 8012d2c:	4837      	ldr	r0, [pc, #220]	@ (8012e0c <tcp_enqueue_flags+0x1c4>)
 8012d2e:	f003 ffff 	bl	8016d30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	891b      	ldrh	r3, [r3, #8]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d006      	beq.n	8012d48 <tcp_enqueue_flags+0x100>
 8012d3a:	4b32      	ldr	r3, [pc, #200]	@ (8012e04 <tcp_enqueue_flags+0x1bc>)
 8012d3c:	f240 4243 	movw	r2, #1091	@ 0x443
 8012d40:	4936      	ldr	r1, [pc, #216]	@ (8012e1c <tcp_enqueue_flags+0x1d4>)
 8012d42:	4832      	ldr	r0, [pc, #200]	@ (8012e0c <tcp_enqueue_flags+0x1c4>)
 8012d44:	f003 fff4 	bl	8016d30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d103      	bne.n	8012d58 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012d56:	e00d      	b.n	8012d74 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d5c:	61bb      	str	r3, [r7, #24]
 8012d5e:	e002      	b.n	8012d66 <tcp_enqueue_flags+0x11e>
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	61bb      	str	r3, [r7, #24]
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d1f8      	bne.n	8012d60 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	68fa      	ldr	r2, [r7, #12]
 8012d72:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2200      	movs	r2, #0
 8012d78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012d7c:	78fb      	ldrb	r3, [r7, #3]
 8012d7e:	f003 0302 	and.w	r3, r3, #2
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d104      	bne.n	8012d90 <tcp_enqueue_flags+0x148>
 8012d86:	78fb      	ldrb	r3, [r7, #3]
 8012d88:	f003 0301 	and.w	r3, r3, #1
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d004      	beq.n	8012d9a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d94:	1c5a      	adds	r2, r3, #1
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012d9a:	78fb      	ldrb	r3, [r7, #3]
 8012d9c:	f003 0301 	and.w	r3, r3, #1
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d006      	beq.n	8012db2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	8b5b      	ldrh	r3, [r3, #26]
 8012da8:	f043 0320 	orr.w	r3, r3, #32
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7fb fc46 	bl	800e648 <pbuf_clen>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012dc6:	4413      	add	r3, r2
 8012dc8:	b29a      	uxth	r2, r3
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00e      	beq.n	8012df8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d10a      	bne.n	8012df8 <tcp_enqueue_flags+0x1b0>
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <tcp_enqueue_flags+0x1b0>
 8012dea:	4b06      	ldr	r3, [pc, #24]	@ (8012e04 <tcp_enqueue_flags+0x1bc>)
 8012dec:	f240 4265 	movw	r2, #1125	@ 0x465
 8012df0:	490b      	ldr	r1, [pc, #44]	@ (8012e20 <tcp_enqueue_flags+0x1d8>)
 8012df2:	4806      	ldr	r0, [pc, #24]	@ (8012e0c <tcp_enqueue_flags+0x1c4>)
 8012df4:	f003 ff9c 	bl	8016d30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012df8:	2300      	movs	r3, #0
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3720      	adds	r7, #32
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	080196e0 	.word	0x080196e0
 8012e08:	08019b04 	.word	0x08019b04
 8012e0c:	08019734 	.word	0x08019734
 8012e10:	08019b5c 	.word	0x08019b5c
 8012e14:	08019b7c 	.word	0x08019b7c
 8012e18:	08019bb8 	.word	0x08019bb8
 8012e1c:	08019bd0 	.word	0x08019bd0
 8012e20:	08019bfc 	.word	0x08019bfc

08012e24 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012e24:	b5b0      	push	{r4, r5, r7, lr}
 8012e26:	b08a      	sub	sp, #40	@ 0x28
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d106      	bne.n	8012e40 <tcp_output+0x1c>
 8012e32:	4b8a      	ldr	r3, [pc, #552]	@ (801305c <tcp_output+0x238>)
 8012e34:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012e38:	4989      	ldr	r1, [pc, #548]	@ (8013060 <tcp_output+0x23c>)
 8012e3a:	488a      	ldr	r0, [pc, #552]	@ (8013064 <tcp_output+0x240>)
 8012e3c:	f003 ff78 	bl	8016d30 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	7d1b      	ldrb	r3, [r3, #20]
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d106      	bne.n	8012e56 <tcp_output+0x32>
 8012e48:	4b84      	ldr	r3, [pc, #528]	@ (801305c <tcp_output+0x238>)
 8012e4a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012e4e:	4986      	ldr	r1, [pc, #536]	@ (8013068 <tcp_output+0x244>)
 8012e50:	4884      	ldr	r0, [pc, #528]	@ (8013064 <tcp_output+0x240>)
 8012e52:	f003 ff6d 	bl	8016d30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012e56:	4b85      	ldr	r3, [pc, #532]	@ (801306c <tcp_output+0x248>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d101      	bne.n	8012e64 <tcp_output+0x40>
    return ERR_OK;
 8012e60:	2300      	movs	r3, #0
 8012e62:	e1ce      	b.n	8013202 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e70:	4293      	cmp	r3, r2
 8012e72:	bf28      	it	cs
 8012e74:	4613      	movcs	r3, r2
 8012e76:	b29b      	uxth	r3, r3
 8012e78:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d10b      	bne.n	8012e9e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	8b5b      	ldrh	r3, [r3, #26]
 8012e8a:	f003 0302 	and.w	r3, r3, #2
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	f000 81aa 	beq.w	80131e8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f000 fdcb 	bl	8013a30 <tcp_send_empty_ack>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	e1b1      	b.n	8013202 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012e9e:	6879      	ldr	r1, [r7, #4]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	3304      	adds	r3, #4
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7ff fc7e 	bl	80127a8 <tcp_route>
 8012eac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d102      	bne.n	8012eba <tcp_output+0x96>
    return ERR_RTE;
 8012eb4:	f06f 0303 	mvn.w	r3, #3
 8012eb8:	e1a3      	b.n	8013202 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d003      	beq.n	8012ec8 <tcp_output+0xa4>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d111      	bne.n	8012eec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d002      	beq.n	8012ed4 <tcp_output+0xb0>
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	3304      	adds	r3, #4
 8012ed2:	e000      	b.n	8012ed6 <tcp_output+0xb2>
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012ed8:	693b      	ldr	r3, [r7, #16]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d102      	bne.n	8012ee4 <tcp_output+0xc0>
      return ERR_RTE;
 8012ede:	f06f 0303 	mvn.w	r3, #3
 8012ee2:	e18e      	b.n	8013202 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	681a      	ldr	r2, [r3, #0]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7f9 ff42 	bl	800cd7c <lwip_htonl>
 8012ef8:	4602      	mov	r2, r0
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f02:	8912      	ldrh	r2, [r2, #8]
 8012f04:	4413      	add	r3, r2
 8012f06:	69ba      	ldr	r2, [r7, #24]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d227      	bcs.n	8012f5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012f12:	461a      	mov	r2, r3
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	4293      	cmp	r3, r2
 8012f18:	d114      	bne.n	8012f44 <tcp_output+0x120>
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d110      	bne.n	8012f44 <tcp_output+0x120>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d10b      	bne.n	8012f44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2201      	movs	r2, #1
 8012f38:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2200      	movs	r2, #0
 8012f40:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	8b5b      	ldrh	r3, [r3, #26]
 8012f48:	f003 0302 	and.w	r3, r3, #2
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	f000 814d 	beq.w	80131ec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f000 fd6c 	bl	8013a30 <tcp_send_empty_ack>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	e152      	b.n	8013202 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012f6a:	6a3b      	ldr	r3, [r7, #32]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	f000 811c 	beq.w	80131aa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012f72:	e002      	b.n	8012f7a <tcp_output+0x156>
 8012f74:	6a3b      	ldr	r3, [r7, #32]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	623b      	str	r3, [r7, #32]
 8012f7a:	6a3b      	ldr	r3, [r7, #32]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d1f8      	bne.n	8012f74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012f82:	e112      	b.n	80131aa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f86:	68db      	ldr	r3, [r3, #12]
 8012f88:	899b      	ldrh	r3, [r3, #12]
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7f9 fedf 	bl	800cd50 <lwip_htons>
 8012f92:	4603      	mov	r3, r0
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	f003 0304 	and.w	r3, r3, #4
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d006      	beq.n	8012fac <tcp_output+0x188>
 8012f9e:	4b2f      	ldr	r3, [pc, #188]	@ (801305c <tcp_output+0x238>)
 8012fa0:	f240 5236 	movw	r2, #1334	@ 0x536
 8012fa4:	4932      	ldr	r1, [pc, #200]	@ (8013070 <tcp_output+0x24c>)
 8012fa6:	482f      	ldr	r0, [pc, #188]	@ (8013064 <tcp_output+0x240>)
 8012fa8:	f003 fec2 	bl	8016d30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d01f      	beq.n	8012ff4 <tcp_output+0x1d0>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	8b5b      	ldrh	r3, [r3, #26]
 8012fb8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d119      	bne.n	8012ff4 <tcp_output+0x1d0>
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d00b      	beq.n	8012fe0 <tcp_output+0x1bc>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d110      	bne.n	8012ff4 <tcp_output+0x1d0>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012fd6:	891a      	ldrh	r2, [r3, #8]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d209      	bcs.n	8012ff4 <tcp_output+0x1d0>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d004      	beq.n	8012ff4 <tcp_output+0x1d0>
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012ff0:	2b08      	cmp	r3, #8
 8012ff2:	d901      	bls.n	8012ff8 <tcp_output+0x1d4>
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	e000      	b.n	8012ffa <tcp_output+0x1d6>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d106      	bne.n	801300c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	8b5b      	ldrh	r3, [r3, #26]
 8013002:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013006:	2b00      	cmp	r3, #0
 8013008:	f000 80e4 	beq.w	80131d4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	7d1b      	ldrb	r3, [r3, #20]
 8013010:	2b02      	cmp	r3, #2
 8013012:	d00d      	beq.n	8013030 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	899b      	ldrh	r3, [r3, #12]
 801301a:	b29c      	uxth	r4, r3
 801301c:	2010      	movs	r0, #16
 801301e:	f7f9 fe97 	bl	800cd50 <lwip_htons>
 8013022:	4603      	mov	r3, r0
 8013024:	461a      	mov	r2, r3
 8013026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013028:	68db      	ldr	r3, [r3, #12]
 801302a:	4322      	orrs	r2, r4
 801302c:	b292      	uxth	r2, r2
 801302e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013030:	697a      	ldr	r2, [r7, #20]
 8013032:	6879      	ldr	r1, [r7, #4]
 8013034:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013036:	f000 f909 	bl	801324c <tcp_output_segment>
 801303a:	4603      	mov	r3, r0
 801303c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d016      	beq.n	8013074 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	8b5b      	ldrh	r3, [r3, #26]
 801304a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801304e:	b29a      	uxth	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	835a      	strh	r2, [r3, #26]
      return err;
 8013054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013058:	e0d3      	b.n	8013202 <tcp_output+0x3de>
 801305a:	bf00      	nop
 801305c:	080196e0 	.word	0x080196e0
 8013060:	08019c24 	.word	0x08019c24
 8013064:	08019734 	.word	0x08019734
 8013068:	08019c3c 	.word	0x08019c3c
 801306c:	2000c73c 	.word	0x2000c73c
 8013070:	08019c64 	.word	0x08019c64
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013076:	681a      	ldr	r2, [r3, #0]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	7d1b      	ldrb	r3, [r3, #20]
 8013080:	2b02      	cmp	r3, #2
 8013082:	d006      	beq.n	8013092 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	8b5b      	ldrh	r3, [r3, #26]
 8013088:	f023 0303 	bic.w	r3, r3, #3
 801308c:	b29a      	uxth	r2, r3
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013094:	68db      	ldr	r3, [r3, #12]
 8013096:	685b      	ldr	r3, [r3, #4]
 8013098:	4618      	mov	r0, r3
 801309a:	f7f9 fe6f 	bl	800cd7c <lwip_htonl>
 801309e:	4604      	mov	r4, r0
 80130a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130a2:	891b      	ldrh	r3, [r3, #8]
 80130a4:	461d      	mov	r5, r3
 80130a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130a8:	68db      	ldr	r3, [r3, #12]
 80130aa:	899b      	ldrh	r3, [r3, #12]
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7f9 fe4e 	bl	800cd50 <lwip_htons>
 80130b4:	4603      	mov	r3, r0
 80130b6:	b2db      	uxtb	r3, r3
 80130b8:	f003 0303 	and.w	r3, r3, #3
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d001      	beq.n	80130c4 <tcp_output+0x2a0>
 80130c0:	2301      	movs	r3, #1
 80130c2:	e000      	b.n	80130c6 <tcp_output+0x2a2>
 80130c4:	2300      	movs	r3, #0
 80130c6:	442b      	add	r3, r5
 80130c8:	4423      	add	r3, r4
 80130ca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	1ad3      	subs	r3, r2, r3
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	da02      	bge.n	80130de <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	68ba      	ldr	r2, [r7, #8]
 80130dc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80130de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130e0:	891b      	ldrh	r3, [r3, #8]
 80130e2:	461c      	mov	r4, r3
 80130e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130e6:	68db      	ldr	r3, [r3, #12]
 80130e8:	899b      	ldrh	r3, [r3, #12]
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7f9 fe2f 	bl	800cd50 <lwip_htons>
 80130f2:	4603      	mov	r3, r0
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	f003 0303 	and.w	r3, r3, #3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d001      	beq.n	8013102 <tcp_output+0x2de>
 80130fe:	2301      	movs	r3, #1
 8013100:	e000      	b.n	8013104 <tcp_output+0x2e0>
 8013102:	2300      	movs	r3, #0
 8013104:	4423      	add	r3, r4
 8013106:	2b00      	cmp	r3, #0
 8013108:	d049      	beq.n	801319e <tcp_output+0x37a>
      seg->next = NULL;
 801310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801310c:	2200      	movs	r2, #0
 801310e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013114:	2b00      	cmp	r3, #0
 8013116:	d105      	bne.n	8013124 <tcp_output+0x300>
        pcb->unacked = seg;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801311c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801311e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013120:	623b      	str	r3, [r7, #32]
 8013122:	e03f      	b.n	80131a4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013126:	68db      	ldr	r3, [r3, #12]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	4618      	mov	r0, r3
 801312c:	f7f9 fe26 	bl	800cd7c <lwip_htonl>
 8013130:	4604      	mov	r4, r0
 8013132:	6a3b      	ldr	r3, [r7, #32]
 8013134:	68db      	ldr	r3, [r3, #12]
 8013136:	685b      	ldr	r3, [r3, #4]
 8013138:	4618      	mov	r0, r3
 801313a:	f7f9 fe1f 	bl	800cd7c <lwip_htonl>
 801313e:	4603      	mov	r3, r0
 8013140:	1ae3      	subs	r3, r4, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	da24      	bge.n	8013190 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	3370      	adds	r3, #112	@ 0x70
 801314a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801314c:	e002      	b.n	8013154 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013154:	69fb      	ldr	r3, [r7, #28]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d011      	beq.n	8013180 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801315c:	69fb      	ldr	r3, [r7, #28]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	685b      	ldr	r3, [r3, #4]
 8013164:	4618      	mov	r0, r3
 8013166:	f7f9 fe09 	bl	800cd7c <lwip_htonl>
 801316a:	4604      	mov	r4, r0
 801316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	4618      	mov	r0, r3
 8013174:	f7f9 fe02 	bl	800cd7c <lwip_htonl>
 8013178:	4603      	mov	r3, r0
 801317a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801317c:	2b00      	cmp	r3, #0
 801317e:	dbe6      	blt.n	801314e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013180:	69fb      	ldr	r3, [r7, #28]
 8013182:	681a      	ldr	r2, [r3, #0]
 8013184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013186:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801318c:	601a      	str	r2, [r3, #0]
 801318e:	e009      	b.n	80131a4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013190:	6a3b      	ldr	r3, [r7, #32]
 8013192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013194:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013196:	6a3b      	ldr	r3, [r7, #32]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	623b      	str	r3, [r7, #32]
 801319c:	e002      	b.n	80131a4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801319e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80131a0:	f7fc fc45 	bl	800fa2e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80131aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d012      	beq.n	80131d6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80131b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7f9 fde0 	bl	800cd7c <lwip_htonl>
 80131bc:	4602      	mov	r2, r0
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131c2:	1ad3      	subs	r3, r2, r3
 80131c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80131c6:	8912      	ldrh	r2, [r2, #8]
 80131c8:	4413      	add	r3, r2
  while (seg != NULL &&
 80131ca:	69ba      	ldr	r2, [r7, #24]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	f4bf aed9 	bcs.w	8012f84 <tcp_output+0x160>
 80131d2:	e000      	b.n	80131d6 <tcp_output+0x3b2>
      break;
 80131d4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d108      	bne.n	80131f0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2200      	movs	r2, #0
 80131e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80131e6:	e004      	b.n	80131f2 <tcp_output+0x3ce>
    goto output_done;
 80131e8:	bf00      	nop
 80131ea:	e002      	b.n	80131f2 <tcp_output+0x3ce>
    goto output_done;
 80131ec:	bf00      	nop
 80131ee:	e000      	b.n	80131f2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80131f0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	8b5b      	ldrh	r3, [r3, #26]
 80131f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013200:	2300      	movs	r3, #0
}
 8013202:	4618      	mov	r0, r3
 8013204:	3728      	adds	r7, #40	@ 0x28
 8013206:	46bd      	mov	sp, r7
 8013208:	bdb0      	pop	{r4, r5, r7, pc}
 801320a:	bf00      	nop

0801320c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d106      	bne.n	8013228 <tcp_output_segment_busy+0x1c>
 801321a:	4b09      	ldr	r3, [pc, #36]	@ (8013240 <tcp_output_segment_busy+0x34>)
 801321c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013220:	4908      	ldr	r1, [pc, #32]	@ (8013244 <tcp_output_segment_busy+0x38>)
 8013222:	4809      	ldr	r0, [pc, #36]	@ (8013248 <tcp_output_segment_busy+0x3c>)
 8013224:	f003 fd84 	bl	8016d30 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	7b9b      	ldrb	r3, [r3, #14]
 801322e:	2b01      	cmp	r3, #1
 8013230:	d001      	beq.n	8013236 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013232:	2301      	movs	r3, #1
 8013234:	e000      	b.n	8013238 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013236:	2300      	movs	r3, #0
}
 8013238:	4618      	mov	r0, r3
 801323a:	3708      	adds	r7, #8
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}
 8013240:	080196e0 	.word	0x080196e0
 8013244:	08019c7c 	.word	0x08019c7c
 8013248:	08019734 	.word	0x08019734

0801324c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801324c:	b5b0      	push	{r4, r5, r7, lr}
 801324e:	b08c      	sub	sp, #48	@ 0x30
 8013250:	af04      	add	r7, sp, #16
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d106      	bne.n	801326c <tcp_output_segment+0x20>
 801325e:	4b64      	ldr	r3, [pc, #400]	@ (80133f0 <tcp_output_segment+0x1a4>)
 8013260:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8013264:	4963      	ldr	r1, [pc, #396]	@ (80133f4 <tcp_output_segment+0x1a8>)
 8013266:	4864      	ldr	r0, [pc, #400]	@ (80133f8 <tcp_output_segment+0x1ac>)
 8013268:	f003 fd62 	bl	8016d30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d106      	bne.n	8013280 <tcp_output_segment+0x34>
 8013272:	4b5f      	ldr	r3, [pc, #380]	@ (80133f0 <tcp_output_segment+0x1a4>)
 8013274:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013278:	4960      	ldr	r1, [pc, #384]	@ (80133fc <tcp_output_segment+0x1b0>)
 801327a:	485f      	ldr	r0, [pc, #380]	@ (80133f8 <tcp_output_segment+0x1ac>)
 801327c:	f003 fd58 	bl	8016d30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d106      	bne.n	8013294 <tcp_output_segment+0x48>
 8013286:	4b5a      	ldr	r3, [pc, #360]	@ (80133f0 <tcp_output_segment+0x1a4>)
 8013288:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801328c:	495c      	ldr	r1, [pc, #368]	@ (8013400 <tcp_output_segment+0x1b4>)
 801328e:	485a      	ldr	r0, [pc, #360]	@ (80133f8 <tcp_output_segment+0x1ac>)
 8013290:	f003 fd4e 	bl	8016d30 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013294:	68f8      	ldr	r0, [r7, #12]
 8013296:	f7ff ffb9 	bl	801320c <tcp_output_segment_busy>
 801329a:	4603      	mov	r3, r0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d001      	beq.n	80132a4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80132a0:	2300      	movs	r3, #0
 80132a2:	e0a1      	b.n	80133e8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	68dc      	ldr	r4, [r3, #12]
 80132ac:	4610      	mov	r0, r2
 80132ae:	f7f9 fd65 	bl	800cd7c <lwip_htonl>
 80132b2:	4603      	mov	r3, r0
 80132b4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	68dc      	ldr	r4, [r3, #12]
 80132be:	4610      	mov	r0, r2
 80132c0:	f7f9 fd46 	bl	800cd50 <lwip_htons>
 80132c4:	4603      	mov	r3, r0
 80132c6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132cc:	68ba      	ldr	r2, [r7, #8]
 80132ce:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80132d0:	441a      	add	r2, r3
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	3314      	adds	r3, #20
 80132dc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	7a9b      	ldrb	r3, [r3, #10]
 80132e2:	f003 0301 	and.w	r3, r3, #1
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d015      	beq.n	8013316 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	3304      	adds	r3, #4
 80132ee:	461a      	mov	r2, r3
 80132f0:	6879      	ldr	r1, [r7, #4]
 80132f2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80132f6:	f7fc fe91 	bl	801001c <tcp_eff_send_mss_netif>
 80132fa:	4603      	mov	r3, r0
 80132fc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80132fe:	8b7b      	ldrh	r3, [r7, #26]
 8013300:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013304:	4618      	mov	r0, r3
 8013306:	f7f9 fd39 	bl	800cd7c <lwip_htonl>
 801330a:	4602      	mov	r2, r0
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	3304      	adds	r3, #4
 8013314:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801331c:	2b00      	cmp	r3, #0
 801331e:	da02      	bge.n	8013326 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	2200      	movs	r2, #0
 8013324:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801332a:	2b00      	cmp	r3, #0
 801332c:	d10c      	bne.n	8013348 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801332e:	4b35      	ldr	r3, [pc, #212]	@ (8013404 <tcp_output_segment+0x1b8>)
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	68db      	ldr	r3, [r3, #12]
 801333a:	685b      	ldr	r3, [r3, #4]
 801333c:	4618      	mov	r0, r3
 801333e:	f7f9 fd1d 	bl	800cd7c <lwip_htonl>
 8013342:	4602      	mov	r2, r0
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	68da      	ldr	r2, [r3, #12]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	1ad3      	subs	r3, r2, r3
 8013354:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	8959      	ldrh	r1, [r3, #10]
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	685b      	ldr	r3, [r3, #4]
 8013360:	8b3a      	ldrh	r2, [r7, #24]
 8013362:	1a8a      	subs	r2, r1, r2
 8013364:	b292      	uxth	r2, r2
 8013366:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	8919      	ldrh	r1, [r3, #8]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	8b3a      	ldrh	r2, [r7, #24]
 8013374:	1a8a      	subs	r2, r1, r2
 8013376:	b292      	uxth	r2, r2
 8013378:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	68fa      	ldr	r2, [r7, #12]
 8013380:	68d2      	ldr	r2, [r2, #12]
 8013382:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	2200      	movs	r2, #0
 801338a:	741a      	strb	r2, [r3, #16]
 801338c:	2200      	movs	r2, #0
 801338e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	68da      	ldr	r2, [r3, #12]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	7a9b      	ldrb	r3, [r3, #10]
 8013398:	f003 0301 	and.w	r3, r3, #1
 801339c:	2b00      	cmp	r3, #0
 801339e:	d001      	beq.n	80133a4 <tcp_output_segment+0x158>
 80133a0:	2318      	movs	r3, #24
 80133a2:	e000      	b.n	80133a6 <tcp_output_segment+0x15a>
 80133a4:	2314      	movs	r3, #20
 80133a6:	4413      	add	r3, r2
 80133a8:	69fa      	ldr	r2, [r7, #28]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d006      	beq.n	80133bc <tcp_output_segment+0x170>
 80133ae:	4b10      	ldr	r3, [pc, #64]	@ (80133f0 <tcp_output_segment+0x1a4>)
 80133b0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80133b4:	4914      	ldr	r1, [pc, #80]	@ (8013408 <tcp_output_segment+0x1bc>)
 80133b6:	4810      	ldr	r0, [pc, #64]	@ (80133f8 <tcp_output_segment+0x1ac>)
 80133b8:	f003 fcba 	bl	8016d30 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	6858      	ldr	r0, [r3, #4]
 80133c0:	68b9      	ldr	r1, [r7, #8]
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	1d1c      	adds	r4, r3, #4
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	7add      	ldrb	r5, [r3, #11]
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	7a9b      	ldrb	r3, [r3, #10]
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	9202      	str	r2, [sp, #8]
 80133d2:	2206      	movs	r2, #6
 80133d4:	9201      	str	r2, [sp, #4]
 80133d6:	9300      	str	r3, [sp, #0]
 80133d8:	462b      	mov	r3, r5
 80133da:	4622      	mov	r2, r4
 80133dc:	f002 fa64 	bl	80158a8 <ip4_output_if>
 80133e0:	4603      	mov	r3, r0
 80133e2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80133e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3720      	adds	r7, #32
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bdb0      	pop	{r4, r5, r7, pc}
 80133f0:	080196e0 	.word	0x080196e0
 80133f4:	08019ca4 	.word	0x08019ca4
 80133f8:	08019734 	.word	0x08019734
 80133fc:	08019cc4 	.word	0x08019cc4
 8013400:	08019ce4 	.word	0x08019ce4
 8013404:	2000c6f0 	.word	0x2000c6f0
 8013408:	08019d08 	.word	0x08019d08

0801340c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801340c:	b5b0      	push	{r4, r5, r7, lr}
 801340e:	b084      	sub	sp, #16
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d106      	bne.n	8013428 <tcp_rexmit_rto_prepare+0x1c>
 801341a:	4b31      	ldr	r3, [pc, #196]	@ (80134e0 <tcp_rexmit_rto_prepare+0xd4>)
 801341c:	f240 6263 	movw	r2, #1635	@ 0x663
 8013420:	4930      	ldr	r1, [pc, #192]	@ (80134e4 <tcp_rexmit_rto_prepare+0xd8>)
 8013422:	4831      	ldr	r0, [pc, #196]	@ (80134e8 <tcp_rexmit_rto_prepare+0xdc>)
 8013424:	f003 fc84 	bl	8016d30 <iprintf>

  if (pcb->unacked == NULL) {
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801342c:	2b00      	cmp	r3, #0
 801342e:	d102      	bne.n	8013436 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013430:	f06f 0305 	mvn.w	r3, #5
 8013434:	e050      	b.n	80134d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801343a:	60fb      	str	r3, [r7, #12]
 801343c:	e00b      	b.n	8013456 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801343e:	68f8      	ldr	r0, [r7, #12]
 8013440:	f7ff fee4 	bl	801320c <tcp_output_segment_busy>
 8013444:	4603      	mov	r3, r0
 8013446:	2b00      	cmp	r3, #0
 8013448:	d002      	beq.n	8013450 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801344a:	f06f 0305 	mvn.w	r3, #5
 801344e:	e043      	b.n	80134d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	60fb      	str	r3, [r7, #12]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d1ef      	bne.n	801343e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801345e:	68f8      	ldr	r0, [r7, #12]
 8013460:	f7ff fed4 	bl	801320c <tcp_output_segment_busy>
 8013464:	4603      	mov	r3, r0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d002      	beq.n	8013470 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801346a:	f06f 0305 	mvn.w	r3, #5
 801346e:	e033      	b.n	80134d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2200      	movs	r2, #0
 8013484:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	8b5b      	ldrh	r3, [r3, #26]
 801348a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801348e:	b29a      	uxth	r2, r3
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	4618      	mov	r0, r3
 801349c:	f7f9 fc6e 	bl	800cd7c <lwip_htonl>
 80134a0:	4604      	mov	r4, r0
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	891b      	ldrh	r3, [r3, #8]
 80134a6:	461d      	mov	r5, r3
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	899b      	ldrh	r3, [r3, #12]
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7f9 fc4d 	bl	800cd50 <lwip_htons>
 80134b6:	4603      	mov	r3, r0
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	f003 0303 	and.w	r3, r3, #3
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d001      	beq.n	80134c6 <tcp_rexmit_rto_prepare+0xba>
 80134c2:	2301      	movs	r3, #1
 80134c4:	e000      	b.n	80134c8 <tcp_rexmit_rto_prepare+0xbc>
 80134c6:	2300      	movs	r3, #0
 80134c8:	442b      	add	r3, r5
 80134ca:	18e2      	adds	r2, r4, r3
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2200      	movs	r2, #0
 80134d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80134d6:	2300      	movs	r3, #0
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3710      	adds	r7, #16
 80134dc:	46bd      	mov	sp, r7
 80134de:	bdb0      	pop	{r4, r5, r7, pc}
 80134e0:	080196e0 	.word	0x080196e0
 80134e4:	08019d1c 	.word	0x08019d1c
 80134e8:	08019734 	.word	0x08019734

080134ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d106      	bne.n	8013508 <tcp_rexmit_rto_commit+0x1c>
 80134fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013530 <tcp_rexmit_rto_commit+0x44>)
 80134fc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013500:	490c      	ldr	r1, [pc, #48]	@ (8013534 <tcp_rexmit_rto_commit+0x48>)
 8013502:	480d      	ldr	r0, [pc, #52]	@ (8013538 <tcp_rexmit_rto_commit+0x4c>)
 8013504:	f003 fc14 	bl	8016d30 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801350e:	2bff      	cmp	r3, #255	@ 0xff
 8013510:	d007      	beq.n	8013522 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013518:	3301      	adds	r3, #1
 801351a:	b2da      	uxtb	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f7ff fc7e 	bl	8012e24 <tcp_output>
}
 8013528:	bf00      	nop
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	080196e0 	.word	0x080196e0
 8013534:	08019d40 	.word	0x08019d40
 8013538:	08019734 	.word	0x08019734

0801353c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d106      	bne.n	8013558 <tcp_rexmit_rto+0x1c>
 801354a:	4b0a      	ldr	r3, [pc, #40]	@ (8013574 <tcp_rexmit_rto+0x38>)
 801354c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013550:	4909      	ldr	r1, [pc, #36]	@ (8013578 <tcp_rexmit_rto+0x3c>)
 8013552:	480a      	ldr	r0, [pc, #40]	@ (801357c <tcp_rexmit_rto+0x40>)
 8013554:	f003 fbec 	bl	8016d30 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f7ff ff57 	bl	801340c <tcp_rexmit_rto_prepare>
 801355e:	4603      	mov	r3, r0
 8013560:	2b00      	cmp	r3, #0
 8013562:	d102      	bne.n	801356a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f7ff ffc1 	bl	80134ec <tcp_rexmit_rto_commit>
  }
}
 801356a:	bf00      	nop
 801356c:	3708      	adds	r7, #8
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
 8013572:	bf00      	nop
 8013574:	080196e0 	.word	0x080196e0
 8013578:	08019d64 	.word	0x08019d64
 801357c:	08019734 	.word	0x08019734

08013580 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013580:	b590      	push	{r4, r7, lr}
 8013582:	b085      	sub	sp, #20
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d106      	bne.n	801359c <tcp_rexmit+0x1c>
 801358e:	4b2f      	ldr	r3, [pc, #188]	@ (801364c <tcp_rexmit+0xcc>)
 8013590:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013594:	492e      	ldr	r1, [pc, #184]	@ (8013650 <tcp_rexmit+0xd0>)
 8013596:	482f      	ldr	r0, [pc, #188]	@ (8013654 <tcp_rexmit+0xd4>)
 8013598:	f003 fbca 	bl	8016d30 <iprintf>

  if (pcb->unacked == NULL) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d102      	bne.n	80135aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80135a4:	f06f 0305 	mvn.w	r3, #5
 80135a8:	e04c      	b.n	8013644 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80135ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80135b0:	68b8      	ldr	r0, [r7, #8]
 80135b2:	f7ff fe2b 	bl	801320c <tcp_output_segment_busy>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d002      	beq.n	80135c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80135bc:	f06f 0305 	mvn.w	r3, #5
 80135c0:	e040      	b.n	8013644 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	336c      	adds	r3, #108	@ 0x6c
 80135ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80135d0:	e002      	b.n	80135d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d011      	beq.n	8013604 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	68db      	ldr	r3, [r3, #12]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7f9 fbc7 	bl	800cd7c <lwip_htonl>
 80135ee:	4604      	mov	r4, r0
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7f9 fbc0 	bl	800cd7c <lwip_htonl>
 80135fc:	4603      	mov	r3, r0
 80135fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013600:	2b00      	cmp	r3, #0
 8013602:	dbe6      	blt.n	80135d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	68ba      	ldr	r2, [r7, #8]
 8013610:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d103      	bne.n	8013622 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2200      	movs	r2, #0
 801361e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013628:	2bff      	cmp	r3, #255	@ 0xff
 801362a:	d007      	beq.n	801363c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013632:	3301      	adds	r3, #1
 8013634:	b2da      	uxtb	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2200      	movs	r2, #0
 8013640:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013642:	2300      	movs	r3, #0
}
 8013644:	4618      	mov	r0, r3
 8013646:	3714      	adds	r7, #20
 8013648:	46bd      	mov	sp, r7
 801364a:	bd90      	pop	{r4, r7, pc}
 801364c:	080196e0 	.word	0x080196e0
 8013650:	08019d80 	.word	0x08019d80
 8013654:	08019734 	.word	0x08019734

08013658 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d106      	bne.n	8013674 <tcp_rexmit_fast+0x1c>
 8013666:	4b2a      	ldr	r3, [pc, #168]	@ (8013710 <tcp_rexmit_fast+0xb8>)
 8013668:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801366c:	4929      	ldr	r1, [pc, #164]	@ (8013714 <tcp_rexmit_fast+0xbc>)
 801366e:	482a      	ldr	r0, [pc, #168]	@ (8013718 <tcp_rexmit_fast+0xc0>)
 8013670:	f003 fb5e 	bl	8016d30 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013678:	2b00      	cmp	r3, #0
 801367a:	d045      	beq.n	8013708 <tcp_rexmit_fast+0xb0>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	8b5b      	ldrh	r3, [r3, #26]
 8013680:	f003 0304 	and.w	r3, r3, #4
 8013684:	2b00      	cmp	r3, #0
 8013686:	d13f      	bne.n	8013708 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f7ff ff79 	bl	8013580 <tcp_rexmit>
 801368e:	4603      	mov	r3, r0
 8013690:	2b00      	cmp	r3, #0
 8013692:	d139      	bne.n	8013708 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80136a0:	4293      	cmp	r3, r2
 80136a2:	bf28      	it	cs
 80136a4:	4613      	movcs	r3, r2
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	da00      	bge.n	80136ae <tcp_rexmit_fast+0x56>
 80136ac:	3301      	adds	r3, #1
 80136ae:	105b      	asrs	r3, r3, #1
 80136b0:	b29a      	uxth	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80136be:	461a      	mov	r2, r3
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80136c4:	005b      	lsls	r3, r3, #1
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d206      	bcs.n	80136d8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80136ce:	005b      	lsls	r3, r3, #1
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80136e2:	4619      	mov	r1, r3
 80136e4:	0049      	lsls	r1, r1, #1
 80136e6:	440b      	add	r3, r1
 80136e8:	b29b      	uxth	r3, r3
 80136ea:	4413      	add	r3, r2
 80136ec:	b29a      	uxth	r2, r3
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	8b5b      	ldrh	r3, [r3, #26]
 80136f8:	f043 0304 	orr.w	r3, r3, #4
 80136fc:	b29a      	uxth	r2, r3
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2200      	movs	r2, #0
 8013706:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8013708:	bf00      	nop
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	080196e0 	.word	0x080196e0
 8013714:	08019d98 	.word	0x08019d98
 8013718:	08019734 	.word	0x08019734

0801371c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b086      	sub	sp, #24
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	607b      	str	r3, [r7, #4]
 8013726:	460b      	mov	r3, r1
 8013728:	817b      	strh	r3, [r7, #10]
 801372a:	4613      	mov	r3, r2
 801372c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801372e:	897a      	ldrh	r2, [r7, #10]
 8013730:	893b      	ldrh	r3, [r7, #8]
 8013732:	4413      	add	r3, r2
 8013734:	b29b      	uxth	r3, r3
 8013736:	3314      	adds	r3, #20
 8013738:	b29b      	uxth	r3, r3
 801373a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801373e:	4619      	mov	r1, r3
 8013740:	2022      	movs	r0, #34	@ 0x22
 8013742:	f7fa fc0f 	bl	800df64 <pbuf_alloc>
 8013746:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d04d      	beq.n	80137ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801374e:	897b      	ldrh	r3, [r7, #10]
 8013750:	3313      	adds	r3, #19
 8013752:	697a      	ldr	r2, [r7, #20]
 8013754:	8952      	ldrh	r2, [r2, #10]
 8013756:	4293      	cmp	r3, r2
 8013758:	db06      	blt.n	8013768 <tcp_output_alloc_header_common+0x4c>
 801375a:	4b26      	ldr	r3, [pc, #152]	@ (80137f4 <tcp_output_alloc_header_common+0xd8>)
 801375c:	f240 7223 	movw	r2, #1827	@ 0x723
 8013760:	4925      	ldr	r1, [pc, #148]	@ (80137f8 <tcp_output_alloc_header_common+0xdc>)
 8013762:	4826      	ldr	r0, [pc, #152]	@ (80137fc <tcp_output_alloc_header_common+0xe0>)
 8013764:	f003 fae4 	bl	8016d30 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801376e:	8c3b      	ldrh	r3, [r7, #32]
 8013770:	4618      	mov	r0, r3
 8013772:	f7f9 faed 	bl	800cd50 <lwip_htons>
 8013776:	4603      	mov	r3, r0
 8013778:	461a      	mov	r2, r3
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801377e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013780:	4618      	mov	r0, r3
 8013782:	f7f9 fae5 	bl	800cd50 <lwip_htons>
 8013786:	4603      	mov	r3, r0
 8013788:	461a      	mov	r2, r3
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013794:	68f8      	ldr	r0, [r7, #12]
 8013796:	f7f9 faf1 	bl	800cd7c <lwip_htonl>
 801379a:	4602      	mov	r2, r0
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80137a0:	897b      	ldrh	r3, [r7, #10]
 80137a2:	089b      	lsrs	r3, r3, #2
 80137a4:	b29b      	uxth	r3, r3
 80137a6:	3305      	adds	r3, #5
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	031b      	lsls	r3, r3, #12
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80137b2:	b29b      	uxth	r3, r3
 80137b4:	4313      	orrs	r3, r2
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f9 fac9 	bl	800cd50 <lwip_htons>
 80137be:	4603      	mov	r3, r0
 80137c0:	461a      	mov	r2, r3
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80137c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7f9 fac1 	bl	800cd50 <lwip_htons>
 80137ce:	4603      	mov	r3, r0
 80137d0:	461a      	mov	r2, r3
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	2200      	movs	r2, #0
 80137da:	741a      	strb	r2, [r3, #16]
 80137dc:	2200      	movs	r2, #0
 80137de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80137e0:	693b      	ldr	r3, [r7, #16]
 80137e2:	2200      	movs	r2, #0
 80137e4:	749a      	strb	r2, [r3, #18]
 80137e6:	2200      	movs	r2, #0
 80137e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80137ea:	697b      	ldr	r3, [r7, #20]
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3718      	adds	r7, #24
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	080196e0 	.word	0x080196e0
 80137f8:	08019db8 	.word	0x08019db8
 80137fc:	08019734 	.word	0x08019734

08013800 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013800:	b5b0      	push	{r4, r5, r7, lr}
 8013802:	b08a      	sub	sp, #40	@ 0x28
 8013804:	af04      	add	r7, sp, #16
 8013806:	60f8      	str	r0, [r7, #12]
 8013808:	607b      	str	r3, [r7, #4]
 801380a:	460b      	mov	r3, r1
 801380c:	817b      	strh	r3, [r7, #10]
 801380e:	4613      	mov	r3, r2
 8013810:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d106      	bne.n	8013826 <tcp_output_alloc_header+0x26>
 8013818:	4b15      	ldr	r3, [pc, #84]	@ (8013870 <tcp_output_alloc_header+0x70>)
 801381a:	f240 7242 	movw	r2, #1858	@ 0x742
 801381e:	4915      	ldr	r1, [pc, #84]	@ (8013874 <tcp_output_alloc_header+0x74>)
 8013820:	4815      	ldr	r0, [pc, #84]	@ (8013878 <tcp_output_alloc_header+0x78>)
 8013822:	f003 fa85 	bl	8016d30 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	8adb      	ldrh	r3, [r3, #22]
 801382e:	68fa      	ldr	r2, [r7, #12]
 8013830:	8b12      	ldrh	r2, [r2, #24]
 8013832:	68f9      	ldr	r1, [r7, #12]
 8013834:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013836:	893d      	ldrh	r5, [r7, #8]
 8013838:	897c      	ldrh	r4, [r7, #10]
 801383a:	9103      	str	r1, [sp, #12]
 801383c:	2110      	movs	r1, #16
 801383e:	9102      	str	r1, [sp, #8]
 8013840:	9201      	str	r2, [sp, #4]
 8013842:	9300      	str	r3, [sp, #0]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	462a      	mov	r2, r5
 8013848:	4621      	mov	r1, r4
 801384a:	f7ff ff67 	bl	801371c <tcp_output_alloc_header_common>
 801384e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d006      	beq.n	8013864 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801385a:	68fa      	ldr	r2, [r7, #12]
 801385c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801385e:	441a      	add	r2, r3
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013864:	697b      	ldr	r3, [r7, #20]
}
 8013866:	4618      	mov	r0, r3
 8013868:	3718      	adds	r7, #24
 801386a:	46bd      	mov	sp, r7
 801386c:	bdb0      	pop	{r4, r5, r7, pc}
 801386e:	bf00      	nop
 8013870:	080196e0 	.word	0x080196e0
 8013874:	08019de8 	.word	0x08019de8
 8013878:	08019734 	.word	0x08019734

0801387c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b088      	sub	sp, #32
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	4611      	mov	r1, r2
 8013888:	461a      	mov	r2, r3
 801388a:	460b      	mov	r3, r1
 801388c:	71fb      	strb	r3, [r7, #7]
 801388e:	4613      	mov	r3, r2
 8013890:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013892:	2300      	movs	r3, #0
 8013894:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d106      	bne.n	80138aa <tcp_output_fill_options+0x2e>
 801389c:	4b12      	ldr	r3, [pc, #72]	@ (80138e8 <tcp_output_fill_options+0x6c>)
 801389e:	f240 7256 	movw	r2, #1878	@ 0x756
 80138a2:	4912      	ldr	r1, [pc, #72]	@ (80138ec <tcp_output_fill_options+0x70>)
 80138a4:	4812      	ldr	r0, [pc, #72]	@ (80138f0 <tcp_output_fill_options+0x74>)
 80138a6:	f003 fa43 	bl	8016d30 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	3314      	adds	r3, #20
 80138b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80138b6:	8bfb      	ldrh	r3, [r7, #30]
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	461a      	mov	r2, r3
 80138bc:	79fb      	ldrb	r3, [r7, #7]
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	f003 0304 	and.w	r3, r3, #4
 80138c4:	4413      	add	r3, r2
 80138c6:	3314      	adds	r3, #20
 80138c8:	69ba      	ldr	r2, [r7, #24]
 80138ca:	4413      	add	r3, r2
 80138cc:	697a      	ldr	r2, [r7, #20]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d006      	beq.n	80138e0 <tcp_output_fill_options+0x64>
 80138d2:	4b05      	ldr	r3, [pc, #20]	@ (80138e8 <tcp_output_fill_options+0x6c>)
 80138d4:	f240 7275 	movw	r2, #1909	@ 0x775
 80138d8:	4906      	ldr	r1, [pc, #24]	@ (80138f4 <tcp_output_fill_options+0x78>)
 80138da:	4805      	ldr	r0, [pc, #20]	@ (80138f0 <tcp_output_fill_options+0x74>)
 80138dc:	f003 fa28 	bl	8016d30 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80138e0:	bf00      	nop
 80138e2:	3720      	adds	r7, #32
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	080196e0 	.word	0x080196e0
 80138ec:	08019e10 	.word	0x08019e10
 80138f0:	08019734 	.word	0x08019734
 80138f4:	08019d08 	.word	0x08019d08

080138f8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b08a      	sub	sp, #40	@ 0x28
 80138fc:	af04      	add	r7, sp, #16
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	60b9      	str	r1, [r7, #8]
 8013902:	607a      	str	r2, [r7, #4]
 8013904:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d106      	bne.n	801391a <tcp_output_control_segment+0x22>
 801390c:	4b1c      	ldr	r3, [pc, #112]	@ (8013980 <tcp_output_control_segment+0x88>)
 801390e:	f240 7287 	movw	r2, #1927	@ 0x787
 8013912:	491c      	ldr	r1, [pc, #112]	@ (8013984 <tcp_output_control_segment+0x8c>)
 8013914:	481c      	ldr	r0, [pc, #112]	@ (8013988 <tcp_output_control_segment+0x90>)
 8013916:	f003 fa0b 	bl	8016d30 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801391a:	683a      	ldr	r2, [r7, #0]
 801391c:	6879      	ldr	r1, [r7, #4]
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	f7fe ff42 	bl	80127a8 <tcp_route>
 8013924:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d102      	bne.n	8013932 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801392c:	23fc      	movs	r3, #252	@ 0xfc
 801392e:	75fb      	strb	r3, [r7, #23]
 8013930:	e01c      	b.n	801396c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d006      	beq.n	8013946 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	7adb      	ldrb	r3, [r3, #11]
 801393c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	7a9b      	ldrb	r3, [r3, #10]
 8013942:	757b      	strb	r3, [r7, #21]
 8013944:	e003      	b.n	801394e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013946:	23ff      	movs	r3, #255	@ 0xff
 8013948:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801394a:	2300      	movs	r3, #0
 801394c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801394e:	7dba      	ldrb	r2, [r7, #22]
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	9302      	str	r3, [sp, #8]
 8013954:	2306      	movs	r3, #6
 8013956:	9301      	str	r3, [sp, #4]
 8013958:	7d7b      	ldrb	r3, [r7, #21]
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	4613      	mov	r3, r2
 801395e:	683a      	ldr	r2, [r7, #0]
 8013960:	6879      	ldr	r1, [r7, #4]
 8013962:	68b8      	ldr	r0, [r7, #8]
 8013964:	f001 ffa0 	bl	80158a8 <ip4_output_if>
 8013968:	4603      	mov	r3, r0
 801396a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801396c:	68b8      	ldr	r0, [r7, #8]
 801396e:	f7fa fddd 	bl	800e52c <pbuf_free>
  return err;
 8013972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013976:	4618      	mov	r0, r3
 8013978:	3718      	adds	r7, #24
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	080196e0 	.word	0x080196e0
 8013984:	08019e38 	.word	0x08019e38
 8013988:	08019734 	.word	0x08019734

0801398c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801398c:	b590      	push	{r4, r7, lr}
 801398e:	b08b      	sub	sp, #44	@ 0x2c
 8013990:	af04      	add	r7, sp, #16
 8013992:	60f8      	str	r0, [r7, #12]
 8013994:	60b9      	str	r1, [r7, #8]
 8013996:	607a      	str	r2, [r7, #4]
 8013998:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d106      	bne.n	80139ae <tcp_rst+0x22>
 80139a0:	4b1f      	ldr	r3, [pc, #124]	@ (8013a20 <tcp_rst+0x94>)
 80139a2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80139a6:	491f      	ldr	r1, [pc, #124]	@ (8013a24 <tcp_rst+0x98>)
 80139a8:	481f      	ldr	r0, [pc, #124]	@ (8013a28 <tcp_rst+0x9c>)
 80139aa:	f003 f9c1 	bl	8016d30 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80139ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d106      	bne.n	80139c2 <tcp_rst+0x36>
 80139b4:	4b1a      	ldr	r3, [pc, #104]	@ (8013a20 <tcp_rst+0x94>)
 80139b6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80139ba:	491c      	ldr	r1, [pc, #112]	@ (8013a2c <tcp_rst+0xa0>)
 80139bc:	481a      	ldr	r0, [pc, #104]	@ (8013a28 <tcp_rst+0x9c>)
 80139be:	f003 f9b7 	bl	8016d30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80139c2:	2300      	movs	r3, #0
 80139c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80139c6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80139ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80139cc:	7dfb      	ldrb	r3, [r7, #23]
 80139ce:	b29c      	uxth	r4, r3
 80139d0:	68b8      	ldr	r0, [r7, #8]
 80139d2:	f7f9 f9d3 	bl	800cd7c <lwip_htonl>
 80139d6:	4602      	mov	r2, r0
 80139d8:	8abb      	ldrh	r3, [r7, #20]
 80139da:	9303      	str	r3, [sp, #12]
 80139dc:	2314      	movs	r3, #20
 80139de:	9302      	str	r3, [sp, #8]
 80139e0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80139e2:	9301      	str	r3, [sp, #4]
 80139e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80139e6:	9300      	str	r3, [sp, #0]
 80139e8:	4613      	mov	r3, r2
 80139ea:	2200      	movs	r2, #0
 80139ec:	4621      	mov	r1, r4
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f7ff fe94 	bl	801371c <tcp_output_alloc_header_common>
 80139f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d00c      	beq.n	8013a16 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80139fc:	7dfb      	ldrb	r3, [r7, #23]
 80139fe:	2200      	movs	r2, #0
 8013a00:	6939      	ldr	r1, [r7, #16]
 8013a02:	68f8      	ldr	r0, [r7, #12]
 8013a04:	f7ff ff3a 	bl	801387c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a0a:	683a      	ldr	r2, [r7, #0]
 8013a0c:	6939      	ldr	r1, [r7, #16]
 8013a0e:	68f8      	ldr	r0, [r7, #12]
 8013a10:	f7ff ff72 	bl	80138f8 <tcp_output_control_segment>
 8013a14:	e000      	b.n	8013a18 <tcp_rst+0x8c>
    return;
 8013a16:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013a18:	371c      	adds	r7, #28
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd90      	pop	{r4, r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	080196e0 	.word	0x080196e0
 8013a24:	08019e64 	.word	0x08019e64
 8013a28:	08019734 	.word	0x08019734
 8013a2c:	08019e80 	.word	0x08019e80

08013a30 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013a30:	b590      	push	{r4, r7, lr}
 8013a32:	b087      	sub	sp, #28
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d106      	bne.n	8013a54 <tcp_send_empty_ack+0x24>
 8013a46:	4b28      	ldr	r3, [pc, #160]	@ (8013ae8 <tcp_send_empty_ack+0xb8>)
 8013a48:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013a4c:	4927      	ldr	r1, [pc, #156]	@ (8013aec <tcp_send_empty_ack+0xbc>)
 8013a4e:	4828      	ldr	r0, [pc, #160]	@ (8013af0 <tcp_send_empty_ack+0xc0>)
 8013a50:	f003 f96e 	bl	8016d30 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013a54:	7dfb      	ldrb	r3, [r7, #23]
 8013a56:	009b      	lsls	r3, r3, #2
 8013a58:	b2db      	uxtb	r3, r3
 8013a5a:	f003 0304 	and.w	r3, r3, #4
 8013a5e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013a60:	7d7b      	ldrb	r3, [r7, #21]
 8013a62:	b29c      	uxth	r4, r3
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7f9 f987 	bl	800cd7c <lwip_htonl>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	2200      	movs	r2, #0
 8013a72:	4621      	mov	r1, r4
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f7ff fec3 	bl	8013800 <tcp_output_alloc_header>
 8013a7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d109      	bne.n	8013a96 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	8b5b      	ldrh	r3, [r3, #26]
 8013a86:	f043 0303 	orr.w	r3, r3, #3
 8013a8a:	b29a      	uxth	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013a90:	f06f 0301 	mvn.w	r3, #1
 8013a94:	e023      	b.n	8013ade <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013a96:	7dbb      	ldrb	r3, [r7, #22]
 8013a98:	7dfa      	ldrb	r2, [r7, #23]
 8013a9a:	6939      	ldr	r1, [r7, #16]
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f7ff feed 	bl	801387c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	3304      	adds	r3, #4
 8013aa8:	6939      	ldr	r1, [r7, #16]
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f7ff ff24 	bl	80138f8 <tcp_output_control_segment>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d007      	beq.n	8013acc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	8b5b      	ldrh	r3, [r3, #26]
 8013ac0:	f043 0303 	orr.w	r3, r3, #3
 8013ac4:	b29a      	uxth	r2, r3
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	835a      	strh	r2, [r3, #26]
 8013aca:	e006      	b.n	8013ada <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	8b5b      	ldrh	r3, [r3, #26]
 8013ad0:	f023 0303 	bic.w	r3, r3, #3
 8013ad4:	b29a      	uxth	r2, r3
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ade:	4618      	mov	r0, r3
 8013ae0:	371c      	adds	r7, #28
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd90      	pop	{r4, r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	080196e0 	.word	0x080196e0
 8013aec:	08019e9c 	.word	0x08019e9c
 8013af0:	08019734 	.word	0x08019734

08013af4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013af4:	b590      	push	{r4, r7, lr}
 8013af6:	b087      	sub	sp, #28
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013afc:	2300      	movs	r3, #0
 8013afe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d106      	bne.n	8013b14 <tcp_keepalive+0x20>
 8013b06:	4b18      	ldr	r3, [pc, #96]	@ (8013b68 <tcp_keepalive+0x74>)
 8013b08:	f640 0224 	movw	r2, #2084	@ 0x824
 8013b0c:	4917      	ldr	r1, [pc, #92]	@ (8013b6c <tcp_keepalive+0x78>)
 8013b0e:	4818      	ldr	r0, [pc, #96]	@ (8013b70 <tcp_keepalive+0x7c>)
 8013b10:	f003 f90e 	bl	8016d30 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013b14:	7dfb      	ldrb	r3, [r7, #23]
 8013b16:	b29c      	uxth	r4, r3
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013b1c:	3b01      	subs	r3, #1
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7f9 f92c 	bl	800cd7c <lwip_htonl>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2200      	movs	r2, #0
 8013b28:	4621      	mov	r1, r4
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7ff fe68 	bl	8013800 <tcp_output_alloc_header>
 8013b30:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d102      	bne.n	8013b3e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013b3c:	e010      	b.n	8013b60 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013b3e:	7dfb      	ldrb	r3, [r7, #23]
 8013b40:	2200      	movs	r2, #0
 8013b42:	6939      	ldr	r1, [r7, #16]
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7ff fe99 	bl	801387c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b4a:	687a      	ldr	r2, [r7, #4]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	6939      	ldr	r1, [r7, #16]
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f7ff fed0 	bl	80138f8 <tcp_output_control_segment>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	371c      	adds	r7, #28
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd90      	pop	{r4, r7, pc}
 8013b68:	080196e0 	.word	0x080196e0
 8013b6c:	08019ebc 	.word	0x08019ebc
 8013b70:	08019734 	.word	0x08019734

08013b74 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013b74:	b590      	push	{r4, r7, lr}
 8013b76:	b08b      	sub	sp, #44	@ 0x2c
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d106      	bne.n	8013b96 <tcp_zero_window_probe+0x22>
 8013b88:	4b4c      	ldr	r3, [pc, #304]	@ (8013cbc <tcp_zero_window_probe+0x148>)
 8013b8a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013b8e:	494c      	ldr	r1, [pc, #304]	@ (8013cc0 <tcp_zero_window_probe+0x14c>)
 8013b90:	484c      	ldr	r0, [pc, #304]	@ (8013cc4 <tcp_zero_window_probe+0x150>)
 8013b92:	f003 f8cd 	bl	8016d30 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b9a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013b9c:	6a3b      	ldr	r3, [r7, #32]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d101      	bne.n	8013ba6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	e086      	b.n	8013cb4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013bac:	2bff      	cmp	r3, #255	@ 0xff
 8013bae:	d007      	beq.n	8013bc0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	b2da      	uxtb	r2, r3
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013bc0:	6a3b      	ldr	r3, [r7, #32]
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	899b      	ldrh	r3, [r3, #12]
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7f9 f8c1 	bl	800cd50 <lwip_htons>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	f003 0301 	and.w	r3, r3, #1
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d005      	beq.n	8013be6 <tcp_zero_window_probe+0x72>
 8013bda:	6a3b      	ldr	r3, [r7, #32]
 8013bdc:	891b      	ldrh	r3, [r3, #8]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d101      	bne.n	8013be6 <tcp_zero_window_probe+0x72>
 8013be2:	2301      	movs	r3, #1
 8013be4:	e000      	b.n	8013be8 <tcp_zero_window_probe+0x74>
 8013be6:	2300      	movs	r3, #0
 8013be8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013bea:	7ffb      	ldrb	r3, [r7, #31]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	bf0c      	ite	eq
 8013bf0:	2301      	moveq	r3, #1
 8013bf2:	2300      	movne	r3, #0
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013bfc:	b299      	uxth	r1, r3
 8013bfe:	6a3b      	ldr	r3, [r7, #32]
 8013c00:	68db      	ldr	r3, [r3, #12]
 8013c02:	685b      	ldr	r3, [r3, #4]
 8013c04:	8bba      	ldrh	r2, [r7, #28]
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f7ff fdfa 	bl	8013800 <tcp_output_alloc_header>
 8013c0c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013c0e:	69bb      	ldr	r3, [r7, #24]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d102      	bne.n	8013c1a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013c14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c18:	e04c      	b.n	8013cb4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013c1a:	69bb      	ldr	r3, [r7, #24]
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013c20:	7ffb      	ldrb	r3, [r7, #31]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d011      	beq.n	8013c4a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	899b      	ldrh	r3, [r3, #12]
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	b21b      	sxth	r3, r3
 8013c2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013c32:	b21c      	sxth	r4, r3
 8013c34:	2011      	movs	r0, #17
 8013c36:	f7f9 f88b 	bl	800cd50 <lwip_htons>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	b21b      	sxth	r3, r3
 8013c3e:	4323      	orrs	r3, r4
 8013c40:	b21b      	sxth	r3, r3
 8013c42:	b29a      	uxth	r2, r3
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	819a      	strh	r2, [r3, #12]
 8013c48:	e010      	b.n	8013c6c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	3314      	adds	r3, #20
 8013c50:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013c52:	6a3b      	ldr	r3, [r7, #32]
 8013c54:	6858      	ldr	r0, [r3, #4]
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	685b      	ldr	r3, [r3, #4]
 8013c5a:	891a      	ldrh	r2, [r3, #8]
 8013c5c:	6a3b      	ldr	r3, [r7, #32]
 8013c5e:	891b      	ldrh	r3, [r3, #8]
 8013c60:	1ad3      	subs	r3, r2, r3
 8013c62:	b29b      	uxth	r3, r3
 8013c64:	2201      	movs	r2, #1
 8013c66:	6939      	ldr	r1, [r7, #16]
 8013c68:	f7fa fe56 	bl	800e918 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013c6c:	6a3b      	ldr	r3, [r7, #32]
 8013c6e:	68db      	ldr	r3, [r3, #12]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f9 f882 	bl	800cd7c <lwip_htonl>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	1ad3      	subs	r3, r2, r3
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	da02      	bge.n	8013c90 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	68fa      	ldr	r2, [r7, #12]
 8013c8e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c94:	2200      	movs	r2, #0
 8013c96:	69b9      	ldr	r1, [r7, #24]
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f7ff fdef 	bl	801387c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	3304      	adds	r3, #4
 8013ca4:	69b9      	ldr	r1, [r7, #24]
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7ff fe26 	bl	80138f8 <tcp_output_control_segment>
 8013cac:	4603      	mov	r3, r0
 8013cae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013cb0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	372c      	adds	r7, #44	@ 0x2c
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd90      	pop	{r4, r7, pc}
 8013cbc:	080196e0 	.word	0x080196e0
 8013cc0:	08019ed8 	.word	0x08019ed8
 8013cc4:	08019734 	.word	0x08019734

08013cc8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013cd0:	f7fa ff10 	bl	800eaf4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8013d00 <tcpip_tcp_timer+0x38>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d103      	bne.n	8013ce4 <tcpip_tcp_timer+0x1c>
 8013cdc:	4b09      	ldr	r3, [pc, #36]	@ (8013d04 <tcpip_tcp_timer+0x3c>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d005      	beq.n	8013cf0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	4908      	ldr	r1, [pc, #32]	@ (8013d08 <tcpip_tcp_timer+0x40>)
 8013ce8:	20fa      	movs	r0, #250	@ 0xfa
 8013cea:	f000 f8f3 	bl	8013ed4 <sys_timeout>
 8013cee:	e003      	b.n	8013cf8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013cf0:	4b06      	ldr	r3, [pc, #24]	@ (8013d0c <tcpip_tcp_timer+0x44>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	601a      	str	r2, [r3, #0]
  }
}
 8013cf6:	bf00      	nop
 8013cf8:	bf00      	nop
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}
 8013d00:	2000c6fc 	.word	0x2000c6fc
 8013d04:	2000c700 	.word	0x2000c700
 8013d08:	08013cc9 	.word	0x08013cc9
 8013d0c:	2000c748 	.word	0x2000c748

08013d10 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013d14:	4b0a      	ldr	r3, [pc, #40]	@ (8013d40 <tcp_timer_needed+0x30>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d10f      	bne.n	8013d3c <tcp_timer_needed+0x2c>
 8013d1c:	4b09      	ldr	r3, [pc, #36]	@ (8013d44 <tcp_timer_needed+0x34>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d103      	bne.n	8013d2c <tcp_timer_needed+0x1c>
 8013d24:	4b08      	ldr	r3, [pc, #32]	@ (8013d48 <tcp_timer_needed+0x38>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d007      	beq.n	8013d3c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013d2c:	4b04      	ldr	r3, [pc, #16]	@ (8013d40 <tcp_timer_needed+0x30>)
 8013d2e:	2201      	movs	r2, #1
 8013d30:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013d32:	2200      	movs	r2, #0
 8013d34:	4905      	ldr	r1, [pc, #20]	@ (8013d4c <tcp_timer_needed+0x3c>)
 8013d36:	20fa      	movs	r0, #250	@ 0xfa
 8013d38:	f000 f8cc 	bl	8013ed4 <sys_timeout>
  }
}
 8013d3c:	bf00      	nop
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	2000c748 	.word	0x2000c748
 8013d44:	2000c6fc 	.word	0x2000c6fc
 8013d48:	2000c700 	.word	0x2000c700
 8013d4c:	08013cc9 	.word	0x08013cc9

08013d50 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b086      	sub	sp, #24
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013d5c:	200a      	movs	r0, #10
 8013d5e:	f7f9 fccb 	bl	800d6f8 <memp_malloc>
 8013d62:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d109      	bne.n	8013d7e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d151      	bne.n	8013e14 <sys_timeout_abs+0xc4>
 8013d70:	4b2a      	ldr	r3, [pc, #168]	@ (8013e1c <sys_timeout_abs+0xcc>)
 8013d72:	22be      	movs	r2, #190	@ 0xbe
 8013d74:	492a      	ldr	r1, [pc, #168]	@ (8013e20 <sys_timeout_abs+0xd0>)
 8013d76:	482b      	ldr	r0, [pc, #172]	@ (8013e24 <sys_timeout_abs+0xd4>)
 8013d78:	f002 ffda 	bl	8016d30 <iprintf>
    return;
 8013d7c:	e04a      	b.n	8013e14 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	2200      	movs	r2, #0
 8013d82:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013d84:	693b      	ldr	r3, [r7, #16]
 8013d86:	68ba      	ldr	r2, [r7, #8]
 8013d88:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	68fa      	ldr	r2, [r7, #12]
 8013d94:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013d96:	4b24      	ldr	r3, [pc, #144]	@ (8013e28 <sys_timeout_abs+0xd8>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d103      	bne.n	8013da6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013d9e:	4a22      	ldr	r2, [pc, #136]	@ (8013e28 <sys_timeout_abs+0xd8>)
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	6013      	str	r3, [r2, #0]
    return;
 8013da4:	e037      	b.n	8013e16 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	685a      	ldr	r2, [r3, #4]
 8013daa:	4b1f      	ldr	r3, [pc, #124]	@ (8013e28 <sys_timeout_abs+0xd8>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	685b      	ldr	r3, [r3, #4]
 8013db0:	1ad3      	subs	r3, r2, r3
 8013db2:	0fdb      	lsrs	r3, r3, #31
 8013db4:	f003 0301 	and.w	r3, r3, #1
 8013db8:	b2db      	uxtb	r3, r3
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d007      	beq.n	8013dce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8013e28 <sys_timeout_abs+0xd8>)
 8013dc0:	681a      	ldr	r2, [r3, #0]
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013dc6:	4a18      	ldr	r2, [pc, #96]	@ (8013e28 <sys_timeout_abs+0xd8>)
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	6013      	str	r3, [r2, #0]
 8013dcc:	e023      	b.n	8013e16 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013dce:	4b16      	ldr	r3, [pc, #88]	@ (8013e28 <sys_timeout_abs+0xd8>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	617b      	str	r3, [r7, #20]
 8013dd4:	e01a      	b.n	8013e0c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d00b      	beq.n	8013df6 <sys_timeout_abs+0xa6>
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	685a      	ldr	r2, [r3, #4]
 8013de2:	697b      	ldr	r3, [r7, #20]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	0fdb      	lsrs	r3, r3, #31
 8013dec:	f003 0301 	and.w	r3, r3, #1
 8013df0:	b2db      	uxtb	r3, r3
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d007      	beq.n	8013e06 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	693a      	ldr	r2, [r7, #16]
 8013e02:	601a      	str	r2, [r3, #0]
        break;
 8013e04:	e007      	b.n	8013e16 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	617b      	str	r3, [r7, #20]
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1e1      	bne.n	8013dd6 <sys_timeout_abs+0x86>
 8013e12:	e000      	b.n	8013e16 <sys_timeout_abs+0xc6>
    return;
 8013e14:	bf00      	nop
      }
    }
  }
}
 8013e16:	3718      	adds	r7, #24
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}
 8013e1c:	08019efc 	.word	0x08019efc
 8013e20:	08019f30 	.word	0x08019f30
 8013e24:	08019f70 	.word	0x08019f70
 8013e28:	2000c740 	.word	0x2000c740

08013e2c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b086      	sub	sp, #24
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	4798      	blx	r3

  now = sys_now();
 8013e3e:	f7f5 faf1 	bl	8009424 <sys_now>
 8013e42:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	4b0f      	ldr	r3, [pc, #60]	@ (8013e88 <lwip_cyclic_timer+0x5c>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	1ad3      	subs	r3, r2, r3
 8013e56:	0fdb      	lsrs	r3, r3, #31
 8013e58:	f003 0301 	and.w	r3, r3, #1
 8013e5c:	b2db      	uxtb	r3, r3
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d009      	beq.n	8013e76 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	681a      	ldr	r2, [r3, #0]
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	4413      	add	r3, r2
 8013e6a:	687a      	ldr	r2, [r7, #4]
 8013e6c:	4907      	ldr	r1, [pc, #28]	@ (8013e8c <lwip_cyclic_timer+0x60>)
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7ff ff6e 	bl	8013d50 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013e74:	e004      	b.n	8013e80 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	4904      	ldr	r1, [pc, #16]	@ (8013e8c <lwip_cyclic_timer+0x60>)
 8013e7a:	68f8      	ldr	r0, [r7, #12]
 8013e7c:	f7ff ff68 	bl	8013d50 <sys_timeout_abs>
}
 8013e80:	bf00      	nop
 8013e82:	3718      	adds	r7, #24
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	2000c744 	.word	0x2000c744
 8013e8c:	08013e2d 	.word	0x08013e2d

08013e90 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013e96:	2301      	movs	r3, #1
 8013e98:	607b      	str	r3, [r7, #4]
 8013e9a:	e00e      	b.n	8013eba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8013ecc <sys_timeouts_init+0x3c>)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	00db      	lsls	r3, r3, #3
 8013ea8:	4a08      	ldr	r2, [pc, #32]	@ (8013ecc <sys_timeouts_init+0x3c>)
 8013eaa:	4413      	add	r3, r2
 8013eac:	461a      	mov	r2, r3
 8013eae:	4908      	ldr	r1, [pc, #32]	@ (8013ed0 <sys_timeouts_init+0x40>)
 8013eb0:	f000 f810 	bl	8013ed4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	607b      	str	r3, [r7, #4]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2b02      	cmp	r3, #2
 8013ebe:	d9ed      	bls.n	8013e9c <sys_timeouts_init+0xc>
  }
}
 8013ec0:	bf00      	nop
 8013ec2:	bf00      	nop
 8013ec4:	3708      	adds	r7, #8
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	0801ab30 	.word	0x0801ab30
 8013ed0:	08013e2d 	.word	0x08013e2d

08013ed4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	60b9      	str	r1, [r7, #8]
 8013ede:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013ee6:	d306      	bcc.n	8013ef6 <sys_timeout+0x22>
 8013ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8013f14 <sys_timeout+0x40>)
 8013eea:	f240 1229 	movw	r2, #297	@ 0x129
 8013eee:	490a      	ldr	r1, [pc, #40]	@ (8013f18 <sys_timeout+0x44>)
 8013ef0:	480a      	ldr	r0, [pc, #40]	@ (8013f1c <sys_timeout+0x48>)
 8013ef2:	f002 ff1d 	bl	8016d30 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013ef6:	f7f5 fa95 	bl	8009424 <sys_now>
 8013efa:	4602      	mov	r2, r0
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	4413      	add	r3, r2
 8013f00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	68b9      	ldr	r1, [r7, #8]
 8013f06:	6978      	ldr	r0, [r7, #20]
 8013f08:	f7ff ff22 	bl	8013d50 <sys_timeout_abs>
#endif
}
 8013f0c:	bf00      	nop
 8013f0e:	3718      	adds	r7, #24
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	08019efc 	.word	0x08019efc
 8013f18:	08019f98 	.word	0x08019f98
 8013f1c:	08019f70 	.word	0x08019f70

08013f20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b084      	sub	sp, #16
 8013f24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013f26:	f7f5 fa7d 	bl	8009424 <sys_now>
 8013f2a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013f2c:	4b17      	ldr	r3, [pc, #92]	@ (8013f8c <sys_check_timeouts+0x6c>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d022      	beq.n	8013f7e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	68fa      	ldr	r2, [r7, #12]
 8013f3e:	1ad3      	subs	r3, r2, r3
 8013f40:	0fdb      	lsrs	r3, r3, #31
 8013f42:	f003 0301 	and.w	r3, r3, #1
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d11a      	bne.n	8013f82 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	4a0e      	ldr	r2, [pc, #56]	@ (8013f8c <sys_check_timeouts+0x6c>)
 8013f52:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	689b      	ldr	r3, [r3, #8]
 8013f58:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	68db      	ldr	r3, [r3, #12]
 8013f5e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	4a0a      	ldr	r2, [pc, #40]	@ (8013f90 <sys_check_timeouts+0x70>)
 8013f66:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013f68:	68b9      	ldr	r1, [r7, #8]
 8013f6a:	200a      	movs	r0, #10
 8013f6c:	f7f9 fc3a 	bl	800d7e4 <memp_free>
    if (handler != NULL) {
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d0da      	beq.n	8013f2c <sys_check_timeouts+0xc>
      handler(arg);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6838      	ldr	r0, [r7, #0]
 8013f7a:	4798      	blx	r3
  do {
 8013f7c:	e7d6      	b.n	8013f2c <sys_check_timeouts+0xc>
      return;
 8013f7e:	bf00      	nop
 8013f80:	e000      	b.n	8013f84 <sys_check_timeouts+0x64>
      return;
 8013f82:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013f84:	3710      	adds	r7, #16
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	2000c740 	.word	0x2000c740
 8013f90:	2000c744 	.word	0x2000c744

08013f94 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013f9a:	4b16      	ldr	r3, [pc, #88]	@ (8013ff4 <sys_timeouts_sleeptime+0x60>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d102      	bne.n	8013fa8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013fa6:	e020      	b.n	8013fea <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013fa8:	f7f5 fa3c 	bl	8009424 <sys_now>
 8013fac:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013fae:	4b11      	ldr	r3, [pc, #68]	@ (8013ff4 <sys_timeouts_sleeptime+0x60>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	685a      	ldr	r2, [r3, #4]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	1ad3      	subs	r3, r2, r3
 8013fb8:	0fdb      	lsrs	r3, r3, #31
 8013fba:	f003 0301 	and.w	r3, r3, #1
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d001      	beq.n	8013fc8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	e010      	b.n	8013fea <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8013ff4 <sys_timeouts_sleeptime+0x60>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	da06      	bge.n	8013fe8 <sys_timeouts_sleeptime+0x54>
 8013fda:	4b07      	ldr	r3, [pc, #28]	@ (8013ff8 <sys_timeouts_sleeptime+0x64>)
 8013fdc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013fe0:	4906      	ldr	r1, [pc, #24]	@ (8013ffc <sys_timeouts_sleeptime+0x68>)
 8013fe2:	4807      	ldr	r0, [pc, #28]	@ (8014000 <sys_timeouts_sleeptime+0x6c>)
 8013fe4:	f002 fea4 	bl	8016d30 <iprintf>
    return ret;
 8013fe8:	683b      	ldr	r3, [r7, #0]
  }
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	2000c740 	.word	0x2000c740
 8013ff8:	08019efc 	.word	0x08019efc
 8013ffc:	08019fd0 	.word	0x08019fd0
 8014000:	08019f70 	.word	0x08019f70

08014004 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014008:	f002 fd92 	bl	8016b30 <rand>
 801400c:	4603      	mov	r3, r0
 801400e:	b29b      	uxth	r3, r3
 8014010:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014014:	b29b      	uxth	r3, r3
 8014016:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801401a:	b29a      	uxth	r2, r3
 801401c:	4b01      	ldr	r3, [pc, #4]	@ (8014024 <udp_init+0x20>)
 801401e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014020:	bf00      	nop
 8014022:	bd80      	pop	{r7, pc}
 8014024:	2000002c 	.word	0x2000002c

08014028 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	60b9      	str	r1, [r7, #8]
 8014032:	4613      	mov	r3, r2
 8014034:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d105      	bne.n	8014048 <udp_input_local_match+0x20>
 801403c:	4b27      	ldr	r3, [pc, #156]	@ (80140dc <udp_input_local_match+0xb4>)
 801403e:	2287      	movs	r2, #135	@ 0x87
 8014040:	4927      	ldr	r1, [pc, #156]	@ (80140e0 <udp_input_local_match+0xb8>)
 8014042:	4828      	ldr	r0, [pc, #160]	@ (80140e4 <udp_input_local_match+0xbc>)
 8014044:	f002 fe74 	bl	8016d30 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d105      	bne.n	801405a <udp_input_local_match+0x32>
 801404e:	4b23      	ldr	r3, [pc, #140]	@ (80140dc <udp_input_local_match+0xb4>)
 8014050:	2288      	movs	r2, #136	@ 0x88
 8014052:	4925      	ldr	r1, [pc, #148]	@ (80140e8 <udp_input_local_match+0xc0>)
 8014054:	4823      	ldr	r0, [pc, #140]	@ (80140e4 <udp_input_local_match+0xbc>)
 8014056:	f002 fe6b 	bl	8016d30 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	7a1b      	ldrb	r3, [r3, #8]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d00b      	beq.n	801407a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	7a1a      	ldrb	r2, [r3, #8]
 8014066:	4b21      	ldr	r3, [pc, #132]	@ (80140ec <udp_input_local_match+0xc4>)
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801406e:	3301      	adds	r3, #1
 8014070:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014072:	429a      	cmp	r2, r3
 8014074:	d001      	beq.n	801407a <udp_input_local_match+0x52>
    return 0;
 8014076:	2300      	movs	r3, #0
 8014078:	e02b      	b.n	80140d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801407a:	79fb      	ldrb	r3, [r7, #7]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d018      	beq.n	80140b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d013      	beq.n	80140ae <udp_input_local_match+0x86>
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00f      	beq.n	80140ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801408e:	4b17      	ldr	r3, [pc, #92]	@ (80140ec <udp_input_local_match+0xc4>)
 8014090:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014096:	d00a      	beq.n	80140ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	681a      	ldr	r2, [r3, #0]
 801409c:	4b13      	ldr	r3, [pc, #76]	@ (80140ec <udp_input_local_match+0xc4>)
 801409e:	695b      	ldr	r3, [r3, #20]
 80140a0:	405a      	eors	r2, r3
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	3308      	adds	r3, #8
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d110      	bne.n	80140d0 <udp_input_local_match+0xa8>
          return 1;
 80140ae:	2301      	movs	r3, #1
 80140b0:	e00f      	b.n	80140d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d009      	beq.n	80140cc <udp_input_local_match+0xa4>
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d005      	beq.n	80140cc <udp_input_local_match+0xa4>
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	681a      	ldr	r2, [r3, #0]
 80140c4:	4b09      	ldr	r3, [pc, #36]	@ (80140ec <udp_input_local_match+0xc4>)
 80140c6:	695b      	ldr	r3, [r3, #20]
 80140c8:	429a      	cmp	r2, r3
 80140ca:	d101      	bne.n	80140d0 <udp_input_local_match+0xa8>
        return 1;
 80140cc:	2301      	movs	r3, #1
 80140ce:	e000      	b.n	80140d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80140d0:	2300      	movs	r3, #0
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	08019fe4 	.word	0x08019fe4
 80140e0:	0801a014 	.word	0x0801a014
 80140e4:	0801a038 	.word	0x0801a038
 80140e8:	0801a060 	.word	0x0801a060
 80140ec:	200095f0 	.word	0x200095f0

080140f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80140f0:	b590      	push	{r4, r7, lr}
 80140f2:	b08d      	sub	sp, #52	@ 0x34
 80140f4:	af02      	add	r7, sp, #8
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80140fa:	2300      	movs	r3, #0
 80140fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d105      	bne.n	8014110 <udp_input+0x20>
 8014104:	4b7c      	ldr	r3, [pc, #496]	@ (80142f8 <udp_input+0x208>)
 8014106:	22cf      	movs	r2, #207	@ 0xcf
 8014108:	497c      	ldr	r1, [pc, #496]	@ (80142fc <udp_input+0x20c>)
 801410a:	487d      	ldr	r0, [pc, #500]	@ (8014300 <udp_input+0x210>)
 801410c:	f002 fe10 	bl	8016d30 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d105      	bne.n	8014122 <udp_input+0x32>
 8014116:	4b78      	ldr	r3, [pc, #480]	@ (80142f8 <udp_input+0x208>)
 8014118:	22d0      	movs	r2, #208	@ 0xd0
 801411a:	497a      	ldr	r1, [pc, #488]	@ (8014304 <udp_input+0x214>)
 801411c:	4878      	ldr	r0, [pc, #480]	@ (8014300 <udp_input+0x210>)
 801411e:	f002 fe07 	bl	8016d30 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	895b      	ldrh	r3, [r3, #10]
 8014126:	2b07      	cmp	r3, #7
 8014128:	d803      	bhi.n	8014132 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7fa f9fe 	bl	800e52c <pbuf_free>
    goto end;
 8014130:	e0de      	b.n	80142f0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014138:	4b73      	ldr	r3, [pc, #460]	@ (8014308 <udp_input+0x218>)
 801413a:	695b      	ldr	r3, [r3, #20]
 801413c:	4a72      	ldr	r2, [pc, #456]	@ (8014308 <udp_input+0x218>)
 801413e:	6812      	ldr	r2, [r2, #0]
 8014140:	4611      	mov	r1, r2
 8014142:	4618      	mov	r0, r3
 8014144:	f001 fc88 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 8014148:	4603      	mov	r3, r0
 801414a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	881b      	ldrh	r3, [r3, #0]
 8014150:	b29b      	uxth	r3, r3
 8014152:	4618      	mov	r0, r3
 8014154:	f7f8 fdfc 	bl	800cd50 <lwip_htons>
 8014158:	4603      	mov	r3, r0
 801415a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	885b      	ldrh	r3, [r3, #2]
 8014160:	b29b      	uxth	r3, r3
 8014162:	4618      	mov	r0, r3
 8014164:	f7f8 fdf4 	bl	800cd50 <lwip_htons>
 8014168:	4603      	mov	r3, r0
 801416a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801416c:	2300      	movs	r3, #0
 801416e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014170:	2300      	movs	r3, #0
 8014172:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014174:	2300      	movs	r3, #0
 8014176:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014178:	4b64      	ldr	r3, [pc, #400]	@ (801430c <udp_input+0x21c>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	627b      	str	r3, [r7, #36]	@ 0x24
 801417e:	e054      	b.n	801422a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014182:	8a5b      	ldrh	r3, [r3, #18]
 8014184:	89fa      	ldrh	r2, [r7, #14]
 8014186:	429a      	cmp	r2, r3
 8014188:	d14a      	bne.n	8014220 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801418a:	7cfb      	ldrb	r3, [r7, #19]
 801418c:	461a      	mov	r2, r3
 801418e:	6839      	ldr	r1, [r7, #0]
 8014190:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014192:	f7ff ff49 	bl	8014028 <udp_input_local_match>
 8014196:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014198:	2b00      	cmp	r3, #0
 801419a:	d041      	beq.n	8014220 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801419e:	7c1b      	ldrb	r3, [r3, #16]
 80141a0:	f003 0304 	and.w	r3, r3, #4
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d11d      	bne.n	80141e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d102      	bne.n	80141b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80141ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b0:	61fb      	str	r3, [r7, #28]
 80141b2:	e017      	b.n	80141e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80141b4:	7cfb      	ldrb	r3, [r7, #19]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d014      	beq.n	80141e4 <udp_input+0xf4>
 80141ba:	4b53      	ldr	r3, [pc, #332]	@ (8014308 <udp_input+0x218>)
 80141bc:	695b      	ldr	r3, [r3, #20]
 80141be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80141c2:	d10f      	bne.n	80141e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80141c4:	69fb      	ldr	r3, [r7, #28]
 80141c6:	681a      	ldr	r2, [r3, #0]
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	3304      	adds	r3, #4
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d008      	beq.n	80141e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80141d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d4:	681a      	ldr	r2, [r3, #0]
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	3304      	adds	r3, #4
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	429a      	cmp	r2, r3
 80141de:	d101      	bne.n	80141e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80141e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80141e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e6:	8a9b      	ldrh	r3, [r3, #20]
 80141e8:	8a3a      	ldrh	r2, [r7, #16]
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d118      	bne.n	8014220 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80141ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d005      	beq.n	8014202 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80141f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f8:	685a      	ldr	r2, [r3, #4]
 80141fa:	4b43      	ldr	r3, [pc, #268]	@ (8014308 <udp_input+0x218>)
 80141fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80141fe:	429a      	cmp	r2, r3
 8014200:	d10e      	bne.n	8014220 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014202:	6a3b      	ldr	r3, [r7, #32]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d014      	beq.n	8014232 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801420a:	68da      	ldr	r2, [r3, #12]
 801420c:	6a3b      	ldr	r3, [r7, #32]
 801420e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014210:	4b3e      	ldr	r3, [pc, #248]	@ (801430c <udp_input+0x21c>)
 8014212:	681a      	ldr	r2, [r3, #0]
 8014214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014216:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014218:	4a3c      	ldr	r2, [pc, #240]	@ (801430c <udp_input+0x21c>)
 801421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801421c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801421e:	e008      	b.n	8014232 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014222:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014226:	68db      	ldr	r3, [r3, #12]
 8014228:	627b      	str	r3, [r7, #36]	@ 0x24
 801422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801422c:	2b00      	cmp	r3, #0
 801422e:	d1a7      	bne.n	8014180 <udp_input+0x90>
 8014230:	e000      	b.n	8014234 <udp_input+0x144>
        break;
 8014232:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014236:	2b00      	cmp	r3, #0
 8014238:	d101      	bne.n	801423e <udp_input+0x14e>
    pcb = uncon_pcb;
 801423a:	69fb      	ldr	r3, [r7, #28]
 801423c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014240:	2b00      	cmp	r3, #0
 8014242:	d002      	beq.n	801424a <udp_input+0x15a>
    for_us = 1;
 8014244:	2301      	movs	r3, #1
 8014246:	76fb      	strb	r3, [r7, #27]
 8014248:	e00a      	b.n	8014260 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	3304      	adds	r3, #4
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	4b2d      	ldr	r3, [pc, #180]	@ (8014308 <udp_input+0x218>)
 8014252:	695b      	ldr	r3, [r3, #20]
 8014254:	429a      	cmp	r2, r3
 8014256:	bf0c      	ite	eq
 8014258:	2301      	moveq	r3, #1
 801425a:	2300      	movne	r3, #0
 801425c:	b2db      	uxtb	r3, r3
 801425e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014260:	7efb      	ldrb	r3, [r7, #27]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d041      	beq.n	80142ea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014266:	2108      	movs	r1, #8
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f7fa f8d9 	bl	800e420 <pbuf_remove_header>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00a      	beq.n	801428a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014274:	4b20      	ldr	r3, [pc, #128]	@ (80142f8 <udp_input+0x208>)
 8014276:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801427a:	4925      	ldr	r1, [pc, #148]	@ (8014310 <udp_input+0x220>)
 801427c:	4820      	ldr	r0, [pc, #128]	@ (8014300 <udp_input+0x210>)
 801427e:	f002 fd57 	bl	8016d30 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f7fa f952 	bl	800e52c <pbuf_free>
      goto end;
 8014288:	e032      	b.n	80142f0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801428c:	2b00      	cmp	r3, #0
 801428e:	d012      	beq.n	80142b6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014292:	699b      	ldr	r3, [r3, #24]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d00a      	beq.n	80142ae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801429a:	699c      	ldr	r4, [r3, #24]
 801429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801429e:	69d8      	ldr	r0, [r3, #28]
 80142a0:	8a3b      	ldrh	r3, [r7, #16]
 80142a2:	9300      	str	r3, [sp, #0]
 80142a4:	4b1b      	ldr	r3, [pc, #108]	@ (8014314 <udp_input+0x224>)
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80142aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80142ac:	e021      	b.n	80142f2 <udp_input+0x202>
        pbuf_free(p);
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f7fa f93c 	bl	800e52c <pbuf_free>
        goto end;
 80142b4:	e01c      	b.n	80142f0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80142b6:	7cfb      	ldrb	r3, [r7, #19]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d112      	bne.n	80142e2 <udp_input+0x1f2>
 80142bc:	4b12      	ldr	r3, [pc, #72]	@ (8014308 <udp_input+0x218>)
 80142be:	695b      	ldr	r3, [r3, #20]
 80142c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80142c4:	2be0      	cmp	r3, #224	@ 0xe0
 80142c6:	d00c      	beq.n	80142e2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80142c8:	4b0f      	ldr	r3, [pc, #60]	@ (8014308 <udp_input+0x218>)
 80142ca:	899b      	ldrh	r3, [r3, #12]
 80142cc:	3308      	adds	r3, #8
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	b21b      	sxth	r3, r3
 80142d2:	4619      	mov	r1, r3
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f7fa f916 	bl	800e506 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80142da:	2103      	movs	r1, #3
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f001 f89b 	bl	8015418 <icmp_dest_unreach>
      pbuf_free(p);
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7fa f922 	bl	800e52c <pbuf_free>
  return;
 80142e8:	e003      	b.n	80142f2 <udp_input+0x202>
    pbuf_free(p);
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f7fa f91e 	bl	800e52c <pbuf_free>
  return;
 80142f0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80142f2:	372c      	adds	r7, #44	@ 0x2c
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd90      	pop	{r4, r7, pc}
 80142f8:	08019fe4 	.word	0x08019fe4
 80142fc:	0801a088 	.word	0x0801a088
 8014300:	0801a038 	.word	0x0801a038
 8014304:	0801a0a0 	.word	0x0801a0a0
 8014308:	200095f0 	.word	0x200095f0
 801430c:	2000c74c 	.word	0x2000c74c
 8014310:	0801a0bc 	.word	0x0801a0bc
 8014314:	20009600 	.word	0x20009600

08014318 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014318:	b480      	push	{r7}
 801431a:	b085      	sub	sp, #20
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d01e      	beq.n	8014366 <udp_netif_ip_addr_changed+0x4e>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d01a      	beq.n	8014366 <udp_netif_ip_addr_changed+0x4e>
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d017      	beq.n	8014366 <udp_netif_ip_addr_changed+0x4e>
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d013      	beq.n	8014366 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801433e:	4b0d      	ldr	r3, [pc, #52]	@ (8014374 <udp_netif_ip_addr_changed+0x5c>)
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	60fb      	str	r3, [r7, #12]
 8014344:	e00c      	b.n	8014360 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	429a      	cmp	r2, r3
 8014350:	d103      	bne.n	801435a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	681a      	ldr	r2, [r3, #0]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	68db      	ldr	r3, [r3, #12]
 801435e:	60fb      	str	r3, [r7, #12]
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d1ef      	bne.n	8014346 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014366:	bf00      	nop
 8014368:	3714      	adds	r7, #20
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr
 8014372:	bf00      	nop
 8014374:	2000c74c 	.word	0x2000c74c

08014378 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014380:	4915      	ldr	r1, [pc, #84]	@ (80143d8 <etharp_free_entry+0x60>)
 8014382:	687a      	ldr	r2, [r7, #4]
 8014384:	4613      	mov	r3, r2
 8014386:	005b      	lsls	r3, r3, #1
 8014388:	4413      	add	r3, r2
 801438a:	00db      	lsls	r3, r3, #3
 801438c:	440b      	add	r3, r1
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d013      	beq.n	80143bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014394:	4910      	ldr	r1, [pc, #64]	@ (80143d8 <etharp_free_entry+0x60>)
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	4613      	mov	r3, r2
 801439a:	005b      	lsls	r3, r3, #1
 801439c:	4413      	add	r3, r2
 801439e:	00db      	lsls	r3, r3, #3
 80143a0:	440b      	add	r3, r1
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7fa f8c1 	bl	800e52c <pbuf_free>
    arp_table[i].q = NULL;
 80143aa:	490b      	ldr	r1, [pc, #44]	@ (80143d8 <etharp_free_entry+0x60>)
 80143ac:	687a      	ldr	r2, [r7, #4]
 80143ae:	4613      	mov	r3, r2
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	4413      	add	r3, r2
 80143b4:	00db      	lsls	r3, r3, #3
 80143b6:	440b      	add	r3, r1
 80143b8:	2200      	movs	r2, #0
 80143ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80143bc:	4906      	ldr	r1, [pc, #24]	@ (80143d8 <etharp_free_entry+0x60>)
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	4613      	mov	r3, r2
 80143c2:	005b      	lsls	r3, r3, #1
 80143c4:	4413      	add	r3, r2
 80143c6:	00db      	lsls	r3, r3, #3
 80143c8:	440b      	add	r3, r1
 80143ca:	3314      	adds	r3, #20
 80143cc:	2200      	movs	r2, #0
 80143ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80143d0:	bf00      	nop
 80143d2:	3708      	adds	r7, #8
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}
 80143d8:	2000c750 	.word	0x2000c750

080143dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b082      	sub	sp, #8
 80143e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143e2:	2300      	movs	r3, #0
 80143e4:	607b      	str	r3, [r7, #4]
 80143e6:	e096      	b.n	8014516 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80143e8:	494f      	ldr	r1, [pc, #316]	@ (8014528 <etharp_tmr+0x14c>)
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	4613      	mov	r3, r2
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	4413      	add	r3, r2
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	440b      	add	r3, r1
 80143f6:	3314      	adds	r3, #20
 80143f8:	781b      	ldrb	r3, [r3, #0]
 80143fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80143fc:	78fb      	ldrb	r3, [r7, #3]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	f000 8086 	beq.w	8014510 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014404:	4948      	ldr	r1, [pc, #288]	@ (8014528 <etharp_tmr+0x14c>)
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	4613      	mov	r3, r2
 801440a:	005b      	lsls	r3, r3, #1
 801440c:	4413      	add	r3, r2
 801440e:	00db      	lsls	r3, r3, #3
 8014410:	440b      	add	r3, r1
 8014412:	3312      	adds	r3, #18
 8014414:	881b      	ldrh	r3, [r3, #0]
 8014416:	3301      	adds	r3, #1
 8014418:	b298      	uxth	r0, r3
 801441a:	4943      	ldr	r1, [pc, #268]	@ (8014528 <etharp_tmr+0x14c>)
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	4613      	mov	r3, r2
 8014420:	005b      	lsls	r3, r3, #1
 8014422:	4413      	add	r3, r2
 8014424:	00db      	lsls	r3, r3, #3
 8014426:	440b      	add	r3, r1
 8014428:	3312      	adds	r3, #18
 801442a:	4602      	mov	r2, r0
 801442c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801442e:	493e      	ldr	r1, [pc, #248]	@ (8014528 <etharp_tmr+0x14c>)
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	4613      	mov	r3, r2
 8014434:	005b      	lsls	r3, r3, #1
 8014436:	4413      	add	r3, r2
 8014438:	00db      	lsls	r3, r3, #3
 801443a:	440b      	add	r3, r1
 801443c:	3312      	adds	r3, #18
 801443e:	881b      	ldrh	r3, [r3, #0]
 8014440:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8014444:	d215      	bcs.n	8014472 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014446:	4938      	ldr	r1, [pc, #224]	@ (8014528 <etharp_tmr+0x14c>)
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	4613      	mov	r3, r2
 801444c:	005b      	lsls	r3, r3, #1
 801444e:	4413      	add	r3, r2
 8014450:	00db      	lsls	r3, r3, #3
 8014452:	440b      	add	r3, r1
 8014454:	3314      	adds	r3, #20
 8014456:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014458:	2b01      	cmp	r3, #1
 801445a:	d10e      	bne.n	801447a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801445c:	4932      	ldr	r1, [pc, #200]	@ (8014528 <etharp_tmr+0x14c>)
 801445e:	687a      	ldr	r2, [r7, #4]
 8014460:	4613      	mov	r3, r2
 8014462:	005b      	lsls	r3, r3, #1
 8014464:	4413      	add	r3, r2
 8014466:	00db      	lsls	r3, r3, #3
 8014468:	440b      	add	r3, r1
 801446a:	3312      	adds	r3, #18
 801446c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801446e:	2b04      	cmp	r3, #4
 8014470:	d903      	bls.n	801447a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f7ff ff80 	bl	8014378 <etharp_free_entry>
 8014478:	e04a      	b.n	8014510 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801447a:	492b      	ldr	r1, [pc, #172]	@ (8014528 <etharp_tmr+0x14c>)
 801447c:	687a      	ldr	r2, [r7, #4]
 801447e:	4613      	mov	r3, r2
 8014480:	005b      	lsls	r3, r3, #1
 8014482:	4413      	add	r3, r2
 8014484:	00db      	lsls	r3, r3, #3
 8014486:	440b      	add	r3, r1
 8014488:	3314      	adds	r3, #20
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	2b03      	cmp	r3, #3
 801448e:	d10a      	bne.n	80144a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014490:	4925      	ldr	r1, [pc, #148]	@ (8014528 <etharp_tmr+0x14c>)
 8014492:	687a      	ldr	r2, [r7, #4]
 8014494:	4613      	mov	r3, r2
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	4413      	add	r3, r2
 801449a:	00db      	lsls	r3, r3, #3
 801449c:	440b      	add	r3, r1
 801449e:	3314      	adds	r3, #20
 80144a0:	2204      	movs	r2, #4
 80144a2:	701a      	strb	r2, [r3, #0]
 80144a4:	e034      	b.n	8014510 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80144a6:	4920      	ldr	r1, [pc, #128]	@ (8014528 <etharp_tmr+0x14c>)
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	4613      	mov	r3, r2
 80144ac:	005b      	lsls	r3, r3, #1
 80144ae:	4413      	add	r3, r2
 80144b0:	00db      	lsls	r3, r3, #3
 80144b2:	440b      	add	r3, r1
 80144b4:	3314      	adds	r3, #20
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	2b04      	cmp	r3, #4
 80144ba:	d10a      	bne.n	80144d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80144bc:	491a      	ldr	r1, [pc, #104]	@ (8014528 <etharp_tmr+0x14c>)
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	4613      	mov	r3, r2
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	4413      	add	r3, r2
 80144c6:	00db      	lsls	r3, r3, #3
 80144c8:	440b      	add	r3, r1
 80144ca:	3314      	adds	r3, #20
 80144cc:	2202      	movs	r2, #2
 80144ce:	701a      	strb	r2, [r3, #0]
 80144d0:	e01e      	b.n	8014510 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80144d2:	4915      	ldr	r1, [pc, #84]	@ (8014528 <etharp_tmr+0x14c>)
 80144d4:	687a      	ldr	r2, [r7, #4]
 80144d6:	4613      	mov	r3, r2
 80144d8:	005b      	lsls	r3, r3, #1
 80144da:	4413      	add	r3, r2
 80144dc:	00db      	lsls	r3, r3, #3
 80144de:	440b      	add	r3, r1
 80144e0:	3314      	adds	r3, #20
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d113      	bne.n	8014510 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80144e8:	490f      	ldr	r1, [pc, #60]	@ (8014528 <etharp_tmr+0x14c>)
 80144ea:	687a      	ldr	r2, [r7, #4]
 80144ec:	4613      	mov	r3, r2
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	4413      	add	r3, r2
 80144f2:	00db      	lsls	r3, r3, #3
 80144f4:	440b      	add	r3, r1
 80144f6:	3308      	adds	r3, #8
 80144f8:	6818      	ldr	r0, [r3, #0]
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	4613      	mov	r3, r2
 80144fe:	005b      	lsls	r3, r3, #1
 8014500:	4413      	add	r3, r2
 8014502:	00db      	lsls	r3, r3, #3
 8014504:	4a08      	ldr	r2, [pc, #32]	@ (8014528 <etharp_tmr+0x14c>)
 8014506:	4413      	add	r3, r2
 8014508:	3304      	adds	r3, #4
 801450a:	4619      	mov	r1, r3
 801450c:	f000 fe6e 	bl	80151ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	3301      	adds	r3, #1
 8014514:	607b      	str	r3, [r7, #4]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2b09      	cmp	r3, #9
 801451a:	f77f af65 	ble.w	80143e8 <etharp_tmr+0xc>
      }
    }
  }
}
 801451e:	bf00      	nop
 8014520:	bf00      	nop
 8014522:	3708      	adds	r7, #8
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	2000c750 	.word	0x2000c750

0801452c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b08a      	sub	sp, #40	@ 0x28
 8014530:	af00      	add	r7, sp, #0
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	460b      	mov	r3, r1
 8014536:	607a      	str	r2, [r7, #4]
 8014538:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801453a:	230a      	movs	r3, #10
 801453c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801453e:	230a      	movs	r3, #10
 8014540:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014542:	230a      	movs	r3, #10
 8014544:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014546:	2300      	movs	r3, #0
 8014548:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801454a:	230a      	movs	r3, #10
 801454c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801454e:	2300      	movs	r3, #0
 8014550:	83bb      	strh	r3, [r7, #28]
 8014552:	2300      	movs	r3, #0
 8014554:	837b      	strh	r3, [r7, #26]
 8014556:	2300      	movs	r3, #0
 8014558:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801455a:	2300      	movs	r3, #0
 801455c:	843b      	strh	r3, [r7, #32]
 801455e:	e0ae      	b.n	80146be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014560:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014564:	49a6      	ldr	r1, [pc, #664]	@ (8014800 <etharp_find_entry+0x2d4>)
 8014566:	4613      	mov	r3, r2
 8014568:	005b      	lsls	r3, r3, #1
 801456a:	4413      	add	r3, r2
 801456c:	00db      	lsls	r3, r3, #3
 801456e:	440b      	add	r3, r1
 8014570:	3314      	adds	r3, #20
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014576:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801457a:	2b0a      	cmp	r3, #10
 801457c:	d105      	bne.n	801458a <etharp_find_entry+0x5e>
 801457e:	7dfb      	ldrb	r3, [r7, #23]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d102      	bne.n	801458a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014584:	8c3b      	ldrh	r3, [r7, #32]
 8014586:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014588:	e095      	b.n	80146b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801458a:	7dfb      	ldrb	r3, [r7, #23]
 801458c:	2b00      	cmp	r3, #0
 801458e:	f000 8092 	beq.w	80146b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014592:	7dfb      	ldrb	r3, [r7, #23]
 8014594:	2b01      	cmp	r3, #1
 8014596:	d009      	beq.n	80145ac <etharp_find_entry+0x80>
 8014598:	7dfb      	ldrb	r3, [r7, #23]
 801459a:	2b01      	cmp	r3, #1
 801459c:	d806      	bhi.n	80145ac <etharp_find_entry+0x80>
 801459e:	4b99      	ldr	r3, [pc, #612]	@ (8014804 <etharp_find_entry+0x2d8>)
 80145a0:	f240 1223 	movw	r2, #291	@ 0x123
 80145a4:	4998      	ldr	r1, [pc, #608]	@ (8014808 <etharp_find_entry+0x2dc>)
 80145a6:	4899      	ldr	r0, [pc, #612]	@ (801480c <etharp_find_entry+0x2e0>)
 80145a8:	f002 fbc2 	bl	8016d30 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d020      	beq.n	80145f4 <etharp_find_entry+0xc8>
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	6819      	ldr	r1, [r3, #0]
 80145b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145ba:	4891      	ldr	r0, [pc, #580]	@ (8014800 <etharp_find_entry+0x2d4>)
 80145bc:	4613      	mov	r3, r2
 80145be:	005b      	lsls	r3, r3, #1
 80145c0:	4413      	add	r3, r2
 80145c2:	00db      	lsls	r3, r3, #3
 80145c4:	4403      	add	r3, r0
 80145c6:	3304      	adds	r3, #4
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4299      	cmp	r1, r3
 80145cc:	d112      	bne.n	80145f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d00c      	beq.n	80145ee <etharp_find_entry+0xc2>
 80145d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145d8:	4989      	ldr	r1, [pc, #548]	@ (8014800 <etharp_find_entry+0x2d4>)
 80145da:	4613      	mov	r3, r2
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	4413      	add	r3, r2
 80145e0:	00db      	lsls	r3, r3, #3
 80145e2:	440b      	add	r3, r1
 80145e4:	3308      	adds	r3, #8
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	687a      	ldr	r2, [r7, #4]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d102      	bne.n	80145f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80145ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145f2:	e100      	b.n	80147f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80145f4:	7dfb      	ldrb	r3, [r7, #23]
 80145f6:	2b01      	cmp	r3, #1
 80145f8:	d140      	bne.n	801467c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80145fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145fe:	4980      	ldr	r1, [pc, #512]	@ (8014800 <etharp_find_entry+0x2d4>)
 8014600:	4613      	mov	r3, r2
 8014602:	005b      	lsls	r3, r3, #1
 8014604:	4413      	add	r3, r2
 8014606:	00db      	lsls	r3, r3, #3
 8014608:	440b      	add	r3, r1
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d01a      	beq.n	8014646 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014610:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014614:	497a      	ldr	r1, [pc, #488]	@ (8014800 <etharp_find_entry+0x2d4>)
 8014616:	4613      	mov	r3, r2
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	4413      	add	r3, r2
 801461c:	00db      	lsls	r3, r3, #3
 801461e:	440b      	add	r3, r1
 8014620:	3312      	adds	r3, #18
 8014622:	881b      	ldrh	r3, [r3, #0]
 8014624:	8bba      	ldrh	r2, [r7, #28]
 8014626:	429a      	cmp	r2, r3
 8014628:	d845      	bhi.n	80146b6 <etharp_find_entry+0x18a>
            old_queue = i;
 801462a:	8c3b      	ldrh	r3, [r7, #32]
 801462c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801462e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014632:	4973      	ldr	r1, [pc, #460]	@ (8014800 <etharp_find_entry+0x2d4>)
 8014634:	4613      	mov	r3, r2
 8014636:	005b      	lsls	r3, r3, #1
 8014638:	4413      	add	r3, r2
 801463a:	00db      	lsls	r3, r3, #3
 801463c:	440b      	add	r3, r1
 801463e:	3312      	adds	r3, #18
 8014640:	881b      	ldrh	r3, [r3, #0]
 8014642:	83bb      	strh	r3, [r7, #28]
 8014644:	e037      	b.n	80146b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014646:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801464a:	496d      	ldr	r1, [pc, #436]	@ (8014800 <etharp_find_entry+0x2d4>)
 801464c:	4613      	mov	r3, r2
 801464e:	005b      	lsls	r3, r3, #1
 8014650:	4413      	add	r3, r2
 8014652:	00db      	lsls	r3, r3, #3
 8014654:	440b      	add	r3, r1
 8014656:	3312      	adds	r3, #18
 8014658:	881b      	ldrh	r3, [r3, #0]
 801465a:	8b7a      	ldrh	r2, [r7, #26]
 801465c:	429a      	cmp	r2, r3
 801465e:	d82a      	bhi.n	80146b6 <etharp_find_entry+0x18a>
            old_pending = i;
 8014660:	8c3b      	ldrh	r3, [r7, #32]
 8014662:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014664:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014668:	4965      	ldr	r1, [pc, #404]	@ (8014800 <etharp_find_entry+0x2d4>)
 801466a:	4613      	mov	r3, r2
 801466c:	005b      	lsls	r3, r3, #1
 801466e:	4413      	add	r3, r2
 8014670:	00db      	lsls	r3, r3, #3
 8014672:	440b      	add	r3, r1
 8014674:	3312      	adds	r3, #18
 8014676:	881b      	ldrh	r3, [r3, #0]
 8014678:	837b      	strh	r3, [r7, #26]
 801467a:	e01c      	b.n	80146b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801467c:	7dfb      	ldrb	r3, [r7, #23]
 801467e:	2b01      	cmp	r3, #1
 8014680:	d919      	bls.n	80146b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014682:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014686:	495e      	ldr	r1, [pc, #376]	@ (8014800 <etharp_find_entry+0x2d4>)
 8014688:	4613      	mov	r3, r2
 801468a:	005b      	lsls	r3, r3, #1
 801468c:	4413      	add	r3, r2
 801468e:	00db      	lsls	r3, r3, #3
 8014690:	440b      	add	r3, r1
 8014692:	3312      	adds	r3, #18
 8014694:	881b      	ldrh	r3, [r3, #0]
 8014696:	8b3a      	ldrh	r2, [r7, #24]
 8014698:	429a      	cmp	r2, r3
 801469a:	d80c      	bhi.n	80146b6 <etharp_find_entry+0x18a>
            old_stable = i;
 801469c:	8c3b      	ldrh	r3, [r7, #32]
 801469e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80146a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146a4:	4956      	ldr	r1, [pc, #344]	@ (8014800 <etharp_find_entry+0x2d4>)
 80146a6:	4613      	mov	r3, r2
 80146a8:	005b      	lsls	r3, r3, #1
 80146aa:	4413      	add	r3, r2
 80146ac:	00db      	lsls	r3, r3, #3
 80146ae:	440b      	add	r3, r1
 80146b0:	3312      	adds	r3, #18
 80146b2:	881b      	ldrh	r3, [r3, #0]
 80146b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146b6:	8c3b      	ldrh	r3, [r7, #32]
 80146b8:	3301      	adds	r3, #1
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	843b      	strh	r3, [r7, #32]
 80146be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80146c2:	2b09      	cmp	r3, #9
 80146c4:	f77f af4c 	ble.w	8014560 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80146c8:	7afb      	ldrb	r3, [r7, #11]
 80146ca:	f003 0302 	and.w	r3, r3, #2
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d108      	bne.n	80146e4 <etharp_find_entry+0x1b8>
 80146d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80146d6:	2b0a      	cmp	r3, #10
 80146d8:	d107      	bne.n	80146ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80146da:	7afb      	ldrb	r3, [r7, #11]
 80146dc:	f003 0301 	and.w	r3, r3, #1
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d102      	bne.n	80146ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80146e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80146e8:	e085      	b.n	80147f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80146ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80146ee:	2b09      	cmp	r3, #9
 80146f0:	dc02      	bgt.n	80146f8 <etharp_find_entry+0x1cc>
    i = empty;
 80146f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146f4:	843b      	strh	r3, [r7, #32]
 80146f6:	e039      	b.n	801476c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80146f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80146fc:	2b09      	cmp	r3, #9
 80146fe:	dc14      	bgt.n	801472a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014702:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014704:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014708:	493d      	ldr	r1, [pc, #244]	@ (8014800 <etharp_find_entry+0x2d4>)
 801470a:	4613      	mov	r3, r2
 801470c:	005b      	lsls	r3, r3, #1
 801470e:	4413      	add	r3, r2
 8014710:	00db      	lsls	r3, r3, #3
 8014712:	440b      	add	r3, r1
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d018      	beq.n	801474c <etharp_find_entry+0x220>
 801471a:	4b3a      	ldr	r3, [pc, #232]	@ (8014804 <etharp_find_entry+0x2d8>)
 801471c:	f240 126d 	movw	r2, #365	@ 0x16d
 8014720:	493b      	ldr	r1, [pc, #236]	@ (8014810 <etharp_find_entry+0x2e4>)
 8014722:	483a      	ldr	r0, [pc, #232]	@ (801480c <etharp_find_entry+0x2e0>)
 8014724:	f002 fb04 	bl	8016d30 <iprintf>
 8014728:	e010      	b.n	801474c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801472a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801472e:	2b09      	cmp	r3, #9
 8014730:	dc02      	bgt.n	8014738 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014732:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014734:	843b      	strh	r3, [r7, #32]
 8014736:	e009      	b.n	801474c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014738:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801473c:	2b09      	cmp	r3, #9
 801473e:	dc02      	bgt.n	8014746 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014740:	8bfb      	ldrh	r3, [r7, #30]
 8014742:	843b      	strh	r3, [r7, #32]
 8014744:	e002      	b.n	801474c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014746:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801474a:	e054      	b.n	80147f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801474c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014750:	2b09      	cmp	r3, #9
 8014752:	dd06      	ble.n	8014762 <etharp_find_entry+0x236>
 8014754:	4b2b      	ldr	r3, [pc, #172]	@ (8014804 <etharp_find_entry+0x2d8>)
 8014756:	f240 127f 	movw	r2, #383	@ 0x17f
 801475a:	492e      	ldr	r1, [pc, #184]	@ (8014814 <etharp_find_entry+0x2e8>)
 801475c:	482b      	ldr	r0, [pc, #172]	@ (801480c <etharp_find_entry+0x2e0>)
 801475e:	f002 fae7 	bl	8016d30 <iprintf>
    etharp_free_entry(i);
 8014762:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014766:	4618      	mov	r0, r3
 8014768:	f7ff fe06 	bl	8014378 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801476c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014770:	2b09      	cmp	r3, #9
 8014772:	dd06      	ble.n	8014782 <etharp_find_entry+0x256>
 8014774:	4b23      	ldr	r3, [pc, #140]	@ (8014804 <etharp_find_entry+0x2d8>)
 8014776:	f240 1283 	movw	r2, #387	@ 0x183
 801477a:	4926      	ldr	r1, [pc, #152]	@ (8014814 <etharp_find_entry+0x2e8>)
 801477c:	4823      	ldr	r0, [pc, #140]	@ (801480c <etharp_find_entry+0x2e0>)
 801477e:	f002 fad7 	bl	8016d30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014782:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014786:	491e      	ldr	r1, [pc, #120]	@ (8014800 <etharp_find_entry+0x2d4>)
 8014788:	4613      	mov	r3, r2
 801478a:	005b      	lsls	r3, r3, #1
 801478c:	4413      	add	r3, r2
 801478e:	00db      	lsls	r3, r3, #3
 8014790:	440b      	add	r3, r1
 8014792:	3314      	adds	r3, #20
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d006      	beq.n	80147a8 <etharp_find_entry+0x27c>
 801479a:	4b1a      	ldr	r3, [pc, #104]	@ (8014804 <etharp_find_entry+0x2d8>)
 801479c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80147a0:	491d      	ldr	r1, [pc, #116]	@ (8014818 <etharp_find_entry+0x2ec>)
 80147a2:	481a      	ldr	r0, [pc, #104]	@ (801480c <etharp_find_entry+0x2e0>)
 80147a4:	f002 fac4 	bl	8016d30 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d00b      	beq.n	80147c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80147ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	6819      	ldr	r1, [r3, #0]
 80147b6:	4812      	ldr	r0, [pc, #72]	@ (8014800 <etharp_find_entry+0x2d4>)
 80147b8:	4613      	mov	r3, r2
 80147ba:	005b      	lsls	r3, r3, #1
 80147bc:	4413      	add	r3, r2
 80147be:	00db      	lsls	r3, r3, #3
 80147c0:	4403      	add	r3, r0
 80147c2:	3304      	adds	r3, #4
 80147c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80147c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147ca:	490d      	ldr	r1, [pc, #52]	@ (8014800 <etharp_find_entry+0x2d4>)
 80147cc:	4613      	mov	r3, r2
 80147ce:	005b      	lsls	r3, r3, #1
 80147d0:	4413      	add	r3, r2
 80147d2:	00db      	lsls	r3, r3, #3
 80147d4:	440b      	add	r3, r1
 80147d6:	3312      	adds	r3, #18
 80147d8:	2200      	movs	r2, #0
 80147da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80147dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147e0:	4907      	ldr	r1, [pc, #28]	@ (8014800 <etharp_find_entry+0x2d4>)
 80147e2:	4613      	mov	r3, r2
 80147e4:	005b      	lsls	r3, r3, #1
 80147e6:	4413      	add	r3, r2
 80147e8:	00db      	lsls	r3, r3, #3
 80147ea:	440b      	add	r3, r1
 80147ec:	3308      	adds	r3, #8
 80147ee:	687a      	ldr	r2, [r7, #4]
 80147f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80147f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3728      	adds	r7, #40	@ 0x28
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	2000c750 	.word	0x2000c750
 8014804:	0801a348 	.word	0x0801a348
 8014808:	0801a380 	.word	0x0801a380
 801480c:	0801a3c0 	.word	0x0801a3c0
 8014810:	0801a3e8 	.word	0x0801a3e8
 8014814:	0801a400 	.word	0x0801a400
 8014818:	0801a414 	.word	0x0801a414

0801481c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b088      	sub	sp, #32
 8014820:	af02      	add	r7, sp, #8
 8014822:	60f8      	str	r0, [r7, #12]
 8014824:	60b9      	str	r1, [r7, #8]
 8014826:	607a      	str	r2, [r7, #4]
 8014828:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014830:	2b06      	cmp	r3, #6
 8014832:	d006      	beq.n	8014842 <etharp_update_arp_entry+0x26>
 8014834:	4b48      	ldr	r3, [pc, #288]	@ (8014958 <etharp_update_arp_entry+0x13c>)
 8014836:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801483a:	4948      	ldr	r1, [pc, #288]	@ (801495c <etharp_update_arp_entry+0x140>)
 801483c:	4848      	ldr	r0, [pc, #288]	@ (8014960 <etharp_update_arp_entry+0x144>)
 801483e:	f002 fa77 	bl	8016d30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d012      	beq.n	801486e <etharp_update_arp_entry+0x52>
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d00e      	beq.n	801486e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	68f9      	ldr	r1, [r7, #12]
 8014856:	4618      	mov	r0, r3
 8014858:	f001 f8fe 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 801485c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801485e:	2b00      	cmp	r3, #0
 8014860:	d105      	bne.n	801486e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801486a:	2be0      	cmp	r3, #224	@ 0xe0
 801486c:	d102      	bne.n	8014874 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801486e:	f06f 030f 	mvn.w	r3, #15
 8014872:	e06c      	b.n	801494e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014874:	78fb      	ldrb	r3, [r7, #3]
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	4619      	mov	r1, r3
 801487a:	68b8      	ldr	r0, [r7, #8]
 801487c:	f7ff fe56 	bl	801452c <etharp_find_entry>
 8014880:	4603      	mov	r3, r0
 8014882:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014884:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014888:	2b00      	cmp	r3, #0
 801488a:	da02      	bge.n	8014892 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801488c:	8afb      	ldrh	r3, [r7, #22]
 801488e:	b25b      	sxtb	r3, r3
 8014890:	e05d      	b.n	801494e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014892:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014896:	4933      	ldr	r1, [pc, #204]	@ (8014964 <etharp_update_arp_entry+0x148>)
 8014898:	4613      	mov	r3, r2
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	4413      	add	r3, r2
 801489e:	00db      	lsls	r3, r3, #3
 80148a0:	440b      	add	r3, r1
 80148a2:	3314      	adds	r3, #20
 80148a4:	2202      	movs	r2, #2
 80148a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80148a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148ac:	492d      	ldr	r1, [pc, #180]	@ (8014964 <etharp_update_arp_entry+0x148>)
 80148ae:	4613      	mov	r3, r2
 80148b0:	005b      	lsls	r3, r3, #1
 80148b2:	4413      	add	r3, r2
 80148b4:	00db      	lsls	r3, r3, #3
 80148b6:	440b      	add	r3, r1
 80148b8:	3308      	adds	r3, #8
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80148be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148c2:	4613      	mov	r3, r2
 80148c4:	005b      	lsls	r3, r3, #1
 80148c6:	4413      	add	r3, r2
 80148c8:	00db      	lsls	r3, r3, #3
 80148ca:	3308      	adds	r3, #8
 80148cc:	4a25      	ldr	r2, [pc, #148]	@ (8014964 <etharp_update_arp_entry+0x148>)
 80148ce:	4413      	add	r3, r2
 80148d0:	3304      	adds	r3, #4
 80148d2:	2206      	movs	r2, #6
 80148d4:	6879      	ldr	r1, [r7, #4]
 80148d6:	4618      	mov	r0, r3
 80148d8:	f002 fc55 	bl	8017186 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80148dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148e0:	4920      	ldr	r1, [pc, #128]	@ (8014964 <etharp_update_arp_entry+0x148>)
 80148e2:	4613      	mov	r3, r2
 80148e4:	005b      	lsls	r3, r3, #1
 80148e6:	4413      	add	r3, r2
 80148e8:	00db      	lsls	r3, r3, #3
 80148ea:	440b      	add	r3, r1
 80148ec:	3312      	adds	r3, #18
 80148ee:	2200      	movs	r2, #0
 80148f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80148f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148f6:	491b      	ldr	r1, [pc, #108]	@ (8014964 <etharp_update_arp_entry+0x148>)
 80148f8:	4613      	mov	r3, r2
 80148fa:	005b      	lsls	r3, r3, #1
 80148fc:	4413      	add	r3, r2
 80148fe:	00db      	lsls	r3, r3, #3
 8014900:	440b      	add	r3, r1
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d021      	beq.n	801494c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014908:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801490c:	4915      	ldr	r1, [pc, #84]	@ (8014964 <etharp_update_arp_entry+0x148>)
 801490e:	4613      	mov	r3, r2
 8014910:	005b      	lsls	r3, r3, #1
 8014912:	4413      	add	r3, r2
 8014914:	00db      	lsls	r3, r3, #3
 8014916:	440b      	add	r3, r1
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801491c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014920:	4910      	ldr	r1, [pc, #64]	@ (8014964 <etharp_update_arp_entry+0x148>)
 8014922:	4613      	mov	r3, r2
 8014924:	005b      	lsls	r3, r3, #1
 8014926:	4413      	add	r3, r2
 8014928:	00db      	lsls	r3, r3, #3
 801492a:	440b      	add	r3, r1
 801492c:	2200      	movs	r2, #0
 801492e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014936:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801493a:	9300      	str	r3, [sp, #0]
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6939      	ldr	r1, [r7, #16]
 8014940:	68f8      	ldr	r0, [r7, #12]
 8014942:	f001 ff97 	bl	8016874 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014946:	6938      	ldr	r0, [r7, #16]
 8014948:	f7f9 fdf0 	bl	800e52c <pbuf_free>
  }
  return ERR_OK;
 801494c:	2300      	movs	r3, #0
}
 801494e:	4618      	mov	r0, r3
 8014950:	3718      	adds	r7, #24
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	0801a348 	.word	0x0801a348
 801495c:	0801a440 	.word	0x0801a440
 8014960:	0801a3c0 	.word	0x0801a3c0
 8014964:	2000c750 	.word	0x2000c750

08014968 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b084      	sub	sp, #16
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014970:	2300      	movs	r3, #0
 8014972:	60fb      	str	r3, [r7, #12]
 8014974:	e01e      	b.n	80149b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014976:	4913      	ldr	r1, [pc, #76]	@ (80149c4 <etharp_cleanup_netif+0x5c>)
 8014978:	68fa      	ldr	r2, [r7, #12]
 801497a:	4613      	mov	r3, r2
 801497c:	005b      	lsls	r3, r3, #1
 801497e:	4413      	add	r3, r2
 8014980:	00db      	lsls	r3, r3, #3
 8014982:	440b      	add	r3, r1
 8014984:	3314      	adds	r3, #20
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801498a:	7afb      	ldrb	r3, [r7, #11]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d00e      	beq.n	80149ae <etharp_cleanup_netif+0x46>
 8014990:	490c      	ldr	r1, [pc, #48]	@ (80149c4 <etharp_cleanup_netif+0x5c>)
 8014992:	68fa      	ldr	r2, [r7, #12]
 8014994:	4613      	mov	r3, r2
 8014996:	005b      	lsls	r3, r3, #1
 8014998:	4413      	add	r3, r2
 801499a:	00db      	lsls	r3, r3, #3
 801499c:	440b      	add	r3, r1
 801499e:	3308      	adds	r3, #8
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d102      	bne.n	80149ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f7ff fce5 	bl	8014378 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	3301      	adds	r3, #1
 80149b2:	60fb      	str	r3, [r7, #12]
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2b09      	cmp	r3, #9
 80149b8:	dddd      	ble.n	8014976 <etharp_cleanup_netif+0xe>
    }
  }
}
 80149ba:	bf00      	nop
 80149bc:	bf00      	nop
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	2000c750 	.word	0x2000c750

080149c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80149c8:	b5b0      	push	{r4, r5, r7, lr}
 80149ca:	b08a      	sub	sp, #40	@ 0x28
 80149cc:	af04      	add	r7, sp, #16
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d107      	bne.n	80149e8 <etharp_input+0x20>
 80149d8:	4b3d      	ldr	r3, [pc, #244]	@ (8014ad0 <etharp_input+0x108>)
 80149da:	f240 228a 	movw	r2, #650	@ 0x28a
 80149de:	493d      	ldr	r1, [pc, #244]	@ (8014ad4 <etharp_input+0x10c>)
 80149e0:	483d      	ldr	r0, [pc, #244]	@ (8014ad8 <etharp_input+0x110>)
 80149e2:	f002 f9a5 	bl	8016d30 <iprintf>
 80149e6:	e06f      	b.n	8014ac8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	685b      	ldr	r3, [r3, #4]
 80149ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	881b      	ldrh	r3, [r3, #0]
 80149f2:	b29b      	uxth	r3, r3
 80149f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80149f8:	d10c      	bne.n	8014a14 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149fe:	2b06      	cmp	r3, #6
 8014a00:	d108      	bne.n	8014a14 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014a06:	2b04      	cmp	r3, #4
 8014a08:	d104      	bne.n	8014a14 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	885b      	ldrh	r3, [r3, #2]
 8014a0e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014a10:	2b08      	cmp	r3, #8
 8014a12:	d003      	beq.n	8014a1c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f7f9 fd89 	bl	800e52c <pbuf_free>
    return;
 8014a1a:	e055      	b.n	8014ac8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014a1c:	693b      	ldr	r3, [r7, #16]
 8014a1e:	330e      	adds	r3, #14
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	3318      	adds	r3, #24
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	3304      	adds	r3, #4
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d102      	bne.n	8014a3c <etharp_input+0x74>
    for_us = 0;
 8014a36:	2300      	movs	r3, #0
 8014a38:	75fb      	strb	r3, [r7, #23]
 8014a3a:	e009      	b.n	8014a50 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014a3c:	68ba      	ldr	r2, [r7, #8]
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	3304      	adds	r3, #4
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	429a      	cmp	r2, r3
 8014a46:	bf0c      	ite	eq
 8014a48:	2301      	moveq	r3, #1
 8014a4a:	2300      	movne	r3, #0
 8014a4c:	b2db      	uxtb	r3, r3
 8014a4e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	f103 0208 	add.w	r2, r3, #8
 8014a56:	7dfb      	ldrb	r3, [r7, #23]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d001      	beq.n	8014a60 <etharp_input+0x98>
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	e000      	b.n	8014a62 <etharp_input+0x9a>
 8014a60:	2302      	movs	r3, #2
 8014a62:	f107 010c 	add.w	r1, r7, #12
 8014a66:	6838      	ldr	r0, [r7, #0]
 8014a68:	f7ff fed8 	bl	801481c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014a6c:	693b      	ldr	r3, [r7, #16]
 8014a6e:	88db      	ldrh	r3, [r3, #6]
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014a76:	d003      	beq.n	8014a80 <etharp_input+0xb8>
 8014a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014a7c:	d01e      	beq.n	8014abc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014a7e:	e020      	b.n	8014ac2 <etharp_input+0xfa>
      if (for_us) {
 8014a80:	7dfb      	ldrb	r3, [r7, #23]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d01c      	beq.n	8014ac0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014a8c:	693b      	ldr	r3, [r7, #16]
 8014a8e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014a9c:	693a      	ldr	r2, [r7, #16]
 8014a9e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014aa0:	2102      	movs	r1, #2
 8014aa2:	9103      	str	r1, [sp, #12]
 8014aa4:	f107 010c 	add.w	r1, r7, #12
 8014aa8:	9102      	str	r1, [sp, #8]
 8014aaa:	9201      	str	r2, [sp, #4]
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	462b      	mov	r3, r5
 8014ab0:	4622      	mov	r2, r4
 8014ab2:	4601      	mov	r1, r0
 8014ab4:	6838      	ldr	r0, [r7, #0]
 8014ab6:	f000 faeb 	bl	8015090 <etharp_raw>
      break;
 8014aba:	e001      	b.n	8014ac0 <etharp_input+0xf8>
      break;
 8014abc:	bf00      	nop
 8014abe:	e000      	b.n	8014ac2 <etharp_input+0xfa>
      break;
 8014ac0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f7f9 fd32 	bl	800e52c <pbuf_free>
}
 8014ac8:	3718      	adds	r7, #24
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bdb0      	pop	{r4, r5, r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	0801a348 	.word	0x0801a348
 8014ad4:	0801a498 	.word	0x0801a498
 8014ad8:	0801a3c0 	.word	0x0801a3c0

08014adc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b086      	sub	sp, #24
 8014ae0:	af02      	add	r7, sp, #8
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	4613      	mov	r3, r2
 8014ae8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014aea:	79fa      	ldrb	r2, [r7, #7]
 8014aec:	4944      	ldr	r1, [pc, #272]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014aee:	4613      	mov	r3, r2
 8014af0:	005b      	lsls	r3, r3, #1
 8014af2:	4413      	add	r3, r2
 8014af4:	00db      	lsls	r3, r3, #3
 8014af6:	440b      	add	r3, r1
 8014af8:	3314      	adds	r3, #20
 8014afa:	781b      	ldrb	r3, [r3, #0]
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	d806      	bhi.n	8014b0e <etharp_output_to_arp_index+0x32>
 8014b00:	4b40      	ldr	r3, [pc, #256]	@ (8014c04 <etharp_output_to_arp_index+0x128>)
 8014b02:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014b06:	4940      	ldr	r1, [pc, #256]	@ (8014c08 <etharp_output_to_arp_index+0x12c>)
 8014b08:	4840      	ldr	r0, [pc, #256]	@ (8014c0c <etharp_output_to_arp_index+0x130>)
 8014b0a:	f002 f911 	bl	8016d30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014b0e:	79fa      	ldrb	r2, [r7, #7]
 8014b10:	493b      	ldr	r1, [pc, #236]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	440b      	add	r3, r1
 8014b1c:	3314      	adds	r3, #20
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	2b02      	cmp	r3, #2
 8014b22:	d153      	bne.n	8014bcc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014b24:	79fa      	ldrb	r2, [r7, #7]
 8014b26:	4936      	ldr	r1, [pc, #216]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014b28:	4613      	mov	r3, r2
 8014b2a:	005b      	lsls	r3, r3, #1
 8014b2c:	4413      	add	r3, r2
 8014b2e:	00db      	lsls	r3, r3, #3
 8014b30:	440b      	add	r3, r1
 8014b32:	3312      	adds	r3, #18
 8014b34:	881b      	ldrh	r3, [r3, #0]
 8014b36:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014b3a:	d919      	bls.n	8014b70 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014b3c:	79fa      	ldrb	r2, [r7, #7]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	4413      	add	r3, r2
 8014b44:	00db      	lsls	r3, r3, #3
 8014b46:	4a2e      	ldr	r2, [pc, #184]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014b48:	4413      	add	r3, r2
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	68f8      	ldr	r0, [r7, #12]
 8014b50:	f000 fb4c 	bl	80151ec <etharp_request>
 8014b54:	4603      	mov	r3, r0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d138      	bne.n	8014bcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b5a:	79fa      	ldrb	r2, [r7, #7]
 8014b5c:	4928      	ldr	r1, [pc, #160]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014b5e:	4613      	mov	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	440b      	add	r3, r1
 8014b68:	3314      	adds	r3, #20
 8014b6a:	2203      	movs	r2, #3
 8014b6c:	701a      	strb	r2, [r3, #0]
 8014b6e:	e02d      	b.n	8014bcc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014b70:	79fa      	ldrb	r2, [r7, #7]
 8014b72:	4923      	ldr	r1, [pc, #140]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014b74:	4613      	mov	r3, r2
 8014b76:	005b      	lsls	r3, r3, #1
 8014b78:	4413      	add	r3, r2
 8014b7a:	00db      	lsls	r3, r3, #3
 8014b7c:	440b      	add	r3, r1
 8014b7e:	3312      	adds	r3, #18
 8014b80:	881b      	ldrh	r3, [r3, #0]
 8014b82:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014b86:	d321      	bcc.n	8014bcc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014b88:	79fa      	ldrb	r2, [r7, #7]
 8014b8a:	4613      	mov	r3, r2
 8014b8c:	005b      	lsls	r3, r3, #1
 8014b8e:	4413      	add	r3, r2
 8014b90:	00db      	lsls	r3, r3, #3
 8014b92:	4a1b      	ldr	r2, [pc, #108]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014b94:	4413      	add	r3, r2
 8014b96:	1d19      	adds	r1, r3, #4
 8014b98:	79fa      	ldrb	r2, [r7, #7]
 8014b9a:	4613      	mov	r3, r2
 8014b9c:	005b      	lsls	r3, r3, #1
 8014b9e:	4413      	add	r3, r2
 8014ba0:	00db      	lsls	r3, r3, #3
 8014ba2:	3308      	adds	r3, #8
 8014ba4:	4a16      	ldr	r2, [pc, #88]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014ba6:	4413      	add	r3, r2
 8014ba8:	3304      	adds	r3, #4
 8014baa:	461a      	mov	r2, r3
 8014bac:	68f8      	ldr	r0, [r7, #12]
 8014bae:	f000 fafb 	bl	80151a8 <etharp_request_dst>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d109      	bne.n	8014bcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014bb8:	79fa      	ldrb	r2, [r7, #7]
 8014bba:	4911      	ldr	r1, [pc, #68]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014bbc:	4613      	mov	r3, r2
 8014bbe:	005b      	lsls	r3, r3, #1
 8014bc0:	4413      	add	r3, r2
 8014bc2:	00db      	lsls	r3, r3, #3
 8014bc4:	440b      	add	r3, r1
 8014bc6:	3314      	adds	r3, #20
 8014bc8:	2203      	movs	r2, #3
 8014bca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014bd2:	79fa      	ldrb	r2, [r7, #7]
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	4413      	add	r3, r2
 8014bda:	00db      	lsls	r3, r3, #3
 8014bdc:	3308      	adds	r3, #8
 8014bde:	4a08      	ldr	r2, [pc, #32]	@ (8014c00 <etharp_output_to_arp_index+0x124>)
 8014be0:	4413      	add	r3, r2
 8014be2:	3304      	adds	r3, #4
 8014be4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014be8:	9200      	str	r2, [sp, #0]
 8014bea:	460a      	mov	r2, r1
 8014bec:	68b9      	ldr	r1, [r7, #8]
 8014bee:	68f8      	ldr	r0, [r7, #12]
 8014bf0:	f001 fe40 	bl	8016874 <ethernet_output>
 8014bf4:	4603      	mov	r3, r0
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	3710      	adds	r7, #16
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}
 8014bfe:	bf00      	nop
 8014c00:	2000c750 	.word	0x2000c750
 8014c04:	0801a348 	.word	0x0801a348
 8014c08:	0801a4b8 	.word	0x0801a4b8
 8014c0c:	0801a3c0 	.word	0x0801a3c0

08014c10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b08a      	sub	sp, #40	@ 0x28
 8014c14:	af02      	add	r7, sp, #8
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d106      	bne.n	8014c34 <etharp_output+0x24>
 8014c26:	4b73      	ldr	r3, [pc, #460]	@ (8014df4 <etharp_output+0x1e4>)
 8014c28:	f240 321e 	movw	r2, #798	@ 0x31e
 8014c2c:	4972      	ldr	r1, [pc, #456]	@ (8014df8 <etharp_output+0x1e8>)
 8014c2e:	4873      	ldr	r0, [pc, #460]	@ (8014dfc <etharp_output+0x1ec>)
 8014c30:	f002 f87e 	bl	8016d30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014c34:	68bb      	ldr	r3, [r7, #8]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d106      	bne.n	8014c48 <etharp_output+0x38>
 8014c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8014df4 <etharp_output+0x1e4>)
 8014c3c:	f240 321f 	movw	r2, #799	@ 0x31f
 8014c40:	496f      	ldr	r1, [pc, #444]	@ (8014e00 <etharp_output+0x1f0>)
 8014c42:	486e      	ldr	r0, [pc, #440]	@ (8014dfc <etharp_output+0x1ec>)
 8014c44:	f002 f874 	bl	8016d30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d106      	bne.n	8014c5c <etharp_output+0x4c>
 8014c4e:	4b69      	ldr	r3, [pc, #420]	@ (8014df4 <etharp_output+0x1e4>)
 8014c50:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014c54:	496b      	ldr	r1, [pc, #428]	@ (8014e04 <etharp_output+0x1f4>)
 8014c56:	4869      	ldr	r0, [pc, #420]	@ (8014dfc <etharp_output+0x1ec>)
 8014c58:	f002 f86a 	bl	8016d30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	68f9      	ldr	r1, [r7, #12]
 8014c62:	4618      	mov	r0, r3
 8014c64:	f000 fef8 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d002      	beq.n	8014c74 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014c6e:	4b66      	ldr	r3, [pc, #408]	@ (8014e08 <etharp_output+0x1f8>)
 8014c70:	61fb      	str	r3, [r7, #28]
 8014c72:	e0af      	b.n	8014dd4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014c7c:	2be0      	cmp	r3, #224	@ 0xe0
 8014c7e:	d118      	bne.n	8014cb2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014c80:	2301      	movs	r3, #1
 8014c82:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014c84:	2300      	movs	r3, #0
 8014c86:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014c88:	235e      	movs	r3, #94	@ 0x5e
 8014c8a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	781b      	ldrb	r3, [r3, #0]
 8014c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c96:	b2db      	uxtb	r3, r3
 8014c98:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	3302      	adds	r3, #2
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	3303      	adds	r3, #3
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014caa:	f107 0310 	add.w	r3, r7, #16
 8014cae:	61fb      	str	r3, [r7, #28]
 8014cb0:	e090      	b.n	8014dd4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	3304      	adds	r3, #4
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	405a      	eors	r2, r3
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	3308      	adds	r3, #8
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	4013      	ands	r3, r2
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d012      	beq.n	8014cf0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014cd0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014cd4:	4293      	cmp	r3, r2
 8014cd6:	d00b      	beq.n	8014cf0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	330c      	adds	r3, #12
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d003      	beq.n	8014cea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	330c      	adds	r3, #12
 8014ce6:	61bb      	str	r3, [r7, #24]
 8014ce8:	e002      	b.n	8014cf0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014cea:	f06f 0303 	mvn.w	r3, #3
 8014cee:	e07d      	b.n	8014dec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014cf0:	4b46      	ldr	r3, [pc, #280]	@ (8014e0c <etharp_output+0x1fc>)
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	4a46      	ldr	r2, [pc, #280]	@ (8014e10 <etharp_output+0x200>)
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	005b      	lsls	r3, r3, #1
 8014cfc:	440b      	add	r3, r1
 8014cfe:	00db      	lsls	r3, r3, #3
 8014d00:	4413      	add	r3, r2
 8014d02:	3314      	adds	r3, #20
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	2b01      	cmp	r3, #1
 8014d08:	d925      	bls.n	8014d56 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014d0a:	4b40      	ldr	r3, [pc, #256]	@ (8014e0c <etharp_output+0x1fc>)
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	4619      	mov	r1, r3
 8014d10:	4a3f      	ldr	r2, [pc, #252]	@ (8014e10 <etharp_output+0x200>)
 8014d12:	460b      	mov	r3, r1
 8014d14:	005b      	lsls	r3, r3, #1
 8014d16:	440b      	add	r3, r1
 8014d18:	00db      	lsls	r3, r3, #3
 8014d1a:	4413      	add	r3, r2
 8014d1c:	3308      	adds	r3, #8
 8014d1e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d117      	bne.n	8014d56 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	4b38      	ldr	r3, [pc, #224]	@ (8014e0c <etharp_output+0x1fc>)
 8014d2c:	781b      	ldrb	r3, [r3, #0]
 8014d2e:	4618      	mov	r0, r3
 8014d30:	4937      	ldr	r1, [pc, #220]	@ (8014e10 <etharp_output+0x200>)
 8014d32:	4603      	mov	r3, r0
 8014d34:	005b      	lsls	r3, r3, #1
 8014d36:	4403      	add	r3, r0
 8014d38:	00db      	lsls	r3, r3, #3
 8014d3a:	440b      	add	r3, r1
 8014d3c:	3304      	adds	r3, #4
 8014d3e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d108      	bne.n	8014d56 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014d44:	4b31      	ldr	r3, [pc, #196]	@ (8014e0c <etharp_output+0x1fc>)
 8014d46:	781b      	ldrb	r3, [r3, #0]
 8014d48:	461a      	mov	r2, r3
 8014d4a:	68b9      	ldr	r1, [r7, #8]
 8014d4c:	68f8      	ldr	r0, [r7, #12]
 8014d4e:	f7ff fec5 	bl	8014adc <etharp_output_to_arp_index>
 8014d52:	4603      	mov	r3, r0
 8014d54:	e04a      	b.n	8014dec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d56:	2300      	movs	r3, #0
 8014d58:	75fb      	strb	r3, [r7, #23]
 8014d5a:	e031      	b.n	8014dc0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d5c:	7dfa      	ldrb	r2, [r7, #23]
 8014d5e:	492c      	ldr	r1, [pc, #176]	@ (8014e10 <etharp_output+0x200>)
 8014d60:	4613      	mov	r3, r2
 8014d62:	005b      	lsls	r3, r3, #1
 8014d64:	4413      	add	r3, r2
 8014d66:	00db      	lsls	r3, r3, #3
 8014d68:	440b      	add	r3, r1
 8014d6a:	3314      	adds	r3, #20
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	2b01      	cmp	r3, #1
 8014d70:	d923      	bls.n	8014dba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014d72:	7dfa      	ldrb	r2, [r7, #23]
 8014d74:	4926      	ldr	r1, [pc, #152]	@ (8014e10 <etharp_output+0x200>)
 8014d76:	4613      	mov	r3, r2
 8014d78:	005b      	lsls	r3, r3, #1
 8014d7a:	4413      	add	r3, r2
 8014d7c:	00db      	lsls	r3, r3, #3
 8014d7e:	440b      	add	r3, r1
 8014d80:	3308      	adds	r3, #8
 8014d82:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d84:	68fa      	ldr	r2, [r7, #12]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	d117      	bne.n	8014dba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	6819      	ldr	r1, [r3, #0]
 8014d8e:	7dfa      	ldrb	r2, [r7, #23]
 8014d90:	481f      	ldr	r0, [pc, #124]	@ (8014e10 <etharp_output+0x200>)
 8014d92:	4613      	mov	r3, r2
 8014d94:	005b      	lsls	r3, r3, #1
 8014d96:	4413      	add	r3, r2
 8014d98:	00db      	lsls	r3, r3, #3
 8014d9a:	4403      	add	r3, r0
 8014d9c:	3304      	adds	r3, #4
 8014d9e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014da0:	4299      	cmp	r1, r3
 8014da2:	d10a      	bne.n	8014dba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014da4:	4a19      	ldr	r2, [pc, #100]	@ (8014e0c <etharp_output+0x1fc>)
 8014da6:	7dfb      	ldrb	r3, [r7, #23]
 8014da8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014daa:	7dfb      	ldrb	r3, [r7, #23]
 8014dac:	461a      	mov	r2, r3
 8014dae:	68b9      	ldr	r1, [r7, #8]
 8014db0:	68f8      	ldr	r0, [r7, #12]
 8014db2:	f7ff fe93 	bl	8014adc <etharp_output_to_arp_index>
 8014db6:	4603      	mov	r3, r0
 8014db8:	e018      	b.n	8014dec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014dba:	7dfb      	ldrb	r3, [r7, #23]
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	75fb      	strb	r3, [r7, #23]
 8014dc0:	7dfb      	ldrb	r3, [r7, #23]
 8014dc2:	2b09      	cmp	r3, #9
 8014dc4:	d9ca      	bls.n	8014d5c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014dc6:	68ba      	ldr	r2, [r7, #8]
 8014dc8:	69b9      	ldr	r1, [r7, #24]
 8014dca:	68f8      	ldr	r0, [r7, #12]
 8014dcc:	f000 f822 	bl	8014e14 <etharp_query>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	e00b      	b.n	8014dec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014dda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014dde:	9300      	str	r3, [sp, #0]
 8014de0:	69fb      	ldr	r3, [r7, #28]
 8014de2:	68b9      	ldr	r1, [r7, #8]
 8014de4:	68f8      	ldr	r0, [r7, #12]
 8014de6:	f001 fd45 	bl	8016874 <ethernet_output>
 8014dea:	4603      	mov	r3, r0
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3720      	adds	r7, #32
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	0801a348 	.word	0x0801a348
 8014df8:	0801a498 	.word	0x0801a498
 8014dfc:	0801a3c0 	.word	0x0801a3c0
 8014e00:	0801a4e8 	.word	0x0801a4e8
 8014e04:	0801a488 	.word	0x0801a488
 8014e08:	0801ab4c 	.word	0x0801ab4c
 8014e0c:	2000c840 	.word	0x2000c840
 8014e10:	2000c750 	.word	0x2000c750

08014e14 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b08c      	sub	sp, #48	@ 0x30
 8014e18:	af02      	add	r7, sp, #8
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	3326      	adds	r3, #38	@ 0x26
 8014e24:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014e26:	23ff      	movs	r3, #255	@ 0xff
 8014e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e30:	68bb      	ldr	r3, [r7, #8]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	68f9      	ldr	r1, [r7, #12]
 8014e36:	4618      	mov	r0, r3
 8014e38:	f000 fe0e 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d10c      	bne.n	8014e5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e4a:	2be0      	cmp	r3, #224	@ 0xe0
 8014e4c:	d006      	beq.n	8014e5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d003      	beq.n	8014e5c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d102      	bne.n	8014e62 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014e5c:	f06f 030f 	mvn.w	r3, #15
 8014e60:	e101      	b.n	8015066 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014e62:	68fa      	ldr	r2, [r7, #12]
 8014e64:	2101      	movs	r1, #1
 8014e66:	68b8      	ldr	r0, [r7, #8]
 8014e68:	f7ff fb60 	bl	801452c <etharp_find_entry>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014e70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	da02      	bge.n	8014e7e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014e78:	8a7b      	ldrh	r3, [r7, #18]
 8014e7a:	b25b      	sxtb	r3, r3
 8014e7c:	e0f3      	b.n	8015066 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014e7e:	8a7b      	ldrh	r3, [r7, #18]
 8014e80:	2b7e      	cmp	r3, #126	@ 0x7e
 8014e82:	d906      	bls.n	8014e92 <etharp_query+0x7e>
 8014e84:	4b7a      	ldr	r3, [pc, #488]	@ (8015070 <etharp_query+0x25c>)
 8014e86:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014e8a:	497a      	ldr	r1, [pc, #488]	@ (8015074 <etharp_query+0x260>)
 8014e8c:	487a      	ldr	r0, [pc, #488]	@ (8015078 <etharp_query+0x264>)
 8014e8e:	f001 ff4f 	bl	8016d30 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014e92:	8a7b      	ldrh	r3, [r7, #18]
 8014e94:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014e96:	7c7a      	ldrb	r2, [r7, #17]
 8014e98:	4978      	ldr	r1, [pc, #480]	@ (801507c <etharp_query+0x268>)
 8014e9a:	4613      	mov	r3, r2
 8014e9c:	005b      	lsls	r3, r3, #1
 8014e9e:	4413      	add	r3, r2
 8014ea0:	00db      	lsls	r3, r3, #3
 8014ea2:	440b      	add	r3, r1
 8014ea4:	3314      	adds	r3, #20
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d115      	bne.n	8014ed8 <etharp_query+0xc4>
    is_new_entry = 1;
 8014eac:	2301      	movs	r3, #1
 8014eae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014eb0:	7c7a      	ldrb	r2, [r7, #17]
 8014eb2:	4972      	ldr	r1, [pc, #456]	@ (801507c <etharp_query+0x268>)
 8014eb4:	4613      	mov	r3, r2
 8014eb6:	005b      	lsls	r3, r3, #1
 8014eb8:	4413      	add	r3, r2
 8014eba:	00db      	lsls	r3, r3, #3
 8014ebc:	440b      	add	r3, r1
 8014ebe:	3314      	adds	r3, #20
 8014ec0:	2201      	movs	r2, #1
 8014ec2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014ec4:	7c7a      	ldrb	r2, [r7, #17]
 8014ec6:	496d      	ldr	r1, [pc, #436]	@ (801507c <etharp_query+0x268>)
 8014ec8:	4613      	mov	r3, r2
 8014eca:	005b      	lsls	r3, r3, #1
 8014ecc:	4413      	add	r3, r2
 8014ece:	00db      	lsls	r3, r3, #3
 8014ed0:	440b      	add	r3, r1
 8014ed2:	3308      	adds	r3, #8
 8014ed4:	68fa      	ldr	r2, [r7, #12]
 8014ed6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014ed8:	7c7a      	ldrb	r2, [r7, #17]
 8014eda:	4968      	ldr	r1, [pc, #416]	@ (801507c <etharp_query+0x268>)
 8014edc:	4613      	mov	r3, r2
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	00db      	lsls	r3, r3, #3
 8014ee4:	440b      	add	r3, r1
 8014ee6:	3314      	adds	r3, #20
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	2b01      	cmp	r3, #1
 8014eec:	d011      	beq.n	8014f12 <etharp_query+0xfe>
 8014eee:	7c7a      	ldrb	r2, [r7, #17]
 8014ef0:	4962      	ldr	r1, [pc, #392]	@ (801507c <etharp_query+0x268>)
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	005b      	lsls	r3, r3, #1
 8014ef6:	4413      	add	r3, r2
 8014ef8:	00db      	lsls	r3, r3, #3
 8014efa:	440b      	add	r3, r1
 8014efc:	3314      	adds	r3, #20
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d806      	bhi.n	8014f12 <etharp_query+0xfe>
 8014f04:	4b5a      	ldr	r3, [pc, #360]	@ (8015070 <etharp_query+0x25c>)
 8014f06:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014f0a:	495d      	ldr	r1, [pc, #372]	@ (8015080 <etharp_query+0x26c>)
 8014f0c:	485a      	ldr	r0, [pc, #360]	@ (8015078 <etharp_query+0x264>)
 8014f0e:	f001 ff0f 	bl	8016d30 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014f12:	6a3b      	ldr	r3, [r7, #32]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d102      	bne.n	8014f1e <etharp_query+0x10a>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d10c      	bne.n	8014f38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014f1e:	68b9      	ldr	r1, [r7, #8]
 8014f20:	68f8      	ldr	r0, [r7, #12]
 8014f22:	f000 f963 	bl	80151ec <etharp_request>
 8014f26:	4603      	mov	r3, r0
 8014f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d102      	bne.n	8014f38 <etharp_query+0x124>
      return result;
 8014f32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014f36:	e096      	b.n	8015066 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d106      	bne.n	8014f4c <etharp_query+0x138>
 8014f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8015070 <etharp_query+0x25c>)
 8014f40:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014f44:	494f      	ldr	r1, [pc, #316]	@ (8015084 <etharp_query+0x270>)
 8014f46:	484c      	ldr	r0, [pc, #304]	@ (8015078 <etharp_query+0x264>)
 8014f48:	f001 fef2 	bl	8016d30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014f4c:	7c7a      	ldrb	r2, [r7, #17]
 8014f4e:	494b      	ldr	r1, [pc, #300]	@ (801507c <etharp_query+0x268>)
 8014f50:	4613      	mov	r3, r2
 8014f52:	005b      	lsls	r3, r3, #1
 8014f54:	4413      	add	r3, r2
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	440b      	add	r3, r1
 8014f5a:	3314      	adds	r3, #20
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	d917      	bls.n	8014f92 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014f62:	4a49      	ldr	r2, [pc, #292]	@ (8015088 <etharp_query+0x274>)
 8014f64:	7c7b      	ldrb	r3, [r7, #17]
 8014f66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014f68:	7c7a      	ldrb	r2, [r7, #17]
 8014f6a:	4613      	mov	r3, r2
 8014f6c:	005b      	lsls	r3, r3, #1
 8014f6e:	4413      	add	r3, r2
 8014f70:	00db      	lsls	r3, r3, #3
 8014f72:	3308      	adds	r3, #8
 8014f74:	4a41      	ldr	r2, [pc, #260]	@ (801507c <etharp_query+0x268>)
 8014f76:	4413      	add	r3, r2
 8014f78:	3304      	adds	r3, #4
 8014f7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014f7e:	9200      	str	r2, [sp, #0]
 8014f80:	697a      	ldr	r2, [r7, #20]
 8014f82:	6879      	ldr	r1, [r7, #4]
 8014f84:	68f8      	ldr	r0, [r7, #12]
 8014f86:	f001 fc75 	bl	8016874 <ethernet_output>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014f90:	e067      	b.n	8015062 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014f92:	7c7a      	ldrb	r2, [r7, #17]
 8014f94:	4939      	ldr	r1, [pc, #228]	@ (801507c <etharp_query+0x268>)
 8014f96:	4613      	mov	r3, r2
 8014f98:	005b      	lsls	r3, r3, #1
 8014f9a:	4413      	add	r3, r2
 8014f9c:	00db      	lsls	r3, r3, #3
 8014f9e:	440b      	add	r3, r1
 8014fa0:	3314      	adds	r3, #20
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	2b01      	cmp	r3, #1
 8014fa6:	d15c      	bne.n	8015062 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fb0:	e01c      	b.n	8014fec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	895a      	ldrh	r2, [r3, #10]
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	891b      	ldrh	r3, [r3, #8]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d10a      	bne.n	8014fd4 <etharp_query+0x1c0>
 8014fbe:	69fb      	ldr	r3, [r7, #28]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d006      	beq.n	8014fd4 <etharp_query+0x1c0>
 8014fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8015070 <etharp_query+0x25c>)
 8014fc8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014fcc:	492f      	ldr	r1, [pc, #188]	@ (801508c <etharp_query+0x278>)
 8014fce:	482a      	ldr	r0, [pc, #168]	@ (8015078 <etharp_query+0x264>)
 8014fd0:	f001 feae 	bl	8016d30 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	7b1b      	ldrb	r3, [r3, #12]
 8014fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d002      	beq.n	8014fe6 <etharp_query+0x1d2>
        copy_needed = 1;
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	61bb      	str	r3, [r7, #24]
        break;
 8014fe4:	e005      	b.n	8014ff2 <etharp_query+0x1de>
      }
      p = p->next;
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fec:	69fb      	ldr	r3, [r7, #28]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d1df      	bne.n	8014fb2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d007      	beq.n	8015008 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014ff8:	687a      	ldr	r2, [r7, #4]
 8014ffa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014ffe:	200e      	movs	r0, #14
 8015000:	f7f9 fcfc 	bl	800e9fc <pbuf_clone>
 8015004:	61f8      	str	r0, [r7, #28]
 8015006:	e004      	b.n	8015012 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801500c:	69f8      	ldr	r0, [r7, #28]
 801500e:	f7f9 fb33 	bl	800e678 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d021      	beq.n	801505c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015018:	7c7a      	ldrb	r2, [r7, #17]
 801501a:	4918      	ldr	r1, [pc, #96]	@ (801507c <etharp_query+0x268>)
 801501c:	4613      	mov	r3, r2
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	4413      	add	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	440b      	add	r3, r1
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d00a      	beq.n	8015042 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801502c:	7c7a      	ldrb	r2, [r7, #17]
 801502e:	4913      	ldr	r1, [pc, #76]	@ (801507c <etharp_query+0x268>)
 8015030:	4613      	mov	r3, r2
 8015032:	005b      	lsls	r3, r3, #1
 8015034:	4413      	add	r3, r2
 8015036:	00db      	lsls	r3, r3, #3
 8015038:	440b      	add	r3, r1
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	4618      	mov	r0, r3
 801503e:	f7f9 fa75 	bl	800e52c <pbuf_free>
      }
      arp_table[i].q = p;
 8015042:	7c7a      	ldrb	r2, [r7, #17]
 8015044:	490d      	ldr	r1, [pc, #52]	@ (801507c <etharp_query+0x268>)
 8015046:	4613      	mov	r3, r2
 8015048:	005b      	lsls	r3, r3, #1
 801504a:	4413      	add	r3, r2
 801504c:	00db      	lsls	r3, r3, #3
 801504e:	440b      	add	r3, r1
 8015050:	69fa      	ldr	r2, [r7, #28]
 8015052:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015054:	2300      	movs	r3, #0
 8015056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801505a:	e002      	b.n	8015062 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801505c:	23ff      	movs	r3, #255	@ 0xff
 801505e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015062:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015066:	4618      	mov	r0, r3
 8015068:	3728      	adds	r7, #40	@ 0x28
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	0801a348 	.word	0x0801a348
 8015074:	0801a4f4 	.word	0x0801a4f4
 8015078:	0801a3c0 	.word	0x0801a3c0
 801507c:	2000c750 	.word	0x2000c750
 8015080:	0801a504 	.word	0x0801a504
 8015084:	0801a4e8 	.word	0x0801a4e8
 8015088:	2000c840 	.word	0x2000c840
 801508c:	0801a52c 	.word	0x0801a52c

08015090 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b08a      	sub	sp, #40	@ 0x28
 8015094:	af02      	add	r7, sp, #8
 8015096:	60f8      	str	r0, [r7, #12]
 8015098:	60b9      	str	r1, [r7, #8]
 801509a:	607a      	str	r2, [r7, #4]
 801509c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801509e:	2300      	movs	r3, #0
 80150a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d106      	bne.n	80150b6 <etharp_raw+0x26>
 80150a8:	4b3a      	ldr	r3, [pc, #232]	@ (8015194 <etharp_raw+0x104>)
 80150aa:	f240 4257 	movw	r2, #1111	@ 0x457
 80150ae:	493a      	ldr	r1, [pc, #232]	@ (8015198 <etharp_raw+0x108>)
 80150b0:	483a      	ldr	r0, [pc, #232]	@ (801519c <etharp_raw+0x10c>)
 80150b2:	f001 fe3d 	bl	8016d30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80150b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80150ba:	211c      	movs	r1, #28
 80150bc:	200e      	movs	r0, #14
 80150be:	f7f8 ff51 	bl	800df64 <pbuf_alloc>
 80150c2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d102      	bne.n	80150d0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80150ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150ce:	e05d      	b.n	801518c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80150d0:	69bb      	ldr	r3, [r7, #24]
 80150d2:	895b      	ldrh	r3, [r3, #10]
 80150d4:	2b1b      	cmp	r3, #27
 80150d6:	d806      	bhi.n	80150e6 <etharp_raw+0x56>
 80150d8:	4b2e      	ldr	r3, [pc, #184]	@ (8015194 <etharp_raw+0x104>)
 80150da:	f240 4262 	movw	r2, #1122	@ 0x462
 80150de:	4930      	ldr	r1, [pc, #192]	@ (80151a0 <etharp_raw+0x110>)
 80150e0:	482e      	ldr	r0, [pc, #184]	@ (801519c <etharp_raw+0x10c>)
 80150e2:	f001 fe25 	bl	8016d30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80150e6:	69bb      	ldr	r3, [r7, #24]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80150ec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7f7 fe2e 	bl	800cd50 <lwip_htons>
 80150f4:	4603      	mov	r3, r0
 80150f6:	461a      	mov	r2, r3
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015102:	2b06      	cmp	r3, #6
 8015104:	d006      	beq.n	8015114 <etharp_raw+0x84>
 8015106:	4b23      	ldr	r3, [pc, #140]	@ (8015194 <etharp_raw+0x104>)
 8015108:	f240 4269 	movw	r2, #1129	@ 0x469
 801510c:	4925      	ldr	r1, [pc, #148]	@ (80151a4 <etharp_raw+0x114>)
 801510e:	4823      	ldr	r0, [pc, #140]	@ (801519c <etharp_raw+0x10c>)
 8015110:	f001 fe0e 	bl	8016d30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	3308      	adds	r3, #8
 8015118:	2206      	movs	r2, #6
 801511a:	6839      	ldr	r1, [r7, #0]
 801511c:	4618      	mov	r0, r3
 801511e:	f002 f832 	bl	8017186 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	3312      	adds	r3, #18
 8015126:	2206      	movs	r2, #6
 8015128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801512a:	4618      	mov	r0, r3
 801512c:	f002 f82b 	bl	8017186 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	330e      	adds	r3, #14
 8015134:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015136:	6812      	ldr	r2, [r2, #0]
 8015138:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801513a:	697b      	ldr	r3, [r7, #20]
 801513c:	3318      	adds	r3, #24
 801513e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015140:	6812      	ldr	r2, [r2, #0]
 8015142:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	2200      	movs	r2, #0
 8015148:	701a      	strb	r2, [r3, #0]
 801514a:	2200      	movs	r2, #0
 801514c:	f042 0201 	orr.w	r2, r2, #1
 8015150:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015152:	697b      	ldr	r3, [r7, #20]
 8015154:	2200      	movs	r2, #0
 8015156:	f042 0208 	orr.w	r2, r2, #8
 801515a:	709a      	strb	r2, [r3, #2]
 801515c:	2200      	movs	r2, #0
 801515e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	2206      	movs	r2, #6
 8015164:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	2204      	movs	r2, #4
 801516a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801516c:	f640 0306 	movw	r3, #2054	@ 0x806
 8015170:	9300      	str	r3, [sp, #0]
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	68ba      	ldr	r2, [r7, #8]
 8015176:	69b9      	ldr	r1, [r7, #24]
 8015178:	68f8      	ldr	r0, [r7, #12]
 801517a:	f001 fb7b 	bl	8016874 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801517e:	69b8      	ldr	r0, [r7, #24]
 8015180:	f7f9 f9d4 	bl	800e52c <pbuf_free>
  p = NULL;
 8015184:	2300      	movs	r3, #0
 8015186:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015188:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801518c:	4618      	mov	r0, r3
 801518e:	3720      	adds	r7, #32
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}
 8015194:	0801a348 	.word	0x0801a348
 8015198:	0801a498 	.word	0x0801a498
 801519c:	0801a3c0 	.word	0x0801a3c0
 80151a0:	0801a548 	.word	0x0801a548
 80151a4:	0801a57c 	.word	0x0801a57c

080151a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b088      	sub	sp, #32
 80151ac:	af04      	add	r7, sp, #16
 80151ae:	60f8      	str	r0, [r7, #12]
 80151b0:	60b9      	str	r1, [r7, #8]
 80151b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151c4:	2201      	movs	r2, #1
 80151c6:	9203      	str	r2, [sp, #12]
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	9202      	str	r2, [sp, #8]
 80151cc:	4a06      	ldr	r2, [pc, #24]	@ (80151e8 <etharp_request_dst+0x40>)
 80151ce:	9201      	str	r2, [sp, #4]
 80151d0:	9300      	str	r3, [sp, #0]
 80151d2:	4603      	mov	r3, r0
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	68f8      	ldr	r0, [r7, #12]
 80151d8:	f7ff ff5a 	bl	8015090 <etharp_raw>
 80151dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3710      	adds	r7, #16
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}
 80151e6:	bf00      	nop
 80151e8:	0801ab54 	.word	0x0801ab54

080151ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80151f6:	4a05      	ldr	r2, [pc, #20]	@ (801520c <etharp_request+0x20>)
 80151f8:	6839      	ldr	r1, [r7, #0]
 80151fa:	6878      	ldr	r0, [r7, #4]
 80151fc:	f7ff ffd4 	bl	80151a8 <etharp_request_dst>
 8015200:	4603      	mov	r3, r0
}
 8015202:	4618      	mov	r0, r3
 8015204:	3708      	adds	r7, #8
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}
 801520a:	bf00      	nop
 801520c:	0801ab4c 	.word	0x0801ab4c

08015210 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b08e      	sub	sp, #56	@ 0x38
 8015214:	af04      	add	r7, sp, #16
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801521a:	4b79      	ldr	r3, [pc, #484]	@ (8015400 <icmp_input+0x1f0>)
 801521c:	689b      	ldr	r3, [r3, #8]
 801521e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	f003 030f 	and.w	r3, r3, #15
 8015228:	b2db      	uxtb	r3, r3
 801522a:	009b      	lsls	r3, r3, #2
 801522c:	b2db      	uxtb	r3, r3
 801522e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015230:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015232:	2b13      	cmp	r3, #19
 8015234:	f240 80cd 	bls.w	80153d2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	895b      	ldrh	r3, [r3, #10]
 801523c:	2b03      	cmp	r3, #3
 801523e:	f240 80ca 	bls.w	80153d6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801524c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015250:	2b00      	cmp	r3, #0
 8015252:	f000 80b7 	beq.w	80153c4 <icmp_input+0x1b4>
 8015256:	2b08      	cmp	r3, #8
 8015258:	f040 80b7 	bne.w	80153ca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801525c:	4b69      	ldr	r3, [pc, #420]	@ (8015404 <icmp_input+0x1f4>)
 801525e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015260:	4b67      	ldr	r3, [pc, #412]	@ (8015400 <icmp_input+0x1f0>)
 8015262:	695b      	ldr	r3, [r3, #20]
 8015264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015268:	2be0      	cmp	r3, #224	@ 0xe0
 801526a:	f000 80bb 	beq.w	80153e4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801526e:	4b64      	ldr	r3, [pc, #400]	@ (8015400 <icmp_input+0x1f0>)
 8015270:	695b      	ldr	r3, [r3, #20]
 8015272:	4a63      	ldr	r2, [pc, #396]	@ (8015400 <icmp_input+0x1f0>)
 8015274:	6812      	ldr	r2, [r2, #0]
 8015276:	4611      	mov	r1, r2
 8015278:	4618      	mov	r0, r3
 801527a:	f000 fbed 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	f040 80b1 	bne.w	80153e8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	891b      	ldrh	r3, [r3, #8]
 801528a:	2b07      	cmp	r3, #7
 801528c:	f240 80a5 	bls.w	80153da <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015290:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015292:	330e      	adds	r3, #14
 8015294:	4619      	mov	r1, r3
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f7f9 f8b2 	bl	800e400 <pbuf_add_header>
 801529c:	4603      	mov	r3, r0
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d04b      	beq.n	801533a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	891a      	ldrh	r2, [r3, #8]
 80152a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80152a8:	4413      	add	r3, r2
 80152aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	891b      	ldrh	r3, [r3, #8]
 80152b0:	8b7a      	ldrh	r2, [r7, #26]
 80152b2:	429a      	cmp	r2, r3
 80152b4:	f0c0 809a 	bcc.w	80153ec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80152b8:	8b7b      	ldrh	r3, [r7, #26]
 80152ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80152be:	4619      	mov	r1, r3
 80152c0:	200e      	movs	r0, #14
 80152c2:	f7f8 fe4f 	bl	800df64 <pbuf_alloc>
 80152c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	f000 8090 	beq.w	80153f0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	895b      	ldrh	r3, [r3, #10]
 80152d4:	461a      	mov	r2, r3
 80152d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80152d8:	3308      	adds	r3, #8
 80152da:	429a      	cmp	r2, r3
 80152dc:	d203      	bcs.n	80152e6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80152de:	6978      	ldr	r0, [r7, #20]
 80152e0:	f7f9 f924 	bl	800e52c <pbuf_free>
          goto icmperr;
 80152e4:	e085      	b.n	80153f2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80152e6:	697b      	ldr	r3, [r7, #20]
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80152ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80152ee:	4618      	mov	r0, r3
 80152f0:	f001 ff49 	bl	8017186 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80152f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80152f6:	4619      	mov	r1, r3
 80152f8:	6978      	ldr	r0, [r7, #20]
 80152fa:	f7f9 f891 	bl	800e420 <pbuf_remove_header>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b00      	cmp	r3, #0
 8015302:	d009      	beq.n	8015318 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015304:	4b40      	ldr	r3, [pc, #256]	@ (8015408 <icmp_input+0x1f8>)
 8015306:	22b6      	movs	r2, #182	@ 0xb6
 8015308:	4940      	ldr	r1, [pc, #256]	@ (801540c <icmp_input+0x1fc>)
 801530a:	4841      	ldr	r0, [pc, #260]	@ (8015410 <icmp_input+0x200>)
 801530c:	f001 fd10 	bl	8016d30 <iprintf>
          pbuf_free(r);
 8015310:	6978      	ldr	r0, [r7, #20]
 8015312:	f7f9 f90b 	bl	800e52c <pbuf_free>
          goto icmperr;
 8015316:	e06c      	b.n	80153f2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015318:	6879      	ldr	r1, [r7, #4]
 801531a:	6978      	ldr	r0, [r7, #20]
 801531c:	f7f9 fa2a 	bl	800e774 <pbuf_copy>
 8015320:	4603      	mov	r3, r0
 8015322:	2b00      	cmp	r3, #0
 8015324:	d003      	beq.n	801532e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015326:	6978      	ldr	r0, [r7, #20]
 8015328:	f7f9 f900 	bl	800e52c <pbuf_free>
          goto icmperr;
 801532c:	e061      	b.n	80153f2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f7f9 f8fc 	bl	800e52c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	607b      	str	r3, [r7, #4]
 8015338:	e00f      	b.n	801535a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801533a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801533c:	330e      	adds	r3, #14
 801533e:	4619      	mov	r1, r3
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f7f9 f86d 	bl	800e420 <pbuf_remove_header>
 8015346:	4603      	mov	r3, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	d006      	beq.n	801535a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801534c:	4b2e      	ldr	r3, [pc, #184]	@ (8015408 <icmp_input+0x1f8>)
 801534e:	22c7      	movs	r2, #199	@ 0xc7
 8015350:	4930      	ldr	r1, [pc, #192]	@ (8015414 <icmp_input+0x204>)
 8015352:	482f      	ldr	r0, [pc, #188]	@ (8015410 <icmp_input+0x200>)
 8015354:	f001 fcec 	bl	8016d30 <iprintf>
          goto icmperr;
 8015358:	e04b      	b.n	80153f2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015360:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015362:	4619      	mov	r1, r3
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7f9 f84b 	bl	800e400 <pbuf_add_header>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	d12b      	bne.n	80153c8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	685b      	ldr	r3, [r3, #4]
 8015374:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801537e:	4b20      	ldr	r3, [pc, #128]	@ (8015400 <icmp_input+0x1f0>)
 8015380:	691a      	ldr	r2, [r3, #16]
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	2200      	movs	r2, #0
 801538a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	2200      	movs	r2, #0
 8015390:	709a      	strb	r2, [r3, #2]
 8015392:	2200      	movs	r2, #0
 8015394:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	22ff      	movs	r2, #255	@ 0xff
 801539a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2200      	movs	r2, #0
 80153a0:	729a      	strb	r2, [r3, #10]
 80153a2:	2200      	movs	r2, #0
 80153a4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	9302      	str	r3, [sp, #8]
 80153aa:	2301      	movs	r3, #1
 80153ac:	9301      	str	r3, [sp, #4]
 80153ae:	2300      	movs	r3, #0
 80153b0:	9300      	str	r3, [sp, #0]
 80153b2:	23ff      	movs	r3, #255	@ 0xff
 80153b4:	2200      	movs	r2, #0
 80153b6:	69f9      	ldr	r1, [r7, #28]
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f000 fa75 	bl	80158a8 <ip4_output_if>
 80153be:	4603      	mov	r3, r0
 80153c0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80153c2:	e001      	b.n	80153c8 <icmp_input+0x1b8>
      break;
 80153c4:	bf00      	nop
 80153c6:	e000      	b.n	80153ca <icmp_input+0x1ba>
      break;
 80153c8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f7f9 f8ae 	bl	800e52c <pbuf_free>
  return;
 80153d0:	e013      	b.n	80153fa <icmp_input+0x1ea>
    goto lenerr;
 80153d2:	bf00      	nop
 80153d4:	e002      	b.n	80153dc <icmp_input+0x1cc>
    goto lenerr;
 80153d6:	bf00      	nop
 80153d8:	e000      	b.n	80153dc <icmp_input+0x1cc>
        goto lenerr;
 80153da:	bf00      	nop
lenerr:
  pbuf_free(p);
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f7f9 f8a5 	bl	800e52c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80153e2:	e00a      	b.n	80153fa <icmp_input+0x1ea>
        goto icmperr;
 80153e4:	bf00      	nop
 80153e6:	e004      	b.n	80153f2 <icmp_input+0x1e2>
        goto icmperr;
 80153e8:	bf00      	nop
 80153ea:	e002      	b.n	80153f2 <icmp_input+0x1e2>
          goto icmperr;
 80153ec:	bf00      	nop
 80153ee:	e000      	b.n	80153f2 <icmp_input+0x1e2>
          goto icmperr;
 80153f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f7f9 f89a 	bl	800e52c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80153f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80153fa:	3728      	adds	r7, #40	@ 0x28
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	200095f0 	.word	0x200095f0
 8015404:	20009604 	.word	0x20009604
 8015408:	0801a5c0 	.word	0x0801a5c0
 801540c:	0801a5f8 	.word	0x0801a5f8
 8015410:	0801a630 	.word	0x0801a630
 8015414:	0801a658 	.word	0x0801a658

08015418 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	460b      	mov	r3, r1
 8015422:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015424:	78fb      	ldrb	r3, [r7, #3]
 8015426:	461a      	mov	r2, r3
 8015428:	2103      	movs	r1, #3
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f000 f814 	bl	8015458 <icmp_send_response>
}
 8015430:	bf00      	nop
 8015432:	3708      	adds	r7, #8
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}

08015438 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	460b      	mov	r3, r1
 8015442:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015444:	78fb      	ldrb	r3, [r7, #3]
 8015446:	461a      	mov	r2, r3
 8015448:	210b      	movs	r1, #11
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f000 f804 	bl	8015458 <icmp_send_response>
}
 8015450:	bf00      	nop
 8015452:	3708      	adds	r7, #8
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b08c      	sub	sp, #48	@ 0x30
 801545c:	af04      	add	r7, sp, #16
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	460b      	mov	r3, r1
 8015462:	70fb      	strb	r3, [r7, #3]
 8015464:	4613      	mov	r3, r2
 8015466:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015468:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801546c:	2124      	movs	r1, #36	@ 0x24
 801546e:	2022      	movs	r0, #34	@ 0x22
 8015470:	f7f8 fd78 	bl	800df64 <pbuf_alloc>
 8015474:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015476:	69fb      	ldr	r3, [r7, #28]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d04c      	beq.n	8015516 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	895b      	ldrh	r3, [r3, #10]
 8015480:	2b23      	cmp	r3, #35	@ 0x23
 8015482:	d806      	bhi.n	8015492 <icmp_send_response+0x3a>
 8015484:	4b26      	ldr	r3, [pc, #152]	@ (8015520 <icmp_send_response+0xc8>)
 8015486:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801548a:	4926      	ldr	r1, [pc, #152]	@ (8015524 <icmp_send_response+0xcc>)
 801548c:	4826      	ldr	r0, [pc, #152]	@ (8015528 <icmp_send_response+0xd0>)
 801548e:	f001 fc4f 	bl	8016d30 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015498:	69fb      	ldr	r3, [r7, #28]
 801549a:	685b      	ldr	r3, [r3, #4]
 801549c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	78fa      	ldrb	r2, [r7, #3]
 80154a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	78ba      	ldrb	r2, [r7, #2]
 80154a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80154aa:	697b      	ldr	r3, [r7, #20]
 80154ac:	2200      	movs	r2, #0
 80154ae:	711a      	strb	r2, [r3, #4]
 80154b0:	2200      	movs	r2, #0
 80154b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	2200      	movs	r2, #0
 80154b8:	719a      	strb	r2, [r3, #6]
 80154ba:	2200      	movs	r2, #0
 80154bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80154be:	69fb      	ldr	r3, [r7, #28]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	f103 0008 	add.w	r0, r3, #8
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	221c      	movs	r2, #28
 80154cc:	4619      	mov	r1, r3
 80154ce:	f001 fe5a 	bl	8017186 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	68db      	ldr	r3, [r3, #12]
 80154d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80154d8:	f107 030c 	add.w	r3, r7, #12
 80154dc:	4618      	mov	r0, r3
 80154de:	f000 f825 	bl	801552c <ip4_route>
 80154e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d011      	beq.n	801550e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	2200      	movs	r2, #0
 80154ee:	709a      	strb	r2, [r3, #2]
 80154f0:	2200      	movs	r2, #0
 80154f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80154f4:	f107 020c 	add.w	r2, r7, #12
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	9302      	str	r3, [sp, #8]
 80154fc:	2301      	movs	r3, #1
 80154fe:	9301      	str	r3, [sp, #4]
 8015500:	2300      	movs	r3, #0
 8015502:	9300      	str	r3, [sp, #0]
 8015504:	23ff      	movs	r3, #255	@ 0xff
 8015506:	2100      	movs	r1, #0
 8015508:	69f8      	ldr	r0, [r7, #28]
 801550a:	f000 f9cd 	bl	80158a8 <ip4_output_if>
  }
  pbuf_free(q);
 801550e:	69f8      	ldr	r0, [r7, #28]
 8015510:	f7f9 f80c 	bl	800e52c <pbuf_free>
 8015514:	e000      	b.n	8015518 <icmp_send_response+0xc0>
    return;
 8015516:	bf00      	nop
}
 8015518:	3720      	adds	r7, #32
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}
 801551e:	bf00      	nop
 8015520:	0801a5c0 	.word	0x0801a5c0
 8015524:	0801a68c 	.word	0x0801a68c
 8015528:	0801a630 	.word	0x0801a630

0801552c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015534:	4b33      	ldr	r3, [pc, #204]	@ (8015604 <ip4_route+0xd8>)
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	60fb      	str	r3, [r7, #12]
 801553a:	e036      	b.n	80155aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015542:	f003 0301 	and.w	r3, r3, #1
 8015546:	b2db      	uxtb	r3, r3
 8015548:	2b00      	cmp	r3, #0
 801554a:	d02b      	beq.n	80155a4 <ip4_route+0x78>
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015552:	089b      	lsrs	r3, r3, #2
 8015554:	f003 0301 	and.w	r3, r3, #1
 8015558:	b2db      	uxtb	r3, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	d022      	beq.n	80155a4 <ip4_route+0x78>
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	3304      	adds	r3, #4
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d01d      	beq.n	80155a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681a      	ldr	r2, [r3, #0]
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	3304      	adds	r3, #4
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	405a      	eors	r2, r3
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	3308      	adds	r3, #8
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	4013      	ands	r3, r2
 801557c:	2b00      	cmp	r3, #0
 801557e:	d101      	bne.n	8015584 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	e038      	b.n	80155f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801558a:	f003 0302 	and.w	r3, r3, #2
 801558e:	2b00      	cmp	r3, #0
 8015590:	d108      	bne.n	80155a4 <ip4_route+0x78>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681a      	ldr	r2, [r3, #0]
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	330c      	adds	r3, #12
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	429a      	cmp	r2, r3
 801559e:	d101      	bne.n	80155a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	e028      	b.n	80155f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	60fb      	str	r3, [r7, #12]
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d1c5      	bne.n	801553c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80155b0:	4b15      	ldr	r3, [pc, #84]	@ (8015608 <ip4_route+0xdc>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d01a      	beq.n	80155ee <ip4_route+0xc2>
 80155b8:	4b13      	ldr	r3, [pc, #76]	@ (8015608 <ip4_route+0xdc>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80155c0:	f003 0301 	and.w	r3, r3, #1
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d012      	beq.n	80155ee <ip4_route+0xc2>
 80155c8:	4b0f      	ldr	r3, [pc, #60]	@ (8015608 <ip4_route+0xdc>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80155d0:	f003 0304 	and.w	r3, r3, #4
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d00a      	beq.n	80155ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80155d8:	4b0b      	ldr	r3, [pc, #44]	@ (8015608 <ip4_route+0xdc>)
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	3304      	adds	r3, #4
 80155de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d004      	beq.n	80155ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80155ec:	d101      	bne.n	80155f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80155ee:	2300      	movs	r3, #0
 80155f0:	e001      	b.n	80155f6 <ip4_route+0xca>
  }

  return netif_default;
 80155f2:	4b05      	ldr	r3, [pc, #20]	@ (8015608 <ip4_route+0xdc>)
 80155f4:	681b      	ldr	r3, [r3, #0]
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3714      	adds	r7, #20
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr
 8015602:	bf00      	nop
 8015604:	2000c6e4 	.word	0x2000c6e4
 8015608:	2000c6e8 	.word	0x2000c6e8

0801560c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b082      	sub	sp, #8
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801561a:	f003 0301 	and.w	r3, r3, #1
 801561e:	b2db      	uxtb	r3, r3
 8015620:	2b00      	cmp	r3, #0
 8015622:	d016      	beq.n	8015652 <ip4_input_accept+0x46>
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	3304      	adds	r3, #4
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d011      	beq.n	8015652 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801562e:	4b0b      	ldr	r3, [pc, #44]	@ (801565c <ip4_input_accept+0x50>)
 8015630:	695a      	ldr	r2, [r3, #20]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	3304      	adds	r3, #4
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	429a      	cmp	r2, r3
 801563a:	d008      	beq.n	801564e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801563c:	4b07      	ldr	r3, [pc, #28]	@ (801565c <ip4_input_accept+0x50>)
 801563e:	695b      	ldr	r3, [r3, #20]
 8015640:	6879      	ldr	r1, [r7, #4]
 8015642:	4618      	mov	r0, r3
 8015644:	f000 fa08 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 8015648:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801564a:	2b00      	cmp	r3, #0
 801564c:	d001      	beq.n	8015652 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801564e:	2301      	movs	r3, #1
 8015650:	e000      	b.n	8015654 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015652:	2300      	movs	r3, #0
}
 8015654:	4618      	mov	r0, r3
 8015656:	3708      	adds	r7, #8
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}
 801565c:	200095f0 	.word	0x200095f0

08015660 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b086      	sub	sp, #24
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
 8015668:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	781b      	ldrb	r3, [r3, #0]
 8015674:	091b      	lsrs	r3, r3, #4
 8015676:	b2db      	uxtb	r3, r3
 8015678:	2b04      	cmp	r3, #4
 801567a:	d004      	beq.n	8015686 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	f7f8 ff55 	bl	800e52c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015682:	2300      	movs	r3, #0
 8015684:	e107      	b.n	8015896 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	f003 030f 	and.w	r3, r3, #15
 801568e:	b2db      	uxtb	r3, r3
 8015690:	009b      	lsls	r3, r3, #2
 8015692:	b2db      	uxtb	r3, r3
 8015694:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015696:	697b      	ldr	r3, [r7, #20]
 8015698:	885b      	ldrh	r3, [r3, #2]
 801569a:	b29b      	uxth	r3, r3
 801569c:	4618      	mov	r0, r3
 801569e:	f7f7 fb57 	bl	800cd50 <lwip_htons>
 80156a2:	4603      	mov	r3, r0
 80156a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	891b      	ldrh	r3, [r3, #8]
 80156aa:	89ba      	ldrh	r2, [r7, #12]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d204      	bcs.n	80156ba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80156b0:	89bb      	ldrh	r3, [r7, #12]
 80156b2:	4619      	mov	r1, r3
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f7f8 fdb3 	bl	800e220 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	895b      	ldrh	r3, [r3, #10]
 80156be:	89fa      	ldrh	r2, [r7, #14]
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d807      	bhi.n	80156d4 <ip4_input+0x74>
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	891b      	ldrh	r3, [r3, #8]
 80156c8:	89ba      	ldrh	r2, [r7, #12]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d802      	bhi.n	80156d4 <ip4_input+0x74>
 80156ce:	89fb      	ldrh	r3, [r7, #14]
 80156d0:	2b13      	cmp	r3, #19
 80156d2:	d804      	bhi.n	80156de <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f7f8 ff29 	bl	800e52c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80156da:	2300      	movs	r3, #0
 80156dc:	e0db      	b.n	8015896 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	691b      	ldr	r3, [r3, #16]
 80156e2:	4a6f      	ldr	r2, [pc, #444]	@ (80158a0 <ip4_input+0x240>)
 80156e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	4a6d      	ldr	r2, [pc, #436]	@ (80158a0 <ip4_input+0x240>)
 80156ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156ee:	4b6c      	ldr	r3, [pc, #432]	@ (80158a0 <ip4_input+0x240>)
 80156f0:	695b      	ldr	r3, [r3, #20]
 80156f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80156f6:	2be0      	cmp	r3, #224	@ 0xe0
 80156f8:	d112      	bne.n	8015720 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015700:	f003 0301 	and.w	r3, r3, #1
 8015704:	b2db      	uxtb	r3, r3
 8015706:	2b00      	cmp	r3, #0
 8015708:	d007      	beq.n	801571a <ip4_input+0xba>
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	3304      	adds	r3, #4
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d002      	beq.n	801571a <ip4_input+0xba>
      netif = inp;
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	613b      	str	r3, [r7, #16]
 8015718:	e02a      	b.n	8015770 <ip4_input+0x110>
    } else {
      netif = NULL;
 801571a:	2300      	movs	r3, #0
 801571c:	613b      	str	r3, [r7, #16]
 801571e:	e027      	b.n	8015770 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015720:	6838      	ldr	r0, [r7, #0]
 8015722:	f7ff ff73 	bl	801560c <ip4_input_accept>
 8015726:	4603      	mov	r3, r0
 8015728:	2b00      	cmp	r3, #0
 801572a:	d002      	beq.n	8015732 <ip4_input+0xd2>
      netif = inp;
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	613b      	str	r3, [r7, #16]
 8015730:	e01e      	b.n	8015770 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015732:	2300      	movs	r3, #0
 8015734:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015736:	4b5a      	ldr	r3, [pc, #360]	@ (80158a0 <ip4_input+0x240>)
 8015738:	695b      	ldr	r3, [r3, #20]
 801573a:	b2db      	uxtb	r3, r3
 801573c:	2b7f      	cmp	r3, #127	@ 0x7f
 801573e:	d017      	beq.n	8015770 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015740:	4b58      	ldr	r3, [pc, #352]	@ (80158a4 <ip4_input+0x244>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	613b      	str	r3, [r7, #16]
 8015746:	e00e      	b.n	8015766 <ip4_input+0x106>
          if (netif == inp) {
 8015748:	693a      	ldr	r2, [r7, #16]
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	429a      	cmp	r2, r3
 801574e:	d006      	beq.n	801575e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015750:	6938      	ldr	r0, [r7, #16]
 8015752:	f7ff ff5b 	bl	801560c <ip4_input_accept>
 8015756:	4603      	mov	r3, r0
 8015758:	2b00      	cmp	r3, #0
 801575a:	d108      	bne.n	801576e <ip4_input+0x10e>
 801575c:	e000      	b.n	8015760 <ip4_input+0x100>
            continue;
 801575e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	613b      	str	r3, [r7, #16]
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d1ed      	bne.n	8015748 <ip4_input+0xe8>
 801576c:	e000      	b.n	8015770 <ip4_input+0x110>
            break;
 801576e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015770:	4b4b      	ldr	r3, [pc, #300]	@ (80158a0 <ip4_input+0x240>)
 8015772:	691b      	ldr	r3, [r3, #16]
 8015774:	6839      	ldr	r1, [r7, #0]
 8015776:	4618      	mov	r0, r3
 8015778:	f000 f96e 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 801577c:	4603      	mov	r3, r0
 801577e:	2b00      	cmp	r3, #0
 8015780:	d105      	bne.n	801578e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015782:	4b47      	ldr	r3, [pc, #284]	@ (80158a0 <ip4_input+0x240>)
 8015784:	691b      	ldr	r3, [r3, #16]
 8015786:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801578a:	2be0      	cmp	r3, #224	@ 0xe0
 801578c:	d104      	bne.n	8015798 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f7f8 fecc 	bl	800e52c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015794:	2300      	movs	r3, #0
 8015796:	e07e      	b.n	8015896 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d104      	bne.n	80157a8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7f8 fec4 	bl	800e52c <pbuf_free>
    return ERR_OK;
 80157a4:	2300      	movs	r3, #0
 80157a6:	e076      	b.n	8015896 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	88db      	ldrh	r3, [r3, #6]
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	461a      	mov	r2, r3
 80157b0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80157b4:	4013      	ands	r3, r2
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d00b      	beq.n	80157d2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f000 fc92 	bl	80160e4 <ip4_reass>
 80157c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d101      	bne.n	80157cc <ip4_input+0x16c>
      return ERR_OK;
 80157c8:	2300      	movs	r3, #0
 80157ca:	e064      	b.n	8015896 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80157d2:	4a33      	ldr	r2, [pc, #204]	@ (80158a0 <ip4_input+0x240>)
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80157d8:	4a31      	ldr	r2, [pc, #196]	@ (80158a0 <ip4_input+0x240>)
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80157de:	4a30      	ldr	r2, [pc, #192]	@ (80158a0 <ip4_input+0x240>)
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	f003 030f 	and.w	r3, r3, #15
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	009b      	lsls	r3, r3, #2
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	461a      	mov	r2, r3
 80157f4:	4b2a      	ldr	r3, [pc, #168]	@ (80158a0 <ip4_input+0x240>)
 80157f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80157f8:	89fb      	ldrh	r3, [r7, #14]
 80157fa:	4619      	mov	r1, r3
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7f8 fe0f 	bl	800e420 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	7a5b      	ldrb	r3, [r3, #9]
 8015806:	2b11      	cmp	r3, #17
 8015808:	d006      	beq.n	8015818 <ip4_input+0x1b8>
 801580a:	2b11      	cmp	r3, #17
 801580c:	dc13      	bgt.n	8015836 <ip4_input+0x1d6>
 801580e:	2b01      	cmp	r3, #1
 8015810:	d00c      	beq.n	801582c <ip4_input+0x1cc>
 8015812:	2b06      	cmp	r3, #6
 8015814:	d005      	beq.n	8015822 <ip4_input+0x1c2>
 8015816:	e00e      	b.n	8015836 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015818:	6839      	ldr	r1, [r7, #0]
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f7fe fc68 	bl	80140f0 <udp_input>
        break;
 8015820:	e026      	b.n	8015870 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015822:	6839      	ldr	r1, [r7, #0]
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f7fa fcb7 	bl	8010198 <tcp_input>
        break;
 801582a:	e021      	b.n	8015870 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801582c:	6839      	ldr	r1, [r7, #0]
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f7ff fcee 	bl	8015210 <icmp_input>
        break;
 8015834:	e01c      	b.n	8015870 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015836:	4b1a      	ldr	r3, [pc, #104]	@ (80158a0 <ip4_input+0x240>)
 8015838:	695b      	ldr	r3, [r3, #20]
 801583a:	6939      	ldr	r1, [r7, #16]
 801583c:	4618      	mov	r0, r3
 801583e:	f000 f90b 	bl	8015a58 <ip4_addr_isbroadcast_u32>
 8015842:	4603      	mov	r3, r0
 8015844:	2b00      	cmp	r3, #0
 8015846:	d10f      	bne.n	8015868 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015848:	4b15      	ldr	r3, [pc, #84]	@ (80158a0 <ip4_input+0x240>)
 801584a:	695b      	ldr	r3, [r3, #20]
 801584c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015850:	2be0      	cmp	r3, #224	@ 0xe0
 8015852:	d009      	beq.n	8015868 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015858:	4619      	mov	r1, r3
 801585a:	6878      	ldr	r0, [r7, #4]
 801585c:	f7f8 fe53 	bl	800e506 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015860:	2102      	movs	r1, #2
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f7ff fdd8 	bl	8015418 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7f8 fe5f 	bl	800e52c <pbuf_free>
        break;
 801586e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015870:	4b0b      	ldr	r3, [pc, #44]	@ (80158a0 <ip4_input+0x240>)
 8015872:	2200      	movs	r2, #0
 8015874:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015876:	4b0a      	ldr	r3, [pc, #40]	@ (80158a0 <ip4_input+0x240>)
 8015878:	2200      	movs	r2, #0
 801587a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801587c:	4b08      	ldr	r3, [pc, #32]	@ (80158a0 <ip4_input+0x240>)
 801587e:	2200      	movs	r2, #0
 8015880:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015882:	4b07      	ldr	r3, [pc, #28]	@ (80158a0 <ip4_input+0x240>)
 8015884:	2200      	movs	r2, #0
 8015886:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015888:	4b05      	ldr	r3, [pc, #20]	@ (80158a0 <ip4_input+0x240>)
 801588a:	2200      	movs	r2, #0
 801588c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801588e:	4b04      	ldr	r3, [pc, #16]	@ (80158a0 <ip4_input+0x240>)
 8015890:	2200      	movs	r2, #0
 8015892:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	3718      	adds	r7, #24
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	200095f0 	.word	0x200095f0
 80158a4:	2000c6e4 	.word	0x2000c6e4

080158a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b08a      	sub	sp, #40	@ 0x28
 80158ac:	af04      	add	r7, sp, #16
 80158ae:	60f8      	str	r0, [r7, #12]
 80158b0:	60b9      	str	r1, [r7, #8]
 80158b2:	607a      	str	r2, [r7, #4]
 80158b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d009      	beq.n	80158d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d003      	beq.n	80158ce <ip4_output_if+0x26>
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d102      	bne.n	80158d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80158ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158d0:	3304      	adds	r3, #4
 80158d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80158d4:	78fa      	ldrb	r2, [r7, #3]
 80158d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158d8:	9302      	str	r3, [sp, #8]
 80158da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80158de:	9301      	str	r3, [sp, #4]
 80158e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80158e4:	9300      	str	r3, [sp, #0]
 80158e6:	4613      	mov	r3, r2
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	6979      	ldr	r1, [r7, #20]
 80158ec:	68f8      	ldr	r0, [r7, #12]
 80158ee:	f000 f805 	bl	80158fc <ip4_output_if_src>
 80158f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3718      	adds	r7, #24
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b088      	sub	sp, #32
 8015900:	af00      	add	r7, sp, #0
 8015902:	60f8      	str	r0, [r7, #12]
 8015904:	60b9      	str	r1, [r7, #8]
 8015906:	607a      	str	r2, [r7, #4]
 8015908:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	7b9b      	ldrb	r3, [r3, #14]
 801590e:	2b01      	cmp	r3, #1
 8015910:	d006      	beq.n	8015920 <ip4_output_if_src+0x24>
 8015912:	4b4b      	ldr	r3, [pc, #300]	@ (8015a40 <ip4_output_if_src+0x144>)
 8015914:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015918:	494a      	ldr	r1, [pc, #296]	@ (8015a44 <ip4_output_if_src+0x148>)
 801591a:	484b      	ldr	r0, [pc, #300]	@ (8015a48 <ip4_output_if_src+0x14c>)
 801591c:	f001 fa08 	bl	8016d30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d060      	beq.n	80159e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015926:	2314      	movs	r3, #20
 8015928:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801592a:	2114      	movs	r1, #20
 801592c:	68f8      	ldr	r0, [r7, #12]
 801592e:	f7f8 fd67 	bl	800e400 <pbuf_add_header>
 8015932:	4603      	mov	r3, r0
 8015934:	2b00      	cmp	r3, #0
 8015936:	d002      	beq.n	801593e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015938:	f06f 0301 	mvn.w	r3, #1
 801593c:	e07c      	b.n	8015a38 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	685b      	ldr	r3, [r3, #4]
 8015942:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	895b      	ldrh	r3, [r3, #10]
 8015948:	2b13      	cmp	r3, #19
 801594a:	d806      	bhi.n	801595a <ip4_output_if_src+0x5e>
 801594c:	4b3c      	ldr	r3, [pc, #240]	@ (8015a40 <ip4_output_if_src+0x144>)
 801594e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015952:	493e      	ldr	r1, [pc, #248]	@ (8015a4c <ip4_output_if_src+0x150>)
 8015954:	483c      	ldr	r0, [pc, #240]	@ (8015a48 <ip4_output_if_src+0x14c>)
 8015956:	f001 f9eb 	bl	8016d30 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801595a:	69fb      	ldr	r3, [r7, #28]
 801595c:	78fa      	ldrb	r2, [r7, #3]
 801595e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015966:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681a      	ldr	r2, [r3, #0]
 801596c:	69fb      	ldr	r3, [r7, #28]
 801596e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015970:	8b7b      	ldrh	r3, [r7, #26]
 8015972:	089b      	lsrs	r3, r3, #2
 8015974:	b29b      	uxth	r3, r3
 8015976:	b2db      	uxtb	r3, r3
 8015978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801597c:	b2da      	uxtb	r2, r3
 801597e:	69fb      	ldr	r3, [r7, #28]
 8015980:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015982:	69fb      	ldr	r3, [r7, #28]
 8015984:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015988:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	891b      	ldrh	r3, [r3, #8]
 801598e:	4618      	mov	r0, r3
 8015990:	f7f7 f9de 	bl	800cd50 <lwip_htons>
 8015994:	4603      	mov	r3, r0
 8015996:	461a      	mov	r2, r3
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	2200      	movs	r2, #0
 80159a0:	719a      	strb	r2, [r3, #6]
 80159a2:	2200      	movs	r2, #0
 80159a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80159a6:	4b2a      	ldr	r3, [pc, #168]	@ (8015a50 <ip4_output_if_src+0x154>)
 80159a8:	881b      	ldrh	r3, [r3, #0]
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7f7 f9d0 	bl	800cd50 <lwip_htons>
 80159b0:	4603      	mov	r3, r0
 80159b2:	461a      	mov	r2, r3
 80159b4:	69fb      	ldr	r3, [r7, #28]
 80159b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80159b8:	4b25      	ldr	r3, [pc, #148]	@ (8015a50 <ip4_output_if_src+0x154>)
 80159ba:	881b      	ldrh	r3, [r3, #0]
 80159bc:	3301      	adds	r3, #1
 80159be:	b29a      	uxth	r2, r3
 80159c0:	4b23      	ldr	r3, [pc, #140]	@ (8015a50 <ip4_output_if_src+0x154>)
 80159c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d104      	bne.n	80159d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80159ca:	4b22      	ldr	r3, [pc, #136]	@ (8015a54 <ip4_output_if_src+0x158>)
 80159cc:	681a      	ldr	r2, [r3, #0]
 80159ce:	69fb      	ldr	r3, [r7, #28]
 80159d0:	60da      	str	r2, [r3, #12]
 80159d2:	e003      	b.n	80159dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	681a      	ldr	r2, [r3, #0]
 80159d8:	69fb      	ldr	r3, [r7, #28]
 80159da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80159dc:	69fb      	ldr	r3, [r7, #28]
 80159de:	2200      	movs	r2, #0
 80159e0:	729a      	strb	r2, [r3, #10]
 80159e2:	2200      	movs	r2, #0
 80159e4:	72da      	strb	r2, [r3, #11]
 80159e6:	e00f      	b.n	8015a08 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	895b      	ldrh	r3, [r3, #10]
 80159ec:	2b13      	cmp	r3, #19
 80159ee:	d802      	bhi.n	80159f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80159f0:	f06f 0301 	mvn.w	r3, #1
 80159f4:	e020      	b.n	8015a38 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80159fc:	69fb      	ldr	r3, [r7, #28]
 80159fe:	691b      	ldr	r3, [r3, #16]
 8015a00:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015a02:	f107 0314 	add.w	r3, r7, #20
 8015a06:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d00c      	beq.n	8015a2a <ip4_output_if_src+0x12e>
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	891a      	ldrh	r2, [r3, #8]
 8015a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a16:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d906      	bls.n	8015a2a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015a1c:	687a      	ldr	r2, [r7, #4]
 8015a1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015a20:	68f8      	ldr	r0, [r7, #12]
 8015a22:	f000 fd53 	bl	80164cc <ip4_frag>
 8015a26:	4603      	mov	r3, r0
 8015a28:	e006      	b.n	8015a38 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a2c:	695b      	ldr	r3, [r3, #20]
 8015a2e:	687a      	ldr	r2, [r7, #4]
 8015a30:	68f9      	ldr	r1, [r7, #12]
 8015a32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a34:	4798      	blx	r3
 8015a36:	4603      	mov	r3, r0
}
 8015a38:	4618      	mov	r0, r3
 8015a3a:	3720      	adds	r7, #32
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	0801a6b8 	.word	0x0801a6b8
 8015a44:	0801a6ec 	.word	0x0801a6ec
 8015a48:	0801a6f8 	.word	0x0801a6f8
 8015a4c:	0801a720 	.word	0x0801a720
 8015a50:	2000c842 	.word	0x2000c842
 8015a54:	0801ab48 	.word	0x0801ab48

08015a58 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b085      	sub	sp, #20
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015a6c:	d002      	beq.n	8015a74 <ip4_addr_isbroadcast_u32+0x1c>
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d101      	bne.n	8015a78 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015a74:	2301      	movs	r3, #1
 8015a76:	e02a      	b.n	8015ace <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015a7e:	f003 0302 	and.w	r3, r3, #2
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d101      	bne.n	8015a8a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015a86:	2300      	movs	r3, #0
 8015a88:	e021      	b.n	8015ace <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	3304      	adds	r3, #4
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d101      	bne.n	8015a9a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015a96:	2300      	movs	r3, #0
 8015a98:	e019      	b.n	8015ace <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015a9a:	68fa      	ldr	r2, [r7, #12]
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	3304      	adds	r3, #4
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	405a      	eors	r2, r3
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	3308      	adds	r3, #8
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	4013      	ands	r3, r2
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d10d      	bne.n	8015acc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	3308      	adds	r3, #8
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	43da      	mvns	r2, r3
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	3308      	adds	r3, #8
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d101      	bne.n	8015acc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015ac8:	2301      	movs	r3, #1
 8015aca:	e000      	b.n	8015ace <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015acc:	2300      	movs	r3, #0
  }
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3714      	adds	r7, #20
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad8:	4770      	bx	lr
	...

08015adc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b084      	sub	sp, #16
 8015ae0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015ae6:	4b12      	ldr	r3, [pc, #72]	@ (8015b30 <ip_reass_tmr+0x54>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015aec:	e018      	b.n	8015b20 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	7fdb      	ldrb	r3, [r3, #31]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d00b      	beq.n	8015b0e <ip_reass_tmr+0x32>
      r->timer--;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	7fdb      	ldrb	r3, [r3, #31]
 8015afa:	3b01      	subs	r3, #1
 8015afc:	b2da      	uxtb	r2, r3
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	60fb      	str	r3, [r7, #12]
 8015b0c:	e008      	b.n	8015b20 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015b18:	68b9      	ldr	r1, [r7, #8]
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f000 f80a 	bl	8015b34 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d1e3      	bne.n	8015aee <ip_reass_tmr+0x12>
    }
  }
}
 8015b26:	bf00      	nop
 8015b28:	bf00      	nop
 8015b2a:	3710      	adds	r7, #16
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	2000c844 	.word	0x2000c844

08015b34 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b088      	sub	sp, #32
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015b42:	683a      	ldr	r2, [r7, #0]
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d105      	bne.n	8015b56 <ip_reass_free_complete_datagram+0x22>
 8015b4a:	4b45      	ldr	r3, [pc, #276]	@ (8015c60 <ip_reass_free_complete_datagram+0x12c>)
 8015b4c:	22ab      	movs	r2, #171	@ 0xab
 8015b4e:	4945      	ldr	r1, [pc, #276]	@ (8015c64 <ip_reass_free_complete_datagram+0x130>)
 8015b50:	4845      	ldr	r0, [pc, #276]	@ (8015c68 <ip_reass_free_complete_datagram+0x134>)
 8015b52:	f001 f8ed 	bl	8016d30 <iprintf>
  if (prev != NULL) {
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d00a      	beq.n	8015b72 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	687a      	ldr	r2, [r7, #4]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d005      	beq.n	8015b72 <ip_reass_free_complete_datagram+0x3e>
 8015b66:	4b3e      	ldr	r3, [pc, #248]	@ (8015c60 <ip_reass_free_complete_datagram+0x12c>)
 8015b68:	22ad      	movs	r2, #173	@ 0xad
 8015b6a:	4940      	ldr	r1, [pc, #256]	@ (8015c6c <ip_reass_free_complete_datagram+0x138>)
 8015b6c:	483e      	ldr	r0, [pc, #248]	@ (8015c68 <ip_reass_free_complete_datagram+0x134>)
 8015b6e:	f001 f8df 	bl	8016d30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	685b      	ldr	r3, [r3, #4]
 8015b76:	685b      	ldr	r3, [r3, #4]
 8015b78:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	889b      	ldrh	r3, [r3, #4]
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d12a      	bne.n	8015bda <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	681a      	ldr	r2, [r3, #0]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015b92:	69bb      	ldr	r3, [r7, #24]
 8015b94:	6858      	ldr	r0, [r3, #4]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	3308      	adds	r3, #8
 8015b9a:	2214      	movs	r2, #20
 8015b9c:	4619      	mov	r1, r3
 8015b9e:	f001 faf2 	bl	8017186 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015ba2:	2101      	movs	r1, #1
 8015ba4:	69b8      	ldr	r0, [r7, #24]
 8015ba6:	f7ff fc47 	bl	8015438 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015baa:	69b8      	ldr	r0, [r7, #24]
 8015bac:	f7f8 fd4c 	bl	800e648 <pbuf_clen>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015bb4:	8bfa      	ldrh	r2, [r7, #30]
 8015bb6:	8a7b      	ldrh	r3, [r7, #18]
 8015bb8:	4413      	add	r3, r2
 8015bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015bbe:	db05      	blt.n	8015bcc <ip_reass_free_complete_datagram+0x98>
 8015bc0:	4b27      	ldr	r3, [pc, #156]	@ (8015c60 <ip_reass_free_complete_datagram+0x12c>)
 8015bc2:	22bc      	movs	r2, #188	@ 0xbc
 8015bc4:	492a      	ldr	r1, [pc, #168]	@ (8015c70 <ip_reass_free_complete_datagram+0x13c>)
 8015bc6:	4828      	ldr	r0, [pc, #160]	@ (8015c68 <ip_reass_free_complete_datagram+0x134>)
 8015bc8:	f001 f8b2 	bl	8016d30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015bcc:	8bfa      	ldrh	r2, [r7, #30]
 8015bce:	8a7b      	ldrh	r3, [r7, #18]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015bd4:	69b8      	ldr	r0, [r7, #24]
 8015bd6:	f7f8 fca9 	bl	800e52c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015be0:	e01f      	b.n	8015c22 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015be2:	69bb      	ldr	r3, [r7, #24]
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015be8:	69bb      	ldr	r3, [r7, #24]
 8015bea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f7f8 fd28 	bl	800e648 <pbuf_clen>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015bfc:	8bfa      	ldrh	r2, [r7, #30]
 8015bfe:	8a7b      	ldrh	r3, [r7, #18]
 8015c00:	4413      	add	r3, r2
 8015c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015c06:	db05      	blt.n	8015c14 <ip_reass_free_complete_datagram+0xe0>
 8015c08:	4b15      	ldr	r3, [pc, #84]	@ (8015c60 <ip_reass_free_complete_datagram+0x12c>)
 8015c0a:	22cc      	movs	r2, #204	@ 0xcc
 8015c0c:	4918      	ldr	r1, [pc, #96]	@ (8015c70 <ip_reass_free_complete_datagram+0x13c>)
 8015c0e:	4816      	ldr	r0, [pc, #88]	@ (8015c68 <ip_reass_free_complete_datagram+0x134>)
 8015c10:	f001 f88e 	bl	8016d30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015c14:	8bfa      	ldrh	r2, [r7, #30]
 8015c16:	8a7b      	ldrh	r3, [r7, #18]
 8015c18:	4413      	add	r3, r2
 8015c1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015c1c:	68f8      	ldr	r0, [r7, #12]
 8015c1e:	f7f8 fc85 	bl	800e52c <pbuf_free>
  while (p != NULL) {
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d1dc      	bne.n	8015be2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015c28:	6839      	ldr	r1, [r7, #0]
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 f8c2 	bl	8015db4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015c30:	4b10      	ldr	r3, [pc, #64]	@ (8015c74 <ip_reass_free_complete_datagram+0x140>)
 8015c32:	881b      	ldrh	r3, [r3, #0]
 8015c34:	8bfa      	ldrh	r2, [r7, #30]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d905      	bls.n	8015c46 <ip_reass_free_complete_datagram+0x112>
 8015c3a:	4b09      	ldr	r3, [pc, #36]	@ (8015c60 <ip_reass_free_complete_datagram+0x12c>)
 8015c3c:	22d2      	movs	r2, #210	@ 0xd2
 8015c3e:	490e      	ldr	r1, [pc, #56]	@ (8015c78 <ip_reass_free_complete_datagram+0x144>)
 8015c40:	4809      	ldr	r0, [pc, #36]	@ (8015c68 <ip_reass_free_complete_datagram+0x134>)
 8015c42:	f001 f875 	bl	8016d30 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015c46:	4b0b      	ldr	r3, [pc, #44]	@ (8015c74 <ip_reass_free_complete_datagram+0x140>)
 8015c48:	881a      	ldrh	r2, [r3, #0]
 8015c4a:	8bfb      	ldrh	r3, [r7, #30]
 8015c4c:	1ad3      	subs	r3, r2, r3
 8015c4e:	b29a      	uxth	r2, r3
 8015c50:	4b08      	ldr	r3, [pc, #32]	@ (8015c74 <ip_reass_free_complete_datagram+0x140>)
 8015c52:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015c54:	8bfb      	ldrh	r3, [r7, #30]
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3720      	adds	r7, #32
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	0801a750 	.word	0x0801a750
 8015c64:	0801a78c 	.word	0x0801a78c
 8015c68:	0801a798 	.word	0x0801a798
 8015c6c:	0801a7c0 	.word	0x0801a7c0
 8015c70:	0801a7d4 	.word	0x0801a7d4
 8015c74:	2000c848 	.word	0x2000c848
 8015c78:	0801a7f4 	.word	0x0801a7f4

08015c7c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b08a      	sub	sp, #40	@ 0x28
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015c86:	2300      	movs	r3, #0
 8015c88:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015c92:	2300      	movs	r3, #0
 8015c94:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015c96:	2300      	movs	r3, #0
 8015c98:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015c9a:	4b28      	ldr	r3, [pc, #160]	@ (8015d3c <ip_reass_remove_oldest_datagram+0xc0>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015ca0:	e030      	b.n	8015d04 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca4:	695a      	ldr	r2, [r3, #20]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	68db      	ldr	r3, [r3, #12]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d10c      	bne.n	8015cc8 <ip_reass_remove_oldest_datagram+0x4c>
 8015cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cb0:	699a      	ldr	r2, [r3, #24]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	691b      	ldr	r3, [r3, #16]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d106      	bne.n	8015cc8 <ip_reass_remove_oldest_datagram+0x4c>
 8015cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cbc:	899a      	ldrh	r2, [r3, #12]
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	889b      	ldrh	r3, [r3, #4]
 8015cc2:	b29b      	uxth	r3, r3
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d014      	beq.n	8015cf2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	3301      	adds	r3, #1
 8015ccc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015cce:	6a3b      	ldr	r3, [r7, #32]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d104      	bne.n	8015cde <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cd6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015cd8:	69fb      	ldr	r3, [r7, #28]
 8015cda:	61bb      	str	r3, [r7, #24]
 8015cdc:	e009      	b.n	8015cf2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ce0:	7fda      	ldrb	r2, [r3, #31]
 8015ce2:	6a3b      	ldr	r3, [r7, #32]
 8015ce4:	7fdb      	ldrb	r3, [r3, #31]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d803      	bhi.n	8015cf2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015cee:	69fb      	ldr	r3, [r7, #28]
 8015cf0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d001      	beq.n	8015cfe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cfc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d1cb      	bne.n	8015ca2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015d0a:	6a3b      	ldr	r3, [r7, #32]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d008      	beq.n	8015d22 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015d10:	69b9      	ldr	r1, [r7, #24]
 8015d12:	6a38      	ldr	r0, [r7, #32]
 8015d14:	f7ff ff0e 	bl	8015b34 <ip_reass_free_complete_datagram>
 8015d18:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015d1a:	697a      	ldr	r2, [r7, #20]
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	4413      	add	r3, r2
 8015d20:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015d22:	697a      	ldr	r2, [r7, #20]
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	429a      	cmp	r2, r3
 8015d28:	da02      	bge.n	8015d30 <ip_reass_remove_oldest_datagram+0xb4>
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	2b01      	cmp	r3, #1
 8015d2e:	dcac      	bgt.n	8015c8a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015d30:	697b      	ldr	r3, [r7, #20]
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3728      	adds	r7, #40	@ 0x28
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	2000c844 	.word	0x2000c844

08015d40 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b084      	sub	sp, #16
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
 8015d48:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015d4a:	2004      	movs	r0, #4
 8015d4c:	f7f7 fcd4 	bl	800d6f8 <memp_malloc>
 8015d50:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d110      	bne.n	8015d7a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015d58:	6839      	ldr	r1, [r7, #0]
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	f7ff ff8e 	bl	8015c7c <ip_reass_remove_oldest_datagram>
 8015d60:	4602      	mov	r2, r0
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	4293      	cmp	r3, r2
 8015d66:	dc03      	bgt.n	8015d70 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015d68:	2004      	movs	r0, #4
 8015d6a:	f7f7 fcc5 	bl	800d6f8 <memp_malloc>
 8015d6e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d101      	bne.n	8015d7a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015d76:	2300      	movs	r3, #0
 8015d78:	e016      	b.n	8015da8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015d7a:	2220      	movs	r2, #32
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	68f8      	ldr	r0, [r7, #12]
 8015d80:	f001 f92e 	bl	8016fe0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	220f      	movs	r2, #15
 8015d88:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015d8a:	4b09      	ldr	r3, [pc, #36]	@ (8015db0 <ip_reass_enqueue_new_datagram+0x70>)
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015d92:	4a07      	ldr	r2, [pc, #28]	@ (8015db0 <ip_reass_enqueue_new_datagram+0x70>)
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	3308      	adds	r3, #8
 8015d9c:	2214      	movs	r2, #20
 8015d9e:	6879      	ldr	r1, [r7, #4]
 8015da0:	4618      	mov	r0, r3
 8015da2:	f001 f9f0 	bl	8017186 <memcpy>
  return ipr;
 8015da6:	68fb      	ldr	r3, [r7, #12]
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3710      	adds	r7, #16
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}
 8015db0:	2000c844 	.word	0x2000c844

08015db4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015dbe:	4b10      	ldr	r3, [pc, #64]	@ (8015e00 <ip_reass_dequeue_datagram+0x4c>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	687a      	ldr	r2, [r7, #4]
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d104      	bne.n	8015dd2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8015e00 <ip_reass_dequeue_datagram+0x4c>)
 8015dce:	6013      	str	r3, [r2, #0]
 8015dd0:	e00d      	b.n	8015dee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d106      	bne.n	8015de6 <ip_reass_dequeue_datagram+0x32>
 8015dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8015e04 <ip_reass_dequeue_datagram+0x50>)
 8015dda:	f240 1245 	movw	r2, #325	@ 0x145
 8015dde:	490a      	ldr	r1, [pc, #40]	@ (8015e08 <ip_reass_dequeue_datagram+0x54>)
 8015de0:	480a      	ldr	r0, [pc, #40]	@ (8015e0c <ip_reass_dequeue_datagram+0x58>)
 8015de2:	f000 ffa5 	bl	8016d30 <iprintf>
    prev->next = ipr->next;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681a      	ldr	r2, [r3, #0]
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015dee:	6879      	ldr	r1, [r7, #4]
 8015df0:	2004      	movs	r0, #4
 8015df2:	f7f7 fcf7 	bl	800d7e4 <memp_free>
}
 8015df6:	bf00      	nop
 8015df8:	3708      	adds	r7, #8
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	2000c844 	.word	0x2000c844
 8015e04:	0801a750 	.word	0x0801a750
 8015e08:	0801a818 	.word	0x0801a818
 8015e0c:	0801a798 	.word	0x0801a798

08015e10 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b08c      	sub	sp, #48	@ 0x30
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	60f8      	str	r0, [r7, #12]
 8015e18:	60b9      	str	r1, [r7, #8]
 8015e1a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015e20:	2301      	movs	r3, #1
 8015e22:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	685b      	ldr	r3, [r3, #4]
 8015e28:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	885b      	ldrh	r3, [r3, #2]
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7f6 ff8d 	bl	800cd50 <lwip_htons>
 8015e36:	4603      	mov	r3, r0
 8015e38:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	781b      	ldrb	r3, [r3, #0]
 8015e3e:	f003 030f 	and.w	r3, r3, #15
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015e48:	7e7b      	ldrb	r3, [r7, #25]
 8015e4a:	b29b      	uxth	r3, r3
 8015e4c:	8b7a      	ldrh	r2, [r7, #26]
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d202      	bcs.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015e56:	e135      	b.n	80160c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015e58:	7e7b      	ldrb	r3, [r7, #25]
 8015e5a:	b29b      	uxth	r3, r3
 8015e5c:	8b7a      	ldrh	r2, [r7, #26]
 8015e5e:	1ad3      	subs	r3, r2, r3
 8015e60:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015e62:	69fb      	ldr	r3, [r7, #28]
 8015e64:	88db      	ldrh	r3, [r3, #6]
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f7f6 ff71 	bl	800cd50 <lwip_htons>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e74:	b29b      	uxth	r3, r3
 8015e76:	00db      	lsls	r3, r3, #3
 8015e78:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	685b      	ldr	r3, [r3, #4]
 8015e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e82:	2200      	movs	r2, #0
 8015e84:	701a      	strb	r2, [r3, #0]
 8015e86:	2200      	movs	r2, #0
 8015e88:	705a      	strb	r2, [r3, #1]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	709a      	strb	r2, [r3, #2]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e94:	8afa      	ldrh	r2, [r7, #22]
 8015e96:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015e98:	8afa      	ldrh	r2, [r7, #22]
 8015e9a:	8b7b      	ldrh	r3, [r7, #26]
 8015e9c:	4413      	add	r3, r2
 8015e9e:	b29a      	uxth	r2, r3
 8015ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ea2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ea6:	88db      	ldrh	r3, [r3, #6]
 8015ea8:	b29b      	uxth	r3, r3
 8015eaa:	8afa      	ldrh	r2, [r7, #22]
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d902      	bls.n	8015eb6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015eb4:	e106      	b.n	80160c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8015ebc:	e068      	b.n	8015f90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec0:	685b      	ldr	r3, [r3, #4]
 8015ec2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec6:	889b      	ldrh	r3, [r3, #4]
 8015ec8:	b29a      	uxth	r2, r3
 8015eca:	693b      	ldr	r3, [r7, #16]
 8015ecc:	889b      	ldrh	r3, [r3, #4]
 8015ece:	b29b      	uxth	r3, r3
 8015ed0:	429a      	cmp	r2, r3
 8015ed2:	d235      	bcs.n	8015f40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ed8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d020      	beq.n	8015f22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ee2:	889b      	ldrh	r3, [r3, #4]
 8015ee4:	b29a      	uxth	r2, r3
 8015ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ee8:	88db      	ldrh	r3, [r3, #6]
 8015eea:	b29b      	uxth	r3, r3
 8015eec:	429a      	cmp	r2, r3
 8015eee:	d307      	bcc.n	8015f00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ef2:	88db      	ldrh	r3, [r3, #6]
 8015ef4:	b29a      	uxth	r2, r3
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	889b      	ldrh	r3, [r3, #4]
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d902      	bls.n	8015f06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f04:	e0de      	b.n	80160c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f08:	68ba      	ldr	r2, [r7, #8]
 8015f0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f0e:	88db      	ldrh	r3, [r3, #6]
 8015f10:	b29a      	uxth	r2, r3
 8015f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f14:	889b      	ldrh	r3, [r3, #4]
 8015f16:	b29b      	uxth	r3, r3
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d03d      	beq.n	8015f98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015f20:	e03a      	b.n	8015f98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f24:	88db      	ldrh	r3, [r3, #6]
 8015f26:	b29a      	uxth	r2, r3
 8015f28:	693b      	ldr	r3, [r7, #16]
 8015f2a:	889b      	ldrh	r3, [r3, #4]
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d902      	bls.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f36:	e0c5      	b.n	80160c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	605a      	str	r2, [r3, #4]
      break;
 8015f3e:	e02b      	b.n	8015f98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f42:	889b      	ldrh	r3, [r3, #4]
 8015f44:	b29a      	uxth	r2, r3
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	889b      	ldrh	r3, [r3, #4]
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d102      	bne.n	8015f56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f54:	e0b6      	b.n	80160c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f58:	889b      	ldrh	r3, [r3, #4]
 8015f5a:	b29a      	uxth	r2, r3
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	88db      	ldrh	r3, [r3, #6]
 8015f60:	b29b      	uxth	r3, r3
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d202      	bcs.n	8015f6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015f6a:	e0ab      	b.n	80160c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d009      	beq.n	8015f86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f74:	88db      	ldrh	r3, [r3, #6]
 8015f76:	b29a      	uxth	r2, r3
 8015f78:	693b      	ldr	r3, [r7, #16]
 8015f7a:	889b      	ldrh	r3, [r3, #4]
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	429a      	cmp	r2, r3
 8015f80:	d001      	beq.n	8015f86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015f82:	2300      	movs	r3, #0
 8015f84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d193      	bne.n	8015ebe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015f96:	e000      	b.n	8015f9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015f98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d12d      	bne.n	8015ffc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d01c      	beq.n	8015fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fa8:	88db      	ldrh	r3, [r3, #6]
 8015faa:	b29a      	uxth	r2, r3
 8015fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fae:	889b      	ldrh	r3, [r3, #4]
 8015fb0:	b29b      	uxth	r3, r3
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d906      	bls.n	8015fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015fb6:	4b45      	ldr	r3, [pc, #276]	@ (80160cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015fb8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015fbc:	4944      	ldr	r1, [pc, #272]	@ (80160d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015fbe:	4845      	ldr	r0, [pc, #276]	@ (80160d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015fc0:	f000 feb6 	bl	8016d30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fc6:	68ba      	ldr	r2, [r7, #8]
 8015fc8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fcc:	88db      	ldrh	r3, [r3, #6]
 8015fce:	b29a      	uxth	r2, r3
 8015fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fd2:	889b      	ldrh	r3, [r3, #4]
 8015fd4:	b29b      	uxth	r3, r3
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d010      	beq.n	8015ffc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	623b      	str	r3, [r7, #32]
 8015fde:	e00d      	b.n	8015ffc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	685b      	ldr	r3, [r3, #4]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d006      	beq.n	8015ff6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015fe8:	4b38      	ldr	r3, [pc, #224]	@ (80160cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015fea:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015fee:	493a      	ldr	r1, [pc, #232]	@ (80160d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015ff0:	4838      	ldr	r0, [pc, #224]	@ (80160d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ff2:	f000 fe9d 	bl	8016d30 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	68ba      	ldr	r2, [r7, #8]
 8015ffa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d105      	bne.n	801600e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	7f9b      	ldrb	r3, [r3, #30]
 8016006:	f003 0301 	and.w	r3, r3, #1
 801600a:	2b00      	cmp	r3, #0
 801600c:	d059      	beq.n	80160c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801600e:	6a3b      	ldr	r3, [r7, #32]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d04f      	beq.n	80160b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	685b      	ldr	r3, [r3, #4]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d006      	beq.n	801602a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	889b      	ldrh	r3, [r3, #4]
 8016024:	b29b      	uxth	r3, r3
 8016026:	2b00      	cmp	r3, #0
 8016028:	d002      	beq.n	8016030 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801602a:	2300      	movs	r3, #0
 801602c:	623b      	str	r3, [r7, #32]
 801602e:	e041      	b.n	80160b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016032:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801603a:	e012      	b.n	8016062 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801603e:	685b      	ldr	r3, [r3, #4]
 8016040:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016044:	88db      	ldrh	r3, [r3, #6]
 8016046:	b29a      	uxth	r2, r3
 8016048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801604a:	889b      	ldrh	r3, [r3, #4]
 801604c:	b29b      	uxth	r3, r3
 801604e:	429a      	cmp	r2, r3
 8016050:	d002      	beq.n	8016058 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016052:	2300      	movs	r3, #0
 8016054:	623b      	str	r3, [r7, #32]
            break;
 8016056:	e007      	b.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801605a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801605c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016064:	2b00      	cmp	r3, #0
 8016066:	d1e9      	bne.n	801603c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016068:	6a3b      	ldr	r3, [r7, #32]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d022      	beq.n	80160b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d106      	bne.n	8016084 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016076:	4b15      	ldr	r3, [pc, #84]	@ (80160cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016078:	f240 12df 	movw	r2, #479	@ 0x1df
 801607c:	4917      	ldr	r1, [pc, #92]	@ (80160dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801607e:	4815      	ldr	r0, [pc, #84]	@ (80160d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016080:	f000 fe56 	bl	8016d30 <iprintf>
          LWIP_ASSERT("sanity check",
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	685b      	ldr	r3, [r3, #4]
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801608c:	429a      	cmp	r2, r3
 801608e:	d106      	bne.n	801609e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016090:	4b0e      	ldr	r3, [pc, #56]	@ (80160cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016092:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016096:	4911      	ldr	r1, [pc, #68]	@ (80160dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016098:	480e      	ldr	r0, [pc, #56]	@ (80160d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801609a:	f000 fe49 	bl	8016d30 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801609e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d006      	beq.n	80160b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80160a6:	4b09      	ldr	r3, [pc, #36]	@ (80160cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160a8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80160ac:	490c      	ldr	r1, [pc, #48]	@ (80160e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80160ae:	4809      	ldr	r0, [pc, #36]	@ (80160d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160b0:	f000 fe3e 	bl	8016d30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80160b4:	6a3b      	ldr	r3, [r7, #32]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	bf14      	ite	ne
 80160ba:	2301      	movne	r3, #1
 80160bc:	2300      	moveq	r3, #0
 80160be:	b2db      	uxtb	r3, r3
 80160c0:	e000      	b.n	80160c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80160c2:	2300      	movs	r3, #0
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3730      	adds	r7, #48	@ 0x30
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	0801a750 	.word	0x0801a750
 80160d0:	0801a834 	.word	0x0801a834
 80160d4:	0801a798 	.word	0x0801a798
 80160d8:	0801a854 	.word	0x0801a854
 80160dc:	0801a88c 	.word	0x0801a88c
 80160e0:	0801a89c 	.word	0x0801a89c

080160e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b08e      	sub	sp, #56	@ 0x38
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80160f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160f4:	781b      	ldrb	r3, [r3, #0]
 80160f6:	f003 030f 	and.w	r3, r3, #15
 80160fa:	b2db      	uxtb	r3, r3
 80160fc:	009b      	lsls	r3, r3, #2
 80160fe:	b2db      	uxtb	r3, r3
 8016100:	2b14      	cmp	r3, #20
 8016102:	f040 8171 	bne.w	80163e8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016108:	88db      	ldrh	r3, [r3, #6]
 801610a:	b29b      	uxth	r3, r3
 801610c:	4618      	mov	r0, r3
 801610e:	f7f6 fe1f 	bl	800cd50 <lwip_htons>
 8016112:	4603      	mov	r3, r0
 8016114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016118:	b29b      	uxth	r3, r3
 801611a:	00db      	lsls	r3, r3, #3
 801611c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016120:	885b      	ldrh	r3, [r3, #2]
 8016122:	b29b      	uxth	r3, r3
 8016124:	4618      	mov	r0, r3
 8016126:	f7f6 fe13 	bl	800cd50 <lwip_htons>
 801612a:	4603      	mov	r3, r0
 801612c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016130:	781b      	ldrb	r3, [r3, #0]
 8016132:	f003 030f 	and.w	r3, r3, #15
 8016136:	b2db      	uxtb	r3, r3
 8016138:	009b      	lsls	r3, r3, #2
 801613a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801613e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016142:	b29b      	uxth	r3, r3
 8016144:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016146:	429a      	cmp	r2, r3
 8016148:	f0c0 8150 	bcc.w	80163ec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801614c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016150:	b29b      	uxth	r3, r3
 8016152:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016154:	1ad3      	subs	r3, r2, r3
 8016156:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f7f8 fa75 	bl	800e648 <pbuf_clen>
 801615e:	4603      	mov	r3, r0
 8016160:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016162:	4b8c      	ldr	r3, [pc, #560]	@ (8016394 <ip4_reass+0x2b0>)
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	461a      	mov	r2, r3
 8016168:	8c3b      	ldrh	r3, [r7, #32]
 801616a:	4413      	add	r3, r2
 801616c:	2b0a      	cmp	r3, #10
 801616e:	dd10      	ble.n	8016192 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016170:	8c3b      	ldrh	r3, [r7, #32]
 8016172:	4619      	mov	r1, r3
 8016174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016176:	f7ff fd81 	bl	8015c7c <ip_reass_remove_oldest_datagram>
 801617a:	4603      	mov	r3, r0
 801617c:	2b00      	cmp	r3, #0
 801617e:	f000 8137 	beq.w	80163f0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016182:	4b84      	ldr	r3, [pc, #528]	@ (8016394 <ip4_reass+0x2b0>)
 8016184:	881b      	ldrh	r3, [r3, #0]
 8016186:	461a      	mov	r2, r3
 8016188:	8c3b      	ldrh	r3, [r7, #32]
 801618a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801618c:	2b0a      	cmp	r3, #10
 801618e:	f300 812f 	bgt.w	80163f0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016192:	4b81      	ldr	r3, [pc, #516]	@ (8016398 <ip4_reass+0x2b4>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	633b      	str	r3, [r7, #48]	@ 0x30
 8016198:	e015      	b.n	80161c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801619c:	695a      	ldr	r2, [r3, #20]
 801619e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161a0:	68db      	ldr	r3, [r3, #12]
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d10c      	bne.n	80161c0 <ip4_reass+0xdc>
 80161a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161a8:	699a      	ldr	r2, [r3, #24]
 80161aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161ac:	691b      	ldr	r3, [r3, #16]
 80161ae:	429a      	cmp	r2, r3
 80161b0:	d106      	bne.n	80161c0 <ip4_reass+0xdc>
 80161b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161b4:	899a      	ldrh	r2, [r3, #12]
 80161b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161b8:	889b      	ldrh	r3, [r3, #4]
 80161ba:	b29b      	uxth	r3, r3
 80161bc:	429a      	cmp	r2, r3
 80161be:	d006      	beq.n	80161ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80161c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80161c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d1e6      	bne.n	801619a <ip4_reass+0xb6>
 80161cc:	e000      	b.n	80161d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80161ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80161d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d109      	bne.n	80161ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80161d6:	8c3b      	ldrh	r3, [r7, #32]
 80161d8:	4619      	mov	r1, r3
 80161da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80161dc:	f7ff fdb0 	bl	8015d40 <ip_reass_enqueue_new_datagram>
 80161e0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80161e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d11c      	bne.n	8016222 <ip4_reass+0x13e>
      goto nullreturn;
 80161e8:	e105      	b.n	80163f6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80161ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161ec:	88db      	ldrh	r3, [r3, #6]
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7f6 fdad 	bl	800cd50 <lwip_htons>
 80161f6:	4603      	mov	r3, r0
 80161f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d110      	bne.n	8016222 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016202:	89db      	ldrh	r3, [r3, #14]
 8016204:	4618      	mov	r0, r3
 8016206:	f7f6 fda3 	bl	800cd50 <lwip_htons>
 801620a:	4603      	mov	r3, r0
 801620c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016210:	2b00      	cmp	r3, #0
 8016212:	d006      	beq.n	8016222 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016216:	3308      	adds	r3, #8
 8016218:	2214      	movs	r2, #20
 801621a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801621c:	4618      	mov	r0, r3
 801621e:	f000 ffb2 	bl	8017186 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016224:	88db      	ldrh	r3, [r3, #6]
 8016226:	b29b      	uxth	r3, r3
 8016228:	f003 0320 	and.w	r3, r3, #32
 801622c:	2b00      	cmp	r3, #0
 801622e:	bf0c      	ite	eq
 8016230:	2301      	moveq	r3, #1
 8016232:	2300      	movne	r3, #0
 8016234:	b2db      	uxtb	r3, r3
 8016236:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016238:	69fb      	ldr	r3, [r7, #28]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d00e      	beq.n	801625c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801623e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016240:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016242:	4413      	add	r3, r2
 8016244:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016246:	8b7a      	ldrh	r2, [r7, #26]
 8016248:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801624a:	429a      	cmp	r2, r3
 801624c:	f0c0 80a0 	bcc.w	8016390 <ip4_reass+0x2ac>
 8016250:	8b7b      	ldrh	r3, [r7, #26]
 8016252:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016256:	4293      	cmp	r3, r2
 8016258:	f200 809a 	bhi.w	8016390 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801625c:	69fa      	ldr	r2, [r7, #28]
 801625e:	6879      	ldr	r1, [r7, #4]
 8016260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016262:	f7ff fdd5 	bl	8015e10 <ip_reass_chain_frag_into_datagram_and_validate>
 8016266:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801626e:	f000 809b 	beq.w	80163a8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016272:	4b48      	ldr	r3, [pc, #288]	@ (8016394 <ip4_reass+0x2b0>)
 8016274:	881a      	ldrh	r2, [r3, #0]
 8016276:	8c3b      	ldrh	r3, [r7, #32]
 8016278:	4413      	add	r3, r2
 801627a:	b29a      	uxth	r2, r3
 801627c:	4b45      	ldr	r3, [pc, #276]	@ (8016394 <ip4_reass+0x2b0>)
 801627e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016280:	69fb      	ldr	r3, [r7, #28]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d00d      	beq.n	80162a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016286:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016288:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801628a:	4413      	add	r3, r2
 801628c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016290:	8a7a      	ldrh	r2, [r7, #18]
 8016292:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016296:	7f9b      	ldrb	r3, [r3, #30]
 8016298:	f043 0301 	orr.w	r3, r3, #1
 801629c:	b2da      	uxtb	r2, r3
 801629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80162a2:	697b      	ldr	r3, [r7, #20]
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d171      	bne.n	801638c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80162a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162aa:	8b9b      	ldrh	r3, [r3, #28]
 80162ac:	3314      	adds	r3, #20
 80162ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80162b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162b2:	685b      	ldr	r3, [r3, #4]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80162ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162bc:	685b      	ldr	r3, [r3, #4]
 80162be:	685b      	ldr	r3, [r3, #4]
 80162c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80162c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162c4:	3308      	adds	r3, #8
 80162c6:	2214      	movs	r2, #20
 80162c8:	4619      	mov	r1, r3
 80162ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162cc:	f000 ff5b 	bl	8017186 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80162d0:	8a3b      	ldrh	r3, [r7, #16]
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7f6 fd3c 	bl	800cd50 <lwip_htons>
 80162d8:	4603      	mov	r3, r0
 80162da:	461a      	mov	r2, r3
 80162dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80162e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162e2:	2200      	movs	r2, #0
 80162e4:	719a      	strb	r2, [r3, #6]
 80162e6:	2200      	movs	r2, #0
 80162e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80162ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162ec:	2200      	movs	r2, #0
 80162ee:	729a      	strb	r2, [r3, #10]
 80162f0:	2200      	movs	r2, #0
 80162f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80162f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80162fa:	e00d      	b.n	8016318 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80162fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016302:	2114      	movs	r1, #20
 8016304:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016306:	f7f8 f88b 	bl	800e420 <pbuf_remove_header>
      pbuf_cat(p, r);
 801630a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f7f8 f9db 	bl	800e6c8 <pbuf_cat>
      r = iprh->next_pbuf;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801631a:	2b00      	cmp	r3, #0
 801631c:	d1ee      	bne.n	80162fc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801631e:	4b1e      	ldr	r3, [pc, #120]	@ (8016398 <ip4_reass+0x2b4>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016324:	429a      	cmp	r2, r3
 8016326:	d102      	bne.n	801632e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016328:	2300      	movs	r3, #0
 801632a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801632c:	e010      	b.n	8016350 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801632e:	4b1a      	ldr	r3, [pc, #104]	@ (8016398 <ip4_reass+0x2b4>)
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016334:	e007      	b.n	8016346 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801633c:	429a      	cmp	r2, r3
 801633e:	d006      	beq.n	801634e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016348:	2b00      	cmp	r3, #0
 801634a:	d1f4      	bne.n	8016336 <ip4_reass+0x252>
 801634c:	e000      	b.n	8016350 <ip4_reass+0x26c>
          break;
 801634e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016352:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016354:	f7ff fd2e 	bl	8015db4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f7f8 f975 	bl	800e648 <pbuf_clen>
 801635e:	4603      	mov	r3, r0
 8016360:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016362:	4b0c      	ldr	r3, [pc, #48]	@ (8016394 <ip4_reass+0x2b0>)
 8016364:	881b      	ldrh	r3, [r3, #0]
 8016366:	8c3a      	ldrh	r2, [r7, #32]
 8016368:	429a      	cmp	r2, r3
 801636a:	d906      	bls.n	801637a <ip4_reass+0x296>
 801636c:	4b0b      	ldr	r3, [pc, #44]	@ (801639c <ip4_reass+0x2b8>)
 801636e:	f240 229b 	movw	r2, #667	@ 0x29b
 8016372:	490b      	ldr	r1, [pc, #44]	@ (80163a0 <ip4_reass+0x2bc>)
 8016374:	480b      	ldr	r0, [pc, #44]	@ (80163a4 <ip4_reass+0x2c0>)
 8016376:	f000 fcdb 	bl	8016d30 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801637a:	4b06      	ldr	r3, [pc, #24]	@ (8016394 <ip4_reass+0x2b0>)
 801637c:	881a      	ldrh	r2, [r3, #0]
 801637e:	8c3b      	ldrh	r3, [r7, #32]
 8016380:	1ad3      	subs	r3, r2, r3
 8016382:	b29a      	uxth	r2, r3
 8016384:	4b03      	ldr	r3, [pc, #12]	@ (8016394 <ip4_reass+0x2b0>)
 8016386:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	e038      	b.n	80163fe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801638c:	2300      	movs	r3, #0
 801638e:	e036      	b.n	80163fe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016390:	bf00      	nop
 8016392:	e00a      	b.n	80163aa <ip4_reass+0x2c6>
 8016394:	2000c848 	.word	0x2000c848
 8016398:	2000c844 	.word	0x2000c844
 801639c:	0801a750 	.word	0x0801a750
 80163a0:	0801a8c0 	.word	0x0801a8c0
 80163a4:	0801a798 	.word	0x0801a798
    goto nullreturn_ipr;
 80163a8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80163aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d106      	bne.n	80163be <ip4_reass+0x2da>
 80163b0:	4b15      	ldr	r3, [pc, #84]	@ (8016408 <ip4_reass+0x324>)
 80163b2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80163b6:	4915      	ldr	r1, [pc, #84]	@ (801640c <ip4_reass+0x328>)
 80163b8:	4815      	ldr	r0, [pc, #84]	@ (8016410 <ip4_reass+0x32c>)
 80163ba:	f000 fcb9 	bl	8016d30 <iprintf>
  if (ipr->p == NULL) {
 80163be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163c0:	685b      	ldr	r3, [r3, #4]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d116      	bne.n	80163f4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80163c6:	4b13      	ldr	r3, [pc, #76]	@ (8016414 <ip4_reass+0x330>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80163cc:	429a      	cmp	r2, r3
 80163ce:	d006      	beq.n	80163de <ip4_reass+0x2fa>
 80163d0:	4b0d      	ldr	r3, [pc, #52]	@ (8016408 <ip4_reass+0x324>)
 80163d2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80163d6:	4910      	ldr	r1, [pc, #64]	@ (8016418 <ip4_reass+0x334>)
 80163d8:	480d      	ldr	r0, [pc, #52]	@ (8016410 <ip4_reass+0x32c>)
 80163da:	f000 fca9 	bl	8016d30 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80163de:	2100      	movs	r1, #0
 80163e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80163e2:	f7ff fce7 	bl	8015db4 <ip_reass_dequeue_datagram>
 80163e6:	e006      	b.n	80163f6 <ip4_reass+0x312>
    goto nullreturn;
 80163e8:	bf00      	nop
 80163ea:	e004      	b.n	80163f6 <ip4_reass+0x312>
    goto nullreturn;
 80163ec:	bf00      	nop
 80163ee:	e002      	b.n	80163f6 <ip4_reass+0x312>
      goto nullreturn;
 80163f0:	bf00      	nop
 80163f2:	e000      	b.n	80163f6 <ip4_reass+0x312>
  }

nullreturn:
 80163f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80163f6:	6878      	ldr	r0, [r7, #4]
 80163f8:	f7f8 f898 	bl	800e52c <pbuf_free>
  return NULL;
 80163fc:	2300      	movs	r3, #0
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3738      	adds	r7, #56	@ 0x38
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}
 8016406:	bf00      	nop
 8016408:	0801a750 	.word	0x0801a750
 801640c:	0801a8dc 	.word	0x0801a8dc
 8016410:	0801a798 	.word	0x0801a798
 8016414:	2000c844 	.word	0x2000c844
 8016418:	0801a8e8 	.word	0x0801a8e8

0801641c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016420:	2005      	movs	r0, #5
 8016422:	f7f7 f969 	bl	800d6f8 <memp_malloc>
 8016426:	4603      	mov	r3, r0
}
 8016428:	4618      	mov	r0, r3
 801642a:	bd80      	pop	{r7, pc}

0801642c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d106      	bne.n	8016448 <ip_frag_free_pbuf_custom_ref+0x1c>
 801643a:	4b07      	ldr	r3, [pc, #28]	@ (8016458 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801643c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016440:	4906      	ldr	r1, [pc, #24]	@ (801645c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016442:	4807      	ldr	r0, [pc, #28]	@ (8016460 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016444:	f000 fc74 	bl	8016d30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016448:	6879      	ldr	r1, [r7, #4]
 801644a:	2005      	movs	r0, #5
 801644c:	f7f7 f9ca 	bl	800d7e4 <memp_free>
}
 8016450:	bf00      	nop
 8016452:	3708      	adds	r7, #8
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}
 8016458:	0801a750 	.word	0x0801a750
 801645c:	0801a908 	.word	0x0801a908
 8016460:	0801a798 	.word	0x0801a798

08016464 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b084      	sub	sp, #16
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d106      	bne.n	8016484 <ipfrag_free_pbuf_custom+0x20>
 8016476:	4b11      	ldr	r3, [pc, #68]	@ (80164bc <ipfrag_free_pbuf_custom+0x58>)
 8016478:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801647c:	4910      	ldr	r1, [pc, #64]	@ (80164c0 <ipfrag_free_pbuf_custom+0x5c>)
 801647e:	4811      	ldr	r0, [pc, #68]	@ (80164c4 <ipfrag_free_pbuf_custom+0x60>)
 8016480:	f000 fc56 	bl	8016d30 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016484:	68fa      	ldr	r2, [r7, #12]
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	429a      	cmp	r2, r3
 801648a:	d006      	beq.n	801649a <ipfrag_free_pbuf_custom+0x36>
 801648c:	4b0b      	ldr	r3, [pc, #44]	@ (80164bc <ipfrag_free_pbuf_custom+0x58>)
 801648e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016492:	490d      	ldr	r1, [pc, #52]	@ (80164c8 <ipfrag_free_pbuf_custom+0x64>)
 8016494:	480b      	ldr	r0, [pc, #44]	@ (80164c4 <ipfrag_free_pbuf_custom+0x60>)
 8016496:	f000 fc4b 	bl	8016d30 <iprintf>
  if (pcr->original != NULL) {
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	695b      	ldr	r3, [r3, #20]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d004      	beq.n	80164ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	695b      	ldr	r3, [r3, #20]
 80164a6:	4618      	mov	r0, r3
 80164a8:	f7f8 f840 	bl	800e52c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80164ac:	68f8      	ldr	r0, [r7, #12]
 80164ae:	f7ff ffbd 	bl	801642c <ip_frag_free_pbuf_custom_ref>
}
 80164b2:	bf00      	nop
 80164b4:	3710      	adds	r7, #16
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}
 80164ba:	bf00      	nop
 80164bc:	0801a750 	.word	0x0801a750
 80164c0:	0801a914 	.word	0x0801a914
 80164c4:	0801a798 	.word	0x0801a798
 80164c8:	0801a920 	.word	0x0801a920

080164cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b094      	sub	sp, #80	@ 0x50
 80164d0:	af02      	add	r7, sp, #8
 80164d2:	60f8      	str	r0, [r7, #12]
 80164d4:	60b9      	str	r1, [r7, #8]
 80164d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80164d8:	2300      	movs	r3, #0
 80164da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80164de:	68bb      	ldr	r3, [r7, #8]
 80164e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80164e2:	3b14      	subs	r3, #20
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	da00      	bge.n	80164ea <ip4_frag+0x1e>
 80164e8:	3307      	adds	r3, #7
 80164ea:	10db      	asrs	r3, r3, #3
 80164ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80164ee:	2314      	movs	r3, #20
 80164f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80164f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80164fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164fe:	781b      	ldrb	r3, [r3, #0]
 8016500:	f003 030f 	and.w	r3, r3, #15
 8016504:	b2db      	uxtb	r3, r3
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	b2db      	uxtb	r3, r3
 801650a:	2b14      	cmp	r3, #20
 801650c:	d002      	beq.n	8016514 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801650e:	f06f 0305 	mvn.w	r3, #5
 8016512:	e110      	b.n	8016736 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	895b      	ldrh	r3, [r3, #10]
 8016518:	2b13      	cmp	r3, #19
 801651a:	d809      	bhi.n	8016530 <ip4_frag+0x64>
 801651c:	4b88      	ldr	r3, [pc, #544]	@ (8016740 <ip4_frag+0x274>)
 801651e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016522:	4988      	ldr	r1, [pc, #544]	@ (8016744 <ip4_frag+0x278>)
 8016524:	4888      	ldr	r0, [pc, #544]	@ (8016748 <ip4_frag+0x27c>)
 8016526:	f000 fc03 	bl	8016d30 <iprintf>
 801652a:	f06f 0305 	mvn.w	r3, #5
 801652e:	e102      	b.n	8016736 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016532:	88db      	ldrh	r3, [r3, #6]
 8016534:	b29b      	uxth	r3, r3
 8016536:	4618      	mov	r0, r3
 8016538:	f7f6 fc0a 	bl	800cd50 <lwip_htons>
 801653c:	4603      	mov	r3, r0
 801653e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016540:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016542:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016546:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801654a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801654c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016550:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	891b      	ldrh	r3, [r3, #8]
 8016556:	3b14      	subs	r3, #20
 8016558:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801655c:	e0e1      	b.n	8016722 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801655e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016560:	00db      	lsls	r3, r3, #3
 8016562:	b29b      	uxth	r3, r3
 8016564:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016568:	4293      	cmp	r3, r2
 801656a:	bf28      	it	cs
 801656c:	4613      	movcs	r3, r2
 801656e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016570:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016574:	2114      	movs	r1, #20
 8016576:	200e      	movs	r0, #14
 8016578:	f7f7 fcf4 	bl	800df64 <pbuf_alloc>
 801657c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016580:	2b00      	cmp	r3, #0
 8016582:	f000 80d5 	beq.w	8016730 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016588:	895b      	ldrh	r3, [r3, #10]
 801658a:	2b13      	cmp	r3, #19
 801658c:	d806      	bhi.n	801659c <ip4_frag+0xd0>
 801658e:	4b6c      	ldr	r3, [pc, #432]	@ (8016740 <ip4_frag+0x274>)
 8016590:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016594:	496d      	ldr	r1, [pc, #436]	@ (801674c <ip4_frag+0x280>)
 8016596:	486c      	ldr	r0, [pc, #432]	@ (8016748 <ip4_frag+0x27c>)
 8016598:	f000 fbca 	bl	8016d30 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801659c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	2214      	movs	r2, #20
 80165a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80165a4:	4618      	mov	r0, r3
 80165a6:	f000 fdee 	bl	8017186 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80165aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80165b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80165b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80165b6:	e064      	b.n	8016682 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	895a      	ldrh	r2, [r3, #10]
 80165bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80165be:	1ad3      	subs	r3, r2, r3
 80165c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	895b      	ldrh	r3, [r3, #10]
 80165c6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80165c8:	429a      	cmp	r2, r3
 80165ca:	d906      	bls.n	80165da <ip4_frag+0x10e>
 80165cc:	4b5c      	ldr	r3, [pc, #368]	@ (8016740 <ip4_frag+0x274>)
 80165ce:	f240 322d 	movw	r2, #813	@ 0x32d
 80165d2:	495f      	ldr	r1, [pc, #380]	@ (8016750 <ip4_frag+0x284>)
 80165d4:	485c      	ldr	r0, [pc, #368]	@ (8016748 <ip4_frag+0x27c>)
 80165d6:	f000 fbab 	bl	8016d30 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80165da:	8bfa      	ldrh	r2, [r7, #30]
 80165dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80165e0:	4293      	cmp	r3, r2
 80165e2:	bf28      	it	cs
 80165e4:	4613      	movcs	r3, r2
 80165e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80165ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d105      	bne.n	80165fe <ip4_frag+0x132>
        poff = 0;
 80165f2:	2300      	movs	r3, #0
 80165f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	60fb      	str	r3, [r7, #12]
        continue;
 80165fc:	e041      	b.n	8016682 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80165fe:	f7ff ff0d 	bl	801641c <ip_frag_alloc_pbuf_custom_ref>
 8016602:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016604:	69bb      	ldr	r3, [r7, #24]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d103      	bne.n	8016612 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801660a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801660c:	f7f7 ff8e 	bl	800e52c <pbuf_free>
        goto memerr;
 8016610:	e08f      	b.n	8016732 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016612:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016618:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801661a:	4413      	add	r3, r2
 801661c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016620:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016624:	9201      	str	r2, [sp, #4]
 8016626:	9300      	str	r3, [sp, #0]
 8016628:	4603      	mov	r3, r0
 801662a:	2241      	movs	r2, #65	@ 0x41
 801662c:	2000      	movs	r0, #0
 801662e:	f7f7 fdc3 	bl	800e1b8 <pbuf_alloced_custom>
 8016632:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d106      	bne.n	8016648 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801663a:	69b8      	ldr	r0, [r7, #24]
 801663c:	f7ff fef6 	bl	801642c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016642:	f7f7 ff73 	bl	800e52c <pbuf_free>
        goto memerr;
 8016646:	e074      	b.n	8016732 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016648:	68f8      	ldr	r0, [r7, #12]
 801664a:	f7f8 f815 	bl	800e678 <pbuf_ref>
      pcr->original = p;
 801664e:	69bb      	ldr	r3, [r7, #24]
 8016650:	68fa      	ldr	r2, [r7, #12]
 8016652:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016654:	69bb      	ldr	r3, [r7, #24]
 8016656:	4a3f      	ldr	r2, [pc, #252]	@ (8016754 <ip4_frag+0x288>)
 8016658:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801665a:	6979      	ldr	r1, [r7, #20]
 801665c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801665e:	f7f8 f833 	bl	800e6c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016662:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016666:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801666a:	1ad3      	subs	r3, r2, r3
 801666c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016670:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016674:	2b00      	cmp	r3, #0
 8016676:	d004      	beq.n	8016682 <ip4_frag+0x1b6>
        poff = 0;
 8016678:	2300      	movs	r3, #0
 801667a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016682:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016686:	2b00      	cmp	r3, #0
 8016688:	d196      	bne.n	80165b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801668a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801668c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016690:	4413      	add	r3, r2
 8016692:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016698:	f1a3 0213 	sub.w	r2, r3, #19
 801669c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80166a0:	429a      	cmp	r2, r3
 80166a2:	bfcc      	ite	gt
 80166a4:	2301      	movgt	r3, #1
 80166a6:	2300      	movle	r3, #0
 80166a8:	b2db      	uxtb	r3, r3
 80166aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80166ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80166b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80166b6:	6a3b      	ldr	r3, [r7, #32]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d002      	beq.n	80166c2 <ip4_frag+0x1f6>
 80166bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d003      	beq.n	80166ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80166c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80166c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80166c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80166ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80166cc:	4618      	mov	r0, r3
 80166ce:	f7f6 fb3f 	bl	800cd50 <lwip_htons>
 80166d2:	4603      	mov	r3, r0
 80166d4:	461a      	mov	r2, r3
 80166d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80166da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80166dc:	3314      	adds	r3, #20
 80166de:	b29b      	uxth	r3, r3
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7f6 fb35 	bl	800cd50 <lwip_htons>
 80166e6:	4603      	mov	r3, r0
 80166e8:	461a      	mov	r2, r3
 80166ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80166ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166f0:	2200      	movs	r2, #0
 80166f2:	729a      	strb	r2, [r3, #10]
 80166f4:	2200      	movs	r2, #0
 80166f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	695b      	ldr	r3, [r3, #20]
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016700:	68b8      	ldr	r0, [r7, #8]
 8016702:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016704:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016706:	f7f7 ff11 	bl	800e52c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801670a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801670e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016710:	1ad3      	subs	r3, r2, r3
 8016712:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016716:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801671a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801671c:	4413      	add	r3, r2
 801671e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016722:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016726:	2b00      	cmp	r3, #0
 8016728:	f47f af19 	bne.w	801655e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801672c:	2300      	movs	r3, #0
 801672e:	e002      	b.n	8016736 <ip4_frag+0x26a>
      goto memerr;
 8016730:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016736:	4618      	mov	r0, r3
 8016738:	3748      	adds	r7, #72	@ 0x48
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}
 801673e:	bf00      	nop
 8016740:	0801a750 	.word	0x0801a750
 8016744:	0801a92c 	.word	0x0801a92c
 8016748:	0801a798 	.word	0x0801a798
 801674c:	0801a948 	.word	0x0801a948
 8016750:	0801a968 	.word	0x0801a968
 8016754:	08016465 	.word	0x08016465

08016758 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b086      	sub	sp, #24
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016762:	230e      	movs	r3, #14
 8016764:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	895b      	ldrh	r3, [r3, #10]
 801676a:	2b0e      	cmp	r3, #14
 801676c:	d96e      	bls.n	801684c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	7bdb      	ldrb	r3, [r3, #15]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d106      	bne.n	8016784 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801677c:	3301      	adds	r3, #1
 801677e:	b2da      	uxtb	r2, r3
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	685b      	ldr	r3, [r3, #4]
 8016788:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	7b1a      	ldrb	r2, [r3, #12]
 801678e:	7b5b      	ldrb	r3, [r3, #13]
 8016790:	021b      	lsls	r3, r3, #8
 8016792:	4313      	orrs	r3, r2
 8016794:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	f003 0301 	and.w	r3, r3, #1
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d023      	beq.n	80167ea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80167a2:	693b      	ldr	r3, [r7, #16]
 80167a4:	781b      	ldrb	r3, [r3, #0]
 80167a6:	2b01      	cmp	r3, #1
 80167a8:	d10f      	bne.n	80167ca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	785b      	ldrb	r3, [r3, #1]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d11b      	bne.n	80167ea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80167b2:	693b      	ldr	r3, [r7, #16]
 80167b4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80167b6:	2b5e      	cmp	r3, #94	@ 0x5e
 80167b8:	d117      	bne.n	80167ea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	7b5b      	ldrb	r3, [r3, #13]
 80167be:	f043 0310 	orr.w	r3, r3, #16
 80167c2:	b2da      	uxtb	r2, r3
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	735a      	strb	r2, [r3, #13]
 80167c8:	e00f      	b.n	80167ea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	2206      	movs	r2, #6
 80167ce:	4928      	ldr	r1, [pc, #160]	@ (8016870 <ethernet_input+0x118>)
 80167d0:	4618      	mov	r0, r3
 80167d2:	f000 fbf5 	bl	8016fc0 <memcmp>
 80167d6:	4603      	mov	r3, r0
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d106      	bne.n	80167ea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	7b5b      	ldrb	r3, [r3, #13]
 80167e0:	f043 0308 	orr.w	r3, r3, #8
 80167e4:	b2da      	uxtb	r2, r3
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80167ea:	89fb      	ldrh	r3, [r7, #14]
 80167ec:	2b08      	cmp	r3, #8
 80167ee:	d003      	beq.n	80167f8 <ethernet_input+0xa0>
 80167f0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80167f4:	d014      	beq.n	8016820 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80167f6:	e032      	b.n	801685e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80167fe:	f003 0308 	and.w	r3, r3, #8
 8016802:	2b00      	cmp	r3, #0
 8016804:	d024      	beq.n	8016850 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016806:	8afb      	ldrh	r3, [r7, #22]
 8016808:	4619      	mov	r1, r3
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f7f7 fe08 	bl	800e420 <pbuf_remove_header>
 8016810:	4603      	mov	r3, r0
 8016812:	2b00      	cmp	r3, #0
 8016814:	d11e      	bne.n	8016854 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016816:	6839      	ldr	r1, [r7, #0]
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f7fe ff21 	bl	8015660 <ip4_input>
      break;
 801681e:	e013      	b.n	8016848 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016820:	683b      	ldr	r3, [r7, #0]
 8016822:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016826:	f003 0308 	and.w	r3, r3, #8
 801682a:	2b00      	cmp	r3, #0
 801682c:	d014      	beq.n	8016858 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801682e:	8afb      	ldrh	r3, [r7, #22]
 8016830:	4619      	mov	r1, r3
 8016832:	6878      	ldr	r0, [r7, #4]
 8016834:	f7f7 fdf4 	bl	800e420 <pbuf_remove_header>
 8016838:	4603      	mov	r3, r0
 801683a:	2b00      	cmp	r3, #0
 801683c:	d10e      	bne.n	801685c <ethernet_input+0x104>
        etharp_input(p, netif);
 801683e:	6839      	ldr	r1, [r7, #0]
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f7fe f8c1 	bl	80149c8 <etharp_input>
      break;
 8016846:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016848:	2300      	movs	r3, #0
 801684a:	e00c      	b.n	8016866 <ethernet_input+0x10e>
    goto free_and_return;
 801684c:	bf00      	nop
 801684e:	e006      	b.n	801685e <ethernet_input+0x106>
        goto free_and_return;
 8016850:	bf00      	nop
 8016852:	e004      	b.n	801685e <ethernet_input+0x106>
        goto free_and_return;
 8016854:	bf00      	nop
 8016856:	e002      	b.n	801685e <ethernet_input+0x106>
        goto free_and_return;
 8016858:	bf00      	nop
 801685a:	e000      	b.n	801685e <ethernet_input+0x106>
        goto free_and_return;
 801685c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	f7f7 fe64 	bl	800e52c <pbuf_free>
  return ERR_OK;
 8016864:	2300      	movs	r3, #0
}
 8016866:	4618      	mov	r0, r3
 8016868:	3718      	adds	r7, #24
 801686a:	46bd      	mov	sp, r7
 801686c:	bd80      	pop	{r7, pc}
 801686e:	bf00      	nop
 8016870:	0801ab4c 	.word	0x0801ab4c

08016874 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016874:	b580      	push	{r7, lr}
 8016876:	b086      	sub	sp, #24
 8016878:	af00      	add	r7, sp, #0
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	607a      	str	r2, [r7, #4]
 8016880:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016882:	8c3b      	ldrh	r3, [r7, #32]
 8016884:	4618      	mov	r0, r3
 8016886:	f7f6 fa63 	bl	800cd50 <lwip_htons>
 801688a:	4603      	mov	r3, r0
 801688c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801688e:	210e      	movs	r1, #14
 8016890:	68b8      	ldr	r0, [r7, #8]
 8016892:	f7f7 fdb5 	bl	800e400 <pbuf_add_header>
 8016896:	4603      	mov	r3, r0
 8016898:	2b00      	cmp	r3, #0
 801689a:	d125      	bne.n	80168e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	8afa      	ldrh	r2, [r7, #22]
 80168a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	2206      	movs	r2, #6
 80168ac:	6839      	ldr	r1, [r7, #0]
 80168ae:	4618      	mov	r0, r3
 80168b0:	f000 fc69 	bl	8017186 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	3306      	adds	r3, #6
 80168b8:	2206      	movs	r2, #6
 80168ba:	6879      	ldr	r1, [r7, #4]
 80168bc:	4618      	mov	r0, r3
 80168be:	f000 fc62 	bl	8017186 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80168c8:	2b06      	cmp	r3, #6
 80168ca:	d006      	beq.n	80168da <ethernet_output+0x66>
 80168cc:	4b0a      	ldr	r3, [pc, #40]	@ (80168f8 <ethernet_output+0x84>)
 80168ce:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80168d2:	490a      	ldr	r1, [pc, #40]	@ (80168fc <ethernet_output+0x88>)
 80168d4:	480a      	ldr	r0, [pc, #40]	@ (8016900 <ethernet_output+0x8c>)
 80168d6:	f000 fa2b 	bl	8016d30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	699b      	ldr	r3, [r3, #24]
 80168de:	68b9      	ldr	r1, [r7, #8]
 80168e0:	68f8      	ldr	r0, [r7, #12]
 80168e2:	4798      	blx	r3
 80168e4:	4603      	mov	r3, r0
 80168e6:	e002      	b.n	80168ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80168e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80168ea:	f06f 0301 	mvn.w	r3, #1
}
 80168ee:	4618      	mov	r0, r3
 80168f0:	3718      	adds	r7, #24
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}
 80168f6:	bf00      	nop
 80168f8:	0801a978 	.word	0x0801a978
 80168fc:	0801a9b0 	.word	0x0801a9b0
 8016900:	0801a9e4 	.word	0x0801a9e4

08016904 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b086      	sub	sp, #24
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
 801690c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	60bb      	str	r3, [r7, #8]
 8016912:	2304      	movs	r3, #4
 8016914:	60fb      	str	r3, [r7, #12]
 8016916:	2300      	movs	r3, #0
 8016918:	613b      	str	r3, [r7, #16]
 801691a:	2300      	movs	r3, #0
 801691c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801691e:	f107 0308 	add.w	r3, r7, #8
 8016922:	2100      	movs	r1, #0
 8016924:	4618      	mov	r0, r3
 8016926:	f7f3 f9db 	bl	8009ce0 <osMessageCreate>
 801692a:	4602      	mov	r2, r0
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d102      	bne.n	801693e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801693c:	e000      	b.n	8016940 <sys_mbox_new+0x3c>

  return ERR_OK;
 801693e:	2300      	movs	r3, #0
}
 8016940:	4618      	mov	r0, r3
 8016942:	3718      	adds	r7, #24
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}

08016948 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b084      	sub	sp, #16
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	6839      	ldr	r1, [r7, #0]
 8016958:	2200      	movs	r2, #0
 801695a:	4618      	mov	r0, r3
 801695c:	f7f3 f9e8 	bl	8009d30 <osMessagePut>
 8016960:	4603      	mov	r3, r0
 8016962:	2b00      	cmp	r3, #0
 8016964:	d102      	bne.n	801696c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016966:	2300      	movs	r3, #0
 8016968:	73fb      	strb	r3, [r7, #15]
 801696a:	e001      	b.n	8016970 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801696c:	23ff      	movs	r3, #255	@ 0xff
 801696e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016974:	4618      	mov	r0, r3
 8016976:	3710      	adds	r7, #16
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b08c      	sub	sp, #48	@ 0x30
 8016980:	af00      	add	r7, sp, #0
 8016982:	61f8      	str	r0, [r7, #28]
 8016984:	61b9      	str	r1, [r7, #24]
 8016986:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016988:	f7f2 ffdb 	bl	8009942 <osKernelSysTick>
 801698c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d017      	beq.n	80169c4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016994:	69fb      	ldr	r3, [r7, #28]
 8016996:	6819      	ldr	r1, [r3, #0]
 8016998:	f107 0320 	add.w	r3, r7, #32
 801699c:	697a      	ldr	r2, [r7, #20]
 801699e:	4618      	mov	r0, r3
 80169a0:	f7f3 fa06 	bl	8009db0 <osMessageGet>

    if(event.status == osEventMessage)
 80169a4:	6a3b      	ldr	r3, [r7, #32]
 80169a6:	2b10      	cmp	r3, #16
 80169a8:	d109      	bne.n	80169be <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80169aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169ac:	461a      	mov	r2, r3
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80169b2:	f7f2 ffc6 	bl	8009942 <osKernelSysTick>
 80169b6:	4602      	mov	r2, r0
 80169b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169ba:	1ad3      	subs	r3, r2, r3
 80169bc:	e019      	b.n	80169f2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80169be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80169c2:	e016      	b.n	80169f2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80169c4:	69fb      	ldr	r3, [r7, #28]
 80169c6:	6819      	ldr	r1, [r3, #0]
 80169c8:	463b      	mov	r3, r7
 80169ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7f3 f9ee 	bl	8009db0 <osMessageGet>
 80169d4:	f107 0320 	add.w	r3, r7, #32
 80169d8:	463a      	mov	r2, r7
 80169da:	ca07      	ldmia	r2, {r0, r1, r2}
 80169dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80169e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169e2:	461a      	mov	r2, r3
 80169e4:	69bb      	ldr	r3, [r7, #24]
 80169e6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80169e8:	f7f2 ffab 	bl	8009942 <osKernelSysTick>
 80169ec:	4602      	mov	r2, r0
 80169ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169f0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80169f2:	4618      	mov	r0, r3
 80169f4:	3730      	adds	r7, #48	@ 0x30
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bd80      	pop	{r7, pc}

080169fa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80169fa:	b480      	push	{r7}
 80169fc:	b083      	sub	sp, #12
 80169fe:	af00      	add	r7, sp, #0
 8016a00:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d101      	bne.n	8016a0e <sys_mbox_valid+0x14>
    return 0;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	e000      	b.n	8016a10 <sys_mbox_valid+0x16>
  else
    return 1;
 8016a0e:	2301      	movs	r3, #1
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	370c      	adds	r7, #12
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr

08016a1c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016a20:	4803      	ldr	r0, [pc, #12]	@ (8016a30 <sys_init+0x14>)
 8016a22:	f7f3 f80a 	bl	8009a3a <osMutexCreate>
 8016a26:	4603      	mov	r3, r0
 8016a28:	4a02      	ldr	r2, [pc, #8]	@ (8016a34 <sys_init+0x18>)
 8016a2a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016a2c:	bf00      	nop
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	0801ab5c 	.word	0x0801ab5c
 8016a34:	2000c84c 	.word	0x2000c84c

08016a38 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b084      	sub	sp, #16
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016a40:	2300      	movs	r3, #0
 8016a42:	60bb      	str	r3, [r7, #8]
 8016a44:	2300      	movs	r3, #0
 8016a46:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016a48:	f107 0308 	add.w	r3, r7, #8
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7f2 fff4 	bl	8009a3a <osMutexCreate>
 8016a52:	4602      	mov	r2, r0
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d102      	bne.n	8016a66 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016a64:	e000      	b.n	8016a68 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016a66:	2300      	movs	r3, #0
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3710      	adds	r7, #16
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}

08016a70 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016a80:	4618      	mov	r0, r3
 8016a82:	f7f2 fff3 	bl	8009a6c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016a86:	bf00      	nop
 8016a88:	3708      	adds	r7, #8
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}

08016a8e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016a8e:	b580      	push	{r7, lr}
 8016a90:	b082      	sub	sp, #8
 8016a92:	af00      	add	r7, sp, #0
 8016a94:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f7f3 f834 	bl	8009b08 <osMutexRelease>
}
 8016aa0:	bf00      	nop
 8016aa2:	3708      	adds	r7, #8
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}

08016aa8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b08c      	sub	sp, #48	@ 0x30
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	60f8      	str	r0, [r7, #12]
 8016ab0:	60b9      	str	r1, [r7, #8]
 8016ab2:	607a      	str	r2, [r7, #4]
 8016ab4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016ab6:	f107 0314 	add.w	r3, r7, #20
 8016aba:	2200      	movs	r2, #0
 8016abc:	601a      	str	r2, [r3, #0]
 8016abe:	605a      	str	r2, [r3, #4]
 8016ac0:	609a      	str	r2, [r3, #8]
 8016ac2:	60da      	str	r2, [r3, #12]
 8016ac4:	611a      	str	r2, [r3, #16]
 8016ac6:	615a      	str	r2, [r3, #20]
 8016ac8:	619a      	str	r2, [r3, #24]
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	617b      	str	r3, [r7, #20]
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	61bb      	str	r3, [r7, #24]
 8016ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ad4:	b21b      	sxth	r3, r3
 8016ad6:	83bb      	strh	r3, [r7, #28]
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016adc:	f107 0314 	add.w	r3, r7, #20
 8016ae0:	6879      	ldr	r1, [r7, #4]
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7f2 ff3d 	bl	8009962 <osThreadCreate>
 8016ae8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016aea:	4618      	mov	r0, r3
 8016aec:	3730      	adds	r7, #48	@ 0x30
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd80      	pop	{r7, pc}
	...

08016af4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016af8:	4b04      	ldr	r3, [pc, #16]	@ (8016b0c <sys_arch_protect+0x18>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7f2 ffb3 	bl	8009a6c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016b06:	2301      	movs	r3, #1
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	bd80      	pop	{r7, pc}
 8016b0c:	2000c84c 	.word	0x2000c84c

08016b10 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016b18:	4b04      	ldr	r3, [pc, #16]	@ (8016b2c <sys_arch_unprotect+0x1c>)
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7f2 fff3 	bl	8009b08 <osMutexRelease>
}
 8016b22:	bf00      	nop
 8016b24:	3708      	adds	r7, #8
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}
 8016b2a:	bf00      	nop
 8016b2c:	2000c84c 	.word	0x2000c84c

08016b30 <rand>:
 8016b30:	4b16      	ldr	r3, [pc, #88]	@ (8016b8c <rand+0x5c>)
 8016b32:	b510      	push	{r4, lr}
 8016b34:	681c      	ldr	r4, [r3, #0]
 8016b36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b38:	b9b3      	cbnz	r3, 8016b68 <rand+0x38>
 8016b3a:	2018      	movs	r0, #24
 8016b3c:	f000 fb9a 	bl	8017274 <malloc>
 8016b40:	4602      	mov	r2, r0
 8016b42:	6320      	str	r0, [r4, #48]	@ 0x30
 8016b44:	b920      	cbnz	r0, 8016b50 <rand+0x20>
 8016b46:	4b12      	ldr	r3, [pc, #72]	@ (8016b90 <rand+0x60>)
 8016b48:	4812      	ldr	r0, [pc, #72]	@ (8016b94 <rand+0x64>)
 8016b4a:	2152      	movs	r1, #82	@ 0x52
 8016b4c:	f000 fb2a 	bl	80171a4 <__assert_func>
 8016b50:	4911      	ldr	r1, [pc, #68]	@ (8016b98 <rand+0x68>)
 8016b52:	4b12      	ldr	r3, [pc, #72]	@ (8016b9c <rand+0x6c>)
 8016b54:	e9c0 1300 	strd	r1, r3, [r0]
 8016b58:	4b11      	ldr	r3, [pc, #68]	@ (8016ba0 <rand+0x70>)
 8016b5a:	6083      	str	r3, [r0, #8]
 8016b5c:	230b      	movs	r3, #11
 8016b5e:	8183      	strh	r3, [r0, #12]
 8016b60:	2100      	movs	r1, #0
 8016b62:	2001      	movs	r0, #1
 8016b64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016b68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016b6a:	480e      	ldr	r0, [pc, #56]	@ (8016ba4 <rand+0x74>)
 8016b6c:	690b      	ldr	r3, [r1, #16]
 8016b6e:	694c      	ldr	r4, [r1, #20]
 8016b70:	4a0d      	ldr	r2, [pc, #52]	@ (8016ba8 <rand+0x78>)
 8016b72:	4358      	muls	r0, r3
 8016b74:	fb02 0004 	mla	r0, r2, r4, r0
 8016b78:	fba3 3202 	umull	r3, r2, r3, r2
 8016b7c:	3301      	adds	r3, #1
 8016b7e:	eb40 0002 	adc.w	r0, r0, r2
 8016b82:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016b86:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016b8a:	bd10      	pop	{r4, pc}
 8016b8c:	2000003c 	.word	0x2000003c
 8016b90:	0801ab64 	.word	0x0801ab64
 8016b94:	0801ab7b 	.word	0x0801ab7b
 8016b98:	abcd330e 	.word	0xabcd330e
 8016b9c:	e66d1234 	.word	0xe66d1234
 8016ba0:	0005deec 	.word	0x0005deec
 8016ba4:	5851f42d 	.word	0x5851f42d
 8016ba8:	4c957f2d 	.word	0x4c957f2d

08016bac <std>:
 8016bac:	2300      	movs	r3, #0
 8016bae:	b510      	push	{r4, lr}
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8016bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016bba:	6083      	str	r3, [r0, #8]
 8016bbc:	8181      	strh	r1, [r0, #12]
 8016bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8016bc0:	81c2      	strh	r2, [r0, #14]
 8016bc2:	6183      	str	r3, [r0, #24]
 8016bc4:	4619      	mov	r1, r3
 8016bc6:	2208      	movs	r2, #8
 8016bc8:	305c      	adds	r0, #92	@ 0x5c
 8016bca:	f000 fa09 	bl	8016fe0 <memset>
 8016bce:	4b0d      	ldr	r3, [pc, #52]	@ (8016c04 <std+0x58>)
 8016bd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8016bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8016c08 <std+0x5c>)
 8016bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8016c0c <std+0x60>)
 8016bd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016bda:	4b0d      	ldr	r3, [pc, #52]	@ (8016c10 <std+0x64>)
 8016bdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8016bde:	4b0d      	ldr	r3, [pc, #52]	@ (8016c14 <std+0x68>)
 8016be0:	6224      	str	r4, [r4, #32]
 8016be2:	429c      	cmp	r4, r3
 8016be4:	d006      	beq.n	8016bf4 <std+0x48>
 8016be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016bea:	4294      	cmp	r4, r2
 8016bec:	d002      	beq.n	8016bf4 <std+0x48>
 8016bee:	33d0      	adds	r3, #208	@ 0xd0
 8016bf0:	429c      	cmp	r4, r3
 8016bf2:	d105      	bne.n	8016c00 <std+0x54>
 8016bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bfc:	f000 bac0 	b.w	8017180 <__retarget_lock_init_recursive>
 8016c00:	bd10      	pop	{r4, pc}
 8016c02:	bf00      	nop
 8016c04:	08016e11 	.word	0x08016e11
 8016c08:	08016e33 	.word	0x08016e33
 8016c0c:	08016e6b 	.word	0x08016e6b
 8016c10:	08016e8f 	.word	0x08016e8f
 8016c14:	2000c850 	.word	0x2000c850

08016c18 <stdio_exit_handler>:
 8016c18:	4a02      	ldr	r2, [pc, #8]	@ (8016c24 <stdio_exit_handler+0xc>)
 8016c1a:	4903      	ldr	r1, [pc, #12]	@ (8016c28 <stdio_exit_handler+0x10>)
 8016c1c:	4803      	ldr	r0, [pc, #12]	@ (8016c2c <stdio_exit_handler+0x14>)
 8016c1e:	f000 b869 	b.w	8016cf4 <_fwalk_sglue>
 8016c22:	bf00      	nop
 8016c24:	20000030 	.word	0x20000030
 8016c28:	08017a85 	.word	0x08017a85
 8016c2c:	20000040 	.word	0x20000040

08016c30 <cleanup_stdio>:
 8016c30:	6841      	ldr	r1, [r0, #4]
 8016c32:	4b0c      	ldr	r3, [pc, #48]	@ (8016c64 <cleanup_stdio+0x34>)
 8016c34:	4299      	cmp	r1, r3
 8016c36:	b510      	push	{r4, lr}
 8016c38:	4604      	mov	r4, r0
 8016c3a:	d001      	beq.n	8016c40 <cleanup_stdio+0x10>
 8016c3c:	f000 ff22 	bl	8017a84 <_fflush_r>
 8016c40:	68a1      	ldr	r1, [r4, #8]
 8016c42:	4b09      	ldr	r3, [pc, #36]	@ (8016c68 <cleanup_stdio+0x38>)
 8016c44:	4299      	cmp	r1, r3
 8016c46:	d002      	beq.n	8016c4e <cleanup_stdio+0x1e>
 8016c48:	4620      	mov	r0, r4
 8016c4a:	f000 ff1b 	bl	8017a84 <_fflush_r>
 8016c4e:	68e1      	ldr	r1, [r4, #12]
 8016c50:	4b06      	ldr	r3, [pc, #24]	@ (8016c6c <cleanup_stdio+0x3c>)
 8016c52:	4299      	cmp	r1, r3
 8016c54:	d004      	beq.n	8016c60 <cleanup_stdio+0x30>
 8016c56:	4620      	mov	r0, r4
 8016c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c5c:	f000 bf12 	b.w	8017a84 <_fflush_r>
 8016c60:	bd10      	pop	{r4, pc}
 8016c62:	bf00      	nop
 8016c64:	2000c850 	.word	0x2000c850
 8016c68:	2000c8b8 	.word	0x2000c8b8
 8016c6c:	2000c920 	.word	0x2000c920

08016c70 <global_stdio_init.part.0>:
 8016c70:	b510      	push	{r4, lr}
 8016c72:	4b0b      	ldr	r3, [pc, #44]	@ (8016ca0 <global_stdio_init.part.0+0x30>)
 8016c74:	4c0b      	ldr	r4, [pc, #44]	@ (8016ca4 <global_stdio_init.part.0+0x34>)
 8016c76:	4a0c      	ldr	r2, [pc, #48]	@ (8016ca8 <global_stdio_init.part.0+0x38>)
 8016c78:	601a      	str	r2, [r3, #0]
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	2104      	movs	r1, #4
 8016c80:	f7ff ff94 	bl	8016bac <std>
 8016c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016c88:	2201      	movs	r2, #1
 8016c8a:	2109      	movs	r1, #9
 8016c8c:	f7ff ff8e 	bl	8016bac <std>
 8016c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016c94:	2202      	movs	r2, #2
 8016c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c9a:	2112      	movs	r1, #18
 8016c9c:	f7ff bf86 	b.w	8016bac <std>
 8016ca0:	2000c988 	.word	0x2000c988
 8016ca4:	2000c850 	.word	0x2000c850
 8016ca8:	08016c19 	.word	0x08016c19

08016cac <__sfp_lock_acquire>:
 8016cac:	4801      	ldr	r0, [pc, #4]	@ (8016cb4 <__sfp_lock_acquire+0x8>)
 8016cae:	f000 ba68 	b.w	8017182 <__retarget_lock_acquire_recursive>
 8016cb2:	bf00      	nop
 8016cb4:	2000c991 	.word	0x2000c991

08016cb8 <__sfp_lock_release>:
 8016cb8:	4801      	ldr	r0, [pc, #4]	@ (8016cc0 <__sfp_lock_release+0x8>)
 8016cba:	f000 ba63 	b.w	8017184 <__retarget_lock_release_recursive>
 8016cbe:	bf00      	nop
 8016cc0:	2000c991 	.word	0x2000c991

08016cc4 <__sinit>:
 8016cc4:	b510      	push	{r4, lr}
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	f7ff fff0 	bl	8016cac <__sfp_lock_acquire>
 8016ccc:	6a23      	ldr	r3, [r4, #32]
 8016cce:	b11b      	cbz	r3, 8016cd8 <__sinit+0x14>
 8016cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cd4:	f7ff bff0 	b.w	8016cb8 <__sfp_lock_release>
 8016cd8:	4b04      	ldr	r3, [pc, #16]	@ (8016cec <__sinit+0x28>)
 8016cda:	6223      	str	r3, [r4, #32]
 8016cdc:	4b04      	ldr	r3, [pc, #16]	@ (8016cf0 <__sinit+0x2c>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d1f5      	bne.n	8016cd0 <__sinit+0xc>
 8016ce4:	f7ff ffc4 	bl	8016c70 <global_stdio_init.part.0>
 8016ce8:	e7f2      	b.n	8016cd0 <__sinit+0xc>
 8016cea:	bf00      	nop
 8016cec:	08016c31 	.word	0x08016c31
 8016cf0:	2000c988 	.word	0x2000c988

08016cf4 <_fwalk_sglue>:
 8016cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016cf8:	4607      	mov	r7, r0
 8016cfa:	4688      	mov	r8, r1
 8016cfc:	4614      	mov	r4, r2
 8016cfe:	2600      	movs	r6, #0
 8016d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016d04:	f1b9 0901 	subs.w	r9, r9, #1
 8016d08:	d505      	bpl.n	8016d16 <_fwalk_sglue+0x22>
 8016d0a:	6824      	ldr	r4, [r4, #0]
 8016d0c:	2c00      	cmp	r4, #0
 8016d0e:	d1f7      	bne.n	8016d00 <_fwalk_sglue+0xc>
 8016d10:	4630      	mov	r0, r6
 8016d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d16:	89ab      	ldrh	r3, [r5, #12]
 8016d18:	2b01      	cmp	r3, #1
 8016d1a:	d907      	bls.n	8016d2c <_fwalk_sglue+0x38>
 8016d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016d20:	3301      	adds	r3, #1
 8016d22:	d003      	beq.n	8016d2c <_fwalk_sglue+0x38>
 8016d24:	4629      	mov	r1, r5
 8016d26:	4638      	mov	r0, r7
 8016d28:	47c0      	blx	r8
 8016d2a:	4306      	orrs	r6, r0
 8016d2c:	3568      	adds	r5, #104	@ 0x68
 8016d2e:	e7e9      	b.n	8016d04 <_fwalk_sglue+0x10>

08016d30 <iprintf>:
 8016d30:	b40f      	push	{r0, r1, r2, r3}
 8016d32:	b507      	push	{r0, r1, r2, lr}
 8016d34:	4906      	ldr	r1, [pc, #24]	@ (8016d50 <iprintf+0x20>)
 8016d36:	ab04      	add	r3, sp, #16
 8016d38:	6808      	ldr	r0, [r1, #0]
 8016d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d3e:	6881      	ldr	r1, [r0, #8]
 8016d40:	9301      	str	r3, [sp, #4]
 8016d42:	f000 fb77 	bl	8017434 <_vfiprintf_r>
 8016d46:	b003      	add	sp, #12
 8016d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d4c:	b004      	add	sp, #16
 8016d4e:	4770      	bx	lr
 8016d50:	2000003c 	.word	0x2000003c

08016d54 <_puts_r>:
 8016d54:	6a03      	ldr	r3, [r0, #32]
 8016d56:	b570      	push	{r4, r5, r6, lr}
 8016d58:	6884      	ldr	r4, [r0, #8]
 8016d5a:	4605      	mov	r5, r0
 8016d5c:	460e      	mov	r6, r1
 8016d5e:	b90b      	cbnz	r3, 8016d64 <_puts_r+0x10>
 8016d60:	f7ff ffb0 	bl	8016cc4 <__sinit>
 8016d64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d66:	07db      	lsls	r3, r3, #31
 8016d68:	d405      	bmi.n	8016d76 <_puts_r+0x22>
 8016d6a:	89a3      	ldrh	r3, [r4, #12]
 8016d6c:	0598      	lsls	r0, r3, #22
 8016d6e:	d402      	bmi.n	8016d76 <_puts_r+0x22>
 8016d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d72:	f000 fa06 	bl	8017182 <__retarget_lock_acquire_recursive>
 8016d76:	89a3      	ldrh	r3, [r4, #12]
 8016d78:	0719      	lsls	r1, r3, #28
 8016d7a:	d502      	bpl.n	8016d82 <_puts_r+0x2e>
 8016d7c:	6923      	ldr	r3, [r4, #16]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d135      	bne.n	8016dee <_puts_r+0x9a>
 8016d82:	4621      	mov	r1, r4
 8016d84:	4628      	mov	r0, r5
 8016d86:	f000 f8c5 	bl	8016f14 <__swsetup_r>
 8016d8a:	b380      	cbz	r0, 8016dee <_puts_r+0x9a>
 8016d8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d92:	07da      	lsls	r2, r3, #31
 8016d94:	d405      	bmi.n	8016da2 <_puts_r+0x4e>
 8016d96:	89a3      	ldrh	r3, [r4, #12]
 8016d98:	059b      	lsls	r3, r3, #22
 8016d9a:	d402      	bmi.n	8016da2 <_puts_r+0x4e>
 8016d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d9e:	f000 f9f1 	bl	8017184 <__retarget_lock_release_recursive>
 8016da2:	4628      	mov	r0, r5
 8016da4:	bd70      	pop	{r4, r5, r6, pc}
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	da04      	bge.n	8016db4 <_puts_r+0x60>
 8016daa:	69a2      	ldr	r2, [r4, #24]
 8016dac:	429a      	cmp	r2, r3
 8016dae:	dc17      	bgt.n	8016de0 <_puts_r+0x8c>
 8016db0:	290a      	cmp	r1, #10
 8016db2:	d015      	beq.n	8016de0 <_puts_r+0x8c>
 8016db4:	6823      	ldr	r3, [r4, #0]
 8016db6:	1c5a      	adds	r2, r3, #1
 8016db8:	6022      	str	r2, [r4, #0]
 8016dba:	7019      	strb	r1, [r3, #0]
 8016dbc:	68a3      	ldr	r3, [r4, #8]
 8016dbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016dc2:	3b01      	subs	r3, #1
 8016dc4:	60a3      	str	r3, [r4, #8]
 8016dc6:	2900      	cmp	r1, #0
 8016dc8:	d1ed      	bne.n	8016da6 <_puts_r+0x52>
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	da11      	bge.n	8016df2 <_puts_r+0x9e>
 8016dce:	4622      	mov	r2, r4
 8016dd0:	210a      	movs	r1, #10
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	f000 f85f 	bl	8016e96 <__swbuf_r>
 8016dd8:	3001      	adds	r0, #1
 8016dda:	d0d7      	beq.n	8016d8c <_puts_r+0x38>
 8016ddc:	250a      	movs	r5, #10
 8016dde:	e7d7      	b.n	8016d90 <_puts_r+0x3c>
 8016de0:	4622      	mov	r2, r4
 8016de2:	4628      	mov	r0, r5
 8016de4:	f000 f857 	bl	8016e96 <__swbuf_r>
 8016de8:	3001      	adds	r0, #1
 8016dea:	d1e7      	bne.n	8016dbc <_puts_r+0x68>
 8016dec:	e7ce      	b.n	8016d8c <_puts_r+0x38>
 8016dee:	3e01      	subs	r6, #1
 8016df0:	e7e4      	b.n	8016dbc <_puts_r+0x68>
 8016df2:	6823      	ldr	r3, [r4, #0]
 8016df4:	1c5a      	adds	r2, r3, #1
 8016df6:	6022      	str	r2, [r4, #0]
 8016df8:	220a      	movs	r2, #10
 8016dfa:	701a      	strb	r2, [r3, #0]
 8016dfc:	e7ee      	b.n	8016ddc <_puts_r+0x88>
	...

08016e00 <puts>:
 8016e00:	4b02      	ldr	r3, [pc, #8]	@ (8016e0c <puts+0xc>)
 8016e02:	4601      	mov	r1, r0
 8016e04:	6818      	ldr	r0, [r3, #0]
 8016e06:	f7ff bfa5 	b.w	8016d54 <_puts_r>
 8016e0a:	bf00      	nop
 8016e0c:	2000003c 	.word	0x2000003c

08016e10 <__sread>:
 8016e10:	b510      	push	{r4, lr}
 8016e12:	460c      	mov	r4, r1
 8016e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e18:	f000 f96a 	bl	80170f0 <_read_r>
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	bfab      	itete	ge
 8016e20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016e22:	89a3      	ldrhlt	r3, [r4, #12]
 8016e24:	181b      	addge	r3, r3, r0
 8016e26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016e2a:	bfac      	ite	ge
 8016e2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016e2e:	81a3      	strhlt	r3, [r4, #12]
 8016e30:	bd10      	pop	{r4, pc}

08016e32 <__swrite>:
 8016e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e36:	461f      	mov	r7, r3
 8016e38:	898b      	ldrh	r3, [r1, #12]
 8016e3a:	05db      	lsls	r3, r3, #23
 8016e3c:	4605      	mov	r5, r0
 8016e3e:	460c      	mov	r4, r1
 8016e40:	4616      	mov	r6, r2
 8016e42:	d505      	bpl.n	8016e50 <__swrite+0x1e>
 8016e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e48:	2302      	movs	r3, #2
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	f000 f93e 	bl	80170cc <_lseek_r>
 8016e50:	89a3      	ldrh	r3, [r4, #12]
 8016e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016e5a:	81a3      	strh	r3, [r4, #12]
 8016e5c:	4632      	mov	r2, r6
 8016e5e:	463b      	mov	r3, r7
 8016e60:	4628      	mov	r0, r5
 8016e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e66:	f000 b955 	b.w	8017114 <_write_r>

08016e6a <__sseek>:
 8016e6a:	b510      	push	{r4, lr}
 8016e6c:	460c      	mov	r4, r1
 8016e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e72:	f000 f92b 	bl	80170cc <_lseek_r>
 8016e76:	1c43      	adds	r3, r0, #1
 8016e78:	89a3      	ldrh	r3, [r4, #12]
 8016e7a:	bf15      	itete	ne
 8016e7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016e7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016e82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016e86:	81a3      	strheq	r3, [r4, #12]
 8016e88:	bf18      	it	ne
 8016e8a:	81a3      	strhne	r3, [r4, #12]
 8016e8c:	bd10      	pop	{r4, pc}

08016e8e <__sclose>:
 8016e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e92:	f000 b8ad 	b.w	8016ff0 <_close_r>

08016e96 <__swbuf_r>:
 8016e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e98:	460e      	mov	r6, r1
 8016e9a:	4614      	mov	r4, r2
 8016e9c:	4605      	mov	r5, r0
 8016e9e:	b118      	cbz	r0, 8016ea8 <__swbuf_r+0x12>
 8016ea0:	6a03      	ldr	r3, [r0, #32]
 8016ea2:	b90b      	cbnz	r3, 8016ea8 <__swbuf_r+0x12>
 8016ea4:	f7ff ff0e 	bl	8016cc4 <__sinit>
 8016ea8:	69a3      	ldr	r3, [r4, #24]
 8016eaa:	60a3      	str	r3, [r4, #8]
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	071a      	lsls	r2, r3, #28
 8016eb0:	d501      	bpl.n	8016eb6 <__swbuf_r+0x20>
 8016eb2:	6923      	ldr	r3, [r4, #16]
 8016eb4:	b943      	cbnz	r3, 8016ec8 <__swbuf_r+0x32>
 8016eb6:	4621      	mov	r1, r4
 8016eb8:	4628      	mov	r0, r5
 8016eba:	f000 f82b 	bl	8016f14 <__swsetup_r>
 8016ebe:	b118      	cbz	r0, 8016ec8 <__swbuf_r+0x32>
 8016ec0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016ec4:	4638      	mov	r0, r7
 8016ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ec8:	6823      	ldr	r3, [r4, #0]
 8016eca:	6922      	ldr	r2, [r4, #16]
 8016ecc:	1a98      	subs	r0, r3, r2
 8016ece:	6963      	ldr	r3, [r4, #20]
 8016ed0:	b2f6      	uxtb	r6, r6
 8016ed2:	4283      	cmp	r3, r0
 8016ed4:	4637      	mov	r7, r6
 8016ed6:	dc05      	bgt.n	8016ee4 <__swbuf_r+0x4e>
 8016ed8:	4621      	mov	r1, r4
 8016eda:	4628      	mov	r0, r5
 8016edc:	f000 fdd2 	bl	8017a84 <_fflush_r>
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	d1ed      	bne.n	8016ec0 <__swbuf_r+0x2a>
 8016ee4:	68a3      	ldr	r3, [r4, #8]
 8016ee6:	3b01      	subs	r3, #1
 8016ee8:	60a3      	str	r3, [r4, #8]
 8016eea:	6823      	ldr	r3, [r4, #0]
 8016eec:	1c5a      	adds	r2, r3, #1
 8016eee:	6022      	str	r2, [r4, #0]
 8016ef0:	701e      	strb	r6, [r3, #0]
 8016ef2:	6962      	ldr	r2, [r4, #20]
 8016ef4:	1c43      	adds	r3, r0, #1
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d004      	beq.n	8016f04 <__swbuf_r+0x6e>
 8016efa:	89a3      	ldrh	r3, [r4, #12]
 8016efc:	07db      	lsls	r3, r3, #31
 8016efe:	d5e1      	bpl.n	8016ec4 <__swbuf_r+0x2e>
 8016f00:	2e0a      	cmp	r6, #10
 8016f02:	d1df      	bne.n	8016ec4 <__swbuf_r+0x2e>
 8016f04:	4621      	mov	r1, r4
 8016f06:	4628      	mov	r0, r5
 8016f08:	f000 fdbc 	bl	8017a84 <_fflush_r>
 8016f0c:	2800      	cmp	r0, #0
 8016f0e:	d0d9      	beq.n	8016ec4 <__swbuf_r+0x2e>
 8016f10:	e7d6      	b.n	8016ec0 <__swbuf_r+0x2a>
	...

08016f14 <__swsetup_r>:
 8016f14:	b538      	push	{r3, r4, r5, lr}
 8016f16:	4b29      	ldr	r3, [pc, #164]	@ (8016fbc <__swsetup_r+0xa8>)
 8016f18:	4605      	mov	r5, r0
 8016f1a:	6818      	ldr	r0, [r3, #0]
 8016f1c:	460c      	mov	r4, r1
 8016f1e:	b118      	cbz	r0, 8016f28 <__swsetup_r+0x14>
 8016f20:	6a03      	ldr	r3, [r0, #32]
 8016f22:	b90b      	cbnz	r3, 8016f28 <__swsetup_r+0x14>
 8016f24:	f7ff fece 	bl	8016cc4 <__sinit>
 8016f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f2c:	0719      	lsls	r1, r3, #28
 8016f2e:	d422      	bmi.n	8016f76 <__swsetup_r+0x62>
 8016f30:	06da      	lsls	r2, r3, #27
 8016f32:	d407      	bmi.n	8016f44 <__swsetup_r+0x30>
 8016f34:	2209      	movs	r2, #9
 8016f36:	602a      	str	r2, [r5, #0]
 8016f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f3c:	81a3      	strh	r3, [r4, #12]
 8016f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f42:	e033      	b.n	8016fac <__swsetup_r+0x98>
 8016f44:	0758      	lsls	r0, r3, #29
 8016f46:	d512      	bpl.n	8016f6e <__swsetup_r+0x5a>
 8016f48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016f4a:	b141      	cbz	r1, 8016f5e <__swsetup_r+0x4a>
 8016f4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016f50:	4299      	cmp	r1, r3
 8016f52:	d002      	beq.n	8016f5a <__swsetup_r+0x46>
 8016f54:	4628      	mov	r0, r5
 8016f56:	f000 f943 	bl	80171e0 <_free_r>
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8016f5e:	89a3      	ldrh	r3, [r4, #12]
 8016f60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016f64:	81a3      	strh	r3, [r4, #12]
 8016f66:	2300      	movs	r3, #0
 8016f68:	6063      	str	r3, [r4, #4]
 8016f6a:	6923      	ldr	r3, [r4, #16]
 8016f6c:	6023      	str	r3, [r4, #0]
 8016f6e:	89a3      	ldrh	r3, [r4, #12]
 8016f70:	f043 0308 	orr.w	r3, r3, #8
 8016f74:	81a3      	strh	r3, [r4, #12]
 8016f76:	6923      	ldr	r3, [r4, #16]
 8016f78:	b94b      	cbnz	r3, 8016f8e <__swsetup_r+0x7a>
 8016f7a:	89a3      	ldrh	r3, [r4, #12]
 8016f7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016f84:	d003      	beq.n	8016f8e <__swsetup_r+0x7a>
 8016f86:	4621      	mov	r1, r4
 8016f88:	4628      	mov	r0, r5
 8016f8a:	f000 fddb 	bl	8017b44 <__smakebuf_r>
 8016f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f92:	f013 0201 	ands.w	r2, r3, #1
 8016f96:	d00a      	beq.n	8016fae <__swsetup_r+0x9a>
 8016f98:	2200      	movs	r2, #0
 8016f9a:	60a2      	str	r2, [r4, #8]
 8016f9c:	6962      	ldr	r2, [r4, #20]
 8016f9e:	4252      	negs	r2, r2
 8016fa0:	61a2      	str	r2, [r4, #24]
 8016fa2:	6922      	ldr	r2, [r4, #16]
 8016fa4:	b942      	cbnz	r2, 8016fb8 <__swsetup_r+0xa4>
 8016fa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016faa:	d1c5      	bne.n	8016f38 <__swsetup_r+0x24>
 8016fac:	bd38      	pop	{r3, r4, r5, pc}
 8016fae:	0799      	lsls	r1, r3, #30
 8016fb0:	bf58      	it	pl
 8016fb2:	6962      	ldrpl	r2, [r4, #20]
 8016fb4:	60a2      	str	r2, [r4, #8]
 8016fb6:	e7f4      	b.n	8016fa2 <__swsetup_r+0x8e>
 8016fb8:	2000      	movs	r0, #0
 8016fba:	e7f7      	b.n	8016fac <__swsetup_r+0x98>
 8016fbc:	2000003c 	.word	0x2000003c

08016fc0 <memcmp>:
 8016fc0:	b510      	push	{r4, lr}
 8016fc2:	3901      	subs	r1, #1
 8016fc4:	4402      	add	r2, r0
 8016fc6:	4290      	cmp	r0, r2
 8016fc8:	d101      	bne.n	8016fce <memcmp+0xe>
 8016fca:	2000      	movs	r0, #0
 8016fcc:	e005      	b.n	8016fda <memcmp+0x1a>
 8016fce:	7803      	ldrb	r3, [r0, #0]
 8016fd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016fd4:	42a3      	cmp	r3, r4
 8016fd6:	d001      	beq.n	8016fdc <memcmp+0x1c>
 8016fd8:	1b18      	subs	r0, r3, r4
 8016fda:	bd10      	pop	{r4, pc}
 8016fdc:	3001      	adds	r0, #1
 8016fde:	e7f2      	b.n	8016fc6 <memcmp+0x6>

08016fe0 <memset>:
 8016fe0:	4402      	add	r2, r0
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	d100      	bne.n	8016fea <memset+0xa>
 8016fe8:	4770      	bx	lr
 8016fea:	f803 1b01 	strb.w	r1, [r3], #1
 8016fee:	e7f9      	b.n	8016fe4 <memset+0x4>

08016ff0 <_close_r>:
 8016ff0:	b538      	push	{r3, r4, r5, lr}
 8016ff2:	4d06      	ldr	r5, [pc, #24]	@ (801700c <_close_r+0x1c>)
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	4604      	mov	r4, r0
 8016ff8:	4608      	mov	r0, r1
 8016ffa:	602b      	str	r3, [r5, #0]
 8016ffc:	f7ea fd7e 	bl	8001afc <_close>
 8017000:	1c43      	adds	r3, r0, #1
 8017002:	d102      	bne.n	801700a <_close_r+0x1a>
 8017004:	682b      	ldr	r3, [r5, #0]
 8017006:	b103      	cbz	r3, 801700a <_close_r+0x1a>
 8017008:	6023      	str	r3, [r4, #0]
 801700a:	bd38      	pop	{r3, r4, r5, pc}
 801700c:	2000c98c 	.word	0x2000c98c

08017010 <_reclaim_reent>:
 8017010:	4b2d      	ldr	r3, [pc, #180]	@ (80170c8 <_reclaim_reent+0xb8>)
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	4283      	cmp	r3, r0
 8017016:	b570      	push	{r4, r5, r6, lr}
 8017018:	4604      	mov	r4, r0
 801701a:	d053      	beq.n	80170c4 <_reclaim_reent+0xb4>
 801701c:	69c3      	ldr	r3, [r0, #28]
 801701e:	b31b      	cbz	r3, 8017068 <_reclaim_reent+0x58>
 8017020:	68db      	ldr	r3, [r3, #12]
 8017022:	b163      	cbz	r3, 801703e <_reclaim_reent+0x2e>
 8017024:	2500      	movs	r5, #0
 8017026:	69e3      	ldr	r3, [r4, #28]
 8017028:	68db      	ldr	r3, [r3, #12]
 801702a:	5959      	ldr	r1, [r3, r5]
 801702c:	b9b1      	cbnz	r1, 801705c <_reclaim_reent+0x4c>
 801702e:	3504      	adds	r5, #4
 8017030:	2d80      	cmp	r5, #128	@ 0x80
 8017032:	d1f8      	bne.n	8017026 <_reclaim_reent+0x16>
 8017034:	69e3      	ldr	r3, [r4, #28]
 8017036:	4620      	mov	r0, r4
 8017038:	68d9      	ldr	r1, [r3, #12]
 801703a:	f000 f8d1 	bl	80171e0 <_free_r>
 801703e:	69e3      	ldr	r3, [r4, #28]
 8017040:	6819      	ldr	r1, [r3, #0]
 8017042:	b111      	cbz	r1, 801704a <_reclaim_reent+0x3a>
 8017044:	4620      	mov	r0, r4
 8017046:	f000 f8cb 	bl	80171e0 <_free_r>
 801704a:	69e3      	ldr	r3, [r4, #28]
 801704c:	689d      	ldr	r5, [r3, #8]
 801704e:	b15d      	cbz	r5, 8017068 <_reclaim_reent+0x58>
 8017050:	4629      	mov	r1, r5
 8017052:	4620      	mov	r0, r4
 8017054:	682d      	ldr	r5, [r5, #0]
 8017056:	f000 f8c3 	bl	80171e0 <_free_r>
 801705a:	e7f8      	b.n	801704e <_reclaim_reent+0x3e>
 801705c:	680e      	ldr	r6, [r1, #0]
 801705e:	4620      	mov	r0, r4
 8017060:	f000 f8be 	bl	80171e0 <_free_r>
 8017064:	4631      	mov	r1, r6
 8017066:	e7e1      	b.n	801702c <_reclaim_reent+0x1c>
 8017068:	6961      	ldr	r1, [r4, #20]
 801706a:	b111      	cbz	r1, 8017072 <_reclaim_reent+0x62>
 801706c:	4620      	mov	r0, r4
 801706e:	f000 f8b7 	bl	80171e0 <_free_r>
 8017072:	69e1      	ldr	r1, [r4, #28]
 8017074:	b111      	cbz	r1, 801707c <_reclaim_reent+0x6c>
 8017076:	4620      	mov	r0, r4
 8017078:	f000 f8b2 	bl	80171e0 <_free_r>
 801707c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801707e:	b111      	cbz	r1, 8017086 <_reclaim_reent+0x76>
 8017080:	4620      	mov	r0, r4
 8017082:	f000 f8ad 	bl	80171e0 <_free_r>
 8017086:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017088:	b111      	cbz	r1, 8017090 <_reclaim_reent+0x80>
 801708a:	4620      	mov	r0, r4
 801708c:	f000 f8a8 	bl	80171e0 <_free_r>
 8017090:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017092:	b111      	cbz	r1, 801709a <_reclaim_reent+0x8a>
 8017094:	4620      	mov	r0, r4
 8017096:	f000 f8a3 	bl	80171e0 <_free_r>
 801709a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801709c:	b111      	cbz	r1, 80170a4 <_reclaim_reent+0x94>
 801709e:	4620      	mov	r0, r4
 80170a0:	f000 f89e 	bl	80171e0 <_free_r>
 80170a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80170a6:	b111      	cbz	r1, 80170ae <_reclaim_reent+0x9e>
 80170a8:	4620      	mov	r0, r4
 80170aa:	f000 f899 	bl	80171e0 <_free_r>
 80170ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80170b0:	b111      	cbz	r1, 80170b8 <_reclaim_reent+0xa8>
 80170b2:	4620      	mov	r0, r4
 80170b4:	f000 f894 	bl	80171e0 <_free_r>
 80170b8:	6a23      	ldr	r3, [r4, #32]
 80170ba:	b11b      	cbz	r3, 80170c4 <_reclaim_reent+0xb4>
 80170bc:	4620      	mov	r0, r4
 80170be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170c2:	4718      	bx	r3
 80170c4:	bd70      	pop	{r4, r5, r6, pc}
 80170c6:	bf00      	nop
 80170c8:	2000003c 	.word	0x2000003c

080170cc <_lseek_r>:
 80170cc:	b538      	push	{r3, r4, r5, lr}
 80170ce:	4d07      	ldr	r5, [pc, #28]	@ (80170ec <_lseek_r+0x20>)
 80170d0:	4604      	mov	r4, r0
 80170d2:	4608      	mov	r0, r1
 80170d4:	4611      	mov	r1, r2
 80170d6:	2200      	movs	r2, #0
 80170d8:	602a      	str	r2, [r5, #0]
 80170da:	461a      	mov	r2, r3
 80170dc:	f7ea fd35 	bl	8001b4a <_lseek>
 80170e0:	1c43      	adds	r3, r0, #1
 80170e2:	d102      	bne.n	80170ea <_lseek_r+0x1e>
 80170e4:	682b      	ldr	r3, [r5, #0]
 80170e6:	b103      	cbz	r3, 80170ea <_lseek_r+0x1e>
 80170e8:	6023      	str	r3, [r4, #0]
 80170ea:	bd38      	pop	{r3, r4, r5, pc}
 80170ec:	2000c98c 	.word	0x2000c98c

080170f0 <_read_r>:
 80170f0:	b538      	push	{r3, r4, r5, lr}
 80170f2:	4d07      	ldr	r5, [pc, #28]	@ (8017110 <_read_r+0x20>)
 80170f4:	4604      	mov	r4, r0
 80170f6:	4608      	mov	r0, r1
 80170f8:	4611      	mov	r1, r2
 80170fa:	2200      	movs	r2, #0
 80170fc:	602a      	str	r2, [r5, #0]
 80170fe:	461a      	mov	r2, r3
 8017100:	f7ea fcdf 	bl	8001ac2 <_read>
 8017104:	1c43      	adds	r3, r0, #1
 8017106:	d102      	bne.n	801710e <_read_r+0x1e>
 8017108:	682b      	ldr	r3, [r5, #0]
 801710a:	b103      	cbz	r3, 801710e <_read_r+0x1e>
 801710c:	6023      	str	r3, [r4, #0]
 801710e:	bd38      	pop	{r3, r4, r5, pc}
 8017110:	2000c98c 	.word	0x2000c98c

08017114 <_write_r>:
 8017114:	b538      	push	{r3, r4, r5, lr}
 8017116:	4d07      	ldr	r5, [pc, #28]	@ (8017134 <_write_r+0x20>)
 8017118:	4604      	mov	r4, r0
 801711a:	4608      	mov	r0, r1
 801711c:	4611      	mov	r1, r2
 801711e:	2200      	movs	r2, #0
 8017120:	602a      	str	r2, [r5, #0]
 8017122:	461a      	mov	r2, r3
 8017124:	f7ea f840 	bl	80011a8 <_write>
 8017128:	1c43      	adds	r3, r0, #1
 801712a:	d102      	bne.n	8017132 <_write_r+0x1e>
 801712c:	682b      	ldr	r3, [r5, #0]
 801712e:	b103      	cbz	r3, 8017132 <_write_r+0x1e>
 8017130:	6023      	str	r3, [r4, #0]
 8017132:	bd38      	pop	{r3, r4, r5, pc}
 8017134:	2000c98c 	.word	0x2000c98c

08017138 <__libc_init_array>:
 8017138:	b570      	push	{r4, r5, r6, lr}
 801713a:	4d0d      	ldr	r5, [pc, #52]	@ (8017170 <__libc_init_array+0x38>)
 801713c:	4c0d      	ldr	r4, [pc, #52]	@ (8017174 <__libc_init_array+0x3c>)
 801713e:	1b64      	subs	r4, r4, r5
 8017140:	10a4      	asrs	r4, r4, #2
 8017142:	2600      	movs	r6, #0
 8017144:	42a6      	cmp	r6, r4
 8017146:	d109      	bne.n	801715c <__libc_init_array+0x24>
 8017148:	4d0b      	ldr	r5, [pc, #44]	@ (8017178 <__libc_init_array+0x40>)
 801714a:	4c0c      	ldr	r4, [pc, #48]	@ (801717c <__libc_init_array+0x44>)
 801714c:	f000 fdb4 	bl	8017cb8 <_init>
 8017150:	1b64      	subs	r4, r4, r5
 8017152:	10a4      	asrs	r4, r4, #2
 8017154:	2600      	movs	r6, #0
 8017156:	42a6      	cmp	r6, r4
 8017158:	d105      	bne.n	8017166 <__libc_init_array+0x2e>
 801715a:	bd70      	pop	{r4, r5, r6, pc}
 801715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017160:	4798      	blx	r3
 8017162:	3601      	adds	r6, #1
 8017164:	e7ee      	b.n	8017144 <__libc_init_array+0xc>
 8017166:	f855 3b04 	ldr.w	r3, [r5], #4
 801716a:	4798      	blx	r3
 801716c:	3601      	adds	r6, #1
 801716e:	e7f2      	b.n	8017156 <__libc_init_array+0x1e>
 8017170:	0801ac4c 	.word	0x0801ac4c
 8017174:	0801ac4c 	.word	0x0801ac4c
 8017178:	0801ac4c 	.word	0x0801ac4c
 801717c:	0801ac50 	.word	0x0801ac50

08017180 <__retarget_lock_init_recursive>:
 8017180:	4770      	bx	lr

08017182 <__retarget_lock_acquire_recursive>:
 8017182:	4770      	bx	lr

08017184 <__retarget_lock_release_recursive>:
 8017184:	4770      	bx	lr

08017186 <memcpy>:
 8017186:	440a      	add	r2, r1
 8017188:	4291      	cmp	r1, r2
 801718a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801718e:	d100      	bne.n	8017192 <memcpy+0xc>
 8017190:	4770      	bx	lr
 8017192:	b510      	push	{r4, lr}
 8017194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017198:	f803 4f01 	strb.w	r4, [r3, #1]!
 801719c:	4291      	cmp	r1, r2
 801719e:	d1f9      	bne.n	8017194 <memcpy+0xe>
 80171a0:	bd10      	pop	{r4, pc}
	...

080171a4 <__assert_func>:
 80171a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171a6:	4614      	mov	r4, r2
 80171a8:	461a      	mov	r2, r3
 80171aa:	4b09      	ldr	r3, [pc, #36]	@ (80171d0 <__assert_func+0x2c>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	4605      	mov	r5, r0
 80171b0:	68d8      	ldr	r0, [r3, #12]
 80171b2:	b14c      	cbz	r4, 80171c8 <__assert_func+0x24>
 80171b4:	4b07      	ldr	r3, [pc, #28]	@ (80171d4 <__assert_func+0x30>)
 80171b6:	9100      	str	r1, [sp, #0]
 80171b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80171bc:	4906      	ldr	r1, [pc, #24]	@ (80171d8 <__assert_func+0x34>)
 80171be:	462b      	mov	r3, r5
 80171c0:	f000 fc88 	bl	8017ad4 <fiprintf>
 80171c4:	f000 fd2c 	bl	8017c20 <abort>
 80171c8:	4b04      	ldr	r3, [pc, #16]	@ (80171dc <__assert_func+0x38>)
 80171ca:	461c      	mov	r4, r3
 80171cc:	e7f3      	b.n	80171b6 <__assert_func+0x12>
 80171ce:	bf00      	nop
 80171d0:	2000003c 	.word	0x2000003c
 80171d4:	0801abd3 	.word	0x0801abd3
 80171d8:	0801abe0 	.word	0x0801abe0
 80171dc:	0801ac0e 	.word	0x0801ac0e

080171e0 <_free_r>:
 80171e0:	b538      	push	{r3, r4, r5, lr}
 80171e2:	4605      	mov	r5, r0
 80171e4:	2900      	cmp	r1, #0
 80171e6:	d041      	beq.n	801726c <_free_r+0x8c>
 80171e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171ec:	1f0c      	subs	r4, r1, #4
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	bfb8      	it	lt
 80171f2:	18e4      	addlt	r4, r4, r3
 80171f4:	f000 f8e8 	bl	80173c8 <__malloc_lock>
 80171f8:	4a1d      	ldr	r2, [pc, #116]	@ (8017270 <_free_r+0x90>)
 80171fa:	6813      	ldr	r3, [r2, #0]
 80171fc:	b933      	cbnz	r3, 801720c <_free_r+0x2c>
 80171fe:	6063      	str	r3, [r4, #4]
 8017200:	6014      	str	r4, [r2, #0]
 8017202:	4628      	mov	r0, r5
 8017204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017208:	f000 b8e4 	b.w	80173d4 <__malloc_unlock>
 801720c:	42a3      	cmp	r3, r4
 801720e:	d908      	bls.n	8017222 <_free_r+0x42>
 8017210:	6820      	ldr	r0, [r4, #0]
 8017212:	1821      	adds	r1, r4, r0
 8017214:	428b      	cmp	r3, r1
 8017216:	bf01      	itttt	eq
 8017218:	6819      	ldreq	r1, [r3, #0]
 801721a:	685b      	ldreq	r3, [r3, #4]
 801721c:	1809      	addeq	r1, r1, r0
 801721e:	6021      	streq	r1, [r4, #0]
 8017220:	e7ed      	b.n	80171fe <_free_r+0x1e>
 8017222:	461a      	mov	r2, r3
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	b10b      	cbz	r3, 801722c <_free_r+0x4c>
 8017228:	42a3      	cmp	r3, r4
 801722a:	d9fa      	bls.n	8017222 <_free_r+0x42>
 801722c:	6811      	ldr	r1, [r2, #0]
 801722e:	1850      	adds	r0, r2, r1
 8017230:	42a0      	cmp	r0, r4
 8017232:	d10b      	bne.n	801724c <_free_r+0x6c>
 8017234:	6820      	ldr	r0, [r4, #0]
 8017236:	4401      	add	r1, r0
 8017238:	1850      	adds	r0, r2, r1
 801723a:	4283      	cmp	r3, r0
 801723c:	6011      	str	r1, [r2, #0]
 801723e:	d1e0      	bne.n	8017202 <_free_r+0x22>
 8017240:	6818      	ldr	r0, [r3, #0]
 8017242:	685b      	ldr	r3, [r3, #4]
 8017244:	6053      	str	r3, [r2, #4]
 8017246:	4408      	add	r0, r1
 8017248:	6010      	str	r0, [r2, #0]
 801724a:	e7da      	b.n	8017202 <_free_r+0x22>
 801724c:	d902      	bls.n	8017254 <_free_r+0x74>
 801724e:	230c      	movs	r3, #12
 8017250:	602b      	str	r3, [r5, #0]
 8017252:	e7d6      	b.n	8017202 <_free_r+0x22>
 8017254:	6820      	ldr	r0, [r4, #0]
 8017256:	1821      	adds	r1, r4, r0
 8017258:	428b      	cmp	r3, r1
 801725a:	bf04      	itt	eq
 801725c:	6819      	ldreq	r1, [r3, #0]
 801725e:	685b      	ldreq	r3, [r3, #4]
 8017260:	6063      	str	r3, [r4, #4]
 8017262:	bf04      	itt	eq
 8017264:	1809      	addeq	r1, r1, r0
 8017266:	6021      	streq	r1, [r4, #0]
 8017268:	6054      	str	r4, [r2, #4]
 801726a:	e7ca      	b.n	8017202 <_free_r+0x22>
 801726c:	bd38      	pop	{r3, r4, r5, pc}
 801726e:	bf00      	nop
 8017270:	2000c998 	.word	0x2000c998

08017274 <malloc>:
 8017274:	4b02      	ldr	r3, [pc, #8]	@ (8017280 <malloc+0xc>)
 8017276:	4601      	mov	r1, r0
 8017278:	6818      	ldr	r0, [r3, #0]
 801727a:	f000 b825 	b.w	80172c8 <_malloc_r>
 801727e:	bf00      	nop
 8017280:	2000003c 	.word	0x2000003c

08017284 <sbrk_aligned>:
 8017284:	b570      	push	{r4, r5, r6, lr}
 8017286:	4e0f      	ldr	r6, [pc, #60]	@ (80172c4 <sbrk_aligned+0x40>)
 8017288:	460c      	mov	r4, r1
 801728a:	6831      	ldr	r1, [r6, #0]
 801728c:	4605      	mov	r5, r0
 801728e:	b911      	cbnz	r1, 8017296 <sbrk_aligned+0x12>
 8017290:	f000 fcb6 	bl	8017c00 <_sbrk_r>
 8017294:	6030      	str	r0, [r6, #0]
 8017296:	4621      	mov	r1, r4
 8017298:	4628      	mov	r0, r5
 801729a:	f000 fcb1 	bl	8017c00 <_sbrk_r>
 801729e:	1c43      	adds	r3, r0, #1
 80172a0:	d103      	bne.n	80172aa <sbrk_aligned+0x26>
 80172a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80172a6:	4620      	mov	r0, r4
 80172a8:	bd70      	pop	{r4, r5, r6, pc}
 80172aa:	1cc4      	adds	r4, r0, #3
 80172ac:	f024 0403 	bic.w	r4, r4, #3
 80172b0:	42a0      	cmp	r0, r4
 80172b2:	d0f8      	beq.n	80172a6 <sbrk_aligned+0x22>
 80172b4:	1a21      	subs	r1, r4, r0
 80172b6:	4628      	mov	r0, r5
 80172b8:	f000 fca2 	bl	8017c00 <_sbrk_r>
 80172bc:	3001      	adds	r0, #1
 80172be:	d1f2      	bne.n	80172a6 <sbrk_aligned+0x22>
 80172c0:	e7ef      	b.n	80172a2 <sbrk_aligned+0x1e>
 80172c2:	bf00      	nop
 80172c4:	2000c994 	.word	0x2000c994

080172c8 <_malloc_r>:
 80172c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172cc:	1ccd      	adds	r5, r1, #3
 80172ce:	f025 0503 	bic.w	r5, r5, #3
 80172d2:	3508      	adds	r5, #8
 80172d4:	2d0c      	cmp	r5, #12
 80172d6:	bf38      	it	cc
 80172d8:	250c      	movcc	r5, #12
 80172da:	2d00      	cmp	r5, #0
 80172dc:	4606      	mov	r6, r0
 80172de:	db01      	blt.n	80172e4 <_malloc_r+0x1c>
 80172e0:	42a9      	cmp	r1, r5
 80172e2:	d904      	bls.n	80172ee <_malloc_r+0x26>
 80172e4:	230c      	movs	r3, #12
 80172e6:	6033      	str	r3, [r6, #0]
 80172e8:	2000      	movs	r0, #0
 80172ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80173c4 <_malloc_r+0xfc>
 80172f2:	f000 f869 	bl	80173c8 <__malloc_lock>
 80172f6:	f8d8 3000 	ldr.w	r3, [r8]
 80172fa:	461c      	mov	r4, r3
 80172fc:	bb44      	cbnz	r4, 8017350 <_malloc_r+0x88>
 80172fe:	4629      	mov	r1, r5
 8017300:	4630      	mov	r0, r6
 8017302:	f7ff ffbf 	bl	8017284 <sbrk_aligned>
 8017306:	1c43      	adds	r3, r0, #1
 8017308:	4604      	mov	r4, r0
 801730a:	d158      	bne.n	80173be <_malloc_r+0xf6>
 801730c:	f8d8 4000 	ldr.w	r4, [r8]
 8017310:	4627      	mov	r7, r4
 8017312:	2f00      	cmp	r7, #0
 8017314:	d143      	bne.n	801739e <_malloc_r+0xd6>
 8017316:	2c00      	cmp	r4, #0
 8017318:	d04b      	beq.n	80173b2 <_malloc_r+0xea>
 801731a:	6823      	ldr	r3, [r4, #0]
 801731c:	4639      	mov	r1, r7
 801731e:	4630      	mov	r0, r6
 8017320:	eb04 0903 	add.w	r9, r4, r3
 8017324:	f000 fc6c 	bl	8017c00 <_sbrk_r>
 8017328:	4581      	cmp	r9, r0
 801732a:	d142      	bne.n	80173b2 <_malloc_r+0xea>
 801732c:	6821      	ldr	r1, [r4, #0]
 801732e:	1a6d      	subs	r5, r5, r1
 8017330:	4629      	mov	r1, r5
 8017332:	4630      	mov	r0, r6
 8017334:	f7ff ffa6 	bl	8017284 <sbrk_aligned>
 8017338:	3001      	adds	r0, #1
 801733a:	d03a      	beq.n	80173b2 <_malloc_r+0xea>
 801733c:	6823      	ldr	r3, [r4, #0]
 801733e:	442b      	add	r3, r5
 8017340:	6023      	str	r3, [r4, #0]
 8017342:	f8d8 3000 	ldr.w	r3, [r8]
 8017346:	685a      	ldr	r2, [r3, #4]
 8017348:	bb62      	cbnz	r2, 80173a4 <_malloc_r+0xdc>
 801734a:	f8c8 7000 	str.w	r7, [r8]
 801734e:	e00f      	b.n	8017370 <_malloc_r+0xa8>
 8017350:	6822      	ldr	r2, [r4, #0]
 8017352:	1b52      	subs	r2, r2, r5
 8017354:	d420      	bmi.n	8017398 <_malloc_r+0xd0>
 8017356:	2a0b      	cmp	r2, #11
 8017358:	d917      	bls.n	801738a <_malloc_r+0xc2>
 801735a:	1961      	adds	r1, r4, r5
 801735c:	42a3      	cmp	r3, r4
 801735e:	6025      	str	r5, [r4, #0]
 8017360:	bf18      	it	ne
 8017362:	6059      	strne	r1, [r3, #4]
 8017364:	6863      	ldr	r3, [r4, #4]
 8017366:	bf08      	it	eq
 8017368:	f8c8 1000 	streq.w	r1, [r8]
 801736c:	5162      	str	r2, [r4, r5]
 801736e:	604b      	str	r3, [r1, #4]
 8017370:	4630      	mov	r0, r6
 8017372:	f000 f82f 	bl	80173d4 <__malloc_unlock>
 8017376:	f104 000b 	add.w	r0, r4, #11
 801737a:	1d23      	adds	r3, r4, #4
 801737c:	f020 0007 	bic.w	r0, r0, #7
 8017380:	1ac2      	subs	r2, r0, r3
 8017382:	bf1c      	itt	ne
 8017384:	1a1b      	subne	r3, r3, r0
 8017386:	50a3      	strne	r3, [r4, r2]
 8017388:	e7af      	b.n	80172ea <_malloc_r+0x22>
 801738a:	6862      	ldr	r2, [r4, #4]
 801738c:	42a3      	cmp	r3, r4
 801738e:	bf0c      	ite	eq
 8017390:	f8c8 2000 	streq.w	r2, [r8]
 8017394:	605a      	strne	r2, [r3, #4]
 8017396:	e7eb      	b.n	8017370 <_malloc_r+0xa8>
 8017398:	4623      	mov	r3, r4
 801739a:	6864      	ldr	r4, [r4, #4]
 801739c:	e7ae      	b.n	80172fc <_malloc_r+0x34>
 801739e:	463c      	mov	r4, r7
 80173a0:	687f      	ldr	r7, [r7, #4]
 80173a2:	e7b6      	b.n	8017312 <_malloc_r+0x4a>
 80173a4:	461a      	mov	r2, r3
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	42a3      	cmp	r3, r4
 80173aa:	d1fb      	bne.n	80173a4 <_malloc_r+0xdc>
 80173ac:	2300      	movs	r3, #0
 80173ae:	6053      	str	r3, [r2, #4]
 80173b0:	e7de      	b.n	8017370 <_malloc_r+0xa8>
 80173b2:	230c      	movs	r3, #12
 80173b4:	6033      	str	r3, [r6, #0]
 80173b6:	4630      	mov	r0, r6
 80173b8:	f000 f80c 	bl	80173d4 <__malloc_unlock>
 80173bc:	e794      	b.n	80172e8 <_malloc_r+0x20>
 80173be:	6005      	str	r5, [r0, #0]
 80173c0:	e7d6      	b.n	8017370 <_malloc_r+0xa8>
 80173c2:	bf00      	nop
 80173c4:	2000c998 	.word	0x2000c998

080173c8 <__malloc_lock>:
 80173c8:	4801      	ldr	r0, [pc, #4]	@ (80173d0 <__malloc_lock+0x8>)
 80173ca:	f7ff beda 	b.w	8017182 <__retarget_lock_acquire_recursive>
 80173ce:	bf00      	nop
 80173d0:	2000c990 	.word	0x2000c990

080173d4 <__malloc_unlock>:
 80173d4:	4801      	ldr	r0, [pc, #4]	@ (80173dc <__malloc_unlock+0x8>)
 80173d6:	f7ff bed5 	b.w	8017184 <__retarget_lock_release_recursive>
 80173da:	bf00      	nop
 80173dc:	2000c990 	.word	0x2000c990

080173e0 <__sfputc_r>:
 80173e0:	6893      	ldr	r3, [r2, #8]
 80173e2:	3b01      	subs	r3, #1
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	b410      	push	{r4}
 80173e8:	6093      	str	r3, [r2, #8]
 80173ea:	da08      	bge.n	80173fe <__sfputc_r+0x1e>
 80173ec:	6994      	ldr	r4, [r2, #24]
 80173ee:	42a3      	cmp	r3, r4
 80173f0:	db01      	blt.n	80173f6 <__sfputc_r+0x16>
 80173f2:	290a      	cmp	r1, #10
 80173f4:	d103      	bne.n	80173fe <__sfputc_r+0x1e>
 80173f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173fa:	f7ff bd4c 	b.w	8016e96 <__swbuf_r>
 80173fe:	6813      	ldr	r3, [r2, #0]
 8017400:	1c58      	adds	r0, r3, #1
 8017402:	6010      	str	r0, [r2, #0]
 8017404:	7019      	strb	r1, [r3, #0]
 8017406:	4608      	mov	r0, r1
 8017408:	f85d 4b04 	ldr.w	r4, [sp], #4
 801740c:	4770      	bx	lr

0801740e <__sfputs_r>:
 801740e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017410:	4606      	mov	r6, r0
 8017412:	460f      	mov	r7, r1
 8017414:	4614      	mov	r4, r2
 8017416:	18d5      	adds	r5, r2, r3
 8017418:	42ac      	cmp	r4, r5
 801741a:	d101      	bne.n	8017420 <__sfputs_r+0x12>
 801741c:	2000      	movs	r0, #0
 801741e:	e007      	b.n	8017430 <__sfputs_r+0x22>
 8017420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017424:	463a      	mov	r2, r7
 8017426:	4630      	mov	r0, r6
 8017428:	f7ff ffda 	bl	80173e0 <__sfputc_r>
 801742c:	1c43      	adds	r3, r0, #1
 801742e:	d1f3      	bne.n	8017418 <__sfputs_r+0xa>
 8017430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017434 <_vfiprintf_r>:
 8017434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017438:	460d      	mov	r5, r1
 801743a:	b09d      	sub	sp, #116	@ 0x74
 801743c:	4614      	mov	r4, r2
 801743e:	4698      	mov	r8, r3
 8017440:	4606      	mov	r6, r0
 8017442:	b118      	cbz	r0, 801744c <_vfiprintf_r+0x18>
 8017444:	6a03      	ldr	r3, [r0, #32]
 8017446:	b90b      	cbnz	r3, 801744c <_vfiprintf_r+0x18>
 8017448:	f7ff fc3c 	bl	8016cc4 <__sinit>
 801744c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801744e:	07d9      	lsls	r1, r3, #31
 8017450:	d405      	bmi.n	801745e <_vfiprintf_r+0x2a>
 8017452:	89ab      	ldrh	r3, [r5, #12]
 8017454:	059a      	lsls	r2, r3, #22
 8017456:	d402      	bmi.n	801745e <_vfiprintf_r+0x2a>
 8017458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801745a:	f7ff fe92 	bl	8017182 <__retarget_lock_acquire_recursive>
 801745e:	89ab      	ldrh	r3, [r5, #12]
 8017460:	071b      	lsls	r3, r3, #28
 8017462:	d501      	bpl.n	8017468 <_vfiprintf_r+0x34>
 8017464:	692b      	ldr	r3, [r5, #16]
 8017466:	b99b      	cbnz	r3, 8017490 <_vfiprintf_r+0x5c>
 8017468:	4629      	mov	r1, r5
 801746a:	4630      	mov	r0, r6
 801746c:	f7ff fd52 	bl	8016f14 <__swsetup_r>
 8017470:	b170      	cbz	r0, 8017490 <_vfiprintf_r+0x5c>
 8017472:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017474:	07dc      	lsls	r4, r3, #31
 8017476:	d504      	bpl.n	8017482 <_vfiprintf_r+0x4e>
 8017478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801747c:	b01d      	add	sp, #116	@ 0x74
 801747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017482:	89ab      	ldrh	r3, [r5, #12]
 8017484:	0598      	lsls	r0, r3, #22
 8017486:	d4f7      	bmi.n	8017478 <_vfiprintf_r+0x44>
 8017488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801748a:	f7ff fe7b 	bl	8017184 <__retarget_lock_release_recursive>
 801748e:	e7f3      	b.n	8017478 <_vfiprintf_r+0x44>
 8017490:	2300      	movs	r3, #0
 8017492:	9309      	str	r3, [sp, #36]	@ 0x24
 8017494:	2320      	movs	r3, #32
 8017496:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801749a:	f8cd 800c 	str.w	r8, [sp, #12]
 801749e:	2330      	movs	r3, #48	@ 0x30
 80174a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017650 <_vfiprintf_r+0x21c>
 80174a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80174a8:	f04f 0901 	mov.w	r9, #1
 80174ac:	4623      	mov	r3, r4
 80174ae:	469a      	mov	sl, r3
 80174b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174b4:	b10a      	cbz	r2, 80174ba <_vfiprintf_r+0x86>
 80174b6:	2a25      	cmp	r2, #37	@ 0x25
 80174b8:	d1f9      	bne.n	80174ae <_vfiprintf_r+0x7a>
 80174ba:	ebba 0b04 	subs.w	fp, sl, r4
 80174be:	d00b      	beq.n	80174d8 <_vfiprintf_r+0xa4>
 80174c0:	465b      	mov	r3, fp
 80174c2:	4622      	mov	r2, r4
 80174c4:	4629      	mov	r1, r5
 80174c6:	4630      	mov	r0, r6
 80174c8:	f7ff ffa1 	bl	801740e <__sfputs_r>
 80174cc:	3001      	adds	r0, #1
 80174ce:	f000 80a7 	beq.w	8017620 <_vfiprintf_r+0x1ec>
 80174d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174d4:	445a      	add	r2, fp
 80174d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80174d8:	f89a 3000 	ldrb.w	r3, [sl]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	f000 809f 	beq.w	8017620 <_vfiprintf_r+0x1ec>
 80174e2:	2300      	movs	r3, #0
 80174e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80174e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174ec:	f10a 0a01 	add.w	sl, sl, #1
 80174f0:	9304      	str	r3, [sp, #16]
 80174f2:	9307      	str	r3, [sp, #28]
 80174f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80174f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80174fa:	4654      	mov	r4, sl
 80174fc:	2205      	movs	r2, #5
 80174fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017502:	4853      	ldr	r0, [pc, #332]	@ (8017650 <_vfiprintf_r+0x21c>)
 8017504:	f7e8 fe84 	bl	8000210 <memchr>
 8017508:	9a04      	ldr	r2, [sp, #16]
 801750a:	b9d8      	cbnz	r0, 8017544 <_vfiprintf_r+0x110>
 801750c:	06d1      	lsls	r1, r2, #27
 801750e:	bf44      	itt	mi
 8017510:	2320      	movmi	r3, #32
 8017512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017516:	0713      	lsls	r3, r2, #28
 8017518:	bf44      	itt	mi
 801751a:	232b      	movmi	r3, #43	@ 0x2b
 801751c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017520:	f89a 3000 	ldrb.w	r3, [sl]
 8017524:	2b2a      	cmp	r3, #42	@ 0x2a
 8017526:	d015      	beq.n	8017554 <_vfiprintf_r+0x120>
 8017528:	9a07      	ldr	r2, [sp, #28]
 801752a:	4654      	mov	r4, sl
 801752c:	2000      	movs	r0, #0
 801752e:	f04f 0c0a 	mov.w	ip, #10
 8017532:	4621      	mov	r1, r4
 8017534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017538:	3b30      	subs	r3, #48	@ 0x30
 801753a:	2b09      	cmp	r3, #9
 801753c:	d94b      	bls.n	80175d6 <_vfiprintf_r+0x1a2>
 801753e:	b1b0      	cbz	r0, 801756e <_vfiprintf_r+0x13a>
 8017540:	9207      	str	r2, [sp, #28]
 8017542:	e014      	b.n	801756e <_vfiprintf_r+0x13a>
 8017544:	eba0 0308 	sub.w	r3, r0, r8
 8017548:	fa09 f303 	lsl.w	r3, r9, r3
 801754c:	4313      	orrs	r3, r2
 801754e:	9304      	str	r3, [sp, #16]
 8017550:	46a2      	mov	sl, r4
 8017552:	e7d2      	b.n	80174fa <_vfiprintf_r+0xc6>
 8017554:	9b03      	ldr	r3, [sp, #12]
 8017556:	1d19      	adds	r1, r3, #4
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	9103      	str	r1, [sp, #12]
 801755c:	2b00      	cmp	r3, #0
 801755e:	bfbb      	ittet	lt
 8017560:	425b      	neglt	r3, r3
 8017562:	f042 0202 	orrlt.w	r2, r2, #2
 8017566:	9307      	strge	r3, [sp, #28]
 8017568:	9307      	strlt	r3, [sp, #28]
 801756a:	bfb8      	it	lt
 801756c:	9204      	strlt	r2, [sp, #16]
 801756e:	7823      	ldrb	r3, [r4, #0]
 8017570:	2b2e      	cmp	r3, #46	@ 0x2e
 8017572:	d10a      	bne.n	801758a <_vfiprintf_r+0x156>
 8017574:	7863      	ldrb	r3, [r4, #1]
 8017576:	2b2a      	cmp	r3, #42	@ 0x2a
 8017578:	d132      	bne.n	80175e0 <_vfiprintf_r+0x1ac>
 801757a:	9b03      	ldr	r3, [sp, #12]
 801757c:	1d1a      	adds	r2, r3, #4
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	9203      	str	r2, [sp, #12]
 8017582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017586:	3402      	adds	r4, #2
 8017588:	9305      	str	r3, [sp, #20]
 801758a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017660 <_vfiprintf_r+0x22c>
 801758e:	7821      	ldrb	r1, [r4, #0]
 8017590:	2203      	movs	r2, #3
 8017592:	4650      	mov	r0, sl
 8017594:	f7e8 fe3c 	bl	8000210 <memchr>
 8017598:	b138      	cbz	r0, 80175aa <_vfiprintf_r+0x176>
 801759a:	9b04      	ldr	r3, [sp, #16]
 801759c:	eba0 000a 	sub.w	r0, r0, sl
 80175a0:	2240      	movs	r2, #64	@ 0x40
 80175a2:	4082      	lsls	r2, r0
 80175a4:	4313      	orrs	r3, r2
 80175a6:	3401      	adds	r4, #1
 80175a8:	9304      	str	r3, [sp, #16]
 80175aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175ae:	4829      	ldr	r0, [pc, #164]	@ (8017654 <_vfiprintf_r+0x220>)
 80175b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80175b4:	2206      	movs	r2, #6
 80175b6:	f7e8 fe2b 	bl	8000210 <memchr>
 80175ba:	2800      	cmp	r0, #0
 80175bc:	d03f      	beq.n	801763e <_vfiprintf_r+0x20a>
 80175be:	4b26      	ldr	r3, [pc, #152]	@ (8017658 <_vfiprintf_r+0x224>)
 80175c0:	bb1b      	cbnz	r3, 801760a <_vfiprintf_r+0x1d6>
 80175c2:	9b03      	ldr	r3, [sp, #12]
 80175c4:	3307      	adds	r3, #7
 80175c6:	f023 0307 	bic.w	r3, r3, #7
 80175ca:	3308      	adds	r3, #8
 80175cc:	9303      	str	r3, [sp, #12]
 80175ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175d0:	443b      	add	r3, r7
 80175d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80175d4:	e76a      	b.n	80174ac <_vfiprintf_r+0x78>
 80175d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80175da:	460c      	mov	r4, r1
 80175dc:	2001      	movs	r0, #1
 80175de:	e7a8      	b.n	8017532 <_vfiprintf_r+0xfe>
 80175e0:	2300      	movs	r3, #0
 80175e2:	3401      	adds	r4, #1
 80175e4:	9305      	str	r3, [sp, #20]
 80175e6:	4619      	mov	r1, r3
 80175e8:	f04f 0c0a 	mov.w	ip, #10
 80175ec:	4620      	mov	r0, r4
 80175ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175f2:	3a30      	subs	r2, #48	@ 0x30
 80175f4:	2a09      	cmp	r2, #9
 80175f6:	d903      	bls.n	8017600 <_vfiprintf_r+0x1cc>
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d0c6      	beq.n	801758a <_vfiprintf_r+0x156>
 80175fc:	9105      	str	r1, [sp, #20]
 80175fe:	e7c4      	b.n	801758a <_vfiprintf_r+0x156>
 8017600:	fb0c 2101 	mla	r1, ip, r1, r2
 8017604:	4604      	mov	r4, r0
 8017606:	2301      	movs	r3, #1
 8017608:	e7f0      	b.n	80175ec <_vfiprintf_r+0x1b8>
 801760a:	ab03      	add	r3, sp, #12
 801760c:	9300      	str	r3, [sp, #0]
 801760e:	462a      	mov	r2, r5
 8017610:	4b12      	ldr	r3, [pc, #72]	@ (801765c <_vfiprintf_r+0x228>)
 8017612:	a904      	add	r1, sp, #16
 8017614:	4630      	mov	r0, r6
 8017616:	f3af 8000 	nop.w
 801761a:	4607      	mov	r7, r0
 801761c:	1c78      	adds	r0, r7, #1
 801761e:	d1d6      	bne.n	80175ce <_vfiprintf_r+0x19a>
 8017620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017622:	07d9      	lsls	r1, r3, #31
 8017624:	d405      	bmi.n	8017632 <_vfiprintf_r+0x1fe>
 8017626:	89ab      	ldrh	r3, [r5, #12]
 8017628:	059a      	lsls	r2, r3, #22
 801762a:	d402      	bmi.n	8017632 <_vfiprintf_r+0x1fe>
 801762c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801762e:	f7ff fda9 	bl	8017184 <__retarget_lock_release_recursive>
 8017632:	89ab      	ldrh	r3, [r5, #12]
 8017634:	065b      	lsls	r3, r3, #25
 8017636:	f53f af1f 	bmi.w	8017478 <_vfiprintf_r+0x44>
 801763a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801763c:	e71e      	b.n	801747c <_vfiprintf_r+0x48>
 801763e:	ab03      	add	r3, sp, #12
 8017640:	9300      	str	r3, [sp, #0]
 8017642:	462a      	mov	r2, r5
 8017644:	4b05      	ldr	r3, [pc, #20]	@ (801765c <_vfiprintf_r+0x228>)
 8017646:	a904      	add	r1, sp, #16
 8017648:	4630      	mov	r0, r6
 801764a:	f000 f879 	bl	8017740 <_printf_i>
 801764e:	e7e4      	b.n	801761a <_vfiprintf_r+0x1e6>
 8017650:	0801ac0f 	.word	0x0801ac0f
 8017654:	0801ac19 	.word	0x0801ac19
 8017658:	00000000 	.word	0x00000000
 801765c:	0801740f 	.word	0x0801740f
 8017660:	0801ac15 	.word	0x0801ac15

08017664 <_printf_common>:
 8017664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017668:	4616      	mov	r6, r2
 801766a:	4698      	mov	r8, r3
 801766c:	688a      	ldr	r2, [r1, #8]
 801766e:	690b      	ldr	r3, [r1, #16]
 8017670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017674:	4293      	cmp	r3, r2
 8017676:	bfb8      	it	lt
 8017678:	4613      	movlt	r3, r2
 801767a:	6033      	str	r3, [r6, #0]
 801767c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017680:	4607      	mov	r7, r0
 8017682:	460c      	mov	r4, r1
 8017684:	b10a      	cbz	r2, 801768a <_printf_common+0x26>
 8017686:	3301      	adds	r3, #1
 8017688:	6033      	str	r3, [r6, #0]
 801768a:	6823      	ldr	r3, [r4, #0]
 801768c:	0699      	lsls	r1, r3, #26
 801768e:	bf42      	ittt	mi
 8017690:	6833      	ldrmi	r3, [r6, #0]
 8017692:	3302      	addmi	r3, #2
 8017694:	6033      	strmi	r3, [r6, #0]
 8017696:	6825      	ldr	r5, [r4, #0]
 8017698:	f015 0506 	ands.w	r5, r5, #6
 801769c:	d106      	bne.n	80176ac <_printf_common+0x48>
 801769e:	f104 0a19 	add.w	sl, r4, #25
 80176a2:	68e3      	ldr	r3, [r4, #12]
 80176a4:	6832      	ldr	r2, [r6, #0]
 80176a6:	1a9b      	subs	r3, r3, r2
 80176a8:	42ab      	cmp	r3, r5
 80176aa:	dc26      	bgt.n	80176fa <_printf_common+0x96>
 80176ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80176b0:	6822      	ldr	r2, [r4, #0]
 80176b2:	3b00      	subs	r3, #0
 80176b4:	bf18      	it	ne
 80176b6:	2301      	movne	r3, #1
 80176b8:	0692      	lsls	r2, r2, #26
 80176ba:	d42b      	bmi.n	8017714 <_printf_common+0xb0>
 80176bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80176c0:	4641      	mov	r1, r8
 80176c2:	4638      	mov	r0, r7
 80176c4:	47c8      	blx	r9
 80176c6:	3001      	adds	r0, #1
 80176c8:	d01e      	beq.n	8017708 <_printf_common+0xa4>
 80176ca:	6823      	ldr	r3, [r4, #0]
 80176cc:	6922      	ldr	r2, [r4, #16]
 80176ce:	f003 0306 	and.w	r3, r3, #6
 80176d2:	2b04      	cmp	r3, #4
 80176d4:	bf02      	ittt	eq
 80176d6:	68e5      	ldreq	r5, [r4, #12]
 80176d8:	6833      	ldreq	r3, [r6, #0]
 80176da:	1aed      	subeq	r5, r5, r3
 80176dc:	68a3      	ldr	r3, [r4, #8]
 80176de:	bf0c      	ite	eq
 80176e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80176e4:	2500      	movne	r5, #0
 80176e6:	4293      	cmp	r3, r2
 80176e8:	bfc4      	itt	gt
 80176ea:	1a9b      	subgt	r3, r3, r2
 80176ec:	18ed      	addgt	r5, r5, r3
 80176ee:	2600      	movs	r6, #0
 80176f0:	341a      	adds	r4, #26
 80176f2:	42b5      	cmp	r5, r6
 80176f4:	d11a      	bne.n	801772c <_printf_common+0xc8>
 80176f6:	2000      	movs	r0, #0
 80176f8:	e008      	b.n	801770c <_printf_common+0xa8>
 80176fa:	2301      	movs	r3, #1
 80176fc:	4652      	mov	r2, sl
 80176fe:	4641      	mov	r1, r8
 8017700:	4638      	mov	r0, r7
 8017702:	47c8      	blx	r9
 8017704:	3001      	adds	r0, #1
 8017706:	d103      	bne.n	8017710 <_printf_common+0xac>
 8017708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017710:	3501      	adds	r5, #1
 8017712:	e7c6      	b.n	80176a2 <_printf_common+0x3e>
 8017714:	18e1      	adds	r1, r4, r3
 8017716:	1c5a      	adds	r2, r3, #1
 8017718:	2030      	movs	r0, #48	@ 0x30
 801771a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801771e:	4422      	add	r2, r4
 8017720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017728:	3302      	adds	r3, #2
 801772a:	e7c7      	b.n	80176bc <_printf_common+0x58>
 801772c:	2301      	movs	r3, #1
 801772e:	4622      	mov	r2, r4
 8017730:	4641      	mov	r1, r8
 8017732:	4638      	mov	r0, r7
 8017734:	47c8      	blx	r9
 8017736:	3001      	adds	r0, #1
 8017738:	d0e6      	beq.n	8017708 <_printf_common+0xa4>
 801773a:	3601      	adds	r6, #1
 801773c:	e7d9      	b.n	80176f2 <_printf_common+0x8e>
	...

08017740 <_printf_i>:
 8017740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017744:	7e0f      	ldrb	r7, [r1, #24]
 8017746:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017748:	2f78      	cmp	r7, #120	@ 0x78
 801774a:	4691      	mov	r9, r2
 801774c:	4680      	mov	r8, r0
 801774e:	460c      	mov	r4, r1
 8017750:	469a      	mov	sl, r3
 8017752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017756:	d807      	bhi.n	8017768 <_printf_i+0x28>
 8017758:	2f62      	cmp	r7, #98	@ 0x62
 801775a:	d80a      	bhi.n	8017772 <_printf_i+0x32>
 801775c:	2f00      	cmp	r7, #0
 801775e:	f000 80d1 	beq.w	8017904 <_printf_i+0x1c4>
 8017762:	2f58      	cmp	r7, #88	@ 0x58
 8017764:	f000 80b8 	beq.w	80178d8 <_printf_i+0x198>
 8017768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801776c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017770:	e03a      	b.n	80177e8 <_printf_i+0xa8>
 8017772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017776:	2b15      	cmp	r3, #21
 8017778:	d8f6      	bhi.n	8017768 <_printf_i+0x28>
 801777a:	a101      	add	r1, pc, #4	@ (adr r1, 8017780 <_printf_i+0x40>)
 801777c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017780:	080177d9 	.word	0x080177d9
 8017784:	080177ed 	.word	0x080177ed
 8017788:	08017769 	.word	0x08017769
 801778c:	08017769 	.word	0x08017769
 8017790:	08017769 	.word	0x08017769
 8017794:	08017769 	.word	0x08017769
 8017798:	080177ed 	.word	0x080177ed
 801779c:	08017769 	.word	0x08017769
 80177a0:	08017769 	.word	0x08017769
 80177a4:	08017769 	.word	0x08017769
 80177a8:	08017769 	.word	0x08017769
 80177ac:	080178eb 	.word	0x080178eb
 80177b0:	08017817 	.word	0x08017817
 80177b4:	080178a5 	.word	0x080178a5
 80177b8:	08017769 	.word	0x08017769
 80177bc:	08017769 	.word	0x08017769
 80177c0:	0801790d 	.word	0x0801790d
 80177c4:	08017769 	.word	0x08017769
 80177c8:	08017817 	.word	0x08017817
 80177cc:	08017769 	.word	0x08017769
 80177d0:	08017769 	.word	0x08017769
 80177d4:	080178ad 	.word	0x080178ad
 80177d8:	6833      	ldr	r3, [r6, #0]
 80177da:	1d1a      	adds	r2, r3, #4
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	6032      	str	r2, [r6, #0]
 80177e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80177e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80177e8:	2301      	movs	r3, #1
 80177ea:	e09c      	b.n	8017926 <_printf_i+0x1e6>
 80177ec:	6833      	ldr	r3, [r6, #0]
 80177ee:	6820      	ldr	r0, [r4, #0]
 80177f0:	1d19      	adds	r1, r3, #4
 80177f2:	6031      	str	r1, [r6, #0]
 80177f4:	0606      	lsls	r6, r0, #24
 80177f6:	d501      	bpl.n	80177fc <_printf_i+0xbc>
 80177f8:	681d      	ldr	r5, [r3, #0]
 80177fa:	e003      	b.n	8017804 <_printf_i+0xc4>
 80177fc:	0645      	lsls	r5, r0, #25
 80177fe:	d5fb      	bpl.n	80177f8 <_printf_i+0xb8>
 8017800:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017804:	2d00      	cmp	r5, #0
 8017806:	da03      	bge.n	8017810 <_printf_i+0xd0>
 8017808:	232d      	movs	r3, #45	@ 0x2d
 801780a:	426d      	negs	r5, r5
 801780c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017810:	4858      	ldr	r0, [pc, #352]	@ (8017974 <_printf_i+0x234>)
 8017812:	230a      	movs	r3, #10
 8017814:	e011      	b.n	801783a <_printf_i+0xfa>
 8017816:	6821      	ldr	r1, [r4, #0]
 8017818:	6833      	ldr	r3, [r6, #0]
 801781a:	0608      	lsls	r0, r1, #24
 801781c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017820:	d402      	bmi.n	8017828 <_printf_i+0xe8>
 8017822:	0649      	lsls	r1, r1, #25
 8017824:	bf48      	it	mi
 8017826:	b2ad      	uxthmi	r5, r5
 8017828:	2f6f      	cmp	r7, #111	@ 0x6f
 801782a:	4852      	ldr	r0, [pc, #328]	@ (8017974 <_printf_i+0x234>)
 801782c:	6033      	str	r3, [r6, #0]
 801782e:	bf14      	ite	ne
 8017830:	230a      	movne	r3, #10
 8017832:	2308      	moveq	r3, #8
 8017834:	2100      	movs	r1, #0
 8017836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801783a:	6866      	ldr	r6, [r4, #4]
 801783c:	60a6      	str	r6, [r4, #8]
 801783e:	2e00      	cmp	r6, #0
 8017840:	db05      	blt.n	801784e <_printf_i+0x10e>
 8017842:	6821      	ldr	r1, [r4, #0]
 8017844:	432e      	orrs	r6, r5
 8017846:	f021 0104 	bic.w	r1, r1, #4
 801784a:	6021      	str	r1, [r4, #0]
 801784c:	d04b      	beq.n	80178e6 <_printf_i+0x1a6>
 801784e:	4616      	mov	r6, r2
 8017850:	fbb5 f1f3 	udiv	r1, r5, r3
 8017854:	fb03 5711 	mls	r7, r3, r1, r5
 8017858:	5dc7      	ldrb	r7, [r0, r7]
 801785a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801785e:	462f      	mov	r7, r5
 8017860:	42bb      	cmp	r3, r7
 8017862:	460d      	mov	r5, r1
 8017864:	d9f4      	bls.n	8017850 <_printf_i+0x110>
 8017866:	2b08      	cmp	r3, #8
 8017868:	d10b      	bne.n	8017882 <_printf_i+0x142>
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	07df      	lsls	r7, r3, #31
 801786e:	d508      	bpl.n	8017882 <_printf_i+0x142>
 8017870:	6923      	ldr	r3, [r4, #16]
 8017872:	6861      	ldr	r1, [r4, #4]
 8017874:	4299      	cmp	r1, r3
 8017876:	bfde      	ittt	le
 8017878:	2330      	movle	r3, #48	@ 0x30
 801787a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801787e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017882:	1b92      	subs	r2, r2, r6
 8017884:	6122      	str	r2, [r4, #16]
 8017886:	f8cd a000 	str.w	sl, [sp]
 801788a:	464b      	mov	r3, r9
 801788c:	aa03      	add	r2, sp, #12
 801788e:	4621      	mov	r1, r4
 8017890:	4640      	mov	r0, r8
 8017892:	f7ff fee7 	bl	8017664 <_printf_common>
 8017896:	3001      	adds	r0, #1
 8017898:	d14a      	bne.n	8017930 <_printf_i+0x1f0>
 801789a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801789e:	b004      	add	sp, #16
 80178a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178a4:	6823      	ldr	r3, [r4, #0]
 80178a6:	f043 0320 	orr.w	r3, r3, #32
 80178aa:	6023      	str	r3, [r4, #0]
 80178ac:	4832      	ldr	r0, [pc, #200]	@ (8017978 <_printf_i+0x238>)
 80178ae:	2778      	movs	r7, #120	@ 0x78
 80178b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80178b4:	6823      	ldr	r3, [r4, #0]
 80178b6:	6831      	ldr	r1, [r6, #0]
 80178b8:	061f      	lsls	r7, r3, #24
 80178ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80178be:	d402      	bmi.n	80178c6 <_printf_i+0x186>
 80178c0:	065f      	lsls	r7, r3, #25
 80178c2:	bf48      	it	mi
 80178c4:	b2ad      	uxthmi	r5, r5
 80178c6:	6031      	str	r1, [r6, #0]
 80178c8:	07d9      	lsls	r1, r3, #31
 80178ca:	bf44      	itt	mi
 80178cc:	f043 0320 	orrmi.w	r3, r3, #32
 80178d0:	6023      	strmi	r3, [r4, #0]
 80178d2:	b11d      	cbz	r5, 80178dc <_printf_i+0x19c>
 80178d4:	2310      	movs	r3, #16
 80178d6:	e7ad      	b.n	8017834 <_printf_i+0xf4>
 80178d8:	4826      	ldr	r0, [pc, #152]	@ (8017974 <_printf_i+0x234>)
 80178da:	e7e9      	b.n	80178b0 <_printf_i+0x170>
 80178dc:	6823      	ldr	r3, [r4, #0]
 80178de:	f023 0320 	bic.w	r3, r3, #32
 80178e2:	6023      	str	r3, [r4, #0]
 80178e4:	e7f6      	b.n	80178d4 <_printf_i+0x194>
 80178e6:	4616      	mov	r6, r2
 80178e8:	e7bd      	b.n	8017866 <_printf_i+0x126>
 80178ea:	6833      	ldr	r3, [r6, #0]
 80178ec:	6825      	ldr	r5, [r4, #0]
 80178ee:	6961      	ldr	r1, [r4, #20]
 80178f0:	1d18      	adds	r0, r3, #4
 80178f2:	6030      	str	r0, [r6, #0]
 80178f4:	062e      	lsls	r6, r5, #24
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	d501      	bpl.n	80178fe <_printf_i+0x1be>
 80178fa:	6019      	str	r1, [r3, #0]
 80178fc:	e002      	b.n	8017904 <_printf_i+0x1c4>
 80178fe:	0668      	lsls	r0, r5, #25
 8017900:	d5fb      	bpl.n	80178fa <_printf_i+0x1ba>
 8017902:	8019      	strh	r1, [r3, #0]
 8017904:	2300      	movs	r3, #0
 8017906:	6123      	str	r3, [r4, #16]
 8017908:	4616      	mov	r6, r2
 801790a:	e7bc      	b.n	8017886 <_printf_i+0x146>
 801790c:	6833      	ldr	r3, [r6, #0]
 801790e:	1d1a      	adds	r2, r3, #4
 8017910:	6032      	str	r2, [r6, #0]
 8017912:	681e      	ldr	r6, [r3, #0]
 8017914:	6862      	ldr	r2, [r4, #4]
 8017916:	2100      	movs	r1, #0
 8017918:	4630      	mov	r0, r6
 801791a:	f7e8 fc79 	bl	8000210 <memchr>
 801791e:	b108      	cbz	r0, 8017924 <_printf_i+0x1e4>
 8017920:	1b80      	subs	r0, r0, r6
 8017922:	6060      	str	r0, [r4, #4]
 8017924:	6863      	ldr	r3, [r4, #4]
 8017926:	6123      	str	r3, [r4, #16]
 8017928:	2300      	movs	r3, #0
 801792a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801792e:	e7aa      	b.n	8017886 <_printf_i+0x146>
 8017930:	6923      	ldr	r3, [r4, #16]
 8017932:	4632      	mov	r2, r6
 8017934:	4649      	mov	r1, r9
 8017936:	4640      	mov	r0, r8
 8017938:	47d0      	blx	sl
 801793a:	3001      	adds	r0, #1
 801793c:	d0ad      	beq.n	801789a <_printf_i+0x15a>
 801793e:	6823      	ldr	r3, [r4, #0]
 8017940:	079b      	lsls	r3, r3, #30
 8017942:	d413      	bmi.n	801796c <_printf_i+0x22c>
 8017944:	68e0      	ldr	r0, [r4, #12]
 8017946:	9b03      	ldr	r3, [sp, #12]
 8017948:	4298      	cmp	r0, r3
 801794a:	bfb8      	it	lt
 801794c:	4618      	movlt	r0, r3
 801794e:	e7a6      	b.n	801789e <_printf_i+0x15e>
 8017950:	2301      	movs	r3, #1
 8017952:	4632      	mov	r2, r6
 8017954:	4649      	mov	r1, r9
 8017956:	4640      	mov	r0, r8
 8017958:	47d0      	blx	sl
 801795a:	3001      	adds	r0, #1
 801795c:	d09d      	beq.n	801789a <_printf_i+0x15a>
 801795e:	3501      	adds	r5, #1
 8017960:	68e3      	ldr	r3, [r4, #12]
 8017962:	9903      	ldr	r1, [sp, #12]
 8017964:	1a5b      	subs	r3, r3, r1
 8017966:	42ab      	cmp	r3, r5
 8017968:	dcf2      	bgt.n	8017950 <_printf_i+0x210>
 801796a:	e7eb      	b.n	8017944 <_printf_i+0x204>
 801796c:	2500      	movs	r5, #0
 801796e:	f104 0619 	add.w	r6, r4, #25
 8017972:	e7f5      	b.n	8017960 <_printf_i+0x220>
 8017974:	0801ac20 	.word	0x0801ac20
 8017978:	0801ac31 	.word	0x0801ac31

0801797c <__sflush_r>:
 801797c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017984:	0716      	lsls	r6, r2, #28
 8017986:	4605      	mov	r5, r0
 8017988:	460c      	mov	r4, r1
 801798a:	d454      	bmi.n	8017a36 <__sflush_r+0xba>
 801798c:	684b      	ldr	r3, [r1, #4]
 801798e:	2b00      	cmp	r3, #0
 8017990:	dc02      	bgt.n	8017998 <__sflush_r+0x1c>
 8017992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017994:	2b00      	cmp	r3, #0
 8017996:	dd48      	ble.n	8017a2a <__sflush_r+0xae>
 8017998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801799a:	2e00      	cmp	r6, #0
 801799c:	d045      	beq.n	8017a2a <__sflush_r+0xae>
 801799e:	2300      	movs	r3, #0
 80179a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80179a4:	682f      	ldr	r7, [r5, #0]
 80179a6:	6a21      	ldr	r1, [r4, #32]
 80179a8:	602b      	str	r3, [r5, #0]
 80179aa:	d030      	beq.n	8017a0e <__sflush_r+0x92>
 80179ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80179ae:	89a3      	ldrh	r3, [r4, #12]
 80179b0:	0759      	lsls	r1, r3, #29
 80179b2:	d505      	bpl.n	80179c0 <__sflush_r+0x44>
 80179b4:	6863      	ldr	r3, [r4, #4]
 80179b6:	1ad2      	subs	r2, r2, r3
 80179b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80179ba:	b10b      	cbz	r3, 80179c0 <__sflush_r+0x44>
 80179bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80179be:	1ad2      	subs	r2, r2, r3
 80179c0:	2300      	movs	r3, #0
 80179c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179c4:	6a21      	ldr	r1, [r4, #32]
 80179c6:	4628      	mov	r0, r5
 80179c8:	47b0      	blx	r6
 80179ca:	1c43      	adds	r3, r0, #1
 80179cc:	89a3      	ldrh	r3, [r4, #12]
 80179ce:	d106      	bne.n	80179de <__sflush_r+0x62>
 80179d0:	6829      	ldr	r1, [r5, #0]
 80179d2:	291d      	cmp	r1, #29
 80179d4:	d82b      	bhi.n	8017a2e <__sflush_r+0xb2>
 80179d6:	4a2a      	ldr	r2, [pc, #168]	@ (8017a80 <__sflush_r+0x104>)
 80179d8:	40ca      	lsrs	r2, r1
 80179da:	07d6      	lsls	r6, r2, #31
 80179dc:	d527      	bpl.n	8017a2e <__sflush_r+0xb2>
 80179de:	2200      	movs	r2, #0
 80179e0:	6062      	str	r2, [r4, #4]
 80179e2:	04d9      	lsls	r1, r3, #19
 80179e4:	6922      	ldr	r2, [r4, #16]
 80179e6:	6022      	str	r2, [r4, #0]
 80179e8:	d504      	bpl.n	80179f4 <__sflush_r+0x78>
 80179ea:	1c42      	adds	r2, r0, #1
 80179ec:	d101      	bne.n	80179f2 <__sflush_r+0x76>
 80179ee:	682b      	ldr	r3, [r5, #0]
 80179f0:	b903      	cbnz	r3, 80179f4 <__sflush_r+0x78>
 80179f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80179f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80179f6:	602f      	str	r7, [r5, #0]
 80179f8:	b1b9      	cbz	r1, 8017a2a <__sflush_r+0xae>
 80179fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80179fe:	4299      	cmp	r1, r3
 8017a00:	d002      	beq.n	8017a08 <__sflush_r+0x8c>
 8017a02:	4628      	mov	r0, r5
 8017a04:	f7ff fbec 	bl	80171e0 <_free_r>
 8017a08:	2300      	movs	r3, #0
 8017a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a0c:	e00d      	b.n	8017a2a <__sflush_r+0xae>
 8017a0e:	2301      	movs	r3, #1
 8017a10:	4628      	mov	r0, r5
 8017a12:	47b0      	blx	r6
 8017a14:	4602      	mov	r2, r0
 8017a16:	1c50      	adds	r0, r2, #1
 8017a18:	d1c9      	bne.n	80179ae <__sflush_r+0x32>
 8017a1a:	682b      	ldr	r3, [r5, #0]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d0c6      	beq.n	80179ae <__sflush_r+0x32>
 8017a20:	2b1d      	cmp	r3, #29
 8017a22:	d001      	beq.n	8017a28 <__sflush_r+0xac>
 8017a24:	2b16      	cmp	r3, #22
 8017a26:	d11e      	bne.n	8017a66 <__sflush_r+0xea>
 8017a28:	602f      	str	r7, [r5, #0]
 8017a2a:	2000      	movs	r0, #0
 8017a2c:	e022      	b.n	8017a74 <__sflush_r+0xf8>
 8017a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a32:	b21b      	sxth	r3, r3
 8017a34:	e01b      	b.n	8017a6e <__sflush_r+0xf2>
 8017a36:	690f      	ldr	r7, [r1, #16]
 8017a38:	2f00      	cmp	r7, #0
 8017a3a:	d0f6      	beq.n	8017a2a <__sflush_r+0xae>
 8017a3c:	0793      	lsls	r3, r2, #30
 8017a3e:	680e      	ldr	r6, [r1, #0]
 8017a40:	bf08      	it	eq
 8017a42:	694b      	ldreq	r3, [r1, #20]
 8017a44:	600f      	str	r7, [r1, #0]
 8017a46:	bf18      	it	ne
 8017a48:	2300      	movne	r3, #0
 8017a4a:	eba6 0807 	sub.w	r8, r6, r7
 8017a4e:	608b      	str	r3, [r1, #8]
 8017a50:	f1b8 0f00 	cmp.w	r8, #0
 8017a54:	dde9      	ble.n	8017a2a <__sflush_r+0xae>
 8017a56:	6a21      	ldr	r1, [r4, #32]
 8017a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a5a:	4643      	mov	r3, r8
 8017a5c:	463a      	mov	r2, r7
 8017a5e:	4628      	mov	r0, r5
 8017a60:	47b0      	blx	r6
 8017a62:	2800      	cmp	r0, #0
 8017a64:	dc08      	bgt.n	8017a78 <__sflush_r+0xfc>
 8017a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a6e:	81a3      	strh	r3, [r4, #12]
 8017a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a78:	4407      	add	r7, r0
 8017a7a:	eba8 0800 	sub.w	r8, r8, r0
 8017a7e:	e7e7      	b.n	8017a50 <__sflush_r+0xd4>
 8017a80:	20400001 	.word	0x20400001

08017a84 <_fflush_r>:
 8017a84:	b538      	push	{r3, r4, r5, lr}
 8017a86:	690b      	ldr	r3, [r1, #16]
 8017a88:	4605      	mov	r5, r0
 8017a8a:	460c      	mov	r4, r1
 8017a8c:	b913      	cbnz	r3, 8017a94 <_fflush_r+0x10>
 8017a8e:	2500      	movs	r5, #0
 8017a90:	4628      	mov	r0, r5
 8017a92:	bd38      	pop	{r3, r4, r5, pc}
 8017a94:	b118      	cbz	r0, 8017a9e <_fflush_r+0x1a>
 8017a96:	6a03      	ldr	r3, [r0, #32]
 8017a98:	b90b      	cbnz	r3, 8017a9e <_fflush_r+0x1a>
 8017a9a:	f7ff f913 	bl	8016cc4 <__sinit>
 8017a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d0f3      	beq.n	8017a8e <_fflush_r+0xa>
 8017aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017aa8:	07d0      	lsls	r0, r2, #31
 8017aaa:	d404      	bmi.n	8017ab6 <_fflush_r+0x32>
 8017aac:	0599      	lsls	r1, r3, #22
 8017aae:	d402      	bmi.n	8017ab6 <_fflush_r+0x32>
 8017ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ab2:	f7ff fb66 	bl	8017182 <__retarget_lock_acquire_recursive>
 8017ab6:	4628      	mov	r0, r5
 8017ab8:	4621      	mov	r1, r4
 8017aba:	f7ff ff5f 	bl	801797c <__sflush_r>
 8017abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ac0:	07da      	lsls	r2, r3, #31
 8017ac2:	4605      	mov	r5, r0
 8017ac4:	d4e4      	bmi.n	8017a90 <_fflush_r+0xc>
 8017ac6:	89a3      	ldrh	r3, [r4, #12]
 8017ac8:	059b      	lsls	r3, r3, #22
 8017aca:	d4e1      	bmi.n	8017a90 <_fflush_r+0xc>
 8017acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ace:	f7ff fb59 	bl	8017184 <__retarget_lock_release_recursive>
 8017ad2:	e7dd      	b.n	8017a90 <_fflush_r+0xc>

08017ad4 <fiprintf>:
 8017ad4:	b40e      	push	{r1, r2, r3}
 8017ad6:	b503      	push	{r0, r1, lr}
 8017ad8:	4601      	mov	r1, r0
 8017ada:	ab03      	add	r3, sp, #12
 8017adc:	4805      	ldr	r0, [pc, #20]	@ (8017af4 <fiprintf+0x20>)
 8017ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ae2:	6800      	ldr	r0, [r0, #0]
 8017ae4:	9301      	str	r3, [sp, #4]
 8017ae6:	f7ff fca5 	bl	8017434 <_vfiprintf_r>
 8017aea:	b002      	add	sp, #8
 8017aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8017af0:	b003      	add	sp, #12
 8017af2:	4770      	bx	lr
 8017af4:	2000003c 	.word	0x2000003c

08017af8 <__swhatbuf_r>:
 8017af8:	b570      	push	{r4, r5, r6, lr}
 8017afa:	460c      	mov	r4, r1
 8017afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b00:	2900      	cmp	r1, #0
 8017b02:	b096      	sub	sp, #88	@ 0x58
 8017b04:	4615      	mov	r5, r2
 8017b06:	461e      	mov	r6, r3
 8017b08:	da0d      	bge.n	8017b26 <__swhatbuf_r+0x2e>
 8017b0a:	89a3      	ldrh	r3, [r4, #12]
 8017b0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017b10:	f04f 0100 	mov.w	r1, #0
 8017b14:	bf14      	ite	ne
 8017b16:	2340      	movne	r3, #64	@ 0x40
 8017b18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017b1c:	2000      	movs	r0, #0
 8017b1e:	6031      	str	r1, [r6, #0]
 8017b20:	602b      	str	r3, [r5, #0]
 8017b22:	b016      	add	sp, #88	@ 0x58
 8017b24:	bd70      	pop	{r4, r5, r6, pc}
 8017b26:	466a      	mov	r2, sp
 8017b28:	f000 f848 	bl	8017bbc <_fstat_r>
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	dbec      	blt.n	8017b0a <__swhatbuf_r+0x12>
 8017b30:	9901      	ldr	r1, [sp, #4]
 8017b32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017b36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017b3a:	4259      	negs	r1, r3
 8017b3c:	4159      	adcs	r1, r3
 8017b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017b42:	e7eb      	b.n	8017b1c <__swhatbuf_r+0x24>

08017b44 <__smakebuf_r>:
 8017b44:	898b      	ldrh	r3, [r1, #12]
 8017b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b48:	079d      	lsls	r5, r3, #30
 8017b4a:	4606      	mov	r6, r0
 8017b4c:	460c      	mov	r4, r1
 8017b4e:	d507      	bpl.n	8017b60 <__smakebuf_r+0x1c>
 8017b50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017b54:	6023      	str	r3, [r4, #0]
 8017b56:	6123      	str	r3, [r4, #16]
 8017b58:	2301      	movs	r3, #1
 8017b5a:	6163      	str	r3, [r4, #20]
 8017b5c:	b003      	add	sp, #12
 8017b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b60:	ab01      	add	r3, sp, #4
 8017b62:	466a      	mov	r2, sp
 8017b64:	f7ff ffc8 	bl	8017af8 <__swhatbuf_r>
 8017b68:	9f00      	ldr	r7, [sp, #0]
 8017b6a:	4605      	mov	r5, r0
 8017b6c:	4639      	mov	r1, r7
 8017b6e:	4630      	mov	r0, r6
 8017b70:	f7ff fbaa 	bl	80172c8 <_malloc_r>
 8017b74:	b948      	cbnz	r0, 8017b8a <__smakebuf_r+0x46>
 8017b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b7a:	059a      	lsls	r2, r3, #22
 8017b7c:	d4ee      	bmi.n	8017b5c <__smakebuf_r+0x18>
 8017b7e:	f023 0303 	bic.w	r3, r3, #3
 8017b82:	f043 0302 	orr.w	r3, r3, #2
 8017b86:	81a3      	strh	r3, [r4, #12]
 8017b88:	e7e2      	b.n	8017b50 <__smakebuf_r+0xc>
 8017b8a:	89a3      	ldrh	r3, [r4, #12]
 8017b8c:	6020      	str	r0, [r4, #0]
 8017b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b92:	81a3      	strh	r3, [r4, #12]
 8017b94:	9b01      	ldr	r3, [sp, #4]
 8017b96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017b9a:	b15b      	cbz	r3, 8017bb4 <__smakebuf_r+0x70>
 8017b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ba0:	4630      	mov	r0, r6
 8017ba2:	f000 f81d 	bl	8017be0 <_isatty_r>
 8017ba6:	b128      	cbz	r0, 8017bb4 <__smakebuf_r+0x70>
 8017ba8:	89a3      	ldrh	r3, [r4, #12]
 8017baa:	f023 0303 	bic.w	r3, r3, #3
 8017bae:	f043 0301 	orr.w	r3, r3, #1
 8017bb2:	81a3      	strh	r3, [r4, #12]
 8017bb4:	89a3      	ldrh	r3, [r4, #12]
 8017bb6:	431d      	orrs	r5, r3
 8017bb8:	81a5      	strh	r5, [r4, #12]
 8017bba:	e7cf      	b.n	8017b5c <__smakebuf_r+0x18>

08017bbc <_fstat_r>:
 8017bbc:	b538      	push	{r3, r4, r5, lr}
 8017bbe:	4d07      	ldr	r5, [pc, #28]	@ (8017bdc <_fstat_r+0x20>)
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	4604      	mov	r4, r0
 8017bc4:	4608      	mov	r0, r1
 8017bc6:	4611      	mov	r1, r2
 8017bc8:	602b      	str	r3, [r5, #0]
 8017bca:	f7e9 ffa3 	bl	8001b14 <_fstat>
 8017bce:	1c43      	adds	r3, r0, #1
 8017bd0:	d102      	bne.n	8017bd8 <_fstat_r+0x1c>
 8017bd2:	682b      	ldr	r3, [r5, #0]
 8017bd4:	b103      	cbz	r3, 8017bd8 <_fstat_r+0x1c>
 8017bd6:	6023      	str	r3, [r4, #0]
 8017bd8:	bd38      	pop	{r3, r4, r5, pc}
 8017bda:	bf00      	nop
 8017bdc:	2000c98c 	.word	0x2000c98c

08017be0 <_isatty_r>:
 8017be0:	b538      	push	{r3, r4, r5, lr}
 8017be2:	4d06      	ldr	r5, [pc, #24]	@ (8017bfc <_isatty_r+0x1c>)
 8017be4:	2300      	movs	r3, #0
 8017be6:	4604      	mov	r4, r0
 8017be8:	4608      	mov	r0, r1
 8017bea:	602b      	str	r3, [r5, #0]
 8017bec:	f7e9 ffa2 	bl	8001b34 <_isatty>
 8017bf0:	1c43      	adds	r3, r0, #1
 8017bf2:	d102      	bne.n	8017bfa <_isatty_r+0x1a>
 8017bf4:	682b      	ldr	r3, [r5, #0]
 8017bf6:	b103      	cbz	r3, 8017bfa <_isatty_r+0x1a>
 8017bf8:	6023      	str	r3, [r4, #0]
 8017bfa:	bd38      	pop	{r3, r4, r5, pc}
 8017bfc:	2000c98c 	.word	0x2000c98c

08017c00 <_sbrk_r>:
 8017c00:	b538      	push	{r3, r4, r5, lr}
 8017c02:	4d06      	ldr	r5, [pc, #24]	@ (8017c1c <_sbrk_r+0x1c>)
 8017c04:	2300      	movs	r3, #0
 8017c06:	4604      	mov	r4, r0
 8017c08:	4608      	mov	r0, r1
 8017c0a:	602b      	str	r3, [r5, #0]
 8017c0c:	f7e9 ffaa 	bl	8001b64 <_sbrk>
 8017c10:	1c43      	adds	r3, r0, #1
 8017c12:	d102      	bne.n	8017c1a <_sbrk_r+0x1a>
 8017c14:	682b      	ldr	r3, [r5, #0]
 8017c16:	b103      	cbz	r3, 8017c1a <_sbrk_r+0x1a>
 8017c18:	6023      	str	r3, [r4, #0]
 8017c1a:	bd38      	pop	{r3, r4, r5, pc}
 8017c1c:	2000c98c 	.word	0x2000c98c

08017c20 <abort>:
 8017c20:	b508      	push	{r3, lr}
 8017c22:	2006      	movs	r0, #6
 8017c24:	f000 f82c 	bl	8017c80 <raise>
 8017c28:	2001      	movs	r0, #1
 8017c2a:	f7e9 ff3f 	bl	8001aac <_exit>

08017c2e <_raise_r>:
 8017c2e:	291f      	cmp	r1, #31
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	4605      	mov	r5, r0
 8017c34:	460c      	mov	r4, r1
 8017c36:	d904      	bls.n	8017c42 <_raise_r+0x14>
 8017c38:	2316      	movs	r3, #22
 8017c3a:	6003      	str	r3, [r0, #0]
 8017c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c40:	bd38      	pop	{r3, r4, r5, pc}
 8017c42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017c44:	b112      	cbz	r2, 8017c4c <_raise_r+0x1e>
 8017c46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c4a:	b94b      	cbnz	r3, 8017c60 <_raise_r+0x32>
 8017c4c:	4628      	mov	r0, r5
 8017c4e:	f000 f831 	bl	8017cb4 <_getpid_r>
 8017c52:	4622      	mov	r2, r4
 8017c54:	4601      	mov	r1, r0
 8017c56:	4628      	mov	r0, r5
 8017c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c5c:	f000 b818 	b.w	8017c90 <_kill_r>
 8017c60:	2b01      	cmp	r3, #1
 8017c62:	d00a      	beq.n	8017c7a <_raise_r+0x4c>
 8017c64:	1c59      	adds	r1, r3, #1
 8017c66:	d103      	bne.n	8017c70 <_raise_r+0x42>
 8017c68:	2316      	movs	r3, #22
 8017c6a:	6003      	str	r3, [r0, #0]
 8017c6c:	2001      	movs	r0, #1
 8017c6e:	e7e7      	b.n	8017c40 <_raise_r+0x12>
 8017c70:	2100      	movs	r1, #0
 8017c72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017c76:	4620      	mov	r0, r4
 8017c78:	4798      	blx	r3
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	e7e0      	b.n	8017c40 <_raise_r+0x12>
	...

08017c80 <raise>:
 8017c80:	4b02      	ldr	r3, [pc, #8]	@ (8017c8c <raise+0xc>)
 8017c82:	4601      	mov	r1, r0
 8017c84:	6818      	ldr	r0, [r3, #0]
 8017c86:	f7ff bfd2 	b.w	8017c2e <_raise_r>
 8017c8a:	bf00      	nop
 8017c8c:	2000003c 	.word	0x2000003c

08017c90 <_kill_r>:
 8017c90:	b538      	push	{r3, r4, r5, lr}
 8017c92:	4d07      	ldr	r5, [pc, #28]	@ (8017cb0 <_kill_r+0x20>)
 8017c94:	2300      	movs	r3, #0
 8017c96:	4604      	mov	r4, r0
 8017c98:	4608      	mov	r0, r1
 8017c9a:	4611      	mov	r1, r2
 8017c9c:	602b      	str	r3, [r5, #0]
 8017c9e:	f7e9 fef3 	bl	8001a88 <_kill>
 8017ca2:	1c43      	adds	r3, r0, #1
 8017ca4:	d102      	bne.n	8017cac <_kill_r+0x1c>
 8017ca6:	682b      	ldr	r3, [r5, #0]
 8017ca8:	b103      	cbz	r3, 8017cac <_kill_r+0x1c>
 8017caa:	6023      	str	r3, [r4, #0]
 8017cac:	bd38      	pop	{r3, r4, r5, pc}
 8017cae:	bf00      	nop
 8017cb0:	2000c98c 	.word	0x2000c98c

08017cb4 <_getpid_r>:
 8017cb4:	f7e9 bee0 	b.w	8001a78 <_getpid>

08017cb8 <_init>:
 8017cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cba:	bf00      	nop
 8017cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cbe:	bc08      	pop	{r3}
 8017cc0:	469e      	mov	lr, r3
 8017cc2:	4770      	bx	lr

08017cc4 <_fini>:
 8017cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cc6:	bf00      	nop
 8017cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cca:	bc08      	pop	{r3}
 8017ccc:	469e      	mov	lr, r3
 8017cce:	4770      	bx	lr
